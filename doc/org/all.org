* 知识点
** linux
  Linux文件锁flock
  查找%CPU>0.1降低它的nice值
  renice +10 `ps aux | awk '{ if ($3 > 0.1 && (id -u $1) > 0) print $2}'`
** commet
  comet实时推送
  [[http://www.ibm.com/developerworks/cn/web/wa-lo-comet/][Comet：基于 HTTP 长连接的“服务器推”技术]]
** videojs
   https://github.com/videojs/videojs.com
   http://docs.videojs.com/docs/guides/setup.html
** nginx
   sudo /etc/init.d/nginx reload
** web
   http://blog.jobbole.com/41950/
*** bootstrap
   一个前端开发框架其实就是一系列产品化的HTML/CSS/JavaScript组件的集合，我们可以在设计中使用它们。
   Bootstrap 主要基于 jQuery 进行 JavaScript 处理，支持 LESS 来做 CSS
   的扩展。Bootstrap 框架在布局、版式、控件、特效方面都非常让人满意，
   都预置了丰富的效果，极大方便了用户开发。在风格设置方面，还需要用户
   在下载时手动设置，可配置粒度非常细，相应也比较繁琐，不太直观，需要
   对 Bootstrap 非常熟悉配置起来才能得心应手。
*** nodejs+express
    npm install -g supervisor
    npm install -g express
    express -t ejs xxx && cd xxx && npm intall
    supervisor app.js
    localhost:3000

*** jQuery
    jQuery UI
    jQuery Mobile
** media
** network
   IPCAM, P2P，NAT, STUN, TURN, ICE, PJSIP, OPENSIPS, UDT， TCP, UDP
   SIP,SDP
*** NAT
    [[http://www.pjsip.org/][NAT traversal]]
    [[http://easydarwin.org/article/Streaming/47.html][crtmpserver流媒体服务器的介绍与搭建]]
    [[http://easydarwin.org/article/Streaming/64.html][视频监控P2P解决方案]]
    实现建议
    最后笔者给出几个技术方案的建议，有兴趣的朋友可以自己再去做深入研究，欢迎探讨。
1. NAT穿越库的选择，笔者推荐PJSIP，网路摄像机以及客户端都可以采用。
2. NAT穿越控制服务器的选择，笔者推荐OPENSIPS。
3. 可靠UDP传输方案的选择，推荐UDT。
*** STUN
    Simple Traversal of UDP over NATs，NAT 的UDP简单穿越）是一种网络协议，
    它允许位于NAT（或多重NAT）后的客户端找出自己的公网地址，查出自己位于
    哪种类型的NAT之后以及NAT为某一个本地端口所绑定的Internet端端口。
    这些信息被用来在两个同时处于NAT路由器之后的主机之间建立UDP通信。
    该协议由RFC 3489定义。目前RFC 3489协议已被RFC 5389协议所取代，新的
    协议中，将STUN定义为一个协助穿越NAT的工具，并不独立提供穿越的解决
    方案。它还有升级版本RFC 7350，目前正在完善中。
*** RTP/RTCP
    RTP协议通常运行在UDP层之上，二者共同完成运输层的功能。
    UDP提供复用及校验和服务，也就是通过分配不同的端口号传送多个RTP流。
    协议规定，RTP流使用偶数（2n）端口号，相应的RTCP流使用相邻的奇数
    （2n+1）端口号。因此，应用进程应在一对端口上接收RTP数据和RTCP
    控制数据，同时向另一对端口上接收RTP数据和RTCP控制数据。
    通常RTP的协议数据单元是用UDP分组来承载的。而且为了尽量减少时延，
    语音净荷通常都很短。
*** rtmp
**** nginx rtmp server
     [[https://obsproject.com/forum/resources/how-to-set-up-your-own-private-rtmp-server-using-nginx.50/][how-to-set-up-your-own-private-rtmp-server-using-nginx]]
     [[http://blog.csdn.net/redstarofsleep/article/details/45092147][nginx+nginx-rtmp-module+ffmpeg搭建流媒体服务器]]

     sudo apt-get install build-essential libpcre3 libpcre3-dev libssl-dev
     tar -zxvf nginx-*.*.*.tar.gz
     unzip nginx-rtmp-module.zip
     cd nginx
     ./configure --with-http_ssl_module --add-module=../nginx-rtmp-module-master
     make -j8
     sudo make install
     cat /usr/local/nginx/conf/nginx.conf

     http {
        # rtmp stat
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
        }
        location /stat.xsl {
            # you can move stat.xsl to a different location
            root /usr/build/nginx-rtmp-module;
        }

        # rtmp control
        location /control {
            rtmp_control all;
        }
        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
        }
     }

     rtmp {
         server {
             listen 1935;
             chunk_size 4096;

             application live {
                 live on;
                 record off;
             }
             application hls {
                 live on;
                 hls on;
                 hls_path /tmp/hls;
             }
         }
     }
     sudo /usr/local/nginx/sbin/nginx
     sudo /usr/local/nginx/sbin/nginx -s stop

**** ffmpeg push to rtmp server
     ffmpeg -f x11grab -follow_mouse centered -r 25 -s cif -i :0.0 -f flv rtmp://localhost/live
     ffmpeg -f video4linux2 -i /dev/video0 -c:v libx264 -an -f flv rtmp://localhost/myapp/mystream
     ffmpeg -re -i /var/Videos/test.mp4 -c copy -f flv rtmp://localhost/myapp/mystream
     ffmpeg -re -i /var/Videos/test.mp4 -f flv rtmp://localhost/myapp/mystream
     ffmpeg -re -i ~/Videos/1.mp4 -vcodec libx264 -vprofile baseline -acodec aac  -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://127.0.0.1:1935/live
     ffmpeg -re -i ~/Videos/1.mp4 -vcodec libx264 -vprofile baseline -acodec aac  -ar 44100 -strict -2 -ac 1 -f flv -s 1280x720 -q 10 rtmp://127.0.0.1:1935/hls/test
**** ffplay pull rtmp stream
     ffplay rtmp://localhost/live
     ffplay http://127.0.0.1/hls/test.m3u8
1，RTMP协议
（1）是流媒体协议。
（2）RTMP协议是 Adobe 的私有协议，未完全公开。
（3）RTMP协议一般传输的是 flv，f4v 格式流。
（4）RTMP一般在 TCP 1个通道上传输命令和数据。

2，RTSP协议
（1）是流媒体协议。
（2）RTSP协议是共有协议，并有专门机构做维护。.
（3）RTSP协议一般传输的是 ts、mp4 格式的流。
（4）RTSP传输一般需要 2-3 个通道，命令和数据通道分离。

3，HTTP协议
（1）不是是流媒体协议。
（2）HTTP协议是共有协议，并有专门机构做维护。
（3）HTTP协议没有特定的传输流。
（4）HTTP传输一般需要 2-3 个通道，命令和数据通道分离。
** android
- [[https://github.com/tyzlmjj/PagerBottomTabStrip][An bottom navigation bar for Android]]

* url
  [[http://vdn.apps.cntv.cn/api/liveback.do?channel=cctv1&starttime=201507250105&endtime=201507250245][获取cntv回放地址]]
