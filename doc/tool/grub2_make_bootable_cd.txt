# download
wget ftp://ftp.gnu.org/gnu/grub/grub-2.00.tar.xz
tar xvf grub-2.00.tar.xz

mkdir ~/grub2-bios ~/grub2-uefi
cd grub-2.00 && mkdir build build-uefi

# build
## compiler bios version
cd build && ../configure --prefix=$HOME/grub2-bios && make -j8 && make install
## compiler uefi version
cd ../build-uefi && ../configure --with-platform=efi --target=x86_64 --prefix=$HOME/grub2-uefi && make -j8 && make install

# make bin
## Bios
cd ~/grub2-bios
bin/grub-mkimage -p / -d ./lib/grub/i386-pc -O i386-pc \
	-o core.img biosdisk udf iso9660 reboot halt linux
cat ./lib/grub/i386-pc/cdboot.img ./core.img > ./grub2cd.bin
## UEFI
cd ~/grub2-uefi
bin/grub-mkimage \
	-d ./lib/grub/x86_64-efi \
	-p /efi/boot -O x86_64-efi \
	-o bootx64.efi ext2 fat ntfs part_msdos part_gpt search \
	search_fs_file search_fs_uuid linux acpi help reboot halt \
	usb usbms boot chain efi_gop efi_uga gfxterm png tga echo \
	udf ata pata \
#	-c preconfiguration.conf \

# make image
mkdir ~/image && cd ~/image && mkdir -p efi/boot boot
# copy linux bzImage initrd.gz to boot directory
cp ~/grub2-bios/grub2cd.bin ./
vim grub.cfg #用于grub2cd.bin cfg，根据image的目录结构配置cfg
#cp /boot/grub/grub.cfg .
dd if=/dev/zero of=efiboot.img bs=1M count=4
mkfs.vfat -F 32 efiboot.img
mount -o loop -t vfat efiboot.img /mnt/loop
mkdir -p /mnt/loop/efi/boot
cp ~/grub2-uefi/bootx64.efi /mnt/loop/efi/boot
umount /mnt/loop
vim efi/boot/grub.cfg #用于efi firmware使用的配置文件
genisoimage -A "Sample" -V "volume id" -J -joliet-long -r -v \
	-T -udf -o image.iso -b grub2cd.bin -no-emul-boot -boot-load-size 4 \
	-boot-info-table -eltorito-alt-boot -e efiboot.img -no-emul-boot . 
#-input-charsetutf8 
