cscope 15 $HOME/myspace/opengl/image-processing-opengl-and-shaders/glutcam               0002654089
	@YUV420P-OpenGL-GLSLang.c

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<uni°d.h
>

25 
	~<GL/gl.h
>

26 
	~<GL/gÀxt.h
>

27 
	~<SDL/SDL.h
>

29 
	gQuô
=0;

31 
	gB_WIDTH
=640;

32 
	gB_HEIGHT
=480;

34 
	$maö
(
˙t
,*
¨g
[])

36 
SDL_SurÁ˚
 *
Wö
=
NULL
;

37 
GLubyã
 *
Yãx
,*
Uãx
,*
Vãx
;

38 
SDL_Evít
 
evt
;

39 
i
;

40 
GLh™dÀARB
 
FSH™dÀ
,
PH™dÀ
;

41 *
s
;

42 
FILE
 *
Â
;

44 *
FProgøm
=

68 if(!
	`SDL_Inô
(
SDL_INIT_VIDEO
)) {

70 
	`SDL_GL_SëAâribuã
(
SDL_GL_DOUBLEBUFFER
,1);

72 
Wö
=
	`SDL_SëVideoMode
(
B_WIDTH
,
B_HEIGHT
,32,
SDL_HWSURFACE
|
SDL_ANYFORMAT
|
SDL_OPENGL
);

74 if(
Wö
) {

75 
	`glM©rixMode
(
GL_PROJECTION
);

76 
	`glLﬂdIdítôy
();

77 
	`glOπho
(0,
B_WIDTH
,0,
B_HEIGHT
,-1,1);

78 
	`glVõwp‹t
(0,0,
B_WIDTH
,
B_HEIGHT
);

79 
	`glCÀ¨Cﬁ‹
(0,0,0,0);

80 
	`glCﬁ‹3f
(1.0,0.84,0.0);

81 
	`glHöt
(
GL_POLYGON_SMOOTH_HINT
,
GL_NICEST
);

84 
PH™dÀ
=
	`glCª©eProgømObje˘ARB
();

85 
FSH™dÀ
=
	`glCª©eShadîObje˘ARB
(
GL_FRAGMENT_SHADER_ARB
);

88 
	`glShadîSour˚ARB
(
FSH™dÀ
,1,&
FProgøm
,
NULL
);

89 
	`glCompûeShadîARB
(
FSH™dÀ
);

92 
	`glGëObje˘P¨amëîivARB
(
FSH™dÀ
,
GL_OBJECT_COMPILE_STATUS_ARB
,&
i
);

93 
s
=
	`mÆloc
(32768);

94 
	`glGëInfoLogARB
(
FSH™dÀ
,32768,
NULL
,
s
);

95 
	`¥ötf
("CompûêLog: %s\n", 
s
);

96 
	`‰ì
(
s
);

99 
	`glAâachObje˘ARB
(
PH™dÀ
,
FSH™dÀ
);

100 
	`glLökProgømARB
(
PH™dÀ
);

103 
s
=
	`mÆloc
(32768);

104 
	`glGëInfoLogARB
(
PH™dÀ
,32768,
NULL
,
s
);

105 
	`¥ötf
("Lök Log: %s\n", 
s
);

106 
	`‰ì
(
s
);

109 
	`glU£ProgømObje˘ARB
(
PH™dÀ
);

112 
Yãx
=
	`mÆloc
(414720);

113 
Uãx
=
	`mÆloc
(103680);

114 
Vãx
=
	`mÆloc
(103680);

116 
Â
=
	`f›í
("Image.Y","rb");

117 
	`‰ód
(
Yãx
,414720,1,
Â
);

118 
	`f˛o£
(
Â
);

119 
Â
=
	`f›í
("Image.U","rb");

120 
	`‰ód
(
Uãx
,103680,1,
Â
);

121 
	`f˛o£
(
Â
);

122 
Â
=
	`f›í
("Image.V","rb");

123 
	`‰ód
(
Vãx
,103680,1,
Â
);

124 
	`f˛o£
(
Â
);

127 
	`glE«bÀ
(
GL_TEXTURE_2D
);

130 
	`glA˘iveTextuª
(
GL_TEXTURE1
);

131 
i
=
	`glGëUnif‹mLoˇti⁄ARB
(
PH™dÀ
,"Utex");

132 
	`glUnif‹m1iARB
(
i
,1);

133 
	`glBödTextuª
(
GL_TEXTURE_RECTANGLE_NV
,1);

135 
	`glTexP¨amëîi
(
GL_TEXTURE_RECTANGLE_NV
,
GL_TEXTURE_MAG_FILTER
,
GL_LINEAR
);

136 
	`glTexP¨amëîi
(
GL_TEXTURE_RECTANGLE_NV
,
GL_TEXTURE_MIN_FILTER
,
GL_LINEAR
);

137 
	`glTexEnvf
(
GL_TEXTURE_ENV
,
GL_TEXTURE_ENV_MODE
,
GL_DECAL
);

138 
	`glTexImage2D
(
GL_TEXTURE_RECTANGLE_NV
,0,
GL_LUMINANCE
,376,288,0,GL_LUMINANCE,
GL_UNSIGNED_BYTE
,
Uãx
);

141 
	`glA˘iveTextuª
(
GL_TEXTURE2
);

142 
i
=
	`glGëUnif‹mLoˇti⁄ARB
(
PH™dÀ
,"Vtex");

143 
	`glBödTextuª
(
GL_TEXTURE_RECTANGLE_NV
,2);

144 
	`glUnif‹m1iARB
(
i
,2);

146 
	`glTexP¨amëîi
(
GL_TEXTURE_RECTANGLE_NV
,
GL_TEXTURE_MAG_FILTER
,
GL_LINEAR
);

147 
	`glTexP¨amëîi
(
GL_TEXTURE_RECTANGLE_NV
,
GL_TEXTURE_MIN_FILTER
,
GL_LINEAR
);

148 
	`glTexEnvf
(
GL_TEXTURE_ENV
,
GL_TEXTURE_ENV_MODE
,
GL_DECAL
);

149 
	`glTexImage2D
(
GL_TEXTURE_RECTANGLE_NV
,0,
GL_LUMINANCE
,376,288,0,GL_LUMINANCE,
GL_UNSIGNED_BYTE
,
Vãx
);

152 
	`glA˘iveTextuª
(
GL_TEXTURE0
);

153 
i
=
	`glGëUnif‹mLoˇti⁄ARB
(
PH™dÀ
,"Ytex");

154 
	`glUnif‹m1iARB
(
i
,0);

155 
	`glBödTextuª
(
GL_TEXTURE_RECTANGLE_NV
,3);

157 
	`glTexP¨amëîi
(
GL_TEXTURE_RECTANGLE_NV
,
GL_TEXTURE_MAG_FILTER
,
GL_LINEAR
);

158 
	`glTexP¨amëîi
(
GL_TEXTURE_RECTANGLE_NV
,
GL_TEXTURE_MIN_FILTER
,
GL_LINEAR
);

159 
	`glTexEnvf
(
GL_TEXTURE_ENV
,
GL_TEXTURE_ENV_MODE
,
GL_DECAL
);

160 
	`glTexImage2D
(
GL_TEXTURE_RECTANGLE_NV
,0,
GL_LUMINANCE
,752,576,0,GL_LUMINANCE,
GL_UNSIGNED_BYTE
,
Yãx
);

163 !
Quô
) {

164 if(
	`SDL_PﬁlEvít
(&
evt
)) {

165 
evt
.
ty≥
) {

166 
SDL_KEYDOWN
:

167 
SDL_QUIT
:

168 
Quô
=1;

173 
	`glCÀ¨
(
GL_COLOR_BUFFER_BIT
);

177 
	`glBegö
(
GL_QUADS
);

178 
	`glTexCo‹d2i
(0,0);

179 
	`glVîãx2i
(0,0);

180 
	`glTexCo‹d2i
(720,0);

181 
	`glVîãx2i
(
B_WIDTH
,0);

182 
	`glTexCo‹d2i
(720,576);

183 
	`glVîãx2i
(
B_WIDTH
,
B_HEIGHT
);

184 
	`glTexCo‹d2i
(0,576);

185 
	`glVîãx2i
(0,
B_HEIGHT
);

186 
	`glEnd
();

190 
	`glFlush
();

191 
	`SDL_GL_Sw≠Buf„rs
();

193 
	`¶ìp
(1);

198 
	`glU£ProgømObje˘ARB
(0);

199 
	`glDñëeObje˘ARB
(
•rog
);

201 
	`‰ì
(
Yãx
);

202 
	`‰ì
(
Uãx
);

203 
	`‰ì
(
Vãx
);

206 
	`Ârötf
(
°dîr
,"U«bÀÅÿ¸óãÖrim¨y surÁ˚. \"%s\".\n",
	`SDL_GëEº‹
());

208 
	`SDL_Quô
();

210 
	`Ârötf
(
°dîr
,"Inôülißti⁄ faûed. \"%s\".\n",
	`SDL_GëEº‹
());

214 
	}
}

	@callbacks.c

51 
	~<°dio.h
>

52 
	~<°dlib.h
>

53 
	~<°rög.h
>

55 
	~<GL/gÀw.h
>

56 
	~<GL/glut.h
>

58 
	~"glutˇm.h
"

59 
	~"di•œy.h
"

60 
	~"ˇ∑bûôõs.h
"

61 
	~"ã°∑âîn.h
"

62 
	~"devi˚.h
"

63 
	~"shadî.h
"

64 
	~"c⁄åﬁs.h
"

66 
	~"ˇŒbacks.h
"

74 
	#INVERT_IMAGE_VERTICAL


	)

80 
	#INVERT_IMAGE_HORIZONTAL


	)

87 
	#FPS_STRINGLEN
 30

	)

92 
	#HISTOGRAM_LISTWIDTH
 16

	)

101 
	#HISTOGRAM_SIZE
 256

	)

106 
check_îr‹
(*
œbñ
);

114 
	emíu_£À˘i⁄_e


116 
	mMENU_EXIT
 = 0,

117 
	mMENU_DISPLAY_GREYSCALE
,

118 
	mMENU_DISPLAY_COLOR
,

119 
	mMENU_PASSTHRU_PROCESSING
,

120 
	mMENU_SHADER_LAPLACIAN
,

121 
	mMENU_CONVOLUTION_LAPLACIAN
,

122 
	mMENU_TOGGLE_HISTOGRAM


123 } 
	tMíu£À˘i⁄_t
;

130 
	sˇŒbacks_s


132 
Di•œyd©a_t
 * 
	mdi•œyd©a
;

133 
Sour˚∑øms_t
 * 
	msour˚∑øms
;

134 } 
	tCÆlback_t
;

150 
CÆlback_t
 
	gˇŒback
;

168 
GLöt
 
	gHi°ogøm
[
HISTOGRAM_SIZE
];

190 
GLÊﬂt
 
	gHi°ogøm_vîti˚s
[2 * 
HISTOGRAM_SIZE
];

210 
	gReˇlcuœã_hi°ogøm
 = 1;

227 
	gDøw_hi°ogøm
 = 0;

245 
	gC⁄vﬁve_œ∂acün
 = 0;

250 
Key
(
key
, 
mou£_x
, 
mou£_y
);

251 
Døw
();

252 * 
ˇ±uª_video_‰ame
(
Sour˚∑øms_t
 * 
sour˚∑øms
, * 
‰amesize
);

253 
døw_video_‰ame
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

254 
Di•œyd©a_t
 * 
di•œyd©a
);

255 
dump_hi°ogøm
(* 
œbñ
, 
GLöt
 
hi°ogøm
[], 
size
);

256 
døw_symbﬁogy
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

257 
Di•œyd©a_t
 * 
di•œyd©a
);

258 
døw_Âs_symbﬁogy
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

259 
Di•œyd©a_t
 * 
di•œyd©a
);

260 
ªndîBôm≠Såög
(
x
, 
y
, *
f⁄t
, *
°rög
);

261 
døw_hi°ogøm_symbﬁogy
(
GLöt
 
hi°ogøm
[], 
hi°ogøm_size
);

262 
ˇlcuœã_hi°ogøm_d©a
(
GLöt
 
hi°ogøm
[], 
hi°ogøm_size
);

263 
IdÀ
();

264 
£tup_míu
();

265 
¥o˚ss_míu_£À˘i⁄
(
£À˘i⁄
);

266 
toggÀ_hi°ogøm
();

267 
timî_fu˘i⁄
(
ign‹ed
);

325 
	$Key
(
key
, 
mou£_x
, 
mou£_y
)

327 
mou£_x
 +
mou£_y
;

328 
key
)

331 
	`íd_ˇ±uª_di•œy
(
ˇŒback
.
sour˚∑øms
,

332 
ˇŒback
.
di•œyd©a
);

333 
	`exô
(0);

346 
	`Ârötf
(
°dîr
, "W¨nög: ign‹ög u«ssig√d key %d\n", 
key
);

347 
	`Ârötf
(
°dîr
,

349 
__FUNCTION__
);

350 
	`Ârötf
(
°dîr
, " i¿%s.\n", 
__FILE__
);

351 
	`Ârötf
(
°dîr
, "Known keysáre:\n");

352 
	`Ârötf
(
°dîr
, "\t Escape --Éxit\n");

356 
	}
}

398 
	$Døw
()

403 
	`døw_video_‰ame
(
ˇŒback
.
sour˚∑øms
, cÆlback.
di•œyd©a
);

404 
	`døw_symbﬁogy
(
ˇŒback
.
sour˚∑øms
, cÆlback.
di•œyd©a
);

407 
	`glutSw≠Buf„rs
();

408 
	}
}

460 * 
	$ˇ±uª_video_‰ame
(
Sour˚∑øms_t
 * 
sour˚∑øms
, * 
nbyã•
)

462 * 
ªtvÆ
;

464 
sour˚∑øms
->
sour˚
)

466 
TESTPATTERN
:

467 
ªtvÆ
 = 
	`√xt_ã°∑âîn_‰ame
(
sour˚∑øms
, 
nbyã•
);

470 
LIVESOURCE
:

471 
ªtvÆ
 = 
	`√xt_devi˚_‰ame
(
sour˚∑øms
, 
nbyã•
);

475 
	`Ârötf
(
°dîr
, "Error: %s doesn't haveá case forÉncoding %d\n",

476 
__FUNCTION__
, 
sour˚∑øms
->
ícodög
);

477 
	`Ârötf
(
°dîr
, "add oneándÑecompile\n");

478 
	`ab‹t
();

481 (
ªtvÆ
);

483 
	}
}

540 
	#EXPECTED_PIXELS
 (320 * 240 * 2)

	)

541 
	gãmp
[
EXPECTED_PIXELS
];

543 
	$døw_video_‰ame
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

544 
Di•œyd©a_t
 * 
di•œyd©a
)

547 
GLÊﬂt
 
œ∂acün
[3][3] = { {-1.0f, -1.0f, -1.0f},

553 #ifde‡
INVERT_IMAGE_VERTICAL


554 #ifde‡
INVERT_IMAGE_HORIZONTAL


555 
GLÊﬂt
 
v3
[3] = { 1.00, -1.00, 0.0};

556 
GLÊﬂt
 
v2
[3] = {-1.00, -1.00, 0.0};

557 
GLÊﬂt
 
v1
[3] = {-1.00, 1.00, 0.0};

558 
GLÊﬂt
 
v0
[3] = {1.00, 1.00, 0.0};

560 
GLÊﬂt
 
v3
[3] = {-1.00, -1.00, 0.0};

561 
GLÊﬂt
 
v2
[3] = { 1.00, -1.00, 0.0};

562 
GLÊﬂt
 
v1
[3] = { 1.00, 1.00, 0.0};

563 
GLÊﬂt
 
v0
[3] = {-1.00, 1.00, 0.0};

566 #ifde‡
INVERT_IMAGE_HORIZONTAL


567 
GLÊﬂt
 
v0
[3] = { 1.00, -1.00, 0.0};

568 
GLÊﬂt
 
v1
[3] = {-1.00, -1.00, 0.0};

569 
GLÊﬂt
 
v2
[3] = {-1.00, 1.00, 0.0};

570 
GLÊﬂt
 
v3
[3] = { 1.00, 1.00, 0.0};

572 
GLÊﬂt
 
v0
[3] = {-1.00, -1.00, 0.0};

573 
GLÊﬂt
 
v1
[3] = { 1.00, -1.00, 0.0};

574 
GLÊﬂt
 
v2
[3] = { 1.00, 1.00, 0.0};

575 
GLÊﬂt
 
v3
[3] = {-1.00, 1.00, 0.0};

581 
	`glCﬁ‹4f
(1.0, 1.0, 1.0, 1.0);

583 
	`check_îr‹
("before subtexture");

595 i‡(
YUV420
 =
sour˚∑øms
->
ícodög
)

597 
chroma_width
, 
chroma_height
, 
luma_size
, 
chroma_size
;

598 * 
u_ãxtuª
;

599 * 
v_ãxtuª
;

601 
luma_size
 = 
sour˚∑øms
->
image_width
 * sour˚∑øms->
image_height
;

603 
chroma_width
 = 
sour˚∑øms
->
image_width
 / 2;

604 
chroma_height
 = 
sour˚∑øms
->
image_height
 / 2;

605 
chroma_size
 = 
chroma_width
 * 
chroma_height
;

608 
u_ãxtuª
 = ((*)
sour˚∑øms
->
ˇ±uªd
.
°¨t
Ë+ 
luma_size
;

609 
v_ãxtuª
 = 
u_ãxtuª
 + 
chroma_size
;

610 
	`glA˘iveTextuª
(
GL_TEXTURE2
);

611 
	`glE«bÀ
(
GL_TEXTURE_2D
);

612 
	`glTexSubImage2D
(
GL_TEXTURE_2D
, 0, 0, 0, 
chroma_width
,

613 
chroma_height
, (
GLíum
)
di•œyd©a
->
pixñf‹m©
,

614 
GL_UNSIGNED_BYTE
, 
v_ãxtuª
);

616 
	`glA˘iveTextuª
(
GL_TEXTURE1
);

617 
	`glE«bÀ
(
GL_TEXTURE_2D
);

618 
	`glTexSubImage2D
(
GL_TEXTURE_2D
, 0, 0, 0, 
chroma_width
,

619 
chroma_height
, (
GLíum
)
di•œyd©a
->
pixñf‹m©
,

620 
GL_UNSIGNED_BYTE
, 
u_ãxtuª
);

624 i‡(0 !
C⁄vﬁve_œ∂acün
)

626 
	`glC⁄vﬁuti⁄Fûãr2D
(
GL_CONVOLUTION_2D
,

627 
GL_LUMINANCE
, 3, 3,

628 
GL_LUMINANCE
, 
GL_FLOAT
, 
œ∂acün
);

629 
	`check_îr‹
("before CONVOLUTION");

630 
	`glE«bÀ
(
GL_CONVOLUTION_2D
);

631 
	`check_îr‹
("after CONVOLUTION" );

634 i‡(0 !
Døw_hi°ogøm
)

636 
	`glHi°ogøm
(
GL_HISTOGRAM
, 
HISTOGRAM_SIZE
, 
GL_LUMINANCE
, 
GL_FALSE
);

637 
	`glE«bÀ
(
GL_HISTOGRAM
);

641 
	`glA˘iveTextuª
(
GL_TEXTURE0
);

643 
	`glTexSubImage2D
(
GL_TEXTURE_2D
, 0, 0, 0, 
sour˚∑øms
->
image_width
,

644 
sour˚∑øms
->
image_height
, (
GLíum
)
di•œyd©a
->
pixñf‹m©
,

645 
GL_UNSIGNED_BYTE
, 
sour˚∑øms
->
ˇ±uªd
.
°¨t
);

648 i‡(0 !
Døw_hi°ogøm
)

650 
	`glGëHi°ogøm
(
GL_HISTOGRAM
, 
GL_TRUE
, 
GL_LUMINANCE
, 
GL_INT
, 
Hi°ogøm
);

651 
	`glDißbÀ
(
GL_HISTOGRAM
);

655 i‡(0 !
C⁄vﬁve_œ∂acün
)

657 
	`glDißbÀ
(
GL_CONVOLUTION_2D
);

658 
	`check_îr‹
("disabling GL_CONVOLUTION_2D");

663 
	`check_îr‹
("after subtexture");

667 
	`glPushM©rix
();

669 
	`glE«bÀ
(
GL_TEXTURE_2D
);

670 
	`glCÀ¨
(
GL_COLOR_BUFFER_BIT
);

671 i‡(
YUV420
 =
sour˚∑øms
->
ícodög
)

676 
	`glBegö
(
GL_QUADS
);

678 
	`glMu…iTexCo‹d2fv
(
GL_TEXTURE0
, 
di•œyd©a
->
t0
);

679 
	`glMu…iTexCo‹d2fv
(
GL_TEXTURE1
, 
di•œyd©a
->
t0
);

680 
	`glMu…iTexCo‹d2fv
(
GL_TEXTURE2
, 
di•œyd©a
->
t0
);

681 
	`glVîãx3fv
(
v0
);

683 
	`glMu…iTexCo‹d2fv
(
GL_TEXTURE0
, 
di•œyd©a
->
t1
);

684 
	`glMu…iTexCo‹d2fv
(
GL_TEXTURE1
, 
di•œyd©a
->
t1
);

685 
	`glMu…iTexCo‹d2fv
(
GL_TEXTURE2
, 
di•œyd©a
->
t1
);

686 
	`glVîãx3fv
(
v1
);

688 
	`glMu…iTexCo‹d2fv
(
GL_TEXTURE0
, 
di•œyd©a
->
t2
);

689 
	`glMu…iTexCo‹d2fv
(
GL_TEXTURE1
, 
di•œyd©a
->
t2
);

690 
	`glMu…iTexCo‹d2fv
(
GL_TEXTURE2
, 
di•œyd©a
->
t2
);

691 
	`glVîãx3fv
(
v2
);

693 
	`glMu…iTexCo‹d2fv
(
GL_TEXTURE0
, 
di•œyd©a
->
t3
);

694 
	`glMu…iTexCo‹d2fv
(
GL_TEXTURE1
, 
di•œyd©a
->
t3
);

695 
	`glMu…iTexCo‹d2fv
(
GL_TEXTURE2
, 
di•œyd©a
->
t3
);

696 
	`glVîãx3fv
(
v3
);

698 
	`glEnd
();

703 
	`glBegö
(
GL_QUADS
);

705 
	`glTexCo‹d2fv
(
di•œyd©a
->
t0
); 
	`glVîãx3fv
(
v0
);

706 
	`glTexCo‹d2fv
(
di•œyd©a
->
t1
); 
	`glVîãx3fv
(
v1
);

707 
	`glTexCo‹d2fv
(
di•œyd©a
->
t2
); 
	`glVîãx3fv
(
v2
);

708 
	`glTexCo‹d2fv
(
di•œyd©a
->
t3
); 
	`glVîãx3fv
(
v3
);

711 
	`glEnd
();

714 
	`glDißbÀ
(
GL_TEXTURE_2D
);

716 
	`glP›M©rix
();

719 
	}
}

768 
	$dump_hi°ogøm
(* 
œbñ
, 
GLöt
 
hi°ogøm
[], 
size
)

770 
i
, 
tŸÆ
, 
≈oöts
;

771 
món
;

773 
	`Ârötf
(
°dîr
, "%s\n", 
œbñ
);

774 
món
 = 0.0;

775 
tŸÆ
 = 0.0;

776 
≈oöts
 = 0;

778 
i
 = 0; i < 
size
; i++)

780 
≈oöts
 =Çpoöt†+ 
hi°ogøm
[
i
];

781 
tŸÆ
 =ÅŸÆ + 
i
 * 
hi°ogøm
[i];

783 i‡(0 =(
i
 % 
HISTOGRAM_LISTWIDTH
))

785 
	`Ârötf
(
°dîr
, "\n%dË", 
i
);

787 
	`Ârötf
(
°dîr
, "%d ", 
hi°ogøm
[
i
]);

789 
	`Ârötf
(
°dîr
, "\n");

790 
món
 = ()
tŸÆ
 / ()
≈oöts
;

791 
	`Ârötf
(
°dîr
, "mó¿%f\n", 
món
);

793 
	}
}

840 
	$døw_symbﬁogy
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

841 
Di•œyd©a_t
 * 
di•œyd©a
)

843 
	`shadî_off
();

844 
	`døw_Âs_symbﬁogy
(
sour˚∑øms
, 
di•œyd©a
);

846 i‡(0 !
Døw_hi°ogøm
)

848 
	`døw_hi°ogøm_symbﬁogy
(
Hi°ogøm
, 
HISTOGRAM_SIZE
);

851 
	`shadî_⁄
();

852 
	}
}

907 
	$døw_Âs_symbﬁogy
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

908 
Di•œyd©a_t
 * 
di•œyd©a
)

910 * 
f⁄t
 = 
GLUT_BITMAP_HELVETICA_18
;

911 
‰amî©e°rög
[
FPS_STRINGLEN
];

912 
œ°_time
;

913 
have_œ°_time
 = 0;

914 
time
, 
ñ≠£d_mûli£c
;

915 
‰ames_£c
;

917 
time
 = 
	`glutGë
(
GLUT_ELAPSED_TIME
);

919 i‡(0 =
have_œ°_time
)

921 
œ°_time
 = 
time
;

922 
	`•rötf
(
‰amî©e°rög
, "Frames/Sec: ?");

923 
have_œ°_time
 = 1;

924 
	`glutPo°Redi•œy
();

928 
ñ≠£d_mûli£c
 = 
time
 - 
œ°_time
;

929 
œ°_time
 = 
time
;

930 i‡(0 =
ñ≠£d_mûli£c
)

932 
	`•rötf
(
‰amî©e°rög
, "Frames/Sec: ?");

936 
‰ames_£c
 = 1000 / 
ñ≠£d_mûli£c
;

937 
	`•rötf
(
‰amî©e°rög
, "Fømes/Sec: %d", 
‰ames_£c
);

941 
	`glPushM©rix
();

943 
	`glCﬁ‹Mask
(
GL_TRUE
, GL_TRUE, GL_TRUE, GL_TRUE);

944 
	`glCﬁ‹3f
(0.0, 1.0, 1.0);

945 
	`glLﬂdIdítôy
();

946 
	`ªndîBôm≠Såög
(10, 10, 
f⁄t
, 
‰amî©e°rög
);

948 
	`glP›M©rix
();

951 
	}
}

1002 
	$ªndîBôm≠Såög
(
x
, 
y
, *
f⁄t
, *
°rög
)

1005 *
c
;

1007 
	`glWödowPos2f
(
x
, 
y
);

1009 
c
=
°rög
; *c != '\0'; c++) {

1010 
	`glutBôm≠Ch¨a˘î
(
f⁄t
, *
c
);

1012 
	}
}

1067 
	$døw_hi°ogøm_symbﬁogy
(
GLöt
 
hi°ogøm
[], 
hi°ogøm_size
)

1071 i‡(1 =
Reˇlcuœã_hi°ogøm
)

1073 
	`ˇlcuœã_hi°ogøm_d©a
(
hi°ogøm
, 
hi°ogøm_size
);

1074 
Reˇlcuœã_hi°ogøm
 = 0;

1078 
	`glE«bÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);

1079 
	`glVîãxPoöãr
(2, 
GL_FLOAT
, 0, (
GLvoid
 *)
Hi°ogøm_vîti˚s
);

1081 
	`glPushM©rix
();

1083 
	`glCﬁ‹Mask
(
GL_TRUE
, GL_TRUE, GL_TRUE, GL_TRUE);

1084 
	`glCﬁ‹3f
(1.0, 0.0, 0.0);

1086 
	`glTøn¶©ef
(0.0, -1.0, 0.0);

1092 
	`glDøwAºays
(
GL_LINE_STRIP
, 0, 
hi°ogøm_size
/2);

1094 
	`glP›M©rix
();

1095 
	`glDißbÀClõ¡Sèã
(
GL_VERTEX_ARRAY
);

1097 
	}
}

1159 
	$ˇlcuœã_hi°ogøm_d©a
(
GLöt
 
hi°ogøm
[], 
hi°ogøm_size
)

1161 
GLöt
 
max_vÆue
;

1162 
i
;

1165 
max_vÆue
 = 
hi°ogøm
[0];

1167 
i
 = 1; i < 
hi°ogøm_size
; i++)

1169 i‡(
hi°ogøm
[
i
] > 
max_vÆue
)

1171 
max_vÆue
 = 
hi°ogøm
[
i
];

1174 i‡(0 =
max_vÆue
)

1178 
max_vÆue
 = 1;

1181 
i
 = 0; i < 
hi°ogøm_size
; i+= 2)

1183 
Hi°ogøm_vîti˚s
[
i
] = (
GLÊﬂt
)ò/ (GLÊﬂt)
hi°ogøm_size
;

1184 
Hi°ogøm_vîti˚s
[
i
 + 1] = (
GLÊﬂt
)
hi°ogøm
[i] / (GLÊﬂt)
max_vÆue
;

1187 
	}
}

1233 
	$IdÀ
()

1235 
‰amesize
;

1236 * 
√xt‰ame
;

1238 
√xt‰ame
 = 
	`ˇ±uª_video_‰ame
(
ˇŒback
.
sour˚∑øms
, &
‰amesize
);

1240 i‡(
NULL
 !
√xt‰ame
)

1242 
	`glutPo°Redi•œy
();

1243 
Reˇlcuœã_hi°ogøm
 = 1;

1247 
	`glutPo°Redi•œy
();

1251 
	}
}

1312 
	$£tup_glut_wödow_ˇŒbacks
(
Di•œyd©a_t
 * 
di•œyd©a
,

1313 
Sour˚∑øms_t
 * 
sour˚∑øms
)

1316 
ˇŒback
.
di•œyd©a
 = displaydata;

1317 
ˇŒback
.
sour˚∑øms
 = sourceparams;

1319 
	`glutKeybﬂrdFunc
(
Key
);

1320 
	`glutDi•œyFunc
(
Døw
);

1321 
	`glutIdÀFunc
(
IdÀ
);

1322 
	`£tup_míu
();

1323 
	`glutTimîFunc
(500, 
timî_fu˘i⁄
, 0);

1324 
	}
}

1378 
	$¥o˚ss_míu_£À˘i⁄
(
£À˘i⁄
)

1380 
£À˘i⁄
)

1382 
MENU_EXIT
:

1383 
	`íd_ˇ±uª_di•œy
(
ˇŒback
.
sour˚∑øms
,

1384 
ˇŒback
.
di•œyd©a
);

1385 
	`exô
(0);

1388 
MENU_DISPLAY_GREYSCALE
:

1389 
	`cﬁ‹_ouçut
(0);

1392 
MENU_DISPLAY_COLOR
:

1393 
	`cﬁ‹_ouçut
(1);

1396 
MENU_PASSTHRU_PROCESSING
:

1397 
	`image_¥o˚ssög_Æg‹ôhm
(0);

1398 
C⁄vﬁve_œ∂acün
 = 0;

1401 
MENU_SHADER_LAPLACIAN
:

1402 
	`image_¥o˚ssög_Æg‹ôhm
(1);

1403 
C⁄vﬁve_œ∂acün
 = 0;

1406 
MENU_CONVOLUTION_LAPLACIAN
:

1407 
	`image_¥o˚ssög_Æg‹ôhm
(0);

1408 
C⁄vﬁve_œ∂acün
 = 1;

1411 
MENU_TOGGLE_HISTOGRAM
:

1412 
	`toggÀ_hi°ogøm
();

1416 
	`Ârötf
(
°dîr
, "W¨nög: %†d€¢'àªcognizê", 
__FUNCTION__
);

1417 
	`Ârötf
(
°dîr
, "selection %d:ádd it. Ignoring it forÇow.\n",

1418 
£À˘i⁄
);

1421 
	}
}

1463 
	$toggÀ_hi°ogøm
()

1465 i‡(0 =
Døw_hi°ogøm
)

1467 
Døw_hi°ogøm
 = 1;

1471 
Døw_hi°ogøm
 = 0;

1473 
	}
}

1527 
	$£tup_míu
()

1529 
image_¥oc_míu
, 
t›_míu
;

1532 
image_¥oc_míu
 = 
	`glutCª©eMíu
(
¥o˚ss_míu_£À˘i⁄
);

1533 
	`glutAddMíuE¡ry
("Nÿimagê¥o˚ssög ", ()
MENU_PASSTHRU_PROCESSING
);

1534 
	`glutAddMíuE¡ry
("Shader LaplacianÉdge detection ",

1535 ()
MENU_SHADER_LAPLACIAN
);

1536 
	`glutAddMíuE¡ry
("CPU LaplacianÉdge detection ",

1537 ()
MENU_CONVOLUTION_LAPLACIAN
);

1540 
t›_míu
 = 
	`glutCª©eMíu
(
¥o˚ss_míu_£À˘i⁄
);

1542 
	`glutAddMíuE¡ry
("Exô (Esˇ≥Ë", ()
MENU_EXIT
);

1543 
	`glutAddMíuE¡ry
("Di•œy GªysˇÀ ", ()
MENU_DISPLAY_GREYSCALE
);

1544 
	`glutAddMíuE¡ry
("Di•œy Cﬁ‹ ", ()
MENU_DISPLAY_COLOR
);

1545 
	`glutAddSubMíu
("ImagêPro˚ssög ", 
image_¥oc_míu
);

1551 i‡(
	`gÀwIsSuµ‹ãd
("GL_ARB_imaging"))

1553 
	`glutAddMíuE¡ry
("ToggÀ Hi°ogøm ", ()
MENU_TOGGLE_HISTOGRAM
);

1556 
	`glutAâachMíu
(
GLUT_RIGHT_BUTTON
);

1557 
	}
}

1614 
	$timî_fu˘i⁄
(
ign‹ed
)

1617 
	`glutPo°Redi•œy
();

1618 
	}
}

	@callbacks.h

34 
£tup_glut_wödow_ˇŒbacks
(
Di•œyd©a_t
 * 
di•œyd©a
,

35 
Sour˚∑øms_t
 * 
sour˚∑øms
);

	@capabilities.c

36 
	~<°dio.h
>

37 
	~"ˇ∑bûôõs.h
"

84 
	$des¸ibe_ˇ±uª_ˇ∑bûôõs
(*
îr°rög
,

85 
v4l2_ˇ∑bûôy
 * 
ˇp
)

87 
	`Ârötf
(
°dîr
, "%s\n", 
îr°rög
);

89 
	`Ârötf
(
°dîr
, "Devi˚: '%s' Drivî: '%s'\n", 
ˇp
->
ˇrd
, c≠->
drivî
);

91 i‡(
V4L2_CAP_VIDEO_CAPTURE
 & 
ˇp
->
ˇ∑bûôõs
)

93 
	`Ârötf
(
°dîr
, "Device supports video capture.\n");

97 
	`Ârötf
(
°dîr
, "Device does NOT support video capture.\n");

101 i‡(
V4L2_CAP_READWRITE
 & 
ˇp
->
ˇ∑bûôõs
)

103 
	`Ârötf
(
°dîr
, "Device can supply data byÑead\n");

107 
	`Ârötf
(
°dîr
, "Device can NOT supply data byÑead\n");

110 i‡(
V4L2_CAP_STREAMING
 & 
ˇp
->
ˇ∑bûôõs
)

112 
	`Ârötf
(
°dîr
, "Device supports streaming I/O\n");

116 
	`Ârötf
(
°dîr
, "Device does NOT support streaming I/O\n");

119 i‡(
V4L2_CAP_ASYNCIO
 & 
ˇp
->
ˇ∑bûôõs
)

121 
	`Ârötf
(
°dîr
, "Device supportsásynchronous I/O\n");

125 
	`Ârötf
(
°dîr
, "Device does NOT supportásynchronous I/O\n");

127 
	}
}

	@capabilities.h

30 
	~<sys/time.h
>

31 
	~<asm/ty≥s.h
>

32 
	~<löux/videodev2.h
>

34 
	sˇ∑bûôõs_s
 {

35 
v4l2_ˇ∑bûôy
 
	mˇ±uª
;

37 
v4l2_f‹m©
 
	mfmt
;

38 
	msuµ‹ts_yuv420
;

39 
	msuµ‹ts_yuv422
;

40 
	msuµ‹ts_gªysˇÀ
;

41 
	msuµ‹ts_rgb
;

42 } 
	tVideoˇ∑bûôõs_t
;

45 
des¸ibe_ˇ±uª_ˇ∑bûôõs
(*
îr°rög
,

46 
v4l2_ˇ∑bûôy
 * 
ˇp
);

	@controls.c

29 
	~<°dio.h
>

30 
	~<°dlib.h
>

31 
	~<°rög.h
>

32 
	~<sys/io˘l.h
>

33 
	~<î∫o.h
>

35 
	~<asm/ty≥s.h
>

36 
	~<löux/videodev2.h
>

38 
	~"c⁄åﬁs.h
"

41 
íumî©e_míu
 (* 
œbñ
, 
fd
,

42 
v4l2_quîy˘æ
 
quîy˘æ
);

43 
ex∂aö_c⁄åﬁ_ty≥
(* 
œbñ
, 
v4l2_quîy˘æ
 
quîy˘æ
,

44 
fd
);

95 
	$des¸ibe_devi˚_c⁄åﬁs
(* 
œbñ
, * 
devi˚«me
, 
devi˚_fd
)

97 
v4l2_quîy˘æ
 
quîy˘æ
;

100 
	`Ârötf
(
°dîr
, "%s", 
œbñ
);

101 
	`Ârötf
(
°dîr
, " usög devi˚ fûê%s\n", 
devi˚«me
);

103 
	`mem£t
 (&
quîy˘æ
, 0,  (queryctrl));

105 
quîy˘æ
.
id
 = 
V4L2_CID_BASE
; quîy˘æ.id < 
V4L2_CID_LASTP1
;

106 
quîy˘æ
.
id
++)

108 i‡(0 =
	`io˘l
 (
devi˚_fd
, 
VIDIOC_QUERYCTRL
, &
quîy˘æ
))

110 i‡(
quîy˘æ
.
Êags
 & 
V4L2_CTRL_FLAG_DISABLED
)

116 
	`ex∂aö_c⁄åﬁ_ty≥
("", 
quîy˘æ
, 
devi˚_fd
);

121 i‡(
î∫o
 =
EINVAL
)

125 
	`≥º‹
 ("VIDIOC_QUERYCTRL");

126 
	`exô
 (
EXIT_FAILURE
);

130 
quîy˘æ
.
id
 = 
V4L2_CID_PRIVATE_BASE
; ; queryctrl.id++)

132 i‡(0 =
	`io˘l
 (
devi˚_fd
, 
VIDIOC_QUERYCTRL
, &
quîy˘æ
))

134 i‡(
quîy˘æ
.
Êags
 & 
V4L2_CTRL_FLAG_DISABLED
)

140 
	`ex∂aö_c⁄åﬁ_ty≥
("", 
quîy˘æ
, 
devi˚_fd
);

145 i‡(
î∫o
 =
EINVAL
)

149 
	`≥º‹
 ("VIDIOC_QUERYCTRL");

150 
	`exô
 (
EXIT_FAILURE
);

154 
	}
}

209 
	$íumî©e_míu
 (* 
œbñ
, 
fd
,

210 
v4l2_quîy˘æ
 
quîy˘æ
)

212 
v4l2_quîymíu
 
quîymíu
;

215 
	`Ârötf
 (
°dîr
, "%s:\n", 
œbñ
);

216 
	`Ârötf
 (
°dîr
, " Menu items:\n");

218 
	`mem£t
 (&
quîymíu
, 0,  (querymenu));

219 
quîymíu
.
id
 = 
quîy˘æ
.id;

221 
quîymíu
.
ödex
 = 
quîy˘æ
.
möimum
;

222 
quîymíu
.
ödex
 <()
quîy˘æ
.
maximum
;

223 
quîymíu
.
ödex
++)

225 i‡(0 =
	`io˘l
 (
fd
, 
VIDIOC_QUERYMENU
, &
quîymíu
))

227 
	`Ârötf
 (
°dîr
, " %s\n", 
quîymíu
.
«me
);

231 
	`≥º‹
 ("VIDIOC_QUERYMENU");

232 
	`exô
 (
EXIT_FAILURE
);

235 
	}
}

295 
	$ex∂aö_c⁄åﬁ_ty≥
(* 
œbñ
, 
v4l2_quîy˘æ
 
quîy˘æ
,

296 
fd
)

298 
	`Ârötf
(
°dîr
, "%†", 
œbñ
);

300 
	`Ârötf
 (
°dîr
, "C⁄åﬁ %s:", 
quîy˘æ
.
«me
);

302 
quîy˘æ
.
ty≥
)

304 
V4L2_CTRL_TYPE_INTEGER
:

306 
	`Ârötf
 (
°dîr
, "integer %dÅo %d in increments of %d\n",

307 
quîy˘æ
.
möimum
, quîy˘æ.
maximum
, quîy˘æ.
°ï
);

310 
V4L2_CTRL_TYPE_BOOLEAN
:

311 
	`Ârötf
 (
°dîr
, "boﬁó¿%d o∏%d\n", 
quîy˘æ
.
möimum
,

312 
quîy˘æ
.
maximum
);

315 
V4L2_CTRL_TYPE_MENU
:

316 
	`íumî©e_míu
((*)
quîy˘æ
.
«me
, 
fd
, queryctrl);

319 
V4L2_CTRL_TYPE_BUTTON
:

321 
	`Ârötf
(
°dîr
, "(button)\n");

323 #ifde‡
V4L2_CTRL_TYPE_INTEGER64


324 
V4L2_CTRL_TYPE_INTEGER64
:

325 
	`Ârötf
(
°dîr
, "value isá 64-bit integer\n");

328 #ifde‡
V4L2_CTRL_TYPE_CTRL_CLASS


329 
V4L2_CTRL_TYPE_CTRL_CLASS
:

334 
	`Ârötf
(
°dîr
, "Warning: unknown controlÅype in %s\n",

335 
__FUNCTION__
);

338 
	}
}

	@controls.h

33 
des¸ibe_devi˚_c⁄åﬁs
(* 
œbñ
, * 
devi˚«me
, 
devi˚_fd
);

	@device.c

52 
	~<°dio.h
>

53 
	~<°rög.h
>

54 
	~<°dlib.h
>

55 
	~<sys/time.h
>

56 
	~<sys/ty≥s.h
>

57 
	~<sys/°©.h
>

58 
	~<uni°d.h
>

59 
	~<f˙é.h
>

60 
	~<sys/io˘l.h
>

61 
	~<î∫o.h
>

62 
	~<sys/mm™.h
>

63 
	~"glutˇm.h
"

64 
	~"ˇ∑bûôõs.h
"

65 
	~"c⁄åﬁs.h
"

66 
	~"ã°∑âîn.h
"

68 
	~"devi˚.h
"

72 
	#ERRSTRINGLEN
 127

	)

77 
	#DEBUG_MMAP


	)

88 
	#DATA_TIMEOUT_INTERVAL
 (1000000.0 / 15.0)

	)

93 
vîify_™d_›í_devi˚
(* 
devi˚«me
);

94 
gë_devi˚_ˇ∑bûôõs
(* 
devi˚«me
, 
devi˚_fd
,

95 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
);

96 
xio˘l
(
fd
, 
ªque°
, * 
¨g
);

97 
£À˘_io_mëhod
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

98 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
);

99 
Æloˇã_ˇ±uª_buf„r
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

100 
åy_ª£t_¸›_sˇÀ
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

101 
£t_image_size_™d_f‹m©
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

102 
¥öt_suµ‹ãd_‰amesizes
(
devi˚_fd
, 
__u32
 
pixñ_f‹m©
,

103 * 
œbñ
);

104 
cﬁÀ˘_suµ‹ãd_image_f‹m©s
(
devi˚_fd
,

105 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
);

106 
£t_io_mëhod
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

107 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
);

108 
öô_ªad_io
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

109 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
);

110 
öô_mm≠_io
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

111 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
);

112 
__u32
 
ícodög_f‹m©
(
Encodögmëhod_t
 
ícodög
);

113 * 
gë_ícodög_°rög
(
Encodögmëhod_t
 
ícodög
);

114 
mm≠_io_buf„rs
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

115 
ªque°_video_buf„r_ac˚ss
(
devi˚_fd
, 
v4l2_mem‹y
 
mem‹y
);

116 
ªque°_™d_mm≠_io_buf„rs
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

117 
öô_u£Ωå_io
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

118 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
);

119 
u£r•a˚_buf„r_mode
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

120 
íqueue_mm≠_buf„rs
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

121 
°¨t_°ªamög
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

122 
°›_°ªamög
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

123 
íqueue_u£Ωoöãr_buf„rs
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

124 
ªad_video_‰ame
(
fd
, 
Videobuf„r_t
 * 
buf„r
);

125 
h¨ve°_mm≠_devi˚_buf„r
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

126 
waô_f‹_öput
(
fd
, 
u£c⁄ds
);

127 
h¨ve°_u£Ωå_devi˚_buf„r
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

189 
	$öô_sour˚_devi˚
(
Cmd¨gs_t
 
¨g°ru˘
, 
Sour˚∑øms_t
 * 
sour˚∑øms
,

190 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
)

192 
fd
, 
ªtvÆ
, 
buf„rsize
;

196 
fd
 = 
	`vîify_™d_›í_devi˚
(
¨g°ru˘
.
devi˚«me
);

198 i‡(0 > 
fd
)

200 
ªtvÆ
 = -1;

206 
sour˚∑øms
->
sour˚
 = 
LIVESOURCE
;

207 
sour˚∑øms
->
fd
 = fd;

208 
sour˚∑øms
->
ícodög
 = 
¨g°ru˘
.encoding;

209 
sour˚∑øms
->
image_width
 = 
¨g°ru˘
.image_width;

210 
sour˚∑øms
->
image_height
 = 
¨g°ru˘
.image_height;

215 
buf„rsize
 = 
	`compuã_byãs_≥r_‰ame
(
¨g°ru˘
.
image_width
,

216 
¨g°ru˘
.
image_height
,

217 
¨g°ru˘
.
ícodög
);

219 
sour˚∑øms
->
ˇ±uªd
.
°¨t
 = 
NULL
;

220 
sour˚∑øms
->
ˇ±uªd
.
Àngth
 = 
buf„rsize
;

225 
ªtvÆ
 = 
	`gë_devi˚_ˇ∑bûôõs
(
¨g°ru˘
.
devi˚«me
, 
fd
, 
ˇ∑bûôõs
);

227 i‡(0 =
ªtvÆ
)

229 
	`£À˘_io_mëhod
(
sour˚∑øms
, 
ˇ∑bûôõs
);

233 (
ªtvÆ
);

234 
	}
}

281 
	$vîify_™d_›í_devi˚
(* 
devi˚«me
)

283 
fd
;

284 
°©
 
buff
;

285 
îr°rög
[
ERRSTRINGLEN
];

287 i‡(-1 =
	`°©
(
devi˚«me
, &
buff
))

289 
	`•rötf
(
îr°rög
, "Error: can't 'stat' given device file '%s'",

290 
devi˚«me
);

291 
	`≥º‹
(
îr°rög
);

292 
fd
 = -1;

294 i‡(!
	`S_ISCHR
 (
buff
.
°_mode
))

296 
	`Ârötf
 (
°dîr
, "%†i†nŸá ch¨a˘î devi˚\n", 
devi˚«me
);

297 
fd
 = -1;

301 
fd
 = 
	`›í
(
devi˚«me
, 
O_RDWR
 | 
O_NONBLOCK
, 0);

303 i‡(-1 =
fd
)

305 
	`•rötf
(
îr°rög
, "Error: can't 'open' given device file '%s'",

306 
devi˚«me
);

307 
	`≥º‹
(
îr°rög
);

311 (
fd
);

312 
	}
}

360 
	$xio˘l
(
fd
, 
ªque°
, * 
¨g
)

362 
r
;

365 
r
 = 
	`io˘l
 (
fd
, 
ªque°
, 
¨g
);

366 -1 =
r
 && 
EINTR
 =
î∫o
);

368  
r
;

369 
	}
}

444 
	$gë_devi˚_ˇ∑bûôõs
(* 
devi˚«me
, 
devi˚_fd
,

445 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
)

447 
ªtvÆ
, 
quîy°©us
, 
comm⁄_found
;

448 
îr°rög
[
ERRSTRINGLEN
];

450 
	`mem£t
(
ˇ∑bûôõs
, 0, (*capabilities));

452 
quîy°©us
 = 
	`xio˘l
 (
devi˚_fd
, 
VIDIOC_QUERYCAP
, &(
ˇ∑bûôõs
->
ˇ±uª
));

455 i‡(-1 =
quîy°©us
)

457 
î∫o
)

459 
EINVAL
:

460 
	`•rötf
(
îr°rög
, "Error-- is '%s'Ñeallyá v4l2 device or v4l1?",

461 
devi˚«me
);

465 
	`•rötf
(
îr°rög
, "Error doing VIDIOC_QUERYCAP on '%s'",

466 
devi˚«me
);

469 
	`≥º‹
(
îr°rög
);

470 
ªtvÆ
 = -1;

474 
	`Ârötf
(
°dîr
, "\nInfo: '%s' connectsÅo %s usingÅhe %s driver\n\n",

475 
devi˚«me
, 
ˇ∑bûôõs
->
ˇ±uª
.
ˇrd
,

476 
ˇ∑bûôõs
->
ˇ±uª
.
drivî
);

477 
	`des¸ibe_ˇ±uª_ˇ∑bûôõs
("Device hasÅhe following capabilities",

478 &
ˇ∑bûôõs
->
ˇ±uª
);

479 
	`des¸ibe_devi˚_c⁄åﬁs
("Device hasÅhe following controlsávailable",

480 
devi˚«me
, 
devi˚_fd
);

482 
comm⁄_found
 = 0;

483 
	`cﬁÀ˘_suµ‹ãd_image_f‹m©s
(
devi˚_fd
, 
ˇ∑bûôõs
);

484 i‡(1 =
ˇ∑bûôõs
->
suµ‹ts_yuv420
)

486 
	`Ârötf
(
°dîr
, "device supports -e YUV420\n");

487 
comm⁄_found
 = 1;

490 i‡(1 =
ˇ∑bûôõs
->
suµ‹ts_yuv422
)

492 
	`Ârötf
(
°dîr
, "device supports -e YUV422\n");

493 
comm⁄_found
 = 1;

496 i‡(1 =
ˇ∑bûôõs
->
suµ‹ts_gªysˇÀ
)

498 
	`Ârötf
(
°dîr
, "device supports -e LUMA\n");

499 
comm⁄_found
 = 1;

501 i‡(1 =
ˇ∑bûôõs
->
suµ‹ts_rgb
)

503 
	`Ârötf
(
°dîr
, "device supports -e RGB\n");

504 
comm⁄_found
 = 1;

507 i‡(0 =
comm⁄_found
)

509 
	`Ârötf
(
°dîr
, "******************************************\n");

510 
	`Ârötf
(
°dîr
,

512 
	`Ârötf
(
°dîr
, "******************************************\n");

513 
ªtvÆ
 = -1;

517 
ªtvÆ
 = 0;

521 (
ªtvÆ
);

522 
	}
}

594 
	$£À˘_io_mëhod
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

595 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
)

597 
v4l2_ˇ∑bûôy
 * 
ˇ±uª_ˇ∑bûtõs
;

604 
ˇ±uª_ˇ∑bûtõs
 = &(
ˇ∑bûôõs
->
ˇ±uª
);

606 i‡(
V4L2_CAP_STREAMING
 & 
ˇ±uª_ˇ∑bûtõs
->
ˇ∑bûôõs
)

608 
sour˚∑øms
->
iomëhod
 = 
IO_METHOD_MMAP
;

610 i‡(
V4L2_CAP_READWRITE
 & 
ˇ±uª_ˇ∑bûtõs
->
ˇ∑bûôõs
)

612 
sour˚∑øms
->
iomëhod
 = 
IO_METHOD_READ
;

616 
	`Ârötf
(
°dîr
,

618 
__FUNCTION__
);

619 
	`ab‹t
();

623 
	}
}

675 
	$c⁄√˘_sour˚_buf„rs
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

677 
ªtvÆ
;

679 i‡(
TESTPATTERN
 =
sour˚∑øms
->
sour˚
)

681 
ªtvÆ
 = 
	`Æloˇã_ˇ±uª_buf„r
(
sour˚∑øms
);

685 
sour˚∑øms
->
iomëhod
)

687 
IO_METHOD_READ
:

688 
ªtvÆ
 = 
	`Æloˇã_ˇ±uª_buf„r
(
sour˚∑øms
);

690 
IO_METHOD_MMAP
:

693 
sour˚∑øms
->
ˇ±uªd
.
°¨t
 = sour˚∑øms->
buf„rs
[0].start;

694 
ªtvÆ
 = 0;

697 
IO_METHOD_USERPTR
:

698 
sour˚∑øms
->
ˇ±uªd
.
°¨t
 = sour˚∑øms->
buf„rs
[0].start;

699 
ªtvÆ
 = 0;

702 
	`Ârötf
(
°dîr
,

704 
__FUNCTION__
);

705 
	`ab‹t
();

709 (
ªtvÆ
);

710 
	}
}

758 
	$Æloˇã_ˇ±uª_buf„r
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

761 
ªtvÆ
;

763 
sour˚∑øms
->
ˇ±uªd
.
°¨t
 = 
	`mÆloc
(sour˚∑øms->ˇ±uªd.
Àngth
);

765 i‡(
NULL
 =
sour˚∑øms
->
ˇ±uªd
.
°¨t
)

768 
	`Ârötf
(
°dîr
,

770 
sour˚∑øms
->
ˇ±uªd
.
Àngth
);

771 
sour˚∑øms
->
ˇ±uªd
.
Àngth
 = 0;

772 
ªtvÆ
 = -1;

776 
ªtvÆ
 = 0;

778 (
ªtvÆ
);

779 
	}
}

835 
	$£t_devi˚_ˇ±uª_∑rms
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

836 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
)

838 
°©us
;

842 
	`åy_ª£t_¸›_sˇÀ
(
sour˚∑øms
);

845 
°©us
 = 
	`£t_image_size_™d_f‹m©
(
sour˚∑øms
);

847 i‡(0 =
°©us
)

849 
°©us
 = 
	`£t_io_mëhod
(
sour˚∑øms
, 
ˇ∑bûôõs
);

852 (
°©us
);

853 
	}
}

904 
	$åy_ª£t_¸›_sˇÀ
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

906 
°©us
;

907 
v4l2_¸›ˇp
 
¸›ˇp
;

908 
v4l2_¸›
 
¸›
;

909 
îr°rög
[
ERRSTRINGLEN
];

911 
	`mem£t
(&
¸›ˇp
, 0, (cropcap));

914 
¸›ˇp
.
ty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
;

917 
°©us
 = 
	`xio˘l
 (
sour˚∑øms
->
fd
, 
VIDIOC_CROPCAP
, &
¸›ˇp
);

919 i‡(0 =
°©us
)

922 
¸›
.
ty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
;

923 
¸›
.
c
 = 
¸›ˇp
.
de‰e˘
;

925 i‡(-1 =
	`xio˘l
 (
sour˚∑øms
->
fd
, 
VIDIOC_S_CROP
, &
¸›
))

927 
î∫o
) {

928 
EINVAL
:

929 
	`•rötf
(
îr°rög
, "Warning: VIDIOC_S_CROP croppingÇot supported");

934 
	`•rötf
(
îr°rög
, "Warning: ignoring VIDIOC_S_CROPÉrror ");

938 
	`≥º‹
(
îr°rög
);

944 
	`≥º‹
("Warning: ignoringÉrror whenÅryingÅoÑetrieve cropárea");

947 
	}
}

996 
__u32
 
	$ícodög_f‹m©
(
Encodögmëhod_t
 
ícodög
)

998 
f‹m©
;

1000 
ícodög
)

1002 
LUMA
:

1003 
f‹m©
 = 
V4L2_PIX_FMT_GREY
;

1006 
YUV420
:

1007 
f‹m©
 = 
V4L2_PIX_FMT_YUV420
;

1009 
YUV422
:

1010 
f‹m©
 = 
V4L2_PIX_FMT_YUYV
;

1013 
RGB
:

1014 
f‹m©
 = 
V4L2_PIX_FMT_RGB24
;

1018 
	`Ârötf
(
°dîr
, "Error:Ço format forÉncoding %d in %s\n",

1019 
ícodög
, 
__FUNCTION__
);

1020 
	`Ârötf
(
°dîr
, " fixÅhatándÑecompile\n");

1021 
	`ab‹t
();

1025 (
f‹m©
);

1026 
	}
}

1080 
	$£t_image_size_™d_f‹m©
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

1082 
v4l2_f‹m©
 
f‹m©
;

1083 
ªtvÆ
;

1084 
îr°rög
[
ERRSTRINGLEN
];

1085 
ªque°ed_height
, 
ªque°ed_width
;

1086 
suµlõd_height
, 
suµlõd_width
;

1087 
	`mem£t
(&
f‹m©
, 0, (format));

1089 
f‹m©
.
ty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
;

1093 
ªtvÆ
 = 
	`xio˘l
 (
sour˚∑øms
->
fd
, 
VIDIOC_G_FMT
, &
f‹m©
);

1095 i‡(-1 =
ªtvÆ
)

1097 
	`•rötf
(
îr°rög
, "FatalÉrrorÅryingÅo GET format");

1098 
	`≥º‹
(
îr°rög
);

1102 
f‹m©
.
ty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
;

1103 
f‹m©
.
fmt
.
pix
.
width
 = 
sour˚∑øms
->
image_width
;

1104 
f‹m©
.
fmt
.
pix
.
height
 = 
sour˚∑øms
->
image_height
;

1105 
f‹m©
.
fmt
.
pix
.
pixñf‹m©
 = 
	`ícodög_f‹m©
(
sour˚∑øms
->
ícodög
);

1112 
ªtvÆ
 = 
	`xio˘l
 (
sour˚∑øms
->
fd
, 
VIDIOC_S_FMT
, &
f‹m©
);

1113 i‡(-1 =
ªtvÆ
)

1115 
	`•rötf
(
îr°rög
,

1117 
	`gë_ícodög_°rög
(
sour˚∑øms
->
ícodög
));

1118 
	`≥º‹
(
îr°rög
);

1126 
ªque°ed_height
 = 
sour˚∑øms
->
image_height
;

1127 
ªque°ed_width
 = 
sour˚∑øms
->
image_width
;

1128 
suµlõd_height
 = 
f‹m©
.
fmt
.
pix
.
height
;

1129 
suµlõd_width
 = 
f‹m©
.
fmt
.
pix
.
width
;

1131 i‡((
ªque°ed_height
 !
suµlõd_height
) ||

1132 (
ªque°ed_width
 !
suµlõd_width
))

1134 
	`Ârötf
(
°dîr
, "Warning:ÖrogramÑequested size %d x %d; ",

1135 
sour˚∑øms
->
image_width
, sour˚∑øms->
image_height
);

1136 
	`Ârötf
(
°dîr
, " source offers %d x %d\n",

1137 
f‹m©
.
fmt
.
pix
.
width
, f‹m©.fmt.pix.
height
);

1138 
	`Ârötf
(
°dîr
, "AdjustingÅo %d x %d...\n",

1139 
f‹m©
.
fmt
.
pix
.
width
,

1140 
f‹m©
.
fmt
.
pix
.
height
);

1141 
sour˚∑øms
->
image_width
 = 
f‹m©
.
fmt
.
pix
.
width
;

1142 
sour˚∑øms
->
image_height
 = 
f‹m©
.
fmt
.
pix
.
height
;

1148 (
ªtvÆ
);

1150 
	}
}

1197 #ifde‡
VIDIOC_ENUM_FRAMESIZES


1198 
	$¥öt_suµ‹ãd_‰amesizes
(
devi˚_fd
, 
__u32
 
pixñ_f‹m©
, * 
œbñ
)

1200 
v4l2_‰msizìnum
 
sizes
;

1201 
ªtvÆ
, 
ödx
, 
found_a_size
;

1203 
ödx
 = 0;

1204 
found_a_size
 = 0;

1206 
	`Ârötf
(
°dîr
, "%s:\n", 
œbñ
);

1209 
	`mem£t
(&
sizes
, 0, (sizes));

1210 
sizes
.
ödex
 = 
ödx
;

1211 
sizes
.
pixñ_f‹m©
 =Öixel_format;

1213 
ªtvÆ
 = 
	`xio˘l
 (
devi˚_fd
, 
VIDIOC_ENUM_FRAMESIZES
, &
sizes
);

1215 i‡(0 =
ªtvÆ
)

1217 
found_a_size
 = 1;

1218 
sizes
.
ty≥
)

1220 
V4L2_FRMSIZE_TYPE_DISCRETE
:

1221 
	`Ârötf
(
°dîr
, " [%d] %d x %d\n", 
sizes
.
ödex
,

1222 
sizes
.
dis¸ëe
.
width
,

1223 
sizes
.
dis¸ëe
.
height
);

1226 
V4L2_FRMSIZE_TYPE_CONTINUOUS
:

1227 
V4L2_FRMSIZE_TYPE_STEPWISE
:

1228 
	`Ârötf
(
°dîr
, " [%d] %d x %dÅo %d x %d in %x %d steps",

1229 
sizes
.
ödex
,

1230 
sizes
.
°ïwi£
.
mö_width
,

1231 
sizes
.
°ïwi£
.
mö_height
,

1232 
sizes
.
°ïwi£
.
max_width
,

1233 
sizes
.
°ïwi£
.
max_height
,

1234 
sizes
.
°ïwi£
.
°ï_width
,

1235 
sizes
.
°ïwi£
.
°ï_height


1240 
	`Ârötf
(
°dîr
,

1242 
sizes
.
ty≥
, 
__FUNCTION__
);

1243 
	`Ârötf
(
°dîr
, " fixÅhatándÑecompile\n");

1244 
	`ab‹t
();

1247 
ödx
 = indx + 1;

1255 i‡(0 =
found_a_size
)

1257 
	`≥º‹
(" Warning: can't get size information");

1261 } 0 =
ªtvÆ
);

1263 
	}
}

1313 
	$cﬁÀ˘_suµ‹ãd_image_f‹m©s
(
devi˚_fd
,

1314 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
)

1316 
ªtvÆ
, 
ödx
;

1317 
v4l2_fmtdesc
 
f‹m©
;

1318 
œbñ°rög
[
ERRSTRINGLEN
];

1319 
ödx
 = 0;

1321 
	`Ârötf
(
°dîr
, "Source suppliesÅhe following formats:\n");

1324 
	`mem£t
(&
f‹m©
, 0, (format));

1325 
f‹m©
.
ty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
;

1326 
f‹m©
.
ödex
 = 
ödx
;

1328 
ªtvÆ
 = 
	`xio˘l
(
devi˚_fd
, 
VIDIOC_ENUM_FMT
, &
f‹m©
);

1330 i‡(0 =
ªtvÆ
)

1332 
	`Ârötf
(
°dîr
, "[%d] %†\n", 
ödx
, 
f‹m©
.
des¸ùti⁄
);

1333 #ifde‡
VIDIOC_ENUM_FRAMESIZES


1334 
	`•rötf
(
œbñ°rög
, " For %s source offersÅhe following sizes:",

1335 
f‹m©
.
des¸ùti⁄
);

1336 
	`¥öt_suµ‹ãd_‰amesizes
(
devi˚_fd
, 
f‹m©
.
pixñf‹m©
,

1337 
œbñ°rög
);

1339 i‡(
V4L2_PIX_FMT_YUV420
 =
f‹m©
.
pixñf‹m©
)

1341 
ˇ∑bûôõs
->
suµ‹ts_yuv420
 = 1;

1343 i‡(
V4L2_PIX_FMT_YUYV
 =
f‹m©
.
pixñf‹m©
)

1345 
ˇ∑bûôõs
->
suµ‹ts_yuv422
 = 1;

1347 i‡(
V4L2_PIX_FMT_GREY
 =
f‹m©
.
pixñf‹m©
)

1349 
ˇ∑bûôõs
->
suµ‹ts_gªysˇÀ
 = 1;

1351 i‡(
V4L2_PIX_FMT_RGB24
 =
f‹m©
.
pixñf‹m©
)

1353 
ˇ∑bûôõs
->
suµ‹ts_rgb
 = 1;

1355 
ödx
 = indx + 1;

1357 } 0 =
ªtvÆ
);

1360 
	}
}

1406 * 
	$gë_ícodög_°rög
(
Encodögmëhod_t
 
ícodög
)

1408 * 
«me
;

1410 
ícodög
)

1412 
LUMA
:

1413 
«me
 = "LUMA";

1415 
YUV420
:

1416 
«me
 = "YUV420";

1418 
YUV422
:

1419 
«me
 = "YUV422";

1421 
RGB
:

1422 
«me
 = "RGB";

1426 
	`Ârötf
(
°dîr
,

1428 ()
ícodög
, 
__FUNCTION__
);

1429 
«me
 = " ";

1432 (
«me
);

1433 
	}
}

1513 
	$£t_io_mëhod
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

1514 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
)

1516 
ªtvÆ
;

1518 
sour˚∑øms
->
iomëhod
)

1520 
IO_METHOD_READ
:

1521 
ªtvÆ
 = 
	`öô_ªad_io
(
sour˚∑øms
, 
ˇ∑bûôõs
);

1523 
IO_METHOD_MMAP
:

1524 
ªtvÆ
 = 
	`öô_mm≠_io
(
sour˚∑øms
, 
ˇ∑bûôõs
);

1526 
IO_METHOD_USERPTR
:

1527 
ªtvÆ
 = 
	`öô_u£Ωå_io
(
sour˚∑øms
, 
ˇ∑bûôõs
);

1531 
	`Ârötf
(
°dîr
, "Error: %s doesn't haveá case for %d\n",

1532 
__FUNCTION__
, 
sour˚∑øms
->
iomëhod
);

1533 
	`Ârötf
(
°dîr
, "ádd oneándÑecompile\n");

1534 
	`ab‹t
();

1538 (
ªtvÆ
);

1539 
	}
}

1598 
	$öô_ªad_io
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

1599 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
)

1601 
ªtvÆ
, 
°©us
;

1603 i‡(!(
V4L2_CAP_READWRITE
 & 
ˇ∑bûôõs
->
ˇ±uª
.capabilities))

1605 
	`des¸ibe_ˇ±uª_ˇ∑bûôõs
("Error: device can't doÑead I/O",

1606 &(
ˇ∑bûôõs
->
ˇ±uª
));

1607 
ªtvÆ
 = -1;

1613 
sour˚∑øms
->
buf„rcou¡
 = 1;

1614 
°©us
 = 
	`u£r•a˚_buf„r_mode
(
sour˚∑øms
);

1616 i‡(-1 =
°©us
)

1618 
ªtvÆ
 = -1;

1622 
ªtvÆ
 = 0;

1626 (
ªtvÆ
);

1627 
	}
}

1686 
	$öô_mm≠_io
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

1687 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
)

1689 
ªtvÆ
;

1691 i‡(!(
V4L2_CAP_STREAMING
 & 
ˇ∑bûôõs
->
ˇ±uª
.capabilities))

1693 
	`des¸ibe_ˇ±uª_ˇ∑bûôõs
("Error: device can't do streaming I/O",

1694 &(
ˇ∑bûôõs
->
ˇ±uª
));

1695 
ªtvÆ
 = -1;

1699 
ªtvÆ
 = 
	`ªque°_™d_mm≠_io_buf„rs
(
sour˚∑øms
);

1703 (
ªtvÆ
);

1704 
	}
}

1753 
	$ªque°_™d_mm≠_io_buf„rs
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

1755 
ªtvÆ
, 
buf„rcou¡
;

1758 
buf„rcou¡
 = 
	`ªque°_video_buf„r_ac˚ss
(
sour˚∑øms
->
fd
,

1759 
V4L2_MEMORY_MMAP
);

1761 i‡(-1 =
buf„rcou¡
)

1763 
ªtvÆ
 = -1;

1769 i‡(2 > 
buf„rcou¡
)

1771 
	`Ârötf
(
°dîr
, "Error: couldn't getÉnough video buffers from");

1772 
	`Ârötf
(
°dîr
, "Åhe video device. Requested %d, would have ",

1773 
MAX_VIDEO_BUFFERS
);

1774 
	`Ârötf
(
°dîr
, "£âÀd f‹ 2, gŸ %d\n", 
buf„rcou¡
);

1775 
ªtvÆ
 = -1;

1781 
sour˚∑øms
->
buf„rcou¡
 = buffercount;

1782 
ªtvÆ
 = 
	`mm≠_io_buf„rs
(
sour˚∑øms
);

1791 (
ªtvÆ
);

1792 
	}
}

1846 
	$ªque°_video_buf„r_ac˚ss
(
devi˚_fd
, 
v4l2_mem‹y
 
mem‹y
)

1848 
v4l2_ªque°buf„rs
 
ªque°
;

1849 
°©us
, 
ªtvÆ
;

1850 * 
mm≠_îr‹
 = "Error: video device doesn't support memory mapping";

1851 * 
u£Ωå_îr‹
= "Error: video device doesn't support userÖointer I/O";

1852 * 
îr°rög
;

1854 
	`mem£t
(&
ªque°
, 0, (request));

1859 
ªque°
.
cou¡
 = 
MAX_VIDEO_BUFFERS
;

1860 
ªque°
.
ty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
;

1861 
ªque°
.
mem‹y
 = memory;

1863 
°©us
 = 
	`xio˘l
 (
devi˚_fd
, 
VIDIOC_REQBUFS
, &
ªque°
);

1865 i‡(-1 =
°©us
)

1869 i‡(
V4L2_MEMORY_MMAP
 =
mem‹y
)

1871 
îr°rög
 = 
mm≠_îr‹
;

1875 
îr°rög
 = 
u£Ωå_îr‹
;

1879 i‡(
EINVAL
 =
î∫o
)

1881 
	`Ârötf
(
°dîr
, "%s\n", 
îr°rög
);

1885 
	`≥º‹
("ErrorÅryingÅoÑequest video buffers from device\n");

1887 
ªtvÆ
 = -1;

1891 
ªtvÆ
 = 
ªque°
.
cou¡
;

1894 (
ªtvÆ
);

1895 
	}
}

1955 
	$mm≠_io_buf„rs
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

1957 
i
, 
°©us
, 
ªtvÆ
;

1958 
v4l2_buf„r
 
buf
;

1959 * 
mm≠≥d_buf„r
;

1961 
°©us
 = 0;

1962 
ªtvÆ
 = 0;

1964 
i
 = 0; (ò< 
sour˚∑øms
->
buf„rcou¡
Ë&& (0 =
°©us
); i++)

1966 
	`mem£t
(&
buf
, 0, (buf));

1968 
buf
.
ty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
;

1969 
buf
.
mem‹y
 = 
V4L2_MEMORY_MMAP
;

1970 
buf
.
ödex
 = 
i
;

1972 
°©us
 = 
	`xio˘l
 (
sour˚∑øms
->
fd
, 
VIDIOC_QUERYBUF
, &
buf
);

1974 i‡(-1 =
°©us
)

1976 
	`≥º‹
("ErrorÅryingÅo get buffer info in VIDIOC_QUERYBUF");

1977 
ªtvÆ
 = -1;

1981 
mm≠≥d_buf„r
 = 
	`mm≠
 (
NULL
 ,

1982 
buf
.
Àngth
,

1983 
PROT_READ
 | 
PROT_WRITE
 ,

1984 
MAP_SHARED
 ,

1985 
sour˚∑øms
->
fd
, 
buf
.
m
.
off£t
);

1986 i‡(
MAP_FAILED
 !
mm≠≥d_buf„r
)

1988 
sour˚∑øms
->
buf„rs
[
i
].
Àngth
 = 
buf
.length;

1989 
sour˚∑øms
->
buf„rs
[
i
].
°¨t
 = 
mm≠≥d_buf„r
;

1993 
	`≥º‹
("Error: can't mmapÅhe video buffer");

1994 
ªtvÆ
 = -1;

1995 
°©us
 = -1;

2000 (
ªtvÆ
);

2001 
	}
}

2066 
	$öô_u£Ωå_io
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

2067 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
)

2069 
buf„rcou¡
;

2070 
ªtvÆ
;

2072 i‡(!(
V4L2_CAP_STREAMING
 & 
ˇ∑bûôõs
->
ˇ±uª
.capabilities))

2074 
	`des¸ibe_ˇ±uª_ˇ∑bûôõs
("Error: device can't do streaming I/O",

2075 &(
ˇ∑bûôõs
->
ˇ±uª
));

2076 
ªtvÆ
 = -1;

2081 
buf„rcou¡
 = 
	`ªque°_video_buf„r_ac˚ss
(
sour˚∑øms
->
fd
,

2082 
V4L2_MEMORY_USERPTR
);

2083 if(-1 =
buf„rcou¡
)

2085 
ªtvÆ
 = -1;

2087 i‡(2 > 
buf„rcou¡
)

2089 
	`Ârötf
(
°dîr
, "Error: couldn't getÉnough video buffers from");

2090 
	`Ârötf
(
°dîr
, "Åhe video device. Requested %d, would have ",

2091 
MAX_VIDEO_BUFFERS
);

2092 
	`Ârötf
(
°dîr
, "£âÀd f‹ 2, gŸ %d\n", 
buf„rcou¡
);

2093 
ªtvÆ
 = -1;

2098 
sour˚∑øms
->
buf„rcou¡
 = buffercount;

2099 
ªtvÆ
 = 
	`u£r•a˚_buf„r_mode
(
sour˚∑øms
);

2103 (
ªtvÆ
);

2105 
	}
}

2152 
	$u£r•a˚_buf„r_mode
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

2154 
i
, 
imagesize
, 
ªtvÆ
;

2155 * 
buf„r
;

2156 
îr°rög
[
ERRSTRINGLEN
];

2160 
imagesize
 = 
	`compuã_byãs_≥r_‰ame
(
sour˚∑øms
->
image_width
,

2161 
sour˚∑øms
->
image_height
,

2162 
sour˚∑øms
->
ícodög
);

2164 
ªtvÆ
 = 0;

2166 
i
 = 0; (ò< 
sour˚∑øms
->
buf„rcou¡
Ë&& (0 =
ªtvÆ
); i++)

2168 
buf„r
 = 
	`mÆloc
(
imagesize
);

2170 i‡(
NULL
 !
buf„r
)

2172 
sour˚∑øms
->
buf„rs
[
i
].
°¨t
 = 
buf„r
;

2173 
sour˚∑øms
->
buf„rs
[
i
].
Àngth
 = 
imagesize
;

2177 
ªtvÆ
 = -1;

2178 
	`•rötf
(
îr°rög
,

2180 
imagesize
);

2181 
	`≥º‹
(
îr°rög
);

2185 (
ªtvÆ
);

2186 
	}
}

2244 
	$°¨t_ˇ±uª_devi˚
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

2246 
ªtvÆ
;

2248 
sour˚∑øms
->
iomëhod
)

2250 
IO_METHOD_READ
:

2253 
ªtvÆ
 = 0;

2256 
IO_METHOD_MMAP
:

2257 
ªtvÆ
 = 
	`íqueue_mm≠_buf„rs
(
sour˚∑øms
);

2258 i‡(0 =
ªtvÆ
)

2260 
ªtvÆ
 = 
	`°¨t_°ªamög
(
sour˚∑øms
);

2264 
IO_METHOD_USERPTR
:

2265 
ªtvÆ
 = 
	`íqueue_u£Ωoöãr_buf„rs
(
sour˚∑øms
);

2266 i‡(0 =
ªtvÆ
)

2268 
ªtvÆ
 = 
	`°¨t_°ªamög
(
sour˚∑øms
);

2273 
	`Ârötf
(
°dîr
, "Error: %s doesn't haveá case for iomethod %d\n",

2274 
__FUNCTION__
, 
sour˚∑øms
->
iomëhod
);

2275 
	`Ârötf
(
°dîr
, "add oneándÑecompile\n");

2276 
	`ab‹t
();

2280 (
ªtvÆ
);

2281 
	}
}

2329 
	$íqueue_mm≠_buf„rs
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

2331 
i
;

2332 
°©us
;

2333 
v4l2_buf„r
 
buf
;

2335 
°©us
 = 0;

2337 
i
 = 0; (ò< 
sour˚∑øms
->
buf„rcou¡
Ë&& (0 =
°©us
); i++)

2339 
	`mem£t
(&
buf
, 0, (buf));

2340 
	`mem£t
(&(
buf
.
time°amp
), 0, (
timevÆ
));

2341 
buf
.
ty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
;

2342 
buf
.
mem‹y
 = 
V4L2_MEMORY_MMAP
;

2343 
buf
.
ödex
 = ()
i
;

2344 
°©us
 = 
	`xio˘l
 (
sour˚∑øms
->
fd
, 
VIDIOC_QBUF
, &
buf
);

2346 i‡(-1 =
°©us
)

2348 
	`≥º‹
("ErrorÉnqueueing mmap-ed buffers with VIDIOC_QBUF");

2351 (
°©us
);

2352 
	}
}

2400 
	$°¨t_°ªamög
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

2402 
v4l2_buf_ty≥
 
ty≥
;

2403 
°©us
;

2405 
ty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
;

2407 
°©us
 = 
	`xio˘l
(
sour˚∑øms
->
fd
, 
VIDIOC_STREAMON
, &
ty≥
);

2409 i‡(-1 =
°©us
)

2411 
	`≥º‹
("Error starting streaming with VIDIOC_STREAMON");

2414 (
°©us
);

2415 
	}
}

2463 
	$°›_°ªamög
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

2465 
v4l2_buf_ty≥
 
ty≥
;

2466 
°©us
;

2468 
ty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
;

2470 
°©us
 = 
	`xio˘l
(
sour˚∑øms
->
fd
, 
VIDIOC_STREAMOFF
, &
ty≥
);

2472 i‡(-1 =
°©us
)

2474 
	`≥º‹
("Error stopping streaming with VIDIOC_STREAMOFF");

2477 (
°©us
);

2478 
	}
}

2530 
	$íqueue_u£Ωoöãr_buf„rs
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

2532 
i
;

2533 
°©us
;

2534 
v4l2_buf„r
 
buf
;

2536 
°©us
 = 0;

2538 
i
 = 0; (ò< 
sour˚∑øms
->
buf„rcou¡
Ë&& (0 =
°©us
); i++)

2540 
	`mem£t
(&
buf
, 0, (buf));

2541 
buf
.
ty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
;

2542 
buf
.
mem‹y
 = 
V4L2_MEMORY_USERPTR
;

2543 
buf
.
m
.
u£Ωå
 = ()(
sour˚∑øms
->
buf„rs
[
i
].
°¨t
);

2544 
buf
.
Àngth
 = 
sour˚∑øms
->
buf„rs
[
i
].length;

2545 
°©us
 = 
	`xio˘l
 (
sour˚∑øms
->
fd
, 
VIDIOC_QBUF
, &
buf
);

2547 i‡(-1 =
°©us
)

2549 
	`≥º‹
("ErrorÉnqueueing mmap-ed buffers with VIDIOC_QBUF");

2552 (
°©us
);

2553 
	}
}

2600 
	$°›_ˇ±uª_devi˚
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

2602 
ªtvÆ
;

2605 
sour˚∑øms
->
iomëhod
)

2607 
IO_METHOD_READ
:

2608 
ªtvÆ
 = 0;

2612 
IO_METHOD_MMAP
:

2613 
IO_METHOD_USERPTR
:

2614 
ªtvÆ
 = 
	`°›_°ªamög
(
sour˚∑øms
);

2618 
	`Ârötf
(
°dîr
, "Error: %s doesn't haveá case for iomethod %d\n",

2619 
__FUNCTION__
, 
sour˚∑øms
->
iomëhod
);

2620 
	`Ârötf
(
°dîr
, "add oneándÑecompile\n");

2621 
	`ab‹t
();

2625 (
ªtvÆ
);

2626 
	}
}

2683 * 
	$√xt_devi˚_‰ame
(
Sour˚∑øms_t
 * 
sour˚∑øms
, * 
nbyã•
)

2685 
nbyãs
;

2686 *
d©≠
;

2687 
d©a_ªady
;

2689 
d©a_ªady
 = 
	`waô_f‹_öput
(
sour˚∑øms
->
fd
 , 
DATA_TIMEOUT_INTERVAL
);

2690 i‡(-1 =
d©a_ªady
)

2693 
d©≠
 = 
NULL
;

2694 *
nbyã•
 = -1;

2696 i‡(0 =
d©a_ªady
)

2699 
d©≠
 = 
NULL
;

2700 *
nbyã•
 = 0;

2704 
sour˚∑øms
->
iomëhod
)

2706 
IO_METHOD_READ
:

2707 
nbyãs
 = 
	`ªad_video_‰ame
(
sour˚∑øms
->
fd
, &(sour˚∑øms->
ˇ±uªd
));

2708 i‡(0 < 
nbyãs
)

2710 
d©≠
 = 
sour˚∑øms
->
ˇ±uªd
.
°¨t
;

2711 *
nbyã•
 = 
nbyãs
;

2715 
d©≠
 = 
NULL
;

2716 *
nbyã•
 = 
nbyãs
;

2721 
IO_METHOD_MMAP
:

2722 
nbyãs
 = 
	`h¨ve°_mm≠_devi˚_buf„r
(
sour˚∑øms
);

2723 i‡(0 < 
nbyãs
)

2725 
d©≠
 = 
sour˚∑øms
->
ˇ±uªd
.
°¨t
;

2726 *
nbyã•
 = 
nbyãs
;

2730 
d©≠
 = 
NULL
;

2731 *
nbyã•
 = 
nbyãs
;

2735 
IO_METHOD_USERPTR
:

2736 
nbyãs
 = 
	`h¨ve°_u£Ωå_devi˚_buf„r
(
sour˚∑øms
);

2737 i‡(0 < 
nbyãs
)

2739 
d©≠
 = 
sour˚∑øms
->
ˇ±uªd
.
°¨t
;

2740 *
nbyã•
 = 
nbyãs
;

2744 
d©≠
 = 
NULL
;

2745 *
nbyã•
 = 
nbyãs
;

2750 
	`Ârötf
(
°dîr
, "Error: %s doesn't haveá case for iomethod %d\n",

2751 
__FUNCTION__
, 
sour˚∑øms
->
iomëhod
);

2752 
	`Ârötf
(
°dîr
, "add oneándÑecompile\n");

2753 
	`ab‹t
();

2757 (
d©≠
);

2758 
	}
}

2808 
	$ªad_video_‰ame
(
fd
, 
Videobuf„r_t
 * 
buf„r
)

2810 
ƒód
;

2812 
ƒód
 = 
	`ªad
(
fd
, 
buf„r
->
°¨t
, buf„r->
Àngth
);

2814 i‡(-1 =
ƒód
)

2816 i‡(
EAGAIN
 =
î∫o
)

2818 
ƒód
 = 0;

2822 
	`≥º‹
("ErrorÑeading data from video device");

2825 (
ƒód
);

2826 
	}
}

2873 
	$h¨ve°_mm≠_devi˚_buf„r
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

2875 
ªtvÆ
, 
°©us
;

2876 
v4l2_buf„r
 
buf
;

2879 
	`mem£t
(&
buf
, 0, (buf));

2881 
buf
.
ty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
;

2882 
buf
.
mem‹y
 = 
V4L2_MEMORY_MMAP
;

2884 
°©us
 = 
	`xio˘l
 (
sour˚∑øms
->
fd
, 
VIDIOC_DQBUF
, &
buf
);

2886 i‡(-1 =
°©us
)

2890 
î∫o
)

2892 
EAGAIN
:

2894 #ifde‡
DEBUG_MMAP


2895 
	`≥º‹
("VIDIOC_DQBUF:Ço dataÑeady");

2897 
ªtvÆ
 = 0;

2900 
EIO
:

2902 #ifde‡
DEBUG_MMAP


2903 
	`≥º‹
("VIDIOC_DQBUF: EIO");

2906 
	`≥º‹
("Error dequeueing mmap-ed buffer from device");

2907 
ªtvÆ
 = -1;

2915 
sour˚∑øms
->
ˇ±uªd
.
°¨t
 = sour˚∑øms->
buf„rs
[
buf
.
ödex
].start;

2919 
°©us
 = 
	`xio˘l
 (
sour˚∑øms
->
fd
, 
VIDIOC_QBUF
, &
buf
);

2921 i‡(-1 =
°©us
)

2924 
î∫o
)

2926 
EAGAIN
:

2928 #ifde‡
DEBUG_MMAP


2929 
	`≥º‹
("VIDIOC_QBUF:Ço dataÑeady");

2931 
ªtvÆ
 = 0;

2934 
EIO
:

2936 #ifde‡
DEBUG_MMAP


2937 
	`≥º‹
("VIDIOC_DQBUF: EIO");

2940 
	`≥º‹
("ErrorÑequeueing mmap-ed buffer from device");

2941 
ªtvÆ
 = -1;

2947 
ªtvÆ
 = 
sour˚∑øms
->
ˇ±uªd
.
Àngth
;

2951 (
ªtvÆ
);

2952 
	}
}

3005 
	$waô_f‹_öput
(
fd
, 
u£c⁄ds
)

3007 
fd_£t
 
ªadfds
;

3008 
£À˘_ªsu…
, 
ªtvÆ
;

3009 
timevÆ
 
timeout
;

3011 
	`FD_ZERO
(&
ªadfds
);

3012 
	`FD_SET
(
fd
, &
ªadfds
);

3014 
timeout
.
tv_£c
 = 0;

3015 
timeout
.
tv_u£c
 = 
u£c⁄ds
;

3017 
£À˘_ªsu…
 = 
	`£À˘
(
fd
 + 1, &
ªadfds
, 
NULL
, NULL, &
timeout
);

3019 i‡(-1 =
£À˘_ªsu…
)

3022 
	`≥º‹
("ErrorÅryingÅo selectÜooking for input");

3023 
ªtvÆ
 = -1;

3025 i‡(0 < 
£À˘_ªsu…
)

3028 
ªtvÆ
 = 1;

3033 
ªtvÆ
 = 0;

3035 (
ªtvÆ
);

3036 
	}
}

3081 
	$h¨ve°_u£Ωå_devi˚_buf„r
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

3084 
ªtvÆ
, 
°©us
;

3085 
v4l2_buf„r
 
buf
;

3086 * 
image_sour˚
;

3088 
	`mem£t
(&
buf
, 0, (buf));

3090 
buf
.
ty≥
 = 
V4L2_BUF_TYPE_VIDEO_CAPTURE
;

3091 
buf
.
mem‹y
 = 
V4L2_MEMORY_USERPTR
;

3093 
°©us
 = 
	`xio˘l
 (
sour˚∑øms
->
fd
, 
VIDIOC_DQBUF
, &
buf
);

3095 i‡(-1 =
°©us
)

3099 
î∫o
)

3101 
EAGAIN
:

3103 
ªtvÆ
 = 0;

3106 
EIO
:

3109 
	`≥º‹
("Error dequeueing mmap-ed buffer from device");

3110 
ªtvÆ
 = -1;

3118 
image_sour˚
 = (*)(
buf
.
m
.
u£Ωå
);

3120 
	`mem˝y
(
sour˚∑øms
->
ˇ±uªd
.
°¨t
, 
image_sour˚
,

3121 
sour˚∑øms
->
ˇ±uªd
.
Àngth
);

3125 
°©us
 = 
	`xio˘l
 (
sour˚∑øms
->
fd
, 
VIDIOC_QBUF
, &
buf
);

3127 i‡(-1 =
°©us
)

3130 
î∫o
)

3132 
EAGAIN
:

3134 
ªtvÆ
 = 0;

3137 
EIO
:

3140 
	`≥º‹
("ErrorÑequeueing mmap-ed buffer from device");

3141 
ªtvÆ
 = -1;

3147 
ªtvÆ
 = 
sour˚∑øms
->
ˇ±uªd
.
Àngth
;

3152 (
ªtvÆ
);

3153 
	}
}

	@device.h

48 
öô_sour˚_devi˚
(
Cmd¨gs_t
 
¨g°ru˘
,

49 
Sour˚∑øms_t
 * 
sour˚∑øms
,

50 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
);

51 
£t_devi˚_ˇ±uª_∑rms
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

52 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
);

53 
c⁄√˘_sour˚_buf„rs
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

54 
°¨t_ˇ±uª_devi˚
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

55 
°›_ˇ±uª_devi˚
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

56 * 
√xt_devi˚_‰ame
(
Sour˚∑øms_t
 * 
sour˚∑øms
, * 
nbyã•
);

	@display.c

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~<°rög.h
>

49 
	~<GL/gÀw.h
>

50 
	~<GL/glut.h
>

53 
	~"glutˇm.h
"

54 
	~"ˇ∑bûôõs.h
"

55 
	~"ã°∑âîn.h
"

57 
	~"devi˚.h
"

58 
	~"shadî.h
"

60 
	~"ˇŒbacks.h
"

62 
	~"di•œy.h
"

78 
£tup_di•œy_∑øms
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

79 
Di•œyd©a_t
 * 
di•œyd©a
);

80 
£tup_ˇ±uª_di•œy_wödow
(
Di•œyd©a_t
 * 
di•œyd©a
,

81 
Sour˚∑øms_t
 * 
sour˚∑øms
,

82 * 
¨gc
, * 
¨gv
[]);

83 
¸óã_glut_wödow
(
Di•œyd©a_t
 * 
di•œyd©a
,

84 * 
¨gc
, * 
¨gv
[]);

85 
ã°_ogl_„©uªs
();

87 * 
£À˘_shadî_fûe
 (
Sour˚∑øms_t
 * 
sour˚∑øms
);

88 
öô_ogl_video
(
Di•œyd©a_t
 * 
di•œyd©a
, 
Sour˚∑øms_t
 * 
sour˚∑øms
);

90 
£tup_ãxtuª
(
Di•œyd©a_t
 * 
di•œyd©a
, 
Sour˚∑øms_t
 * 
sour˚∑øms
);

91 
compuã_ãxtuª_dimísi⁄
(
dimísi⁄
);

92 
byãs_≥r_pixñ
(
Encodögmëhod_t
 
ícodög
);

93 
£tup_ãxtuª_unô
(
GLíum
 
ãxtuª_unô
, 
ãxtuª_width
,

94 
ãxtuª_height
, 
GLuöt
 
ãx«me
,

95 * 
ãxtuª
, 
GLöt
 
ãxtuª_f‹m©
,

96 
GLíum
 
pixñf‹m©
);

97 
GLöt
 
ãxtuª_öã∫Æ_f‹m©
(
Encodögmëhod_t
 
ícodög
);

98 
GLíum
 
ãxtuª_pixñ_f‹m©
(
Encodögmëhod_t
 
ícodög
);

99 
°¨t_ˇ±uª_sour˚
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

100 
°›_ˇ±uª_sour˚
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

159 
	$£tup_ˇ±uª_di•œy
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

160 
Di•œyd©a_t
 * 
di•œyd©a
,

161 * 
¨gc
, * 
¨gv
[])

163 
°©us
, 
ªtvÆ
;

164 *
shadîfûíame
;

166 
°©us
 = 
	`£tup_di•œy_∑øms
(
sour˚∑øms
, 
di•œyd©a
);

168 i‡(-1 =
°©us
)

170 
ªtvÆ
 = -1;

174 
°©us
 = 
	`£tup_ˇ±uª_di•œy_wödow
(
di•œyd©a
, 
sour˚∑øms
,

175 
¨gc
, 
¨gv
);

177 i‡(-1 =
°©us
)

179 
ªtvÆ
 = -1;

185 
°©us
 = 
	`öô_ogl_video
(
di•œyd©a
, 
sour˚∑øms
);

187 i‡(-1 =
°©us
)

189 
ªtvÆ
 = -1;

193 
shadîfûíame
 = 
	`£À˘_shadî_fûe
(
sour˚∑øms
);

194 
°©us
 = 
	`£tup_shadî
(
shadîfûíame
, 
sour˚∑øms
, 
di•œyd©a
);

196 i‡(-1 =
°©us
)

198 
ªtvÆ
 = -1;

202 
ªtvÆ
 = 0;

207 (
ªtvÆ
);

208 
	}
}

263 
	$£tup_di•œy_∑øms
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

264 
Di•œyd©a_t
 * 
di•œyd©a
)

266 
di•œyd©a
->
wödow_width
 = 
sour˚∑øms
->
image_width
;

267 
di•œyd©a
->
wödow_height
 = 
sour˚∑øms
->
image_height
;

269 
di•œyd©a
->
ãxtuª_width
 =

270 
	`compuã_ãxtuª_dimísi⁄
(
di•œyd©a
->
wödow_width
);

272 
di•œyd©a
->
ãxtuª_height
 =

273 
	`compuã_ãxtuª_dimísi⁄
(
di•œyd©a
->
wödow_height
);

275 
di•œyd©a
->
byãs_≥r_pixñ
 = 
	`byãs_≥r_pixñ
(
sour˚∑øms
->
ícodög
);

277 
di•œyd©a
->
öã∫Æ_f‹m©
 =

278 
	`ãxtuª_öã∫Æ_f‹m©
(
sour˚∑øms
->
ícodög
);

280 
di•œyd©a
->
pixñf‹m©
 = 
	`ãxtuª_pixñ_f‹m©
(
sour˚∑øms
->
ícodög
);

282 
di•œyd©a
->
t0
[0] = 0.0;

283 
di•œyd©a
->
t0
[1] = 0.0;

285 
di•œyd©a
->
t1
[0] = ()di•œyd©a->
wödow_width
/

286 ()
di•œyd©a
->
ãxtuª_width
;

287 
di•œyd©a
->
t1
[1] = 0.0;

289 
di•œyd©a
->
t2
[0] = ()di•œyd©a->
wödow_width
 /

290 ()
di•œyd©a
->
ãxtuª_width
;

291 
di•œyd©a
->
t2
[1] = ()di•œyd©a->
wödow_height
 /

292 ()
di•œyd©a
->
ãxtuª_height
;

294 
di•œyd©a
->
t3
[0] = 0.0;

295 
di•œyd©a
->
t3
[1] = ()di•œyd©a->
wödow_height
 /

296 ()
di•œyd©a
->
ãxtuª_height
;

302 
	}
}

356 #ifde‡
POTS_TEXTURE


357 
	$compuã_ãxtuª_dimísi⁄
(
dimísi⁄
)

359 
i
, 
œrgî_powî_of_two
;

360 
èbÀsize
 = 19;

361 
powîèbÀ
[] = {1, 2, 4, 8, 16, 32, 64, 128, 256,

365 
i
 = 0; i < 
èbÀsize
; i++)

367 
œrgî_powî_of_two
 = 
powîèbÀ
[
i
];

368 i‡(
dimísi⁄
 <
œrgî_powî_of_two
)

373 (
œrgî_powî_of_two
);

374 
	}
}

377 
	$compuã_ãxtuª_dimísi⁄
(
dimísi⁄
)

379 (
dimísi⁄
);

380 
	}
}

453 
	$£tup_ˇ±uª_di•œy_wödow
(
Di•œyd©a_t
 * 
di•œyd©a
,

454 
Sour˚∑øms_t
 * 
sour˚∑øms
,

455 * 
¨gc
, * 
¨gv
[])

457 
°©us
, 
ªtvÆ
;

460 
	`¸óã_glut_wödow
(
di•œyd©a
, 
¨gc
, 
¨gv
);

463 
°©us
 = 
	`ã°_ogl_„©uªs
();

465 i‡(-1 =
°©us
)

467 
ªtvÆ
 = -1;

471 
	`£tup_glut_wödow_ˇŒbacks
(
di•œyd©a
, 
sour˚∑øms
);

472 
ªtvÆ
 = 0;

475 (
ªtvÆ
);

476 
	}
}

544 
	$ã°_ogl_„©uªs
()

546 
ªtvÆ
;

547 
GLöt
 
max_ãxtuª_unô
;

548 
GLöt
 
‰ag_™d_vît_unôs
,
‰ag_image_unôs
, 
vît_image_unôs
 ;

549 * 
ªndîî
;

550 * 
víd‹
;

551 * 
vîsi⁄
;

553 
	`Ârötf
(
°dîr
, "\nOpengl information\n");

555 
ªndîî
 = (*)
	`glGëSåög
(
GL_RENDERER
);

556 
víd‹
 = (*)
	`glGëSåög
(
GL_VENDOR
);

557 
vîsi⁄
 = (*)
	`glGëSåög
(
GL_VERSION
);

559 
	`Ârötf
(
°dîr
, "Opengl vendor '%s'\nÑenderer '%s' \n version '%s'\n",

560 
víd‹
, 
ªndîî
, 
vîsi⁄
);

562 
	`gÀwInô
();

563 i‡(
	`gÀwIsSuµ‹ãd
("GL_VERSION_2_0"))

565 
	`glGëI¡egîv
(
GL_MAX_TEXTURE_UNITS
, &
max_ãxtuª_unô
);

566 
	`Ârötf
(
°dîr
, "Suµ‹ãdÅextuª unôs: %d\n", 
max_ãxtuª_unô
);

567 i‡(3 > 
max_ãxtuª_unô
)

569 
	`Ârötf
(
°dîr
, "Warning: you have only %dÅexture units,\n",

570 
max_ãxtuª_unô
);

571 
	`Ârötf
(
°dîr
, "ThisÖrogram implements YUV420 usingÅhree ");

572 
	`Ârötf
(
°dîr
,

577 
	`glGëI¡egîv
(
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
, &
‰ag_™d_vît_unôs
);

578 
	`Ârötf
(
°dîr
, "%d hardware units canáccessÅexture data from vertex ",

579 
‰ag_™d_vît_unôs
);

580 
	`Ârötf
(
°dîr
, "and fragmentÖrocessors\n");

581 
	`glGëI¡egîv
(
GL_MAX_TEXTURE_IMAGE_UNITS
, &
‰ag_image_unôs
);

582 
	`Ârötf
(
°dîr
, "%d hardware units canáccessÅexture data from ",

583 
‰ag_image_unôs
);

584 
	`Ârötf
(
°dîr
, "fragmentÖrocessors\n");

585 
	`glGëI¡egîv
(
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
, &
vît_image_unôs
);

586 
	`Ârötf
(
°dîr
, "%d hardware units canáccessÅexture data from ",

587 
vît_image_unôs
);

588 
	`Ârötf
(
°dîr
, "vertexÖrocessors\n");

590 
	`Ârötf
(
°dîr
, "Ready for OpenGL 2.0\n");

591 
ªtvÆ
 = 0;

598 
	`Ârötf
(
°dîr
,

600 
ªtvÆ
 = -1;

603 i‡(
	`gÀwIsSuµ‹ãd
("GL_ARB_imaging"))

605 
	`Ârötf
(
°dîr
, "We haveÅhe imaging subset: histograms supported\n");

609 
	`Ârötf
(
°dîr
, "ThisÖrogram usesÅhe OpenGL imaging subset for ");

610 
	`Ârötf
(
°dîr
, "histograms. You OpenGL implementation doesn't ");

611 
	`Ârötf
(
°dîr
, "supportÅhat GL_ARB_imaging subset. \n");

612 
	`Ârötf
(
°dîr
, "Histograms won't work for you. \n");

614 (
ªtvÆ
);

618 
	}
}

671 
	$¸óã_glut_wödow
(
Di•œyd©a_t
 * 
di•œyd©a
,

672 * 
¨gc
, * 
¨gv
[])

677 
	`glutInôWödowSize
(
di•œyd©a
->
wödow_width
, di•œyd©a->
wödow_height
);

678 
	`glutInô
(
¨gc
, 
¨gv
);

680 
	`glutInôDi•œyMode
(
GLUT_RGB
 | 
GLUT_DOUBLE
);

682 
di•œyd©a
->
wödow_id
 = 
	`glutCª©eWödow
("glutcam");

684 
	}
}

733 * 
	$£À˘_shadî_fûe
 (
Sour˚∑øms_t
 * 
sour˚∑øms
)

735 * 
shadîfûíame
;

737 
sour˚∑øms
->
ícodög
)

739 
LUMA
:

740 
shadîfûíame
 = "luma.frag";

743 
YUV420
:

744 
shadîfûíame
 = "yuv420.frag";

747 
YUV422
:

748 
shadîfûíame
 = "yuv422.frag";

751 
RGB
:

752 
shadîfûíame
 = "rgb.frag";

756 
	`Ârötf
(
°dîr
, "Error: %s doesn't haveá case forÉncoding %d\n",

757 
__FUNCTION__
, 
sour˚∑øms
->
ícodög
);

758 
	`Ârötf
(
°dîr
, "add oneándÑecompile\n");

759 
	`ab‹t
();

763 (
shadîfûíame
);

765 
	}
}

816 
	$ˇ±uª_™d_di•œy
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

819 
°©us
;

821 
°©us
 = 
	`°¨t_ˇ±uª_sour˚
(
sour˚∑øms
);

823 i‡(-1 =
°©us
)

825 
	`Ârötf
(
°dîr
, "Error: unableÅo start capture device\n");

829 
	`Ârötf
(
°dîr
, "\nPressá key inÅhe display window\n");

830 
	`glutMaöLo›
();

831 
°©us
 = 
	`°›_ˇ±uª_sour˚
(
sour˚∑øms
);

833 
	}
}

889 
	$öô_ogl_video
(
Di•œyd©a_t
 * 
di•œyd©a
, 
Sour˚∑øms_t
 * 
sour˚∑øms
)

891 
°©us
;

893 
	`glCÀ¨Cﬁ‹
(0.0, 0.0, 0.0, 1.0);

894 
	`glCÀ¨
(
GL_COLOR_BUFFER_BIT
);

896 
	`glFöish
();

897 
	`glutSw≠Buf„rs
();

899 
°©us
 = 
	`£tup_ãxtuª
(
di•œyd©a
, 
sour˚∑øms
);

901 (
°©us
);

902 
	}
}

963 
	$£tup_ãxtuª
(
Di•œyd©a_t
 * 
di•œyd©a
, 
Sour˚∑øms_t
 * 
sour˚∑øms
)

965 
°©us
;

966 
ãxtuª_size
, 
luma_size
, 
chroma_size
, 
chroma_width
, 
chroma_height
;

967 
GLöt
 
öã∫Æ_f‹m©
;

968 
GLíum
 
pixñf‹m©
;

970 
öã∫Æ_f‹m©
 = (
GLöt
)
di•œyd©a
->internal_format;

972 
pixñf‹m©
 = (
GLíum
)
di•œyd©a
->pixelformat;

975 
di•œyd©a
->
byãs_≥r_pixñ
 = 
	`byãs_≥r_pixñ
(
sour˚∑øms
->
ícodög
);

977 
ãxtuª_size
 = 
di•œyd©a
->
ãxtuª_width
 * di•œyd©a->
ãxtuª_height
 *

978 
di•œyd©a
->
byãs_≥r_pixñ
;

979 
	`¥ötf
("displaydata->texture_width=%d,displaydata->texture_height=%d,displaydata->bytes_per_pixel=%d\n",

980 
di•œyd©a
->
ãxtuª_width
, di•œyd©a->
ãxtuª_height
, di•œyd©a->
byãs_≥r_pixñ
);

987 i‡(
YUV420
 =
sour˚∑øms
->
ícodög
)

989 
luma_size
 = 
ãxtuª_size
;

990 
chroma_width
 = 
di•œyd©a
->
ãxtuª_width
 / 2;

991 
chroma_height
 = 
di•œyd©a
->
ãxtuª_height
 / 2;

992 
chroma_size
 = 
ãxtuª_size
 / 4;

993 
ãxtuª_size
 = 
luma_size
 + 2 * 
chroma_size
;

998 
chroma_width
 = 0;

999 
chroma_height
 = 0;

1000 
chroma_size
 = 0;

1001 
luma_size
 = 0;

1004 
di•œyd©a
->
ãxtuª
 = 
	`mÆloc
(
ãxtuª_size
);

1007 i‡(
NULL
 =
di•œyd©a
->
ãxtuª
)

1009 
°©us
 = -1;

1010 
	`≥º‹
("Error: can'tállocateÅexture memory");

1014 i‡(
YUV420
 =
sour˚∑øms
->
ícodög
)

1018 
di•œyd©a
->
u_ãxtuª
 = (*)di•œyd©a->
ãxtuª
 + 
luma_size
;

1019 
di•œyd©a
->
v_ãxtuª
 = (*)di•œyd©a->
u_ãxtuª
 +

1020 
chroma_size
;

1023 
	`glGíTextuªs
(1, &(
di•œyd©a
->
u_ãxtuª«me
));

1024 
	`check_îr‹
("after glGenTextures");

1025 
	`glGíTextuªs
(1, &(
di•œyd©a
->
v_ãxtuª«me
));

1026 
	`check_îr‹
("after glGenTextures");

1029 
di•œyd©a
->
v_ãxtuª_unô
 = 2;

1030 
di•œyd©a
->
u_ãxtuª_unô
 = 1;

1032 
	`£tup_ãxtuª_unô
(
GL_TEXTURE2
, 
chroma_width
,

1033 
chroma_height
, 
di•œyd©a
->
v_ãxtuª«me
,

1034 
di•œyd©a
->
v_ãxtuª
, 
öã∫Æ_f‹m©
,

1035 
pixñf‹m©
);

1037 
	`£tup_ãxtuª_unô
(
GL_TEXTURE1
, 
chroma_width
,

1038 
chroma_height
, 
di•œyd©a
->
u_ãxtuª«me
,

1039 
di•œyd©a
->
u_ãxtuª
, 
öã∫Æ_f‹m©
,

1040 
pixñf‹m©
);

1047 
di•œyd©a
->
u_ãxtuª
 = 
NULL
;

1048 
di•œyd©a
->
v_ãxtuª
 = 
NULL
;

1049 
di•œyd©a
->
u_ãxtuª«me
 = 0;

1050 
di•œyd©a
->
v_ãxtuª«me
 = 0;

1051 
di•œyd©a
->
v_ãxtuª_unô
 = 0;

1052 
di•œyd©a
->
u_ãxtuª_unô
 = 0;

1060 
di•œyd©a
->
¥im¨y_ãxtuª_unô
 = 0;

1062 
	`glGíTextuªs
(1, &(
di•œyd©a
->
ãxtuª«me
));

1063 
	`check_îr‹
("after glGenTextures");

1065 
	`£tup_ãxtuª_unô
(
GL_TEXTURE0
,

1066 
di•œyd©a
->
ãxtuª_width
,

1067 
di•œyd©a
->
ãxtuª_height
,

1068 
di•œyd©a
->
ãxtuª«me
, di•œyd©a->
ãxtuª
,

1069 
öã∫Æ_f‹m©
, 
pixñf‹m©
);

1076 
	`mem£t
(
di•œyd©a
->
ãxtuª
, 0, 
ãxtuª_size
);

1078 
°©us
 = 0;

1080 (
°©us
);

1081 
	}
}

1135 
	$£tup_ãxtuª_unô
(
GLíum
 
ãxtuª_unô
, 
ãxtuª_width
,

1136 
ãxtuª_height
, 
GLuöt
 
ãx«me
,

1137 * 
ãxtuª
, 
GLöt
 
ãxtuª_f‹m©
,

1138 
GLíum
 
pixñf‹m©
)

1142 
	`glA˘iveTextuª
(
ãxtuª_unô
);

1143 
	`glE«bÀ
(
GL_TEXTURE_2D
);

1144 
	`check_îr‹
("after glActiveTexture");

1145 
	`glBödTextuª
(
GL_TEXTURE_2D
, 
ãx«me
);

1146 
	`check_îr‹
("after glBindTexture");

1147 
	`glTexP¨amëîf
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_NEAREST
);

1148 
	`glTexP¨amëîf
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_NEAREST
);

1149 
	`check_îr‹
("after glTexParameterf");

1150 
	`glTexEnvf
(
GL_TEXTURE_ENV
,
GL_TEXTURE_ENV_MODE
,
GL_DECAL
);

1151 
	`glTexImage2D
(
GL_TEXTURE_2D
 , 0, 
ãxtuª_f‹m©
,

1152 
ãxtuª_width
, 
ãxtuª_height
,

1153 0, 
pixñf‹m©
, 
GL_UNSIGNED_BYTE
,

1154 
ãxtuª
);

1155 
	`check_îr‹
("after glTexImage2D");

1158 
	}
}

1209 
	$byãs_≥r_pixñ
(
Encodögmëhod_t
 
ícodög
)

1211 
bµ
;

1214 
ícodög
)

1216 
LUMA
:

1218 
bµ
 = 1;

1221 
YUV420
:

1224 
bµ
 = 1;

1227 
YUV422
:

1229 
bµ
 = 2;

1232 
RGB
:

1234 
bµ
 = 3;

1238 
	`Ârötf
(
°dîr
, "Error: %s doesn't haveá case forÉncoding %d\n",

1239 
__FUNCTION__
, 
ícodög
);

1240 
	`Ârötf
(
°dîr
, "add oneándÑecompile\n");

1241 
	`ab‹t
();

1245 (
bµ
);

1246 
	}
}

1294 
GLöt
 
	$ãxtuª_öã∫Æ_f‹m©
(
Encodögmëhod_t
 
ícodög
)

1296 
f‹m©
;

1298 
ícodög
)

1300 
LUMA
:

1302 
f‹m©
 = 
GL_LUMINANCE
;

1305 
YUV420
:

1308 
f‹m©
 = 
GL_LUMINANCE
;

1311 
YUV422
:

1313 
f‹m©
 = 
GL_LUMINANCE_ALPHA
;

1316 
RGB
:

1318 
f‹m©
 = 
GL_RGB
;

1322 
	`Ârötf
(
°dîr
, "Error: %s doesn't haveá case forÉncoding %d\n",

1323 
__FUNCTION__
, 
ícodög
);

1324 
	`Ârötf
(
°dîr
, "add oneándÑecompile\n");

1325 
	`ab‹t
();

1329 (
f‹m©
);

1330 
	}
}

1380 
GLíum
 
	$ãxtuª_pixñ_f‹m©
(
Encodögmëhod_t
 
ícodög
)

1382 
f‹m©
;

1384 
ícodög
)

1386 
LUMA
:

1388 
f‹m©
 = 
GL_LUMINANCE
;

1391 
YUV420
:

1395 
f‹m©
 = 
GL_LUMINANCE
;

1398 
YUV422
:

1400 
f‹m©
 = 
GL_LUMINANCE_ALPHA
;

1403 
RGB
:

1405 
f‹m©
 = 
GL_RGB
;

1409 
	`Ârötf
(
°dîr
, "Error: %s doesn't haveá case forÉncoding %d\n",

1410 
__FUNCTION__
, 
ícodög
);

1411 
	`Ârötf
(
°dîr
, "add oneándÑecompile\n");

1412 
	`ab‹t
();

1416 (
f‹m©
);

1417 
	}
}

1478 
	$°¨t_ˇ±uª_sour˚
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

1480 
ªtvÆ
;

1482 
sour˚∑øms
->
sour˚
)

1484 
TESTPATTERN
:

1485 
ªtvÆ
 = 
	`°¨t_ã°∑âîn
(
sour˚∑øms
);

1488 
LIVESOURCE
:

1489 
ªtvÆ
 = 
	`°¨t_ˇ±uª_devi˚
(
sour˚∑øms
);

1493 
	`Ârötf
(
°dîr
, "Error: %s doesn't haveá case for source %d\n",

1494 
__FUNCTION__
, 
sour˚∑øms
->
sour˚
);

1495 
	`Ârötf
(
°dîr
, "add oneándÑecompile\n");

1496 
	`ab‹t
();

1499 (
ªtvÆ
);

1500 
	}
}

1559 
	$°›_ˇ±uª_sour˚
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

1561 
ªtvÆ
;

1563 
sour˚∑øms
->
sour˚
)

1565 
TESTPATTERN
:

1567 
ªtvÆ
 = 0;

1570 
LIVESOURCE
:

1571 
ªtvÆ
 = 
	`°›_ˇ±uª_devi˚
(
sour˚∑øms
);

1575 
	`Ârötf
(
°dîr
, "Error: %s doesn't haveá case for source %d\n",

1576 
__FUNCTION__
, 
sour˚∑øms
->
sour˚
);

1577 
	`Ârötf
(
°dîr
, "add oneándÑecompile\n");

1578 
ªtvÆ
 = 0;

1579 
	`ab‹t
();

1582 (
ªtvÆ
);

1583 
	}
}

1630 
	$íd_ˇ±uª_di•œy
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

1631 
Di•œyd©a_t
 * 
di•œyd©a
)

1633 
sour˚∑øms
->
sour˚
)

1635 
TESTPATTERN
:

1639 
LIVESOURCE
:

1640 (Ë
	`°›_ˇ±uª_devi˚
(
sour˚∑øms
);

1644 
	`Ârötf
(
°dîr
, "Error: %s doesn't haveá case for source %d\n",

1645 
__FUNCTION__
, 
sour˚∑øms
->
sour˚
);

1646 
	`Ârötf
(
°dîr
, "add oneándÑecompile\n");

1647 
	`ab‹t
();

1651 
	}
}

1699 
	$des¸ibe_ˇ±uªd_pixñs
(* 
œbñ
, 
Sour˚∑øms_t
 * 
sour˚∑øms
,

1700 
≈ixñs
)

1702 * 
sour˚
;

1703 * 
y
;

1704 * 
u
;

1705 * 
v
;

1706 * 
pixñp
;

1707 
buf„æígth
, 
i
, 
n
;

1708 
image_width
, 
image_height
, 
nimagïixñs
;

1709 
Encodögmëhod_t
 
ícodög
;

1711 
buf„æígth
 = 
sour˚∑øms
->
ˇ±uªd
.
Àngth
;

1712 
sour˚
 = 
sour˚∑øms
->
ˇ±uªd
.
°¨t
;

1713 
ícodög
 = 
sour˚∑øms
->encoding;

1714 
image_width
 = 
sour˚∑øms
->image_width;

1715 
image_height
 = 
sour˚∑øms
->image_height;

1716 
nimagïixñs
 = 
image_width
 * 
image_height
;

1718 
	`Ârötf
(
°dîr
, "%s", 
œbñ
);

1719 
	`Ârötf
(
°dîr
, "imagêwidth %d imagêheighà%d\n", 
image_width
,

1720 
image_height
);

1721 
	`Ârötf
(
°dîr
, "buf„∏°¨t†© %∞ha†Àngth %d\n", 
sour˚
, 
buf„æígth
);

1723 i‡(
buf„æígth
 < 
≈ixñs
)

1725 
n
 = 
buf„æígth
;

1729 
n
 = 
≈ixñs
;

1732 
ícodög
)

1734 
LUMA
:

1735 
	`Ârötf
(
°dîr
, "Luma ");

1736 
i
 = 0; i < 
n
; i++)

1738 
	`Ârötf
(
°dîr
, "%x ", 
sour˚
[
i
]);

1740 
	`Ârötf
(
°dîr
, "\n");

1743 
YUV420
:

1744 
y
 = 
sour˚
;

1745 
u
 = 
sour˚
 + 
nimagïixñs
;

1746 
v
 = 
u
 + 
nimagïixñs
 / 4;

1748 
	`Ârötf
(
°dîr
, "YUV ");

1749 
i
 = 0; i < 
n
; i++)

1752 
	`Ârötf
(
°dîr
, "[%x %x %x]", 
y
[
i
], 
u
[i/4], 
v
[i/4] );

1757 
YUV422
:

1758 
i
 = 0; i < 
n
; i+=4)

1760 
pixñp
 = 
sour˚
 + 
i
;

1761 
	`Ârötf
(
°dîr
, "[%x %x %x %x]\n", *
pixñp
, *(pixelp + 1),

1762 *(
pixñp
 + 2), *(pixelp + 3));

1766 
RGB
:

1767 
	`Ârötf
(
°dîr
, "RGB ");

1768 
i
 = 0; i < 
n
 - 2; i+=3)

1770 
	`Ârötf
(
°dîr
, "[%x %x %x] ", 
sour˚
[
i
], source[i+1], source[i+2]);

1772 
	`Ârötf
(
°dîr
, "\n");

1776 
	`Ârötf
(
°dîr
, "Error: %s doesn't haveá case forÉncoding %d\n",

1777 
__FUNCTION__
, 
ícodög
);

1778 
	`Ârötf
(
°dîr
, "add oneándÑecompile\n");

1779 
	`ab‹t
();

1782 
	}
}

	@display.h

29 
£tup_ˇ±uª_di•œy
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

30 
Di•œyd©a_t
 * 
di•œyd©a
,

31 * 
¨gc
, * 
¨gv
[]);

34 
ˇ±uª_™d_di•œy
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

37 
íd_ˇ±uª_di•œy
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

38 
Di•œyd©a_t
 * 
di•œyd©a
);

40 
des¸ibe_ˇ±uªd_pixñs
(* 
œbñ
,

41 
Sour˚∑øms_t
 * 
sour˚∑øms
,

42 
≈ixñs
);

	@glutcam.c

49 
	~<°dio.h
>

50 
	~<°rög.h
>

52 
	~"glutˇm.h
"

53 
	~"∑r£¨gs.h
"

54 
	~"di•œy.h
"

55 
	~"ˇ∑bûôõs.h
"

57 
	~"ã°∑âîn.h
"

58 
	~"devi˚.h
"

61 
£tup_ˇ±uª_sour˚
(
Cmd¨gs_t
 
¨g°ru˘
, 
Sour˚∑øms_t
 * 
sour˚∑øms
);

62 
öô_image_sour˚
(
Cmd¨gs_t
 
¨g°ru˘
, 
Sour˚∑øms_t
 * 
sour˚∑øms
,

63 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
);

64 
£t_ˇ±uª_∑ømëîs
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

65 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
);

113 
	$maö
(
¨gc
, * 
¨gv
[])

115 
¨g°©
, 
ˇ±uª°©
, 
di•œy°©
, 
ªtvÆ
;

116 
Cmd¨gs_t
 
¨g°ru˘
;

117 
Sour˚∑øms_t
 
sour˚∑øms
;

118 
Di•œyd©a_t
 
di•œyd©a
;

120 
ªtvÆ
 = 0;

122 
	`mem£t
(&
sour˚∑øms
, 0, (sourceparams));

124 
¨g°©
 = 
	`∑r£_comm™d_löe
(
¨gc
, 
¨gv
, &
¨g°ru˘
);

126 i‡(0 =
¨g°©
)

129 
ˇ±uª°©
 = 
	`£tup_ˇ±uª_sour˚
(
¨g°ru˘
, &
sour˚∑øms
);

131 i‡(0 =
ˇ±uª°©
)

133 
di•œy°©
 = 
	`£tup_ˇ±uª_di•œy
(&
sour˚∑øms
, &
di•œyd©a
,

134 &
¨gc
, 
¨gv
);

135 i‡(0 =
di•œy°©
)

137 
	`ˇ±uª_™d_di•œy
(&
sour˚∑øms
);

141 
ªtvÆ
 = -1;

146 
ªtvÆ
 = -1;

151 
ªtvÆ
 = -1;

154 (
ªtvÆ
);

155 
	}
}

206 
	$£tup_ˇ±uª_sour˚
(
Cmd¨gs_t
 
¨g°ru˘
, 
Sour˚∑øms_t
 * 
sour˚∑øms
)

208 
sour˚°©us
, 
ˇ±uª°©us
, 
ªtvÆ
;

209 
Videoˇ∑bûôõs_t
 
ˇ∑bûôõs
;

211 
ªtvÆ
 = -1;

213 
sour˚°©us
 = 
	`öô_image_sour˚
(
¨g°ru˘
, 
sour˚∑øms
, &
ˇ∑bûôõs
);

215 i‡(0 =
sour˚°©us
)

217 
ˇ±uª°©us
 = 
	`£t_ˇ±uª_∑ømëîs
(
sour˚∑øms
, &
ˇ∑bûôõs
);

219 i‡(0 =
ˇ±uª°©us
)

221 
ªtvÆ
 = 
	`c⁄√˘_sour˚_buf„rs
(
sour˚∑øms
);

225 (
ªtvÆ
);

227 
	}
}

295 
	$öô_image_sour˚
(
Cmd¨gs_t
 
¨g°ru˘
, 
Sour˚∑øms_t
 * 
sour˚∑øms
,

296 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
)

298 
°©us
;

301 i‡(
TESTPATTERN
 =
¨g°ru˘
.
sour˚
)

306 
°©us
 = 
	`öô_ã°_∑âîn
(
¨g°ru˘
, 
sour˚∑øms
);

312 
°©us
 = 
	`öô_sour˚_devi˚
(
¨g°ru˘
, 
sour˚∑øms
, 
ˇ∑bûôõs
);

315 (
°©us
);

316 
	}
}

366 
	$£t_ˇ±uª_∑ømëîs
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

367 
Videoˇ∑bûôõs_t
 * 
ˇ∑bûôõs
)

370 
°©us
;

373 i‡(
TESTPATTERN
 =
sour˚∑øms
->
sour˚
)

375 
°©us
 = 0;

380 
°©us
 = 
	`£t_devi˚_ˇ±uª_∑rms
(
sour˚∑øms
, 
ˇ∑bûôõs
);

383 (
°©us
);

384 
	}
}

	@glutcam.h

34 
	#MAX_DEVICENAME
 80

	)

39 
	eöputsour˚_e
 {

40 
	mTESTPATTERN
,

41 
	mLIVESOURCE


42 } 
	tI≈utsour˚_t
;

47 
	eícodögmëhod_e
 {

48 
	mLUMA
,

49 
	mYUV420
,

50 
	mYUV422
,

52 
	mRGB


53 } 
	tEncodögmëhod_t
;

59 
	eouçut_e
 {

60 
	mGREYSCALE
,

61 
	mCOLOR


62 } 
	tOuçut_t
;

66 
	scmd¨gs
 {

67 
	mdevi˚«me
[
MAX_DEVICENAME
];

68 
I≈utsour˚_t
 
	msour˚
;

69 
Encodögmëhod_t
 
	mícodög
;

71 
	mimage_width
;

72 
	mimage_height
;

73 } 
	tCmd¨gs_t
;

79 
	eiomëhod_e
 {

80 
	mIO_METHOD_READ
,

81 
	mIO_METHOD_MMAP
,

82 
	mIO_METHOD_USERPTR


83 } 
	tIomëhod_t
;

90 
	sã°∑âîn_s
 {

91 
	mimage_width
;

92 
	mimage_height
;

93 
	mbuf„rsize
;

94 
Encodögmëhod_t
 
	mícodög
;

95 
	mnbuf„rs
;

96 * 
	mbuf„øºay
;

97 
	mcuºít_buf„r
;

98 } 
	tTe°∑âîn_t
;

109 
	svideobuf„r_s
 {

110 * 
	m°¨t
;

111 
size_t
 
	mÀngth
;

112 } 
	tVideobuf„r_t
;

116 
	#MAX_VIDEO_BUFFERS
 4

	)

127 
	ssour˚∑øms
 {

128 
I≈utsour˚_t
 
	msour˚
;

129 
	mfd
;

130 
Encodögmëhod_t
 
	mícodög
;

131 
	mimage_width
;

132 
	mimage_height
;

133 
Iomëhod_t
 
	miomëhod
;

134 
	mbuf„rcou¡
;

135 
Videobuf„r_t
 
	mbuf„rs
[
MAX_VIDEO_BUFFERS
];

136 
Te°∑âîn_t
 
	mã°∑âîn
;

137 
Videobuf„r_t
 
	mˇ±uªd
;

138 } 
	tSour˚∑øms_t
;

142 
	sdi•œyd©a
 {

143 
	mwödow_id
;

144 
	mwödow_width
;

145 
	mwödow_height
;

146 
	mãxtuª_width
;

147 
	mãxtuª_height
;

148 
	mbyãs_≥r_pixñ
;

149 
	möã∫Æ_f‹m©
;

150 
	mpixñf‹m©
;

151 
	mãxtuª«me
;

152 
	mu_ãxtuª«me
;

153 
	mv_ãxtuª«me
;

154 
	m¥im¨y_ãxtuª_unô
;

155 
	mu_ãxtuª_unô
;

156 
	mv_ãxtuª_unô
;

157 
	mt0
[2];

158 
	mt1
[2];

159 
	mt2
[2];

160 
	mt3
[2];

161 * 
	mãxtuª
;

162 * 
	mu_ãxtuª
;

163 * 
	mv_ãxtuª
;

164 } 
	tDi•œyd©a_t
;

	@parseargs.c

38 
	~<°dio.h
>

39 
	~<uni°d.h
>

40 
	~<°rög.h
>

41 
	~<°dlib.h
>

43 
	~"glutˇm.h
"

44 
	~"∑r£¨gs.h
"

47 *
›èrg
;

121 
	$∑r£_comm™d_löe
 (
¨gc
, * 
¨gv
[], 
Cmd¨gs_t
 *
¨gs
)

123 
›t
, 
u√x≥˘ed
, 
ªtvÆ
;

125 
¨gs
->
sour˚
 = 
TESTPATTERN
;

127 
¨gs
->
devi˚«me
[0] = 0;

128 
¨gs
->
image_width
 = 320;

129 
¨gs
->
image_height
 = 240;

130 
¨gs
->
ícodög
 = 
LUMA
;

132 
u√x≥˘ed
 = 0;

133 
ªtvÆ
 = 0;

135 
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:o:w:h:e:");

137 (-1 !
›t
Ë&& (0 =
u√x≥˘ed
))

139 
›t
) {

141 
	`°∫˝y
(
¨gs
->
devi˚«me
, 
›èrg
, 
MAX_DEVICENAME
);

142 
¨gs
->
sour˚
 = 
LIVESOURCE
;

146 
¨gs
->
image_width
 = 
	`©oi
(
›èrg
);

150 
¨gs
->
image_height
 = 
	`©oi
(
›èrg
);

157 i‡(0 =
	`°rcmp
("LUMA", 
›èrg
))

159 
¨gs
->
ícodög
 = 
LUMA
;

161 i‡(0 =
	`°rcmp
("YUV420", 
›èrg
))

163 
¨gs
->
ícodög
 = 
YUV420
;

165 i‡(0 =
	`°rcmp
("YUV422", 
›èrg
))

167 
¨gs
->
ícodög
 = 
YUV422
;

170 i‡(0 =
	`°rcmp
("RGB_BAYER", 
›èrg
))

172 
¨gs
->
ícodög
 = 
RGB_BAYER
;

176 i‡(0 =
	`°rcmp
("RGB", 
›èrg
))

178 
¨gs
->
ícodög
 = 
RGB
;

182 
	`Ârötf
(
°dîr
, "imageÉncoding (-e) option '%s'ÇotÑecognized\n",

183 
›èrg
);

184 
	`Ârötf
(
°dîr
,

186 
u√x≥˘ed
 = 1;

190 
	`Ârötf
(
°dîr
, "ErrorÖarsing commandÜineárgument -%c\n",

191 
›t
);

192 
	`Ârötf
(
°dîr
, "Ußge: %†%†%s\n", 
¨gv
[0],

196 
u√x≥˘ed
 = 1;

197 
ªtvÆ
 = -1;

200 
›t
 = 
	`gë›t
(
¨gc
, 
¨gv
, "d:o:w:h:e:");

203 i‡(1 =
u√x≥˘ed
)

205 
ªtvÆ
 = -1;

207 (
ªtvÆ
);

208 
	}
}

	@parseargs.h

33 
∑r£_comm™d_löe
 (
¨gc
, * 
¨gv
[], 
Cmd¨gs_t
 *
¨gs
);

	@shader.c

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

44 
	~<GL/gÀw.h
>

45 
	~<GL/glut.h
>

47 
	~"glutˇm.h
"

48 
	~"ãxtfûe.h
"

50 
	~"shadî.h
"

55 
	#CONVOLUTION_KERNEL_SIZE
 3

	)

60 
GLuöt
 
£tup_shadî_¥ogøm
(* 
sour˚fûíame
);

61 
£tup_shadî_öãrÁ˚
(
GLuöt
 
¥ogøm
, 
Sour˚∑øms_t
 * 
sour˚∑øms
,

62 
Di•œyd©a_t
 * 
di•œyd©a
);

63 
¥öt_shadî_öfo_log
(
GLuöt
 
obj
);

64 
check_îr‹
(*
œbñ
);

65 
öôülize_ãxtuª_co‹d_off£ts
(
GLÊﬂt
 *
off£ts
, 
kî√l_size
,

66 
GLÊﬂt
 
ãxtuª_width
,

67 
GLÊﬂt
 
ãxtuª_height
);

68 
¥öt_shadî_unif‹m_v¨s
(
GLuöt
 
¥ogøm
);

83 
	gshadî_⁄_loˇti⁄
 = 0;

99 
	gcﬁ‹_ouçut_loˇti⁄
 = 1;

113 
	gimage_¥o˚ssög_loˇti⁄
 = 0;

156 
	$shadî_⁄
()

158 
	`glUnif‹m1i
(
shadî_⁄_loˇti⁄
, 1);

159 
	}
}

206 
	$shadî_off
()

208 
	`glUnif‹m1i
(
shadî_⁄_loˇti⁄
, 0);

209 
	}
}

254 
	$cﬁ‹_ouçut
(
⁄off
)

256 i‡(0 =
⁄off
)

258 
	`glUnif‹m1i
(
cﬁ‹_ouçut_loˇti⁄
, 0);

262 
	`glUnif‹m1i
(
cﬁ‹_ouçut_loˇti⁄
, 1);

266 
	}
}

313 
	$image_¥o˚ssög_Æg‹ôhm
(
Æg‹ôhm
)

315 
	`glUnif‹m1i
(
image_¥o˚ssög_loˇti⁄
, 
Æg‹ôhm
);

316 
	}
}

368 
	$£tup_shadî
(* 
fûíame
, 
Sour˚∑øms_t
 * 
sour˚∑øms
,

369 
Di•œyd©a_t
 * 
di•œyd©a
)

371 
GLuöt
 
¥ogøm
;

372 
ªtvÆ
;

374 
¥ogøm
 = 
	`£tup_shadî_¥ogøm
(
fûíame
);

375 i‡(0 =
¥ogøm
)

378 
ªtvÆ
 = -1;

382 
ªtvÆ
 = 
	`£tup_shadî_öãrÁ˚
(
¥ogøm
, 
sour˚∑øms
, 
di•œyd©a
);

384 (
ªtvÆ
);

386 
	}
}

434 
GLuöt
 
	$£tup_shadî_¥ogøm
(* 
sour˚fûíame
)

436 
GLuöt
 
ªtvÆ
;

437 
GLuöt
 
‰ag_shadî
, 
shadî_¥ogøm
;

438 *
‰ag_sour˚
;

439 
GLch¨
 ** 
‰ag_sour˚p
;

441 
‰ag_shadî
 = 
	`glCª©eShadî
(
GL_FRAGMENT_SHADER
);

443 i‡(0 =
‰ag_shadî
)

445 
	`Ârötf
(
°dîr
, "Error creating shader\n");

446 
	`check_îr‹
("Error creating fragment shader");

447 
ªtvÆ
 = 0;

454 
‰ag_sour˚
 = 
	`ãxtFûeRód
(
sour˚fûíame
);

456 i‡(
NULL
 =
‰ag_sour˚
)

458 
	`Ârötf
(
°dîr
, "Error:no fileÅoÑeadÅhe fragment shader from\n");

459 
	`Ârötf
(
°dîr
, " c™'àföd fûê'%s'\n", 
sour˚fûíame
);

460 
ªtvÆ
 = 0;

463 
‰ag_sour˚p
 = &
‰ag_sour˚
;

465 
	`glShadîSour˚
(
‰ag_shadî
, 1, (c⁄° 
GLch¨
 **)
‰ag_sour˚p
,
NULL
);

467 
	`check_îr‹
("after glShaderSource");

470 
	`glCompûeShadî
(
‰ag_shadî
);

472 
	`check_îr‹
("after glCompileShader");

474 
shadî_¥ogøm
 = 
	`glCª©eProgøm
();

476 i‡(0 =
shadî_¥ogøm
)

478 
	`Ârötf
(
°dîr
,

480 
	`check_îr‹
("Error creating shaderÖrogram");

481 
ªtvÆ
 = 0;

485 
	`glAâachShadî
(
shadî_¥ogøm
, 
‰ag_shadî
);

487 
	`check_îr‹
("after glAttachShader");

489 
	`glLökProgøm
(
shadî_¥ogøm
);

490 
	`check_îr‹
("after glAttachShader");

493 
	`¥öt_shadî_öfo_log
(
shadî_¥ogøm
);

498 
	`glU£Progøm
(
shadî_¥ogøm
);

499 
	`check_îr‹
("after glUseProgram");

501 
ªtvÆ
 = 
shadî_¥ogøm
;

504 (
ªtvÆ
);

505 
	}
}

551 
	$¥öt_shadî_öfo_log
(
GLuöt
 
obj
)

553 
log_Àngth
 = 0;

554 
ch¨s_wrôãn
 = 0;

555 *
öfo_log
;

557 
	`glGëProgømiv
(
obj
, 
GL_INFO_LOG_LENGTH
,&
log_Àngth
);

559 i‡(
log_Àngth
 > 0)

561 
öfo_log
 = (*)
	`mÆloc
(
log_Àngth
);

562 
	`glGëProgømInfoLog
(
obj
, 
log_Àngth
, &
ch¨s_wrôãn
, 
öfo_log
);

563 
	`Ârötf
(
°dîr
, "%s\n",
öfo_log
);

564 
	`‰ì
(
öfo_log
);

566 
	}
}

640 
	$£tup_shadî_öãrÁ˚
(
GLuöt
 
¥ogøm
, 
Sour˚∑øms_t
 * 
sour˚∑øms
,

641 
Di•œyd©a_t
 * 
di•œyd©a
)

643 
ãxtuª_loˇti⁄
, 
u_ãxtuª_loˇti⁄
, 
v_ãxtuª_loˇti⁄
;

644 
ãxtuª_width_loˇti⁄
, 
ãxñ_width_loˇti⁄
;

645 
ãxtuª_width
, 
ãxtuª_height
;

646 
image_height
, 
image_width
;

647 
eví_sˇ∆öes_fú°_loˇti⁄
;

648 
¥im¨y_ãxtuª_unô
;

649 
u_ãxtuª_unô
, 
v_ãxtuª_unô
;

650 
luma_ãxtuª_co‹d_off£t_loc
;

651 
GLÊﬂt
 
luma_ãxtuª_co‹dö©e_off£ts
[
CONVOLUTION_KERNEL_SIZE
 *

652 
CONVOLUTION_KERNEL_SIZE
 * 2];

673 
	`¥öt_shadî_unif‹m_v¨s
(
¥ogøm
);

695 
ãxtuª_width
 = 
di•œyd©a
->texture_width;

696 
ãxtuª_height
 = 
di•œyd©a
->texture_height;

697 
image_height
 = 
sour˚∑øms
->image_height;

698 
image_width
 = 
sour˚∑øms
->image_width;

699 
¥im¨y_ãxtuª_unô
 = 
di•œyd©a
->primary_texture_unit;

701 
ãxtuª_loˇti⁄
 = 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "image_texture_unit");

705 i‡(-1 =
ãxtuª_loˇti⁄
)

707 
	`Ârötf
(
°dîr
, "Warning: can't getÅextureÜocation\n");

708 
	`check_îr‹
("Warning: can't getÅextureÜocation");

709 
	`exô
(-3);

711 
	`glUnif‹m1i
(
ãxtuª_loˇti⁄
, 
¥im¨y_ãxtuª_unô
);

712 
	`check_îr‹
("after glUniform1i");

715 i‡(
YUV420
 =
sour˚∑øms
->
ícodög
)

718 
u_ãxtuª_unô
 = 
di•œyd©a
->u_texture_unit;

719 
v_ãxtuª_unô
 = 
di•œyd©a
->v_texture_unit;

721 
u_ãxtuª_loˇti⁄
 = 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "u_texture_unit");

723 i‡(-1 =
u_ãxtuª_loˇti⁄
)

725 
	`Ârötf
(
°dîr
, "Warning: can't get UÅextureÜocation\n");

726 
	`check_îr‹
("Warning: can't get UÅextureÜocation");

727 
	`exô
(-3);

729 
	`glUnif‹m1i
(
u_ãxtuª_loˇti⁄
, 
u_ãxtuª_unô
);

730 
	`check_îr‹
("after glUniform1i");

733 
v_ãxtuª_loˇti⁄
 = 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "v_texture_unit");

735 i‡(-1 =
v_ãxtuª_loˇti⁄
)

737 
	`Ârötf
(
°dîr
, "Warning: can't get VÅextureÜocation\n");

738 
	`check_îr‹
("Warning: can't get VÅextureÜocation");

739 
	`exô
(-3);

741 
	`glUnif‹m1i
(
v_ãxtuª_loˇti⁄
, 
v_ãxtuª_unô
);

742 
	`check_îr‹
("after glUniform1i");

745 
ãxtuª_width_loˇti⁄
 = 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "texture_width");

747 i‡(-1 =
ãxtuª_width_loˇti⁄
)

749 
	`Ârötf
(
°dîr
, "Warning: can't getÅexture_widthÜocation\n");

750 
	`check_îr‹
("Warning: can't getÅexture_widthÜocation");

754 
	`glUnif‹m1f
(
ãxtuª_width_loˇti⁄
, ()
ãxtuª_width
);

755 
	`check_îr‹
("after glUniform1f");

759 
ãxñ_width_loˇti⁄
 = 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "texel_width");

761 i‡(-1 =
ãxñ_width_loˇti⁄
)

763 
	`Ârötf
(
°dîr
, "Warning: can't getÅexel_widthÜocation\n");

764 
	`check_îr‹
("Warning: can't getÅexel_widthÜocation");

768 
	`glUnif‹m1f
(
ãxñ_width_loˇti⁄
, (1.0 / 
ãxtuª_width
));

769 
	`check_îr‹
("after glUniform1f");

773 
shadî_⁄_loˇti⁄
 = 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "shader_on");

775 i‡(-1 =
shadî_⁄_loˇti⁄
)

777 
	`Ârötf
(
°dîr
, "Warning: can't get shader_onÜocation\n");

778 
	`check_îr‹
("Warning: can't get shader_onÜocation");

779 
	`exô
(-3);

783 
	`shadî_⁄
();

788 
ãxtuª_height_loˇti⁄
, 
image_height_loˇti⁄
;

789 
image_width_loˇti⁄
;

792 
ãxtuª_height_loˇti⁄
 = 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "texture_height");

794 i‡(-1 =
ãxtuª_height_loˇti⁄
)

796 
	`Ârötf
(
°dîr
, "Warning: can't getÅexture_heightÜocation\n");

797 
	`check_îr‹
("Warning: can't getÅexture_heightÜocation");

802 
	`Ârötf
(
°dîr
, "settingÅexture_heightÅo %f\n",

803 ()
ãxtuª_height
);

804 
	`glUnif‹m1f
(
ãxtuª_height_loˇti⁄
, ()
ãxtuª_height
);

805 
	`check_îr‹
("after glUniform1f");

808 
image_height_loˇti⁄
 = 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "image_height");

809 i‡(-1 =
image_height_loˇti⁄
)

811 
	`Ârötf
(
°dîr
, "Warning: can't get image_heightÜocation\n");

812 
	`check_îr‹
("Warning: can't get image_heightÜocation");

817 
	`glUnif‹m1f
(
image_height_loˇti⁄
, ()
image_height
);

818 
	`check_îr‹
("after glUniform1f");

821 
image_width_loˇti⁄
 = 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "image_width");

822 i‡(-1 =
image_width_loˇti⁄
)

824 
	`Ârötf
(
°dîr
, "Warning: can't get image_widthÜocation\n");

825 
	`check_îr‹
("Warning: can't get image_widthÜocation");

830 
	`glUnif‹m1f
(
image_width_loˇti⁄
, ()
image_width
);

831 
	`check_îr‹
("after glUniform1f");

844 
eví_sˇ∆öes_fú°_loˇti⁄
 =

845 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "even_scanlines_first");

847 i‡(-1 =
eví_sˇ∆öes_fú°_loˇti⁄
)

849 
	`Ârötf
(
°dîr
, "Warning: can't getÉven_scanlines_firstÜocation\n");

850 
	`check_îr‹
("Warning: can't getÉven_scanlines_firstÜocation");

854 
	`glUnif‹m1i
(
eví_sˇ∆öes_fú°_loˇti⁄
, 1);

855 
	`check_îr‹
("after glUniform1i");

861 
cﬁ‹_ouçut_loˇti⁄
 = 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "color_output");

863 i‡(-1 =
cﬁ‹_ouçut_loˇti⁄
)

865 
	`Ârötf
(
°dîr
, "Warning: can't get color_outputÜocation\n");

866 
	`check_îr‹
("Warning: can't get color_outputÜocation");

870 
	`cﬁ‹_ouçut
(1);

871 
	`check_îr‹
("after glUniform1i for color_output_location");

876 
luma_ãxtuª_co‹d_off£t_loc


877 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "luma_texcoord_offsets");

879 i‡(-1 =
luma_ãxtuª_co‹d_off£t_loc
)

881 
	`Ârötf
(
°dîr
, "Warning: can't getÜuma_texcoord_offsetsÜocation\n");

882 
	`check_îr‹
("Warning: can't getÜuma_texcoord_offsetsÜocation");

886 
	`öôülize_ãxtuª_co‹d_off£ts
(
luma_ãxtuª_co‹dö©e_off£ts
,

887 
CONVOLUTION_KERNEL_SIZE
,

888 
di•œyd©a
->
ãxtuª_width
,

889 
di•œyd©a
->
ãxtuª_height
);

890 
	`glUnif‹m2fv
(
luma_ãxtuª_co‹d_off£t_loc
, 
CONVOLUTION_KERNEL_SIZE
 *

891 
CONVOLUTION_KERNEL_SIZE
, 
luma_ãxtuª_co‹dö©e_off£ts
);

896 
chroma_ãxtuª_co‹d_off£t_loc
;

897 
GLÊﬂt
 
chroma_ãxtuª_co‹dö©e_off£ts
[
CONVOLUTION_KERNEL_SIZE
 *

898 
CONVOLUTION_KERNEL_SIZE
 * 2];

899 
chroma_ãxtuª_co‹d_off£t_loc


900 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "chroma_texcoord_offsets");

902 i‡(-1 =
chroma_ãxtuª_co‹d_off£t_loc
)

904 
	`Ârötf
(
°dîr
,

906 
	`check_îr‹
("Warning: can't get chroma_texcoord_offsetsÜocation");

910 
	`öôülize_ãxtuª_co‹d_off£ts
(
chroma_ãxtuª_co‹dö©e_off£ts
,

911 
CONVOLUTION_KERNEL_SIZE
,

912 
di•œyd©a
->
ãxtuª_width
 / 2,

913 
di•œyd©a
->
ãxtuª_height
/ 2);

914 
	`glUnif‹m2fv
(
chroma_ãxtuª_co‹d_off£t_loc
,

915 
CONVOLUTION_KERNEL_SIZE
 * CONVOLUTION_KERNEL_SIZE ,

916 
chroma_ãxtuª_co‹dö©e_off£ts
);

921 
image_¥o˚ssög_loˇti⁄
 =

922 
	`glGëUnif‹mLoˇti⁄
(
¥ogøm
, "image_processing");

925 i‡(-1 =
image_¥o˚ssög_loˇti⁄
)

927 
	`Ârötf
(
°dîr
, "Warning: can't get image_processingÜocation\n");

928 
	`check_îr‹
("Warning: can't get image_processingÜocation");

932 
	`image_¥o˚ssög_Æg‹ôhm
(0);

936 
	}
}

1005 
	$öôülize_ãxtuª_co‹d_off£ts
(
GLÊﬂt
 *
off£ts
, 
kî√l_size
,

1006 
GLÊﬂt
 
ãxtuª_width
,

1007 
GLÊﬂt
 
ãxtuª_height
)

1009 
i
, 
j
;

1010 
GLÊﬂt
 
ãxñ_width
, 
ãxñ_height
;

1012 
ãxñ_width
 = 1.0 / 
ãxtuª_width
;

1013 
ãxñ_height
 = 1.0 / 
ãxtuª_height
;

1015 
i
 = 0; i < 
kî√l_size
; i++)

1017 
j
 = 0; j < 
kî√l_size
; j++)

1019 
off£ts
[(((
i
 * 
kî√l_size
)+
j
)*2)+0] =

1020 ((
GLÊﬂt
)(
i
 - 1)Ë* 
ãxñ_width
;

1022 
off£ts
[(((
i
 * 
kî√l_size
)+
j
)*2)+1] =

1023 ((
GLÊﬂt
)(
j
 - 1Ë* 
ãxñ_height
);

1027 
	}
}

1075 
	$¥öt_shadî_unif‹m_v¨s
(
GLuöt
 
¥ogøm
)

1077 
GLöt
 
a˘ive_v¨_cou¡
, 
size
;

1078 
GLöt
 
ödex
;

1079 
GLsizei
 
buffsize
;

1080 
GLsizei
 
Àngth
;

1081 
GLíum
 
ty≥
;

1082 
GLch¨
 
«me
[80];

1084 
buffsize
 = 80;

1086 
	`Ârötf
(
°dîr
, "Shader information:\n");

1088 
	`glGëProgømiv
(
¥ogøm
, 
GL_ACTIVE_UNIFORMS
, &
a˘ive_v¨_cou¡
);

1089 
	`Ârötf
(
°dîr
, "%dá˘ivêv¨s\n", 
a˘ive_v¨_cou¡
);

1090 
ödex
 = 0; index < 
a˘ive_v¨_cou¡
; index++)

1092 
	`glGëA˘iveUnif‹m
(
¥ogøm
, 
ödex
, 
buffsize
, &
Àngth
, &
size
,

1093 &
ty≥
, 
«me
);

1094 
	`Ârötf
(
°dîr
, "%d '%s'\n", 
ödex
, 
«me
);

1096 
	}
}

1142 
	$check_îr‹
(*
œbñ
)

1144 #ifde‡
GL_CHECK


1145 
GLíum
 
îr‹
;

1146  (
îr‹
 = 
	`glGëEº‹
()Ë!
GL_NO_ERROR
 )

1148 
	`Ârötf
(
°dîr
, "%†%s\n", 
œbñ
, 
	`gluEº‹Såög
(
îr‹
));

1151 
	}
}

	@shader.h

38 
£tup_shadî
(* 
fûíame
, 
Sour˚∑øms_t
 * 
sour˚∑øms
,

39 
Di•œyd©a_t
 * 
di•œyd©a
);

40 
shadî_⁄
();

41 
shadî_off
();

42 
cﬁ‹_ouçut
(
⁄off
);

43 
image_¥o˚ssög_Æg‹ôhm
(
Æg‹ôhm
);

44 
check_îr‹
(*
œbñ
);

	@testpattern.c

44 
	~<°dio.h
>

45 
	~<°dlib.h
>

46 
	~<°rög.h
>

48 
	~"glutˇm.h
"

49 
	~"∑r£¨gs.h
"

51 
	~"ˇ∑bûôõs.h
"

53 
	~"ã°∑âîn.h
"

58 
	#DEFAULT_BUFFER_COUNT
 30

	)

62 
compuã_byãs_≥r_‰ame
(
image_width
, 
image_height
,

63 
Encodögmëhod_t
 
ícodög
);

64 
gíî©e_ã°_∑âîn_‰ames
(
Te°∑âîn_t
 *
ã°∑âî≈
);

65 
gíî©e_gªysˇÀ_ã°∑âîn
(
Te°∑âîn_t
 *
ã°∑âî≈
);

66 
gíî©e_gªysˇÀ_ã°∑âîn_i
(
i
, 
n‰ames
, 
width
,

67 
height
, * 
‰amï
);

68 
gíî©e_yuv420_ã°∑âîn
(
Te°∑âîn_t
 *
ã°∑âî≈
);

69 
gíî©e_yuv420_ã°∑âîn_i
(
i
, 
n‰ames
, 
width
,

70 
height
, * 
‰amï
);

71 
gíî©e_yuv422_ã°∑âîn
(
Te°∑âîn_t
 *
ã°∑âî≈
);

72 
gíî©e_yuv422_ã°∑âîn_i
(
i
, 
n‰ames
, 
width
,

73 
height
, * 
‰amï
);

74 
rgb2yuv422
(
ªd0
, 
gªí0
, 
blue0
,

75 
ªd1
, 
gªí1
, 
blue1
,

76 *
luma0
, *
chroma_u
,

77 *
luma1
, *
chroma_v
);

78 
gë_rgb_luma
(
ªd
, 
gªí
, 
blue
);

79 
gíî©e_rgb_ã°∑âîn
(
Te°∑âîn_t
 *
ã°∑âî≈
);

80 
gíî©e_rgb_ã°∑âîn_i
(
i
, 
n‰ames
, 
width
,

81 
height
, * 
‰amï
);

82 
des¸ibe_ã°∑âîn
(* 
œbñ
, 
Te°∑âîn_t
 *
ã°∑âî≈
,

83 
nbyãs
);

84 
dump_image_byãs
(* 
œbñ
, * 
imagï
, 
nbyãs
);

85 
deöãæa˚_ã°∑âîn
(
Te°∑âîn_t
 *
ã°∑âî≈
);

146 
	$öô_ã°_∑âîn
(
Cmd¨gs_t
 
¨g°ru˘
, 
Sour˚∑øms_t
 * 
sour˚∑øms
)

148 
Te°∑âîn_t
 *
ã°∑âî≈
;

149 
ªtvÆ
, 
buf„rsize
;

154 
sour˚∑øms
->
sour˚
 = 
TESTPATTERN
;

155 
sour˚∑øms
->
fd
 = -1;

156 
sour˚∑øms
->
ícodög
 = 
¨g°ru˘
.encoding;

157 
sour˚∑øms
->
image_width
 = 
¨g°ru˘
.image_width;

158 
sour˚∑øms
->
image_height
 = 
¨g°ru˘
.image_height;

159 
sour˚∑øms
->
iomëhod
 = 
IO_METHOD_USERPTR
;

160 
sour˚∑øms
->
buf„rcou¡
 = 
DEFAULT_BUFFER_COUNT
;

162 
buf„rsize
 = 
	`compuã_byãs_≥r_‰ame
(
¨g°ru˘
.
image_width
,

163 
¨g°ru˘
.
image_height
,

164 
¨g°ru˘
.
ícodög
);

166 
sour˚∑øms
->
ˇ±uªd
.
°¨t
 = 
	`mÆloc
(
buf„rsize
);

168 i‡(
NULL
 =
sour˚∑øms
->
ˇ±uªd
.
°¨t
)

170 
sour˚∑øms
->
ˇ±uªd
.
Àngth
 = 0;

172 
	`Ârötf
(
°dîr
, "Error: unableÅo malloc %d bytes for capture buffer",

173 
buf„rsize
);

174 
ªtvÆ
 = -1;

178 
sour˚∑øms
->
ˇ±uªd
.
Àngth
 = 
buf„rsize
;

180 
ã°∑âî≈
 = &(
sour˚∑øms
->
ã°∑âîn
);

184 
ã°∑âî≈
->
cuºít_buf„r
 = 0;

185 
ã°∑âî≈
->
image_width
 = 
¨g°ru˘
.image_width;

186 
ã°∑âî≈
->
image_height
 = 
¨g°ru˘
.image_height;

187 
ã°∑âî≈
->
ícodög
 = 
¨g°ru˘
.encoding;

188 
ã°∑âî≈
->
nbuf„rs
 = 
DEFAULT_BUFFER_COUNT
;

195 
ã°∑âî≈
->
buf„rsize
 = buffersize;

197 
ã°∑âî≈
->
buf„øºay
 = 
	`mÆloc
 (ã°∑âî≈->
buf„rsize
 *

198 
ã°∑âî≈
->
nbuf„rs
);

200 i‡(
NULL
 =
ã°∑âî≈
->
buf„øºay
)

202 
	`Ârötf
(
°dîr
,

204 
ã°∑âî≈
->
buf„rsize
,Åe°∑âî≈->
nbuf„rs
);

205 
	`Ârötf
(
°dîr
, " checkÅo make sureÅheseÇumbersÜookÑight\n");

206 
ªtvÆ
 = -1;

211 
	`mem£t
(
ã°∑âî≈
->
buf„øºay
, 0,

212 
ã°∑âî≈
->
buf„rsize
 *Åe°∑âî≈->
nbuf„rs
);

215 
	`gíî©e_ã°_∑âîn_‰ames
(
ã°∑âî≈
);

219 
ªtvÆ
 = 0;

222 (
ªtvÆ
);

224 
	}
}

282 
	$compuã_byãs_≥r_‰ame
(
image_width
, 
image_height
,

283 
Encodögmëhod_t
 
ícodög
)

285 
byãs_≥r_‰ame
;

287 
ícodög
)

289 
LUMA
:

291 
byãs_≥r_‰ame
 = 
image_width
 * 
image_height
;

294 
YUV420
:

297 
byãs_≥r_‰ame
 = 
image_width
 * 
image_height
 * 2;

299 
YUV422
:

301 
byãs_≥r_‰ame
 = 
image_width
 * 
image_height
 * 2;

305 
RGB_BAYER
:

309 
RGB
:

311 
byãs_≥r_‰ame
 = 
image_width
 * 
image_height
 * 3;

315 
	`Ârötf
(
°dîr
,

316 "Eº‹: unknow¿ícodög %d i¿%s\n", 
ícodög
, 
__FUNCTION__
);

317 
	`Ârötf
(
°dîr
, "make sureÅhe function hasá case forÉach value\n");

318 
	`Ârötf
(
°dîr
, "in Encodingmethod_t. updateándÑecompile.\n");

319 
	`ab‹t
();

323 (
byãs_≥r_‰ame
);

324 
	}
}

385 
	$gíî©e_ã°_∑âîn_‰ames
(
Te°∑âîn_t
 *
ã°∑âî≈
)

388 
ã°∑âî≈
->
ícodög
)

390 
LUMA
:

391 
	`gíî©e_gªysˇÀ_ã°∑âîn
(
ã°∑âî≈
);

393 
YUV420
:

394 
	`gíî©e_yuv420_ã°∑âîn
(
ã°∑âî≈
);

397 
YUV422
:

398 
	`gíî©e_yuv422_ã°∑âîn
(
ã°∑âî≈
);

402 
RGB
:

403 
	`gíî©e_rgb_ã°∑âîn
(
ã°∑âî≈
);

407 
	`Ârötf
(
°dîr
, "Eº‹: %†d€¢'àhavê®ˇ£ f‹ %d; ", 
__FUNCTION__
,

408 
ã°∑âî≈
->
ícodög
);

411 
	`Ârötf
(
°dîr
,

414 
	`ab‹t
();

418 
	}
}

473 
	$gíî©e_gªysˇÀ_ã°∑âîn
(
Te°∑âîn_t
 *
ã°∑âî≈
)

475 
i
, 
‰amesize
;

476 * 
‰amï
;

478 
‰amesize
 = 
ã°∑âî≈
->
buf„rsize
;

480 
i
 = 0; i < 
ã°∑âî≈
->
nbuf„rs
; i++)

483 
‰amï
 = (*)(
ã°∑âî≈
->
buf„øºay
Ë+ 
‰amesize
 * 
i
;

485 
	`gíî©e_gªysˇÀ_ã°∑âîn_i
(
i
, 
ã°∑âî≈
->
nbuf„rs
,

486 
ã°∑âî≈
->
image_width
,

487 
ã°∑âî≈
->
image_height
,

488 
‰amï
);

491 
	}
}

555 
	$gíî©e_gªysˇÀ_ã°∑âîn_i
(
i
, 
n‰ames
, 
width
,

556 
height
, * 
‰amï
)

558 
gªyÀvñ
, 
row
, 
cﬁumn
;

559 
maxrow
, 
maxcﬁ
;

560 * 
imagï
;

562 
imagï
 = (*)
‰amï
;

568 
maxrow
 = (
i
 * 
height
Ë/ 
n‰ames
;

569 
maxcﬁ
 = (
i
 * 
width
Ë/ 
n‰ames
;

571 
	`mem£t
(
imagï
, 0, 
width
 * 
height
);

573 
gªyÀvñ
 = (255 * 
i
Ë/ 
n‰ames
;

575 
row
 = 0;Ñow < 
maxrow
 ;Ñow++)

577 
cﬁumn
 = 0; cﬁum¿< 
maxcﬁ
; column++)

579 
imagï
[(
row
 * 
width
 + 
cﬁumn
)] = 
gªyÀvñ
;

582 
	}
}

639 
	$gíî©e_yuv420_ã°∑âîn
 (
Te°∑âîn_t
 *
ã°∑âî≈
)

641 
i
, 
‰amesize
;

642 * 
‰amï
;

644 
‰amesize
 = 
ã°∑âî≈
->
buf„rsize
;

646 
i
 = 0; i < 
ã°∑âî≈
->
nbuf„rs
; i++)

649 
‰amï
 = (*)(
ã°∑âî≈
->
buf„øºay
Ë+ 
‰amesize
 * 
i
;

651 
	`gíî©e_yuv420_ã°∑âîn_i
(
i
, 
ã°∑âî≈
->
nbuf„rs
,

652 
ã°∑âî≈
->
image_width
,

653 
ã°∑âî≈
->
image_height
,

654 
‰amï
);

657 
	}
}

727 
	$gíî©e_yuv420_ã°∑âîn_i
(
i
, 
n‰ames
, 
width
,

728 
height
, * 
‰amï
)

730 * 
chrom≠œ√s
;

736 
	`gíî©e_gªysˇÀ_ã°∑âîn_i
(
i
, 
n‰ames
, 
width
, 
height
, 
‰amï
);

740 
chrom≠œ√s
 = (*)
‰amï
 + 
width
 * 
height
;

742 
	`mem£t
(
chrom≠œ√s
, 75, (
width
 * 
height
)/ 4);

743 
chrom≠œ√s
 +(
width
 * 
height
)/ 4;

744 
	`mem£t
(
chrom≠œ√s
, 20, (
width
 * 
height
)/ 4);

746 
	}
}

794 
	$gíî©e_yuv422_ã°∑âîn
(
Te°∑âîn_t
 *
ã°∑âî≈
)

796 
i
, 
‰amesize
;

797 * 
‰amï
;

799 
‰amesize
 = 
ã°∑âî≈
->
buf„rsize
;

801 
i
 = 0; i < 
ã°∑âî≈
->
nbuf„rs
; i++)

804 
‰amï
 = (*)(
ã°∑âî≈
->
buf„øºay
Ë+ 
‰amesize
 * 
i
;

806 
	`gíî©e_yuv422_ã°∑âîn_i
(
i
, 
ã°∑âî≈
->
nbuf„rs
,

807 
ã°∑âî≈
->
image_width
,

808 
ã°∑âî≈
->
image_height
,

809 
‰amï
);

814 
	}
}

884 
	$gíî©e_yuv422_ã°∑âîn_i
(
i
, 
n‰ames
, 
width
,

885 
height
, * 
‰amï
)

887 
luma0
, 
luma1
, 
chroma_u
, 
chroma_v
;

888 * 
pixñp
, *
limô
;

889 
ªd
, 
gªí
, 
blue
;

890 
cﬁumn
, 
row
, 
cﬁum∆imô
, 
rowlimô
, 
pixñ_ödex
;

896 
luma0
 = 16;

897 
luma1
 = 16;

899 
chroma_u
 = 128;

900 
chroma_v
 = 128;

902 
pixñp
 = (*)
‰amï
;

903 
limô
 = 
pixñp
 + 
width
 * 
height
 * 2;

905 
pixñp
 < 
limô
)

907 
pixñp
[0] = 
luma0
;

908 
pixñp
[1] = 
chroma_u
;

909 
pixñp
[2] = 
luma1
;

910 
pixñp
[3] = 
chroma_v
;

911 
pixñp
 += 4;

915 
pixñp
 = (*)
‰amï
;

923 
ªd
 = (255 * 
i
)/
n‰ames
;

924 
gªí
 = 0;

925 
blue
 = 0;

927 
	`rgb2yuv422
(
ªd
, 
gªí
, 
blue
,Ñed, green, blue,

928 &
luma0
, &
chroma_u
, &
luma1
, &
chroma_v
);

930 
cﬁum∆imô
 = (
i
 * 
width
Ë/ (2 * 
n‰ames
);

931 
rowlimô
 = (
i
 * 
height
)/
n‰ames
;

933 
row
 = 0;Ñow < 
rowlimô
;Ñow++)

935 
cﬁumn
 = 0; cﬁum¿< 
cﬁum∆imô
; column ++)

937 
pixñ_ödex
 = 
row
 * 
width
/2 +
cﬁumn
;

943 
pixñp
[4 * 
pixñ_ödex
] = 
luma0
;

944 
pixñp
[4 * 
pixñ_ödex
 + 1] = 
chroma_u
;

947 
pixñp
[4 * 
pixñ_ödex
 + 2] = 
luma1
;

948 
pixñp
[4 * 
pixñ_ödex
 + 3] = 
chroma_v
;

957 
ªd
 = 0;

958 
gªí
 = 0;

959 
blue
 = 255 - (255 * 
i
)/
n‰ames
;

961 
	`rgb2yuv422
(
ªd
, 
gªí
, 
blue
,Ñed, green, blue,

962 &
luma0
, &
chroma_u
, &
luma1
, &
chroma_v
);

965 
row
 = 
rowlimô
;Ñow < 
height
;Ñow++)

967 
cﬁumn
 = 
cﬁum∆imô
; cﬁum¿< (
width
 / 2); column ++)

969 
pixñ_ödex
 = 
row
 * 
width
/2 +
cﬁumn
;

975 
pixñp
[4 * 
pixñ_ödex
] = 
luma0
;

976 
pixñp
[4 * 
pixñ_ödex
 + 1] = 
chroma_u
;

979 
pixñp
[4 * 
pixñ_ödex
 + 2] = 
luma1
;

980 
pixñp
[4 * 
pixñ_ödex
 + 3] = 
chroma_v
;

985 
	}
}

1050 
	$rgb2yuv422
(
ªd0
, 
gªí0
, 
blue0
,

1051 
ªd1
, 
gªí1
, 
blue1
,

1052 *
luma0
, *
chroma_u
,

1053 *
luma1
, *
chroma_v
)

1055 *
luma0
 = 
	`gë_rgb_luma
(
ªd0
, 
gªí0
, 
blue0
);

1056 *
luma1
 = 
	`gë_rgb_luma
(
ªd1
, 
gªí1
, 
blue1
);

1058 *
chroma_u
 = (-(0.148 * ()
ªd0
Ë- (0.291 * ()
gªí0
) +

1059 (0.439 * ()
blue0
) + 128.0);

1061 i‡(255 < *
chroma_u
)

1063 *
chroma_u
 = 255;

1065 i‡(0 > *
chroma_u
)

1067 *
chroma_u
 = 0;

1070 *
chroma_v
 = ((0.439 * ()
ªd1
Ë- (0.368 * ()
gªí1
) -

1071 (0.071 * ()
blue1
)+ 128.0);

1073 i‡(255 < *
chroma_v
)

1075 *
chroma_v
 = 255;

1077 i‡(0 > *
chroma_v
)

1079 *
chroma_v
 = 0;

1083 
	`Ârötf
(
°dîr
, "[%d %d %d] -> [%d %d %d %d]\n", 
ªd0
, 
gªí0
, 
blue0
,

1084 *
luma0
, *
chroma_u
, *
luma1
, *
chroma_v
);

1086 
	}
}

1136 
	$gë_rgb_luma
(
ªd
, 
gªí
, 
blue
)

1138 
luma
;

1140 
luma
 =((0.257 * ()
ªd
Ë+ (0.504 * ()
gªí
) +

1141 (0.098 * ()
blue
) + 16.0);

1143 i‡(255 < 
luma
)

1145 
luma
 = 255;

1147 i‡(0 > 
luma
)

1149 
luma
 = 0;

1152 (
luma
);

1153 
	}
}

1201 
	$gíî©e_rgb_ã°∑âîn
(
Te°∑âîn_t
 *
ã°∑âî≈
)

1203 
i
, 
‰amesize
;

1204 * 
‰amï
;

1206 
‰amesize
 = 
ã°∑âî≈
->
buf„rsize
;

1208 
i
 = 0; i < 
ã°∑âî≈
->
nbuf„rs
; i++)

1211 
‰amï
 = (*)(
ã°∑âî≈
->
buf„øºay
Ë+ 
‰amesize
 * 
i
;

1213 
	`gíî©e_rgb_ã°∑âîn_i
(
i
, 
ã°∑âî≈
->
nbuf„rs
,

1214 
ã°∑âî≈
->
image_width
,

1215 
ã°∑âî≈
->
image_height
,

1216 
‰amï
);

1219 
	}
}

1287 
	$gíî©e_rgb_ã°∑âîn_i
(
i
, 
n‰ames
, 
width
,

1288 
height
, * 
‰amï
)

1290 
ªd
, 
gªí
, 
blue
;

1291 
cﬁumn
, 
row
, 
cﬁum∆imô
, 
rowlimô
;

1292 * 
image
;

1295 
image
 = (*)
‰amï
;

1300 
ªd
 = (255 * 
i
)/
n‰ames
;

1301 
gªí
 = 0;

1302 
blue
 = 0;

1304 
rowlimô
 = (
i
 * 
height
Ë/ 
n‰ames
;

1305 
cﬁum∆imô
 = (
i
 * 
width
Ë/ 
n‰ames
;

1307 
row
 = 0;Ñow < 
rowlimô
;Ñow++)

1309 
cﬁumn
 = 0; cﬁum¿< 
cﬁum∆imô
; column++)

1311 
image
[3 * (
row
 * 
width
 +
cﬁumn
)] = 
ªd
;

1312 
image
[3 * (
row
 * 
width
 +
cﬁumn
Ë+ 1] = 
gªí
;

1313 
image
[3 * (
row
 * 
width
 +
cﬁumn
Ë+ 2] = 
blue
;

1320 
ªd
 = 0;

1321 
gªí
 = 0;

1322 
blue
 = 255 - (255 * 
i
)/
n‰ames
;

1324 
row
 = 
rowlimô
;Ñow < 
height
;Ñow++)

1326 
cﬁumn
 = 
cﬁum∆imô
; cﬁum¿< 
width
; column++)

1328 
image
[3 * (
row
 * 
width
 +
cﬁumn
)] = 
ªd
;

1329 
image
[3 * (
row
 * 
width
 +
cﬁumn
Ë+ 1] = 
gªí
;

1330 
image
[3 * (
row
 * 
width
 +
cﬁumn
Ë+ 2] = 
blue
;

1335 
	}
}

1384 
	$°¨t_ã°∑âîn
(
Sour˚∑øms_t
 * 
sour˚∑øms
)

1388 
sour˚∑øms
->
ã°∑âîn
.
cuºít_buf„r
 = 0;

1391 
	}
}

1443 * 
	$√xt_ã°∑âîn_‰ame
(
Sour˚∑øms_t
 * 
sour˚∑øms
, * 
nbyã•
)

1445 * 
ªtvÆ
;

1446 
buff_ödex
, 
buf„rsize
;

1447 * 
imagesour˚
;

1449 
buff_ödex
 = 
sour˚∑øms
->
ã°∑âîn
.
cuºít_buf„r
;

1450 
buf„rsize
 = 
sour˚∑øms
->
ã°∑âîn
.buffersize;

1452 
imagesour˚
 = (*)(
sour˚∑øms
->
ã°∑âîn
.
buf„øºay
) +

1453 
buf„rsize
 * 
buff_ödex
++;

1455 i‡(
sour˚∑øms
->
ã°∑âîn
.
nbuf„rs
 =
buff_ödex
)

1457 
buff_ödex
 = 0;

1460 
sour˚∑øms
->
ã°∑âîn
.
cuºít_buf„r
 = 
buff_ödex
;

1463 
	`mem˝y
(
sour˚∑øms
->
ˇ±uªd
.
°¨t
, 
imagesour˚
,

1464 
sour˚∑øms
->
ˇ±uªd
.
Àngth
);

1466 
sour˚∑øms
->
ˇ±uªd
.
°¨t

imagesour˚
;

1468 
ªtvÆ
 = 
sour˚∑øms
->
ˇ±uªd
.
°¨t
;

1470 *
nbyã•
 = 
sour˚∑øms
->
ˇ±uªd
.
Àngth
;

1472 (
ªtvÆ
);

1474 
	}
}

1478 
	#LISTWIDTH
 20

	)

1531 
	$des¸ibe_ã°∑âîn
(* 
œbñ
, 
Te°∑âîn_t
 *
ã°∑âî≈
,

1532 
nbyãs
)

1534 
i
;

1535 * 
∑âîn
;

1537 
	`Ârötf
(
°dîr
, "%s\n", 
œbñ
);

1538 
	`Ârötf
(
°dîr
, "Åe°∑âî¿loˇãdáà%p\n", 
ã°∑âî≈
);

1539 
	`Ârötf
(
°dîr
, " image_width %d image_height %d\n",

1540 
ã°∑âî≈
->
image_width
,Åe°∑âî≈->
image_height
);

1541 
	`Ârötf
(
°dîr
, " buffersize %d bytes inÉach of %d buffers\n",

1542 
ã°∑âî≈
->
buf„rsize
,Åe°∑âî≈->
nbuf„rs
);

1543 
	`Ârötf
(
°dîr
, " buf„øºay sèπ†© %p\n", 
ã°∑âî≈
->
buf„øºay
);

1544 
	`Ârötf
(
°dîr
, " current_buffer is %d of %d\n",

1545 
ã°∑âî≈
->
cuºít_buf„r
,Åe°∑âî≈->
nbuf„rs
);

1547 
∑âîn
 = (*)(
ã°∑âî≈
->
buf„øºay
) +

1548 
ã°∑âî≈
->
cuºít_buf„r
 *Åe°∑âî≈->
buf„rsize
;

1550 
	`Ârötf
(
°dîr
, "ã°Ö©ã∫ sèπ†© %p\n", 
∑âîn
);

1552 
i
 = 0; i < 
nbyãs
; i++)

1554 i‡(0 =(
i
 % 
LISTWIDTH
))

1556 
	`Ârötf
(
°dîr
, "\n%pË", (
∑âîn
 + 
i
));

1558 
	`Ârötf
(
°dîr
, "%x ", *(
∑âîn
 + 
i
));

1560 
	`Ârötf
(
°dîr
, "\n");

1561 
	}
}

1610 
	$dump_image_byãs
(* 
œbñ
, * 
imagï
, 
nbyãs
)

1612 
i
;

1613 * 
∑âî≈
;

1615 
∑âî≈
 = (*)
imagï
;

1617 
	`Ârötf
(
°dîr
, "%s\n", 
œbñ
);

1618 
i
 = 0; i < 
nbyãs
; i++)

1620 i‡(0 =(
i
 % 
LISTWIDTH
))

1622 
	`Ârötf
(
°dîr
, "\n%pË", (
∑âî≈
 + 
i
));

1624 
	`Ârötf
(
°dîr
, "%x ", *(
∑âî≈
 + 
i
));

1627 
	`Ârötf
(
°dîr
, "\n");

1628 
	}
}

1682 
	$deöãæa˚_ã°∑âîn
(
Te°∑âîn_t
 *
ã°∑âî≈
)

1684 * 
ãmp
;

1685 * 
eví_löe
;

1686 * 
odd_löe
;

1688 * 
eví_de°
;

1689 * 
odd_de°
;

1690 * 
buf„r
;

1691 
byãs_≥r_pixñ
, 
byãs_≥r_löe
, 
‰ame
;

1692 
hÆf_height
, 
hÆf_buf„r
;

1693 
löíumbî
;

1697 
ã°∑âî≈
->
ícodög
)

1699 
LUMA
:

1701 
byãs_≥r_pixñ
 = 1;

1703 
YUV422
:

1705 
byãs_≥r_pixñ
 = 2;

1707 
RGB
:

1708 
byãs_≥r_pixñ
 = 3;

1710 
YUV420
:

1711 
	`Ârötf
(
°dîr
, "FatalÉrror: it does't make senseÅo deinterlace ");

1712 
	`Ârötf
(
°dîr
, "YUV420 since it'aáÖlanar format. Fix your code\n");

1713 
	`ab‹t
();

1716 
	`Ârötf
(
°dîr
,

1717 "Eº‹: unknow¿ícodög %d i¿%s\n", 
ã°∑âî≈
->
ícodög
,

1718 
__FUNCTION__
);

1719 
	`Ârötf
(
°dîr
,

1721 
	`Ârötf
(
°dîr
,

1723 
	`ab‹t
();

1728 
byãs_≥r_löe
 = 
ã°∑âî≈
->
image_width
 * 
byãs_≥r_pixñ
;

1729 
hÆf_height
 = 
ã°∑âî≈
->
image_height
 / 2;

1730 
hÆf_buf„r
 = 
ã°∑âî≈
->
buf„rsize
 / 2;

1734 
ãmp
 = 
	`mÆloc
 (
ã°∑âî≈
->
buf„rsize
);

1736 i‡(
NULL
 =
ãmp
)

1738 
	`≥º‹
("Error: can'tállocate buffer in deinterlace_testpattern\n");

1739 
	`ab‹t
();

1747 
‰ame
 = 0; fømê< 
ã°∑âî≈
->
nbuf„rs
; frame++)

1749 
buf„r
 = (*)(
ã°∑âî≈
->
buf„øºay
) +

1750 
‰ame
 * 
ã°∑âî≈
->
buf„rsize
;

1757 
löíumbî
 = 0;Üöíumbî < 
ã°∑âî≈
->
image_height
;

1758 
löíumbî
+=2)

1760 
eví_löe
 = 
buf„r
 + (
löíumbî
 * 
byãs_≥r_löe
);

1761 
odd_löe
 = 
eví_löe
 + 
byãs_≥r_löe
;

1763 
eví_de°
 = 
ãmp
 + (
löíumbî
/2 * 
byãs_≥r_löe
);

1764 
odd_de°
 = 
eví_de°
 + 
hÆf_buf„r
;

1766 
	`mem˝y
(
eví_de°
, 
eví_löe
, 
byãs_≥r_löe
);

1767 
	`mem˝y
(
odd_de°
, 
odd_löe
, 
byãs_≥r_löe
);

1772 
	`mem˝y
(
buf„r
, 
ãmp
, 
ã°∑âî≈
->
buf„rsize
);

1774 
	`‰ì
(
ãmp
);

1776 
	}
}

	@testpattern.h

40 
öô_ã°_∑âîn
(
Cmd¨gs_t
 
¨g°ru˘
,

41 
Sour˚∑øms_t
 * 
sour˚∑øms
);

42 
°¨t_ã°∑âîn
(
Sour˚∑øms_t
 * 
sour˚∑øms
);

43 * 
√xt_ã°∑âîn_‰ame
(
Sour˚∑øms_t
 * 
sour˚∑øms
,

44 * 
nbyã•
);

47 
compuã_byãs_≥r_‰ame
(
image_width
, 
image_height
,

48 
Encodögmëhod_t
 
ícodög
);

	@textfile.c

41 
	~<°dio.h
>

42 
	~<°dlib.h
>

43 
	~<°rög.h
>

45 
	~"ãxtfûe.h
"

47 *
	$ãxtFûeRód
(*
‚
) {

50 
FILE
 *
Â
;

51 *
c⁄ã¡
 = 
NULL
;

53 
cou¡
=0;

55 i‡(
‚
 !
NULL
) {

56 
Â
 = 
	`f›í
(
‚
,"rt");

58 i‡(
Â
 !
NULL
) {

60 
	`f£ek
(
Â
, 0, 
SEEK_END
);

61 
cou¡
 = 
	`·ñl
(
Â
);

62 
	`ªwöd
(
Â
);

64 i‡(
cou¡
 > 0) {

65 
c⁄ã¡
 = (*)
	`mÆloc
((Ë* (
cou¡
+1));

66 
cou¡
 = ()
	`‰ód
(
c⁄ã¡
,(),cou¡,
Â
);

67 
c⁄ã¡
[
cou¡
] = '\0';

69 
	`f˛o£
(
Â
);

72  
c⁄ã¡
;

73 
	}
}

75 
	$ãxtFûeWrôe
(*
‚
, *
s
) {

77 
FILE
 *
Â
;

78 
°©us
 = 0;

80 i‡(
‚
 !
NULL
) {

81 
Â
 = 
	`f›í
(
‚
,"w");

83 i‡(
Â
 !
NULL
) {

85 i‡(
	`fwrôe
(
s
,(),
	`°æí
(s),
Â
) == strlen(s))

86 
°©us
 = 1;

87 
	`f˛o£
(
Â
);

90 (
°©us
);

91 
	}
}

	@textfile.h

36 #ifde‡
__˝lu•lus


42 *
ãxtFûeRód
(*
‚
);

43 
ãxtFûeWrôe
(*
‚
, *
s
);

45 #ifde‡
__˝lu•lus


	@videosample_orig.c

62 
	~<°dio.h
>

63 
	~<°dlib.h
>

64 
	~<uni°d.h
>

65 
	~<sys/time.h
>

66 
	~<GL/gl.h
>

67 
	~<GL/glu.h
>

68 
	~<X11/Xlib.h
>

69 
	~<GL/glx.h
>

76 
	#TEX_WIDTH
 1024

	)

82 
	#TEX_HEIGHT
 512

	)

89 
	#SUBTEX_WIDTH
 640

	)

90 
	#SUBTEX_HEIGHT
 480

	)

97 
	#WIN_WIDTH
 
SUBTEX_WIDTH


	)

98 
	#WIN_HEIGHT
 
SUBTEX_HEIGHT


	)

101 
	#MIN
(
a
,
b
Ë(◊Ë< (bË? (aË: (b))

	)

103 
check_îr‹
–*
œbñ
 );

107 
	sãxtuª_d©a_s
 {

108 
GLubyã
 * 
	mimage
;

109 
	mãxtuª_width
;

110 
	mãxtuª_height
;

111 
	mncomp⁄íts
;

112 } 
	tTextuª_d©a_t
;

132 
	g©åibuãLi°Sgl
[] = {

133 
GLX_RGBA
,

134 
GLX_RED_SIZE
, 1,

135 
GLX_GREEN_SIZE
, 1,

136 
GLX_BLUE_SIZE
, 1,

137 
N⁄e
 };

154 
	g©åibuãLi°Dbl
[] = {

155 
GLX_RGBA
,

156 
GLX_DOUBLEBUFFER
,

157 
GLX_RED_SIZE
, 1,

158 
GLX_GREEN_SIZE
, 1,

159 
GLX_BLUE_SIZE
, 1,

160 
N⁄e
 };

206 
Boﬁ
 
	$WaôF‹NŸify
(
Di•œy
 *
d
, 
XEvít
 *
e
, *
¨g
) {

207  (
e
->
ty≥
 =
M≠NŸify
Ë&& (e->
xm≠
.
wödow
 =(
Wödow
)
¨g
);

208 
	}
}

252 
	$maö
(
¨gc
, **
¨gv
) {

253 
Di•œy
 *
dpy
;

254 
XVisuÆInfo
 *
vi
;

255 
Cﬁ‹m≠
 
cm≠
;

256 
XSëWödowAâribuãs
 
swa
;

257 
Wödow
 
wö
;

258 
GLXC⁄ãxt
 
cx
;

259 
XEvít
 
evít
;

260 
sw≠_Êag
 = 
GL_FALSE
;

263 
	`do_ãxtuªd_pﬁy
(
Di•œy
 *
dpy
, 
Wödow
 
wö
, 
sw≠_Êag
);

268 
dpy
 = 
	`XO≥nDi•œy
(0);

274 
vi
 = 
	`glXChoo£VisuÆ
(
dpy
, 
	`DeÁu…S¸ìn
(dpy), 
©åibuãLi°Dbl
);

275 i‡(
vi
 =
NULL
)

277 
vi
 = 
	`glXChoo£VisuÆ
(
dpy
, 
	`DeÁu…S¸ìn
(dpy), 
©åibuãLi°Sgl
);

278 
sw≠_Êag
 = 
GL_FALSE
;

282 
sw≠_Êag
 = 
GL_TRUE
;

286 
cx
 = 
	`glXCª©eC⁄ãxt
(
dpy
, 
vi
, 0, 
GL_TRUE
);

289 
cm≠
 = 
	`XCª©eCﬁ‹m≠
(
dpy
, 
	`RoŸWödow
(dpy, 
vi
->
s¸ìn
),

290 
vi
->
visuÆ
, 
AŒocN⁄e
);

293 
swa
.
cﬁ‹m≠
 = 
cm≠
;

294 
swa
.
b‹dî_pixñ
 = 0;

295 
swa
.
evít_mask
 = 
Såu˘uªNŸifyMask
;

297 
wö
 = 
	`XCª©eWödow
(
dpy
, 
	`RoŸWödow
(dpy, 
vi
->
s¸ìn
), 0, 0, 
WIN_WIDTH
,

298 
WIN_HEIGHT
,

299 0, 
vi
->
dïth
, 
I≈utOuçut
, vi->
visuÆ
,

300 
CWB‹dîPixñ
|
CWCﬁ‹m≠
|
CWEvítMask
, &
swa
);

301 
	`XM≠Wödow
(
dpy
, 
wö
);

302 
	`XIfEvít
(
dpy
, &
evít
, 
WaôF‹NŸify
, (*)
wö
);

305 
	`glXMakeCuºít
(
dpy
, 
wö
, 
cx
);

308 
	`glCÀ¨Cﬁ‹
(0,0,0,1);

309 
	`glCÀ¨
(
GL_COLOR_BUFFER_BIT
);

310 
	`glFlush
();

311 i‡(
sw≠_Êag
Ë
	`glXSw≠Buf„rs
(
dpy
,
wö
);

314 
	`do_ãxtuªd_pﬁy
(
dpy
,
wö
, 
sw≠_Êag
);

317 
	`¶ìp
(10);

320 
	}
}

328 
	#N_TEXTURES
 32

	)

334 
	#ITERATIONS
 (100 * 
N_TEXTURES
)

	)

381 
	$do_ãxtuªd_pﬁy
(
Di•œy
 *
dpy
, 
Wödow
 
wö
, 
sw≠_Êag
 )

384 
Textuª_d©a_t
 
sy¡extuª
;

385 
Textuª_d©a_t
 
ãx¨øy
[
N_TEXTURES
];

386 
timevÆ
 
°¨âime
, 
ídtime
;

387 
u£c_ru¬ög
;

388 
u£c_‰ame
, 
‰ame_øã
;

389 
i
, 
ãxtuª_numbî
;

390 
GLsizei
 
width
, 
height
;

393 
	`lﬂd_ãxtuª
(*
fûíame
, 
Textuª_d©a_t
 *
ãxtuªp
);

394 
	`døw_ãxtuªd_pﬁy
(
Textuª_d©a_t
 
ãxtuª
, 
Di•œy
 *
dpy
,

395 
Wödow
 
wö
, 
sw≠_Êag
);

396 
	`døw_symbﬁogy_¸osshaús
(
Di•œy
 *
dpy
, 
Wödow
 
wö
,

397 
GLÊﬂt
 
˚¡î_x
, GLÊﬂà
˚¡î_y
,

398 
GLÊﬂt
 
height
, GLÊﬂà
width
);

399 
	`døw_ãxtuªd_pﬁy_dl
(
Textuª_d©a_t
 
ãxtuª
, 
Di•œy
 *
dpy
,

400 
Wödow
 
wö
, 
sw≠_Êag
);

401 
	`sy¡hesize_ãxtuª
(
Textuª_d©a_t
 * 
ãxtuª
);

402 
	`make_ãxtuª_¨øy
(
Textuª_d©a_t
 
ãx¨øy
[], 
√Àmíts
);

403 
	`sy¡hesize_lumö™˚_ãxtuª
(
Textuª_d©a_t
 * 
ãxtuª
);

410 
	`sy¡hesize_lumö™˚_ãxtuª
(&
sy¡extuª
);

415 
	`make_ãxtuª_¨øy
(
ãx¨øy
, 
N_TEXTURES
);

418 
width
 = 
ãx¨øy
[0].
ãxtuª_width
;

419 
height
 = 
ãx¨øy
[0].
ãxtuª_height
;

425 
	`glTexImage2D
(
GL_TEXTURE_2D
 , 0, 
GL_LUMINANCE
, 
sy¡extuª
.
ãxtuª_width
,

426 
sy¡extuª
.
ãxtuª_height
, 0, 
GL_LUMINANCE
, 
GL_UNSIGNED_BYTE
,

427 
sy¡extuª
.
image
);

429 
	`check_îr‹
("after glTexImage2D");

431 
	`glTexP¨amëîf
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MAG_FILTER
, 
GL_NEAREST
);

432 
	`glTexP¨amëîf
(
GL_TEXTURE_2D
, 
GL_TEXTURE_MIN_FILTER
, 
GL_NEAREST
);

438 
	`gëtimeofday
(&
°¨âime
, 
NULL
);

440 
i
 = 0; i < 
ITERATIONS
; i++)

447 
	`døw_ãxtuªd_pﬁy
(
sy¡extuª
, 
dpy
, 
wö
, 
sw≠_Êag
);

449 
	`døw_symbﬁogy_¸osshaús
(
dpy
, 
wö
, 0.0, 0.0, 0.3, 0.3);

451 
ãxtuª_numbî
 = 
i
%
N_TEXTURES
;

456 
	`check_îr‹
("before subtexture");

457 
	`glTexSubImage2D
(
GL_TEXTURE_2D
, 0, 0, 0, 
width
,

458 
height
, 
GL_LUMINANCE
, 
GL_UNSIGNED_BYTE
,

459 
ãx¨øy
[
ãxtuª_numbî
].
image
);

461 
	`check_îr‹
("after subtexture");

465 
	`gëtimeofday
(&
ídtime
, 
NULL
);

470 
u£c_ru¬ög
 = (
ídtime
.
tv_£c
 * 1000000 +Éndtime.
tv_u£c
) -

471 (
°¨âime
.
tv_£c
 * 1000000 + sèπtime.
tv_u£c
);

473 
u£c_‰ame
 = ()
u£c_ru¬ög
 /()
ITERATIONS
;

474 
‰ame_øã
 = 1000000.0/
u£c_‰ame
;

476 
	`Ârötf
(
°dîr
, "%ld microsecondsÑun,áverage %f frames/sec\n",

477 
u£c_ru¬ög
, 
‰ame_øã
);

480 
	}
}

533 
	$døw_symbﬁogy_¸osshaús
(
Di•œy
 *
dpy
, 
Wödow
 
wö
,

534 
GLÊﬂt
 
˚¡î_x
, GLÊﬂà
˚¡î_y
,

535 
GLÊﬂt
 
height
, GLÊﬂà
width
)

537 
GLÊﬂt
 
p0
[3];

538 
GLÊﬂt
 
p1
[3];

539 
GLÊﬂt
 
p2
[3];

540 
GLÊﬂt
 
p3
[3];

542 
p0
[0] = 
˚¡î_x
;

543 
p0
[1] = 
˚¡î_y
 + 
height
;

544 
p0
[2] = 0;

546 
p1
[0] = 
˚¡î_x
;

547 
p1
[1] = 
˚¡î_y
 - 
height
;

548 
p1
[2] = 0;

550 
p2
[0] = 
˚¡î_x
 - 
width
;

551 
p2
[1] = 
˚¡î_y
;

552 
p2
[2] = 0;

554 
p3
[0] = 
˚¡î_x
 + 
width
;

555 
p3
[1] = 
˚¡î_y
;

556 
p3
[2] = 0;

558 
	`check_îr‹
("before crosshairs symbology");

560 
	`glPushM©rix
();

562 
	`glCﬁ‹Mask
(
GL_TRUE
, GL_TRUE, GL_TRUE, GL_TRUE);

563 
	`check_îr‹
("setting color mask");

566 
	`glBegö
(
GL_LINES
);

568 
	`glCﬁ‹3f
(1.0, 0.0, 0.0);

570 
	`glVîãx3fv
(
p0
);

571 
	`glVîãx3fv
(
p1
);

573 
	`glVîãx3fv
(
p2
);

574 
	`glVîãx3fv
(
p3
);

577 
	`glEnd
();

580 
	`glP›M©rix
();

581 
	`glFlush
();

582 
	`glXSw≠Buf„rs
(
dpy
,
wö
);

584 
	`check_îr‹
("after crosshairs symbology");

585 
	}
}

637 
	$døw_ãxtuªd_pﬁy
(
Textuª_d©a_t
 
ãxtuª
, 
Di•œy
 *
dpy
,

638 
Wödow
 
wö
, 
sw≠_Êag
)

641 
GLÊﬂt
 
v0
[3] = {-1.00, -1.00, 0.0};

642 
GLÊﬂt
 
v1
[3] = { 1.00, -1.00, 0.0};

643 
GLÊﬂt
 
v2
[3] = { 1.00, 1.00, 0.0};

644 
GLÊﬂt
 
v3
[3] = {-1.00, 1.00, 0.0};

646 
GLÊﬂt
 
t0
[2] = { 0.0, 0.0};

647 
GLÊﬂt
 
t1
[2] = {()
WIN_WIDTH
 / ()
TEX_WIDTH
, 0.0 };

648 
GLÊﬂt
 
t2
[2] = {()
WIN_WIDTH
 / ()
TEX_WIDTH
,

649 ()
WIN_HEIGHT
 / ()
TEX_HEIGHT
};

650 
GLÊﬂt
 
t3
[2] = { 0.0, ()
WIN_HEIGHT
 / ()
TEX_HEIGHT
};

653 
	`glCﬁ‹4f
(1.0, 1.0, 1.0, 1.0);

657 
	`glPushM©rix
();

659 
	`glE«bÀ
(
GL_TEXTURE_2D
);

660 
	`glCÀ¨
(
GL_COLOR_BUFFER_BIT
);

661 
	`glBegö
(
GL_QUADS
);

663 
	`glTexCo‹d2fv
(
t0
); 
	`glVîãx3fv
(
v0
);

664 
	`glTexCo‹d2fv
(
t1
); 
	`glVîãx3fv
(
v1
);

665 
	`glTexCo‹d2fv
(
t2
); 
	`glVîãx3fv
(
v2
);

666 
	`glTexCo‹d2fv
(
t3
); 
	`glVîãx3fv
(
v3
);

669 
	`glEnd
();

670 
	`glDißbÀ
(
GL_TEXTURE_2D
);

672 
	`glP›M©rix
();

676 
	}
}

729 
	$check_îr‹
–*
œbñ
 )

731 
GLíum
 
îr‹
;

732  (
îr‹
 = 
	`glGëEº‹
()Ë!
GL_NO_ERROR
 )

733 
	`¥ötf
–"%s: %s\n", 
œbñ
, 
	`gluEº‹Såög
(
îr‹
) );

734 
	}
}

825 
	$make_ãxtuª_¨øy
(
Textuª_d©a_t
 
ãx¨øy
[], 
√Àmíts
)

827 
ãxtuª_numbî
;

828 
ãxtuª_size
, 
width
, 
height
, 
ncomp⁄íts
;

829 
GLsizei
 
row
, 
cﬁumn
;

830 
GLubyã
 * 
image
;

831 
gªyÀvñ
;

833 
width
 = 
SUBTEX_WIDTH
;

834 
height
 = 
SUBTEX_HEIGHT
;

835 
ncomp⁄íts
 = 1;

837 
ãxtuª_size
 = 
width
 * 
height
 * 
ncomp⁄íts
 *

838 (
GLubyã
);

841 
ãxtuª_numbî
 = 0;Åextuª_numbî < 
√Àmíts
;Åexture_number++)

844 
	`¥ötf
("ãxtuª_numbî %d\n", 
ãxtuª_numbî
);

846 
ãx¨øy
[
ãxtuª_numbî
].
ãxtuª_width
 = 
width
;

847 
ãx¨øy
[
ãxtuª_numbî
].
ãxtuª_height
 = 
height
;

848 
ãx¨øy
[
ãxtuª_numbî
].
ncomp⁄íts
 =Çcomponents;

849 
ãx¨øy
[
ãxtuª_numbî
].
image
 = 
	`mÆloc
(
ãxtuª_size
);

851 
gªyÀvñ
 = (256 * 
ãxtuª_numbî
Ë/ 
√Àmíts
;

853 
image
 = 
ãx¨øy
[
ãxtuª_numbî
].image;

858 
row
 = 0;Ñow < 
ãxtuª_numbî
 * 
height
 / 
√Àmíts
;Ñow++)

860 
cﬁumn
 = 0; cﬁum¿< 
ãxtuª_numbî
 * 
width
/ 
√Àmíts
;

861 
cﬁumn
++)

863 
image
[(
row
 * 
width
 +
cﬁumn
)] = 
gªyÀvñ
;

868 
row
 = 
ãxtuª_numbî
 * 
height
 / 
√Àmíts
;Ñow < height;Ñow++)

870 
cﬁumn
 = 
ãxtuª_numbî
 * 
width
/ 
√Àmíts
;

871 
cﬁumn
 < 
width
; column++)

873 
image
[(
row
 * 
width
 +
cﬁumn
)] = 0x7f;

879 
	}
}

927 
	$sy¡hesize_lumö™˚_ãxtuª
(
Textuª_d©a_t
 * 
ãxtuª
)

929 
GLubyã
 * 
p
;

930 
image_size
;

932 
ãxtuª
->
ãxtuª_width
 = 
TEX_WIDTH
;

933 
ãxtuª
->
ãxtuª_height
 = 
TEX_HEIGHT
;

934 
ãxtuª
->
ncomp⁄íts
 = 1;

936 
image_size
 = 
ãxtuª
->
ãxtuª_width
 *Åextuª->
ãxtuª_height
 *

937 
ãxtuª
->
ncomp⁄íts
 * (
GLubyã
);

939 
ãxtuª
->
image
 = 
	`mÆloc
(
image_size
);

940 
p
 = 
ãxtuª
->
image
;

941 
p
 < 
ãxtuª
->
image
 + 
image_size
)

943 
p
[0] = 0x00;

944 
p
[1] = 0x00;

945 
p
[2] = 0xff;

946 
p
[3] = 0xff;

947 
p
 += 4;

949 
	}
}

	@yuv2rgb.c

34 
	~<°dio.h
>

35 
	~<°dlib.h
>

37 
	$maö
(
¨gc
, * 
¨gv
[])

39 
y
, 
u
, 
v
;

40 
r
, 
g
, 
b
;

42 i‡(4 !
¨gc
)

44 
	`Ârötf
(
°dîr
, "%s Y U V -- values between 0.0ánd 1.0\n");

49 
y
 = 
	`©of
(
¨gv
[1]);

50 
u
 = 
	`©of
(
¨gv
[2]);

51 
v
 = 
	`©of
(
¨gv
[3]);

53 
y
=1.1643*(y-0.0625);

54 
u
=u-0.5;

55 
v
=v-0.5;

57 
r
=
y
+1.5958*
v
;

58 
g
=
y
-0.39173*
u
-0.81290*
v
;

59 
b
=
y
+2.017*
u
;

61 
	`Ârötf
(
°dîr
, "R %‡G %‡B %f\n", 
r
, 
g
, 
b
);

62 
	`Ârötf
(
°dîr
, "R %d G %d B %d\n", ()(255 * 
r
), ()(255 * 
g
),

63 ()(255 *
b
));

67 
	}
}

	@/usr/include/GL/gl.h

27 #i‚de‡
__gl_h_


28 
	#__gl_h_


	)

30 #i‡
deföed
(
USE_MGL_NAMESPACE
)

31 
	~"gl_m™gÀ.h
"

39 #i‡
deföed
(
_WIN32
Ë&& !deföed(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

40 
	#__WIN32__


	)

43 #i‡
deföed
(
__WIN32__
Ë&& !deföed(
__CYGWIN__
)

44 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GL32
)

45 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

46 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

47 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

49 
	#GLAPI
 

	)

51 #i‡
deföed
(
__MINGW32__
Ë&& deföed(
GL_NO_STDCALL
Ë|| deföed(
UNDER_CE
)

52 
	#GLAPIENTRY


	)

54 
	#GLAPIENTRY
 
__°dˇŒ


	)

56 #ñi‡
deföed
(
__CYGWIN__
Ë&& deföed(
USE_OPENGL32
)

57 
	#GLAPI
 

	)

58 
	#GLAPIENTRY
 
__°dˇŒ


	)

59 #ñi‡(
deföed
(
__GNUC__
Ë&& __GNUC__ >4Ë|| (deföed(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

60 
	#GLAPI
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

61 
	#GLAPIENTRY


	)

72 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
)

73 #i‚de‡
WIN32_LEAN_AND_MEAN


74 
	#WIN32_LEAN_AND_MEAN
 1

	)

76 
	~<wödows.h
>

79 #i‚de‡
GLAPI


80 
	#GLAPI
 

	)

83 #i‚de‡
GLAPIENTRY


84 
	#GLAPIENTRY


	)

87 #i‚de‡
APIENTRY


88 
	#APIENTRY
 
GLAPIENTRY


	)

92 #i‚de‡
APIENTRYP


93 
	#APIENTRYP
 
APIENTRY
 *

	)

96 #i‚de‡
GLAPIENTRYP


97 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

100 #i‡
deföed
(
PRAGMA_EXPORT_SUPPORTED
)

101 #¥agm®
exp‹t
 
⁄


110 #ifde‡
__˝lu•lus


116 
	#GL_VERSION_1_1
 1

	)

117 
	#GL_VERSION_1_2
 1

	)

118 
	#GL_VERSION_1_3
 1

	)

119 
	#GL_ARB_imagög
 1

	)

125 
	tGLíum
;

126 
	tGLboﬁón
;

127 
	tGLbôfõld
;

128 
	tGLvoid
;

129 sig√d 
	tGLbyã
;

130 
	tGLsh‹t
;

131 
	tGLöt
;

132 
	tGLubyã
;

133 
	tGLush‹t
;

134 
	tGLuöt
;

135 
	tGLsizei
;

136 
	tGLÊﬂt
;

137 
	tGL˛ampf
;

138 
	tGLdoubÀ
;

139 
	tGL˛ampd
;

148 
	#GL_FALSE
 0

	)

149 
	#GL_TRUE
 1

	)

152 
	#GL_BYTE
 0x1400

	)

153 
	#GL_UNSIGNED_BYTE
 0x1401

	)

154 
	#GL_SHORT
 0x1402

	)

155 
	#GL_UNSIGNED_SHORT
 0x1403

	)

156 
	#GL_INT
 0x1404

	)

157 
	#GL_UNSIGNED_INT
 0x1405

	)

158 
	#GL_FLOAT
 0x1406

	)

159 
	#GL_2_BYTES
 0x1407

	)

160 
	#GL_3_BYTES
 0x1408

	)

161 
	#GL_4_BYTES
 0x1409

	)

162 
	#GL_DOUBLE
 0x140A

	)

165 
	#GL_POINTS
 0x0000

	)

166 
	#GL_LINES
 0x0001

	)

167 
	#GL_LINE_LOOP
 0x0002

	)

168 
	#GL_LINE_STRIP
 0x0003

	)

169 
	#GL_TRIANGLES
 0x0004

	)

170 
	#GL_TRIANGLE_STRIP
 0x0005

	)

171 
	#GL_TRIANGLE_FAN
 0x0006

	)

172 
	#GL_QUADS
 0x0007

	)

173 
	#GL_QUAD_STRIP
 0x0008

	)

174 
	#GL_POLYGON
 0x0009

	)

177 
	#GL_VERTEX_ARRAY
 0x8074

	)

178 
	#GL_NORMAL_ARRAY
 0x8075

	)

179 
	#GL_COLOR_ARRAY
 0x8076

	)

180 
	#GL_INDEX_ARRAY
 0x8077

	)

181 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

182 
	#GL_EDGE_FLAG_ARRAY
 0x8079

	)

183 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

184 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

185 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

186 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

187 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

188 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

189 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

190 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

191 
	#GL_INDEX_ARRAY_TYPE
 0x8085

	)

192 
	#GL_INDEX_ARRAY_STRIDE
 0x8086

	)

193 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

194 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

195 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

196 
	#GL_EDGE_FLAG_ARRAY_STRIDE
 0x808C

	)

197 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

198 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

199 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

200 
	#GL_INDEX_ARRAY_POINTER
 0x8091

	)

201 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

202 
	#GL_EDGE_FLAG_ARRAY_POINTER
 0x8093

	)

203 
	#GL_V2F
 0x2A20

	)

204 
	#GL_V3F
 0x2A21

	)

205 
	#GL_C4UB_V2F
 0x2A22

	)

206 
	#GL_C4UB_V3F
 0x2A23

	)

207 
	#GL_C3F_V3F
 0x2A24

	)

208 
	#GL_N3F_V3F
 0x2A25

	)

209 
	#GL_C4F_N3F_V3F
 0x2A26

	)

210 
	#GL_T2F_V3F
 0x2A27

	)

211 
	#GL_T4F_V4F
 0x2A28

	)

212 
	#GL_T2F_C4UB_V3F
 0x2A29

	)

213 
	#GL_T2F_C3F_V3F
 0x2A2A

	)

214 
	#GL_T2F_N3F_V3F
 0x2A2B

	)

215 
	#GL_T2F_C4F_N3F_V3F
 0x2A2C

	)

216 
	#GL_T4F_C4F_N3F_V4F
 0x2A2D

	)

219 
	#GL_MATRIX_MODE
 0x0BA0

	)

220 
	#GL_MODELVIEW
 0x1700

	)

221 
	#GL_PROJECTION
 0x1701

	)

222 
	#GL_TEXTURE
 0x1702

	)

225 
	#GL_POINT_SMOOTH
 0x0B10

	)

226 
	#GL_POINT_SIZE
 0x0B11

	)

227 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

228 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

231 
	#GL_LINE_SMOOTH
 0x0B20

	)

232 
	#GL_LINE_STIPPLE
 0x0B24

	)

233 
	#GL_LINE_STIPPLE_PATTERN
 0x0B25

	)

234 
	#GL_LINE_STIPPLE_REPEAT
 0x0B26

	)

235 
	#GL_LINE_WIDTH
 0x0B21

	)

236 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

237 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

240 
	#GL_POINT
 0x1B00

	)

241 
	#GL_LINE
 0x1B01

	)

242 
	#GL_FILL
 0x1B02

	)

243 
	#GL_CW
 0x0900

	)

244 
	#GL_CCW
 0x0901

	)

245 
	#GL_FRONT
 0x0404

	)

246 
	#GL_BACK
 0x0405

	)

247 
	#GL_POLYGON_MODE
 0x0B40

	)

248 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

249 
	#GL_POLYGON_STIPPLE
 0x0B42

	)

250 
	#GL_EDGE_FLAG
 0x0B43

	)

251 
	#GL_CULL_FACE
 0x0B44

	)

252 
	#GL_CULL_FACE_MODE
 0x0B45

	)

253 
	#GL_FRONT_FACE
 0x0B46

	)

254 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

255 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

256 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

257 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

258 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

261 
	#GL_COMPILE
 0x1300

	)

262 
	#GL_COMPILE_AND_EXECUTE
 0x1301

	)

263 
	#GL_LIST_BASE
 0x0B32

	)

264 
	#GL_LIST_INDEX
 0x0B33

	)

265 
	#GL_LIST_MODE
 0x0B30

	)

268 
	#GL_NEVER
 0x0200

	)

269 
	#GL_LESS
 0x0201

	)

270 
	#GL_EQUAL
 0x0202

	)

271 
	#GL_LEQUAL
 0x0203

	)

272 
	#GL_GREATER
 0x0204

	)

273 
	#GL_NOTEQUAL
 0x0205

	)

274 
	#GL_GEQUAL
 0x0206

	)

275 
	#GL_ALWAYS
 0x0207

	)

276 
	#GL_DEPTH_TEST
 0x0B71

	)

277 
	#GL_DEPTH_BITS
 0x0D56

	)

278 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

279 
	#GL_DEPTH_FUNC
 0x0B74

	)

280 
	#GL_DEPTH_RANGE
 0x0B70

	)

281 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

282 
	#GL_DEPTH_COMPONENT
 0x1902

	)

285 
	#GL_LIGHTING
 0x0B50

	)

286 
	#GL_LIGHT0
 0x4000

	)

287 
	#GL_LIGHT1
 0x4001

	)

288 
	#GL_LIGHT2
 0x4002

	)

289 
	#GL_LIGHT3
 0x4003

	)

290 
	#GL_LIGHT4
 0x4004

	)

291 
	#GL_LIGHT5
 0x4005

	)

292 
	#GL_LIGHT6
 0x4006

	)

293 
	#GL_LIGHT7
 0x4007

	)

294 
	#GL_SPOT_EXPONENT
 0x1205

	)

295 
	#GL_SPOT_CUTOFF
 0x1206

	)

296 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

297 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

298 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

299 
	#GL_AMBIENT
 0x1200

	)

300 
	#GL_DIFFUSE
 0x1201

	)

301 
	#GL_SPECULAR
 0x1202

	)

302 
	#GL_SHININESS
 0x1601

	)

303 
	#GL_EMISSION
 0x1600

	)

304 
	#GL_POSITION
 0x1203

	)

305 
	#GL_SPOT_DIRECTION
 0x1204

	)

306 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

307 
	#GL_COLOR_INDEXES
 0x1603

	)

308 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

309 
	#GL_LIGHT_MODEL_LOCAL_VIEWER
 0x0B51

	)

310 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

311 
	#GL_FRONT_AND_BACK
 0x0408

	)

312 
	#GL_SHADE_MODEL
 0x0B54

	)

313 
	#GL_FLAT
 0x1D00

	)

314 
	#GL_SMOOTH
 0x1D01

	)

315 
	#GL_COLOR_MATERIAL
 0x0B57

	)

316 
	#GL_COLOR_MATERIAL_FACE
 0x0B55

	)

317 
	#GL_COLOR_MATERIAL_PARAMETER
 0x0B56

	)

318 
	#GL_NORMALIZE
 0x0BA1

	)

321 
	#GL_CLIP_PLANE0
 0x3000

	)

322 
	#GL_CLIP_PLANE1
 0x3001

	)

323 
	#GL_CLIP_PLANE2
 0x3002

	)

324 
	#GL_CLIP_PLANE3
 0x3003

	)

325 
	#GL_CLIP_PLANE4
 0x3004

	)

326 
	#GL_CLIP_PLANE5
 0x3005

	)

329 
	#GL_ACCUM_RED_BITS
 0x0D58

	)

330 
	#GL_ACCUM_GREEN_BITS
 0x0D59

	)

331 
	#GL_ACCUM_BLUE_BITS
 0x0D5A

	)

332 
	#GL_ACCUM_ALPHA_BITS
 0x0D5B

	)

333 
	#GL_ACCUM_CLEAR_VALUE
 0x0B80

	)

334 
	#GL_ACCUM
 0x0100

	)

335 
	#GL_ADD
 0x0104

	)

336 
	#GL_LOAD
 0x0101

	)

337 
	#GL_MULT
 0x0103

	)

338 
	#GL_RETURN
 0x0102

	)

341 
	#GL_ALPHA_TEST
 0x0BC0

	)

342 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

343 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

346 
	#GL_BLEND
 0x0BE2

	)

347 
	#GL_BLEND_SRC
 0x0BE1

	)

348 
	#GL_BLEND_DST
 0x0BE0

	)

349 
	#GL_ZERO
 0

	)

350 
	#GL_ONE
 1

	)

351 
	#GL_SRC_COLOR
 0x0300

	)

352 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

353 
	#GL_SRC_ALPHA
 0x0302

	)

354 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

355 
	#GL_DST_ALPHA
 0x0304

	)

356 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

357 
	#GL_DST_COLOR
 0x0306

	)

358 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

359 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

362 
	#GL_FEEDBACK
 0x1C01

	)

363 
	#GL_RENDER
 0x1C00

	)

364 
	#GL_SELECT
 0x1C02

	)

367 
	#GL_2D
 0x0600

	)

368 
	#GL_3D
 0x0601

	)

369 
	#GL_3D_COLOR
 0x0602

	)

370 
	#GL_3D_COLOR_TEXTURE
 0x0603

	)

371 
	#GL_4D_COLOR_TEXTURE
 0x0604

	)

372 
	#GL_POINT_TOKEN
 0x0701

	)

373 
	#GL_LINE_TOKEN
 0x0702

	)

374 
	#GL_LINE_RESET_TOKEN
 0x0707

	)

375 
	#GL_POLYGON_TOKEN
 0x0703

	)

376 
	#GL_BITMAP_TOKEN
 0x0704

	)

377 
	#GL_DRAW_PIXEL_TOKEN
 0x0705

	)

378 
	#GL_COPY_PIXEL_TOKEN
 0x0706

	)

379 
	#GL_PASS_THROUGH_TOKEN
 0x0700

	)

380 
	#GL_FEEDBACK_BUFFER_POINTER
 0x0DF0

	)

381 
	#GL_FEEDBACK_BUFFER_SIZE
 0x0DF1

	)

382 
	#GL_FEEDBACK_BUFFER_TYPE
 0x0DF2

	)

385 
	#GL_SELECTION_BUFFER_POINTER
 0x0DF3

	)

386 
	#GL_SELECTION_BUFFER_SIZE
 0x0DF4

	)

389 
	#GL_FOG
 0x0B60

	)

390 
	#GL_FOG_MODE
 0x0B65

	)

391 
	#GL_FOG_DENSITY
 0x0B62

	)

392 
	#GL_FOG_COLOR
 0x0B66

	)

393 
	#GL_FOG_INDEX
 0x0B61

	)

394 
	#GL_FOG_START
 0x0B63

	)

395 
	#GL_FOG_END
 0x0B64

	)

396 
	#GL_LINEAR
 0x2601

	)

397 
	#GL_EXP
 0x0800

	)

398 
	#GL_EXP2
 0x0801

	)

401 
	#GL_LOGIC_OP
 0x0BF1

	)

402 
	#GL_INDEX_LOGIC_OP
 0x0BF1

	)

403 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

404 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

405 
	#GL_CLEAR
 0x1500

	)

406 
	#GL_SET
 0x150F

	)

407 
	#GL_COPY
 0x1503

	)

408 
	#GL_COPY_INVERTED
 0x150C

	)

409 
	#GL_NOOP
 0x1505

	)

410 
	#GL_INVERT
 0x150A

	)

411 
	#GL_AND
 0x1501

	)

412 
	#GL_NAND
 0x150E

	)

413 
	#GL_OR
 0x1507

	)

414 
	#GL_NOR
 0x1508

	)

415 
	#GL_XOR
 0x1506

	)

416 
	#GL_EQUIV
 0x1509

	)

417 
	#GL_AND_REVERSE
 0x1502

	)

418 
	#GL_AND_INVERTED
 0x1504

	)

419 
	#GL_OR_REVERSE
 0x150B

	)

420 
	#GL_OR_INVERTED
 0x150D

	)

423 
	#GL_STENCIL_BITS
 0x0D57

	)

424 
	#GL_STENCIL_TEST
 0x0B90

	)

425 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

426 
	#GL_STENCIL_FUNC
 0x0B92

	)

427 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

428 
	#GL_STENCIL_FAIL
 0x0B94

	)

429 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

430 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

431 
	#GL_STENCIL_REF
 0x0B97

	)

432 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

433 
	#GL_STENCIL_INDEX
 0x1901

	)

434 
	#GL_KEEP
 0x1E00

	)

435 
	#GL_REPLACE
 0x1E01

	)

436 
	#GL_INCR
 0x1E02

	)

437 
	#GL_DECR
 0x1E03

	)

440 
	#GL_NONE
 0

	)

441 
	#GL_LEFT
 0x0406

	)

442 
	#GL_RIGHT
 0x0407

	)

446 
	#GL_FRONT_LEFT
 0x0400

	)

447 
	#GL_FRONT_RIGHT
 0x0401

	)

448 
	#GL_BACK_LEFT
 0x0402

	)

449 
	#GL_BACK_RIGHT
 0x0403

	)

450 
	#GL_AUX0
 0x0409

	)

451 
	#GL_AUX1
 0x040A

	)

452 
	#GL_AUX2
 0x040B

	)

453 
	#GL_AUX3
 0x040C

	)

454 
	#GL_COLOR_INDEX
 0x1900

	)

455 
	#GL_RED
 0x1903

	)

456 
	#GL_GREEN
 0x1904

	)

457 
	#GL_BLUE
 0x1905

	)

458 
	#GL_ALPHA
 0x1906

	)

459 
	#GL_LUMINANCE
 0x1909

	)

460 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

461 
	#GL_ALPHA_BITS
 0x0D55

	)

462 
	#GL_RED_BITS
 0x0D52

	)

463 
	#GL_GREEN_BITS
 0x0D53

	)

464 
	#GL_BLUE_BITS
 0x0D54

	)

465 
	#GL_INDEX_BITS
 0x0D51

	)

466 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

467 
	#GL_AUX_BUFFERS
 0x0C00

	)

468 
	#GL_READ_BUFFER
 0x0C02

	)

469 
	#GL_DRAW_BUFFER
 0x0C01

	)

470 
	#GL_DOUBLEBUFFER
 0x0C32

	)

471 
	#GL_STEREO
 0x0C33

	)

472 
	#GL_BITMAP
 0x1A00

	)

473 
	#GL_COLOR
 0x1800

	)

474 
	#GL_DEPTH
 0x1801

	)

475 
	#GL_STENCIL
 0x1802

	)

476 
	#GL_DITHER
 0x0BD0

	)

477 
	#GL_RGB
 0x1907

	)

478 
	#GL_RGBA
 0x1908

	)

481 
	#GL_MAX_LIST_NESTING
 0x0B31

	)

482 
	#GL_MAX_EVAL_ORDER
 0x0D30

	)

483 
	#GL_MAX_LIGHTS
 0x0D31

	)

484 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

485 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

486 
	#GL_MAX_PIXEL_MAP_TABLE
 0x0D34

	)

487 
	#GL_MAX_ATTRIB_STACK_DEPTH
 0x0D35

	)

488 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

489 
	#GL_MAX_NAME_STACK_DEPTH
 0x0D37

	)

490 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

491 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

492 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

493 
	#GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
 0x0D3B

	)

496 
	#GL_ATTRIB_STACK_DEPTH
 0x0BB0

	)

497 
	#GL_CLIENT_ATTRIB_STACK_DEPTH
 0x0BB1

	)

498 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

499 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

500 
	#GL_CURRENT_INDEX
 0x0B01

	)

501 
	#GL_CURRENT_COLOR
 0x0B00

	)

502 
	#GL_CURRENT_NORMAL
 0x0B02

	)

503 
	#GL_CURRENT_RASTER_COLOR
 0x0B04

	)

504 
	#GL_CURRENT_RASTER_DISTANCE
 0x0B09

	)

505 
	#GL_CURRENT_RASTER_INDEX
 0x0B05

	)

506 
	#GL_CURRENT_RASTER_POSITION
 0x0B07

	)

507 
	#GL_CURRENT_RASTER_TEXTURE_COORDS
 0x0B06

	)

508 
	#GL_CURRENT_RASTER_POSITION_VALID
 0x0B08

	)

509 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

510 
	#GL_INDEX_CLEAR_VALUE
 0x0C20

	)

511 
	#GL_INDEX_MODE
 0x0C30

	)

512 
	#GL_INDEX_WRITEMASK
 0x0C21

	)

513 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

514 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

515 
	#GL_NAME_STACK_DEPTH
 0x0D70

	)

516 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

517 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

518 
	#GL_RENDER_MODE
 0x0C40

	)

519 
	#GL_RGBA_MODE
 0x0C31

	)

520 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

521 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

522 
	#GL_VIEWPORT
 0x0BA2

	)

525 
	#GL_AUTO_NORMAL
 0x0D80

	)

526 
	#GL_MAP1_COLOR_4
 0x0D90

	)

527 
	#GL_MAP1_INDEX
 0x0D91

	)

528 
	#GL_MAP1_NORMAL
 0x0D92

	)

529 
	#GL_MAP1_TEXTURE_COORD_1
 0x0D93

	)

530 
	#GL_MAP1_TEXTURE_COORD_2
 0x0D94

	)

531 
	#GL_MAP1_TEXTURE_COORD_3
 0x0D95

	)

532 
	#GL_MAP1_TEXTURE_COORD_4
 0x0D96

	)

533 
	#GL_MAP1_VERTEX_3
 0x0D97

	)

534 
	#GL_MAP1_VERTEX_4
 0x0D98

	)

535 
	#GL_MAP2_COLOR_4
 0x0DB0

	)

536 
	#GL_MAP2_INDEX
 0x0DB1

	)

537 
	#GL_MAP2_NORMAL
 0x0DB2

	)

538 
	#GL_MAP2_TEXTURE_COORD_1
 0x0DB3

	)

539 
	#GL_MAP2_TEXTURE_COORD_2
 0x0DB4

	)

540 
	#GL_MAP2_TEXTURE_COORD_3
 0x0DB5

	)

541 
	#GL_MAP2_TEXTURE_COORD_4
 0x0DB6

	)

542 
	#GL_MAP2_VERTEX_3
 0x0DB7

	)

543 
	#GL_MAP2_VERTEX_4
 0x0DB8

	)

544 
	#GL_MAP1_GRID_DOMAIN
 0x0DD0

	)

545 
	#GL_MAP1_GRID_SEGMENTS
 0x0DD1

	)

546 
	#GL_MAP2_GRID_DOMAIN
 0x0DD2

	)

547 
	#GL_MAP2_GRID_SEGMENTS
 0x0DD3

	)

548 
	#GL_COEFF
 0x0A00

	)

549 
	#GL_ORDER
 0x0A01

	)

550 
	#GL_DOMAIN
 0x0A02

	)

553 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

554 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

555 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

556 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

557 
	#GL_FOG_HINT
 0x0C54

	)

558 
	#GL_DONT_CARE
 0x1100

	)

559 
	#GL_FASTEST
 0x1101

	)

560 
	#GL_NICEST
 0x1102

	)

563 
	#GL_SCISSOR_BOX
 0x0C10

	)

564 
	#GL_SCISSOR_TEST
 0x0C11

	)

567 
	#GL_MAP_COLOR
 0x0D10

	)

568 
	#GL_MAP_STENCIL
 0x0D11

	)

569 
	#GL_INDEX_SHIFT
 0x0D12

	)

570 
	#GL_INDEX_OFFSET
 0x0D13

	)

571 
	#GL_RED_SCALE
 0x0D14

	)

572 
	#GL_RED_BIAS
 0x0D15

	)

573 
	#GL_GREEN_SCALE
 0x0D18

	)

574 
	#GL_GREEN_BIAS
 0x0D19

	)

575 
	#GL_BLUE_SCALE
 0x0D1A

	)

576 
	#GL_BLUE_BIAS
 0x0D1B

	)

577 
	#GL_ALPHA_SCALE
 0x0D1C

	)

578 
	#GL_ALPHA_BIAS
 0x0D1D

	)

579 
	#GL_DEPTH_SCALE
 0x0D1E

	)

580 
	#GL_DEPTH_BIAS
 0x0D1F

	)

581 
	#GL_PIXEL_MAP_S_TO_S_SIZE
 0x0CB1

	)

582 
	#GL_PIXEL_MAP_I_TO_I_SIZE
 0x0CB0

	)

583 
	#GL_PIXEL_MAP_I_TO_R_SIZE
 0x0CB2

	)

584 
	#GL_PIXEL_MAP_I_TO_G_SIZE
 0x0CB3

	)

585 
	#GL_PIXEL_MAP_I_TO_B_SIZE
 0x0CB4

	)

586 
	#GL_PIXEL_MAP_I_TO_A_SIZE
 0x0CB5

	)

587 
	#GL_PIXEL_MAP_R_TO_R_SIZE
 0x0CB6

	)

588 
	#GL_PIXEL_MAP_G_TO_G_SIZE
 0x0CB7

	)

589 
	#GL_PIXEL_MAP_B_TO_B_SIZE
 0x0CB8

	)

590 
	#GL_PIXEL_MAP_A_TO_A_SIZE
 0x0CB9

	)

591 
	#GL_PIXEL_MAP_S_TO_S
 0x0C71

	)

592 
	#GL_PIXEL_MAP_I_TO_I
 0x0C70

	)

593 
	#GL_PIXEL_MAP_I_TO_R
 0x0C72

	)

594 
	#GL_PIXEL_MAP_I_TO_G
 0x0C73

	)

595 
	#GL_PIXEL_MAP_I_TO_B
 0x0C74

	)

596 
	#GL_PIXEL_MAP_I_TO_A
 0x0C75

	)

597 
	#GL_PIXEL_MAP_R_TO_R
 0x0C76

	)

598 
	#GL_PIXEL_MAP_G_TO_G
 0x0C77

	)

599 
	#GL_PIXEL_MAP_B_TO_B
 0x0C78

	)

600 
	#GL_PIXEL_MAP_A_TO_A
 0x0C79

	)

601 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

602 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

603 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

604 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

605 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

606 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

607 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

608 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

609 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

610 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

611 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

612 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

613 
	#GL_ZOOM_X
 0x0D16

	)

614 
	#GL_ZOOM_Y
 0x0D17

	)

617 
	#GL_TEXTURE_ENV
 0x2300

	)

618 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

619 
	#GL_TEXTURE_1D
 0x0DE0

	)

620 
	#GL_TEXTURE_2D
 0x0DE1

	)

621 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

622 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

623 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

624 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

625 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

626 
	#GL_TEXTURE_GEN_S
 0x0C60

	)

627 
	#GL_TEXTURE_GEN_T
 0x0C61

	)

628 
	#GL_TEXTURE_GEN_R
 0x0C62

	)

629 
	#GL_TEXTURE_GEN_Q
 0x0C63

	)

630 
	#GL_TEXTURE_GEN_MODE
 0x2500

	)

631 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

632 
	#GL_TEXTURE_WIDTH
 0x1000

	)

633 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

634 
	#GL_TEXTURE_BORDER
 0x1005

	)

635 
	#GL_TEXTURE_COMPONENTS
 0x1003

	)

636 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

637 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

638 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

639 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

640 
	#GL_TEXTURE_LUMINANCE_SIZE
 0x8060

	)

641 
	#GL_TEXTURE_INTENSITY_SIZE
 0x8061

	)

642 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

643 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

644 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

645 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

646 
	#GL_OBJECT_LINEAR
 0x2401

	)

647 
	#GL_OBJECT_PLANE
 0x2501

	)

648 
	#GL_EYE_LINEAR
 0x2400

	)

649 
	#GL_EYE_PLANE
 0x2502

	)

650 
	#GL_SPHERE_MAP
 0x2402

	)

651 
	#GL_DECAL
 0x2101

	)

652 
	#GL_MODULATE
 0x2100

	)

653 
	#GL_NEAREST
 0x2600

	)

654 
	#GL_REPEAT
 0x2901

	)

655 
	#GL_CLAMP
 0x2900

	)

656 
	#GL_S
 0x2000

	)

657 
	#GL_T
 0x2001

	)

658 
	#GL_R
 0x2002

	)

659 
	#GL_Q
 0x2003

	)

662 
	#GL_VENDOR
 0x1F00

	)

663 
	#GL_RENDERER
 0x1F01

	)

664 
	#GL_VERSION
 0x1F02

	)

665 
	#GL_EXTENSIONS
 0x1F03

	)

668 
	#GL_NO_ERROR
 0

	)

669 
	#GL_INVALID_ENUM
 0x0500

	)

670 
	#GL_INVALID_VALUE
 0x0501

	)

671 
	#GL_INVALID_OPERATION
 0x0502

	)

672 
	#GL_STACK_OVERFLOW
 0x0503

	)

673 
	#GL_STACK_UNDERFLOW
 0x0504

	)

674 
	#GL_OUT_OF_MEMORY
 0x0505

	)

677 
	#GL_CURRENT_BIT
 0x00000001

	)

678 
	#GL_POINT_BIT
 0x00000002

	)

679 
	#GL_LINE_BIT
 0x00000004

	)

680 
	#GL_POLYGON_BIT
 0x00000008

	)

681 
	#GL_POLYGON_STIPPLE_BIT
 0x00000010

	)

682 
	#GL_PIXEL_MODE_BIT
 0x00000020

	)

683 
	#GL_LIGHTING_BIT
 0x00000040

	)

684 
	#GL_FOG_BIT
 0x00000080

	)

685 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

686 
	#GL_ACCUM_BUFFER_BIT
 0x00000200

	)

687 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

688 
	#GL_VIEWPORT_BIT
 0x00000800

	)

689 
	#GL_TRANSFORM_BIT
 0x00001000

	)

690 
	#GL_ENABLE_BIT
 0x00002000

	)

691 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

692 
	#GL_HINT_BIT
 0x00008000

	)

693 
	#GL_EVAL_BIT
 0x00010000

	)

694 
	#GL_LIST_BIT
 0x00020000

	)

695 
	#GL_TEXTURE_BIT
 0x00040000

	)

696 
	#GL_SCISSOR_BIT
 0x00080000

	)

697 
	#GL_ALL_ATTRIB_BITS
 0x000FFFFF

	)

701 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

702 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

703 
	#GL_TEXTURE_PRIORITY
 0x8066

	)

704 
	#GL_TEXTURE_RESIDENT
 0x8067

	)

705 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

706 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

707 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

708 
	#GL_ALPHA4
 0x803B

	)

709 
	#GL_ALPHA8
 0x803C

	)

710 
	#GL_ALPHA12
 0x803D

	)

711 
	#GL_ALPHA16
 0x803E

	)

712 
	#GL_LUMINANCE4
 0x803F

	)

713 
	#GL_LUMINANCE8
 0x8040

	)

714 
	#GL_LUMINANCE12
 0x8041

	)

715 
	#GL_LUMINANCE16
 0x8042

	)

716 
	#GL_LUMINANCE4_ALPHA4
 0x8043

	)

717 
	#GL_LUMINANCE6_ALPHA2
 0x8044

	)

718 
	#GL_LUMINANCE8_ALPHA8
 0x8045

	)

719 
	#GL_LUMINANCE12_ALPHA4
 0x8046

	)

720 
	#GL_LUMINANCE12_ALPHA12
 0x8047

	)

721 
	#GL_LUMINANCE16_ALPHA16
 0x8048

	)

722 
	#GL_INTENSITY
 0x8049

	)

723 
	#GL_INTENSITY4
 0x804A

	)

724 
	#GL_INTENSITY8
 0x804B

	)

725 
	#GL_INTENSITY12
 0x804C

	)

726 
	#GL_INTENSITY16
 0x804D

	)

727 
	#GL_R3_G3_B2
 0x2A10

	)

728 
	#GL_RGB4
 0x804F

	)

729 
	#GL_RGB5
 0x8050

	)

730 
	#GL_RGB8
 0x8051

	)

731 
	#GL_RGB10
 0x8052

	)

732 
	#GL_RGB12
 0x8053

	)

733 
	#GL_RGB16
 0x8054

	)

734 
	#GL_RGBA2
 0x8055

	)

735 
	#GL_RGBA4
 0x8056

	)

736 
	#GL_RGB5_A1
 0x8057

	)

737 
	#GL_RGBA8
 0x8058

	)

738 
	#GL_RGB10_A2
 0x8059

	)

739 
	#GL_RGBA12
 0x805A

	)

740 
	#GL_RGBA16
 0x805B

	)

741 
	#GL_CLIENT_PIXEL_STORE_BIT
 0x00000001

	)

742 
	#GL_CLIENT_VERTEX_ARRAY_BIT
 0x00000002

	)

743 
	#GL_ALL_CLIENT_ATTRIB_BITS
 0xFFFFFFFF

	)

744 
	#GL_CLIENT_ALL_ATTRIB_BITS
 0xFFFFFFFF

	)

752 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Index
–
GLÊﬂt
 
c
 );

754 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Cﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
 );

756 
GLAPI
 
GLAPIENTRY
 
glCÀ¨
–
GLbôfõld
 
mask
 );

758 
GLAPI
 
GLAPIENTRY
 
glIndexMask
–
GLuöt
 
mask
 );

760 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Mask
–
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
 );

762 
GLAPI
 
GLAPIENTRY
 
glAÕhaFunc
–
GLíum
 
func
, 
GL˛ampf
 
ªf
 );

764 
GLAPI
 
GLAPIENTRY
 
glBÀndFunc
–
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
 );

766 
GLAPI
 
GLAPIENTRY
 
glLogicOp
–
GLíum
 
›code
 );

768 
GLAPI
 
GLAPIENTRY
 
glCuŒFa˚
–
GLíum
 
mode
 );

770 
GLAPI
 
GLAPIENTRY
 
glFr⁄tFa˚
–
GLíum
 
mode
 );

772 
GLAPI
 
GLAPIENTRY
 
glPoötSize
–
GLÊﬂt
 
size
 );

774 
GLAPI
 
GLAPIENTRY
 
glLöeWidth
–
GLÊﬂt
 
width
 );

776 
GLAPI
 
GLAPIENTRY
 
glLöeStù∂e
–
GLöt
 
Á˘‹
, 
GLush‹t
 
∑âîn
 );

778 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Mode
–
GLíum
 
Á˚
, GLíum 
mode
 );

780 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Off£t
–
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
 );

782 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Stù∂e
–c⁄° 
GLubyã
 *
mask
 );

784 
GLAPI
 
GLAPIENTRY
 
glGëPﬁyg⁄Stù∂e
–
GLubyã
 *
mask
 );

786 
GLAPI
 
GLAPIENTRY
 
glEdgeFœg
–
GLboﬁón
 
Êag
 );

788 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgv
–c⁄° 
GLboﬁón
 *
Êag
 );

790 
GLAPI
 
GLAPIENTRY
 
glSciss‹
–
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

792 
GLAPI
 
GLAPIENTRY
 
glClùPœ√
–
GLíum
 
∂™e
, c⁄° 
GLdoubÀ
 *
equ©i⁄
 );

794 
GLAPI
 
GLAPIENTRY
 
glGëClùPœ√
–
GLíum
 
∂™e
, 
GLdoubÀ
 *
equ©i⁄
 );

796 
GLAPI
 
GLAPIENTRY
 
glDøwBuf„r
–
GLíum
 
mode
 );

798 
GLAPI
 
GLAPIENTRY
 
glRódBuf„r
–
GLíum
 
mode
 );

800 
GLAPI
 
GLAPIENTRY
 
glE«bÀ
–
GLíum
 
ˇp
 );

802 
GLAPI
 
GLAPIENTRY
 
glDißbÀ
–
GLíum
 
ˇp
 );

804 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsE«bÀd
–
GLíum
 
ˇp
 );

807 
GLAPI
 
GLAPIENTRY
 
glE«bÀClõ¡Sèã
–
GLíum
 
ˇp
 );

809 
GLAPI
 
GLAPIENTRY
 
glDißbÀClõ¡Sèã
–
GLíum
 
ˇp
 );

812 
GLAPI
 
GLAPIENTRY
 
glGëBoﬁónv
–
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
 );

814 
GLAPI
 
GLAPIENTRY
 
glGëDoubÀv
–
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

816 
GLAPI
 
GLAPIENTRY
 
glGëFlﬂtv
–
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

818 
GLAPI
 
GLAPIENTRY
 
glGëI¡egîv
–
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

821 
GLAPI
 
GLAPIENTRY
 
glPushAârib
–
GLbôfõld
 
mask
 );

823 
GLAPI
 
GLAPIENTRY
 
glP›Aârib
( );

826 
GLAPI
 
GLAPIENTRY
 
glPushClõ¡Aârib
–
GLbôfõld
 
mask
 );

828 
GLAPI
 
GLAPIENTRY
 
glP›Clõ¡Aârib
( );

831 
GLAPI
 
GLöt
 
GLAPIENTRY
 
glRídîMode
–
GLíum
 
mode
 );

833 
GLAPI
 
GLíum
 
GLAPIENTRY
 
glGëEº‹
( );

835 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
glGëSåög
–
GLíum
 
«me
 );

837 
GLAPI
 
GLAPIENTRY
 
glFöish
( );

839 
GLAPI
 
GLAPIENTRY
 
glFlush
( );

841 
GLAPI
 
GLAPIENTRY
 
glHöt
–
GLíum
 
èrgë
, GLíum 
mode
 );

848 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Dïth
–
GL˛ampd
 
dïth
 );

850 
GLAPI
 
GLAPIENTRY
 
glDïthFunc
–
GLíum
 
func
 );

852 
GLAPI
 
GLAPIENTRY
 
glDïthMask
–
GLboﬁón
 
Êag
 );

854 
GLAPI
 
GLAPIENTRY
 
glDïthR™ge
–
GL˛ampd
 
√¨_vÆ
, GL˛ampd 
Ár_vÆ
 );

861 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Accum
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
 );

863 
GLAPI
 
GLAPIENTRY
 
glAccum
–
GLíum
 
›
, 
GLÊﬂt
 
vÆue
 );

870 
GLAPI
 
GLAPIENTRY
 
glM©rixMode
–
GLíum
 
mode
 );

872 
GLAPI
 
GLAPIENTRY
 
glOπho
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

873 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

874 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

876 
GLAPI
 
GLAPIENTRY
 
glFru°um
–
GLdoubÀ
 
À·
, GLdoubÀ 
right
,

877 
GLdoubÀ
 
bŸtom
, GLdoubÀ 
t›
,

878 
GLdoubÀ
 
√¨_vÆ
, GLdoubÀ 
Ár_vÆ
 );

880 
GLAPI
 
GLAPIENTRY
 
glVõwp‹t
–
GLöt
 
x
, GLöà
y
,

881 
GLsizei
 
width
, GLsizeò
height
 );

883 
GLAPI
 
GLAPIENTRY
 
glPushM©rix
( );

885 
GLAPI
 
GLAPIENTRY
 
glP›M©rix
( );

887 
GLAPI
 
GLAPIENTRY
 
glLﬂdIdítôy
( );

889 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

890 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

892 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixd
–c⁄° 
GLdoubÀ
 *
m
 );

893 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixf
–c⁄° 
GLÊﬂt
 *
m
 );

895 
GLAPI
 
GLAPIENTRY
 
glRŸ©ed
–
GLdoubÀ
 
™gÀ
,

896 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

897 
GLAPI
 
GLAPIENTRY
 
glRŸ©ef
–
GLÊﬂt
 
™gÀ
,

898 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

900 
GLAPI
 
GLAPIENTRY
 
glSˇÀd
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

901 
GLAPI
 
GLAPIENTRY
 
glSˇÀf
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

903 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ed
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

904 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ef
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

911 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsLi°
–
GLuöt
 
li°
 );

913 
GLAPI
 
GLAPIENTRY
 
glDñëeLi°s
–
GLuöt
 
li°
, 
GLsizei
 
ønge
 );

915 
GLAPI
 
GLuöt
 
GLAPIENTRY
 
glGíLi°s
–
GLsizei
 
ønge
 );

917 
GLAPI
 
GLAPIENTRY
 
glNewLi°
–
GLuöt
 
li°
, 
GLíum
 
mode
 );

919 
GLAPI
 
GLAPIENTRY
 
glEndLi°
( );

921 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°
–
GLuöt
 
li°
 );

923 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°s
–
GLsizei
 
n
, 
GLíum
 
ty≥
,

924 c⁄° 
GLvoid
 *
li°s
 );

926 
GLAPI
 
GLAPIENTRY
 
glLi°Ba£
–
GLuöt
 
ba£
 );

933 
GLAPI
 
GLAPIENTRY
 
glBegö
–
GLíum
 
mode
 );

935 
GLAPI
 
GLAPIENTRY
 
glEnd
( );

938 
GLAPI
 
GLAPIENTRY
 
glVîãx2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

939 
GLAPI
 
GLAPIENTRY
 
glVîãx2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

940 
GLAPI
 
GLAPIENTRY
 
glVîãx2i
–
GLöt
 
x
, GLöà
y
 );

941 
GLAPI
 
GLAPIENTRY
 
glVîãx2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

943 
GLAPI
 
GLAPIENTRY
 
glVîãx3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

944 
GLAPI
 
GLAPIENTRY
 
glVîãx3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

945 
GLAPI
 
GLAPIENTRY
 
glVîãx3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

946 
GLAPI
 
GLAPIENTRY
 
glVîãx3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

948 
GLAPI
 
GLAPIENTRY
 
glVîãx4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

949 
GLAPI
 
GLAPIENTRY
 
glVîãx4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

950 
GLAPI
 
GLAPIENTRY
 
glVîãx4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

951 
GLAPI
 
GLAPIENTRY
 
glVîãx4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

953 
GLAPI
 
GLAPIENTRY
 
glVîãx2dv
–c⁄° 
GLdoubÀ
 *
v
 );

954 
GLAPI
 
GLAPIENTRY
 
glVîãx2fv
–c⁄° 
GLÊﬂt
 *
v
 );

955 
GLAPI
 
GLAPIENTRY
 
glVîãx2iv
–c⁄° 
GLöt
 *
v
 );

956 
GLAPI
 
GLAPIENTRY
 
glVîãx2sv
–c⁄° 
GLsh‹t
 *
v
 );

958 
GLAPI
 
GLAPIENTRY
 
glVîãx3dv
–c⁄° 
GLdoubÀ
 *
v
 );

959 
GLAPI
 
GLAPIENTRY
 
glVîãx3fv
–c⁄° 
GLÊﬂt
 *
v
 );

960 
GLAPI
 
GLAPIENTRY
 
glVîãx3iv
–c⁄° 
GLöt
 *
v
 );

961 
GLAPI
 
GLAPIENTRY
 
glVîãx3sv
–c⁄° 
GLsh‹t
 *
v
 );

963 
GLAPI
 
GLAPIENTRY
 
glVîãx4dv
–c⁄° 
GLdoubÀ
 *
v
 );

964 
GLAPI
 
GLAPIENTRY
 
glVîãx4fv
–c⁄° 
GLÊﬂt
 *
v
 );

965 
GLAPI
 
GLAPIENTRY
 
glVîãx4iv
–c⁄° 
GLöt
 *
v
 );

966 
GLAPI
 
GLAPIENTRY
 
glVîãx4sv
–c⁄° 
GLsh‹t
 *
v
 );

969 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3b
–
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
 );

970 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3d
–
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
 );

971 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3f
–
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
 );

972 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3i
–
GLöt
 
nx
, GLöà
ny
, GLöà
nz
 );

973 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3s
–
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
 );

975 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3bv
–c⁄° 
GLbyã
 *
v
 );

976 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3dv
–c⁄° 
GLdoubÀ
 *
v
 );

977 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3fv
–c⁄° 
GLÊﬂt
 *
v
 );

978 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3iv
–c⁄° 
GLöt
 *
v
 );

979 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3sv
–c⁄° 
GLsh‹t
 *
v
 );

982 
GLAPI
 
GLAPIENTRY
 
glIndexd
–
GLdoubÀ
 
c
 );

983 
GLAPI
 
GLAPIENTRY
 
glIndexf
–
GLÊﬂt
 
c
 );

984 
GLAPI
 
GLAPIENTRY
 
glIndexi
–
GLöt
 
c
 );

985 
GLAPI
 
GLAPIENTRY
 
glIndexs
–
GLsh‹t
 
c
 );

986 
GLAPI
 
GLAPIENTRY
 
glIndexub
–
GLubyã
 
c
 );

988 
GLAPI
 
GLAPIENTRY
 
glIndexdv
–c⁄° 
GLdoubÀ
 *
c
 );

989 
GLAPI
 
GLAPIENTRY
 
glIndexfv
–c⁄° 
GLÊﬂt
 *
c
 );

990 
GLAPI
 
GLAPIENTRY
 
glIndexiv
–c⁄° 
GLöt
 *
c
 );

991 
GLAPI
 
GLAPIENTRY
 
glIndexsv
–c⁄° 
GLsh‹t
 *
c
 );

992 
GLAPI
 
GLAPIENTRY
 
glIndexubv
–c⁄° 
GLubyã
 *
c
 );

994 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3b
–
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
 );

995 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
 );

996 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
 );

997 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3i
–
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
 );

998 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
 );

999 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ub
–
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
 );

1000 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ui
–
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
 );

1001 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3us
–
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
 );

1003 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4b
–
GLbyã
 
ªd
, GLbyã 
gªí
,

1004 
GLbyã
 
blue
, GLbyã 
Æpha
 );

1005 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4d
–
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
,

1006 
GLdoubÀ
 
blue
, GLdoubÀ 
Æpha
 );

1007 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4f
–
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
,

1008 
GLÊﬂt
 
blue
, GLÊﬂà
Æpha
 );

1009 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4i
–
GLöt
 
ªd
, GLöà
gªí
,

1010 
GLöt
 
blue
, GLöà
Æpha
 );

1011 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4s
–
GLsh‹t
 
ªd
, GLsh‹à
gªí
,

1012 
GLsh‹t
 
blue
, GLsh‹à
Æpha
 );

1013 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ub
–
GLubyã
 
ªd
, GLubyã 
gªí
,

1014 
GLubyã
 
blue
, GLubyã 
Æpha
 );

1015 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ui
–
GLuöt
 
ªd
, GLuöà
gªí
,

1016 
GLuöt
 
blue
, GLuöà
Æpha
 );

1017 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4us
–
GLush‹t
 
ªd
, GLush‹à
gªí
,

1018 
GLush‹t
 
blue
, GLush‹à
Æpha
 );

1021 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3bv
–c⁄° 
GLbyã
 *
v
 );

1022 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1023 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1024 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3iv
–c⁄° 
GLöt
 *
v
 );

1025 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3sv
–c⁄° 
GLsh‹t
 *
v
 );

1026 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ubv
–c⁄° 
GLubyã
 *
v
 );

1027 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3uiv
–c⁄° 
GLuöt
 *
v
 );

1028 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3usv
–c⁄° 
GLush‹t
 *
v
 );

1030 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4bv
–c⁄° 
GLbyã
 *
v
 );

1031 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1032 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1033 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4iv
–c⁄° 
GLöt
 *
v
 );

1034 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4sv
–c⁄° 
GLsh‹t
 *
v
 );

1035 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ubv
–c⁄° 
GLubyã
 *
v
 );

1036 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4uiv
–c⁄° 
GLuöt
 *
v
 );

1037 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4usv
–c⁄° 
GLush‹t
 *
v
 );

1040 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1d
–
GLdoubÀ
 
s
 );

1041 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1f
–
GLÊﬂt
 
s
 );

1042 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1i
–
GLöt
 
s
 );

1043 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1s
–
GLsh‹t
 
s
 );

1045 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1046 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2f
–
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1047 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2i
–
GLöt
 
s
, GLöà
t
 );

1048 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2s
–
GLsh‹t
 
s
, GLsh‹à
t
 );

1050 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1051 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1052 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3i
–
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1053 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1055 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4d
–
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1056 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4f
–
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1057 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4i
–
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1058 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4s
–
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1060 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1dv
–c⁄° 
GLdoubÀ
 *
v
 );

1061 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1fv
–c⁄° 
GLÊﬂt
 *
v
 );

1062 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1iv
–c⁄° 
GLöt
 *
v
 );

1063 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1sv
–c⁄° 
GLsh‹t
 *
v
 );

1065 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1066 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1067 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2iv
–c⁄° 
GLöt
 *
v
 );

1068 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2sv
–c⁄° 
GLsh‹t
 *
v
 );

1070 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1071 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1072 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3iv
–c⁄° 
GLöt
 *
v
 );

1073 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3sv
–c⁄° 
GLsh‹t
 *
v
 );

1075 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1076 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1077 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4iv
–c⁄° 
GLöt
 *
v
 );

1078 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4sv
–c⁄° 
GLsh‹t
 *
v
 );

1081 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
 );

1082 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2f
–
GLÊﬂt
 
x
, GLÊﬂà
y
 );

1083 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2i
–
GLöt
 
x
, GLöà
y
 );

1084 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2s
–
GLsh‹t
 
x
, GLsh‹à
y
 );

1086 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
 );

1087 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
 );

1088 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3i
–
GLöt
 
x
, GLöà
y
, GLöà
z
 );

1089 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
 );

1091 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4d
–
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
 );

1092 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4f
–
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
 );

1093 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4i
–
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
 );

1094 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4s
–
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
 );

1096 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2dv
–c⁄° 
GLdoubÀ
 *
v
 );

1097 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2fv
–c⁄° 
GLÊﬂt
 *
v
 );

1098 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2iv
–c⁄° 
GLöt
 *
v
 );

1099 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2sv
–c⁄° 
GLsh‹t
 *
v
 );

1101 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3dv
–c⁄° 
GLdoubÀ
 *
v
 );

1102 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3fv
–c⁄° 
GLÊﬂt
 *
v
 );

1103 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3iv
–c⁄° 
GLöt
 *
v
 );

1104 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3sv
–c⁄° 
GLsh‹t
 *
v
 );

1106 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4dv
–c⁄° 
GLdoubÀ
 *
v
 );

1107 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4fv
–c⁄° 
GLÊﬂt
 *
v
 );

1108 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4iv
–c⁄° 
GLöt
 *
v
 );

1109 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4sv
–c⁄° 
GLsh‹t
 *
v
 );

1112 
GLAPI
 
GLAPIENTRY
 
glRe˘d
–
GLdoubÀ
 
x1
, GLdoubÀ 
y1
, GLdoubÀ 
x2
, GLdoubÀ 
y2
 );

1113 
GLAPI
 
GLAPIENTRY
 
glRe˘f
–
GLÊﬂt
 
x1
, GLÊﬂà
y1
, GLÊﬂà
x2
, GLÊﬂà
y2
 );

1114 
GLAPI
 
GLAPIENTRY
 
glRe˘i
–
GLöt
 
x1
, GLöà
y1
, GLöà
x2
, GLöà
y2
 );

1115 
GLAPI
 
GLAPIENTRY
 
glRe˘s
–
GLsh‹t
 
x1
, GLsh‹à
y1
, GLsh‹à
x2
, GLsh‹à
y2
 );

1118 
GLAPI
 
GLAPIENTRY
 
glRe˘dv
–c⁄° 
GLdoubÀ
 *
v1
, c⁄° GLdoubÀ *
v2
 );

1119 
GLAPI
 
GLAPIENTRY
 
glRe˘fv
–c⁄° 
GLÊﬂt
 *
v1
, c⁄° GLÊﬂà*
v2
 );

1120 
GLAPI
 
GLAPIENTRY
 
glRe˘iv
–c⁄° 
GLöt
 *
v1
, c⁄° GLöà*
v2
 );

1121 
GLAPI
 
GLAPIENTRY
 
glRe˘sv
–c⁄° 
GLsh‹t
 *
v1
, c⁄° GLsh‹à*
v2
 );

1128 
GLAPI
 
GLAPIENTRY
 
glVîãxPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1129 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1131 
GLAPI
 
GLAPIENTRY
 
glN‹mÆPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1132 c⁄° 
GLvoid
 *
±r
 );

1134 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Poöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1135 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1137 
GLAPI
 
GLAPIENTRY
 
glIndexPoöãr
–
GLíum
 
ty≥
, 
GLsizei
 
°ride
,

1138 c⁄° 
GLvoid
 *
±r
 );

1140 
GLAPI
 
GLAPIENTRY
 
glTexCo‹dPoöãr
–
GLöt
 
size
, 
GLíum
 
ty≥
,

1141 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1143 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgPoöãr
–
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
±r
 );

1145 
GLAPI
 
GLAPIENTRY
 
glGëPoöãrv
–
GLíum
 
≤ame
, 
GLvoid
 **
∑øms
 );

1147 
GLAPI
 
GLAPIENTRY
 
glAºayEÀmít
–
GLöt
 
i
 );

1149 
GLAPI
 
GLAPIENTRY
 
glDøwAºays
–
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
 );

1151 
GLAPI
 
GLAPIENTRY
 
glDøwEÀmíts
–
GLíum
 
mode
, 
GLsizei
 
cou¡
,

1152 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1154 
GLAPI
 
GLAPIENTRY
 
glI¡îÀavedAºays
–
GLíum
 
f‹m©
, 
GLsizei
 
°ride
,

1155 c⁄° 
GLvoid
 *
poöãr
 );

1161 
GLAPI
 
GLAPIENTRY
 
glShadeModñ
–
GLíum
 
mode
 );

1163 
GLAPI
 
GLAPIENTRY
 
glLightf
–
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1164 
GLAPI
 
GLAPIENTRY
 
glLighti
–
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1165 
GLAPI
 
GLAPIENTRY
 
glLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1166 c⁄° 
GLÊﬂt
 *
∑øms
 );

1167 
GLAPI
 
GLAPIENTRY
 
glLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1168 c⁄° 
GLöt
 *
∑øms
 );

1170 
GLAPI
 
GLAPIENTRY
 
glGëLightfv
–
GLíum
 
light
, GLíum 
≤ame
,

1171 
GLÊﬂt
 *
∑øms
 );

1172 
GLAPI
 
GLAPIENTRY
 
glGëLightiv
–
GLíum
 
light
, GLíum 
≤ame
,

1173 
GLöt
 *
∑øms
 );

1175 
GLAPI
 
GLAPIENTRY
 
glLightModñf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1176 
GLAPI
 
GLAPIENTRY
 
glLightModñi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1177 
GLAPI
 
GLAPIENTRY
 
glLightModñfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1178 
GLAPI
 
GLAPIENTRY
 
glLightModñiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1180 
GLAPI
 
GLAPIENTRY
 
glM©îülf
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1181 
GLAPI
 
GLAPIENTRY
 
glM©îüli
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1182 
GLAPI
 
GLAPIENTRY
 
glM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1183 
GLAPI
 
GLAPIENTRY
 
glM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1185 
GLAPI
 
GLAPIENTRY
 
glGëM©îülfv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1186 
GLAPI
 
GLAPIENTRY
 
glGëM©îüliv
–
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1188 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹M©îül
–
GLíum
 
Á˚
, GLíum 
mode
 );

1195 
GLAPI
 
GLAPIENTRY
 
glPixñZoom
–
GLÊﬂt
 
xÁ˘‹
, GLÊﬂà
yÁ˘‹
 );

1197 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ef
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1198 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ei
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1200 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„rf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1201 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„ri
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1203 
GLAPI
 
GLAPIENTRY
 
glPixñM≠fv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1204 c⁄° 
GLÊﬂt
 *
vÆues
 );

1205 
GLAPI
 
GLAPIENTRY
 
glPixñM≠uiv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1206 c⁄° 
GLuöt
 *
vÆues
 );

1207 
GLAPI
 
GLAPIENTRY
 
glPixñM≠usv
–
GLíum
 
m≠
, 
GLsizei
 
m≠size
,

1208 c⁄° 
GLush‹t
 *
vÆues
 );

1210 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠fv
–
GLíum
 
m≠
, 
GLÊﬂt
 *
vÆues
 );

1211 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠uiv
–
GLíum
 
m≠
, 
GLuöt
 *
vÆues
 );

1212 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠usv
–
GLíum
 
m≠
, 
GLush‹t
 *
vÆues
 );

1214 
GLAPI
 
GLAPIENTRY
 
glBôm≠
–
GLsizei
 
width
, GLsizeò
height
,

1215 
GLÊﬂt
 
x‹ig
, GLÊﬂà
y‹ig
,

1216 
GLÊﬂt
 
xmove
, GLÊﬂà
ymove
,

1217 c⁄° 
GLubyã
 *
bôm≠
 );

1219 
GLAPI
 
GLAPIENTRY
 
glRódPixñs
–
GLöt
 
x
, GLöà
y
,

1220 
GLsizei
 
width
, GLsizeò
height
,

1221 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1222 
GLvoid
 *
pixñs
 );

1224 
GLAPI
 
GLAPIENTRY
 
glDøwPixñs
–
GLsizei
 
width
, GLsizeò
height
,

1225 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1226 c⁄° 
GLvoid
 *
pixñs
 );

1228 
GLAPI
 
GLAPIENTRY
 
glC›yPixñs
–
GLöt
 
x
, GLöà
y
,

1229 
GLsizei
 
width
, GLsizeò
height
,

1230 
GLíum
 
ty≥
 );

1236 
GLAPI
 
GLAPIENTRY
 
glSãncûFunc
–
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
 );

1238 
GLAPI
 
GLAPIENTRY
 
glSãncûMask
–
GLuöt
 
mask
 );

1240 
GLAPI
 
GLAPIENTRY
 
glSãncûOp
–
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
 );

1242 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Sãncû
–
GLöt
 
s
 );

1250 
GLAPI
 
GLAPIENTRY
 
glTexGíd
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
 );

1251 
GLAPI
 
GLAPIENTRY
 
glTexGíf
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1252 
GLAPI
 
GLAPIENTRY
 
glTexGíi
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1254 
GLAPI
 
GLAPIENTRY
 
glTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
 );

1255 
GLAPI
 
GLAPIENTRY
 
glTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1256 
GLAPI
 
GLAPIENTRY
 
glTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1258 
GLAPI
 
GLAPIENTRY
 
glGëTexGídv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
 );

1259 
GLAPI
 
GLAPIENTRY
 
glGëTexGífv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1260 
GLAPI
 
GLAPIENTRY
 
glGëTexGíiv
–
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1263 
GLAPI
 
GLAPIENTRY
 
glTexEnvf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1264 
GLAPI
 
GLAPIENTRY
 
glTexEnvi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1266 
GLAPI
 
GLAPIENTRY
 
glTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1267 
GLAPI
 
GLAPIENTRY
 
glTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1269 
GLAPI
 
GLAPIENTRY
 
glGëTexEnvfv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1270 
GLAPI
 
GLAPIENTRY
 
glGëTexEnviv
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
 );

1273 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1274 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
 );

1276 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1277 c⁄° 
GLÊﬂt
 *
∑øms
 );

1278 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1279 c⁄° 
GLöt
 *
∑øms
 );

1281 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîfv
–
GLíum
 
èrgë
,

1282 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1283 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîiv
–
GLíum
 
èrgë
,

1284 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1286 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîfv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1287 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
 );

1288 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîiv
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1289 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
 );

1292 
GLAPI
 
GLAPIENTRY
 
glTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1293 
GLöt
 
öã∫ÆF‹m©
,

1294 
GLsizei
 
width
, 
GLöt
 
b‹dî
,

1295 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1296 c⁄° 
GLvoid
 *
pixñs
 );

1298 
GLAPI
 
GLAPIENTRY
 
glTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1299 
GLöt
 
öã∫ÆF‹m©
,

1300 
GLsizei
 
width
, GLsizeò
height
,

1301 
GLöt
 
b‹dî
, 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1302 c⁄° 
GLvoid
 *
pixñs
 );

1304 
GLAPI
 
GLAPIENTRY
 
glGëTexImage
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1305 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1306 
GLvoid
 *
pixñs
 );

1311 
GLAPI
 
GLAPIENTRY
 
glGíTextuªs
–
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
 );

1313 
GLAPI
 
GLAPIENTRY
 
glDñëeTextuªs
–
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

1315 
GLAPI
 
GLAPIENTRY
 
glBödTextuª
–
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
 );

1317 
GLAPI
 
GLAPIENTRY
 
glPri‹ôizeTextuªs
–
GLsizei
 
n
,

1318 c⁄° 
GLuöt
 *
ãxtuªs
,

1319 c⁄° 
GL˛ampf
 *
¥i‹ôõs
 );

1321 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glAªTextuªsResidít
–
GLsizei
 
n
,

1322 c⁄° 
GLuöt
 *
ãxtuªs
,

1323 
GLboﬁón
 *
ªsidí˚s
 );

1325 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsTextuª
–
GLuöt
 
ãxtuª
 );

1328 
GLAPI
 
GLAPIENTRY
 
glTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1329 
GLöt
 
xoff£t
,

1330 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1331 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
 );

1334 
GLAPI
 
GLAPIENTRY
 
glTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1335 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1336 
GLsizei
 
width
, GLsizeò
height
,

1337 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1338 c⁄° 
GLvoid
 *
pixñs
 );

1341 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1342 
GLíum
 
öã∫Æf‹m©
,

1343 
GLöt
 
x
, GLöà
y
,

1344 
GLsizei
 
width
, 
GLöt
 
b‹dî
 );

1347 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1348 
GLíum
 
öã∫Æf‹m©
,

1349 
GLöt
 
x
, GLöà
y
,

1350 
GLsizei
 
width
, GLsizeò
height
,

1351 
GLöt
 
b‹dî
 );

1354 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1355 
GLöt
 
xoff£t
, GLöà
x
, GLöà
y
,

1356 
GLsizei
 
width
 );

1359 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1360 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1361 
GLöt
 
x
, GLöà
y
,

1362 
GLsizei
 
width
, GLsizeò
height
 );

1369 
GLAPI
 
GLAPIENTRY
 
glM≠1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1370 
GLöt
 
°ride
,

1371 
GLöt
 
‹dî
, c⁄° 
GLdoubÀ
 *
poöts
 );

1372 
GLAPI
 
GLAPIENTRY
 
glM≠1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1373 
GLöt
 
°ride
,

1374 
GLöt
 
‹dî
, c⁄° 
GLÊﬂt
 *
poöts
 );

1376 
GLAPI
 
GLAPIENTRY
 
glM≠2d
–
GLíum
 
èrgë
,

1377 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1378 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1379 c⁄° 
GLdoubÀ
 *
poöts
 );

1380 
GLAPI
 
GLAPIENTRY
 
glM≠2f
–
GLíum
 
èrgë
,

1381 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
,

1382 
GLÊﬂt
 
v1
, GLÊﬂà
v2
, 
GLöt
 
v°ride
, GLöà
v‹dî
,

1383 c⁄° 
GLÊﬂt
 *
poöts
 );

1385 
GLAPI
 
GLAPIENTRY
 
glGëM≠dv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLdoubÀ
 *
v
 );

1386 
GLAPI
 
GLAPIENTRY
 
glGëM≠fv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLÊﬂt
 *
v
 );

1387 
GLAPI
 
GLAPIENTRY
 
glGëM≠iv
–
GLíum
 
èrgë
, GLíum 
quîy
, 
GLöt
 *
v
 );

1389 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1d
–
GLdoubÀ
 
u
 );

1390 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1f
–
GLÊﬂt
 
u
 );

1392 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1dv
–c⁄° 
GLdoubÀ
 *
u
 );

1393 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1fv
–c⁄° 
GLÊﬂt
 *
u
 );

1395 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2d
–
GLdoubÀ
 
u
, GLdoubÀ 
v
 );

1396 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2f
–
GLÊﬂt
 
u
, GLÊﬂà
v
 );

1398 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2dv
–c⁄° 
GLdoubÀ
 *
u
 );

1399 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2fv
–c⁄° 
GLÊﬂt
 *
u
 );

1401 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
 );

1402 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
 );

1404 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2d
–
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
,

1405 
GLöt
 
vn
, 
GLdoubÀ
 
v1
, GLdoubÀ 
v2
 );

1406 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2f
–
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
,

1407 
GLöt
 
vn
, 
GLÊﬂt
 
v1
, GLÊﬂà
v2
 );

1409 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt1
–
GLöt
 
i
 );

1411 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt2
–
GLöt
 
i
, GLöà
j
 );

1413 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh1
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
 );

1415 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh2
–
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
, GLöà
j1
, GLöà
j2
 );

1422 
GLAPI
 
GLAPIENTRY
 
glFogf
–
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
 );

1424 
GLAPI
 
GLAPIENTRY
 
glFogi
–
GLíum
 
≤ame
, 
GLöt
 
∑øm
 );

1426 
GLAPI
 
GLAPIENTRY
 
glFogfv
–
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
 );

1428 
GLAPI
 
GLAPIENTRY
 
glFogiv
–
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
 );

1435 
GLAPI
 
GLAPIENTRY
 
glFìdbackBuf„r
–
GLsizei
 
size
, 
GLíum
 
ty≥
, 
GLÊﬂt
 *
buf„r
 );

1437 
GLAPI
 
GLAPIENTRY
 
glPassThrough
–
GLÊﬂt
 
tokí
 );

1439 
GLAPI
 
GLAPIENTRY
 
glSñe˘Buf„r
–
GLsizei
 
size
, 
GLuöt
 *
buf„r
 );

1441 
GLAPI
 
GLAPIENTRY
 
glInôNames
( );

1443 
GLAPI
 
GLAPIENTRY
 
glLﬂdName
–
GLuöt
 
«me
 );

1445 
GLAPI
 
GLAPIENTRY
 
glPushName
–
GLuöt
 
«me
 );

1447 
GLAPI
 
GLAPIENTRY
 
glP›Name
( );

1455 
	#GL_RESCALE_NORMAL
 0x803A

	)

1456 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

1457 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

1458 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

1459 
	#GL_BGR
 0x80E0

	)

1460 
	#GL_BGRA
 0x80E1

	)

1461 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

1462 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

1463 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

1464 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

1465 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

1466 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

1467 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

1468 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

1469 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

1470 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

1471 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

1472 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

1473 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

1474 
	#GL_SINGLE_COLOR
 0x81F9

	)

1475 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

1476 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

1477 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

1478 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

1479 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

1480 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

1481 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

1482 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

1483 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

1484 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

1485 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

1486 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

1487 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

1488 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

1489 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

1490 
	#GL_TEXTURE_3D
 0x806F

	)

1491 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

1492 
	#GL_TEXTURE_DEPTH
 0x8071

	)

1493 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

1494 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

1495 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

1497 
GLAPI
 
GLAPIENTRY
 
glDøwR™geEÀmíts
–
GLíum
 
mode
, 
GLuöt
 
°¨t
,

1498 
GLuöt
 
íd
, 
GLsizei
 
cou¡
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
 );

1500 
GLAPI
 
GLAPIENTRY
 
glTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1501 
GLöt
 
öã∫ÆF‹m©
,

1502 
GLsizei
 
width
, GLsizeò
height
,

1503 
GLsizei
 
dïth
, 
GLöt
 
b‹dî
,

1504 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1505 c⁄° 
GLvoid
 *
pixñs
 );

1507 
GLAPI
 
GLAPIENTRY
 
glTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1508 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1509 
GLöt
 
zoff£t
, 
GLsizei
 
width
,

1510 
GLsizei
 
height
, GLsizeò
dïth
,

1511 
GLíum
 
f‹m©
,

1512 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1514 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
,

1515 
GLöt
 
xoff£t
, GLöà
yoff£t
,

1516 
GLöt
 
zoff£t
, GLöà
x
,

1517 
GLöt
 
y
, 
GLsizei
 
width
,

1518 
GLsizei
 
height
 );

1520 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

1521 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1522 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1523 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1530 
	#GL_CONSTANT_COLOR
 0x8001

	)

1531 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

1532 
	#GL_CONSTANT_ALPHA
 0x8003

	)

1533 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

1534 
	#GL_COLOR_TABLE
 0x80D0

	)

1535 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

1536 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

1537 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

1538 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

1539 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

1540 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

1541 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

1542 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

1543 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

1544 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

1545 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

1546 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

1547 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

1548 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

1549 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

1550 
	#GL_CONVOLUTION_1D
 0x8010

	)

1551 
	#GL_CONVOLUTION_2D
 0x8011

	)

1552 
	#GL_SEPARABLE_2D
 0x8012

	)

1553 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

1554 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

1555 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

1556 
	#GL_REDUCE
 0x8016

	)

1557 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

1558 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

1559 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

1560 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

1561 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

1562 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

1563 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

1564 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

1565 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

1566 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

1567 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

1568 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

1569 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

1570 
	#GL_CONSTANT_BORDER
 0x8151

	)

1571 
	#GL_REPLICATE_BORDER
 0x8153

	)

1572 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

1573 
	#GL_COLOR_MATRIX
 0x80B1

	)

1574 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

1575 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

1576 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

1577 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

1578 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

1579 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

1580 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

1581 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

1582 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

1583 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

1584 
	#GL_HISTOGRAM
 0x8024

	)

1585 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

1586 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

1587 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

1588 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

1589 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

1590 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

1591 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

1592 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

1593 
	#GL_HISTOGRAM_SINK
 0x802D

	)

1594 
	#GL_MINMAX
 0x802E

	)

1595 
	#GL_MINMAX_FORMAT
 0x802F

	)

1596 
	#GL_MINMAX_SINK
 0x8030

	)

1597 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

1598 
	#GL_BLEND_EQUATION
 0x8009

	)

1599 
	#GL_MIN
 0x8007

	)

1600 
	#GL_MAX
 0x8008

	)

1601 
	#GL_FUNC_ADD
 0x8006

	)

1602 
	#GL_FUNC_SUBTRACT
 0x800A

	)

1603 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

1604 
	#GL_BLEND_COLOR
 0x8005

	)

1607 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1608 
GLsizei
 
width
, 
GLíum
 
f‹m©
,

1609 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
èbÀ
 );

1611 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹SubTabÀ
–
GLíum
 
èrgë
,

1612 
GLsizei
 
°¨t
, GLsizeò
cou¡
,

1613 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1614 c⁄° 
GLvoid
 *
d©a
 );

1616 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîiv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1617 c⁄° 
GLöt
 *
∑øms
);

1619 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹TabÀP¨amëîfv
(
GLíum
 
èrgë
, GLíum 
≤ame
,

1620 c⁄° 
GLÊﬂt
 *
∑øms
);

1622 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹SubTabÀ
–
GLíum
 
èrgë
, 
GLsizei
 
°¨t
,

1623 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1625 
GLAPI
 
GLAPIENTRY
 
glC›yCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1626 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1628 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀ
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1629 
GLíum
 
ty≥
, 
GLvoid
 *
èbÀ
 );

1631 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1632 
GLÊﬂt
 *
∑øms
 );

1634 
GLAPI
 
GLAPIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1635 
GLöt
 *
∑øms
 );

1637 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄
–
GLíum
 
mode
 );

1639 
GLAPI
 
GLAPIENTRY
 
glBÀndCﬁ‹
–
GL˛ampf
 
ªd
, GL˛amp‡
gªí
,

1640 
GL˛ampf
 
blue
, GL˛amp‡
Æpha
 );

1642 
GLAPI
 
GLAPIENTRY
 
glHi°ogøm
–
GLíum
 
èrgë
, 
GLsizei
 
width
,

1643 
GLíum
 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
 );

1645 
GLAPI
 
GLAPIENTRY
 
glRe£tHi°ogøm
–
GLíum
 
èrgë
 );

1647 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogøm
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1648 
GLíum
 
f‹m©
, GLíum 
ty≥
,

1649 
GLvoid
 *
vÆues
 );

1651 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1652 
GLÊﬂt
 *
∑øms
 );

1654 
GLAPI
 
GLAPIENTRY
 
glGëHi°ogømP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1655 
GLöt
 *
∑øms
 );

1657 
GLAPI
 
GLAPIENTRY
 
glMömax
–
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
,

1658 
GLboﬁón
 
sök
 );

1660 
GLAPI
 
GLAPIENTRY
 
glRe£tMömax
–
GLíum
 
èrgë
 );

1662 
GLAPI
 
GLAPIENTRY
 
glGëMömax
–
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
,

1663 
GLíum
 
f‹m©
, GLíum 
ty≥s
,

1664 
GLvoid
 *
vÆues
 );

1666 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1667 
GLÊﬂt
 *
∑øms
 );

1669 
GLAPI
 
GLAPIENTRY
 
glGëMömaxP¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1670 
GLöt
 *
∑øms
 );

1672 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1673 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
,

1674 c⁄° 
GLvoid
 *
image
 );

1676 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1677 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1678 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
image
 );

1680 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1681 
GLÊﬂt
 
∑øms
 );

1683 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1684 c⁄° 
GLÊﬂt
 *
∑øms
 );

1686 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1687 
GLöt
 
∑øms
 );

1689 
GLAPI
 
GLAPIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1690 c⁄° 
GLöt
 *
∑øms
 );

1692 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
–
GLíum
 
èrgë
,

1693 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
 );

1695 
GLAPI
 
GLAPIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
–
GLíum
 
èrgë
,

1696 
GLíum
 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
,

1697 
GLsizei
 
height
);

1699 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1700 
GLíum
 
ty≥
, 
GLvoid
 *
image
 );

1702 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1703 
GLÊﬂt
 *
∑øms
 );

1705 
GLAPI
 
GLAPIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
–
GLíum
 
èrgë
, GLíum 
≤ame
,

1706 
GLöt
 *
∑øms
 );

1708 
GLAPI
 
GLAPIENTRY
 
glSï¨abÀFûãr2D
–
GLíum
 
èrgë
,

1709 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
,

1710 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
row
, c⁄° GLvoid *
cﬁumn
 );

1712 
GLAPI
 
GLAPIENTRY
 
glGëSï¨abÀFûãr
–
GLíum
 
èrgë
, GLíum 
f‹m©
,

1713 
GLíum
 
ty≥
, 
GLvoid
 *
row
, GLvoid *
cﬁumn
, GLvoid *
•™
 );

1723 
	#GL_TEXTURE0
 0x84C0

	)

1724 
	#GL_TEXTURE1
 0x84C1

	)

1725 
	#GL_TEXTURE2
 0x84C2

	)

1726 
	#GL_TEXTURE3
 0x84C3

	)

1727 
	#GL_TEXTURE4
 0x84C4

	)

1728 
	#GL_TEXTURE5
 0x84C5

	)

1729 
	#GL_TEXTURE6
 0x84C6

	)

1730 
	#GL_TEXTURE7
 0x84C7

	)

1731 
	#GL_TEXTURE8
 0x84C8

	)

1732 
	#GL_TEXTURE9
 0x84C9

	)

1733 
	#GL_TEXTURE10
 0x84CA

	)

1734 
	#GL_TEXTURE11
 0x84CB

	)

1735 
	#GL_TEXTURE12
 0x84CC

	)

1736 
	#GL_TEXTURE13
 0x84CD

	)

1737 
	#GL_TEXTURE14
 0x84CE

	)

1738 
	#GL_TEXTURE15
 0x84CF

	)

1739 
	#GL_TEXTURE16
 0x84D0

	)

1740 
	#GL_TEXTURE17
 0x84D1

	)

1741 
	#GL_TEXTURE18
 0x84D2

	)

1742 
	#GL_TEXTURE19
 0x84D3

	)

1743 
	#GL_TEXTURE20
 0x84D4

	)

1744 
	#GL_TEXTURE21
 0x84D5

	)

1745 
	#GL_TEXTURE22
 0x84D6

	)

1746 
	#GL_TEXTURE23
 0x84D7

	)

1747 
	#GL_TEXTURE24
 0x84D8

	)

1748 
	#GL_TEXTURE25
 0x84D9

	)

1749 
	#GL_TEXTURE26
 0x84DA

	)

1750 
	#GL_TEXTURE27
 0x84DB

	)

1751 
	#GL_TEXTURE28
 0x84DC

	)

1752 
	#GL_TEXTURE29
 0x84DD

	)

1753 
	#GL_TEXTURE30
 0x84DE

	)

1754 
	#GL_TEXTURE31
 0x84DF

	)

1755 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

1756 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

1757 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

1759 
	#GL_NORMAL_MAP
 0x8511

	)

1760 
	#GL_REFLECTION_MAP
 0x8512

	)

1761 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

1762 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

1763 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

1764 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

1765 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

1766 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

1767 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

1768 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

1769 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

1770 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

1772 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

1773 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

1774 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

1775 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

1776 
	#GL_COMPRESSED_RGB
 0x84ED

	)

1777 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

1778 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

1779 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

1780 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

1781 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

1782 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

1784 
	#GL_MULTISAMPLE
 0x809D

	)

1785 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

1786 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

1787 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

1788 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

1789 
	#GL_SAMPLES
 0x80A9

	)

1790 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

1791 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

1792 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

1794 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

1795 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

1796 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

1797 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

1799 
	#GL_COMBINE
 0x8570

	)

1800 
	#GL_COMBINE_RGB
 0x8571

	)

1801 
	#GL_COMBINE_ALPHA
 0x8572

	)

1802 
	#GL_SOURCE0_RGB
 0x8580

	)

1803 
	#GL_SOURCE1_RGB
 0x8581

	)

1804 
	#GL_SOURCE2_RGB
 0x8582

	)

1805 
	#GL_SOURCE0_ALPHA
 0x8588

	)

1806 
	#GL_SOURCE1_ALPHA
 0x8589

	)

1807 
	#GL_SOURCE2_ALPHA
 0x858A

	)

1808 
	#GL_OPERAND0_RGB
 0x8590

	)

1809 
	#GL_OPERAND1_RGB
 0x8591

	)

1810 
	#GL_OPERAND2_RGB
 0x8592

	)

1811 
	#GL_OPERAND0_ALPHA
 0x8598

	)

1812 
	#GL_OPERAND1_ALPHA
 0x8599

	)

1813 
	#GL_OPERAND2_ALPHA
 0x859A

	)

1814 
	#GL_RGB_SCALE
 0x8573

	)

1815 
	#GL_ADD_SIGNED
 0x8574

	)

1816 
	#GL_INTERPOLATE
 0x8575

	)

1817 
	#GL_SUBTRACT
 0x84E7

	)

1818 
	#GL_CONSTANT
 0x8576

	)

1819 
	#GL_PRIMARY_COLOR
 0x8577

	)

1820 
	#GL_PREVIOUS
 0x8578

	)

1822 
	#GL_DOT3_RGB
 0x86AE

	)

1823 
	#GL_DOT3_RGBA
 0x86AF

	)

1825 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

1827 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuª
–
GLíum
 
ãxtuª
 );

1829 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuª
–
GLíum
 
ãxtuª
 );

1831 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1833 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1835 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1837 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage1D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1839 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage2D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1841 
GLAPI
 
GLAPIENTRY
 
glCom¥es£dTexSubImage3D
–
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° 
GLvoid
 *
d©a
 );

1843 
GLAPI
 
GLAPIENTRY
 
glGëCom¥es£dTexImage
–
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLvoid
 *
img
 );

1845 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
 );

1847 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1849 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
 );

1851 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1853 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1i
–
GLíum
 
èrgë
, 
GLöt
 
s
 );

1855 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1857 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
 );

1859 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1861 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
 );

1863 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1865 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
 );

1867 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1869 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
 );

1871 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1873 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
 );

1875 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1877 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
 );

1879 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1881 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
 );

1883 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1885 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
 );

1887 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1889 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
 );

1891 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1893 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4d
–
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
 );

1895 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dv
–
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
 );

1897 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4f
–
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
 );

1899 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fv
–
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
 );

1901 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4i
–
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
 );

1903 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iv
–
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
 );

1905 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4s
–
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
 );

1907 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sv
–
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
 );

1910 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1912 
GLAPI
 
GLAPIENTRY
 
glLﬂdTøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1914 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixd
–c⁄° 
GLdoubÀ
 
m
[16] );

1916 
GLAPI
 
GLAPIENTRY
 
glMu…Tøn•o£M©rixf
–c⁄° 
GLÊﬂt
 
m
[16] );

1918 
GLAPI
 
GLAPIENTRY
 
glSam∂eCovîage
–
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
 );

1921 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1922 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

1923 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1924 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1925 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1926 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1927 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1928 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1929 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

1936 #i‚de‡
GL_ARB_mu…ôextuª


1937 
	#GL_ARB_mu…ôextuª
 1

	)

1939 
	#GL_TEXTURE0_ARB
 0x84C0

	)

1940 
	#GL_TEXTURE1_ARB
 0x84C1

	)

1941 
	#GL_TEXTURE2_ARB
 0x84C2

	)

1942 
	#GL_TEXTURE3_ARB
 0x84C3

	)

1943 
	#GL_TEXTURE4_ARB
 0x84C4

	)

1944 
	#GL_TEXTURE5_ARB
 0x84C5

	)

1945 
	#GL_TEXTURE6_ARB
 0x84C6

	)

1946 
	#GL_TEXTURE7_ARB
 0x84C7

	)

1947 
	#GL_TEXTURE8_ARB
 0x84C8

	)

1948 
	#GL_TEXTURE9_ARB
 0x84C9

	)

1949 
	#GL_TEXTURE10_ARB
 0x84CA

	)

1950 
	#GL_TEXTURE11_ARB
 0x84CB

	)

1951 
	#GL_TEXTURE12_ARB
 0x84CC

	)

1952 
	#GL_TEXTURE13_ARB
 0x84CD

	)

1953 
	#GL_TEXTURE14_ARB
 0x84CE

	)

1954 
	#GL_TEXTURE15_ARB
 0x84CF

	)

1955 
	#GL_TEXTURE16_ARB
 0x84D0

	)

1956 
	#GL_TEXTURE17_ARB
 0x84D1

	)

1957 
	#GL_TEXTURE18_ARB
 0x84D2

	)

1958 
	#GL_TEXTURE19_ARB
 0x84D3

	)

1959 
	#GL_TEXTURE20_ARB
 0x84D4

	)

1960 
	#GL_TEXTURE21_ARB
 0x84D5

	)

1961 
	#GL_TEXTURE22_ARB
 0x84D6

	)

1962 
	#GL_TEXTURE23_ARB
 0x84D7

	)

1963 
	#GL_TEXTURE24_ARB
 0x84D8

	)

1964 
	#GL_TEXTURE25_ARB
 0x84D9

	)

1965 
	#GL_TEXTURE26_ARB
 0x84DA

	)

1966 
	#GL_TEXTURE27_ARB
 0x84DB

	)

1967 
	#GL_TEXTURE28_ARB
 0x84DC

	)

1968 
	#GL_TEXTURE29_ARB
 0x84DD

	)

1969 
	#GL_TEXTURE30_ARB
 0x84DE

	)

1970 
	#GL_TEXTURE31_ARB
 0x84DF

	)

1971 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

1972 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

1973 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

1975 
GLAPI
 
GLAPIENTRY
 
glA˘iveTextuªARB
(
GLíum
 
ãxtuª
);

1976 
GLAPI
 
GLAPIENTRY
 
glClõ¡A˘iveTextuªARB
(
GLíum
 
ãxtuª
);

1977 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

1978 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1979 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

1980 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1981 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
);

1982 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1983 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

1984 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d1svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1985 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

1986 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1987 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

1988 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1989 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

1990 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1991 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

1992 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d2svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

1993 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

1994 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

1995 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

1996 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

1997 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

1998 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

1999 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

2000 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d3svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2001 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dARB
(
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

2002 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4dvARB
(
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

2003 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fARB
(
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

2004 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4fvARB
(
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

2005 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4iARB
(
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

2006 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4ivARB
(
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

2007 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4sARB
(
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

2008 
GLAPI
 
GLAPIENTRY
 
glMu…iTexCo‹d4svARB
(
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

2010 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2011 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

2012 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

2013 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2014 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

2015 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2016 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

2017 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2018 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

2019 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2020 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

2021 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2022 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

2023 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2024 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

2025 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2026 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

2027 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2028 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

2029 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2030 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

2031 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2032 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

2033 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2034 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

2035 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2036 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

2037 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

2038 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

2039 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

2040 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

2041 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

2042 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

2043 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

2053 #i‡
deföed
(
GL_GLEXT_LEGACY
)

2059 
	~<GL/gÀxt.h
>

2069 #i‚de‡
GL_MESA_∑cked_dïth_°ícû


2070 
	#GL_MESA_∑cked_dïth_°ícû
 1

	)

2072 
	#GL_DEPTH_STENCIL_MESA
 0x8750

	)

2073 
	#GL_UNSIGNED_INT_24_8_MESA
 0x8751

	)

2074 
	#GL_UNSIGNED_INT_8_24_REV_MESA
 0x8752

	)

2075 
	#GL_UNSIGNED_SHORT_15_1_MESA
 0x8753

	)

2076 
	#GL_UNSIGNED_SHORT_1_15_REV_MESA
 0x8754

	)

2081 #i‚de‡
GL_ATI_bÀnd_equ©i⁄_£∑øã


2082 
	#GL_ATI_bÀnd_equ©i⁄_£∑øã
 1

	)

2084 
	#GL_ALPHA_BLEND_EQUATION_ATI
 0x883D

	)

2086 
GLAPI
 
GLAPIENTRY
 
glBÀndEqu©i⁄Sï¨©eATI
–
GLíum
 
modeRGB
, GLíum 
modeA
 );

2087 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEATIPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeA
);

2093 #i‚de‡
GL_OES_EGL_image


2094 * 
	tGLeglImageOES
;

2097 #i‚de‡
GL_OES_EGL_image


2098 
	#GL_OES_EGL_image
 1

	)

2099 #ifde‡
GL_GLEXT_PROTOTYPES


2100 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëTextuª2DOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2101 
GLAPI
 
APIENTRY
 
glEGLImageT¨gëRídîbuf„rSt‹ageOES
 (
GLíum
 
èrgë
, 
GLeglImageOES
 
image
);

2103 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETTEXTURE2DOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2104 (
APIENTRYP
 
	tPFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLeglImageOES
 
	timage
);

2119 #i‡
deföed
(
PRAGMA_EXPORT_SUPPORTED
)

2120 #¥agm®
exp‹t
 
off


2128 #ifde‡
__˝lu•lus


	@/usr/include/GL/glew.h

79 #i‚de‡
__gÀw_h__


80 
	#__gÀw_h__


	)

81 
	#__GLEW_H__


	)

83 #i‡
deföed
(
__gl_h_
Ë|| deföed(
__GL_H__
Ë|| deföed(
__X_GL_H
)

84 #îr‹ 
gl
.
h
 
ö˛uded
 
bef‹e
 
gÀw
.h

86 #i‡
deföed
(
__gl2_h_
)

87 #îr‹ 
gl2
.
h
 
ö˛uded
 
bef‹e
 
gÀw
.h

89 #i‡
deföed
(
__g…y≥s_h_
)

90 #îr‹ 
g…y≥s
.
h
 
ö˛uded
 
bef‹e
 
gÀw
.h

92 #i‡
deföed
(
__REGAL_H__
)

93 #îr‹ 
RegÆ
.
h
 
ö˛uded
 
bef‹e
 
gÀw
.h

95 #i‡
deföed
(
__gÀxt_h_
Ë|| deföed(
__GLEXT_H_
)

96 #îr‹ 
gÀxt
.
h
 
ö˛uded
 
bef‹e
 
gÀw
.h

98 #i‡
deföed
(
__gl_ATI_h_
)

99 #îr‹ 
glATI
.
h
 
ö˛uded
 
bef‹e
 
gÀw
.h

102 
	#__gl_h_


	)

103 
	#__gl2_h_


	)

104 
	#__GL_H__


	)

105 
	#__g…y≥s_h_


	)

106 
	#__REGAL_H__


	)

107 
	#__X_GL_H


	)

108 
	#__gÀxt_h_


	)

109 
	#__GLEXT_H_


	)

110 
	#__gl_ATI_h_


	)

112 #i‡
deföed
(
_WIN32
)

120 #i‚de‡
APIENTRY


121 
	#GLEW_APIENTRY_DEFINED


	)

122 #i‡
deföed
(
__MINGW32__
Ë|| deföed(
__CYGWIN__
)

123 
	#APIENTRY
 
__°dˇŒ


	)

124 #ñi‡(
_MSC_VER
 >800Ë|| 
deföed
(
_STDCALL_SUPPORTED
Ë|| deföed(
__BORLANDC__
)

125 
	#APIENTRY
 
__°dˇŒ


	)

127 
	#APIENTRY


	)

130 #i‚de‡
GLAPI


131 #i‡
deföed
(
__MINGW32__
Ë|| deföed(
__CYGWIN__
)

132 
	#GLAPI
 

	)

136 #i‚de‡
CALLBACK


137 
	#GLEW_CALLBACK_DEFINED


	)

138 #i‡
deföed
(
__MINGW32__
Ë|| deföed(
__CYGWIN__
)

139 
	#CALLBACK
 
	`__©åibuã__
 ((
__°dˇŒ__
))

	)

140 #ñi‡(
deföed
(
_M_MRX000
Ë|| deföed(
_M_IX86
Ë|| deföed(
_M_ALPHA
Ë|| deföed(
_M_PPC
)Ë&& !deföed(
MIDL_PASS
)

141 
	#CALLBACK
 
__°dˇŒ


	)

143 
	#CALLBACK


	)

147 #i‚de‡
WINGDIAPI


148 
	#GLEW_WINGDIAPI_DEFINED


	)

149 
	#WINGDIAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

152 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)Ë&& !deföed(
_WCHAR_T_DEFINED
)

153 
	twch¨_t
;

154 
	#_WCHAR_T_DEFINED


	)

157 #i‡!
deföed
(
_W64
)

158 #i‡!
deföed
(
__midl
Ë&& (deföed(
_X86_
Ë|| deföed(
_M_IX86
)Ë&& deföed(
_MSC_VER
) && _MSC_VER >= 1300

159 
	#_W64
 
__w64


	)

161 
	#_W64


	)

164 #i‡!
deföed
(
_PTRDIFF_T_DEFINED
Ë&& !deföed(
_PTRDIFF_T_
Ë&& !deföed(
__MINGW64__
)

165 #ifde‡
_WIN64


166 
__öt64
 
	t±rdiff_t
;

168 
_W64
 
	t±rdiff_t
;

170 
	#_PTRDIFF_T_DEFINED


	)

171 
	#_PTRDIFF_T_


	)

174 #i‚de‡
GLAPI


175 #i‡
deföed
(
__MINGW32__
Ë|| deföed(
__CYGWIN__
)

176 
	#GLAPI
 

	)

178 
	#GLAPI
 
WINGDIAPI


	)

182 #i‚de‡
GLAPIENTRY


183 
	#GLAPIENTRY
 
APIENTRY


	)

186 #i‚de‡
GLEWAPIENTRY


187 
	#GLEWAPIENTRY
 
APIENTRY


	)

195 #ifde‡
GLEW_STATIC


196 
	#GLEWAPI
 

	)

198 #ifde‡
GLEW_BUILD


199 
	#GLEWAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

201 
	#GLEWAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

216 
	~<°ddef.h
>

221 #i‡(
deföed
(
__sgi
Ë|| deföed(
__sun
)Ë&& !deföed(
__GNUC__
)

222 
	~<öây≥s.h
>

224 
	~<°döt.h
>

227 
	#GLEW_APIENTRY_DEFINED


	)

228 
	#APIENTRY


	)

234 #ifde‡
GLEW_STATIC


235 
	#GLEWAPI
 

	)

237 #i‡
deföed
(
__GNUC__
) && __GNUC__>=4

238 
	#GLEWAPI
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

239 #ñi‡
deföed
(
__SUNPRO_C
Ë|| deföed(
__SUNPRO_CC
)

240 
	#GLEWAPI
 
__globÆ


	)

242 
	#GLEWAPI
 

	)

247 #i‚de‡
GLAPI


248 
	#GLAPI
 

	)

251 #i‚de‡
GLAPIENTRY


252 
	#GLAPIENTRY


	)

255 #i‚de‡
GLEWAPIENTRY


256 
	#GLEWAPIENTRY


	)

261 #ifde‡
__˝lu•lus


267 #i‚de‡
GL_VERSION_1_1


268 
	#GL_VERSION_1_1
 1

	)

270 
	tGLíum
;

271 
	tGLbôfõld
;

272 
	tGLuöt
;

273 
	tGLöt
;

274 
	tGLsizei
;

275 
	tGLboﬁón
;

276 sig√d 
	tGLbyã
;

277 
	tGLsh‹t
;

278 
	tGLubyã
;

279 
	tGLush‹t
;

280 
	tGLul⁄g
;

281 
	tGLÊﬂt
;

282 
	tGL˛ampf
;

283 
	tGLdoubÀ
;

284 
	tGL˛ampd
;

285 
	tGLvoid
;

286 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1400

287 
__öt64
 
	tGLöt64EXT
;

288 
	t__öt64
 
	tGLuöt64EXT
;

289 #ñi‡
deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)

290 sig√d 
	tGLöt64EXT
;

291 
	tGLuöt64EXT
;

293 #i‡
deföed
(
__MINGW32__
Ë|| deföed(
__CYGWIN__
)

294 
	~<öây≥s.h
>

296 
öt64_t
 
	tGLöt64EXT
;

297 
uöt64_t
 
	tGLuöt64EXT
;

299 
GLöt64EXT
 
	tGLöt64
;

300 
GLuöt64EXT
 
	tGLuöt64
;

301 
__GLsync
 *
	tGLsync
;

303 
	tGLch¨
;

305 
	#GL_ZERO
 0

	)

306 
	#GL_FALSE
 0

	)

307 
	#GL_LOGIC_OP
 0x0BF1

	)

308 
	#GL_NONE
 0

	)

309 
	#GL_TEXTURE_COMPONENTS
 0x1003

	)

310 
	#GL_NO_ERROR
 0

	)

311 
	#GL_POINTS
 0x0000

	)

312 
	#GL_CURRENT_BIT
 0x00000001

	)

313 
	#GL_TRUE
 1

	)

314 
	#GL_ONE
 1

	)

315 
	#GL_CLIENT_PIXEL_STORE_BIT
 0x00000001

	)

316 
	#GL_LINES
 0x0001

	)

317 
	#GL_LINE_LOOP
 0x0002

	)

318 
	#GL_POINT_BIT
 0x00000002

	)

319 
	#GL_CLIENT_VERTEX_ARRAY_BIT
 0x00000002

	)

320 
	#GL_LINE_STRIP
 0x0003

	)

321 
	#GL_LINE_BIT
 0x00000004

	)

322 
	#GL_TRIANGLES
 0x0004

	)

323 
	#GL_TRIANGLE_STRIP
 0x0005

	)

324 
	#GL_TRIANGLE_FAN
 0x0006

	)

325 
	#GL_QUADS
 0x0007

	)

326 
	#GL_QUAD_STRIP
 0x0008

	)

327 
	#GL_POLYGON_BIT
 0x00000008

	)

328 
	#GL_POLYGON
 0x0009

	)

329 
	#GL_POLYGON_STIPPLE_BIT
 0x00000010

	)

330 
	#GL_PIXEL_MODE_BIT
 0x00000020

	)

331 
	#GL_LIGHTING_BIT
 0x00000040

	)

332 
	#GL_FOG_BIT
 0x00000080

	)

333 
	#GL_DEPTH_BUFFER_BIT
 0x00000100

	)

334 
	#GL_ACCUM
 0x0100

	)

335 
	#GL_LOAD
 0x0101

	)

336 
	#GL_RETURN
 0x0102

	)

337 
	#GL_MULT
 0x0103

	)

338 
	#GL_ADD
 0x0104

	)

339 
	#GL_NEVER
 0x0200

	)

340 
	#GL_ACCUM_BUFFER_BIT
 0x00000200

	)

341 
	#GL_LESS
 0x0201

	)

342 
	#GL_EQUAL
 0x0202

	)

343 
	#GL_LEQUAL
 0x0203

	)

344 
	#GL_GREATER
 0x0204

	)

345 
	#GL_NOTEQUAL
 0x0205

	)

346 
	#GL_GEQUAL
 0x0206

	)

347 
	#GL_ALWAYS
 0x0207

	)

348 
	#GL_SRC_COLOR
 0x0300

	)

349 
	#GL_ONE_MINUS_SRC_COLOR
 0x0301

	)

350 
	#GL_SRC_ALPHA
 0x0302

	)

351 
	#GL_ONE_MINUS_SRC_ALPHA
 0x0303

	)

352 
	#GL_DST_ALPHA
 0x0304

	)

353 
	#GL_ONE_MINUS_DST_ALPHA
 0x0305

	)

354 
	#GL_DST_COLOR
 0x0306

	)

355 
	#GL_ONE_MINUS_DST_COLOR
 0x0307

	)

356 
	#GL_SRC_ALPHA_SATURATE
 0x0308

	)

357 
	#GL_STENCIL_BUFFER_BIT
 0x00000400

	)

358 
	#GL_FRONT_LEFT
 0x0400

	)

359 
	#GL_FRONT_RIGHT
 0x0401

	)

360 
	#GL_BACK_LEFT
 0x0402

	)

361 
	#GL_BACK_RIGHT
 0x0403

	)

362 
	#GL_FRONT
 0x0404

	)

363 
	#GL_BACK
 0x0405

	)

364 
	#GL_LEFT
 0x0406

	)

365 
	#GL_RIGHT
 0x0407

	)

366 
	#GL_FRONT_AND_BACK
 0x0408

	)

367 
	#GL_AUX0
 0x0409

	)

368 
	#GL_AUX1
 0x040A

	)

369 
	#GL_AUX2
 0x040B

	)

370 
	#GL_AUX3
 0x040C

	)

371 
	#GL_INVALID_ENUM
 0x0500

	)

372 
	#GL_INVALID_VALUE
 0x0501

	)

373 
	#GL_INVALID_OPERATION
 0x0502

	)

374 
	#GL_STACK_OVERFLOW
 0x0503

	)

375 
	#GL_STACK_UNDERFLOW
 0x0504

	)

376 
	#GL_OUT_OF_MEMORY
 0x0505

	)

377 
	#GL_2D
 0x0600

	)

378 
	#GL_3D
 0x0601

	)

379 
	#GL_3D_COLOR
 0x0602

	)

380 
	#GL_3D_COLOR_TEXTURE
 0x0603

	)

381 
	#GL_4D_COLOR_TEXTURE
 0x0604

	)

382 
	#GL_PASS_THROUGH_TOKEN
 0x0700

	)

383 
	#GL_POINT_TOKEN
 0x0701

	)

384 
	#GL_LINE_TOKEN
 0x0702

	)

385 
	#GL_POLYGON_TOKEN
 0x0703

	)

386 
	#GL_BITMAP_TOKEN
 0x0704

	)

387 
	#GL_DRAW_PIXEL_TOKEN
 0x0705

	)

388 
	#GL_COPY_PIXEL_TOKEN
 0x0706

	)

389 
	#GL_LINE_RESET_TOKEN
 0x0707

	)

390 
	#GL_EXP
 0x0800

	)

391 
	#GL_VIEWPORT_BIT
 0x00000800

	)

392 
	#GL_EXP2
 0x0801

	)

393 
	#GL_CW
 0x0900

	)

394 
	#GL_CCW
 0x0901

	)

395 
	#GL_COEFF
 0x0A00

	)

396 
	#GL_ORDER
 0x0A01

	)

397 
	#GL_DOMAIN
 0x0A02

	)

398 
	#GL_CURRENT_COLOR
 0x0B00

	)

399 
	#GL_CURRENT_INDEX
 0x0B01

	)

400 
	#GL_CURRENT_NORMAL
 0x0B02

	)

401 
	#GL_CURRENT_TEXTURE_COORDS
 0x0B03

	)

402 
	#GL_CURRENT_RASTER_COLOR
 0x0B04

	)

403 
	#GL_CURRENT_RASTER_INDEX
 0x0B05

	)

404 
	#GL_CURRENT_RASTER_TEXTURE_COORDS
 0x0B06

	)

405 
	#GL_CURRENT_RASTER_POSITION
 0x0B07

	)

406 
	#GL_CURRENT_RASTER_POSITION_VALID
 0x0B08

	)

407 
	#GL_CURRENT_RASTER_DISTANCE
 0x0B09

	)

408 
	#GL_POINT_SMOOTH
 0x0B10

	)

409 
	#GL_POINT_SIZE
 0x0B11

	)

410 
	#GL_POINT_SIZE_RANGE
 0x0B12

	)

411 
	#GL_POINT_SIZE_GRANULARITY
 0x0B13

	)

412 
	#GL_LINE_SMOOTH
 0x0B20

	)

413 
	#GL_LINE_WIDTH
 0x0B21

	)

414 
	#GL_LINE_WIDTH_RANGE
 0x0B22

	)

415 
	#GL_LINE_WIDTH_GRANULARITY
 0x0B23

	)

416 
	#GL_LINE_STIPPLE
 0x0B24

	)

417 
	#GL_LINE_STIPPLE_PATTERN
 0x0B25

	)

418 
	#GL_LINE_STIPPLE_REPEAT
 0x0B26

	)

419 
	#GL_LIST_MODE
 0x0B30

	)

420 
	#GL_MAX_LIST_NESTING
 0x0B31

	)

421 
	#GL_LIST_BASE
 0x0B32

	)

422 
	#GL_LIST_INDEX
 0x0B33

	)

423 
	#GL_POLYGON_MODE
 0x0B40

	)

424 
	#GL_POLYGON_SMOOTH
 0x0B41

	)

425 
	#GL_POLYGON_STIPPLE
 0x0B42

	)

426 
	#GL_EDGE_FLAG
 0x0B43

	)

427 
	#GL_CULL_FACE
 0x0B44

	)

428 
	#GL_CULL_FACE_MODE
 0x0B45

	)

429 
	#GL_FRONT_FACE
 0x0B46

	)

430 
	#GL_LIGHTING
 0x0B50

	)

431 
	#GL_LIGHT_MODEL_LOCAL_VIEWER
 0x0B51

	)

432 
	#GL_LIGHT_MODEL_TWO_SIDE
 0x0B52

	)

433 
	#GL_LIGHT_MODEL_AMBIENT
 0x0B53

	)

434 
	#GL_SHADE_MODEL
 0x0B54

	)

435 
	#GL_COLOR_MATERIAL_FACE
 0x0B55

	)

436 
	#GL_COLOR_MATERIAL_PARAMETER
 0x0B56

	)

437 
	#GL_COLOR_MATERIAL
 0x0B57

	)

438 
	#GL_FOG
 0x0B60

	)

439 
	#GL_FOG_INDEX
 0x0B61

	)

440 
	#GL_FOG_DENSITY
 0x0B62

	)

441 
	#GL_FOG_START
 0x0B63

	)

442 
	#GL_FOG_END
 0x0B64

	)

443 
	#GL_FOG_MODE
 0x0B65

	)

444 
	#GL_FOG_COLOR
 0x0B66

	)

445 
	#GL_DEPTH_RANGE
 0x0B70

	)

446 
	#GL_DEPTH_TEST
 0x0B71

	)

447 
	#GL_DEPTH_WRITEMASK
 0x0B72

	)

448 
	#GL_DEPTH_CLEAR_VALUE
 0x0B73

	)

449 
	#GL_DEPTH_FUNC
 0x0B74

	)

450 
	#GL_ACCUM_CLEAR_VALUE
 0x0B80

	)

451 
	#GL_STENCIL_TEST
 0x0B90

	)

452 
	#GL_STENCIL_CLEAR_VALUE
 0x0B91

	)

453 
	#GL_STENCIL_FUNC
 0x0B92

	)

454 
	#GL_STENCIL_VALUE_MASK
 0x0B93

	)

455 
	#GL_STENCIL_FAIL
 0x0B94

	)

456 
	#GL_STENCIL_PASS_DEPTH_FAIL
 0x0B95

	)

457 
	#GL_STENCIL_PASS_DEPTH_PASS
 0x0B96

	)

458 
	#GL_STENCIL_REF
 0x0B97

	)

459 
	#GL_STENCIL_WRITEMASK
 0x0B98

	)

460 
	#GL_MATRIX_MODE
 0x0BA0

	)

461 
	#GL_NORMALIZE
 0x0BA1

	)

462 
	#GL_VIEWPORT
 0x0BA2

	)

463 
	#GL_MODELVIEW_STACK_DEPTH
 0x0BA3

	)

464 
	#GL_PROJECTION_STACK_DEPTH
 0x0BA4

	)

465 
	#GL_TEXTURE_STACK_DEPTH
 0x0BA5

	)

466 
	#GL_MODELVIEW_MATRIX
 0x0BA6

	)

467 
	#GL_PROJECTION_MATRIX
 0x0BA7

	)

468 
	#GL_TEXTURE_MATRIX
 0x0BA8

	)

469 
	#GL_ATTRIB_STACK_DEPTH
 0x0BB0

	)

470 
	#GL_CLIENT_ATTRIB_STACK_DEPTH
 0x0BB1

	)

471 
	#GL_ALPHA_TEST
 0x0BC0

	)

472 
	#GL_ALPHA_TEST_FUNC
 0x0BC1

	)

473 
	#GL_ALPHA_TEST_REF
 0x0BC2

	)

474 
	#GL_DITHER
 0x0BD0

	)

475 
	#GL_BLEND_DST
 0x0BE0

	)

476 
	#GL_BLEND_SRC
 0x0BE1

	)

477 
	#GL_BLEND
 0x0BE2

	)

478 
	#GL_LOGIC_OP_MODE
 0x0BF0

	)

479 
	#GL_INDEX_LOGIC_OP
 0x0BF1

	)

480 
	#GL_COLOR_LOGIC_OP
 0x0BF2

	)

481 
	#GL_AUX_BUFFERS
 0x0C00

	)

482 
	#GL_DRAW_BUFFER
 0x0C01

	)

483 
	#GL_READ_BUFFER
 0x0C02

	)

484 
	#GL_SCISSOR_BOX
 0x0C10

	)

485 
	#GL_SCISSOR_TEST
 0x0C11

	)

486 
	#GL_INDEX_CLEAR_VALUE
 0x0C20

	)

487 
	#GL_INDEX_WRITEMASK
 0x0C21

	)

488 
	#GL_COLOR_CLEAR_VALUE
 0x0C22

	)

489 
	#GL_COLOR_WRITEMASK
 0x0C23

	)

490 
	#GL_INDEX_MODE
 0x0C30

	)

491 
	#GL_RGBA_MODE
 0x0C31

	)

492 
	#GL_DOUBLEBUFFER
 0x0C32

	)

493 
	#GL_STEREO
 0x0C33

	)

494 
	#GL_RENDER_MODE
 0x0C40

	)

495 
	#GL_PERSPECTIVE_CORRECTION_HINT
 0x0C50

	)

496 
	#GL_POINT_SMOOTH_HINT
 0x0C51

	)

497 
	#GL_LINE_SMOOTH_HINT
 0x0C52

	)

498 
	#GL_POLYGON_SMOOTH_HINT
 0x0C53

	)

499 
	#GL_FOG_HINT
 0x0C54

	)

500 
	#GL_TEXTURE_GEN_S
 0x0C60

	)

501 
	#GL_TEXTURE_GEN_T
 0x0C61

	)

502 
	#GL_TEXTURE_GEN_R
 0x0C62

	)

503 
	#GL_TEXTURE_GEN_Q
 0x0C63

	)

504 
	#GL_PIXEL_MAP_I_TO_I
 0x0C70

	)

505 
	#GL_PIXEL_MAP_S_TO_S
 0x0C71

	)

506 
	#GL_PIXEL_MAP_I_TO_R
 0x0C72

	)

507 
	#GL_PIXEL_MAP_I_TO_G
 0x0C73

	)

508 
	#GL_PIXEL_MAP_I_TO_B
 0x0C74

	)

509 
	#GL_PIXEL_MAP_I_TO_A
 0x0C75

	)

510 
	#GL_PIXEL_MAP_R_TO_R
 0x0C76

	)

511 
	#GL_PIXEL_MAP_G_TO_G
 0x0C77

	)

512 
	#GL_PIXEL_MAP_B_TO_B
 0x0C78

	)

513 
	#GL_PIXEL_MAP_A_TO_A
 0x0C79

	)

514 
	#GL_PIXEL_MAP_I_TO_I_SIZE
 0x0CB0

	)

515 
	#GL_PIXEL_MAP_S_TO_S_SIZE
 0x0CB1

	)

516 
	#GL_PIXEL_MAP_I_TO_R_SIZE
 0x0CB2

	)

517 
	#GL_PIXEL_MAP_I_TO_G_SIZE
 0x0CB3

	)

518 
	#GL_PIXEL_MAP_I_TO_B_SIZE
 0x0CB4

	)

519 
	#GL_PIXEL_MAP_I_TO_A_SIZE
 0x0CB5

	)

520 
	#GL_PIXEL_MAP_R_TO_R_SIZE
 0x0CB6

	)

521 
	#GL_PIXEL_MAP_G_TO_G_SIZE
 0x0CB7

	)

522 
	#GL_PIXEL_MAP_B_TO_B_SIZE
 0x0CB8

	)

523 
	#GL_PIXEL_MAP_A_TO_A_SIZE
 0x0CB9

	)

524 
	#GL_UNPACK_SWAP_BYTES
 0x0CF0

	)

525 
	#GL_UNPACK_LSB_FIRST
 0x0CF1

	)

526 
	#GL_UNPACK_ROW_LENGTH
 0x0CF2

	)

527 
	#GL_UNPACK_SKIP_ROWS
 0x0CF3

	)

528 
	#GL_UNPACK_SKIP_PIXELS
 0x0CF4

	)

529 
	#GL_UNPACK_ALIGNMENT
 0x0CF5

	)

530 
	#GL_PACK_SWAP_BYTES
 0x0D00

	)

531 
	#GL_PACK_LSB_FIRST
 0x0D01

	)

532 
	#GL_PACK_ROW_LENGTH
 0x0D02

	)

533 
	#GL_PACK_SKIP_ROWS
 0x0D03

	)

534 
	#GL_PACK_SKIP_PIXELS
 0x0D04

	)

535 
	#GL_PACK_ALIGNMENT
 0x0D05

	)

536 
	#GL_MAP_COLOR
 0x0D10

	)

537 
	#GL_MAP_STENCIL
 0x0D11

	)

538 
	#GL_INDEX_SHIFT
 0x0D12

	)

539 
	#GL_INDEX_OFFSET
 0x0D13

	)

540 
	#GL_RED_SCALE
 0x0D14

	)

541 
	#GL_RED_BIAS
 0x0D15

	)

542 
	#GL_ZOOM_X
 0x0D16

	)

543 
	#GL_ZOOM_Y
 0x0D17

	)

544 
	#GL_GREEN_SCALE
 0x0D18

	)

545 
	#GL_GREEN_BIAS
 0x0D19

	)

546 
	#GL_BLUE_SCALE
 0x0D1A

	)

547 
	#GL_BLUE_BIAS
 0x0D1B

	)

548 
	#GL_ALPHA_SCALE
 0x0D1C

	)

549 
	#GL_ALPHA_BIAS
 0x0D1D

	)

550 
	#GL_DEPTH_SCALE
 0x0D1E

	)

551 
	#GL_DEPTH_BIAS
 0x0D1F

	)

552 
	#GL_MAX_EVAL_ORDER
 0x0D30

	)

553 
	#GL_MAX_LIGHTS
 0x0D31

	)

554 
	#GL_MAX_CLIP_PLANES
 0x0D32

	)

555 
	#GL_MAX_TEXTURE_SIZE
 0x0D33

	)

556 
	#GL_MAX_PIXEL_MAP_TABLE
 0x0D34

	)

557 
	#GL_MAX_ATTRIB_STACK_DEPTH
 0x0D35

	)

558 
	#GL_MAX_MODELVIEW_STACK_DEPTH
 0x0D36

	)

559 
	#GL_MAX_NAME_STACK_DEPTH
 0x0D37

	)

560 
	#GL_MAX_PROJECTION_STACK_DEPTH
 0x0D38

	)

561 
	#GL_MAX_TEXTURE_STACK_DEPTH
 0x0D39

	)

562 
	#GL_MAX_VIEWPORT_DIMS
 0x0D3A

	)

563 
	#GL_MAX_CLIENT_ATTRIB_STACK_DEPTH
 0x0D3B

	)

564 
	#GL_SUBPIXEL_BITS
 0x0D50

	)

565 
	#GL_INDEX_BITS
 0x0D51

	)

566 
	#GL_RED_BITS
 0x0D52

	)

567 
	#GL_GREEN_BITS
 0x0D53

	)

568 
	#GL_BLUE_BITS
 0x0D54

	)

569 
	#GL_ALPHA_BITS
 0x0D55

	)

570 
	#GL_DEPTH_BITS
 0x0D56

	)

571 
	#GL_STENCIL_BITS
 0x0D57

	)

572 
	#GL_ACCUM_RED_BITS
 0x0D58

	)

573 
	#GL_ACCUM_GREEN_BITS
 0x0D59

	)

574 
	#GL_ACCUM_BLUE_BITS
 0x0D5A

	)

575 
	#GL_ACCUM_ALPHA_BITS
 0x0D5B

	)

576 
	#GL_NAME_STACK_DEPTH
 0x0D70

	)

577 
	#GL_AUTO_NORMAL
 0x0D80

	)

578 
	#GL_MAP1_COLOR_4
 0x0D90

	)

579 
	#GL_MAP1_INDEX
 0x0D91

	)

580 
	#GL_MAP1_NORMAL
 0x0D92

	)

581 
	#GL_MAP1_TEXTURE_COORD_1
 0x0D93

	)

582 
	#GL_MAP1_TEXTURE_COORD_2
 0x0D94

	)

583 
	#GL_MAP1_TEXTURE_COORD_3
 0x0D95

	)

584 
	#GL_MAP1_TEXTURE_COORD_4
 0x0D96

	)

585 
	#GL_MAP1_VERTEX_3
 0x0D97

	)

586 
	#GL_MAP1_VERTEX_4
 0x0D98

	)

587 
	#GL_MAP2_COLOR_4
 0x0DB0

	)

588 
	#GL_MAP2_INDEX
 0x0DB1

	)

589 
	#GL_MAP2_NORMAL
 0x0DB2

	)

590 
	#GL_MAP2_TEXTURE_COORD_1
 0x0DB3

	)

591 
	#GL_MAP2_TEXTURE_COORD_2
 0x0DB4

	)

592 
	#GL_MAP2_TEXTURE_COORD_3
 0x0DB5

	)

593 
	#GL_MAP2_TEXTURE_COORD_4
 0x0DB6

	)

594 
	#GL_MAP2_VERTEX_3
 0x0DB7

	)

595 
	#GL_MAP2_VERTEX_4
 0x0DB8

	)

596 
	#GL_MAP1_GRID_DOMAIN
 0x0DD0

	)

597 
	#GL_MAP1_GRID_SEGMENTS
 0x0DD1

	)

598 
	#GL_MAP2_GRID_DOMAIN
 0x0DD2

	)

599 
	#GL_MAP2_GRID_SEGMENTS
 0x0DD3

	)

600 
	#GL_TEXTURE_1D
 0x0DE0

	)

601 
	#GL_TEXTURE_2D
 0x0DE1

	)

602 
	#GL_FEEDBACK_BUFFER_POINTER
 0x0DF0

	)

603 
	#GL_FEEDBACK_BUFFER_SIZE
 0x0DF1

	)

604 
	#GL_FEEDBACK_BUFFER_TYPE
 0x0DF2

	)

605 
	#GL_SELECTION_BUFFER_POINTER
 0x0DF3

	)

606 
	#GL_SELECTION_BUFFER_SIZE
 0x0DF4

	)

607 
	#GL_TEXTURE_WIDTH
 0x1000

	)

608 
	#GL_TRANSFORM_BIT
 0x00001000

	)

609 
	#GL_TEXTURE_HEIGHT
 0x1001

	)

610 
	#GL_TEXTURE_INTERNAL_FORMAT
 0x1003

	)

611 
	#GL_TEXTURE_BORDER_COLOR
 0x1004

	)

612 
	#GL_TEXTURE_BORDER
 0x1005

	)

613 
	#GL_DONT_CARE
 0x1100

	)

614 
	#GL_FASTEST
 0x1101

	)

615 
	#GL_NICEST
 0x1102

	)

616 
	#GL_AMBIENT
 0x1200

	)

617 
	#GL_DIFFUSE
 0x1201

	)

618 
	#GL_SPECULAR
 0x1202

	)

619 
	#GL_POSITION
 0x1203

	)

620 
	#GL_SPOT_DIRECTION
 0x1204

	)

621 
	#GL_SPOT_EXPONENT
 0x1205

	)

622 
	#GL_SPOT_CUTOFF
 0x1206

	)

623 
	#GL_CONSTANT_ATTENUATION
 0x1207

	)

624 
	#GL_LINEAR_ATTENUATION
 0x1208

	)

625 
	#GL_QUADRATIC_ATTENUATION
 0x1209

	)

626 
	#GL_COMPILE
 0x1300

	)

627 
	#GL_COMPILE_AND_EXECUTE
 0x1301

	)

628 
	#GL_BYTE
 0x1400

	)

629 
	#GL_UNSIGNED_BYTE
 0x1401

	)

630 
	#GL_SHORT
 0x1402

	)

631 
	#GL_UNSIGNED_SHORT
 0x1403

	)

632 
	#GL_INT
 0x1404

	)

633 
	#GL_UNSIGNED_INT
 0x1405

	)

634 
	#GL_FLOAT
 0x1406

	)

635 
	#GL_2_BYTES
 0x1407

	)

636 
	#GL_3_BYTES
 0x1408

	)

637 
	#GL_4_BYTES
 0x1409

	)

638 
	#GL_DOUBLE
 0x140A

	)

639 
	#GL_CLEAR
 0x1500

	)

640 
	#GL_AND
 0x1501

	)

641 
	#GL_AND_REVERSE
 0x1502

	)

642 
	#GL_COPY
 0x1503

	)

643 
	#GL_AND_INVERTED
 0x1504

	)

644 
	#GL_NOOP
 0x1505

	)

645 
	#GL_XOR
 0x1506

	)

646 
	#GL_OR
 0x1507

	)

647 
	#GL_NOR
 0x1508

	)

648 
	#GL_EQUIV
 0x1509

	)

649 
	#GL_INVERT
 0x150A

	)

650 
	#GL_OR_REVERSE
 0x150B

	)

651 
	#GL_COPY_INVERTED
 0x150C

	)

652 
	#GL_OR_INVERTED
 0x150D

	)

653 
	#GL_NAND
 0x150E

	)

654 
	#GL_SET
 0x150F

	)

655 
	#GL_EMISSION
 0x1600

	)

656 
	#GL_SHININESS
 0x1601

	)

657 
	#GL_AMBIENT_AND_DIFFUSE
 0x1602

	)

658 
	#GL_COLOR_INDEXES
 0x1603

	)

659 
	#GL_MODELVIEW
 0x1700

	)

660 
	#GL_PROJECTION
 0x1701

	)

661 
	#GL_TEXTURE
 0x1702

	)

662 
	#GL_COLOR
 0x1800

	)

663 
	#GL_DEPTH
 0x1801

	)

664 
	#GL_STENCIL
 0x1802

	)

665 
	#GL_COLOR_INDEX
 0x1900

	)

666 
	#GL_STENCIL_INDEX
 0x1901

	)

667 
	#GL_DEPTH_COMPONENT
 0x1902

	)

668 
	#GL_RED
 0x1903

	)

669 
	#GL_GREEN
 0x1904

	)

670 
	#GL_BLUE
 0x1905

	)

671 
	#GL_ALPHA
 0x1906

	)

672 
	#GL_RGB
 0x1907

	)

673 
	#GL_RGBA
 0x1908

	)

674 
	#GL_LUMINANCE
 0x1909

	)

675 
	#GL_LUMINANCE_ALPHA
 0x190A

	)

676 
	#GL_BITMAP
 0x1A00

	)

677 
	#GL_POINT
 0x1B00

	)

678 
	#GL_LINE
 0x1B01

	)

679 
	#GL_FILL
 0x1B02

	)

680 
	#GL_RENDER
 0x1C00

	)

681 
	#GL_FEEDBACK
 0x1C01

	)

682 
	#GL_SELECT
 0x1C02

	)

683 
	#GL_FLAT
 0x1D00

	)

684 
	#GL_SMOOTH
 0x1D01

	)

685 
	#GL_KEEP
 0x1E00

	)

686 
	#GL_REPLACE
 0x1E01

	)

687 
	#GL_INCR
 0x1E02

	)

688 
	#GL_DECR
 0x1E03

	)

689 
	#GL_VENDOR
 0x1F00

	)

690 
	#GL_RENDERER
 0x1F01

	)

691 
	#GL_VERSION
 0x1F02

	)

692 
	#GL_EXTENSIONS
 0x1F03

	)

693 
	#GL_S
 0x2000

	)

694 
	#GL_ENABLE_BIT
 0x00002000

	)

695 
	#GL_T
 0x2001

	)

696 
	#GL_R
 0x2002

	)

697 
	#GL_Q
 0x2003

	)

698 
	#GL_MODULATE
 0x2100

	)

699 
	#GL_DECAL
 0x2101

	)

700 
	#GL_TEXTURE_ENV_MODE
 0x2200

	)

701 
	#GL_TEXTURE_ENV_COLOR
 0x2201

	)

702 
	#GL_TEXTURE_ENV
 0x2300

	)

703 
	#GL_EYE_LINEAR
 0x2400

	)

704 
	#GL_OBJECT_LINEAR
 0x2401

	)

705 
	#GL_SPHERE_MAP
 0x2402

	)

706 
	#GL_TEXTURE_GEN_MODE
 0x2500

	)

707 
	#GL_OBJECT_PLANE
 0x2501

	)

708 
	#GL_EYE_PLANE
 0x2502

	)

709 
	#GL_NEAREST
 0x2600

	)

710 
	#GL_LINEAR
 0x2601

	)

711 
	#GL_NEAREST_MIPMAP_NEAREST
 0x2700

	)

712 
	#GL_LINEAR_MIPMAP_NEAREST
 0x2701

	)

713 
	#GL_NEAREST_MIPMAP_LINEAR
 0x2702

	)

714 
	#GL_LINEAR_MIPMAP_LINEAR
 0x2703

	)

715 
	#GL_TEXTURE_MAG_FILTER
 0x2800

	)

716 
	#GL_TEXTURE_MIN_FILTER
 0x2801

	)

717 
	#GL_TEXTURE_WRAP_S
 0x2802

	)

718 
	#GL_TEXTURE_WRAP_T
 0x2803

	)

719 
	#GL_CLAMP
 0x2900

	)

720 
	#GL_REPEAT
 0x2901

	)

721 
	#GL_POLYGON_OFFSET_UNITS
 0x2A00

	)

722 
	#GL_POLYGON_OFFSET_POINT
 0x2A01

	)

723 
	#GL_POLYGON_OFFSET_LINE
 0x2A02

	)

724 
	#GL_R3_G3_B2
 0x2A10

	)

725 
	#GL_V2F
 0x2A20

	)

726 
	#GL_V3F
 0x2A21

	)

727 
	#GL_C4UB_V2F
 0x2A22

	)

728 
	#GL_C4UB_V3F
 0x2A23

	)

729 
	#GL_C3F_V3F
 0x2A24

	)

730 
	#GL_N3F_V3F
 0x2A25

	)

731 
	#GL_C4F_N3F_V3F
 0x2A26

	)

732 
	#GL_T2F_V3F
 0x2A27

	)

733 
	#GL_T4F_V4F
 0x2A28

	)

734 
	#GL_T2F_C4UB_V3F
 0x2A29

	)

735 
	#GL_T2F_C3F_V3F
 0x2A2A

	)

736 
	#GL_T2F_N3F_V3F
 0x2A2B

	)

737 
	#GL_T2F_C4F_N3F_V3F
 0x2A2C

	)

738 
	#GL_T4F_C4F_N3F_V4F
 0x2A2D

	)

739 
	#GL_CLIP_PLANE0
 0x3000

	)

740 
	#GL_CLIP_PLANE1
 0x3001

	)

741 
	#GL_CLIP_PLANE2
 0x3002

	)

742 
	#GL_CLIP_PLANE3
 0x3003

	)

743 
	#GL_CLIP_PLANE4
 0x3004

	)

744 
	#GL_CLIP_PLANE5
 0x3005

	)

745 
	#GL_LIGHT0
 0x4000

	)

746 
	#GL_COLOR_BUFFER_BIT
 0x00004000

	)

747 
	#GL_LIGHT1
 0x4001

	)

748 
	#GL_LIGHT2
 0x4002

	)

749 
	#GL_LIGHT3
 0x4003

	)

750 
	#GL_LIGHT4
 0x4004

	)

751 
	#GL_LIGHT5
 0x4005

	)

752 
	#GL_LIGHT6
 0x4006

	)

753 
	#GL_LIGHT7
 0x4007

	)

754 
	#GL_HINT_BIT
 0x00008000

	)

755 
	#GL_POLYGON_OFFSET_FILL
 0x8037

	)

756 
	#GL_POLYGON_OFFSET_FACTOR
 0x8038

	)

757 
	#GL_ALPHA4
 0x803B

	)

758 
	#GL_ALPHA8
 0x803C

	)

759 
	#GL_ALPHA12
 0x803D

	)

760 
	#GL_ALPHA16
 0x803E

	)

761 
	#GL_LUMINANCE4
 0x803F

	)

762 
	#GL_LUMINANCE8
 0x8040

	)

763 
	#GL_LUMINANCE12
 0x8041

	)

764 
	#GL_LUMINANCE16
 0x8042

	)

765 
	#GL_LUMINANCE4_ALPHA4
 0x8043

	)

766 
	#GL_LUMINANCE6_ALPHA2
 0x8044

	)

767 
	#GL_LUMINANCE8_ALPHA8
 0x8045

	)

768 
	#GL_LUMINANCE12_ALPHA4
 0x8046

	)

769 
	#GL_LUMINANCE12_ALPHA12
 0x8047

	)

770 
	#GL_LUMINANCE16_ALPHA16
 0x8048

	)

771 
	#GL_INTENSITY
 0x8049

	)

772 
	#GL_INTENSITY4
 0x804A

	)

773 
	#GL_INTENSITY8
 0x804B

	)

774 
	#GL_INTENSITY12
 0x804C

	)

775 
	#GL_INTENSITY16
 0x804D

	)

776 
	#GL_RGB4
 0x804F

	)

777 
	#GL_RGB5
 0x8050

	)

778 
	#GL_RGB8
 0x8051

	)

779 
	#GL_RGB10
 0x8052

	)

780 
	#GL_RGB12
 0x8053

	)

781 
	#GL_RGB16
 0x8054

	)

782 
	#GL_RGBA2
 0x8055

	)

783 
	#GL_RGBA4
 0x8056

	)

784 
	#GL_RGB5_A1
 0x8057

	)

785 
	#GL_RGBA8
 0x8058

	)

786 
	#GL_RGB10_A2
 0x8059

	)

787 
	#GL_RGBA12
 0x805A

	)

788 
	#GL_RGBA16
 0x805B

	)

789 
	#GL_TEXTURE_RED_SIZE
 0x805C

	)

790 
	#GL_TEXTURE_GREEN_SIZE
 0x805D

	)

791 
	#GL_TEXTURE_BLUE_SIZE
 0x805E

	)

792 
	#GL_TEXTURE_ALPHA_SIZE
 0x805F

	)

793 
	#GL_TEXTURE_LUMINANCE_SIZE
 0x8060

	)

794 
	#GL_TEXTURE_INTENSITY_SIZE
 0x8061

	)

795 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

796 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

797 
	#GL_TEXTURE_PRIORITY
 0x8066

	)

798 
	#GL_TEXTURE_RESIDENT
 0x8067

	)

799 
	#GL_TEXTURE_BINDING_1D
 0x8068

	)

800 
	#GL_TEXTURE_BINDING_2D
 0x8069

	)

801 
	#GL_VERTEX_ARRAY
 0x8074

	)

802 
	#GL_NORMAL_ARRAY
 0x8075

	)

803 
	#GL_COLOR_ARRAY
 0x8076

	)

804 
	#GL_INDEX_ARRAY
 0x8077

	)

805 
	#GL_TEXTURE_COORD_ARRAY
 0x8078

	)

806 
	#GL_EDGE_FLAG_ARRAY
 0x8079

	)

807 
	#GL_VERTEX_ARRAY_SIZE
 0x807A

	)

808 
	#GL_VERTEX_ARRAY_TYPE
 0x807B

	)

809 
	#GL_VERTEX_ARRAY_STRIDE
 0x807C

	)

810 
	#GL_NORMAL_ARRAY_TYPE
 0x807E

	)

811 
	#GL_NORMAL_ARRAY_STRIDE
 0x807F

	)

812 
	#GL_COLOR_ARRAY_SIZE
 0x8081

	)

813 
	#GL_COLOR_ARRAY_TYPE
 0x8082

	)

814 
	#GL_COLOR_ARRAY_STRIDE
 0x8083

	)

815 
	#GL_INDEX_ARRAY_TYPE
 0x8085

	)

816 
	#GL_INDEX_ARRAY_STRIDE
 0x8086

	)

817 
	#GL_TEXTURE_COORD_ARRAY_SIZE
 0x8088

	)

818 
	#GL_TEXTURE_COORD_ARRAY_TYPE
 0x8089

	)

819 
	#GL_TEXTURE_COORD_ARRAY_STRIDE
 0x808A

	)

820 
	#GL_EDGE_FLAG_ARRAY_STRIDE
 0x808C

	)

821 
	#GL_VERTEX_ARRAY_POINTER
 0x808E

	)

822 
	#GL_NORMAL_ARRAY_POINTER
 0x808F

	)

823 
	#GL_COLOR_ARRAY_POINTER
 0x8090

	)

824 
	#GL_INDEX_ARRAY_POINTER
 0x8091

	)

825 
	#GL_TEXTURE_COORD_ARRAY_POINTER
 0x8092

	)

826 
	#GL_EDGE_FLAG_ARRAY_POINTER
 0x8093

	)

827 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

828 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

829 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

830 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

831 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

832 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

833 
	#GL_EVAL_BIT
 0x00010000

	)

834 
	#GL_LIST_BIT
 0x00020000

	)

835 
	#GL_TEXTURE_BIT
 0x00040000

	)

836 
	#GL_SCISSOR_BIT
 0x00080000

	)

837 
	#GL_ALL_ATTRIB_BITS
 0x000fffff

	)

838 
	#GL_CLIENT_ALL_ATTRIB_BITS
 0xffffffff

	)

840 
GLAPI
 
GLAPIENTRY
 
glAccum
 (
GLíum
 
›
, 
GLÊﬂt
 
vÆue
);

841 
GLAPI
 
GLAPIENTRY
 
glAÕhaFunc
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

842 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glAªTextuªsResidít
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, GLboﬁó¿*
ªsidí˚s
);

843 
GLAPI
 
GLAPIENTRY
 
glAºayEÀmít
 (
GLöt
 
i
);

844 
GLAPI
 
GLAPIENTRY
 
glBegö
 (
GLíum
 
mode
);

845 
GLAPI
 
GLAPIENTRY
 
glBödTextuª
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

846 
GLAPI
 
GLAPIENTRY
 
glBôm≠
 (
GLsizei
 
width
, GLsizeò
height
, 
GLÊﬂt
 
x‹ig
, GLÊﬂà
y‹ig
, GLÊﬂà
xmove
, GLÊﬂà
ymove
, c⁄° 
GLubyã
 *
bôm≠
);

847 
GLAPI
 
GLAPIENTRY
 
glBÀndFunc
 (
GLíum
 
sÁ˘‹
, GLíum 
dÁ˘‹
);

848 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°
 (
GLuöt
 
li°
);

849 
GLAPI
 
GLAPIENTRY
 
glCÆlLi°s
 (
GLsizei
 
n
, 
GLíum
 
ty≥
, c⁄° 
GLvoid
 *
li°s
);

850 
GLAPI
 
GLAPIENTRY
 
glCÀ¨
 (
GLbôfõld
 
mask
);

851 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Accum
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

852 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Cﬁ‹
 (
GL˛ampf
 
ªd
, GL˛amp‡
gªí
, GL˛amp‡
blue
, GL˛amp‡
Æpha
);

853 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Dïth
 (
GL˛ampd
 
dïth
);

854 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Index
 (
GLÊﬂt
 
c
);

855 
GLAPI
 
GLAPIENTRY
 
glCÀ¨Sãncû
 (
GLöt
 
s
);

856 
GLAPI
 
GLAPIENTRY
 
glClùPœ√
 (
GLíum
 
∂™e
, c⁄° 
GLdoubÀ
 *
equ©i⁄
);

857 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3b
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

858 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3bv
 (c⁄° 
GLbyã
 *
v
);

859 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3d
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

860 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *
v
);

861 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

862 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *
v
);

863 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3i
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

864 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3iv
 (c⁄° 
GLöt
 *
v
);

865 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3s
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

866 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *
v
);

867 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

868 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ubv
 (c⁄° 
GLubyã
 *
v
);

869 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3ui
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

870 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3uiv
 (c⁄° 
GLuöt
 *
v
);

871 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3us
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

872 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹3usv
 (c⁄° 
GLush‹t
 *
v
);

873 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4b
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
, GLbyã 
Æpha
);

874 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4bv
 (c⁄° 
GLbyã
 *
v
);

875 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4d
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
, GLdoubÀ 
Æpha
);

876 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4dv
 (c⁄° 
GLdoubÀ
 *
v
);

877 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

878 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4fv
 (c⁄° 
GLÊﬂt
 *
v
);

879 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4i
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
, GLöà
Æpha
);

880 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4iv
 (c⁄° 
GLöt
 *
v
);

881 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4s
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
, GLsh‹à
Æpha
);

882 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4sv
 (c⁄° 
GLsh‹t
 *
v
);

883 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
, GLubyã 
Æpha
);

884 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ubv
 (c⁄° 
GLubyã
 *
v
);

885 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4ui
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
, GLuöà
Æpha
);

886 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4uiv
 (c⁄° 
GLuöt
 *
v
);

887 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4us
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
, GLush‹à
Æpha
);

888 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹4usv
 (c⁄° 
GLush‹t
 *
v
);

889 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Mask
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

890 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹M©îül
 (
GLíum
 
Á˚
, GLíum 
mode
);

891 
GLAPI
 
GLAPIENTRY
 
glCﬁ‹Poöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

892 
GLAPI
 
GLAPIENTRY
 
glC›yPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
ty≥
);

893 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫ÆF‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

894 
GLAPI
 
GLAPIENTRY
 
glC›yTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫ÆF‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

895 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

896 
GLAPI
 
GLAPIENTRY
 
glC›yTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

897 
GLAPI
 
GLAPIENTRY
 
glCuŒFa˚
 (
GLíum
 
mode
);

898 
GLAPI
 
GLAPIENTRY
 
glDñëeLi°s
 (
GLuöt
 
li°
, 
GLsizei
 
ønge
);

899 
GLAPI
 
GLAPIENTRY
 
glDñëeTextuªs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

900 
GLAPI
 
GLAPIENTRY
 
glDïthFunc
 (
GLíum
 
func
);

901 
GLAPI
 
GLAPIENTRY
 
glDïthMask
 (
GLboﬁón
 
Êag
);

902 
GLAPI
 
GLAPIENTRY
 
glDïthR™ge
 (
GL˛ampd
 
zNór
, GL˛ampd 
zF¨
);

903 
GLAPI
 
GLAPIENTRY
 
glDißbÀ
 (
GLíum
 
ˇp
);

904 
GLAPI
 
GLAPIENTRY
 
glDißbÀClõ¡Sèã
 (
GLíum
 
¨øy
);

905 
GLAPI
 
GLAPIENTRY
 
glDøwAºays
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

906 
GLAPI
 
GLAPIENTRY
 
glDøwBuf„r
 (
GLíum
 
mode
);

907 
GLAPI
 
GLAPIENTRY
 
glDøwEÀmíts
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
ödi˚s
);

908 
GLAPI
 
GLAPIENTRY
 
glDøwPixñs
 (
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

909 
GLAPI
 
GLAPIENTRY
 
glEdgeFœg
 (
GLboﬁón
 
Êag
);

910 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgPoöãr
 (
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

911 
GLAPI
 
GLAPIENTRY
 
glEdgeFœgv
 (c⁄° 
GLboﬁón
 *
Êag
);

912 
GLAPI
 
GLAPIENTRY
 
glE«bÀ
 (
GLíum
 
ˇp
);

913 
GLAPI
 
GLAPIENTRY
 
glE«bÀClõ¡Sèã
 (
GLíum
 
¨øy
);

914 
GLAPI
 
GLAPIENTRY
 
glEnd
 ();

915 
GLAPI
 
GLAPIENTRY
 
glEndLi°
 ();

916 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1d
 (
GLdoubÀ
 
u
);

917 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1dv
 (c⁄° 
GLdoubÀ
 *
u
);

918 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1f
 (
GLÊﬂt
 
u
);

919 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d1fv
 (c⁄° 
GLÊﬂt
 *
u
);

920 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2d
 (
GLdoubÀ
 
u
, GLdoubÀ 
v
);

921 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2dv
 (c⁄° 
GLdoubÀ
 *
u
);

922 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2f
 (
GLÊﬂt
 
u
, GLÊﬂà
v
);

923 
GLAPI
 
GLAPIENTRY
 
glEvÆCo‹d2fv
 (c⁄° 
GLÊﬂt
 *
u
);

924 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh1
 (
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
);

925 
GLAPI
 
GLAPIENTRY
 
glEvÆMesh2
 (
GLíum
 
mode
, 
GLöt
 
i1
, GLöà
i2
, GLöà
j1
, GLöà
j2
);

926 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt1
 (
GLöt
 
i
);

927 
GLAPI
 
GLAPIENTRY
 
glEvÆPoöt2
 (
GLöt
 
i
, GLöà
j
);

928 
GLAPI
 
GLAPIENTRY
 
glFìdbackBuf„r
 (
GLsizei
 
size
, 
GLíum
 
ty≥
, 
GLÊﬂt
 *
buf„r
);

929 
GLAPI
 
GLAPIENTRY
 
glFöish
 ();

930 
GLAPI
 
GLAPIENTRY
 
glFlush
 ();

931 
GLAPI
 
GLAPIENTRY
 
glFogf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

932 
GLAPI
 
GLAPIENTRY
 
glFogfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

933 
GLAPI
 
GLAPIENTRY
 
glFogi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

934 
GLAPI
 
GLAPIENTRY
 
glFogiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

935 
GLAPI
 
GLAPIENTRY
 
glFr⁄tFa˚
 (
GLíum
 
mode
);

936 
GLAPI
 
GLAPIENTRY
 
glFru°um
 (
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

937 
GLAPI
 
GLuöt
 
GLAPIENTRY
 
glGíLi°s
 (
GLsizei
 
ønge
);

938 
GLAPI
 
GLAPIENTRY
 
glGíTextuªs
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

939 
GLAPI
 
GLAPIENTRY
 
glGëBoﬁónv
 (
GLíum
 
≤ame
, 
GLboﬁón
 *
∑øms
);

940 
GLAPI
 
GLAPIENTRY
 
glGëClùPœ√
 (
GLíum
 
∂™e
, 
GLdoubÀ
 *
equ©i⁄
);

941 
GLAPI
 
GLAPIENTRY
 
glGëDoubÀv
 (
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

942 
GLAPI
 
GLíum
 
GLAPIENTRY
 
glGëEº‹
 ();

943 
GLAPI
 
GLAPIENTRY
 
glGëFlﬂtv
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

944 
GLAPI
 
GLAPIENTRY
 
glGëI¡egîv
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

945 
GLAPI
 
GLAPIENTRY
 
glGëLightfv
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

946 
GLAPI
 
GLAPIENTRY
 
glGëLightiv
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

947 
GLAPI
 
GLAPIENTRY
 
glGëM≠dv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLdoubÀ
 *
v
);

948 
GLAPI
 
GLAPIENTRY
 
glGëM≠fv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLÊﬂt
 *
v
);

949 
GLAPI
 
GLAPIENTRY
 
glGëM≠iv
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLöt
 *
v
);

950 
GLAPI
 
GLAPIENTRY
 
glGëM©îülfv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

951 
GLAPI
 
GLAPIENTRY
 
glGëM©îüliv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

952 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠fv
 (
GLíum
 
m≠
, 
GLÊﬂt
 *
vÆues
);

953 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠uiv
 (
GLíum
 
m≠
, 
GLuöt
 *
vÆues
);

954 
GLAPI
 
GLAPIENTRY
 
glGëPixñM≠usv
 (
GLíum
 
m≠
, 
GLush‹t
 *
vÆues
);

955 
GLAPI
 
GLAPIENTRY
 
glGëPoöãrv
 (
GLíum
 
≤ame
, 
GLvoid
* *
∑øms
);

956 
GLAPI
 
GLAPIENTRY
 
glGëPﬁyg⁄Stù∂e
 (
GLubyã
 *
mask
);

957 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
glGëSåög
 (
GLíum
 
«me
);

958 
GLAPI
 
GLAPIENTRY
 
glGëTexEnvfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

959 
GLAPI
 
GLAPIENTRY
 
glGëTexEnviv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

960 
GLAPI
 
GLAPIENTRY
 
glGëTexGídv
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

961 
GLAPI
 
GLAPIENTRY
 
glGëTexGífv
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

962 
GLAPI
 
GLAPIENTRY
 
glGëTexGíiv
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

963 
GLAPI
 
GLAPIENTRY
 
glGëTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
pixñs
);

964 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîfv
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

965 
GLAPI
 
GLAPIENTRY
 
glGëTexLevñP¨amëîiv
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

966 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

967 
GLAPI
 
GLAPIENTRY
 
glGëTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

968 
GLAPI
 
GLAPIENTRY
 
glHöt
 (
GLíum
 
èrgë
, GLíum 
mode
);

969 
GLAPI
 
GLAPIENTRY
 
glIndexMask
 (
GLuöt
 
mask
);

970 
GLAPI
 
GLAPIENTRY
 
glIndexPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

971 
GLAPI
 
GLAPIENTRY
 
glIndexd
 (
GLdoubÀ
 
c
);

972 
GLAPI
 
GLAPIENTRY
 
glIndexdv
 (c⁄° 
GLdoubÀ
 *
c
);

973 
GLAPI
 
GLAPIENTRY
 
glIndexf
 (
GLÊﬂt
 
c
);

974 
GLAPI
 
GLAPIENTRY
 
glIndexfv
 (c⁄° 
GLÊﬂt
 *
c
);

975 
GLAPI
 
GLAPIENTRY
 
glIndexi
 (
GLöt
 
c
);

976 
GLAPI
 
GLAPIENTRY
 
glIndexiv
 (c⁄° 
GLöt
 *
c
);

977 
GLAPI
 
GLAPIENTRY
 
glIndexs
 (
GLsh‹t
 
c
);

978 
GLAPI
 
GLAPIENTRY
 
glIndexsv
 (c⁄° 
GLsh‹t
 *
c
);

979 
GLAPI
 
GLAPIENTRY
 
glIndexub
 (
GLubyã
 
c
);

980 
GLAPI
 
GLAPIENTRY
 
glIndexubv
 (c⁄° 
GLubyã
 *
c
);

981 
GLAPI
 
GLAPIENTRY
 
glInôNames
 ();

982 
GLAPI
 
GLAPIENTRY
 
glI¡îÀavedAºays
 (
GLíum
 
f‹m©
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

983 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsE«bÀd
 (
GLíum
 
ˇp
);

984 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsLi°
 (
GLuöt
 
li°
);

985 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
glIsTextuª
 (
GLuöt
 
ãxtuª
);

986 
GLAPI
 
GLAPIENTRY
 
glLightModñf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

987 
GLAPI
 
GLAPIENTRY
 
glLightModñfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

988 
GLAPI
 
GLAPIENTRY
 
glLightModñi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

989 
GLAPI
 
GLAPIENTRY
 
glLightModñiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

990 
GLAPI
 
GLAPIENTRY
 
glLightf
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

991 
GLAPI
 
GLAPIENTRY
 
glLightfv
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

992 
GLAPI
 
GLAPIENTRY
 
glLighti
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

993 
GLAPI
 
GLAPIENTRY
 
glLightiv
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

994 
GLAPI
 
GLAPIENTRY
 
glLöeStù∂e
 (
GLöt
 
Á˘‹
, 
GLush‹t
 
∑âîn
);

995 
GLAPI
 
GLAPIENTRY
 
glLöeWidth
 (
GLÊﬂt
 
width
);

996 
GLAPI
 
GLAPIENTRY
 
glLi°Ba£
 (
GLuöt
 
ba£
);

997 
GLAPI
 
GLAPIENTRY
 
glLﬂdIdítôy
 ();

998 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

999 
GLAPI
 
GLAPIENTRY
 
glLﬂdM©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

1000 
GLAPI
 
GLAPIENTRY
 
glLﬂdName
 (
GLuöt
 
«me
);

1001 
GLAPI
 
GLAPIENTRY
 
glLogicOp
 (
GLíum
 
›code
);

1002 
GLAPI
 
GLAPIENTRY
 
glM≠1d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLdoubÀ *
poöts
);

1003 
GLAPI
 
GLAPIENTRY
 
glM≠1f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLÊﬂà*
poöts
);

1004 
GLAPI
 
GLAPIENTRY
 
glM≠2d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLdoubÀ *
poöts
);

1005 
GLAPI
 
GLAPIENTRY
 
glM≠2f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLÊﬂà*
poöts
);

1006 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1d
 (
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
);

1007 
GLAPI
 
GLAPIENTRY
 
glM≠Grid1f
 (
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
);

1008 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2d
 (
GLöt
 
un
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, GLöà
vn
, GLdoubÀ 
v1
, GLdoubÀ 
v2
);

1009 
GLAPI
 
GLAPIENTRY
 
glM≠Grid2f
 (
GLöt
 
un
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, GLöà
vn
, GLÊﬂà
v1
, GLÊﬂà
v2
);

1010 
GLAPI
 
GLAPIENTRY
 
glM©îülf
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

1011 
GLAPI
 
GLAPIENTRY
 
glM©îülfv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

1012 
GLAPI
 
GLAPIENTRY
 
glM©îüli
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

1013 
GLAPI
 
GLAPIENTRY
 
glM©îüliv
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1014 
GLAPI
 
GLAPIENTRY
 
glM©rixMode
 (
GLíum
 
mode
);

1015 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

1016 
GLAPI
 
GLAPIENTRY
 
glMu…M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

1017 
GLAPI
 
GLAPIENTRY
 
glNewLi°
 (
GLuöt
 
li°
, 
GLíum
 
mode
);

1018 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3b
 (
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
);

1019 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3bv
 (c⁄° 
GLbyã
 *
v
);

1020 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3d
 (
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
);

1021 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3dv
 (c⁄° 
GLdoubÀ
 *
v
);

1022 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3f
 (
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
);

1023 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3fv
 (c⁄° 
GLÊﬂt
 *
v
);

1024 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3i
 (
GLöt
 
nx
, GLöà
ny
, GLöà
nz
);

1025 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3iv
 (c⁄° 
GLöt
 *
v
);

1026 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3s
 (
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
);

1027 
GLAPI
 
GLAPIENTRY
 
glN‹mÆ3sv
 (c⁄° 
GLsh‹t
 *
v
);

1028 
GLAPI
 
GLAPIENTRY
 
glN‹mÆPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

1029 
GLAPI
 
GLAPIENTRY
 
glOπho
 (
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

1030 
GLAPI
 
GLAPIENTRY
 
glPassThrough
 (
GLÊﬂt
 
tokí
);

1031 
GLAPI
 
GLAPIENTRY
 
glPixñM≠fv
 (
GLíum
 
m≠
, 
GLsizei
 
m≠size
, c⁄° 
GLÊﬂt
 *
vÆues
);

1032 
GLAPI
 
GLAPIENTRY
 
glPixñM≠uiv
 (
GLíum
 
m≠
, 
GLsizei
 
m≠size
, c⁄° 
GLuöt
 *
vÆues
);

1033 
GLAPI
 
GLAPIENTRY
 
glPixñM≠usv
 (
GLíum
 
m≠
, 
GLsizei
 
m≠size
, c⁄° 
GLush‹t
 *
vÆues
);

1034 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ef
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

1035 
GLAPI
 
GLAPIENTRY
 
glPixñSt‹ei
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

1036 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„rf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

1037 
GLAPI
 
GLAPIENTRY
 
glPixñTøns„ri
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

1038 
GLAPI
 
GLAPIENTRY
 
glPixñZoom
 (
GLÊﬂt
 
xÁ˘‹
, GLÊﬂà
yÁ˘‹
);

1039 
GLAPI
 
GLAPIENTRY
 
glPoötSize
 (
GLÊﬂt
 
size
);

1040 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Mode
 (
GLíum
 
Á˚
, GLíum 
mode
);

1041 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Off£t
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

1042 
GLAPI
 
GLAPIENTRY
 
glPﬁyg⁄Stù∂e
 (c⁄° 
GLubyã
 *
mask
);

1043 
GLAPI
 
GLAPIENTRY
 
glP›Aârib
 ();

1044 
GLAPI
 
GLAPIENTRY
 
glP›Clõ¡Aârib
 ();

1045 
GLAPI
 
GLAPIENTRY
 
glP›M©rix
 ();

1046 
GLAPI
 
GLAPIENTRY
 
glP›Name
 ();

1047 
GLAPI
 
GLAPIENTRY
 
glPri‹ôizeTextuªs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GL˛ampf
 *
¥i‹ôõs
);

1048 
GLAPI
 
GLAPIENTRY
 
glPushAârib
 (
GLbôfõld
 
mask
);

1049 
GLAPI
 
GLAPIENTRY
 
glPushClõ¡Aârib
 (
GLbôfõld
 
mask
);

1050 
GLAPI
 
GLAPIENTRY
 
glPushM©rix
 ();

1051 
GLAPI
 
GLAPIENTRY
 
glPushName
 (
GLuöt
 
«me
);

1052 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

1053 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2dv
 (c⁄° 
GLdoubÀ
 *
v
);

1054 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

1055 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2fv
 (c⁄° 
GLÊﬂt
 *
v
);

1056 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2i
 (
GLöt
 
x
, GLöà
y
);

1057 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2iv
 (c⁄° 
GLöt
 *
v
);

1058 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2s
 (
GLsh‹t
 
x
, GLsh‹à
y
);

1059 
GLAPI
 
GLAPIENTRY
 
glRa°îPos2sv
 (c⁄° 
GLsh‹t
 *
v
);

1060 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1061 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3dv
 (c⁄° 
GLdoubÀ
 *
v
);

1062 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

1063 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3fv
 (c⁄° 
GLÊﬂt
 *
v
);

1064 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

1065 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3iv
 (c⁄° 
GLöt
 *
v
);

1066 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

1067 
GLAPI
 
GLAPIENTRY
 
glRa°îPos3sv
 (c⁄° 
GLsh‹t
 *
v
);

1068 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

1069 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4dv
 (c⁄° 
GLdoubÀ
 *
v
);

1070 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

1071 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4fv
 (c⁄° 
GLÊﬂt
 *
v
);

1072 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

1073 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4iv
 (c⁄° 
GLöt
 *
v
);

1074 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

1075 
GLAPI
 
GLAPIENTRY
 
glRa°îPos4sv
 (c⁄° 
GLsh‹t
 *
v
);

1076 
GLAPI
 
GLAPIENTRY
 
glRódBuf„r
 (
GLíum
 
mode
);

1077 
GLAPI
 
GLAPIENTRY
 
glRódPixñs
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, 
GLvoid
 *
pixñs
);

1078 
GLAPI
 
GLAPIENTRY
 
glRe˘d
 (
GLdoubÀ
 
x1
, GLdoubÀ 
y1
, GLdoubÀ 
x2
, GLdoubÀ 
y2
);

1079 
GLAPI
 
GLAPIENTRY
 
glRe˘dv
 (c⁄° 
GLdoubÀ
 *
v1
, c⁄° GLdoubÀ *
v2
);

1080 
GLAPI
 
GLAPIENTRY
 
glRe˘f
 (
GLÊﬂt
 
x1
, GLÊﬂà
y1
, GLÊﬂà
x2
, GLÊﬂà
y2
);

1081 
GLAPI
 
GLAPIENTRY
 
glRe˘fv
 (c⁄° 
GLÊﬂt
 *
v1
, c⁄° GLÊﬂà*
v2
);

1082 
GLAPI
 
GLAPIENTRY
 
glRe˘i
 (
GLöt
 
x1
, GLöà
y1
, GLöà
x2
, GLöà
y2
);

1083 
GLAPI
 
GLAPIENTRY
 
glRe˘iv
 (c⁄° 
GLöt
 *
v1
, c⁄° GLöà*
v2
);

1084 
GLAPI
 
GLAPIENTRY
 
glRe˘s
 (
GLsh‹t
 
x1
, GLsh‹à
y1
, GLsh‹à
x2
, GLsh‹à
y2
);

1085 
GLAPI
 
GLAPIENTRY
 
glRe˘sv
 (c⁄° 
GLsh‹t
 *
v1
, c⁄° GLsh‹à*
v2
);

1086 
GLAPI
 
GLöt
 
GLAPIENTRY
 
glRídîMode
 (
GLíum
 
mode
);

1087 
GLAPI
 
GLAPIENTRY
 
glRŸ©ed
 (
GLdoubÀ
 
™gÀ
, GLdoubÀ 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1088 
GLAPI
 
GLAPIENTRY
 
glRŸ©ef
 (
GLÊﬂt
 
™gÀ
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

1089 
GLAPI
 
GLAPIENTRY
 
glSˇÀd
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1090 
GLAPI
 
GLAPIENTRY
 
glSˇÀf
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

1091 
GLAPI
 
GLAPIENTRY
 
glSciss‹
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

1092 
GLAPI
 
GLAPIENTRY
 
glSñe˘Buf„r
 (
GLsizei
 
size
, 
GLuöt
 *
buf„r
);

1093 
GLAPI
 
GLAPIENTRY
 
glShadeModñ
 (
GLíum
 
mode
);

1094 
GLAPI
 
GLAPIENTRY
 
glSãncûFunc
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

1095 
GLAPI
 
GLAPIENTRY
 
glSãncûMask
 (
GLuöt
 
mask
);

1096 
GLAPI
 
GLAPIENTRY
 
glSãncûOp
 (
GLíum
 
Áû
, GLíum 
zÁû
, GLíum 
z∑ss
);

1097 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1d
 (
GLdoubÀ
 
s
);

1098 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1dv
 (c⁄° 
GLdoubÀ
 *
v
);

1099 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1f
 (
GLÊﬂt
 
s
);

1100 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1fv
 (c⁄° 
GLÊﬂt
 *
v
);

1101 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1i
 (
GLöt
 
s
);

1102 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1iv
 (c⁄° 
GLöt
 *
v
);

1103 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1s
 (
GLsh‹t
 
s
);

1104 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d1sv
 (c⁄° 
GLsh‹t
 *
v
);

1105 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2d
 (
GLdoubÀ
 
s
, GLdoubÀ 
t
);

1106 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2dv
 (c⁄° 
GLdoubÀ
 *
v
);

1107 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2f
 (
GLÊﬂt
 
s
, GLÊﬂà
t
);

1108 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2fv
 (c⁄° 
GLÊﬂt
 *
v
);

1109 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2i
 (
GLöt
 
s
, GLöà
t
);

1110 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2iv
 (c⁄° 
GLöt
 *
v
);

1111 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2s
 (
GLsh‹t
 
s
, GLsh‹à
t
);

1112 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d2sv
 (c⁄° 
GLsh‹t
 *
v
);

1113 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3d
 (
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

1114 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3dv
 (c⁄° 
GLdoubÀ
 *
v
);

1115 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3f
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

1116 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3fv
 (c⁄° 
GLÊﬂt
 *
v
);

1117 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3i
 (
GLöt
 
s
, GLöà
t
, GLöà
r
);

1118 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3iv
 (c⁄° 
GLöt
 *
v
);

1119 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3s
 (
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

1120 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d3sv
 (c⁄° 
GLsh‹t
 *
v
);

1121 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4d
 (
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

1122 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4dv
 (c⁄° 
GLdoubÀ
 *
v
);

1123 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4f
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

1124 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4fv
 (c⁄° 
GLÊﬂt
 *
v
);

1125 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4i
 (
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

1126 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4iv
 (c⁄° 
GLöt
 *
v
);

1127 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4s
 (
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

1128 
GLAPI
 
GLAPIENTRY
 
glTexCo‹d4sv
 (c⁄° 
GLsh‹t
 *
v
);

1129 
GLAPI
 
GLAPIENTRY
 
glTexCo‹dPoöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

1130 
GLAPI
 
GLAPIENTRY
 
glTexEnvf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

1131 
GLAPI
 
GLAPIENTRY
 
glTexEnvfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

1132 
GLAPI
 
GLAPIENTRY
 
glTexEnvi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

1133 
GLAPI
 
GLAPIENTRY
 
glTexEnviv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1134 
GLAPI
 
GLAPIENTRY
 
glTexGíd
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
);

1135 
GLAPI
 
GLAPIENTRY
 
glTexGídv
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

1136 
GLAPI
 
GLAPIENTRY
 
glTexGíf
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

1137 
GLAPI
 
GLAPIENTRY
 
glTexGífv
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

1138 
GLAPI
 
GLAPIENTRY
 
glTexGíi
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

1139 
GLAPI
 
GLAPIENTRY
 
glTexGíiv
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1140 
GLAPI
 
GLAPIENTRY
 
glTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1141 
GLAPI
 
GLAPIENTRY
 
glTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1142 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

1143 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

1144 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

1145 
GLAPI
 
GLAPIENTRY
 
glTexP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1146 
GLAPI
 
GLAPIENTRY
 
glTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1147 
GLAPI
 
GLAPIENTRY
 
glTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° 
GLvoid
 *
pixñs
);

1148 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ed
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1149 
GLAPI
 
GLAPIENTRY
 
glTøn¶©ef
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

1150 
GLAPI
 
GLAPIENTRY
 
glVîãx2d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

1151 
GLAPI
 
GLAPIENTRY
 
glVîãx2dv
 (c⁄° 
GLdoubÀ
 *
v
);

1152 
GLAPI
 
GLAPIENTRY
 
glVîãx2f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

1153 
GLAPI
 
GLAPIENTRY
 
glVîãx2fv
 (c⁄° 
GLÊﬂt
 *
v
);

1154 
GLAPI
 
GLAPIENTRY
 
glVîãx2i
 (
GLöt
 
x
, GLöà
y
);

1155 
GLAPI
 
GLAPIENTRY
 
glVîãx2iv
 (c⁄° 
GLöt
 *
v
);

1156 
GLAPI
 
GLAPIENTRY
 
glVîãx2s
 (
GLsh‹t
 
x
, GLsh‹à
y
);

1157 
GLAPI
 
GLAPIENTRY
 
glVîãx2sv
 (c⁄° 
GLsh‹t
 *
v
);

1158 
GLAPI
 
GLAPIENTRY
 
glVîãx3d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1159 
GLAPI
 
GLAPIENTRY
 
glVîãx3dv
 (c⁄° 
GLdoubÀ
 *
v
);

1160 
GLAPI
 
GLAPIENTRY
 
glVîãx3f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

1161 
GLAPI
 
GLAPIENTRY
 
glVîãx3fv
 (c⁄° 
GLÊﬂt
 *
v
);

1162 
GLAPI
 
GLAPIENTRY
 
glVîãx3i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

1163 
GLAPI
 
GLAPIENTRY
 
glVîãx3iv
 (c⁄° 
GLöt
 *
v
);

1164 
GLAPI
 
GLAPIENTRY
 
glVîãx3s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

1165 
GLAPI
 
GLAPIENTRY
 
glVîãx3sv
 (c⁄° 
GLsh‹t
 *
v
);

1166 
GLAPI
 
GLAPIENTRY
 
glVîãx4d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

1167 
GLAPI
 
GLAPIENTRY
 
glVîãx4dv
 (c⁄° 
GLdoubÀ
 *
v
);

1168 
GLAPI
 
GLAPIENTRY
 
glVîãx4f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

1169 
GLAPI
 
GLAPIENTRY
 
glVîãx4fv
 (c⁄° 
GLÊﬂt
 *
v
);

1170 
GLAPI
 
GLAPIENTRY
 
glVîãx4i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

1171 
GLAPI
 
GLAPIENTRY
 
glVîãx4iv
 (c⁄° 
GLöt
 *
v
);

1172 
GLAPI
 
GLAPIENTRY
 
glVîãx4s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

1173 
GLAPI
 
GLAPIENTRY
 
glVîãx4sv
 (c⁄° 
GLsh‹t
 *
v
);

1174 
GLAPI
 
GLAPIENTRY
 
glVîãxPoöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° 
GLvoid
 *
poöãr
);

1175 
GLAPI
 
GLAPIENTRY
 
glVõwp‹t
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

1177 
	#GLEW_VERSION_1_1
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_1_1
)

	)

1183 #i‚de‡
GLEW_NO_GLU


1185 #i‡
deföed
(
__APPLE__
Ë&& deföed(
__MACH__
)

1186 
	~<O≥nGL/glu.h
>

1188 
	~<GL/glu.h
>

1194 #i‚de‡
GL_VERSION_1_2


1195 
	#GL_VERSION_1_2
 1

	)

1197 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

1198 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

1199 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

1200 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

1201 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

1202 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

1203 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

1204 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

1205 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

1206 
	#GL_RESCALE_NORMAL
 0x803A

	)

1207 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

1208 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

1209 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

1210 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

1211 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

1212 
	#GL_TEXTURE_3D
 0x806F

	)

1213 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

1214 
	#GL_TEXTURE_DEPTH
 0x8071

	)

1215 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

1216 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

1217 
	#GL_BGR
 0x80E0

	)

1218 
	#GL_BGRA
 0x80E1

	)

1219 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

1220 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

1221 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

1222 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

1223 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

1224 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

1225 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

1226 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

1227 
	#GL_SINGLE_COLOR
 0x81F9

	)

1228 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

1229 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

1230 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

1231 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

1232 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

1233 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

1234 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

1235 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

1236 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

1238 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1239 (
GLAPIENTRY
 * 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

1240 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1241 (
GLAPIENTRY
 * 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

1243 
	#glC›yTexSubImage3D
 
	`GLEW_GET_FUN
(
__gÀwC›yTexSubImage3D
)

	)

1244 
	#glDøwR™geEÀmíts
 
	`GLEW_GET_FUN
(
__gÀwDøwR™geEÀmíts
)

	)

1245 
	#glTexImage3D
 
	`GLEW_GET_FUN
(
__gÀwTexImage3D
)

	)

1246 
	#glTexSubImage3D
 
	`GLEW_GET_FUN
(
__gÀwTexSubImage3D
)

	)

1248 
	#GLEW_VERSION_1_2
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_1_2
)

	)

1254 #i‚de‡
GL_VERSION_1_2_1


1255 
	#GL_VERSION_1_2_1
 1

	)

1257 
	#GLEW_VERSION_1_2_1
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_1_2_1
)

	)

1263 #i‚de‡
GL_VERSION_1_3


1264 
	#GL_VERSION_1_3
 1

	)

1266 
	#GL_MULTISAMPLE
 0x809D

	)

1267 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

1268 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

1269 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

1270 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

1271 
	#GL_SAMPLES
 0x80A9

	)

1272 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

1273 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

1274 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

1275 
	#GL_TEXTURE0
 0x84C0

	)

1276 
	#GL_TEXTURE1
 0x84C1

	)

1277 
	#GL_TEXTURE2
 0x84C2

	)

1278 
	#GL_TEXTURE3
 0x84C3

	)

1279 
	#GL_TEXTURE4
 0x84C4

	)

1280 
	#GL_TEXTURE5
 0x84C5

	)

1281 
	#GL_TEXTURE6
 0x84C6

	)

1282 
	#GL_TEXTURE7
 0x84C7

	)

1283 
	#GL_TEXTURE8
 0x84C8

	)

1284 
	#GL_TEXTURE9
 0x84C9

	)

1285 
	#GL_TEXTURE10
 0x84CA

	)

1286 
	#GL_TEXTURE11
 0x84CB

	)

1287 
	#GL_TEXTURE12
 0x84CC

	)

1288 
	#GL_TEXTURE13
 0x84CD

	)

1289 
	#GL_TEXTURE14
 0x84CE

	)

1290 
	#GL_TEXTURE15
 0x84CF

	)

1291 
	#GL_TEXTURE16
 0x84D0

	)

1292 
	#GL_TEXTURE17
 0x84D1

	)

1293 
	#GL_TEXTURE18
 0x84D2

	)

1294 
	#GL_TEXTURE19
 0x84D3

	)

1295 
	#GL_TEXTURE20
 0x84D4

	)

1296 
	#GL_TEXTURE21
 0x84D5

	)

1297 
	#GL_TEXTURE22
 0x84D6

	)

1298 
	#GL_TEXTURE23
 0x84D7

	)

1299 
	#GL_TEXTURE24
 0x84D8

	)

1300 
	#GL_TEXTURE25
 0x84D9

	)

1301 
	#GL_TEXTURE26
 0x84DA

	)

1302 
	#GL_TEXTURE27
 0x84DB

	)

1303 
	#GL_TEXTURE28
 0x84DC

	)

1304 
	#GL_TEXTURE29
 0x84DD

	)

1305 
	#GL_TEXTURE30
 0x84DE

	)

1306 
	#GL_TEXTURE31
 0x84DF

	)

1307 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

1308 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

1309 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

1310 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

1311 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

1312 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

1313 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

1314 
	#GL_SUBTRACT
 0x84E7

	)

1315 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

1316 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

1317 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

1318 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

1319 
	#GL_COMPRESSED_RGB
 0x84ED

	)

1320 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

1321 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

1322 
	#GL_NORMAL_MAP
 0x8511

	)

1323 
	#GL_REFLECTION_MAP
 0x8512

	)

1324 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

1325 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

1326 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

1327 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

1328 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

1329 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

1330 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

1331 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

1332 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

1333 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

1334 
	#GL_COMBINE
 0x8570

	)

1335 
	#GL_COMBINE_RGB
 0x8571

	)

1336 
	#GL_COMBINE_ALPHA
 0x8572

	)

1337 
	#GL_RGB_SCALE
 0x8573

	)

1338 
	#GL_ADD_SIGNED
 0x8574

	)

1339 
	#GL_INTERPOLATE
 0x8575

	)

1340 
	#GL_CONSTANT
 0x8576

	)

1341 
	#GL_PRIMARY_COLOR
 0x8577

	)

1342 
	#GL_PREVIOUS
 0x8578

	)

1343 
	#GL_SOURCE0_RGB
 0x8580

	)

1344 
	#GL_SOURCE1_RGB
 0x8581

	)

1345 
	#GL_SOURCE2_RGB
 0x8582

	)

1346 
	#GL_SOURCE0_ALPHA
 0x8588

	)

1347 
	#GL_SOURCE1_ALPHA
 0x8589

	)

1348 
	#GL_SOURCE2_ALPHA
 0x858A

	)

1349 
	#GL_OPERAND0_RGB
 0x8590

	)

1350 
	#GL_OPERAND1_RGB
 0x8591

	)

1351 
	#GL_OPERAND2_RGB
 0x8592

	)

1352 
	#GL_OPERAND0_ALPHA
 0x8598

	)

1353 
	#GL_OPERAND1_ALPHA
 0x8599

	)

1354 
	#GL_OPERAND2_ALPHA
 0x859A

	)

1355 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

1356 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

1357 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

1358 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

1359 
	#GL_DOT3_RGB
 0x86AE

	)

1360 
	#GL_DOT3_RGBA
 0x86AF

	)

1361 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

1363 (
GLAPIENTRY
 * 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1364 (
GLAPIENTRY
 * 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

1365 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1366 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1367 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1368 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1369 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1370 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

1371 (
GLAPIENTRY
 * 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLvoid
 *
	timg
);

1372 (
GLAPIENTRY
 * 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 
	tm
[16]);

1373 (
GLAPIENTRY
 * 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 
	tm
[16]);

1374 (
GLAPIENTRY
 * 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 
	tm
[16]);

1375 (
GLAPIENTRY
 * 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 
	tm
[16]);

1376 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

1377 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1378 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

1379 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1380 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

1381 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

1382 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

1383 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

1384 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

1385 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1386 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

1387 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1388 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

1389 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

1390 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

1391 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

1392 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

1393 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1394 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

1395 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1396 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

1397 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

1398 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

1399 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

1400 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

1401 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1402 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

1403 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1404 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

1405 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

1406 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

1407 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

1408 (
GLAPIENTRY
 * 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

1410 
	#glA˘iveTextuª
 
	`GLEW_GET_FUN
(
__gÀwA˘iveTextuª
)

	)

1411 
	#glClõ¡A˘iveTextuª
 
	`GLEW_GET_FUN
(
__gÀwClõ¡A˘iveTextuª
)

	)

1412 
	#glCom¥es£dTexImage1D
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexImage1D
)

	)

1413 
	#glCom¥es£dTexImage2D
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexImage2D
)

	)

1414 
	#glCom¥es£dTexImage3D
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexImage3D
)

	)

1415 
	#glCom¥es£dTexSubImage1D
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexSubImage1D
)

	)

1416 
	#glCom¥es£dTexSubImage2D
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexSubImage2D
)

	)

1417 
	#glCom¥es£dTexSubImage3D
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexSubImage3D
)

	)

1418 
	#glGëCom¥es£dTexImage
 
	`GLEW_GET_FUN
(
__gÀwGëCom¥es£dTexImage
)

	)

1419 
	#glLﬂdTøn•o£M©rixd
 
	`GLEW_GET_FUN
(
__gÀwLﬂdTøn•o£M©rixd
)

	)

1420 
	#glLﬂdTøn•o£M©rixf
 
	`GLEW_GET_FUN
(
__gÀwLﬂdTøn•o£M©rixf
)

	)

1421 
	#glMu…Tøn•o£M©rixd
 
	`GLEW_GET_FUN
(
__gÀwMu…Tøn•o£M©rixd
)

	)

1422 
	#glMu…Tøn•o£M©rixf
 
	`GLEW_GET_FUN
(
__gÀwMu…Tøn•o£M©rixf
)

	)

1423 
	#glMu…iTexCo‹d1d
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1d
)

	)

1424 
	#glMu…iTexCo‹d1dv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1dv
)

	)

1425 
	#glMu…iTexCo‹d1f
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1f
)

	)

1426 
	#glMu…iTexCo‹d1fv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1fv
)

	)

1427 
	#glMu…iTexCo‹d1i
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1i
)

	)

1428 
	#glMu…iTexCo‹d1iv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1iv
)

	)

1429 
	#glMu…iTexCo‹d1s
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1s
)

	)

1430 
	#glMu…iTexCo‹d1sv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1sv
)

	)

1431 
	#glMu…iTexCo‹d2d
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2d
)

	)

1432 
	#glMu…iTexCo‹d2dv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2dv
)

	)

1433 
	#glMu…iTexCo‹d2f
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2f
)

	)

1434 
	#glMu…iTexCo‹d2fv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2fv
)

	)

1435 
	#glMu…iTexCo‹d2i
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2i
)

	)

1436 
	#glMu…iTexCo‹d2iv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2iv
)

	)

1437 
	#glMu…iTexCo‹d2s
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2s
)

	)

1438 
	#glMu…iTexCo‹d2sv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2sv
)

	)

1439 
	#glMu…iTexCo‹d3d
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3d
)

	)

1440 
	#glMu…iTexCo‹d3dv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3dv
)

	)

1441 
	#glMu…iTexCo‹d3f
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3f
)

	)

1442 
	#glMu…iTexCo‹d3fv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3fv
)

	)

1443 
	#glMu…iTexCo‹d3i
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3i
)

	)

1444 
	#glMu…iTexCo‹d3iv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3iv
)

	)

1445 
	#glMu…iTexCo‹d3s
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3s
)

	)

1446 
	#glMu…iTexCo‹d3sv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3sv
)

	)

1447 
	#glMu…iTexCo‹d4d
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4d
)

	)

1448 
	#glMu…iTexCo‹d4dv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4dv
)

	)

1449 
	#glMu…iTexCo‹d4f
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4f
)

	)

1450 
	#glMu…iTexCo‹d4fv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4fv
)

	)

1451 
	#glMu…iTexCo‹d4i
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4i
)

	)

1452 
	#glMu…iTexCo‹d4iv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4iv
)

	)

1453 
	#glMu…iTexCo‹d4s
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4s
)

	)

1454 
	#glMu…iTexCo‹d4sv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4sv
)

	)

1455 
	#glSam∂eCovîage
 
	`GLEW_GET_FUN
(
__gÀwSam∂eCovîage
)

	)

1457 
	#GLEW_VERSION_1_3
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_1_3
)

	)

1463 #i‚de‡
GL_VERSION_1_4


1464 
	#GL_VERSION_1_4
 1

	)

1466 
	#GL_BLEND_DST_RGB
 0x80C8

	)

1467 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

1468 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

1469 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

1470 
	#GL_POINT_SIZE_MIN
 0x8126

	)

1471 
	#GL_POINT_SIZE_MAX
 0x8127

	)

1472 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

1473 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

1474 
	#GL_GENERATE_MIPMAP
 0x8191

	)

1475 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

1476 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

1477 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

1478 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

1479 
	#GL_MIRRORED_REPEAT
 0x8370

	)

1480 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

1481 
	#GL_FOG_COORDINATE
 0x8451

	)

1482 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

1483 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

1484 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

1485 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

1486 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

1487 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

1488 
	#GL_COLOR_SUM
 0x8458

	)

1489 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

1490 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

1491 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

1492 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

1493 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

1494 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

1495 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

1496 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

1497 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

1498 
	#GL_INCR_WRAP
 0x8507

	)

1499 
	#GL_DECR_WRAP
 0x8508

	)

1500 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

1501 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

1502 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

1503 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

1504 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

1506 (
GLAPIENTRY
 * 
	tPFNGLBLENDCOLORPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

1507 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

1508 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

1509 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

1510 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

1511 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

1512 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

1513 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

1514 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	tdøwcou¡
);

1515 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 **
	tödi˚s
, GLsizeò
	tdøwcou¡
);

1516 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

1517 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

1518 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

1519 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

1520 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

1521 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

1522 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

1523 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

1524 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

1525 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

1526 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

1527 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

1528 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

1529 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

1530 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

1531 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

1532 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

1533 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

1534 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

1535 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

1536 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

1537 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1538 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tp
);

1539 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

1540 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tp
);

1541 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

1542 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tp
);

1543 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

1544 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tp
);

1545 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1546 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tp
);

1547 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

1548 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tp
);

1549 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

1550 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tp
);

1551 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

1552 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tp
);

1554 
	#glBÀndCﬁ‹
 
	`GLEW_GET_FUN
(
__gÀwBÀndCﬁ‹
)

	)

1555 
	#glBÀndEqu©i⁄
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄
)

	)

1556 
	#glBÀndFuncSï¨©e
 
	`GLEW_GET_FUN
(
__gÀwBÀndFuncSï¨©e
)

	)

1557 
	#glFogCo‹dPoöãr
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dPoöãr
)

	)

1558 
	#glFogCo‹dd
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dd
)

	)

1559 
	#glFogCo‹ddv
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹ddv
)

	)

1560 
	#glFogCo‹df
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹df
)

	)

1561 
	#glFogCo‹dfv
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dfv
)

	)

1562 
	#glMu…iDøwAºays
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwAºays
)

	)

1563 
	#glMu…iDøwEÀmíts
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmíts
)

	)

1564 
	#glPoötP¨amëîf
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîf
)

	)

1565 
	#glPoötP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîfv
)

	)

1566 
	#glPoötP¨amëîi
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîi
)

	)

1567 
	#glPoötP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîiv
)

	)

1568 
	#glSec⁄d¨yCﬁ‹3b
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3b
)

	)

1569 
	#glSec⁄d¨yCﬁ‹3bv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3bv
)

	)

1570 
	#glSec⁄d¨yCﬁ‹3d
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3d
)

	)

1571 
	#glSec⁄d¨yCﬁ‹3dv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3dv
)

	)

1572 
	#glSec⁄d¨yCﬁ‹3f
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3f
)

	)

1573 
	#glSec⁄d¨yCﬁ‹3fv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3fv
)

	)

1574 
	#glSec⁄d¨yCﬁ‹3i
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3i
)

	)

1575 
	#glSec⁄d¨yCﬁ‹3iv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3iv
)

	)

1576 
	#glSec⁄d¨yCﬁ‹3s
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3s
)

	)

1577 
	#glSec⁄d¨yCﬁ‹3sv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3sv
)

	)

1578 
	#glSec⁄d¨yCﬁ‹3ub
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3ub
)

	)

1579 
	#glSec⁄d¨yCﬁ‹3ubv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3ubv
)

	)

1580 
	#glSec⁄d¨yCﬁ‹3ui
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3ui
)

	)

1581 
	#glSec⁄d¨yCﬁ‹3uiv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3uiv
)

	)

1582 
	#glSec⁄d¨yCﬁ‹3us
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3us
)

	)

1583 
	#glSec⁄d¨yCﬁ‹3usv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3usv
)

	)

1584 
	#glSec⁄d¨yCﬁ‹Poöãr
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹Poöãr
)

	)

1585 
	#glWödowPos2d
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2d
)

	)

1586 
	#glWödowPos2dv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2dv
)

	)

1587 
	#glWödowPos2f
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2f
)

	)

1588 
	#glWödowPos2fv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2fv
)

	)

1589 
	#glWödowPos2i
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2i
)

	)

1590 
	#glWödowPos2iv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2iv
)

	)

1591 
	#glWödowPos2s
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2s
)

	)

1592 
	#glWödowPos2sv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2sv
)

	)

1593 
	#glWödowPos3d
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3d
)

	)

1594 
	#glWödowPos3dv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3dv
)

	)

1595 
	#glWödowPos3f
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3f
)

	)

1596 
	#glWödowPos3fv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3fv
)

	)

1597 
	#glWödowPos3i
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3i
)

	)

1598 
	#glWödowPos3iv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3iv
)

	)

1599 
	#glWödowPos3s
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3s
)

	)

1600 
	#glWödowPos3sv
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3sv
)

	)

1602 
	#GLEW_VERSION_1_4
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_1_4
)

	)

1608 #i‚de‡
GL_VERSION_1_5


1609 
	#GL_VERSION_1_5
 1

	)

1611 
	#GL_FOG_COORD_SRC
 
GL_FOG_COORDINATE_SOURCE


	)

1612 
	#GL_FOG_COORD
 
GL_FOG_COORDINATE


	)

1613 
	#GL_FOG_COORD_ARRAY
 
GL_FOG_COORDINATE_ARRAY


	)

1614 
	#GL_SRC0_RGB
 
GL_SOURCE0_RGB


	)

1615 
	#GL_FOG_COORD_ARRAY_POINTER
 
GL_FOG_COORDINATE_ARRAY_POINTER


	)

1616 
	#GL_FOG_COORD_ARRAY_TYPE
 
GL_FOG_COORDINATE_ARRAY_TYPE


	)

1617 
	#GL_SRC1_ALPHA
 
GL_SOURCE1_ALPHA


	)

1618 
	#GL_CURRENT_FOG_COORD
 
GL_CURRENT_FOG_COORDINATE


	)

1619 
	#GL_FOG_COORD_ARRAY_STRIDE
 
GL_FOG_COORDINATE_ARRAY_STRIDE


	)

1620 
	#GL_SRC0_ALPHA
 
GL_SOURCE0_ALPHA


	)

1621 
	#GL_SRC1_RGB
 
GL_SOURCE1_RGB


	)

1622 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 
GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING


	)

1623 
	#GL_SRC2_ALPHA
 
GL_SOURCE2_ALPHA


	)

1624 
	#GL_SRC2_RGB
 
GL_SOURCE2_RGB


	)

1625 
	#GL_BUFFER_SIZE
 0x8764

	)

1626 
	#GL_BUFFER_USAGE
 0x8765

	)

1627 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

1628 
	#GL_CURRENT_QUERY
 0x8865

	)

1629 
	#GL_QUERY_RESULT
 0x8866

	)

1630 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

1631 
	#GL_ARRAY_BUFFER
 0x8892

	)

1632 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

1633 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

1634 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

1635 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

1636 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

1637 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

1638 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

1639 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

1640 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

1641 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

1642 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

1643 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

1644 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

1645 
	#GL_READ_ONLY
 0x88B8

	)

1646 
	#GL_WRITE_ONLY
 0x88B9

	)

1647 
	#GL_READ_WRITE
 0x88BA

	)

1648 
	#GL_BUFFER_ACCESS
 0x88BB

	)

1649 
	#GL_BUFFER_MAPPED
 0x88BC

	)

1650 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

1651 
	#GL_STREAM_DRAW
 0x88E0

	)

1652 
	#GL_STREAM_READ
 0x88E1

	)

1653 
	#GL_STREAM_COPY
 0x88E2

	)

1654 
	#GL_STATIC_DRAW
 0x88E4

	)

1655 
	#GL_STATIC_READ
 0x88E5

	)

1656 
	#GL_STATIC_COPY
 0x88E6

	)

1657 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

1658 
	#GL_DYNAMIC_READ
 0x88E9

	)

1659 
	#GL_DYNAMIC_COPY
 0x88EA

	)

1660 
	#GL_SAMPLES_PASSED
 0x8914

	)

1662 
±rdiff_t
 
	tGLöçå
;

1663 
±rdiff_t
 
	tGLsizeùå
;

1665 (
GLAPIENTRY
 * 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

1666 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

1667 (
GLAPIENTRY
 * 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
* 
	td©a
, GLíum 
	tußge
);

1668 (
GLAPIENTRY
 * 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
* 
	td©a
);

1669 (
GLAPIENTRY
 * 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tbuf„rs
);

1670 (
GLAPIENTRY
 * 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
);

1671 (
GLAPIENTRY
 * 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

1672 (
GLAPIENTRY
 * 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tbuf„rs
);

1673 (
GLAPIENTRY
 * 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

1674 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

1675 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
** 
	t∑øms
);

1676 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
* 
	td©a
);

1677 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

1678 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöt* 
	t∑øms
);

1679 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

1680 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

1681 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

1682 
	gGLvoid
* (
	tGLAPIENTRY
 * 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

1683 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

1685 
	#glBegöQuîy
 
	`GLEW_GET_FUN
(
__gÀwBegöQuîy
)

	)

1686 
	#glBödBuf„r
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„r
)

	)

1687 
	#glBuf„rD©a
 
	`GLEW_GET_FUN
(
__gÀwBuf„rD©a
)

	)

1688 
	#glBuf„rSubD©a
 
	`GLEW_GET_FUN
(
__gÀwBuf„rSubD©a
)

	)

1689 
	#glDñëeBuf„rs
 
	`GLEW_GET_FUN
(
__gÀwDñëeBuf„rs
)

	)

1690 
	#glDñëeQuîõs
 
	`GLEW_GET_FUN
(
__gÀwDñëeQuîõs
)

	)

1691 
	#glEndQuîy
 
	`GLEW_GET_FUN
(
__gÀwEndQuîy
)

	)

1692 
	#glGíBuf„rs
 
	`GLEW_GET_FUN
(
__gÀwGíBuf„rs
)

	)

1693 
	#glGíQuîõs
 
	`GLEW_GET_FUN
(
__gÀwGíQuîõs
)

	)

1694 
	#glGëBuf„rP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rP¨amëîiv
)

	)

1695 
	#glGëBuf„rPoöãrv
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rPoöãrv
)

	)

1696 
	#glGëBuf„rSubD©a
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rSubD©a
)

	)

1697 
	#glGëQuîyObje˘iv
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘iv
)

	)

1698 
	#glGëQuîyObje˘uiv
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘uiv
)

	)

1699 
	#glGëQuîyiv
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyiv
)

	)

1700 
	#glIsBuf„r
 
	`GLEW_GET_FUN
(
__gÀwIsBuf„r
)

	)

1701 
	#glIsQuîy
 
	`GLEW_GET_FUN
(
__gÀwIsQuîy
)

	)

1702 
	#glM≠Buf„r
 
	`GLEW_GET_FUN
(
__gÀwM≠Buf„r
)

	)

1703 
	#glUnm≠Buf„r
 
	`GLEW_GET_FUN
(
__gÀwUnm≠Buf„r
)

	)

1705 
	#GLEW_VERSION_1_5
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_1_5
)

	)

1711 #i‚de‡
GL_VERSION_2_0


1712 
	#GL_VERSION_2_0
 1

	)

1714 
	#GL_BLEND_EQUATION_RGB
 
GL_BLEND_EQUATION


	)

1715 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

1716 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

1717 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

1718 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

1719 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

1720 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

1721 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

1722 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

1723 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

1724 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

1725 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

1726 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

1727 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

1728 
	#GL_DRAW_BUFFER0
 0x8825

	)

1729 
	#GL_DRAW_BUFFER1
 0x8826

	)

1730 
	#GL_DRAW_BUFFER2
 0x8827

	)

1731 
	#GL_DRAW_BUFFER3
 0x8828

	)

1732 
	#GL_DRAW_BUFFER4
 0x8829

	)

1733 
	#GL_DRAW_BUFFER5
 0x882A

	)

1734 
	#GL_DRAW_BUFFER6
 0x882B

	)

1735 
	#GL_DRAW_BUFFER7
 0x882C

	)

1736 
	#GL_DRAW_BUFFER8
 0x882D

	)

1737 
	#GL_DRAW_BUFFER9
 0x882E

	)

1738 
	#GL_DRAW_BUFFER10
 0x882F

	)

1739 
	#GL_DRAW_BUFFER11
 0x8830

	)

1740 
	#GL_DRAW_BUFFER12
 0x8831

	)

1741 
	#GL_DRAW_BUFFER13
 0x8832

	)

1742 
	#GL_DRAW_BUFFER14
 0x8833

	)

1743 
	#GL_DRAW_BUFFER15
 0x8834

	)

1744 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

1745 
	#GL_POINT_SPRITE
 0x8861

	)

1746 
	#GL_COORD_REPLACE
 0x8862

	)

1747 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

1748 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

1749 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

1750 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

1751 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

1752 
	#GL_VERTEX_SHADER
 0x8B31

	)

1753 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

1754 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

1755 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

1756 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

1757 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

1758 
	#GL_SHADER_TYPE
 0x8B4F

	)

1759 
	#GL_FLOAT_VEC2
 0x8B50

	)

1760 
	#GL_FLOAT_VEC3
 0x8B51

	)

1761 
	#GL_FLOAT_VEC4
 0x8B52

	)

1762 
	#GL_INT_VEC2
 0x8B53

	)

1763 
	#GL_INT_VEC3
 0x8B54

	)

1764 
	#GL_INT_VEC4
 0x8B55

	)

1765 
	#GL_BOOL
 0x8B56

	)

1766 
	#GL_BOOL_VEC2
 0x8B57

	)

1767 
	#GL_BOOL_VEC3
 0x8B58

	)

1768 
	#GL_BOOL_VEC4
 0x8B59

	)

1769 
	#GL_FLOAT_MAT2
 0x8B5A

	)

1770 
	#GL_FLOAT_MAT3
 0x8B5B

	)

1771 
	#GL_FLOAT_MAT4
 0x8B5C

	)

1772 
	#GL_SAMPLER_1D
 0x8B5D

	)

1773 
	#GL_SAMPLER_2D
 0x8B5E

	)

1774 
	#GL_SAMPLER_3D
 0x8B5F

	)

1775 
	#GL_SAMPLER_CUBE
 0x8B60

	)

1776 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

1777 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

1778 
	#GL_DELETE_STATUS
 0x8B80

	)

1779 
	#GL_COMPILE_STATUS
 0x8B81

	)

1780 
	#GL_LINK_STATUS
 0x8B82

	)

1781 
	#GL_VALIDATE_STATUS
 0x8B83

	)

1782 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

1783 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

1784 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

1785 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

1786 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

1787 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

1788 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

1789 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

1790 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

1791 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

1792 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

1793 
	#GL_LOWER_LEFT
 0x8CA1

	)

1794 
	#GL_UPPER_LEFT
 0x8CA2

	)

1795 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

1796 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

1797 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

1799 (
GLAPIENTRY
 * 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

1800 (
GLAPIENTRY
 * 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
* 
	t«me
);

1801 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
, GLenum);

1802 (
GLAPIENTRY
 * 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

1803 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATEPROGRAMPROC
) ();

1804 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

1805 (
GLAPIENTRY
 * 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

1806 (
GLAPIENTRY
 * 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

1807 (
GLAPIENTRY
 * 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

1808 (
GLAPIENTRY
 * 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
);

1809 (
GLAPIENTRY
 * 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
* 
	tbufs
);

1810 (
GLAPIENTRY
 * 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
);

1811 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLöt
* 
	tsize
, 
	tGLíum
* 
	tty≥
, 
	tGLch¨
* 
	t«me
);

1812 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLöt
* 
	tsize
, 
	tGLíum
* 
	tty≥
, 
	tGLch¨
* 
	t«me
);

1813 (
GLAPIENTRY
 * 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizei* 
	tcou¡
, GLuöt* 
	tshadîs
);

1814 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
* 
	t«me
);

1815 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
* 
	töfoLog
);

1816 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øm
);

1817 (
GLAPIENTRY
 * 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
* 
	töfoLog
);

1818 (
GLAPIENTRY
 * 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLch¨
* 
	tsour˚
);

1819 (
GLAPIENTRY
 * 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øm
);

1820 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
* 
	t«me
);

1821 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
* 
	t∑øms
);

1822 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöt* 
	t∑øms
);

1823 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
, 
	tGLíum
, 
	tGLvoid
**);

1824 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
, 
	tGLíum
, 
	tGLdoubÀ
*);

1825 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
, 
	tGLíum
, 
	tGLÊﬂt
*);

1826 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
, 
	tGLíum
, 
	tGLöt
*);

1827 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

1828 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

1829 (
GLAPIENTRY
 * 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

1830 (
GLAPIENTRY
 * 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
** 
	t°rögs
, c⁄° 
	tGLöt
* 
	tÀngths
);

1831 (
GLAPIENTRY
 * 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

1832 (
GLAPIENTRY
 * 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
, 
	tGLuöt
);

1833 (
GLAPIENTRY
 * 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

1834 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

1835 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1836 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

1837 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

1838 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

1839 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1840 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

1841 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

1842 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

1843 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1844 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

1845 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

1846 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

1847 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1848 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

1849 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

1850 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1851 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1852 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

1853 (
GLAPIENTRY
 * 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

1854 (
GLAPIENTRY
 * 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

1855 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

1856 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

1857 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

1858 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

1859 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

1860 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

1861 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1862 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

1863 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

1864 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

1865 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

1866 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

1867 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1868 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

1869 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

1870 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

1871 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

1872 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

1873 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
* 
	tv
);

1874 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
* 
	tv
);

1875 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

1876 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

1877 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
* 
	tv
);

1878 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöt* 
	tv
);

1879 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
* 
	tv
);

1880 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
* 
	tv
);

1881 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1882 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

1883 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

1884 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

1885 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
* 
	tv
);

1886 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

1887 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

1888 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
* 
	tv
);

1889 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöt* 
	tv
);

1890 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
* 
	tv
);

1891 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
* 
	tpoöãr
);

1893 
	#glAâachShadî
 
	`GLEW_GET_FUN
(
__gÀwAâachShadî
)

	)

1894 
	#glBödAâribLoˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwBödAâribLoˇti⁄
)

	)

1895 
	#glBÀndEqu©i⁄Sï¨©e
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄Sï¨©e
)

	)

1896 
	#glCompûeShadî
 
	`GLEW_GET_FUN
(
__gÀwCompûeShadî
)

	)

1897 
	#glCª©eProgøm
 
	`GLEW_GET_FUN
(
__gÀwCª©eProgøm
)

	)

1898 
	#glCª©eShadî
 
	`GLEW_GET_FUN
(
__gÀwCª©eShadî
)

	)

1899 
	#glDñëeProgøm
 
	`GLEW_GET_FUN
(
__gÀwDñëeProgøm
)

	)

1900 
	#glDñëeShadî
 
	`GLEW_GET_FUN
(
__gÀwDñëeShadî
)

	)

1901 
	#glDëachShadî
 
	`GLEW_GET_FUN
(
__gÀwDëachShadî
)

	)

1902 
	#glDißbÀVîãxAâribAºay
 
	`GLEW_GET_FUN
(
__gÀwDißbÀVîãxAâribAºay
)

	)

1903 
	#glDøwBuf„rs
 
	`GLEW_GET_FUN
(
__gÀwDøwBuf„rs
)

	)

1904 
	#glE«bÀVîãxAâribAºay
 
	`GLEW_GET_FUN
(
__gÀwE«bÀVîãxAâribAºay
)

	)

1905 
	#glGëA˘iveAârib
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveAârib
)

	)

1906 
	#glGëA˘iveUnif‹m
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveUnif‹m
)

	)

1907 
	#glGëAâachedShadîs
 
	`GLEW_GET_FUN
(
__gÀwGëAâachedShadîs
)

	)

1908 
	#glGëAâribLoˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwGëAâribLoˇti⁄
)

	)

1909 
	#glGëProgømInfoLog
 
	`GLEW_GET_FUN
(
__gÀwGëProgømInfoLog
)

	)

1910 
	#glGëProgømiv
 
	`GLEW_GET_FUN
(
__gÀwGëProgømiv
)

	)

1911 
	#glGëShadîInfoLog
 
	`GLEW_GET_FUN
(
__gÀwGëShadîInfoLog
)

	)

1912 
	#glGëShadîSour˚
 
	`GLEW_GET_FUN
(
__gÀwGëShadîSour˚
)

	)

1913 
	#glGëShadîiv
 
	`GLEW_GET_FUN
(
__gÀwGëShadîiv
)

	)

1914 
	#glGëUnif‹mLoˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mLoˇti⁄
)

	)

1915 
	#glGëUnif‹mfv
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mfv
)

	)

1916 
	#glGëUnif‹miv
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹miv
)

	)

1917 
	#glGëVîãxAâribPoöãrv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribPoöãrv
)

	)

1918 
	#glGëVîãxAâribdv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribdv
)

	)

1919 
	#glGëVîãxAâribfv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribfv
)

	)

1920 
	#glGëVîãxAâribiv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribiv
)

	)

1921 
	#glIsProgøm
 
	`GLEW_GET_FUN
(
__gÀwIsProgøm
)

	)

1922 
	#glIsShadî
 
	`GLEW_GET_FUN
(
__gÀwIsShadî
)

	)

1923 
	#glLökProgøm
 
	`GLEW_GET_FUN
(
__gÀwLökProgøm
)

	)

1924 
	#glShadîSour˚
 
	`GLEW_GET_FUN
(
__gÀwShadîSour˚
)

	)

1925 
	#glSãncûFuncSï¨©e
 
	`GLEW_GET_FUN
(
__gÀwSãncûFuncSï¨©e
)

	)

1926 
	#glSãncûMaskSï¨©e
 
	`GLEW_GET_FUN
(
__gÀwSãncûMaskSï¨©e
)

	)

1927 
	#glSãncûOpSï¨©e
 
	`GLEW_GET_FUN
(
__gÀwSãncûOpSï¨©e
)

	)

1928 
	#glUnif‹m1f
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1f
)

	)

1929 
	#glUnif‹m1fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1fv
)

	)

1930 
	#glUnif‹m1i
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1i
)

	)

1931 
	#glUnif‹m1iv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1iv
)

	)

1932 
	#glUnif‹m2f
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2f
)

	)

1933 
	#glUnif‹m2fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2fv
)

	)

1934 
	#glUnif‹m2i
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2i
)

	)

1935 
	#glUnif‹m2iv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2iv
)

	)

1936 
	#glUnif‹m3f
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3f
)

	)

1937 
	#glUnif‹m3fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3fv
)

	)

1938 
	#glUnif‹m3i
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3i
)

	)

1939 
	#glUnif‹m3iv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3iv
)

	)

1940 
	#glUnif‹m4f
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4f
)

	)

1941 
	#glUnif‹m4fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4fv
)

	)

1942 
	#glUnif‹m4i
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4i
)

	)

1943 
	#glUnif‹m4iv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4iv
)

	)

1944 
	#glUnif‹mM©rix2fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2fv
)

	)

1945 
	#glUnif‹mM©rix3fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3fv
)

	)

1946 
	#glUnif‹mM©rix4fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4fv
)

	)

1947 
	#glU£Progøm
 
	`GLEW_GET_FUN
(
__gÀwU£Progøm
)

	)

1948 
	#glVÆid©eProgøm
 
	`GLEW_GET_FUN
(
__gÀwVÆid©eProgøm
)

	)

1949 
	#glVîãxAârib1d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1d
)

	)

1950 
	#glVîãxAârib1dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1dv
)

	)

1951 
	#glVîãxAârib1f
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1f
)

	)

1952 
	#glVîãxAârib1fv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1fv
)

	)

1953 
	#glVîãxAârib1s
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1s
)

	)

1954 
	#glVîãxAârib1sv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1sv
)

	)

1955 
	#glVîãxAârib2d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2d
)

	)

1956 
	#glVîãxAârib2dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2dv
)

	)

1957 
	#glVîãxAârib2f
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2f
)

	)

1958 
	#glVîãxAârib2fv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2fv
)

	)

1959 
	#glVîãxAârib2s
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2s
)

	)

1960 
	#glVîãxAârib2sv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2sv
)

	)

1961 
	#glVîãxAârib3d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3d
)

	)

1962 
	#glVîãxAârib3dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3dv
)

	)

1963 
	#glVîãxAârib3f
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3f
)

	)

1964 
	#glVîãxAârib3fv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3fv
)

	)

1965 
	#glVîãxAârib3s
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3s
)

	)

1966 
	#glVîãxAârib3sv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3sv
)

	)

1967 
	#glVîãxAârib4Nbv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Nbv
)

	)

1968 
	#glVîãxAârib4Niv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Niv
)

	)

1969 
	#glVîãxAârib4Nsv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Nsv
)

	)

1970 
	#glVîãxAârib4Nub
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Nub
)

	)

1971 
	#glVîãxAârib4Nubv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Nubv
)

	)

1972 
	#glVîãxAârib4Nuiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Nuiv
)

	)

1973 
	#glVîãxAârib4Nusv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4Nusv
)

	)

1974 
	#glVîãxAârib4bv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4bv
)

	)

1975 
	#glVîãxAârib4d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4d
)

	)

1976 
	#glVîãxAârib4dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4dv
)

	)

1977 
	#glVîãxAârib4f
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4f
)

	)

1978 
	#glVîãxAârib4fv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4fv
)

	)

1979 
	#glVîãxAârib4iv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4iv
)

	)

1980 
	#glVîãxAârib4s
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4s
)

	)

1981 
	#glVîãxAârib4sv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4sv
)

	)

1982 
	#glVîãxAârib4ubv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4ubv
)

	)

1983 
	#glVîãxAârib4uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4uiv
)

	)

1984 
	#glVîãxAârib4usv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4usv
)

	)

1985 
	#glVîãxAâribPoöãr
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribPoöãr
)

	)

1987 
	#GLEW_VERSION_2_0
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_2_0
)

	)

1993 #i‚de‡
GL_VERSION_2_1


1994 
	#GL_VERSION_2_1
 1

	)

1996 
	#GL_CURRENT_RASTER_SECONDARY_COLOR
 0x845F

	)

1997 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

1998 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

1999 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

2000 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

2001 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

2002 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

2003 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

2004 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

2005 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

2006 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

2007 
	#GL_SRGB
 0x8C40

	)

2008 
	#GL_SRGB8
 0x8C41

	)

2009 
	#GL_SRGB_ALPHA
 0x8C42

	)

2010 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

2011 
	#GL_SLUMINANCE_ALPHA
 0x8C44

	)

2012 
	#GL_SLUMINANCE8_ALPHA8
 0x8C45

	)

2013 
	#GL_SLUMINANCE
 0x8C46

	)

2014 
	#GL_SLUMINANCE8
 0x8C47

	)

2015 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

2016 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

2017 
	#GL_COMPRESSED_SLUMINANCE
 0x8C4A

	)

2018 
	#GL_COMPRESSED_SLUMINANCE_ALPHA
 0x8C4B

	)

2020 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2021 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2022 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2023 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2024 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2025 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

2027 
	#glUnif‹mM©rix2x3fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2x3fv
)

	)

2028 
	#glUnif‹mM©rix2x4fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2x4fv
)

	)

2029 
	#glUnif‹mM©rix3x2fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3x2fv
)

	)

2030 
	#glUnif‹mM©rix3x4fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3x4fv
)

	)

2031 
	#glUnif‹mM©rix4x2fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4x2fv
)

	)

2032 
	#glUnif‹mM©rix4x3fv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4x3fv
)

	)

2034 
	#GLEW_VERSION_2_1
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_2_1
)

	)

2040 #i‚de‡
GL_VERSION_3_0


2041 
	#GL_VERSION_3_0
 1

	)

2043 
	#GL_MAX_CLIP_DISTANCES
 
GL_MAX_CLIP_PLANES


	)

2044 
	#GL_CLIP_DISTANCE5
 
GL_CLIP_PLANE5


	)

2045 
	#GL_CLIP_DISTANCE1
 
GL_CLIP_PLANE1


	)

2046 
	#GL_CLIP_DISTANCE3
 
GL_CLIP_PLANE3


	)

2047 
	#GL_COMPARE_REF_TO_TEXTURE
 
GL_COMPARE_R_TO_TEXTURE_ARB


	)

2048 
	#GL_CLIP_DISTANCE0
 
GL_CLIP_PLANE0


	)

2049 
	#GL_CLIP_DISTANCE4
 
GL_CLIP_PLANE4


	)

2050 
	#GL_CLIP_DISTANCE2
 
GL_CLIP_PLANE2


	)

2051 
	#GL_MAX_VARYING_COMPONENTS
 
GL_MAX_VARYING_FLOATS


	)

2052 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x0001

	)

2053 
	#GL_MAJOR_VERSION
 0x821B

	)

2054 
	#GL_MINOR_VERSION
 0x821C

	)

2055 
	#GL_NUM_EXTENSIONS
 0x821D

	)

2056 
	#GL_CONTEXT_FLAGS
 0x821E

	)

2057 
	#GL_DEPTH_BUFFER
 0x8223

	)

2058 
	#GL_STENCIL_BUFFER
 0x8224

	)

2059 
	#GL_RGBA32F
 0x8814

	)

2060 
	#GL_RGB32F
 0x8815

	)

2061 
	#GL_RGBA16F
 0x881A

	)

2062 
	#GL_RGB16F
 0x881B

	)

2063 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

2064 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

2065 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

2066 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

2067 
	#GL_CLAMP_VERTEX_COLOR
 0x891A

	)

2068 
	#GL_CLAMP_FRAGMENT_COLOR
 0x891B

	)

2069 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

2070 
	#GL_FIXED_ONLY
 0x891D

	)

2071 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

2072 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

2073 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

2074 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

2075 
	#GL_TEXTURE_LUMINANCE_TYPE
 0x8C14

	)

2076 
	#GL_TEXTURE_INTENSITY_TYPE
 0x8C15

	)

2077 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

2078 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

2079 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

2080 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

2081 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

2082 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

2083 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

2084 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

2085 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

2086 
	#GL_RGB9_E5
 0x8C3D

	)

2087 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

2088 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

2089 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

2090 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

2091 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

2092 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

2093 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

2094 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

2095 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

2096 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

2097 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

2098 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

2099 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

2100 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

2101 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

2102 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

2103 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

2104 
	#GL_RGBA32UI
 0x8D70

	)

2105 
	#GL_RGB32UI
 0x8D71

	)

2106 
	#GL_RGBA16UI
 0x8D76

	)

2107 
	#GL_RGB16UI
 0x8D77

	)

2108 
	#GL_RGBA8UI
 0x8D7C

	)

2109 
	#GL_RGB8UI
 0x8D7D

	)

2110 
	#GL_RGBA32I
 0x8D82

	)

2111 
	#GL_RGB32I
 0x8D83

	)

2112 
	#GL_RGBA16I
 0x8D88

	)

2113 
	#GL_RGB16I
 0x8D89

	)

2114 
	#GL_RGBA8I
 0x8D8E

	)

2115 
	#GL_RGB8I
 0x8D8F

	)

2116 
	#GL_RED_INTEGER
 0x8D94

	)

2117 
	#GL_GREEN_INTEGER
 0x8D95

	)

2118 
	#GL_BLUE_INTEGER
 0x8D96

	)

2119 
	#GL_ALPHA_INTEGER
 0x8D97

	)

2120 
	#GL_RGB_INTEGER
 0x8D98

	)

2121 
	#GL_RGBA_INTEGER
 0x8D99

	)

2122 
	#GL_BGR_INTEGER
 0x8D9A

	)

2123 
	#GL_BGRA_INTEGER
 0x8D9B

	)

2124 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

2125 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

2126 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

2127 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

2128 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

2129 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

2130 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

2131 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

2132 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

2133 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

2134 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

2135 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

2136 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

2137 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

2138 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

2139 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

2140 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

2141 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

2142 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

2143 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

2144 
	#GL_QUERY_WAIT
 0x8E13

	)

2145 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

2146 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

2147 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

2149 (
GLAPIENTRY
 * 
	tPFNGLBEGINCONDITIONALRENDERPROC
Ë(
	tGLuöt
, 
	tGLíum
);

2150 (
GLAPIENTRY
 * 
	tPFNGLBEGINTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
);

2151 (
GLAPIENTRY
 * 
	tPFNGLBINDFRAGDATALOCATIONPROC
Ë(
	tGLuöt
, GLuöt, c⁄° 
	tGLch¨
*);

2152 (
GLAPIENTRY
 * 
	tPFNGLCLAMPCOLORPROC
Ë(
	tGLíum
, GLenum);

2153 (
GLAPIENTRY
 * 
	tPFNGLCLEARBUFFERFIPROC
Ë(
	tGLíum
, 
	tGLöt
, 
	tGLÊﬂt
, GLint);

2154 (
GLAPIENTRY
 * 
	tPFNGLCLEARBUFFERFVPROC
Ë(
	tGLíum
, 
	tGLöt
, c⁄° 
	tGLÊﬂt
*);

2155 (
GLAPIENTRY
 * 
	tPFNGLCLEARBUFFERIVPROC
Ë(
	tGLíum
, 
	tGLöt
, const GLint*);

2156 (
GLAPIENTRY
 * 
	tPFNGLCLEARBUFFERUIVPROC
Ë(
	tGLíum
, 
	tGLöt
, c⁄° 
	tGLuöt
*);

2157 (
GLAPIENTRY
 * 
	tPFNGLCOLORMASKIPROC
Ë(
	tGLuöt
, 
	tGLboﬁón
, GLboolean, GLboolean, GLboolean);

2158 (
GLAPIENTRY
 * 
	tPFNGLDISABLEIPROC
Ë(
	tGLíum
, 
	tGLuöt
);

2159 (
GLAPIENTRY
 * 
	tPFNGLENABLEIPROC
Ë(
	tGLíum
, 
	tGLuöt
);

2160 (
GLAPIENTRY
 * 
	tPFNGLENDCONDITIONALRENDERPROC
) ();

2161 (
GLAPIENTRY
 * 
	tPFNGLENDTRANSFORMFEEDBACKPROC
) ();

2162 (
GLAPIENTRY
 * 
	tPFNGLGETBOOLEANI_VPROC
Ë(
	tGLíum
, 
	tGLuöt
, 
	tGLboﬁón
*);

2163 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETFRAGDATALOCATIONPROC
Ë(
	tGLuöt
, c⁄° 
	tGLch¨
*);

2164 c⁄° 
	tGLubyã
* (
	tGLAPIENTRY
 * 
	tPFNGLGETSTRINGIPROC
Ë(
	tGLíum
, 
	tGLuöt
);

2165 (
GLAPIENTRY
 * 
	tPFNGLGETTEXPARAMETERIIVPROC
Ë(
	tGLíum
, GLíum, 
	tGLöt
*);

2166 (
GLAPIENTRY
 * 
	tPFNGLGETTEXPARAMETERIUIVPROC
Ë(
	tGLíum
, GLíum, 
	tGLuöt
*);

2167 (
GLAPIENTRY
 * 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGPROC
Ë(
	tGLuöt
, GLuöt, 
	tGLsizei
, GLsizeò*, GLsizeò*, 
	tGLíum
 *, 
	tGLch¨
 *);

2168 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMUIVPROC
Ë(
	tGLuöt
, 
	tGLöt
, GLuint*);

2169 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIIVPROC
Ë(
	tGLuöt
, 
	tGLíum
, 
	tGLöt
*);

2170 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIUIVPROC
Ë(
	tGLuöt
, 
	tGLíum
, GLuint*);

2171 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISENABLEDIPROC
Ë(
	tGLíum
, 
	tGLuöt
);

2172 (
GLAPIENTRY
 * 
	tPFNGLTEXPARAMETERIIVPROC
Ë(
	tGLíum
, GLíum, c⁄° 
	tGLöt
*);

2173 (
GLAPIENTRY
 * 
	tPFNGLTEXPARAMETERIUIVPROC
Ë(
	tGLíum
, GLíum, c⁄° 
	tGLuöt
*);

2174 (
GLAPIENTRY
 * 
	tPFNGLTRANSFORMFEEDBACKVARYINGSPROC
Ë(
	tGLuöt
, 
	tGLsizei
, c⁄° 
	tGLch¨
 **, 
	tGLíum
);

2175 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1UIPROC
Ë(
	tGLöt
, 
	tGLuöt
);

2176 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1UIVPROC
Ë(
	tGLöt
, 
	tGLsizei
, c⁄° 
	tGLuöt
*);

2177 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2UIPROC
Ë(
	tGLöt
, 
	tGLuöt
, GLuint);

2178 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2UIVPROC
Ë(
	tGLöt
, 
	tGLsizei
, c⁄° 
	tGLuöt
*);

2179 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3UIPROC
Ë(
	tGLöt
, 
	tGLuöt
, GLuint, GLuint);

2180 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3UIVPROC
Ë(
	tGLöt
, 
	tGLsizei
, c⁄° 
	tGLuöt
*);

2181 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4UIPROC
Ë(
	tGLöt
, 
	tGLuöt
, GLuint, GLuint, GLuint);

2182 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4UIVPROC
Ë(
	tGLöt
, 
	tGLsizei
, c⁄° 
	tGLuöt
*);

2183 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1IPROC
Ë(
	tGLuöt
, 
	tGLöt
);

2184 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1IVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLöt
*);

2185 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1UIPROC
Ë(
	tGLuöt
, GLuint);

2186 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1UIVPROC
Ë(
	tGLuöt
, const GLuint*);

2187 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2IPROC
Ë(
	tGLuöt
, 
	tGLöt
, GLint);

2188 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2IVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLöt
*);

2189 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2UIPROC
Ë(
	tGLuöt
, GLuint, GLuint);

2190 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2UIVPROC
Ë(
	tGLuöt
, const GLuint*);

2191 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3IPROC
Ë(
	tGLuöt
, 
	tGLöt
, GLint, GLint);

2192 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3IVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLöt
*);

2193 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3UIPROC
Ë(
	tGLuöt
, GLuint, GLuint, GLuint);

2194 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3UIVPROC
Ë(
	tGLuöt
, const GLuint*);

2195 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4BVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLbyã
*);

2196 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4IPROC
Ë(
	tGLuöt
, 
	tGLöt
, GLint, GLint, GLint);

2197 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4IVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLöt
*);

2198 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4SVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLsh‹t
*);

2199 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4UBVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLubyã
*);

2200 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4UIPROC
Ë(
	tGLuöt
, GLuint, GLuint, GLuint, GLuint);

2201 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4UIVPROC
Ë(
	tGLuöt
, const GLuint*);

2202 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4USVPROC
Ë(
	tGLuöt
, c⁄° 
	tGLush‹t
*);

2203 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBIPOINTERPROC
Ë(
	tGLuöt
, 
	tGLöt
, 
	tGLíum
, 
	tGLsizei
, c⁄° 
	tGLvoid
*);

2205 
	#glBegöC⁄dôi⁄ÆRídî
 
	`GLEW_GET_FUN
(
__gÀwBegöC⁄dôi⁄ÆRídî
)

	)

2206 
	#glBegöTønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwBegöTønsf‹mFìdback
)

	)

2207 
	#glBödFøgD©aLoˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwBödFøgD©aLoˇti⁄
)

	)

2208 
	#glCœmpCﬁ‹
 
	`GLEW_GET_FUN
(
__gÀwCœmpCﬁ‹
)

	)

2209 
	#glCÀ¨Buf„rfi
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Buf„rfi
)

	)

2210 
	#glCÀ¨Buf„rfv
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Buf„rfv
)

	)

2211 
	#glCÀ¨Buf„riv
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Buf„riv
)

	)

2212 
	#glCÀ¨Buf„ruiv
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Buf„ruiv
)

	)

2213 
	#glCﬁ‹Maski
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹Maski
)

	)

2214 
	#glDißbÀi
 
	`GLEW_GET_FUN
(
__gÀwDißbÀi
)

	)

2215 
	#glE«bÀi
 
	`GLEW_GET_FUN
(
__gÀwE«bÀi
)

	)

2216 
	#glEndC⁄dôi⁄ÆRídî
 
	`GLEW_GET_FUN
(
__gÀwEndC⁄dôi⁄ÆRídî
)

	)

2217 
	#glEndTønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwEndTønsf‹mFìdback
)

	)

2218 
	#glGëBoﬁóni_v
 
	`GLEW_GET_FUN
(
__gÀwGëBoﬁóni_v
)

	)

2219 
	#glGëFøgD©aLoˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwGëFøgD©aLoˇti⁄
)

	)

2220 
	#glGëSåögi
 
	`GLEW_GET_FUN
(
__gÀwGëSåögi
)

	)

2221 
	#glGëTexP¨amëîIiv
 
	`GLEW_GET_FUN
(
__gÀwGëTexP¨amëîIiv
)

	)

2222 
	#glGëTexP¨amëîIuiv
 
	`GLEW_GET_FUN
(
__gÀwGëTexP¨amëîIuiv
)

	)

2223 
	#glGëTønsf‹mFìdbackV¨yög
 
	`GLEW_GET_FUN
(
__gÀwGëTønsf‹mFìdbackV¨yög
)

	)

2224 
	#glGëUnif‹muiv
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹muiv
)

	)

2225 
	#glGëVîãxAâribIiv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribIiv
)

	)

2226 
	#glGëVîãxAâribIuiv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribIuiv
)

	)

2227 
	#glIsE«bÀdi
 
	`GLEW_GET_FUN
(
__gÀwIsE«bÀdi
)

	)

2228 
	#glTexP¨amëîIiv
 
	`GLEW_GET_FUN
(
__gÀwTexP¨amëîIiv
)

	)

2229 
	#glTexP¨amëîIuiv
 
	`GLEW_GET_FUN
(
__gÀwTexP¨amëîIuiv
)

	)

2230 
	#glTønsf‹mFìdbackV¨yögs
 
	`GLEW_GET_FUN
(
__gÀwTønsf‹mFìdbackV¨yögs
)

	)

2231 
	#glUnif‹m1ui
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1ui
)

	)

2232 
	#glUnif‹m1uiv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1uiv
)

	)

2233 
	#glUnif‹m2ui
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2ui
)

	)

2234 
	#glUnif‹m2uiv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2uiv
)

	)

2235 
	#glUnif‹m3ui
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3ui
)

	)

2236 
	#glUnif‹m3uiv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3uiv
)

	)

2237 
	#glUnif‹m4ui
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4ui
)

	)

2238 
	#glUnif‹m4uiv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4uiv
)

	)

2239 
	#glVîãxAâribI1i
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1i
)

	)

2240 
	#glVîãxAâribI1iv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1iv
)

	)

2241 
	#glVîãxAâribI1ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1ui
)

	)

2242 
	#glVîãxAâribI1uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1uiv
)

	)

2243 
	#glVîãxAâribI2i
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2i
)

	)

2244 
	#glVîãxAâribI2iv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2iv
)

	)

2245 
	#glVîãxAâribI2ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2ui
)

	)

2246 
	#glVîãxAâribI2uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2uiv
)

	)

2247 
	#glVîãxAâribI3i
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3i
)

	)

2248 
	#glVîãxAâribI3iv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3iv
)

	)

2249 
	#glVîãxAâribI3ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3ui
)

	)

2250 
	#glVîãxAâribI3uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3uiv
)

	)

2251 
	#glVîãxAâribI4bv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4bv
)

	)

2252 
	#glVîãxAâribI4i
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4i
)

	)

2253 
	#glVîãxAâribI4iv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4iv
)

	)

2254 
	#glVîãxAâribI4sv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4sv
)

	)

2255 
	#glVîãxAâribI4ubv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4ubv
)

	)

2256 
	#glVîãxAâribI4ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4ui
)

	)

2257 
	#glVîãxAâribI4uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4uiv
)

	)

2258 
	#glVîãxAâribI4usv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4usv
)

	)

2259 
	#glVîãxAâribIPoöãr
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribIPoöãr
)

	)

2261 
	#GLEW_VERSION_3_0
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_3_0
)

	)

2267 #i‚de‡
GL_VERSION_3_1


2268 
	#GL_VERSION_3_1
 1

	)

2270 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

2271 
	#GL_TEXTURE_BINDING_RECTANGLE
 0x84F6

	)

2272 
	#GL_PROXY_TEXTURE_RECTANGLE
 0x84F7

	)

2273 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE
 0x84F8

	)

2274 
	#GL_SAMPLER_2D_RECT
 0x8B63

	)

2275 
	#GL_SAMPLER_2D_RECT_SHADOW
 0x8B64

	)

2276 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

2277 
	#GL_MAX_TEXTURE_BUFFER_SIZE
 0x8C2B

	)

2278 
	#GL_TEXTURE_BINDING_BUFFER
 0x8C2C

	)

2279 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING
 0x8C2D

	)

2280 
	#GL_TEXTURE_BUFFER_FORMAT
 0x8C2E

	)

2281 
	#GL_SAMPLER_BUFFER
 0x8DC2

	)

2282 
	#GL_INT_SAMPLER_2D_RECT
 0x8DCD

	)

2283 
	#GL_INT_SAMPLER_BUFFER
 0x8DD0

	)

2284 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT
 0x8DD5

	)

2285 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER
 0x8DD8

	)

2286 
	#GL_RED_SNORM
 0x8F90

	)

2287 
	#GL_RG_SNORM
 0x8F91

	)

2288 
	#GL_RGB_SNORM
 0x8F92

	)

2289 
	#GL_RGBA_SNORM
 0x8F93

	)

2290 
	#GL_R8_SNORM
 0x8F94

	)

2291 
	#GL_RG8_SNORM
 0x8F95

	)

2292 
	#GL_RGB8_SNORM
 0x8F96

	)

2293 
	#GL_RGBA8_SNORM
 0x8F97

	)

2294 
	#GL_R16_SNORM
 0x8F98

	)

2295 
	#GL_RG16_SNORM
 0x8F99

	)

2296 
	#GL_RGB16_SNORM
 0x8F9A

	)

2297 
	#GL_RGBA16_SNORM
 0x8F9B

	)

2298 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

2299 
	#GL_PRIMITIVE_RESTART
 0x8F9D

	)

2300 
	#GL_PRIMITIVE_RESTART_INDEX
 0x8F9E

	)

2301 
	#GL_BUFFER_ACCESS_FLAGS
 0x911F

	)

2302 
	#GL_BUFFER_MAP_LENGTH
 0x9120

	)

2303 
	#GL_BUFFER_MAP_OFFSET
 0x9121

	)

2305 (
GLAPIENTRY
 * 
	tPFNGLDRAWARRAYSINSTANCEDPROC
Ë(
	tGLíum
, 
	tGLöt
, 
	tGLsizei
, GLsizei);

2306 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINSTANCEDPROC
Ë(
	tGLíum
, 
	tGLsizei
, GLíum, c⁄° 
	tGLvoid
*, GLsizei);

2307 (
GLAPIENTRY
 * 
	tPFNGLPRIMITIVERESTARTINDEXPROC
Ë(
	tGLuöt
);

2308 (
GLAPIENTRY
 * 
	tPFNGLTEXBUFFERPROC
Ë(
	tGLíum
, GLíum, 
	tGLuöt
);

2310 
	#glDøwAºaysIn°™˚d
 
	`GLEW_GET_FUN
(
__gÀwDøwAºaysIn°™˚d
)

	)

2311 
	#glDøwEÀmítsIn°™˚d
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIn°™˚d
)

	)

2312 
	#glPrimôiveRe°¨tIndex
 
	`GLEW_GET_FUN
(
__gÀwPrimôiveRe°¨tIndex
)

	)

2313 
	#glTexBuf„r
 
	`GLEW_GET_FUN
(
__gÀwTexBuf„r
)

	)

2315 
	#GLEW_VERSION_3_1
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_3_1
)

	)

2321 #i‚de‡
GL_VERSION_3_2


2322 
	#GL_VERSION_3_2
 1

	)

2324 
	#GL_CONTEXT_CORE_PROFILE_BIT
 0x00000001

	)

2325 
	#GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

2326 
	#GL_LINES_ADJACENCY
 0x000A

	)

2327 
	#GL_LINE_STRIP_ADJACENCY
 0x000B

	)

2328 
	#GL_TRIANGLES_ADJACENCY
 0x000C

	)

2329 
	#GL_TRIANGLE_STRIP_ADJACENCY
 0x000D

	)

2330 
	#GL_PROGRAM_POINT_SIZE
 0x8642

	)

2331 
	#GL_GEOMETRY_VERTICES_OUT
 0x8916

	)

2332 
	#GL_GEOMETRY_INPUT_TYPE
 0x8917

	)

2333 
	#GL_GEOMETRY_OUTPUT_TYPE
 0x8918

	)

2334 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
 0x8C29

	)

2335 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED
 0x8DA7

	)

2336 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
 0x8DA8

	)

2337 
	#GL_GEOMETRY_SHADER
 0x8DD9

	)

2338 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
 0x8DDF

	)

2339 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES
 0x8DE0

	)

2340 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
 0x8DE1

	)

2341 
	#GL_MAX_VERTEX_OUTPUT_COMPONENTS
 0x9122

	)

2342 
	#GL_MAX_GEOMETRY_INPUT_COMPONENTS
 0x9123

	)

2343 
	#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
 0x9124

	)

2344 
	#GL_MAX_FRAGMENT_INPUT_COMPONENTS
 0x9125

	)

2345 
	#GL_CONTEXT_PROFILE_MASK
 0x9126

	)

2347 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTUREPROC
Ë(
	tGLíum
, GLíum, 
	tGLuöt
, 
	tGLöt
);

2348 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERPARAMETERI64VPROC
Ë(
	tGLíum
, GLíum, 
	tGLöt64
 *);

2349 (
GLAPIENTRY
 * 
	tPFNGLGETINTEGER64I_VPROC
Ë(
	tGLíum
, 
	tGLuöt
, 
	tGLöt64
 *);

2351 
	#glFømebuf„rTextuª
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª
)

	)

2352 
	#glGëBuf„rP¨amëîi64v
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rP¨amëîi64v
)

	)

2353 
	#glGëI¡egî64i_v
 
	`GLEW_GET_FUN
(
__gÀwGëI¡egî64i_v
)

	)

2355 
	#GLEW_VERSION_3_2
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_3_2
)

	)

2361 #i‚de‡
GL_VERSION_3_3


2362 
	#GL_VERSION_3_3
 1

	)

2364 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR
 0x88FE

	)

2365 
	#GL_RGB10_A2UI
 0x906F

	)

2367 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBDIVISORPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

2369 
	#glVîãxAâribDivis‹
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribDivis‹
)

	)

2371 
	#GLEW_VERSION_3_3
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_3_3
)

	)

2377 #i‚de‡
GL_VERSION_4_0


2378 
	#GL_VERSION_4_0
 1

	)

2380 
	#GL_SAMPLE_SHADING
 0x8C36

	)

2381 
	#GL_MIN_SAMPLE_SHADING_VALUE
 0x8C37

	)

2382 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5E

	)

2383 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5F

	)

2384 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS
 0x8F9F

	)

2385 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

2386 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
 0x900A

	)

2387 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
 0x900B

	)

2388 
	#GL_SAMPLER_CUBE_MAP_ARRAY
 0x900C

	)

2389 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
 0x900D

	)

2390 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900E

	)

2391 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900F

	)

2393 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

2394 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

2395 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

2396 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

2397 (
GLAPIENTRY
 * 
	tPFNGLMINSAMPLESHADINGPROC
Ë(
	tGL˛ampf
 
	tvÆue
);

2399 
	#glBÀndEqu©i⁄Sï¨©ei
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄Sï¨©ei
)

	)

2400 
	#glBÀndEqu©i⁄i
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄i
)

	)

2401 
	#glBÀndFuncSï¨©ei
 
	`GLEW_GET_FUN
(
__gÀwBÀndFuncSï¨©ei
)

	)

2402 
	#glBÀndFunci
 
	`GLEW_GET_FUN
(
__gÀwBÀndFunci
)

	)

2403 
	#glMöSam∂eShadög
 
	`GLEW_GET_FUN
(
__gÀwMöSam∂eShadög
)

	)

2405 
	#GLEW_VERSION_4_0
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_4_0
)

	)

2411 #i‚de‡
GL_VERSION_4_1


2412 
	#GL_VERSION_4_1
 1

	)

2414 
	#GLEW_VERSION_4_1
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_4_1
)

	)

2420 #i‚de‡
GL_VERSION_4_2


2421 
	#GL_VERSION_4_2
 1

	)

2423 
	#GL_COMPRESSED_RGBA_BPTC_UNORM
 0x8E8C

	)

2424 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
 0x8E8D

	)

2425 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
 0x8E8E

	)

2426 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
 0x8E8F

	)

2428 
	#GLEW_VERSION_4_2
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_4_2
)

	)

2434 #i‚de‡
GL_VERSION_4_3


2435 
	#GL_VERSION_4_3
 1

	)

2437 
	#GL_NUM_SHADING_LANGUAGE_VERSIONS
 0x82E9

	)

2438 
	#GL_VERTEX_ATTRIB_ARRAY_LONG
 0x874E

	)

2440 
	#GLEW_VERSION_4_3
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_4_3
)

	)

2446 #i‚de‡
GL_VERSION_4_4


2447 
	#GL_VERSION_4_4
 1

	)

2449 
	#GL_MAX_VERTEX_ATTRIB_STRIDE
 0x82E5

	)

2451 
	#GLEW_VERSION_4_4
 
	`GLEW_GET_VAR
(
__GLEW_VERSION_4_4
)

	)

2457 #i‚de‡
GL_3DFX_mu…ißm∂e


2458 
	#GL_3DFX_mu…ißm∂e
 1

	)

2460 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

2461 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

2462 
	#GL_SAMPLES_3DFX
 0x86B4

	)

2463 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

2465 
	#GLEW_3DFX_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_3DFX_mu…ißm∂e
)

	)

2471 #i‚de‡
GL_3DFX_tbuf„r


2472 
	#GL_3DFX_tbuf„r
 1

	)

2474 (
GLAPIENTRY
 * 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

2476 
	#glTbuf„rMask3DFX
 
	`GLEW_GET_FUN
(
__gÀwTbuf„rMask3DFX
)

	)

2478 
	#GLEW_3DFX_tbuf„r
 
	`GLEW_GET_VAR
(
__GLEW_3DFX_tbuf„r
)

	)

2484 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


2485 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

2487 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

2488 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

2490 
	#GLEW_3DFX_ãxtuª_com¥essi⁄_FXT1
 
	`GLEW_GET_VAR
(
__GLEW_3DFX_ãxtuª_com¥essi⁄_FXT1
)

	)

2496 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


2497 
	#GL_AMD_bÀnd_mömax_Á˘‹
 1

	)

2499 
	#GL_FACTOR_MIN_AMD
 0x901C

	)

2500 
	#GL_FACTOR_MAX_AMD
 0x901D

	)

2502 
	#GLEW_AMD_bÀnd_mömax_Á˘‹
 
	`GLEW_GET_VAR
(
__GLEW_AMD_bÀnd_mömax_Á˘‹
)

	)

2508 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


2509 
	#GL_AMD_c⁄£rv©ive_dïth
 1

	)

2511 
	#GLEW_AMD_c⁄£rv©ive_dïth
 
	`GLEW_GET_VAR
(
__GLEW_AMD_c⁄£rv©ive_dïth
)

	)

2517 #i‚de‡
GL_AMD_debug_ouçut


2518 
	#GL_AMD_debug_ouçut
 1

	)

2520 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
 0x9143

	)

2521 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
 0x9144

	)

2522 
	#GL_DEBUG_LOGGED_MESSAGES_AMD
 0x9145

	)

2523 
	#GL_DEBUG_SEVERITY_HIGH_AMD
 0x9146

	)

2524 
	#GL_DEBUG_SEVERITY_MEDIUM_AMD
 0x9147

	)

2525 
	#GL_DEBUG_SEVERITY_LOW_AMD
 0x9148

	)

2526 
	#GL_DEBUG_CATEGORY_API_ERROR_AMD
 0x9149

	)

2527 
	#GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
 0x914A

	)

2528 
	#GL_DEBUG_CATEGORY_DEPRECATION_AMD
 0x914B

	)

2529 
	#GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
 0x914C

	)

2530 
	#GL_DEBUG_CATEGORY_PERFORMANCE_AMD
 0x914D

	)

2531 
	#GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
 0x914E

	)

2532 
	#GL_DEBUG_CATEGORY_APPLICATION_AMD
 0x914F

	)

2533 
	#GL_DEBUG_CATEGORY_OTHER_AMD
 0x9150

	)

2535 (
APIENTRY
 *
	tGLDEBUGPROCAMD
)(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tmesßge
, 
	tGLvoid
* 
	tu£rP¨am
);

2537 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGECALLBACKAMDPROC
Ë(
	tGLDEBUGPROCAMD
 
	tˇŒback
, 
	tGLvoid
 *
	tu£rP¨am
);

2538 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGEENABLEAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
* 
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

2539 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGEINSERTAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tbuf
);

2540 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETDEBUGMESSAGELOGAMDPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
* 
	tˇãg‹õs
, GLuöt* 
	t£vîôõs
, GLuöt* 
	tids
, GLsizei* 
	tÀngths
, 
	tGLch¨
* 
	tmesßge
);

2542 
	#glDebugMesßgeCÆlbackAMD
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeCÆlbackAMD
)

	)

2543 
	#glDebugMesßgeE«bÀAMD
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeE«bÀAMD
)

	)

2544 
	#glDebugMesßgeIn£πAMD
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeIn£πAMD
)

	)

2545 
	#glGëDebugMesßgeLogAMD
 
	`GLEW_GET_FUN
(
__gÀwGëDebugMesßgeLogAMD
)

	)

2547 
	#GLEW_AMD_debug_ouçut
 
	`GLEW_GET_VAR
(
__GLEW_AMD_debug_ouçut
)

	)

2553 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


2554 
	#GL_AMD_dïth_˛amp_£∑øã
 1

	)

2556 
	#GL_DEPTH_CLAMP_NEAR_AMD
 0x901E

	)

2557 
	#GL_DEPTH_CLAMP_FAR_AMD
 0x901F

	)

2559 
	#GLEW_AMD_dïth_˛amp_£∑øã
 
	`GLEW_GET_VAR
(
__GLEW_AMD_dïth_˛amp_£∑øã
)

	)

2565 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


2566 
	#GL_AMD_døw_buf„rs_bÀnd
 1

	)

2568 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

2569 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

2570 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

2571 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

2573 
	#glBÀndEqu©i⁄IndexedAMD
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄IndexedAMD
)

	)

2574 
	#glBÀndEqu©i⁄Sï¨©eIndexedAMD
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄Sï¨©eIndexedAMD
)

	)

2575 
	#glBÀndFuncIndexedAMD
 
	`GLEW_GET_FUN
(
__gÀwBÀndFuncIndexedAMD
)

	)

2576 
	#glBÀndFuncSï¨©eIndexedAMD
 
	`GLEW_GET_FUN
(
__gÀwBÀndFuncSï¨©eIndexedAMD
)

	)

2578 
	#GLEW_AMD_døw_buf„rs_bÀnd
 
	`GLEW_GET_VAR
(
__GLEW_AMD_døw_buf„rs_bÀnd
)

	)

2584 #i‚de‡
GL_AMD_öãæóved_ñemíts


2585 
	#GL_AMD_öãæóved_ñemíts
 1

	)

2587 
	#GL_RED
 0x1903

	)

2588 
	#GL_GREEN
 0x1904

	)

2589 
	#GL_BLUE
 0x1905

	)

2590 
	#GL_ALPHA
 0x1906

	)

2591 
	#GL_RG8UI
 0x8238

	)

2592 
	#GL_RG16UI
 0x823A

	)

2593 
	#GL_RGBA8UI
 0x8D7C

	)

2594 
	#GL_VERTEX_ELEMENT_SWIZZLE_AMD
 0x91A4

	)

2595 
	#GL_VERTEX_ID_SWIZZLE_AMD
 0x91A5

	)

2597 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBPARAMETERIAMDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2599 
	#glVîãxAâribP¨amëîiAMD
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP¨amëîiAMD
)

	)

2601 
	#GLEW_AMD_öãæóved_ñemíts
 
	`GLEW_GET_VAR
(
__GLEW_AMD_öãæóved_ñemíts
)

	)

2607 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


2608 
	#GL_AMD_mu…i_døw_ödúe˘
 1

	)

2610 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

2611 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

2613 
	#glMu…iDøwAºaysIndúe˘AMD
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwAºaysIndúe˘AMD
)

	)

2614 
	#glMu…iDøwEÀmítsIndúe˘AMD
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmítsIndúe˘AMD
)

	)

2616 
	#GLEW_AMD_mu…i_døw_ödúe˘
 
	`GLEW_GET_VAR
(
__GLEW_AMD_mu…i_døw_ödúe˘
)

	)

2622 #i‚de‡
GL_AMD_«me_gí_dñëe


2623 
	#GL_AMD_«me_gí_dñëe
 1

	)

2625 
	#GL_DATA_BUFFER_AMD
 0x9151

	)

2626 
	#GL_PERFORMANCE_MONITOR_AMD
 0x9152

	)

2627 
	#GL_QUERY_OBJECT_AMD
 0x9153

	)

2628 
	#GL_VERTEX_ARRAY_OBJECT_AMD
 0x9154

	)

2629 
	#GL_SAMPLER_OBJECT_AMD
 0x9155

	)

2631 (
GLAPIENTRY
 * 
	tPFNGLDELETENAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, c⁄° GLuöt* 
	t«mes
);

2632 (
GLAPIENTRY
 * 
	tPFNGLGENNAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, GLuöt* 
	t«mes
);

2633 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISNAMEAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
);

2635 
	#glDñëeNamesAMD
 
	`GLEW_GET_FUN
(
__gÀwDñëeNamesAMD
)

	)

2636 
	#glGíNamesAMD
 
	`GLEW_GET_FUN
(
__gÀwGíNamesAMD
)

	)

2637 
	#glIsNameAMD
 
	`GLEW_GET_FUN
(
__gÀwIsNameAMD
)

	)

2639 
	#GLEW_AMD_«me_gí_dñëe
 
	`GLEW_GET_VAR
(
__GLEW_AMD_«me_gí_dñëe
)

	)

2645 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


2646 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

2648 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

2649 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

2650 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

2651 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

2652 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

2653 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

2654 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

2656 (
GLAPIENTRY
 * 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

2657 (
GLAPIENTRY
 * 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tm⁄ô‹s
);

2658 (
GLAPIENTRY
 * 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

2659 (
GLAPIENTRY
 * 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tm⁄ô‹s
);

2660 (
GLAPIENTRY
 * 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöt* 
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

2661 (
GLAPIENTRY
 * 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
 *
	td©a
);

2662 (
GLAPIENTRY
 * 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

2663 (
GLAPIENTRY
 * 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
* 
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îsSize
, GLuöà*
	tcou¡îs
);

2664 (
GLAPIENTRY
 * 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

2665 (
GLAPIENTRY
 * 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
* 
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

2666 (
GLAPIENTRY
 * 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöt* 
	tcou¡îLi°
);

2668 
	#glBegöPîfM⁄ô‹AMD
 
	`GLEW_GET_FUN
(
__gÀwBegöPîfM⁄ô‹AMD
)

	)

2669 
	#glDñëePîfM⁄ô‹sAMD
 
	`GLEW_GET_FUN
(
__gÀwDñëePîfM⁄ô‹sAMD
)

	)

2670 
	#glEndPîfM⁄ô‹AMD
 
	`GLEW_GET_FUN
(
__gÀwEndPîfM⁄ô‹AMD
)

	)

2671 
	#glGíPîfM⁄ô‹sAMD
 
	`GLEW_GET_FUN
(
__gÀwGíPîfM⁄ô‹sAMD
)

	)

2672 
	#glGëPîfM⁄ô‹Cou¡îD©aAMD
 
	`GLEW_GET_FUN
(
__gÀwGëPîfM⁄ô‹Cou¡îD©aAMD
)

	)

2673 
	#glGëPîfM⁄ô‹Cou¡îInfoAMD
 
	`GLEW_GET_FUN
(
__gÀwGëPîfM⁄ô‹Cou¡îInfoAMD
)

	)

2674 
	#glGëPîfM⁄ô‹Cou¡îSåögAMD
 
	`GLEW_GET_FUN
(
__gÀwGëPîfM⁄ô‹Cou¡îSåögAMD
)

	)

2675 
	#glGëPîfM⁄ô‹Cou¡îsAMD
 
	`GLEW_GET_FUN
(
__gÀwGëPîfM⁄ô‹Cou¡îsAMD
)

	)

2676 
	#glGëPîfM⁄ô‹GroupSåögAMD
 
	`GLEW_GET_FUN
(
__gÀwGëPîfM⁄ô‹GroupSåögAMD
)

	)

2677 
	#glGëPîfM⁄ô‹GroupsAMD
 
	`GLEW_GET_FUN
(
__gÀwGëPîfM⁄ô‹GroupsAMD
)

	)

2678 
	#glSñe˘PîfM⁄ô‹Cou¡îsAMD
 
	`GLEW_GET_FUN
(
__gÀwSñe˘PîfM⁄ô‹Cou¡îsAMD
)

	)

2680 
	#GLEW_AMD_≥rf‹m™˚_m⁄ô‹
 
	`GLEW_GET_VAR
(
__GLEW_AMD_≥rf‹m™˚_m⁄ô‹
)

	)

2686 #i‚de‡
GL_AMD_pö√d_mem‹y


2687 
	#GL_AMD_pö√d_mem‹y
 1

	)

2689 
	#GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
 0x9160

	)

2691 
	#GLEW_AMD_pö√d_mem‹y
 
	`GLEW_GET_VAR
(
__GLEW_AMD_pö√d_mem‹y
)

	)

2697 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


2698 
	#GL_AMD_quîy_buf„r_obje˘
 1

	)

2700 
	#GL_QUERY_BUFFER_AMD
 0x9192

	)

2701 
	#GL_QUERY_BUFFER_BINDING_AMD
 0x9193

	)

2702 
	#GL_QUERY_RESULT_NO_WAIT_AMD
 0x9194

	)

2704 
	#GLEW_AMD_quîy_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_AMD_quîy_buf„r_obje˘
)

	)

2710 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


2711 
	#GL_AMD_ßm∂e_posôi⁄s
 1

	)

2713 
	#GL_SUBSAMPLE_DISTANCE_AMD
 0x883F

	)

2715 (
GLAPIENTRY
 * 
	tPFNGLSETMULTISAMPLEFVAMDPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tvÆ
);

2717 
	#glSëMu…ißm∂efvAMD
 
	`GLEW_GET_FUN
(
__gÀwSëMu…ißm∂efvAMD
)

	)

2719 
	#GLEW_AMD_ßm∂e_posôi⁄s
 
	`GLEW_GET_VAR
(
__GLEW_AMD_ßm∂e_posôi⁄s
)

	)

2725 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


2726 
	#GL_AMD_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

2728 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS_ARB
 0x884F

	)

2730 
	#GLEW_AMD_£amÀss_cubem≠_≥r_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_AMD_£amÀss_cubem≠_≥r_ãxtuª
)

	)

2736 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


2737 
	#GL_AMD_shadî_°ícû_exp‹t
 1

	)

2739 
	#GLEW_AMD_shadî_°ícû_exp‹t
 
	`GLEW_GET_VAR
(
__GLEW_AMD_shadî_°ícû_exp‹t
)

	)

2745 #i‚de‡
GL_AMD_shadî_åö¨y_mömax


2746 
	#GL_AMD_shadî_åö¨y_mömax
 1

	)

2748 
	#GLEW_AMD_shadî_åö¨y_mömax
 
	`GLEW_GET_VAR
(
__GLEW_AMD_shadî_åö¨y_mömax
)

	)

2754 #i‚de‡
GL_AMD_•¨£_ãxtuª


2755 
	#GL_AMD_•¨£_ãxtuª
 1

	)

2757 
	#GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
 0x00000001

	)

2758 
	#GL_VIRTUAL_PAGE_SIZE_X_AMD
 0x9195

	)

2759 
	#GL_VIRTUAL_PAGE_SIZE_Y_AMD
 0x9196

	)

2760 
	#GL_VIRTUAL_PAGE_SIZE_Z_AMD
 0x9197

	)

2761 
	#GL_MAX_SPARSE_TEXTURE_SIZE_AMD
 0x9198

	)

2762 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
 0x9199

	)

2763 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
 0x919A

	)

2764 
	#GL_MIN_SPARSE_LEVEL_AMD
 0x919B

	)

2765 
	#GL_MIN_LOD_WARNING_AMD
 0x919C

	)

2767 (
GLAPIENTRY
 * 
	tPFNGLTEXSTORAGESPARSEAMDPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

2768 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESTORAGESPARSEAMDPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

2770 
	#glTexSt‹ageS∑r£AMD
 
	`GLEW_GET_FUN
(
__gÀwTexSt‹ageS∑r£AMD
)

	)

2771 
	#glTextuªSt‹ageS∑r£AMD
 
	`GLEW_GET_FUN
(
__gÀwTextuªSt‹ageS∑r£AMD
)

	)

2773 
	#GLEW_AMD_•¨£_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_AMD_•¨£_ãxtuª
)

	)

2779 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


2780 
	#GL_AMD_°ícû_›î©i⁄_exãnded
 1

	)

2782 
	#GL_SET_AMD
 0x874A

	)

2783 
	#GL_REPLACE_VALUE_AMD
 0x874B

	)

2784 
	#GL_STENCIL_OP_VALUE_AMD
 0x874C

	)

2785 
	#GL_STENCIL_BACK_OP_VALUE_AMD
 0x874D

	)

2787 (
GLAPIENTRY
 * 
	tPFNGLSTENCILOPVALUEAMDPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tvÆue
);

2789 
	#glSãncûOpVÆueAMD
 
	`GLEW_GET_FUN
(
__gÀwSãncûOpVÆueAMD
)

	)

2791 
	#GLEW_AMD_°ícû_›î©i⁄_exãnded
 
	`GLEW_GET_VAR
(
__GLEW_AMD_°ícû_›î©i⁄_exãnded
)

	)

2797 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


2798 
	#GL_AMD_ãxtuª_ãxtuª4
 1

	)

2800 
	#GLEW_AMD_ãxtuª_ãxtuª4
 
	`GLEW_GET_VAR
(
__GLEW_AMD_ãxtuª_ãxtuª4
)

	)

2806 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


2807 
	#GL_AMD_å™sf‹m_„edback3_löes_åüngÀs
 1

	)

2809 
	#GLEW_AMD_å™sf‹m_„edback3_löes_åüngÀs
 
	`GLEW_GET_VAR
(
__GLEW_AMD_å™sf‹m_„edback3_löes_åüngÀs
)

	)

2815 #i‚de‡
GL_AMD_vîãx_shadî_œyî


2816 
	#GL_AMD_vîãx_shadî_œyî
 1

	)

2818 
	#GLEW_AMD_vîãx_shadî_œyî
 
	`GLEW_GET_VAR
(
__GLEW_AMD_vîãx_shadî_œyî
)

	)

2824 #i‚de‡
GL_AMD_vîãx_shadî_ãs£Œ©‹


2825 
	#GL_AMD_vîãx_shadî_ãs£Œ©‹
 1

	)

2827 
	#GL_SAMPLER_BUFFER_AMD
 0x9001

	)

2828 
	#GL_INT_SAMPLER_BUFFER_AMD
 0x9002

	)

2829 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
 0x9003

	)

2830 
	#GL_TESSELLATION_MODE_AMD
 0x9004

	)

2831 
	#GL_TESSELLATION_FACTOR_AMD
 0x9005

	)

2832 
	#GL_DISCRETE_AMD
 0x9006

	)

2833 
	#GL_CONTINUOUS_AMD
 0x9007

	)

2835 (
GLAPIENTRY
 * 
	tPFNGLTESSELLATIONFACTORAMDPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

2836 (
GLAPIENTRY
 * 
	tPFNGLTESSELLATIONMODEAMDPROC
Ë(
	tGLíum
 
	tmode
);

2838 
	#glTes£Œ©i⁄Fa˘‹AMD
 
	`GLEW_GET_FUN
(
__gÀwTes£Œ©i⁄Fa˘‹AMD
)

	)

2839 
	#glTes£Œ©i⁄ModeAMD
 
	`GLEW_GET_FUN
(
__gÀwTes£Œ©i⁄ModeAMD
)

	)

2841 
	#GLEW_AMD_vîãx_shadî_ãs£Œ©‹
 
	`GLEW_GET_VAR
(
__GLEW_AMD_vîãx_shadî_ãs£Œ©‹
)

	)

2847 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


2848 
	#GL_AMD_vîãx_shadî_võwp‹t_ödex
 1

	)

2850 
	#GLEW_AMD_vîãx_shadî_võwp‹t_ödex
 
	`GLEW_GET_VAR
(
__GLEW_AMD_vîãx_shadî_võwp‹t_ödex
)

	)

2856 #i‚de‡
GL_ANGLE_dïth_ãxtuª


2857 
	#GL_ANGLE_dïth_ãxtuª
 1

	)

2859 
	#GLEW_ANGLE_dïth_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_ANGLE_dïth_ãxtuª
)

	)

2865 #i‚de‡
GL_ANGLE_‰amebuf„r_blô


2866 
	#GL_ANGLE_‰amebuf„r_blô
 1

	)

2868 
	#GL_DRAW_FRAMEBUFFER_BINDING_ANGLE
 0x8CA6

	)

2869 
	#GL_READ_FRAMEBUFFER_ANGLE
 0x8CA8

	)

2870 
	#GL_DRAW_FRAMEBUFFER_ANGLE
 0x8CA9

	)

2871 
	#GL_READ_FRAMEBUFFER_BINDING_ANGLE
 0x8CAA

	)

2873 (
GLAPIENTRY
 * 
	tPFNGLBLITFRAMEBUFFERANGLEPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

2875 
	#glBlôFømebuf„rANGLE
 
	`GLEW_GET_FUN
(
__gÀwBlôFømebuf„rANGLE
)

	)

2877 
	#GLEW_ANGLE_‰amebuf„r_blô
 
	`GLEW_GET_VAR
(
__GLEW_ANGLE_‰amebuf„r_blô
)

	)

2883 #i‚de‡
GL_ANGLE_‰amebuf„r_mu…ißm∂e


2884 
	#GL_ANGLE_‰amebuf„r_mu…ißm∂e
 1

	)

2886 
	#GL_RENDERBUFFER_SAMPLES_ANGLE
 0x8CAB

	)

2887 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE
 0x8D56

	)

2888 
	#GL_MAX_SAMPLES_ANGLE
 0x8D57

	)

2890 (
GLAPIENTRY
 * 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2892 
	#glRídîbuf„rSt‹ageMu…ißm∂eANGLE
 
	`GLEW_GET_FUN
(
__gÀwRídîbuf„rSt‹ageMu…ißm∂eANGLE
)

	)

2894 
	#GLEW_ANGLE_‰amebuf„r_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_ANGLE_‰amebuf„r_mu…ißm∂e
)

	)

2900 #i‚de‡
GL_ANGLE_ö°™˚d_¨øys


2901 
	#GL_ANGLE_ö°™˚d_¨øys
 1

	)

2903 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE
 0x88FE

	)

2905 (
GLAPIENTRY
 * 
	tPFNGLDRAWARRAYSINSTANCEDANGLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

2906 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINSTANCEDANGLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

2907 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBDIVISORANGLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

2909 
	#glDøwAºaysIn°™˚dANGLE
 
	`GLEW_GET_FUN
(
__gÀwDøwAºaysIn°™˚dANGLE
)

	)

2910 
	#glDøwEÀmítsIn°™˚dANGLE
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIn°™˚dANGLE
)

	)

2911 
	#glVîãxAâribDivis‹ANGLE
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribDivis‹ANGLE
)

	)

2913 
	#GLEW_ANGLE_ö°™˚d_¨øys
 
	`GLEW_GET_VAR
(
__GLEW_ANGLE_ö°™˚d_¨øys
)

	)

2919 #i‚de‡
GL_ANGLE_∑ck_ªvî£_row_‹dî


2920 
	#GL_ANGLE_∑ck_ªvî£_row_‹dî
 1

	)

2922 
	#GL_PACK_REVERSE_ROW_ORDER_ANGLE
 0x93A4

	)

2924 
	#GLEW_ANGLE_∑ck_ªvî£_row_‹dî
 
	`GLEW_GET_VAR
(
__GLEW_ANGLE_∑ck_ªvî£_row_‹dî
)

	)

2930 #i‚de‡
GL_ANGLE_¥ogøm_bö¨y


2931 
	#GL_ANGLE_¥ogøm_bö¨y
 1

	)

2933 
	#GL_PROGRAM_BINARY_ANGLE
 0x93A6

	)

2935 
	#GLEW_ANGLE_¥ogøm_bö¨y
 
	`GLEW_GET_VAR
(
__GLEW_ANGLE_¥ogøm_bö¨y
)

	)

2941 #i‚de‡
GL_ANGLE_ãxtuª_com¥essi⁄_dxt1


2942 
	#GL_ANGLE_ãxtuª_com¥essi⁄_dxt1
 1

	)

2944 
	#GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE
 0x83F0

	)

2945 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE
 0x83F1

	)

2946 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
 0x83F2

	)

2947 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
 0x83F3

	)

2949 
	#GLEW_ANGLE_ãxtuª_com¥essi⁄_dxt1
 
	`GLEW_GET_VAR
(
__GLEW_ANGLE_ãxtuª_com¥essi⁄_dxt1
)

	)

2955 #i‚de‡
GL_ANGLE_ãxtuª_com¥essi⁄_dxt3


2956 
	#GL_ANGLE_ãxtuª_com¥essi⁄_dxt3
 1

	)

2958 
	#GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE
 0x83F0

	)

2959 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE
 0x83F1

	)

2960 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
 0x83F2

	)

2961 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
 0x83F3

	)

2963 
	#GLEW_ANGLE_ãxtuª_com¥essi⁄_dxt3
 
	`GLEW_GET_VAR
(
__GLEW_ANGLE_ãxtuª_com¥essi⁄_dxt3
)

	)

2969 #i‚de‡
GL_ANGLE_ãxtuª_com¥essi⁄_dxt5


2970 
	#GL_ANGLE_ãxtuª_com¥essi⁄_dxt5
 1

	)

2972 
	#GL_COMPRESSED_RGB_S3TC_DXT1_ANGLE
 0x83F0

	)

2973 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_ANGLE
 0x83F1

	)

2974 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE
 0x83F2

	)

2975 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE
 0x83F3

	)

2977 
	#GLEW_ANGLE_ãxtuª_com¥essi⁄_dxt5
 
	`GLEW_GET_VAR
(
__GLEW_ANGLE_ãxtuª_com¥essi⁄_dxt5
)

	)

2983 #i‚de‡
GL_ANGLE_ãxtuª_ußge


2984 
	#GL_ANGLE_ãxtuª_ußge
 1

	)

2986 
	#GL_TEXTURE_USAGE_ANGLE
 0x93A2

	)

2987 
	#GL_FRAMEBUFFER_ATTACHMENT_ANGLE
 0x93A3

	)

2989 
	#GLEW_ANGLE_ãxtuª_ußge
 
	`GLEW_GET_VAR
(
__GLEW_ANGLE_ãxtuª_ußge
)

	)

2995 #i‚de‡
GL_ANGLE_timî_quîy


2996 
	#GL_ANGLE_timî_quîy
 1

	)

2998 
	#GL_QUERY_COUNTER_BITS_ANGLE
 0x8864

	)

2999 
	#GL_CURRENT_QUERY_ANGLE
 0x8865

	)

3000 
	#GL_QUERY_RESULT_ANGLE
 0x8866

	)

3001 
	#GL_QUERY_RESULT_AVAILABLE_ANGLE
 0x8867

	)

3002 
	#GL_TIME_ELAPSED_ANGLE
 0x88BF

	)

3003 
	#GL_TIMESTAMP_ANGLE
 0x8E28

	)

3005 (
GLAPIENTRY
 * 
	tPFNGLBEGINQUERYANGLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

3006 (
GLAPIENTRY
 * 
	tPFNGLDELETEQUERIESANGLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
);

3007 (
GLAPIENTRY
 * 
	tPFNGLENDQUERYANGLEPROC
Ë(
	tGLíum
 
	tèrgë
);

3008 (
GLAPIENTRY
 * 
	tPFNGLGENQUERIESANGLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

3009 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTI64VANGLEPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
* 
	t∑øms
);

3010 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTIVANGLEPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

3011 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTUI64VANGLEPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
* 
	t∑øms
);

3012 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTUIVANGLEPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöt* 
	t∑øms
);

3013 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYIVANGLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

3014 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISQUERYANGLEPROC
Ë(
	tGLuöt
 
	tid
);

3015 (
GLAPIENTRY
 * 
	tPFNGLQUERYCOUNTERANGLEPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

3017 
	#glBegöQuîyANGLE
 
	`GLEW_GET_FUN
(
__gÀwBegöQuîyANGLE
)

	)

3018 
	#glDñëeQuîõsANGLE
 
	`GLEW_GET_FUN
(
__gÀwDñëeQuîõsANGLE
)

	)

3019 
	#glEndQuîyANGLE
 
	`GLEW_GET_FUN
(
__gÀwEndQuîyANGLE
)

	)

3020 
	#glGíQuîõsANGLE
 
	`GLEW_GET_FUN
(
__gÀwGíQuîõsANGLE
)

	)

3021 
	#glGëQuîyObje˘i64vANGLE
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘i64vANGLE
)

	)

3022 
	#glGëQuîyObje˘ivANGLE
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘ivANGLE
)

	)

3023 
	#glGëQuîyObje˘ui64vANGLE
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘ui64vANGLE
)

	)

3024 
	#glGëQuîyObje˘uivANGLE
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘uivANGLE
)

	)

3025 
	#glGëQuîyivANGLE
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyivANGLE
)

	)

3026 
	#glIsQuîyANGLE
 
	`GLEW_GET_FUN
(
__gÀwIsQuîyANGLE
)

	)

3027 
	#glQuîyCou¡îANGLE
 
	`GLEW_GET_FUN
(
__gÀwQuîyCou¡îANGLE
)

	)

3029 
	#GLEW_ANGLE_timî_quîy
 
	`GLEW_GET_VAR
(
__GLEW_ANGLE_timî_quîy
)

	)

3035 #i‚de‡
GL_ANGLE_å™¶©ed_shadî_sour˚


3036 
	#GL_ANGLE_å™¶©ed_shadî_sour˚
 1

	)

3038 
	#GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE
 0x93A0

	)

3040 (
GLAPIENTRY
 * 
	tPFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufsize
, GLsizei* 
	tÀngth
, 
	tGLch¨
* 
	tsour˚
);

3042 
	#glGëTøn¶©edShadîSour˚ANGLE
 
	`GLEW_GET_FUN
(
__gÀwGëTøn¶©edShadîSour˚ANGLE
)

	)

3044 
	#GLEW_ANGLE_å™¶©ed_shadî_sour˚
 
	`GLEW_GET_VAR
(
__GLEW_ANGLE_å™¶©ed_shadî_sour˚
)

	)

3050 #i‚de‡
GL_APPLE_aux_dïth_°ícû


3051 
	#GL_APPLE_aux_dïth_°ícû
 1

	)

3053 
	#GL_AUX_DEPTH_STENCIL_APPLE
 0x8A14

	)

3055 
	#GLEW_APPLE_aux_dïth_°ícû
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_aux_dïth_°ícû
)

	)

3061 #i‚de‡
GL_APPLE_˛õ¡_°‹age


3062 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

3064 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

3066 
	#GLEW_APPLE_˛õ¡_°‹age
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_˛õ¡_°‹age
)

	)

3072 #i‚de‡
GL_APPLE_ñemít_¨øy


3073 
	#GL_APPLE_ñemít_¨øy
 1

	)

3075 
	#GL_ELEMENT_ARRAY_APPLE
 0x8A0C

	)

3076 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8A0D

	)

3077 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x8A0E

	)

3079 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

3080 (
GLAPIENTRY
 * 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

3081 (
GLAPIENTRY
 * 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

3082 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
* 
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

3083 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
* 
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

3085 
	#glDøwEÀmítAºayAPPLE
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítAºayAPPLE
)

	)

3086 
	#glDøwR™geEÀmítAºayAPPLE
 
	`GLEW_GET_FUN
(
__gÀwDøwR™geEÀmítAºayAPPLE
)

	)

3087 
	#glEÀmítPoöãrAPPLE
 
	`GLEW_GET_FUN
(
__gÀwEÀmítPoöãrAPPLE
)

	)

3088 
	#glMu…iDøwEÀmítAºayAPPLE
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmítAºayAPPLE
)

	)

3089 
	#glMu…iDøwR™geEÀmítAºayAPPLE
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwR™geEÀmítAºayAPPLE
)

	)

3091 
	#GLEW_APPLE_ñemít_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_ñemít_¨øy
)

	)

3097 #i‚de‡
GL_APPLE_„n˚


3098 
	#GL_APPLE_„n˚
 1

	)

3100 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

3101 
	#GL_FENCE_APPLE
 0x8A0B

	)

3103 (
GLAPIENTRY
 * 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t„n˚s
);

3104 (
GLAPIENTRY
 * 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

3105 (
GLAPIENTRY
 * 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

3106 (
GLAPIENTRY
 * 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t„n˚s
);

3107 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

3108 (
GLAPIENTRY
 * 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

3109 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

3110 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

3112 
	#glDñëeFí˚sAPPLE
 
	`GLEW_GET_FUN
(
__gÀwDñëeFí˚sAPPLE
)

	)

3113 
	#glFöishFí˚APPLE
 
	`GLEW_GET_FUN
(
__gÀwFöishFí˚APPLE
)

	)

3114 
	#glFöishObje˘APPLE
 
	`GLEW_GET_FUN
(
__gÀwFöishObje˘APPLE
)

	)

3115 
	#glGíFí˚sAPPLE
 
	`GLEW_GET_FUN
(
__gÀwGíFí˚sAPPLE
)

	)

3116 
	#glIsFí˚APPLE
 
	`GLEW_GET_FUN
(
__gÀwIsFí˚APPLE
)

	)

3117 
	#glSëFí˚APPLE
 
	`GLEW_GET_FUN
(
__gÀwSëFí˚APPLE
)

	)

3118 
	#glTe°Fí˚APPLE
 
	`GLEW_GET_FUN
(
__gÀwTe°Fí˚APPLE
)

	)

3119 
	#glTe°Obje˘APPLE
 
	`GLEW_GET_FUN
(
__gÀwTe°Obje˘APPLE
)

	)

3121 
	#GLEW_APPLE_„n˚
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_„n˚
)

	)

3127 #i‚de‡
GL_APPLE_Êﬂt_pixñs


3128 
	#GL_APPLE_Êﬂt_pixñs
 1

	)

3130 
	#GL_HALF_APPLE
 0x140B

	)

3131 
	#GL_RGBA_FLOAT32_APPLE
 0x8814

	)

3132 
	#GL_RGB_FLOAT32_APPLE
 0x8815

	)

3133 
	#GL_ALPHA_FLOAT32_APPLE
 0x8816

	)

3134 
	#GL_INTENSITY_FLOAT32_APPLE
 0x8817

	)

3135 
	#GL_LUMINANCE_FLOAT32_APPLE
 0x8818

	)

3136 
	#GL_LUMINANCE_ALPHA_FLOAT32_APPLE
 0x8819

	)

3137 
	#GL_RGBA_FLOAT16_APPLE
 0x881A

	)

3138 
	#GL_RGB_FLOAT16_APPLE
 0x881B

	)

3139 
	#GL_ALPHA_FLOAT16_APPLE
 0x881C

	)

3140 
	#GL_INTENSITY_FLOAT16_APPLE
 0x881D

	)

3141 
	#GL_LUMINANCE_FLOAT16_APPLE
 0x881E

	)

3142 
	#GL_LUMINANCE_ALPHA_FLOAT16_APPLE
 0x881F

	)

3143 
	#GL_COLOR_FLOAT_APPLE
 0x8A0F

	)

3145 
	#GLEW_APPLE_Êﬂt_pixñs
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_Êﬂt_pixñs
)

	)

3151 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


3152 
	#GL_APPLE_Êush_buf„r_ønge
 1

	)

3154 
	#GL_BUFFER_SERIALIZED_MODIFY_APPLE
 0x8A12

	)

3155 
	#GL_BUFFER_FLUSHING_UNMAP_APPLE
 0x8A13

	)

3157 (
GLAPIENTRY
 * 
	tPFNGLBUFFERPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

3158 (
GLAPIENTRY
 * 
	tPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

3160 
	#glBuf„rP¨amëîiAPPLE
 
	`GLEW_GET_FUN
(
__gÀwBuf„rP¨amëîiAPPLE
)

	)

3161 
	#glFlushM≠≥dBuf„rR™geAPPLE
 
	`GLEW_GET_FUN
(
__gÀwFlushM≠≥dBuf„rR™geAPPLE
)

	)

3163 
	#GLEW_APPLE_Êush_buf„r_ønge
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_Êush_buf„r_ønge
)

	)

3169 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


3170 
	#GL_APPLE_obje˘_purgóbÀ
 1

	)

3172 
	#GL_BUFFER_OBJECT_APPLE
 0x85B3

	)

3173 
	#GL_RELEASED_APPLE
 0x8A19

	)

3174 
	#GL_VOLATILE_APPLE
 0x8A1A

	)

3175 
	#GL_RETAINED_APPLE
 0x8A1B

	)

3176 
	#GL_UNDEFINED_APPLE
 0x8A1C

	)

3177 
	#GL_PURGEABLE_APPLE
 0x8A1D

	)

3179 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTPARAMETERIVAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

3180 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLOBJECTPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

3181 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLOBJECTUNPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

3183 
	#glGëObje˘P¨amëîivAPPLE
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘P¨amëîivAPPLE
)

	)

3184 
	#glObje˘PurgóbÀAPPLE
 
	`GLEW_GET_FUN
(
__gÀwObje˘PurgóbÀAPPLE
)

	)

3185 
	#glObje˘U≈urgóbÀAPPLE
 
	`GLEW_GET_FUN
(
__gÀwObje˘U≈urgóbÀAPPLE
)

	)

3187 
	#GLEW_APPLE_obje˘_purgóbÀ
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_obje˘_purgóbÀ
)

	)

3193 #i‚de‡
GL_APPLE_pixñ_buf„r


3194 
	#GL_APPLE_pixñ_buf„r
 1

	)

3196 
	#GL_MIN_PBUFFER_VIEWPORT_DIMS_APPLE
 0x8A10

	)

3198 
	#GLEW_APPLE_pixñ_buf„r
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_pixñ_buf„r
)

	)

3204 #i‚de‡
GL_APPLE_rgb_422


3205 
	#GL_APPLE_rgb_422
 1

	)

3207 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

3208 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

3209 
	#GL_RGB_422_APPLE
 0x8A1F

	)

3211 
	#GLEW_APPLE_rgb_422
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_rgb_422
)

	)

3217 #i‚de‡
GL_APPLE_row_byãs


3218 
	#GL_APPLE_row_byãs
 1

	)

3220 
	#GL_PACK_ROW_BYTES_APPLE
 0x8A15

	)

3221 
	#GL_UNPACK_ROW_BYTES_APPLE
 0x8A16

	)

3223 
	#GLEW_APPLE_row_byãs
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_row_byãs
)

	)

3229 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


3230 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

3232 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

3234 
	#GLEW_APPLE_•ecuœr_ve˘‹
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_•ecuœr_ve˘‹
)

	)

3240 #i‚de‡
GL_APPLE_ãxtuª_ønge


3241 
	#GL_APPLE_ãxtuª_ønge
 1

	)

3243 
	#GL_TEXTURE_RANGE_LENGTH_APPLE
 0x85B7

	)

3244 
	#GL_TEXTURE_RANGE_POINTER_APPLE
 0x85B8

	)

3245 
	#GL_TEXTURE_STORAGE_HINT_APPLE
 0x85BC

	)

3246 
	#GL_STORAGE_PRIVATE_APPLE
 0x85BD

	)

3247 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

3248 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

3250 (
GLAPIENTRY
 * 
	tPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 **
	t∑øms
);

3251 (
GLAPIENTRY
 * 
	tPFNGLTEXTURERANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

3253 
	#glGëTexP¨amëîPoöãrvAPPLE
 
	`GLEW_GET_FUN
(
__gÀwGëTexP¨amëîPoöãrvAPPLE
)

	)

3254 
	#glTextuªR™geAPPLE
 
	`GLEW_GET_FUN
(
__gÀwTextuªR™geAPPLE
)

	)

3256 
	#GLEW_APPLE_ãxtuª_ønge
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_ãxtuª_ønge
)

	)

3262 #i‚de‡
GL_APPLE_å™sf‹m_höt


3263 
	#GL_APPLE_å™sf‹m_höt
 1

	)

3265 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

3267 
	#GLEW_APPLE_å™sf‹m_höt
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_å™sf‹m_höt
)

	)

3273 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


3274 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

3276 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

3278 (
GLAPIENTRY
 * 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

3279 (
GLAPIENTRY
 * 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t¨øys
);

3280 (
GLAPIENTRY
 * 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t¨øys
);

3281 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

3283 
	#glBödVîãxAºayAPPLE
 
	`GLEW_GET_FUN
(
__gÀwBödVîãxAºayAPPLE
)

	)

3284 
	#glDñëeVîãxAºaysAPPLE
 
	`GLEW_GET_FUN
(
__gÀwDñëeVîãxAºaysAPPLE
)

	)

3285 
	#glGíVîãxAºaysAPPLE
 
	`GLEW_GET_FUN
(
__gÀwGíVîãxAºaysAPPLE
)

	)

3286 
	#glIsVîãxAºayAPPLE
 
	`GLEW_GET_FUN
(
__gÀwIsVîãxAºayAPPLE
)

	)

3288 
	#GLEW_APPLE_vîãx_¨øy_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_vîãx_¨øy_obje˘
)

	)

3294 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


3295 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

3297 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

3298 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

3299 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

3300 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_APPLE
 0x8520

	)

3301 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

3302 
	#GL_STORAGE_CLIENT_APPLE
 0x85B4

	)

3303 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

3304 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

3306 (
GLAPIENTRY
 * 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

3307 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

3308 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

3310 
	#glFlushVîãxAºayR™geAPPLE
 
	`GLEW_GET_FUN
(
__gÀwFlushVîãxAºayR™geAPPLE
)

	)

3311 
	#glVîãxAºayP¨amëîiAPPLE
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayP¨amëîiAPPLE
)

	)

3312 
	#glVîãxAºayR™geAPPLE
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayR™geAPPLE
)

	)

3314 
	#GLEW_APPLE_vîãx_¨øy_ønge
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_vîãx_¨øy_ønge
)

	)

3320 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


3321 
	#GL_APPLE_vîãx_¥ogøm_evÆu©‹s
 1

	)

3323 
	#GL_VERTEX_ATTRIB_MAP1_APPLE
 0x8A00

	)

3324 
	#GL_VERTEX_ATTRIB_MAP2_APPLE
 0x8A01

	)

3325 
	#GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
 0x8A02

	)

3326 
	#GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
 0x8A03

	)

3327 
	#GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
 0x8A04

	)

3328 
	#GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
 0x8A05

	)

3329 
	#GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
 0x8A06

	)

3330 
	#GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
 0x8A07

	)

3331 
	#GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
 0x8A08

	)

3332 
	#GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
 0x8A09

	)

3334 (
GLAPIENTRY
 * 
	tPFNGLDISABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

3335 (
GLAPIENTRY
 * 
	tPFNGLENABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

3336 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISVERTEXATTRIBENABLEDAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

3337 (
GLAPIENTRY
 * 
	tPFNGLMAPVERTEXATTRIB1DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLdoubÀ* 
	tpoöts
);

3338 (
GLAPIENTRY
 * 
	tPFNGLMAPVERTEXATTRIB1FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLÊﬂt* 
	tpoöts
);

3339 (
GLAPIENTRY
 * 
	tPFNGLMAPVERTEXATTRIB2DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLdoubÀ* 
	tpoöts
);

3340 (
GLAPIENTRY
 * 
	tPFNGLMAPVERTEXATTRIB2FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLÊﬂt* 
	tpoöts
);

3342 
	#glDißbÀVîãxAâribAPPLE
 
	`GLEW_GET_FUN
(
__gÀwDißbÀVîãxAâribAPPLE
)

	)

3343 
	#glE«bÀVîãxAâribAPPLE
 
	`GLEW_GET_FUN
(
__gÀwE«bÀVîãxAâribAPPLE
)

	)

3344 
	#glIsVîãxAâribE«bÀdAPPLE
 
	`GLEW_GET_FUN
(
__gÀwIsVîãxAâribE«bÀdAPPLE
)

	)

3345 
	#glM≠VîãxAârib1dAPPLE
 
	`GLEW_GET_FUN
(
__gÀwM≠VîãxAârib1dAPPLE
)

	)

3346 
	#glM≠VîãxAârib1fAPPLE
 
	`GLEW_GET_FUN
(
__gÀwM≠VîãxAârib1fAPPLE
)

	)

3347 
	#glM≠VîãxAârib2dAPPLE
 
	`GLEW_GET_FUN
(
__gÀwM≠VîãxAârib2dAPPLE
)

	)

3348 
	#glM≠VîãxAârib2fAPPLE
 
	`GLEW_GET_FUN
(
__gÀwM≠VîãxAârib2fAPPLE
)

	)

3350 
	#GLEW_APPLE_vîãx_¥ogøm_evÆu©‹s
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_vîãx_¥ogøm_evÆu©‹s
)

	)

3356 #i‚de‡
GL_APPLE_ycb¸_422


3357 
	#GL_APPLE_ycb¸_422
 1

	)

3359 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

3361 
	#GLEW_APPLE_ycb¸_422
 
	`GLEW_GET_VAR
(
__GLEW_APPLE_ycb¸_422
)

	)

3367 #i‚de‡
GL_ARB_ES2_com∑tibûôy


3368 
	#GL_ARB_ES2_com∑tibûôy
 1

	)

3370 
	#GL_FIXED
 0x140C

	)

3371 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

3372 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

3373 
	#GL_RGB565
 0x8D62

	)

3374 
	#GL_LOW_FLOAT
 0x8DF0

	)

3375 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

3376 
	#GL_HIGH_FLOAT
 0x8DF2

	)

3377 
	#GL_LOW_INT
 0x8DF3

	)

3378 
	#GL_MEDIUM_INT
 0x8DF4

	)

3379 
	#GL_HIGH_INT
 0x8DF5

	)

3380 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

3381 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

3382 
	#GL_SHADER_COMPILER
 0x8DFA

	)

3383 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

3384 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

3385 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

3387 
	tGLfixed
;

3389 (
GLAPIENTRY
 * 
	tPFNGLCLEARDEPTHFPROC
Ë(
	tGL˛ampf
 
	td
);

3390 (
GLAPIENTRY
 * 
	tPFNGLDEPTHRANGEFPROC
Ë(
	tGL˛ampf
 
	tn
, GL˛amp‡
	tf
);

3391 (
GLAPIENTRY
 * 
	tPFNGLGETSHADERPRECISIONFORMATPROC
Ë(
	tGLíum
 
	tshadîty≥
, GLíum 
	t¥ecisi⁄ty≥
, 
	tGLöt
* 
	tønge
, GLöà*
	t¥ecisi⁄
);

3392 (
GLAPIENTRY
 * 
	tPFNGLRELEASESHADERCOMPILERPROC
) ();

3393 (
GLAPIENTRY
 * 
	tPFNGLSHADERBINARYPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
* 
	tshadîs
, 
	tGLíum
 
	tbö¨yf‹m©
, c⁄° 
	tGLvoid
*
	tbö¨y
, GLsizeò
	tÀngth
);

3395 
	#glCÀ¨Dïthf
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Dïthf
)

	)

3396 
	#glDïthR™gef
 
	`GLEW_GET_FUN
(
__gÀwDïthR™gef
)

	)

3397 
	#glGëShadîPªcisi⁄F‹m©
 
	`GLEW_GET_FUN
(
__gÀwGëShadîPªcisi⁄F‹m©
)

	)

3398 
	#glRñó£ShadîCompûî
 
	`GLEW_GET_FUN
(
__gÀwRñó£ShadîCompûî
)

	)

3399 
	#glShadîBö¨y
 
	`GLEW_GET_FUN
(
__gÀwShadîBö¨y
)

	)

3401 
	#GLEW_ARB_ES2_com∑tibûôy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ES2_com∑tibûôy
)

	)

3407 #i‚de‡
GL_ARB_ES3_com∑tibûôy


3408 
	#GL_ARB_ES3_com∑tibûôy
 1

	)

3410 
	#GL_TEXTURE_IMMUTABLE_LEVELS
 0x82DF

	)

3411 
	#GL_PRIMITIVE_RESTART_FIXED_INDEX
 0x8D69

	)

3412 
	#GL_ANY_SAMPLES_PASSED_CONSERVATIVE
 0x8D6A

	)

3413 
	#GL_MAX_ELEMENT_INDEX
 0x8D6B

	)

3414 
	#GL_COMPRESSED_R11_EAC
 0x9270

	)

3415 
	#GL_COMPRESSED_SIGNED_R11_EAC
 0x9271

	)

3416 
	#GL_COMPRESSED_RG11_EAC
 0x9272

	)

3417 
	#GL_COMPRESSED_SIGNED_RG11_EAC
 0x9273

	)

3418 
	#GL_COMPRESSED_RGB8_ETC2
 0x9274

	)

3419 
	#GL_COMPRESSED_SRGB8_ETC2
 0x9275

	)

3420 
	#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9276

	)

3421 
	#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9277

	)

3422 
	#GL_COMPRESSED_RGBA8_ETC2_EAC
 0x9278

	)

3423 
	#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
 0x9279

	)

3425 
	#GLEW_ARB_ES3_com∑tibûôy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ES3_com∑tibûôy
)

	)

3431 #i‚de‡
GL_ARB_¨øys_of_¨øys


3432 
	#GL_ARB_¨øys_of_¨øys
 1

	)

3434 
	#GLEW_ARB_¨øys_of_¨øys
 
	`GLEW_GET_VAR
(
__GLEW_ARB_¨øys_of_¨øys
)

	)

3440 #i‚de‡
GL_ARB_ba£_ö°™˚


3441 
	#GL_ARB_ba£_ö°™˚
 1

	)

3443 (
GLAPIENTRY
 * 
	tPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

3444 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

3445 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tba£vîãx
, 
	tGLuöt
 
	tba£ö°™˚
);

3447 
	#glDøwAºaysIn°™˚dBa£In°™˚
 
	`GLEW_GET_FUN
(
__gÀwDøwAºaysIn°™˚dBa£In°™˚
)

	)

3448 
	#glDøwEÀmítsIn°™˚dBa£In°™˚
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIn°™˚dBa£In°™˚
)

	)

3449 
	#glDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
)

	)

3451 
	#GLEW_ARB_ba£_ö°™˚
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ba£_ö°™˚
)

	)

3457 #i‚de‡
GL_ARB_bödÀss_ãxtuª


3458 
	#GL_ARB_bödÀss_ãxtuª
 1

	)

3460 
	#GL_UNSIGNED_INT64_ARB
 0x140F

	)

3462 
GLuöt64
 (
	tGLAPIENTRY
 * 
	tPFNGLGETIMAGEHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

3463 
GLuöt64
 (
	tGLAPIENTRY
 * 
	tPFNGLGETTEXTUREHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
);

3464 
GLuöt64
 (
	tGLAPIENTRY
 * 
	tPFNGLGETTEXTURESAMPLERHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

3465 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBLUI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
* 
	t∑øms
);

3466 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

3467 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISTEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

3468 (
GLAPIENTRY
 * 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

3469 (
GLAPIENTRY
 * 
	tPFNGLMAKEIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

3470 (
GLAPIENTRY
 * 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

3471 (
GLAPIENTRY
 * 
	tPFNGLMAKETEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

3472 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

3473 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
* 
	tvÆues
);

3474 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

3475 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
* 
	tvÆue
);

3476 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1UI64ARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

3477 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1UI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
* 
	tv
);

3479 
	#glGëImageH™dÀARB
 
	`GLEW_GET_FUN
(
__gÀwGëImageH™dÀARB
)

	)

3480 
	#glGëTextuªH™dÀARB
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªH™dÀARB
)

	)

3481 
	#glGëTextuªSam∂îH™dÀARB
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªSam∂îH™dÀARB
)

	)

3482 
	#glGëVîãxAâribLui64vARB
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribLui64vARB
)

	)

3483 
	#glIsImageH™dÀResidítARB
 
	`GLEW_GET_FUN
(
__gÀwIsImageH™dÀResidítARB
)

	)

3484 
	#glIsTextuªH™dÀResidítARB
 
	`GLEW_GET_FUN
(
__gÀwIsTextuªH™dÀResidítARB
)

	)

3485 
	#glMakeImageH™dÀN⁄ResidítARB
 
	`GLEW_GET_FUN
(
__gÀwMakeImageH™dÀN⁄ResidítARB
)

	)

3486 
	#glMakeImageH™dÀResidítARB
 
	`GLEW_GET_FUN
(
__gÀwMakeImageH™dÀResidítARB
)

	)

3487 
	#glMakeTextuªH™dÀN⁄ResidítARB
 
	`GLEW_GET_FUN
(
__gÀwMakeTextuªH™dÀN⁄ResidítARB
)

	)

3488 
	#glMakeTextuªH™dÀResidítARB
 
	`GLEW_GET_FUN
(
__gÀwMakeTextuªH™dÀResidítARB
)

	)

3489 
	#glProgømUnif‹mH™dÀui64ARB
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mH™dÀui64ARB
)

	)

3490 
	#glProgømUnif‹mH™dÀui64vARB
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mH™dÀui64vARB
)

	)

3491 
	#glUnif‹mH™dÀui64ARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mH™dÀui64ARB
)

	)

3492 
	#glUnif‹mH™dÀui64vARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mH™dÀui64vARB
)

	)

3493 
	#glVîãxAâribL1ui64ARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1ui64ARB
)

	)

3494 
	#glVîãxAâribL1ui64vARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1ui64vARB
)

	)

3496 
	#GLEW_ARB_bödÀss_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_ARB_bödÀss_ãxtuª
)

	)

3502 #i‚de‡
GL_ARB_bÀnd_func_exãnded


3503 
	#GL_ARB_bÀnd_func_exãnded
 1

	)

3505 
	#GL_SRC1_COLOR
 0x88F9

	)

3506 
	#GL_ONE_MINUS_SRC1_COLOR
 0x88FA

	)

3507 
	#GL_ONE_MINUS_SRC1_ALPHA
 0x88FB

	)

3508 
	#GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
 0x88FC

	)

3510 (
GLAPIENTRY
 * 
	tPFNGLBINDFRAGDATALOCATIONINDEXEDPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹Numbî
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 * 
	t«me
);

3511 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETFRAGDATAINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 * 
	t«me
);

3513 
	#glBödFøgD©aLoˇti⁄Indexed
 
	`GLEW_GET_FUN
(
__gÀwBödFøgD©aLoˇti⁄Indexed
)

	)

3514 
	#glGëFøgD©aIndex
 
	`GLEW_GET_FUN
(
__gÀwGëFøgD©aIndex
)

	)

3516 
	#GLEW_ARB_bÀnd_func_exãnded
 
	`GLEW_GET_VAR
(
__GLEW_ARB_bÀnd_func_exãnded
)

	)

3522 #i‚de‡
GL_ARB_buf„r_°‹age


3523 
	#GL_ARB_buf„r_°‹age
 1

	)

3525 
	#GL_MAP_READ_BIT
 0x0001

	)

3526 
	#GL_MAP_WRITE_BIT
 0x0002

	)

3527 
	#GL_MAP_PERSISTENT_BIT
 0x00000040

	)

3528 
	#GL_MAP_COHERENT_BIT
 0x00000080

	)

3529 
	#GL_DYNAMIC_STORAGE_BIT
 0x0100

	)

3530 
	#GL_CLIENT_STORAGE_BIT
 0x0200

	)

3531 
	#GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
 0x00004000

	)

3532 
	#GL_BUFFER_IMMUTABLE_STORAGE
 0x821F

	)

3533 
	#GL_BUFFER_STORAGE_FLAGS
 0x8220

	)

3535 (
GLAPIENTRY
 * 
	tPFNGLBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
* 
	td©a
, 
	tGLbôfõld
 
	tÊags
);

3536 (
GLAPIENTRY
 * 
	tPFNGLNAMEDBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
* 
	td©a
, 
	tGLbôfõld
 
	tÊags
);

3538 
	#glBuf„rSt‹age
 
	`GLEW_GET_FUN
(
__gÀwBuf„rSt‹age
)

	)

3539 
	#glNamedBuf„rSt‹ageEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedBuf„rSt‹ageEXT
)

	)

3541 
	#GLEW_ARB_buf„r_°‹age
 
	`GLEW_GET_VAR
(
__GLEW_ARB_buf„r_°‹age
)

	)

3547 #i‚de‡
GL_ARB_˛_evít


3548 
	#GL_ARB_˛_evít
 1

	)

3550 
	#GL_SYNC_CL_EVENT_ARB
 0x8240

	)

3551 
	#GL_SYNC_CL_EVENT_COMPLETE_ARB
 0x8241

	)

3553 
_˛_c⁄ãxt
 *
	t˛_c⁄ãxt
;

3554 
_˛_evít
 *
	t˛_evít
;

3556 
GLsync
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATESYNCFROMCLEVENTARBPROC
Ë(
	t˛_c⁄ãxt
 
	tc⁄ãxt
, 
	t˛_evít
 
	tevít
, 
	tGLbôfõld
 
	tÊags
);

3558 
	#glCª©eSyncFromCLevítARB
 
	`GLEW_GET_FUN
(
__gÀwCª©eSyncFromCLevítARB
)

	)

3560 
	#GLEW_ARB_˛_evít
 
	`GLEW_GET_VAR
(
__GLEW_ARB_˛_evít
)

	)

3566 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


3567 
	#GL_ARB_˛ór_buf„r_obje˘
 1

	)

3569 (
GLAPIENTRY
 * 
	tPFNGLCLEARBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	td©a
);

3570 (
GLAPIENTRY
 * 
	tPFNGLCLEARBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	td©a
);

3571 (
GLAPIENTRY
 * 
	tPFNGLCLEARNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	td©a
);

3572 (
GLAPIENTRY
 * 
	tPFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	td©a
);

3574 
	#glCÀ¨Buf„rD©a
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Buf„rD©a
)

	)

3575 
	#glCÀ¨Buf„rSubD©a
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Buf„rSubD©a
)

	)

3576 
	#glCÀ¨NamedBuf„rD©aEXT
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨NamedBuf„rD©aEXT
)

	)

3577 
	#glCÀ¨NamedBuf„rSubD©aEXT
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨NamedBuf„rSubD©aEXT
)

	)

3579 
	#GLEW_ARB_˛ór_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_˛ór_buf„r_obje˘
)

	)

3585 #i‚de‡
GL_ARB_˛ór_ãxtuª


3586 
	#GL_ARB_˛ór_ãxtuª
 1

	)

3588 
	#GL_CLEAR_TEXTURE
 0x9365

	)

3590 (
GLAPIENTRY
 * 
	tPFNGLCLEARTEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	td©a
);

3591 (
GLAPIENTRY
 * 
	tPFNGLCLEARTEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* 
	td©a
);

3593 
	#glCÀ¨TexImage
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨TexImage
)

	)

3594 
	#glCÀ¨TexSubImage
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨TexSubImage
)

	)

3596 
	#GLEW_ARB_˛ór_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_ARB_˛ór_ãxtuª
)

	)

3602 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


3603 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

3605 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

3606 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

3607 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

3608 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

3609 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

3611 (
GLAPIENTRY
 * 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

3613 
	#glCœmpCﬁ‹ARB
 
	`GLEW_GET_FUN
(
__gÀwCœmpCﬁ‹ARB
)

	)

3615 
	#GLEW_ARB_cﬁ‹_buf„r_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_ARB_cﬁ‹_buf„r_Êﬂt
)

	)

3621 #i‚de‡
GL_ARB_com∑tibûôy


3622 
	#GL_ARB_com∑tibûôy
 1

	)

3624 
	#GLEW_ARB_com∑tibûôy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_com∑tibûôy
)

	)

3630 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


3631 
	#GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 1

	)

3633 
	#GL_UNPACK_COMPRESSED_BLOCK_WIDTH
 0x9127

	)

3634 
	#GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
 0x9128

	)

3635 
	#GL_UNPACK_COMPRESSED_BLOCK_DEPTH
 0x9129

	)

3636 
	#GL_UNPACK_COMPRESSED_BLOCK_SIZE
 0x912A

	)

3637 
	#GL_PACK_COMPRESSED_BLOCK_WIDTH
 0x912B

	)

3638 
	#GL_PACK_COMPRESSED_BLOCK_HEIGHT
 0x912C

	)

3639 
	#GL_PACK_COMPRESSED_BLOCK_DEPTH
 0x912D

	)

3640 
	#GL_PACK_COMPRESSED_BLOCK_SIZE
 0x912E

	)

3642 
	#GLEW_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 
	`GLEW_GET_VAR
(
__GLEW_ARB_com¥es£d_ãxtuª_pixñ_°‹age
)

	)

3648 #i‚de‡
GL_ARB_compuã_shadî


3649 
	#GL_ARB_compuã_shadî
 1

	)

3651 
	#GL_COMPUTE_SHADER_BIT
 0x00000020

	)

3652 
	#GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
 0x8262

	)

3653 
	#GL_MAX_COMPUTE_UNIFORM_COMPONENTS
 0x8263

	)

3654 
	#GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
 0x8264

	)

3655 
	#GL_MAX_COMPUTE_ATOMIC_COUNTERS
 0x8265

	)

3656 
	#GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
 0x8266

	)

3657 
	#GL_COMPUTE_WORK_GROUP_SIZE
 0x8267

	)

3658 
	#GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
 0x90EB

	)

3659 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
 0x90EC

	)

3660 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
 0x90ED

	)

3661 
	#GL_DISPATCH_INDIRECT_BUFFER
 0x90EE

	)

3662 
	#GL_DISPATCH_INDIRECT_BUFFER_BINDING
 0x90EF

	)

3663 
	#GL_COMPUTE_SHADER
 0x91B9

	)

3664 
	#GL_MAX_COMPUTE_UNIFORM_BLOCKS
 0x91BB

	)

3665 
	#GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
 0x91BC

	)

3666 
	#GL_MAX_COMPUTE_IMAGE_UNIFORMS
 0x91BD

	)

3667 
	#GL_MAX_COMPUTE_WORK_GROUP_COUNT
 0x91BE

	)

3668 
	#GL_MAX_COMPUTE_WORK_GROUP_SIZE
 0x91BF

	)

3670 (
GLAPIENTRY
 * 
	tPFNGLDISPATCHCOMPUTEPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
);

3671 (
GLAPIENTRY
 * 
	tPFNGLDISPATCHCOMPUTEINDIRECTPROC
Ë(
	tGLöçå
 
	tödúe˘
);

3673 
	#glDi•©chCompuã
 
	`GLEW_GET_FUN
(
__gÀwDi•©chCompuã
)

	)

3674 
	#glDi•©chCompuãIndúe˘
 
	`GLEW_GET_FUN
(
__gÀwDi•©chCompuãIndúe˘
)

	)

3676 
	#GLEW_ARB_compuã_shadî
 
	`GLEW_GET_VAR
(
__GLEW_ARB_compuã_shadî
)

	)

3682 #i‚de‡
GL_ARB_compuã_v¨übÀ_group_size


3683 
	#GL_ARB_compuã_v¨übÀ_group_size
 1

	)

3685 
	#GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
 0x90EB

	)

3686 
	#GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
 0x91BF

	)

3687 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
 0x9344

	)

3688 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
 0x9345

	)

3690 (
GLAPIENTRY
 * 
	tPFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
, GLuöà
	tgroup_size_x
, GLuöà
	tgroup_size_y
, GLuöà
	tgroup_size_z
);

3692 
	#glDi•©chCompuãGroupSizeARB
 
	`GLEW_GET_FUN
(
__gÀwDi•©chCompuãGroupSizeARB
)

	)

3694 
	#GLEW_ARB_compuã_v¨übÀ_group_size
 
	`GLEW_GET_VAR
(
__GLEW_ARB_compuã_v¨übÀ_group_size
)

	)

3700 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


3701 
	#GL_ARB_c⁄£rv©ive_dïth
 1

	)

3703 
	#GLEW_ARB_c⁄£rv©ive_dïth
 
	`GLEW_GET_VAR
(
__GLEW_ARB_c⁄£rv©ive_dïth
)

	)

3709 #i‚de‡
GL_ARB_c›y_buf„r


3710 
	#GL_ARB_c›y_buf„r
 1

	)

3712 
	#GL_COPY_READ_BUFFER
 0x8F36

	)

3713 
	#GL_COPY_WRITE_BUFFER
 0x8F37

	)

3715 (
GLAPIENTRY
 * 
	tPFNGLCOPYBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tªadèrgë
, GLíum 
	twrôë¨gë
, 
	tGLöçå
 
	tªadoff£t
, GLöçå 
	twrôeoff£t
, 
	tGLsizeùå
 
	tsize
);

3717 
	#glC›yBuf„rSubD©a
 
	`GLEW_GET_FUN
(
__gÀwC›yBuf„rSubD©a
)

	)

3719 
	#GLEW_ARB_c›y_buf„r
 
	`GLEW_GET_VAR
(
__GLEW_ARB_c›y_buf„r
)

	)

3725 #i‚de‡
GL_ARB_c›y_image


3726 
	#GL_ARB_c›y_image
 1

	)

3728 (
GLAPIENTRY
 * 
	tPFNGLCOPYIMAGESUBDATAPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	t§cWidth
, GLsizeò
	t§cHeight
, GLsizeò
	t§cDïth
);

3730 
	#glC›yImageSubD©a
 
	`GLEW_GET_FUN
(
__gÀwC›yImageSubD©a
)

	)

3732 
	#GLEW_ARB_c›y_image
 
	`GLEW_GET_VAR
(
__GLEW_ARB_c›y_image
)

	)

3738 #i‚de‡
GL_ARB_debug_ouçut


3739 
	#GL_ARB_debug_ouçut
 1

	)

3741 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
 0x8242

	)

3742 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
 0x8243

	)

3743 
	#GL_DEBUG_CALLBACK_FUNCTION_ARB
 0x8244

	)

3744 
	#GL_DEBUG_CALLBACK_USER_PARAM_ARB
 0x8245

	)

3745 
	#GL_DEBUG_SOURCE_API_ARB
 0x8246

	)

3746 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
 0x8247

	)

3747 
	#GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
 0x8248

	)

3748 
	#GL_DEBUG_SOURCE_THIRD_PARTY_ARB
 0x8249

	)

3749 
	#GL_DEBUG_SOURCE_APPLICATION_ARB
 0x824A

	)

3750 
	#GL_DEBUG_SOURCE_OTHER_ARB
 0x824B

	)

3751 
	#GL_DEBUG_TYPE_ERROR_ARB
 0x824C

	)

3752 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
 0x824D

	)

3753 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
 0x824E

	)

3754 
	#GL_DEBUG_TYPE_PORTABILITY_ARB
 0x824F

	)

3755 
	#GL_DEBUG_TYPE_PERFORMANCE_ARB
 0x8250

	)

3756 
	#GL_DEBUG_TYPE_OTHER_ARB
 0x8251

	)

3757 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
 0x9143

	)

3758 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
 0x9144

	)

3759 
	#GL_DEBUG_LOGGED_MESSAGES_ARB
 0x9145

	)

3760 
	#GL_DEBUG_SEVERITY_HIGH_ARB
 0x9146

	)

3761 
	#GL_DEBUG_SEVERITY_MEDIUM_ARB
 0x9147

	)

3762 
	#GL_DEBUG_SEVERITY_LOW_ARB
 0x9148

	)

3764 (
APIENTRY
 *
	tGLDEBUGPROCARB
)(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tmesßge
, 
	tGLvoid
* 
	tu£rP¨am
);

3766 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGECALLBACKARBPROC
Ë(
	tGLDEBUGPROCARB
 
	tˇŒback
, c⁄° 
	tGLvoid
 *
	tu£rP¨am
);

3767 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGECONTROLARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
* 
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

3768 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGEINSERTARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tbuf
);

3769 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETDEBUGMESSAGELOGARBPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
* 
	tsour˚s
, GLíum* 
	tty≥s
, GLuöt* 
	tids
, GLíum* 
	t£vîôõs
, GLsizei* 
	tÀngths
, 
	tGLch¨
* 
	tmesßgeLog
);

3771 
	#glDebugMesßgeCÆlbackARB
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeCÆlbackARB
)

	)

3772 
	#glDebugMesßgeC⁄åﬁARB
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeC⁄åﬁARB
)

	)

3773 
	#glDebugMesßgeIn£πARB
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeIn£πARB
)

	)

3774 
	#glGëDebugMesßgeLogARB
 
	`GLEW_GET_FUN
(
__gÀwGëDebugMesßgeLogARB
)

	)

3776 
	#GLEW_ARB_debug_ouçut
 
	`GLEW_GET_VAR
(
__GLEW_ARB_debug_ouçut
)

	)

3782 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


3783 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

3785 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

3786 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

3787 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

3789 
	#GLEW_ARB_dïth_buf„r_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_ARB_dïth_buf„r_Êﬂt
)

	)

3795 #i‚de‡
GL_ARB_dïth_˛amp


3796 
	#GL_ARB_dïth_˛amp
 1

	)

3798 
	#GL_DEPTH_CLAMP
 0x864F

	)

3800 
	#GLEW_ARB_dïth_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_ARB_dïth_˛amp
)

	)

3806 #i‚de‡
GL_ARB_dïth_ãxtuª


3807 
	#GL_ARB_dïth_ãxtuª
 1

	)

3809 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

3810 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

3811 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

3812 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

3813 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

3815 
	#GLEW_ARB_dïth_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_ARB_dïth_ãxtuª
)

	)

3821 #i‚de‡
GL_ARB_døw_buf„rs


3822 
	#GL_ARB_døw_buf„rs
 1

	)

3824 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

3825 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

3826 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

3827 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

3828 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

3829 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

3830 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

3831 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

3832 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

3833 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

3834 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

3835 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

3836 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

3837 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

3838 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

3839 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

3840 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

3842 (
GLAPIENTRY
 * 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
* 
	tbufs
);

3844 
	#glDøwBuf„rsARB
 
	`GLEW_GET_FUN
(
__gÀwDøwBuf„rsARB
)

	)

3846 
	#GLEW_ARB_døw_buf„rs
 
	`GLEW_GET_VAR
(
__GLEW_ARB_døw_buf„rs
)

	)

3852 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


3853 
	#GL_ARB_døw_buf„rs_bÀnd
 1

	)

3855 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

3856 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

3857 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

3858 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

3860 
	#glBÀndEqu©i⁄Sï¨©eiARB
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄Sï¨©eiARB
)

	)

3861 
	#glBÀndEqu©i⁄iARB
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄iARB
)

	)

3862 
	#glBÀndFuncSï¨©eiARB
 
	`GLEW_GET_FUN
(
__gÀwBÀndFuncSï¨©eiARB
)

	)

3863 
	#glBÀndFunciARB
 
	`GLEW_GET_FUN
(
__gÀwBÀndFunciARB
)

	)

3865 
	#GLEW_ARB_døw_buf„rs_bÀnd
 
	`GLEW_GET_VAR
(
__GLEW_ARB_døw_buf„rs_bÀnd
)

	)

3871 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


3872 
	#GL_ARB_døw_ñemíts_ba£_vîãx
 1

	)

3874 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

3875 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tba£vîãx
);

3876 (
GLAPIENTRY
 * 
	tPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

3877 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
* 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
* c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
, c⁄° 
	tGLöt
 *
	tba£vîãx
);

3879 
	#glDøwEÀmítsBa£Vîãx
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsBa£Vîãx
)

	)

3880 
	#glDøwEÀmítsIn°™˚dBa£Vîãx
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIn°™˚dBa£Vîãx
)

	)

3881 
	#glDøwR™geEÀmítsBa£Vîãx
 
	`GLEW_GET_FUN
(
__gÀwDøwR™geEÀmítsBa£Vîãx
)

	)

3882 
	#glMu…iDøwEÀmítsBa£Vîãx
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmítsBa£Vîãx
)

	)

3884 
	#GLEW_ARB_døw_ñemíts_ba£_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_ARB_døw_ñemíts_ba£_vîãx
)

	)

3890 #i‚de‡
GL_ARB_døw_ödúe˘


3891 
	#GL_ARB_døw_ödúe˘
 1

	)

3893 
	#GL_DRAW_INDIRECT_BUFFER
 0x8F3F

	)

3894 
	#GL_DRAW_INDIRECT_BUFFER_BINDING
 0x8F43

	)

3896 (
GLAPIENTRY
 * 
	tPFNGLDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLvoid
 *
	tödúe˘
);

3897 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödúe˘
);

3899 
	#glDøwAºaysIndúe˘
 
	`GLEW_GET_FUN
(
__gÀwDøwAºaysIndúe˘
)

	)

3900 
	#glDøwEÀmítsIndúe˘
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIndúe˘
)

	)

3902 
	#GLEW_ARB_døw_ödúe˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_døw_ödúe˘
)

	)

3908 #i‚de‡
GL_ARB_døw_ö°™˚d


3909 
	#GL_ARB_døw_ö°™˚d
 1

	)

3911 
	#GLEW_ARB_døw_ö°™˚d
 
	`GLEW_GET_VAR
(
__GLEW_ARB_døw_ö°™˚d
)

	)

3917 #i‚de‡
GL_ARB_íh™˚d_œyouts


3918 
	#GL_ARB_íh™˚d_œyouts
 1

	)

3920 
	#GL_LOCATION_COMPONENT
 0x934A

	)

3921 
	#GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
 0x934B

	)

3922 
	#GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
 0x934C

	)

3924 
	#GLEW_ARB_íh™˚d_œyouts
 
	`GLEW_GET_VAR
(
__GLEW_ARB_íh™˚d_œyouts
)

	)

3930 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


3931 
	#GL_ARB_ex∂icô_©åib_loˇti⁄
 1

	)

3933 
	#GLEW_ARB_ex∂icô_©åib_loˇti⁄
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ex∂icô_©åib_loˇti⁄
)

	)

3939 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


3940 
	#GL_ARB_ex∂icô_unif‹m_loˇti⁄
 1

	)

3942 
	#GL_MAX_UNIFORM_LOCATIONS
 0x826E

	)

3944 
	#GLEW_ARB_ex∂icô_unif‹m_loˇti⁄
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ex∂icô_unif‹m_loˇti⁄
)

	)

3950 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


3951 
	#GL_ARB_‰agmít_co‹d_c⁄víti⁄s
 1

	)

3953 
	#GLEW_ARB_‰agmít_co‹d_c⁄víti⁄s
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰agmít_co‹d_c⁄víti⁄s
)

	)

3959 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


3960 
	#GL_ARB_‰agmít_œyî_võwp‹t
 1

	)

3962 
	#GLEW_ARB_‰agmít_œyî_võwp‹t
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰agmít_œyî_võwp‹t
)

	)

3968 #i‚de‡
GL_ARB_‰agmít_¥ogøm


3969 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

3971 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

3972 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

3973 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

3974 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

3975 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

3976 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

3977 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

3978 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

3979 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

3980 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

3981 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

3982 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

3983 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

3984 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

3985 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

3987 
	#GLEW_ARB_‰agmít_¥ogøm
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰agmít_¥ogøm
)

	)

3993 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


3994 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

3996 
	#GLEW_ARB_‰agmít_¥ogøm_shadow
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰agmít_¥ogøm_shadow
)

	)

4002 #i‚de‡
GL_ARB_‰agmít_shadî


4003 
	#GL_ARB_‰agmít_shadî
 1

	)

4005 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

4006 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

4007 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

4009 
	#GLEW_ARB_‰agmít_shadî
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰agmít_shadî
)

	)

4015 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


4016 
	#GL_ARB_‰amebuf„r_no_©èchmíts
 1

	)

4018 
	#GL_FRAMEBUFFER_DEFAULT_WIDTH
 0x9310

	)

4019 
	#GL_FRAMEBUFFER_DEFAULT_HEIGHT
 0x9311

	)

4020 
	#GL_FRAMEBUFFER_DEFAULT_LAYERS
 0x9312

	)

4021 
	#GL_FRAMEBUFFER_DEFAULT_SAMPLES
 0x9313

	)

4022 
	#GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
 0x9314

	)

4023 
	#GL_MAX_FRAMEBUFFER_WIDTH
 0x9315

	)

4024 
	#GL_MAX_FRAMEBUFFER_HEIGHT
 0x9316

	)

4025 
	#GL_MAX_FRAMEBUFFER_LAYERS
 0x9317

	)

4026 
	#GL_MAX_FRAMEBUFFER_SAMPLES
 0x9318

	)

4028 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4029 (
GLAPIENTRY
 * 
	tPFNGLGETFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

4030 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

4031 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4033 
	#glFømebuf„rP¨amëîi
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rP¨amëîi
)

	)

4034 
	#glGëFømebuf„rP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëFømebuf„rP¨amëîiv
)

	)

4035 
	#glGëNamedFømebuf„rP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedFømebuf„rP¨amëîivEXT
)

	)

4036 
	#glNamedFømebuf„rP¨amëîiEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rP¨amëîiEXT
)

	)

4038 
	#GLEW_ARB_‰amebuf„r_no_©èchmíts
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰amebuf„r_no_©èchmíts
)

	)

4044 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


4045 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

4047 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

4048 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

4049 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

4050 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

4051 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

4052 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

4053 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

4054 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

4055 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

4056 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

4057 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

4058 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

4059 
	#GL_INDEX
 0x8222

	)

4060 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

4061 
	#GL_DEPTH_STENCIL
 0x84F9

	)

4062 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

4063 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

4064 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

4065 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

4066 
	#GL_SRGB
 0x8C40

	)

4067 
	#GL_DRAW_FRAMEBUFFER_BINDING
 0x8CA6

	)

4068 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

4069 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

4070 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

4071 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

4072 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

4073 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

4074 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

4075 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

4076 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

4077 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

4078 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

4079 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

4080 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

4081 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

4082 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

4083 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

4084 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

4085 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

4086 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

4087 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

4088 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

4089 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

4090 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

4091 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

4092 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

4093 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

4094 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

4095 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

4096 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

4097 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

4098 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

4099 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

4100 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

4101 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

4102 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

4103 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

4104 
	#GL_FRAMEBUFFER
 0x8D40

	)

4105 
	#GL_RENDERBUFFER
 0x8D41

	)

4106 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

4107 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

4108 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

4109 
	#GL_STENCIL_INDEX1
 0x8D46

	)

4110 
	#GL_STENCIL_INDEX4
 0x8D47

	)

4111 
	#GL_STENCIL_INDEX8
 0x8D48

	)

4112 
	#GL_STENCIL_INDEX16
 0x8D49

	)

4113 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

4114 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

4115 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

4116 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

4117 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

4118 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

4119 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

4120 
	#GL_MAX_SAMPLES
 0x8D57

	)

4122 (
GLAPIENTRY
 * 
	tPFNGLBINDFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

4123 (
GLAPIENTRY
 * 
	tPFNGLBINDRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

4124 (
GLAPIENTRY
 * 
	tPFNGLBLITFRAMEBUFFERPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

4125 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLCHECKFRAMEBUFFERSTATUSPROC
Ë(
	tGLíum
 
	tèrgë
);

4126 (
GLAPIENTRY
 * 
	tPFNGLDELETEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t‰amebuf„rs
);

4127 (
GLAPIENTRY
 * 
	tPFNGLDELETERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tªndîbuf„rs
);

4128 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

4129 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURE1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

4130 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURE2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

4131 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURE3DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

4132 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLíum
 
	tèrgë
,GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
,
	tGLöt
 
	tÀvñ
,GLöà
	tœyî
);

4133 (
GLAPIENTRY
 * 
	tPFNGLGENFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t‰amebuf„rs
);

4134 (
GLAPIENTRY
 * 
	tPFNGLGENRENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tªndîbuf„rs
);

4135 (
GLAPIENTRY
 * 
	tPFNGLGENERATEMIPMAPPROC
Ë(
	tGLíum
 
	tèrgë
);

4136 (
GLAPIENTRY
 * 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

4137 (
GLAPIENTRY
 * 
	tPFNGLGETRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

4138 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

4139 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISRENDERBUFFERPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

4140 (
GLAPIENTRY
 * 
	tPFNGLRENDERBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4141 (
GLAPIENTRY
 * 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

4143 
	#glBödFømebuf„r
 
	`GLEW_GET_FUN
(
__gÀwBödFømebuf„r
)

	)

4144 
	#glBödRídîbuf„r
 
	`GLEW_GET_FUN
(
__gÀwBödRídîbuf„r
)

	)

4145 
	#glBlôFømebuf„r
 
	`GLEW_GET_FUN
(
__gÀwBlôFømebuf„r
)

	)

4146 
	#glCheckFømebuf„rSètus
 
	`GLEW_GET_FUN
(
__gÀwCheckFømebuf„rSètus
)

	)

4147 
	#glDñëeFømebuf„rs
 
	`GLEW_GET_FUN
(
__gÀwDñëeFømebuf„rs
)

	)

4148 
	#glDñëeRídîbuf„rs
 
	`GLEW_GET_FUN
(
__gÀwDñëeRídîbuf„rs
)

	)

4149 
	#glFømebuf„rRídîbuf„r
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rRídîbuf„r
)

	)

4150 
	#glFømebuf„rTextuª1D
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª1D
)

	)

4151 
	#glFømebuf„rTextuª2D
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª2D
)

	)

4152 
	#glFømebuf„rTextuª3D
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª3D
)

	)

4153 
	#glFømebuf„rTextuªLayî
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªLayî
)

	)

4154 
	#glGíFømebuf„rs
 
	`GLEW_GET_FUN
(
__gÀwGíFømebuf„rs
)

	)

4155 
	#glGíRídîbuf„rs
 
	`GLEW_GET_FUN
(
__gÀwGíRídîbuf„rs
)

	)

4156 
	#glGíî©eMùm≠
 
	`GLEW_GET_FUN
(
__gÀwGíî©eMùm≠
)

	)

4157 
	#glGëFømebuf„rAâachmítP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëFømebuf„rAâachmítP¨amëîiv
)

	)

4158 
	#glGëRídîbuf„rP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëRídîbuf„rP¨amëîiv
)

	)

4159 
	#glIsFømebuf„r
 
	`GLEW_GET_FUN
(
__gÀwIsFømebuf„r
)

	)

4160 
	#glIsRídîbuf„r
 
	`GLEW_GET_FUN
(
__gÀwIsRídîbuf„r
)

	)

4161 
	#glRídîbuf„rSt‹age
 
	`GLEW_GET_FUN
(
__gÀwRídîbuf„rSt‹age
)

	)

4162 
	#glRídîbuf„rSt‹ageMu…ißm∂e
 
	`GLEW_GET_FUN
(
__gÀwRídîbuf„rSt‹ageMu…ißm∂e
)

	)

4164 
	#GLEW_ARB_‰amebuf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰amebuf„r_obje˘
)

	)

4170 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


4171 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

4173 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

4175 
	#GLEW_ARB_‰amebuf„r_sRGB
 
	`GLEW_GET_VAR
(
__GLEW_ARB_‰amebuf„r_sRGB
)

	)

4181 #i‚de‡
GL_ARB_geomëry_shadî4


4182 
	#GL_ARB_geomëry_shadî4
 1

	)

4184 
	#GL_LINES_ADJACENCY_ARB
 0xA

	)

4185 
	#GL_LINE_STRIP_ADJACENCY_ARB
 0xB

	)

4186 
	#GL_TRIANGLES_ADJACENCY_ARB
 0xC

	)

4187 
	#GL_TRIANGLE_STRIP_ADJACENCY_ARB
 0xD

	)

4188 
	#GL_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

4189 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
 0x8C29

	)

4190 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

4191 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
 0x8DA7

	)

4192 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
 0x8DA8

	)

4193 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
 0x8DA9

	)

4194 
	#GL_GEOMETRY_SHADER_ARB
 0x8DD9

	)

4195 
	#GL_GEOMETRY_VERTICES_OUT_ARB
 0x8DDA

	)

4196 
	#GL_GEOMETRY_INPUT_TYPE_ARB
 0x8DDB

	)

4197 
	#GL_GEOMETRY_OUTPUT_TYPE_ARB
 0x8DDC

	)

4198 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
 0x8DDD

	)

4199 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
 0x8DDE

	)

4200 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
 0x8DDF

	)

4201 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
 0x8DE0

	)

4202 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
 0x8DE1

	)

4204 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTUREARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

4205 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTUREFACEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

4206 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURELAYERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

4207 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETERIARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

4209 
	#glFømebuf„rTextuªARB
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªARB
)

	)

4210 
	#glFømebuf„rTextuªFa˚ARB
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªFa˚ARB
)

	)

4211 
	#glFømebuf„rTextuªLayîARB
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªLayîARB
)

	)

4212 
	#glProgømP¨amëîiARB
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëîiARB
)

	)

4214 
	#GLEW_ARB_geomëry_shadî4
 
	`GLEW_GET_VAR
(
__GLEW_ARB_geomëry_shadî4
)

	)

4220 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


4221 
	#GL_ARB_gë_¥ogøm_bö¨y
 1

	)

4223 
	#GL_PROGRAM_BINARY_RETRIEVABLE_HINT
 0x8257

	)

4224 
	#GL_PROGRAM_BINARY_LENGTH
 0x8741

	)

4225 
	#GL_NUM_PROGRAM_BINARY_FORMATS
 0x87FE

	)

4226 
	#GL_PROGRAM_BINARY_FORMATS
 0x87FF

	)

4228 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, 
	tGLvoid
*
	tbö¨y
);

4229 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° 
	tGLvoid
 *
	tbö¨y
, 
	tGLsizei
 
	tÀngth
);

4230 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETERIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

4232 
	#glGëProgømBö¨y
 
	`GLEW_GET_FUN
(
__gÀwGëProgømBö¨y
)

	)

4233 
	#glProgømBö¨y
 
	`GLEW_GET_FUN
(
__gÀwProgømBö¨y
)

	)

4234 
	#glProgømP¨amëîi
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëîi
)

	)

4236 
	#GLEW_ARB_gë_¥ogøm_bö¨y
 
	`GLEW_GET_VAR
(
__GLEW_ARB_gë_¥ogøm_bö¨y
)

	)

4242 #i‚de‡
GL_ARB_gpu_shadî5


4243 
	#GL_ARB_gpu_shadî5
 1

	)

4245 
	#GL_GEOMETRY_SHADER_INVOCATIONS
 0x887F

	)

4246 
	#GL_MAX_GEOMETRY_SHADER_INVOCATIONS
 0x8E5A

	)

4247 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5B

	)

4248 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5C

	)

4249 
	#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
 0x8E5D

	)

4250 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

4252 
	#GLEW_ARB_gpu_shadî5
 
	`GLEW_GET_VAR
(
__GLEW_ARB_gpu_shadî5
)

	)

4258 #i‚de‡
GL_ARB_gpu_shadî_Â64


4259 
	#GL_ARB_gpu_shadî_Â64
 1

	)

4261 
	#GL_DOUBLE_MAT2
 0x8F46

	)

4262 
	#GL_DOUBLE_MAT3
 0x8F47

	)

4263 
	#GL_DOUBLE_MAT4
 0x8F48

	)

4264 
	#GL_DOUBLE_MAT2x3
 0x8F49

	)

4265 
	#GL_DOUBLE_MAT2x4
 0x8F4A

	)

4266 
	#GL_DOUBLE_MAT3x2
 0x8F4B

	)

4267 
	#GL_DOUBLE_MAT3x4
 0x8F4C

	)

4268 
	#GL_DOUBLE_MAT4x2
 0x8F4D

	)

4269 
	#GL_DOUBLE_MAT4x3
 0x8F4E

	)

4270 
	#GL_DOUBLE_VEC2
 0x8FFC

	)

4271 
	#GL_DOUBLE_VEC3
 0x8FFD

	)

4272 
	#GL_DOUBLE_VEC4
 0x8FFE

	)

4274 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
* 
	t∑øms
);

4275 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

4276 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4277 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4278 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4279 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4280 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4281 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4282 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4283 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4284 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4285 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4286 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4287 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4288 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4289 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4290 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4291 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

4293 
	#glGëUnif‹mdv
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mdv
)

	)

4294 
	#glUnif‹m1d
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1d
)

	)

4295 
	#glUnif‹m1dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1dv
)

	)

4296 
	#glUnif‹m2d
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2d
)

	)

4297 
	#glUnif‹m2dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2dv
)

	)

4298 
	#glUnif‹m3d
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3d
)

	)

4299 
	#glUnif‹m3dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3dv
)

	)

4300 
	#glUnif‹m4d
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4d
)

	)

4301 
	#glUnif‹m4dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4dv
)

	)

4302 
	#glUnif‹mM©rix2dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2dv
)

	)

4303 
	#glUnif‹mM©rix2x3dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2x3dv
)

	)

4304 
	#glUnif‹mM©rix2x4dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2x4dv
)

	)

4305 
	#glUnif‹mM©rix3dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3dv
)

	)

4306 
	#glUnif‹mM©rix3x2dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3x2dv
)

	)

4307 
	#glUnif‹mM©rix3x4dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3x4dv
)

	)

4308 
	#glUnif‹mM©rix4dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4dv
)

	)

4309 
	#glUnif‹mM©rix4x2dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4x2dv
)

	)

4310 
	#glUnif‹mM©rix4x3dv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4x3dv
)

	)

4312 
	#GLEW_ARB_gpu_shadî_Â64
 
	`GLEW_GET_VAR
(
__GLEW_ARB_gpu_shadî_Â64
)

	)

4318 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


4319 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

4321 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

4323 
	#GLEW_ARB_hÆf_Êﬂt_pixñ
 
	`GLEW_GET_VAR
(
__GLEW_ARB_hÆf_Êﬂt_pixñ
)

	)

4329 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


4330 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

4332 
	#GL_HALF_FLOAT
 0x140B

	)

4334 
	#GLEW_ARB_hÆf_Êﬂt_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_ARB_hÆf_Êﬂt_vîãx
)

	)

4340 #i‚de‡
GL_ARB_imagög


4341 
	#GL_ARB_imagög
 1

	)

4343 
	#GL_CONSTANT_COLOR
 0x8001

	)

4344 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

4345 
	#GL_CONSTANT_ALPHA
 0x8003

	)

4346 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

4347 
	#GL_BLEND_COLOR
 0x8005

	)

4348 
	#GL_FUNC_ADD
 0x8006

	)

4349 
	#GL_MIN
 0x8007

	)

4350 
	#GL_MAX
 0x8008

	)

4351 
	#GL_BLEND_EQUATION
 0x8009

	)

4352 
	#GL_FUNC_SUBTRACT
 0x800A

	)

4353 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

4354 
	#GL_CONVOLUTION_1D
 0x8010

	)

4355 
	#GL_CONVOLUTION_2D
 0x8011

	)

4356 
	#GL_SEPARABLE_2D
 0x8012

	)

4357 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

4358 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

4359 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

4360 
	#GL_REDUCE
 0x8016

	)

4361 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

4362 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

4363 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

4364 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

4365 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

4366 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

4367 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

4368 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

4369 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

4370 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

4371 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

4372 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

4373 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

4374 
	#GL_HISTOGRAM
 0x8024

	)

4375 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

4376 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

4377 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

4378 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

4379 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

4380 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

4381 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

4382 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

4383 
	#GL_HISTOGRAM_SINK
 0x802D

	)

4384 
	#GL_MINMAX
 0x802E

	)

4385 
	#GL_MINMAX_FORMAT
 0x802F

	)

4386 
	#GL_MINMAX_SINK
 0x8030

	)

4387 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

4388 
	#GL_COLOR_MATRIX
 0x80B1

	)

4389 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

4390 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

4391 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

4392 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

4393 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

4394 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

4395 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

4396 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

4397 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

4398 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

4399 
	#GL_COLOR_TABLE
 0x80D0

	)

4400 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

4401 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

4402 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

4403 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

4404 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

4405 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

4406 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

4407 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

4408 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

4409 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

4410 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

4411 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

4412 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

4413 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

4414 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

4415 
	#GL_IGNORE_BORDER
 0x8150

	)

4416 
	#GL_CONSTANT_BORDER
 0x8151

	)

4417 
	#GL_WRAP_BORDER
 0x8152

	)

4418 
	#GL_REPLICATE_BORDER
 0x8153

	)

4419 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

4421 (
GLAPIENTRY
 * 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

4422 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

4423 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4424 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4425 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

4426 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

4427 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

4428 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

4429 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

4430 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

4431 (
GLAPIENTRY
 * 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

4432 (
GLAPIENTRY
 * 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4433 (
GLAPIENTRY
 * 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

4434 (
GLAPIENTRY
 * 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

4435 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

4436 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4437 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4438 (
GLAPIENTRY
 * 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

4439 (
GLAPIENTRY
 * 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4440 (
GLAPIENTRY
 * 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4441 (
GLAPIENTRY
 * 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

4442 (
GLAPIENTRY
 * 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4443 (
GLAPIENTRY
 * 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4444 (
GLAPIENTRY
 * 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥s
, 
	tGLvoid
 *
	tvÆues
);

4445 (
GLAPIENTRY
 * 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4446 (
GLAPIENTRY
 * 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4447 (
GLAPIENTRY
 * 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

4448 (
GLAPIENTRY
 * 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

4449 (
GLAPIENTRY
 * 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

4450 (
GLAPIENTRY
 * 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

4451 (
GLAPIENTRY
 * 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

4452 (
GLAPIENTRY
 * 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

4454 
	#glCﬁ‹SubTabÀ
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹SubTabÀ
)

	)

4455 
	#glCﬁ‹TabÀ
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀ
)

	)

4456 
	#glCﬁ‹TabÀP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀP¨amëîfv
)

	)

4457 
	#glCﬁ‹TabÀP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀP¨amëîiv
)

	)

4458 
	#glC⁄vﬁuti⁄Fûãr1D
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄Fûãr1D
)

	)

4459 
	#glC⁄vﬁuti⁄Fûãr2D
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄Fûãr2D
)

	)

4460 
	#glC⁄vﬁuti⁄P¨amëîf
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîf
)

	)

4461 
	#glC⁄vﬁuti⁄P¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîfv
)

	)

4462 
	#glC⁄vﬁuti⁄P¨amëîi
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîi
)

	)

4463 
	#glC⁄vﬁuti⁄P¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîiv
)

	)

4464 
	#glC›yCﬁ‹SubTabÀ
 
	`GLEW_GET_FUN
(
__gÀwC›yCﬁ‹SubTabÀ
)

	)

4465 
	#glC›yCﬁ‹TabÀ
 
	`GLEW_GET_FUN
(
__gÀwC›yCﬁ‹TabÀ
)

	)

4466 
	#glC›yC⁄vﬁuti⁄Fûãr1D
 
	`GLEW_GET_FUN
(
__gÀwC›yC⁄vﬁuti⁄Fûãr1D
)

	)

4467 
	#glC›yC⁄vﬁuti⁄Fûãr2D
 
	`GLEW_GET_FUN
(
__gÀwC›yC⁄vﬁuti⁄Fûãr2D
)

	)

4468 
	#glGëCﬁ‹TabÀ
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀ
)

	)

4469 
	#glGëCﬁ‹TabÀP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀP¨amëîfv
)

	)

4470 
	#glGëCﬁ‹TabÀP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀP¨amëîiv
)

	)

4471 
	#glGëC⁄vﬁuti⁄Fûãr
 
	`GLEW_GET_FUN
(
__gÀwGëC⁄vﬁuti⁄Fûãr
)

	)

4472 
	#glGëC⁄vﬁuti⁄P¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwGëC⁄vﬁuti⁄P¨amëîfv
)

	)

4473 
	#glGëC⁄vﬁuti⁄P¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëC⁄vﬁuti⁄P¨amëîiv
)

	)

4474 
	#glGëHi°ogøm
 
	`GLEW_GET_FUN
(
__gÀwGëHi°ogøm
)

	)

4475 
	#glGëHi°ogømP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwGëHi°ogømP¨amëîfv
)

	)

4476 
	#glGëHi°ogømP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëHi°ogømP¨amëîiv
)

	)

4477 
	#glGëMömax
 
	`GLEW_GET_FUN
(
__gÀwGëMömax
)

	)

4478 
	#glGëMömaxP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwGëMömaxP¨amëîfv
)

	)

4479 
	#glGëMömaxP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëMömaxP¨amëîiv
)

	)

4480 
	#glGëSï¨abÀFûãr
 
	`GLEW_GET_FUN
(
__gÀwGëSï¨abÀFûãr
)

	)

4481 
	#glHi°ogøm
 
	`GLEW_GET_FUN
(
__gÀwHi°ogøm
)

	)

4482 
	#glMömax
 
	`GLEW_GET_FUN
(
__gÀwMömax
)

	)

4483 
	#glRe£tHi°ogøm
 
	`GLEW_GET_FUN
(
__gÀwRe£tHi°ogøm
)

	)

4484 
	#glRe£tMömax
 
	`GLEW_GET_FUN
(
__gÀwRe£tMömax
)

	)

4485 
	#glSï¨abÀFûãr2D
 
	`GLEW_GET_FUN
(
__gÀwSï¨abÀFûãr2D
)

	)

4487 
	#GLEW_ARB_imagög
 
	`GLEW_GET_VAR
(
__GLEW_ARB_imagög
)

	)

4493 #i‚de‡
GL_ARB_ödúe˘_∑ømëîs


4494 
	#GL_ARB_ödúe˘_∑ømëîs
 1

	)

4496 
	#GL_PARAMETER_BUFFER_ARB
 0x80EE

	)

4497 
	#GL_PARAMETER_BUFFER_BINDING_ARB
 0x80EF

	)

4499 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLöçå
 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

4500 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLöçå
 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

4502 
	#glMu…iDøwAºaysIndúe˘Cou¡ARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwAºaysIndúe˘Cou¡ARB
)

	)

4503 
	#glMu…iDøwEÀmítsIndúe˘Cou¡ARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmítsIndúe˘Cou¡ARB
)

	)

4505 
	#GLEW_ARB_ödúe˘_∑ømëîs
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ödúe˘_∑ømëîs
)

	)

4511 #i‚de‡
GL_ARB_ö°™˚d_¨øys


4512 
	#GL_ARB_ö°™˚d_¨øys
 1

	)

4514 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
 0x88FE

	)

4516 (
GLAPIENTRY
 * 
	tPFNGLDRAWARRAYSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

4517 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° * 
	tödi˚s
, GLsizeò
	t¥imcou¡
);

4518 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBDIVISORARBPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

4520 
	#glDøwAºaysIn°™˚dARB
 
	`GLEW_GET_FUN
(
__gÀwDøwAºaysIn°™˚dARB
)

	)

4521 
	#glDøwEÀmítsIn°™˚dARB
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIn°™˚dARB
)

	)

4522 
	#glVîãxAâribDivis‹ARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribDivis‹ARB
)

	)

4524 
	#GLEW_ARB_ö°™˚d_¨øys
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ö°™˚d_¨øys
)

	)

4530 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


4531 
	#GL_ARB_öã∫Æf‹m©_quîy
 1

	)

4533 
	#GL_NUM_SAMPLE_COUNTS
 0x9380

	)

4535 (
GLAPIENTRY
 * 
	tPFNGLGETINTERNALFORMATIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
* 
	t∑øms
);

4537 
	#glGëI¡î«lf‹m©iv
 
	`GLEW_GET_FUN
(
__gÀwGëI¡î«lf‹m©iv
)

	)

4539 
	#GLEW_ARB_öã∫Æf‹m©_quîy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_öã∫Æf‹m©_quîy
)

	)

4545 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


4546 
	#GL_ARB_öã∫Æf‹m©_quîy2
 1

	)

4548 
	#GL_INTERNALFORMAT_SUPPORTED
 0x826F

	)

4549 
	#GL_INTERNALFORMAT_PREFERRED
 0x8270

	)

4550 
	#GL_INTERNALFORMAT_RED_SIZE
 0x8271

	)

4551 
	#GL_INTERNALFORMAT_GREEN_SIZE
 0x8272

	)

4552 
	#GL_INTERNALFORMAT_BLUE_SIZE
 0x8273

	)

4553 
	#GL_INTERNALFORMAT_ALPHA_SIZE
 0x8274

	)

4554 
	#GL_INTERNALFORMAT_DEPTH_SIZE
 0x8275

	)

4555 
	#GL_INTERNALFORMAT_STENCIL_SIZE
 0x8276

	)

4556 
	#GL_INTERNALFORMAT_SHARED_SIZE
 0x8277

	)

4557 
	#GL_INTERNALFORMAT_RED_TYPE
 0x8278

	)

4558 
	#GL_INTERNALFORMAT_GREEN_TYPE
 0x8279

	)

4559 
	#GL_INTERNALFORMAT_BLUE_TYPE
 0x827A

	)

4560 
	#GL_INTERNALFORMAT_ALPHA_TYPE
 0x827B

	)

4561 
	#GL_INTERNALFORMAT_DEPTH_TYPE
 0x827C

	)

4562 
	#GL_INTERNALFORMAT_STENCIL_TYPE
 0x827D

	)

4563 
	#GL_MAX_WIDTH
 0x827E

	)

4564 
	#GL_MAX_HEIGHT
 0x827F

	)

4565 
	#GL_MAX_DEPTH
 0x8280

	)

4566 
	#GL_MAX_LAYERS
 0x8281

	)

4567 
	#GL_MAX_COMBINED_DIMENSIONS
 0x8282

	)

4568 
	#GL_COLOR_COMPONENTS
 0x8283

	)

4569 
	#GL_DEPTH_COMPONENTS
 0x8284

	)

4570 
	#GL_STENCIL_COMPONENTS
 0x8285

	)

4571 
	#GL_COLOR_RENDERABLE
 0x8286

	)

4572 
	#GL_DEPTH_RENDERABLE
 0x8287

	)

4573 
	#GL_STENCIL_RENDERABLE
 0x8288

	)

4574 
	#GL_FRAMEBUFFER_RENDERABLE
 0x8289

	)

4575 
	#GL_FRAMEBUFFER_RENDERABLE_LAYERED
 0x828A

	)

4576 
	#GL_FRAMEBUFFER_BLEND
 0x828B

	)

4577 
	#GL_READ_PIXELS
 0x828C

	)

4578 
	#GL_READ_PIXELS_FORMAT
 0x828D

	)

4579 
	#GL_READ_PIXELS_TYPE
 0x828E

	)

4580 
	#GL_TEXTURE_IMAGE_FORMAT
 0x828F

	)

4581 
	#GL_TEXTURE_IMAGE_TYPE
 0x8290

	)

4582 
	#GL_GET_TEXTURE_IMAGE_FORMAT
 0x8291

	)

4583 
	#GL_GET_TEXTURE_IMAGE_TYPE
 0x8292

	)

4584 
	#GL_MIPMAP
 0x8293

	)

4585 
	#GL_MANUAL_GENERATE_MIPMAP
 0x8294

	)

4586 
	#GL_AUTO_GENERATE_MIPMAP
 0x8295

	)

4587 
	#GL_COLOR_ENCODING
 0x8296

	)

4588 
	#GL_SRGB_READ
 0x8297

	)

4589 
	#GL_SRGB_WRITE
 0x8298

	)

4590 
	#GL_SRGB_DECODE_ARB
 0x8299

	)

4591 
	#GL_FILTER
 0x829A

	)

4592 
	#GL_VERTEX_TEXTURE
 0x829B

	)

4593 
	#GL_TESS_CONTROL_TEXTURE
 0x829C

	)

4594 
	#GL_TESS_EVALUATION_TEXTURE
 0x829D

	)

4595 
	#GL_GEOMETRY_TEXTURE
 0x829E

	)

4596 
	#GL_FRAGMENT_TEXTURE
 0x829F

	)

4597 
	#GL_COMPUTE_TEXTURE
 0x82A0

	)

4598 
	#GL_TEXTURE_SHADOW
 0x82A1

	)

4599 
	#GL_TEXTURE_GATHER
 0x82A2

	)

4600 
	#GL_TEXTURE_GATHER_SHADOW
 0x82A3

	)

4601 
	#GL_SHADER_IMAGE_LOAD
 0x82A4

	)

4602 
	#GL_SHADER_IMAGE_STORE
 0x82A5

	)

4603 
	#GL_SHADER_IMAGE_ATOMIC
 0x82A6

	)

4604 
	#GL_IMAGE_TEXEL_SIZE
 0x82A7

	)

4605 
	#GL_IMAGE_COMPATIBILITY_CLASS
 0x82A8

	)

4606 
	#GL_IMAGE_PIXEL_FORMAT
 0x82A9

	)

4607 
	#GL_IMAGE_PIXEL_TYPE
 0x82AA

	)

4608 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
 0x82AC

	)

4609 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
 0x82AD

	)

4610 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
 0x82AE

	)

4611 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
 0x82AF

	)

4612 
	#GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
 0x82B1

	)

4613 
	#GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
 0x82B2

	)

4614 
	#GL_TEXTURE_COMPRESSED_BLOCK_SIZE
 0x82B3

	)

4615 
	#GL_CLEAR_BUFFER
 0x82B4

	)

4616 
	#GL_TEXTURE_VIEW
 0x82B5

	)

4617 
	#GL_VIEW_COMPATIBILITY_CLASS
 0x82B6

	)

4618 
	#GL_FULL_SUPPORT
 0x82B7

	)

4619 
	#GL_CAVEAT_SUPPORT
 0x82B8

	)

4620 
	#GL_IMAGE_CLASS_4_X_32
 0x82B9

	)

4621 
	#GL_IMAGE_CLASS_2_X_32
 0x82BA

	)

4622 
	#GL_IMAGE_CLASS_1_X_32
 0x82BB

	)

4623 
	#GL_IMAGE_CLASS_4_X_16
 0x82BC

	)

4624 
	#GL_IMAGE_CLASS_2_X_16
 0x82BD

	)

4625 
	#GL_IMAGE_CLASS_1_X_16
 0x82BE

	)

4626 
	#GL_IMAGE_CLASS_4_X_8
 0x82BF

	)

4627 
	#GL_IMAGE_CLASS_2_X_8
 0x82C0

	)

4628 
	#GL_IMAGE_CLASS_1_X_8
 0x82C1

	)

4629 
	#GL_IMAGE_CLASS_11_11_10
 0x82C2

	)

4630 
	#GL_IMAGE_CLASS_10_10_10_2
 0x82C3

	)

4631 
	#GL_VIEW_CLASS_128_BITS
 0x82C4

	)

4632 
	#GL_VIEW_CLASS_96_BITS
 0x82C5

	)

4633 
	#GL_VIEW_CLASS_64_BITS
 0x82C6

	)

4634 
	#GL_VIEW_CLASS_48_BITS
 0x82C7

	)

4635 
	#GL_VIEW_CLASS_32_BITS
 0x82C8

	)

4636 
	#GL_VIEW_CLASS_24_BITS
 0x82C9

	)

4637 
	#GL_VIEW_CLASS_16_BITS
 0x82CA

	)

4638 
	#GL_VIEW_CLASS_8_BITS
 0x82CB

	)

4639 
	#GL_VIEW_CLASS_S3TC_DXT1_RGB
 0x82CC

	)

4640 
	#GL_VIEW_CLASS_S3TC_DXT1_RGBA
 0x82CD

	)

4641 
	#GL_VIEW_CLASS_S3TC_DXT3_RGBA
 0x82CE

	)

4642 
	#GL_VIEW_CLASS_S3TC_DXT5_RGBA
 0x82CF

	)

4643 
	#GL_VIEW_CLASS_RGTC1_RED
 0x82D0

	)

4644 
	#GL_VIEW_CLASS_RGTC2_RG
 0x82D1

	)

4645 
	#GL_VIEW_CLASS_BPTC_UNORM
 0x82D2

	)

4646 
	#GL_VIEW_CLASS_BPTC_FLOAT
 0x82D3

	)

4648 (
GLAPIENTRY
 * 
	tPFNGLGETINTERNALFORMATI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
* 
	t∑øms
);

4650 
	#glGëI¡î«lf‹m©i64v
 
	`GLEW_GET_FUN
(
__gÀwGëI¡î«lf‹m©i64v
)

	)

4652 
	#GLEW_ARB_öã∫Æf‹m©_quîy2
 
	`GLEW_GET_VAR
(
__GLEW_ARB_öã∫Æf‹m©_quîy2
)

	)

4658 #i‚de‡
GL_ARB_övÆid©e_subd©a


4659 
	#GL_ARB_övÆid©e_subd©a
 1

	)

4661 (
GLAPIENTRY
 * 
	tPFNGLINVALIDATEBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4662 (
GLAPIENTRY
 * 
	tPFNGLINVALIDATEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

4663 (
GLAPIENTRY
 * 
	tPFNGLINVALIDATEFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum* 
	t©èchmíts
);

4664 (
GLAPIENTRY
 * 
	tPFNGLINVALIDATESUBFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum* 
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

4665 (
GLAPIENTRY
 * 
	tPFNGLINVALIDATETEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

4666 (
GLAPIENTRY
 * 
	tPFNGLINVALIDATETEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

4668 
	#glInvÆid©eBuf„rD©a
 
	`GLEW_GET_FUN
(
__gÀwInvÆid©eBuf„rD©a
)

	)

4669 
	#glInvÆid©eBuf„rSubD©a
 
	`GLEW_GET_FUN
(
__gÀwInvÆid©eBuf„rSubD©a
)

	)

4670 
	#glInvÆid©eFømebuf„r
 
	`GLEW_GET_FUN
(
__gÀwInvÆid©eFømebuf„r
)

	)

4671 
	#glInvÆid©eSubFømebuf„r
 
	`GLEW_GET_FUN
(
__gÀwInvÆid©eSubFømebuf„r
)

	)

4672 
	#glInvÆid©eTexImage
 
	`GLEW_GET_FUN
(
__gÀwInvÆid©eTexImage
)

	)

4673 
	#glInvÆid©eTexSubImage
 
	`GLEW_GET_FUN
(
__gÀwInvÆid©eTexSubImage
)

	)

4675 
	#GLEW_ARB_övÆid©e_subd©a
 
	`GLEW_GET_VAR
(
__GLEW_ARB_övÆid©e_subd©a
)

	)

4681 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


4682 
	#GL_ARB_m≠_buf„r_Æignmít
 1

	)

4684 
	#GL_MIN_MAP_BUFFER_ALIGNMENT
 0x90BC

	)

4686 
	#GLEW_ARB_m≠_buf„r_Æignmít
 
	`GLEW_GET_VAR
(
__GLEW_ARB_m≠_buf„r_Æignmít
)

	)

4692 #i‚de‡
GL_ARB_m≠_buf„r_ønge


4693 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

4695 
	#GL_MAP_READ_BIT
 0x0001

	)

4696 
	#GL_MAP_WRITE_BIT
 0x0002

	)

4697 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

4698 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

4699 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

4700 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

4702 (
GLAPIENTRY
 * 
	tPFNGLFLUSHMAPPEDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

4703 
	gGLvoid
 * (
	tGLAPIENTRY
 * 
	tPFNGLMAPBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

4705 
	#glFlushM≠≥dBuf„rR™ge
 
	`GLEW_GET_FUN
(
__gÀwFlushM≠≥dBuf„rR™ge
)

	)

4706 
	#glM≠Buf„rR™ge
 
	`GLEW_GET_FUN
(
__gÀwM≠Buf„rR™ge
)

	)

4708 
	#GLEW_ARB_m≠_buf„r_ønge
 
	`GLEW_GET_VAR
(
__GLEW_ARB_m≠_buf„r_ønge
)

	)

4714 #i‚de‡
GL_ARB_m©rix_∑Àâe


4715 
	#GL_ARB_m©rix_∑Àâe
 1

	)

4717 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

4718 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

4719 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

4720 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

4721 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

4722 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

4723 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

4724 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

4725 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

4726 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

4728 (
GLAPIENTRY
 * 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

4729 (
GLAPIENTRY
 * 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLvoid
 *
	tpoöãr
);

4730 (
GLAPIENTRY
 * 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLubyã
 *
	tödi˚s
);

4731 (
GLAPIENTRY
 * 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLuöt
 *
	tödi˚s
);

4732 (
GLAPIENTRY
 * 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLush‹t
 *
	tödi˚s
);

4734 
	#glCuºítPÆëãM©rixARB
 
	`GLEW_GET_FUN
(
__gÀwCuºítPÆëãM©rixARB
)

	)

4735 
	#glM©rixIndexPoöãrARB
 
	`GLEW_GET_FUN
(
__gÀwM©rixIndexPoöãrARB
)

	)

4736 
	#glM©rixIndexubvARB
 
	`GLEW_GET_FUN
(
__gÀwM©rixIndexubvARB
)

	)

4737 
	#glM©rixIndexuivARB
 
	`GLEW_GET_FUN
(
__gÀwM©rixIndexuivARB
)

	)

4738 
	#glM©rixIndexusvARB
 
	`GLEW_GET_FUN
(
__gÀwM©rixIndexusvARB
)

	)

4740 
	#GLEW_ARB_m©rix_∑Àâe
 
	`GLEW_GET_VAR
(
__GLEW_ARB_m©rix_∑Àâe
)

	)

4746 #i‚de‡
GL_ARB_mu…i_böd


4747 
	#GL_ARB_mu…i_böd
 1

	)

4749 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERSBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tbuf„rs
);

4750 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERSRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° 
	tGLsizeùå
 *
	tsizes
);

4751 (
GLAPIENTRY
 * 
	tPFNGLBINDIMAGETEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tãxtuªs
);

4752 (
GLAPIENTRY
 * 
	tPFNGLBINDSAMPLERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tßm∂îs
);

4753 (
GLAPIENTRY
 * 
	tPFNGLBINDTEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tãxtuªs
);

4754 (
GLAPIENTRY
 * 
	tPFNGLBINDVERTEXBUFFERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° GLsizeò*
	t°rides
);

4756 
	#glBödBuf„rsBa£
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rsBa£
)

	)

4757 
	#glBödBuf„rsR™ge
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rsR™ge
)

	)

4758 
	#glBödImageTextuªs
 
	`GLEW_GET_FUN
(
__gÀwBödImageTextuªs
)

	)

4759 
	#glBödSam∂îs
 
	`GLEW_GET_FUN
(
__gÀwBödSam∂îs
)

	)

4760 
	#glBödTextuªs
 
	`GLEW_GET_FUN
(
__gÀwBödTextuªs
)

	)

4761 
	#glBödVîãxBuf„rs
 
	`GLEW_GET_FUN
(
__gÀwBödVîãxBuf„rs
)

	)

4763 
	#GLEW_ARB_mu…i_böd
 
	`GLEW_GET_VAR
(
__GLEW_ARB_mu…i_böd
)

	)

4769 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


4770 
	#GL_ARB_mu…i_døw_ödúe˘
 1

	)

4772 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

4773 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

4775 
	#glMu…iDøwAºaysIndúe˘
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwAºaysIndúe˘
)

	)

4776 
	#glMu…iDøwEÀmítsIndúe˘
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmítsIndúe˘
)

	)

4778 
	#GLEW_ARB_mu…i_døw_ödúe˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_mu…i_døw_ödúe˘
)

	)

4784 #i‚de‡
GL_ARB_mu…ißm∂e


4785 
	#GL_ARB_mu…ißm∂e
 1

	)

4787 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

4788 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

4789 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

4790 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

4791 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

4792 
	#GL_SAMPLES_ARB
 0x80A9

	)

4793 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

4794 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

4795 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

4797 (
GLAPIENTRY
 * 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

4799 
	#glSam∂eCovîageARB
 
	`GLEW_GET_FUN
(
__gÀwSam∂eCovîageARB
)

	)

4801 
	#GLEW_ARB_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_ARB_mu…ißm∂e
)

	)

4807 #i‚de‡
GL_ARB_mu…ôextuª


4808 
	#GL_ARB_mu…ôextuª
 1

	)

4810 
	#GL_TEXTURE0_ARB
 0x84C0

	)

4811 
	#GL_TEXTURE1_ARB
 0x84C1

	)

4812 
	#GL_TEXTURE2_ARB
 0x84C2

	)

4813 
	#GL_TEXTURE3_ARB
 0x84C3

	)

4814 
	#GL_TEXTURE4_ARB
 0x84C4

	)

4815 
	#GL_TEXTURE5_ARB
 0x84C5

	)

4816 
	#GL_TEXTURE6_ARB
 0x84C6

	)

4817 
	#GL_TEXTURE7_ARB
 0x84C7

	)

4818 
	#GL_TEXTURE8_ARB
 0x84C8

	)

4819 
	#GL_TEXTURE9_ARB
 0x84C9

	)

4820 
	#GL_TEXTURE10_ARB
 0x84CA

	)

4821 
	#GL_TEXTURE11_ARB
 0x84CB

	)

4822 
	#GL_TEXTURE12_ARB
 0x84CC

	)

4823 
	#GL_TEXTURE13_ARB
 0x84CD

	)

4824 
	#GL_TEXTURE14_ARB
 0x84CE

	)

4825 
	#GL_TEXTURE15_ARB
 0x84CF

	)

4826 
	#GL_TEXTURE16_ARB
 0x84D0

	)

4827 
	#GL_TEXTURE17_ARB
 0x84D1

	)

4828 
	#GL_TEXTURE18_ARB
 0x84D2

	)

4829 
	#GL_TEXTURE19_ARB
 0x84D3

	)

4830 
	#GL_TEXTURE20_ARB
 0x84D4

	)

4831 
	#GL_TEXTURE21_ARB
 0x84D5

	)

4832 
	#GL_TEXTURE22_ARB
 0x84D6

	)

4833 
	#GL_TEXTURE23_ARB
 0x84D7

	)

4834 
	#GL_TEXTURE24_ARB
 0x84D8

	)

4835 
	#GL_TEXTURE25_ARB
 0x84D9

	)

4836 
	#GL_TEXTURE26_ARB
 0x84DA

	)

4837 
	#GL_TEXTURE27_ARB
 0x84DB

	)

4838 
	#GL_TEXTURE28_ARB
 0x84DC

	)

4839 
	#GL_TEXTURE29_ARB
 0x84DD

	)

4840 
	#GL_TEXTURE30_ARB
 0x84DE

	)

4841 
	#GL_TEXTURE31_ARB
 0x84DF

	)

4842 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

4843 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

4844 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

4846 (
GLAPIENTRY
 * 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

4847 (
GLAPIENTRY
 * 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

4848 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

4849 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4850 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

4851 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4852 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

4853 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4854 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

4855 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4856 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

4857 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4858 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

4859 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4860 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

4861 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4862 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

4863 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4864 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

4865 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4866 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

4867 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4868 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

4869 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4870 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

4871 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4872 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

4873 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4874 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

4875 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4876 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

4877 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

4878 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

4879 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

4881 
	#glA˘iveTextuªARB
 
	`GLEW_GET_FUN
(
__gÀwA˘iveTextuªARB
)

	)

4882 
	#glClõ¡A˘iveTextuªARB
 
	`GLEW_GET_FUN
(
__gÀwClõ¡A˘iveTextuªARB
)

	)

4883 
	#glMu…iTexCo‹d1dARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1dARB
)

	)

4884 
	#glMu…iTexCo‹d1dvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1dvARB
)

	)

4885 
	#glMu…iTexCo‹d1fARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1fARB
)

	)

4886 
	#glMu…iTexCo‹d1fvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1fvARB
)

	)

4887 
	#glMu…iTexCo‹d1iARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1iARB
)

	)

4888 
	#glMu…iTexCo‹d1ivARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1ivARB
)

	)

4889 
	#glMu…iTexCo‹d1sARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1sARB
)

	)

4890 
	#glMu…iTexCo‹d1svARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1svARB
)

	)

4891 
	#glMu…iTexCo‹d2dARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2dARB
)

	)

4892 
	#glMu…iTexCo‹d2dvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2dvARB
)

	)

4893 
	#glMu…iTexCo‹d2fARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2fARB
)

	)

4894 
	#glMu…iTexCo‹d2fvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2fvARB
)

	)

4895 
	#glMu…iTexCo‹d2iARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2iARB
)

	)

4896 
	#glMu…iTexCo‹d2ivARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2ivARB
)

	)

4897 
	#glMu…iTexCo‹d2sARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2sARB
)

	)

4898 
	#glMu…iTexCo‹d2svARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2svARB
)

	)

4899 
	#glMu…iTexCo‹d3dARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3dARB
)

	)

4900 
	#glMu…iTexCo‹d3dvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3dvARB
)

	)

4901 
	#glMu…iTexCo‹d3fARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3fARB
)

	)

4902 
	#glMu…iTexCo‹d3fvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3fvARB
)

	)

4903 
	#glMu…iTexCo‹d3iARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3iARB
)

	)

4904 
	#glMu…iTexCo‹d3ivARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3ivARB
)

	)

4905 
	#glMu…iTexCo‹d3sARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3sARB
)

	)

4906 
	#glMu…iTexCo‹d3svARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3svARB
)

	)

4907 
	#glMu…iTexCo‹d4dARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4dARB
)

	)

4908 
	#glMu…iTexCo‹d4dvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4dvARB
)

	)

4909 
	#glMu…iTexCo‹d4fARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4fARB
)

	)

4910 
	#glMu…iTexCo‹d4fvARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4fvARB
)

	)

4911 
	#glMu…iTexCo‹d4iARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4iARB
)

	)

4912 
	#glMu…iTexCo‹d4ivARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4ivARB
)

	)

4913 
	#glMu…iTexCo‹d4sARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4sARB
)

	)

4914 
	#glMu…iTexCo‹d4svARB
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4svARB
)

	)

4916 
	#GLEW_ARB_mu…ôextuª
 
	`GLEW_GET_VAR
(
__GLEW_ARB_mu…ôextuª
)

	)

4922 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


4923 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

4925 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

4926 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

4927 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

4928 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

4929 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

4931 (
GLAPIENTRY
 * 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

4932 (
GLAPIENTRY
 * 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
);

4933 (
GLAPIENTRY
 * 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4934 (
GLAPIENTRY
 * 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

4935 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

4936 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöt* 
	t∑øms
);

4937 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

4938 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

4940 
	#glBegöQuîyARB
 
	`GLEW_GET_FUN
(
__gÀwBegöQuîyARB
)

	)

4941 
	#glDñëeQuîõsARB
 
	`GLEW_GET_FUN
(
__gÀwDñëeQuîõsARB
)

	)

4942 
	#glEndQuîyARB
 
	`GLEW_GET_FUN
(
__gÀwEndQuîyARB
)

	)

4943 
	#glGíQuîõsARB
 
	`GLEW_GET_FUN
(
__gÀwGíQuîõsARB
)

	)

4944 
	#glGëQuîyObje˘ivARB
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘ivARB
)

	)

4945 
	#glGëQuîyObje˘uivARB
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘uivARB
)

	)

4946 
	#glGëQuîyivARB
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyivARB
)

	)

4947 
	#glIsQuîyARB
 
	`GLEW_GET_FUN
(
__gÀwIsQuîyARB
)

	)

4949 
	#GLEW_ARB_oc˛usi⁄_quîy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_oc˛usi⁄_quîy
)

	)

4955 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


4956 
	#GL_ARB_oc˛usi⁄_quîy2
 1

	)

4958 
	#GL_ANY_SAMPLES_PASSED
 0x8C2F

	)

4960 
	#GLEW_ARB_oc˛usi⁄_quîy2
 
	`GLEW_GET_VAR
(
__GLEW_ARB_oc˛usi⁄_quîy2
)

	)

4966 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


4967 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

4969 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

4970 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

4971 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

4972 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

4974 
	#GLEW_ARB_pixñ_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_pixñ_buf„r_obje˘
)

	)

4980 #i‚de‡
GL_ARB_poöt_∑ømëîs


4981 
	#GL_ARB_poöt_∑ømëîs
 1

	)

4983 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

4984 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

4985 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

4986 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

4988 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

4989 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

4991 
	#glPoötP¨amëîfARB
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîfARB
)

	)

4992 
	#glPoötP¨amëîfvARB
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîfvARB
)

	)

4994 
	#GLEW_ARB_poöt_∑ømëîs
 
	`GLEW_GET_VAR
(
__GLEW_ARB_poöt_∑ømëîs
)

	)

5000 #i‚de‡
GL_ARB_poöt_•rôe


5001 
	#GL_ARB_poöt_•rôe
 1

	)

5003 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

5004 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

5006 
	#GLEW_ARB_poöt_•rôe
 
	`GLEW_GET_VAR
(
__GLEW_ARB_poöt_•rôe
)

	)

5012 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


5013 
	#GL_ARB_¥ogøm_öãrÁ˚_quîy
 1

	)

5015 
	#GL_UNIFORM
 0x92E1

	)

5016 
	#GL_UNIFORM_BLOCK
 0x92E2

	)

5017 
	#GL_PROGRAM_INPUT
 0x92E3

	)

5018 
	#GL_PROGRAM_OUTPUT
 0x92E4

	)

5019 
	#GL_BUFFER_VARIABLE
 0x92E5

	)

5020 
	#GL_SHADER_STORAGE_BLOCK
 0x92E6

	)

5021 
	#GL_IS_PER_PATCH
 0x92E7

	)

5022 
	#GL_VERTEX_SUBROUTINE
 0x92E8

	)

5023 
	#GL_TESS_CONTROL_SUBROUTINE
 0x92E9

	)

5024 
	#GL_TESS_EVALUATION_SUBROUTINE
 0x92EA

	)

5025 
	#GL_GEOMETRY_SUBROUTINE
 0x92EB

	)

5026 
	#GL_FRAGMENT_SUBROUTINE
 0x92EC

	)

5027 
	#GL_COMPUTE_SUBROUTINE
 0x92ED

	)

5028 
	#GL_VERTEX_SUBROUTINE_UNIFORM
 0x92EE

	)

5029 
	#GL_TESS_CONTROL_SUBROUTINE_UNIFORM
 0x92EF

	)

5030 
	#GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
 0x92F0

	)

5031 
	#GL_GEOMETRY_SUBROUTINE_UNIFORM
 0x92F1

	)

5032 
	#GL_FRAGMENT_SUBROUTINE_UNIFORM
 0x92F2

	)

5033 
	#GL_COMPUTE_SUBROUTINE_UNIFORM
 0x92F3

	)

5034 
	#GL_TRANSFORM_FEEDBACK_VARYING
 0x92F4

	)

5035 
	#GL_ACTIVE_RESOURCES
 0x92F5

	)

5036 
	#GL_MAX_NAME_LENGTH
 0x92F6

	)

5037 
	#GL_MAX_NUM_ACTIVE_VARIABLES
 0x92F7

	)

5038 
	#GL_MAX_NUM_COMPATIBLE_SUBROUTINES
 0x92F8

	)

5039 
	#GL_NAME_LENGTH
 0x92F9

	)

5040 
	#GL_TYPE
 0x92FA

	)

5041 
	#GL_ARRAY_SIZE
 0x92FB

	)

5042 
	#GL_OFFSET
 0x92FC

	)

5043 
	#GL_BLOCK_INDEX
 0x92FD

	)

5044 
	#GL_ARRAY_STRIDE
 0x92FE

	)

5045 
	#GL_MATRIX_STRIDE
 0x92FF

	)

5046 
	#GL_IS_ROW_MAJOR
 0x9300

	)

5047 
	#GL_ATOMIC_COUNTER_BUFFER_INDEX
 0x9301

	)

5048 
	#GL_BUFFER_BINDING
 0x9302

	)

5049 
	#GL_BUFFER_DATA_SIZE
 0x9303

	)

5050 
	#GL_NUM_ACTIVE_VARIABLES
 0x9304

	)

5051 
	#GL_ACTIVE_VARIABLES
 0x9305

	)

5052 
	#GL_REFERENCED_BY_VERTEX_SHADER
 0x9306

	)

5053 
	#GL_REFERENCED_BY_TESS_CONTROL_SHADER
 0x9307

	)

5054 
	#GL_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x9308

	)

5055 
	#GL_REFERENCED_BY_GEOMETRY_SHADER
 0x9309

	)

5056 
	#GL_REFERENCED_BY_FRAGMENT_SHADER
 0x930A

	)

5057 
	#GL_REFERENCED_BY_COMPUTE_SHADER
 0x930B

	)

5058 
	#GL_TOP_LEVEL_ARRAY_SIZE
 0x930C

	)

5059 
	#GL_TOP_LEVEL_ARRAY_STRIDE
 0x930D

	)

5060 
	#GL_LOCATION
 0x930E

	)

5061 
	#GL_LOCATION_INDEX
 0x930F

	)

5063 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMINTERFACEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

5064 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETPROGRAMRESOURCEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
* 
	t«me
);

5065 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETPROGRAMRESOURCELOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
* 
	t«me
);

5066 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
* 
	t«me
);

5067 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMRESOURCENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	t«me
);

5068 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMRESOURCEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum* 
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	t∑øms
);

5070 
	#glGëProgømI¡îÁ˚iv
 
	`GLEW_GET_FUN
(
__gÀwGëProgømI¡îÁ˚iv
)

	)

5071 
	#glGëProgømResour˚Index
 
	`GLEW_GET_FUN
(
__gÀwGëProgømResour˚Index
)

	)

5072 
	#glGëProgømResour˚Loˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwGëProgømResour˚Loˇti⁄
)

	)

5073 
	#glGëProgømResour˚Loˇti⁄Index
 
	`GLEW_GET_FUN
(
__gÀwGëProgømResour˚Loˇti⁄Index
)

	)

5074 
	#glGëProgømResour˚Name
 
	`GLEW_GET_FUN
(
__gÀwGëProgømResour˚Name
)

	)

5075 
	#glGëProgømResour˚iv
 
	`GLEW_GET_FUN
(
__gÀwGëProgømResour˚iv
)

	)

5077 
	#GLEW_ARB_¥ogøm_öãrÁ˚_quîy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_¥ogøm_öãrÁ˚_quîy
)

	)

5083 #i‚de‡
GL_ARB_¥ovokög_vîãx


5084 
	#GL_ARB_¥ovokög_vîãx
 1

	)

5086 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
 0x8E4C

	)

5087 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

5088 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

5089 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

5091 (
GLAPIENTRY
 * 
	tPFNGLPROVOKINGVERTEXPROC
Ë(
	tGLíum
 
	tmode
);

5093 
	#glProvokögVîãx
 
	`GLEW_GET_FUN
(
__gÀwProvokögVîãx
)

	)

5095 
	#GLEW_ARB_¥ovokög_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_ARB_¥ovokög_vîãx
)

	)

5101 #i‚de‡
GL_ARB_quîy_buf„r_obje˘


5102 
	#GL_ARB_quîy_buf„r_obje˘
 1

	)

5104 
	#GL_QUERY_BUFFER_BARRIER_BIT
 0x00008000

	)

5105 
	#GL_QUERY_BUFFER
 0x9192

	)

5106 
	#GL_QUERY_BUFFER_BINDING
 0x9193

	)

5107 
	#GL_QUERY_RESULT_NO_WAIT
 0x9194

	)

5109 
	#GLEW_ARB_quîy_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_quîy_buf„r_obje˘
)

	)

5115 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


5116 
	#GL_ARB_robu°_buf„r_ac˚ss_behavi‹
 1

	)

5118 
	#GLEW_ARB_robu°_buf„r_ac˚ss_behavi‹
 
	`GLEW_GET_VAR
(
__GLEW_ARB_robu°_buf„r_ac˚ss_behavi‹
)

	)

5124 #i‚de‡
GL_ARB_robu°√ss


5125 
	#GL_ARB_robu°√ss
 1

	)

5127 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
 0x00000004

	)

5128 
	#GL_LOSE_CONTEXT_ON_RESET_ARB
 0x8252

	)

5129 
	#GL_GUILTY_CONTEXT_RESET_ARB
 0x8253

	)

5130 
	#GL_INNOCENT_CONTEXT_RESET_ARB
 0x8254

	)

5131 
	#GL_UNKNOWN_CONTEXT_RESET_ARB
 0x8255

	)

5132 
	#GL_RESET_NOTIFICATION_STRATEGY_ARB
 0x8256

	)

5133 
	#GL_NO_RESET_NOTIFICATION_ARB
 0x8261

	)

5135 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLGETGRAPHICSRESETSTATUSARBPROC
) ();

5136 (
GLAPIENTRY
 * 
	tPFNGLGETNCOLORTABLEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, * 
	tèbÀ
);

5137 (
GLAPIENTRY
 * 
	tPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, * 
	timg
);

5138 (
GLAPIENTRY
 * 
	tPFNGLGETNCONVOLUTIONFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, * 
	timage
);

5139 (
GLAPIENTRY
 * 
	tPFNGLGETNHISTOGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, * 
	tvÆues
);

5140 (
GLAPIENTRY
 * 
	tPFNGLGETNMAPDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
* 
	tv
);

5141 (
GLAPIENTRY
 * 
	tPFNGLGETNMAPFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
* 
	tv
);

5142 (
GLAPIENTRY
 * 
	tPFNGLGETNMAPIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
* 
	tv
);

5143 (
GLAPIENTRY
 * 
	tPFNGLGETNMINMAXARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, * 
	tvÆues
);

5144 (
GLAPIENTRY
 * 
	tPFNGLGETNPIXELMAPFVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
* 
	tvÆues
);

5145 (
GLAPIENTRY
 * 
	tPFNGLGETNPIXELMAPUIVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
* 
	tvÆues
);

5146 (
GLAPIENTRY
 * 
	tPFNGLGETNPIXELMAPUSVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
* 
	tvÆues
);

5147 (
GLAPIENTRY
 * 
	tPFNGLGETNPOLYGONSTIPPLEARBPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
* 
	t∑âîn
);

5148 (
GLAPIENTRY
 * 
	tPFNGLGETNSEPARABLEFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, * 
	trow
, GLsizeò
	tcﬁumnBufSize
, 
	tGLvoid
*
	tcﬁumn
, GLvoid*
	t•™
);

5149 (
GLAPIENTRY
 * 
	tPFNGLGETNTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, * 
	timg
);

5150 (
GLAPIENTRY
 * 
	tPFNGLGETNUNIFORMDVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
* 
	t∑øms
);

5151 (
GLAPIENTRY
 * 
	tPFNGLGETNUNIFORMFVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
* 
	t∑øms
);

5152 (
GLAPIENTRY
 * 
	tPFNGLGETNUNIFORMIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöt* 
	t∑øms
);

5153 (
GLAPIENTRY
 * 
	tPFNGLGETNUNIFORMUIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöt* 
	t∑øms
);

5154 (
GLAPIENTRY
 * 
	tPFNGLREADNPIXELSARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, * 
	td©a
);

5156 
	#glGëGøphicsRe£tSètusARB
 
	`GLEW_GET_FUN
(
__gÀwGëGøphicsRe£tSètusARB
)

	)

5157 
	#glGënCﬁ‹TabÀARB
 
	`GLEW_GET_FUN
(
__gÀwGënCﬁ‹TabÀARB
)

	)

5158 
	#glGënCom¥es£dTexImageARB
 
	`GLEW_GET_FUN
(
__gÀwGënCom¥es£dTexImageARB
)

	)

5159 
	#glGënC⁄vﬁuti⁄FûãrARB
 
	`GLEW_GET_FUN
(
__gÀwGënC⁄vﬁuti⁄FûãrARB
)

	)

5160 
	#glGënHi°ogømARB
 
	`GLEW_GET_FUN
(
__gÀwGënHi°ogømARB
)

	)

5161 
	#glGënM≠dvARB
 
	`GLEW_GET_FUN
(
__gÀwGënM≠dvARB
)

	)

5162 
	#glGënM≠fvARB
 
	`GLEW_GET_FUN
(
__gÀwGënM≠fvARB
)

	)

5163 
	#glGënM≠ivARB
 
	`GLEW_GET_FUN
(
__gÀwGënM≠ivARB
)

	)

5164 
	#glGënMömaxARB
 
	`GLEW_GET_FUN
(
__gÀwGënMömaxARB
)

	)

5165 
	#glGënPixñM≠fvARB
 
	`GLEW_GET_FUN
(
__gÀwGënPixñM≠fvARB
)

	)

5166 
	#glGënPixñM≠uivARB
 
	`GLEW_GET_FUN
(
__gÀwGënPixñM≠uivARB
)

	)

5167 
	#glGënPixñM≠usvARB
 
	`GLEW_GET_FUN
(
__gÀwGënPixñM≠usvARB
)

	)

5168 
	#glGënPﬁyg⁄Stù∂eARB
 
	`GLEW_GET_FUN
(
__gÀwGënPﬁyg⁄Stù∂eARB
)

	)

5169 
	#glGënSï¨abÀFûãrARB
 
	`GLEW_GET_FUN
(
__gÀwGënSï¨abÀFûãrARB
)

	)

5170 
	#glGënTexImageARB
 
	`GLEW_GET_FUN
(
__gÀwGënTexImageARB
)

	)

5171 
	#glGënUnif‹mdvARB
 
	`GLEW_GET_FUN
(
__gÀwGënUnif‹mdvARB
)

	)

5172 
	#glGënUnif‹mfvARB
 
	`GLEW_GET_FUN
(
__gÀwGënUnif‹mfvARB
)

	)

5173 
	#glGënUnif‹mivARB
 
	`GLEW_GET_FUN
(
__gÀwGënUnif‹mivARB
)

	)

5174 
	#glGënUnif‹muivARB
 
	`GLEW_GET_FUN
(
__gÀwGënUnif‹muivARB
)

	)

5175 
	#glRódnPixñsARB
 
	`GLEW_GET_FUN
(
__gÀwRódnPixñsARB
)

	)

5177 
	#GLEW_ARB_robu°√ss
 
	`GLEW_GET_VAR
(
__GLEW_ARB_robu°√ss
)

	)

5183 #i‚de‡
GL_ARB_robu°√ss_≠∂iˇti⁄_isﬁ©i⁄


5184 
	#GL_ARB_robu°√ss_≠∂iˇti⁄_isﬁ©i⁄
 1

	)

5186 
	#GLEW_ARB_robu°√ss_≠∂iˇti⁄_isﬁ©i⁄
 
	`GLEW_GET_VAR
(
__GLEW_ARB_robu°√ss_≠∂iˇti⁄_isﬁ©i⁄
)

	)

5192 #i‚de‡
GL_ARB_robu°√ss_sh¨e_group_isﬁ©i⁄


5193 
	#GL_ARB_robu°√ss_sh¨e_group_isﬁ©i⁄
 1

	)

5195 
	#GLEW_ARB_robu°√ss_sh¨e_group_isﬁ©i⁄
 
	`GLEW_GET_VAR
(
__GLEW_ARB_robu°√ss_sh¨e_group_isﬁ©i⁄
)

	)

5201 #i‚de‡
GL_ARB_ßm∂e_shadög


5202 
	#GL_ARB_ßm∂e_shadög
 1

	)

5204 
	#GL_SAMPLE_SHADING_ARB
 0x8C36

	)

5205 
	#GL_MIN_SAMPLE_SHADING_VALUE_ARB
 0x8C37

	)

5207 (
GLAPIENTRY
 * 
	tPFNGLMINSAMPLESHADINGARBPROC
Ë(
	tGL˛ampf
 
	tvÆue
);

5209 
	#glMöSam∂eShadögARB
 
	`GLEW_GET_FUN
(
__gÀwMöSam∂eShadögARB
)

	)

5211 
	#GLEW_ARB_ßm∂e_shadög
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ßm∂e_shadög
)

	)

5217 #i‚de‡
GL_ARB_ßm∂î_obje˘s


5218 
	#GL_ARB_ßm∂î_obje˘s
 1

	)

5220 
	#GL_SAMPLER_BINDING
 0x8919

	)

5222 (
GLAPIENTRY
 * 
	tPFNGLBINDSAMPLERPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tßm∂î
);

5223 (
GLAPIENTRY
 * 
	tPFNGLDELETESAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 * 
	tßm∂îs
);

5224 (
GLAPIENTRY
 * 
	tPFNGLGENSAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, 
	tGLuöt
* 
	tßm∂îs
);

5225 (
GLAPIENTRY
 * 
	tPFNGLGETSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

5226 (
GLAPIENTRY
 * 
	tPFNGLGETSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, GLuöt* 
	t∑øms
);

5227 (
GLAPIENTRY
 * 
	tPFNGLGETSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

5228 (
GLAPIENTRY
 * 
	tPFNGLGETSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

5229 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISSAMPLERPROC
Ë(
	tGLuöt
 
	tßm∂î
);

5230 (
GLAPIENTRY
 * 
	tPFNGLSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

5231 (
GLAPIENTRY
 * 
	tPFNGLSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöt* 
	t∑øms
);

5232 (
GLAPIENTRY
 * 
	tPFNGLSAMPLERPARAMETERFPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5233 (
GLAPIENTRY
 * 
	tPFNGLSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

5234 (
GLAPIENTRY
 * 
	tPFNGLSAMPLERPARAMETERIPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5235 (
GLAPIENTRY
 * 
	tPFNGLSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

5237 
	#glBödSam∂î
 
	`GLEW_GET_FUN
(
__gÀwBödSam∂î
)

	)

5238 
	#glDñëeSam∂îs
 
	`GLEW_GET_FUN
(
__gÀwDñëeSam∂îs
)

	)

5239 
	#glGíSam∂îs
 
	`GLEW_GET_FUN
(
__gÀwGíSam∂îs
)

	)

5240 
	#glGëSam∂îP¨amëîIiv
 
	`GLEW_GET_FUN
(
__gÀwGëSam∂îP¨amëîIiv
)

	)

5241 
	#glGëSam∂îP¨amëîIuiv
 
	`GLEW_GET_FUN
(
__gÀwGëSam∂îP¨amëîIuiv
)

	)

5242 
	#glGëSam∂îP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwGëSam∂îP¨amëîfv
)

	)

5243 
	#glGëSam∂îP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwGëSam∂îP¨amëîiv
)

	)

5244 
	#glIsSam∂î
 
	`GLEW_GET_FUN
(
__gÀwIsSam∂î
)

	)

5245 
	#glSam∂îP¨amëîIiv
 
	`GLEW_GET_FUN
(
__gÀwSam∂îP¨amëîIiv
)

	)

5246 
	#glSam∂îP¨amëîIuiv
 
	`GLEW_GET_FUN
(
__gÀwSam∂îP¨amëîIuiv
)

	)

5247 
	#glSam∂îP¨amëîf
 
	`GLEW_GET_FUN
(
__gÀwSam∂îP¨amëîf
)

	)

5248 
	#glSam∂îP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwSam∂îP¨amëîfv
)

	)

5249 
	#glSam∂îP¨amëîi
 
	`GLEW_GET_FUN
(
__gÀwSam∂îP¨amëîi
)

	)

5250 
	#glSam∂îP¨amëîiv
 
	`GLEW_GET_FUN
(
__gÀwSam∂îP¨amëîiv
)

	)

5252 
	#GLEW_ARB_ßm∂î_obje˘s
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ßm∂î_obje˘s
)

	)

5258 #i‚de‡
GL_ARB_£amÀss_cube_m≠


5259 
	#GL_ARB_£amÀss_cube_m≠
 1

	)

5261 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

5263 
	#GLEW_ARB_£amÀss_cube_m≠
 
	`GLEW_GET_VAR
(
__GLEW_ARB_£amÀss_cube_m≠
)

	)

5269 #i‚de‡
GL_ARB_£amÀss_cubem≠_≥r_ãxtuª


5270 
	#GL_ARB_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

5272 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

5274 
	#GLEW_ARB_£amÀss_cubem≠_≥r_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_ARB_£amÀss_cubem≠_≥r_ãxtuª
)

	)

5280 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


5281 
	#GL_ARB_£∑øã_shadî_obje˘s
 1

	)

5283 
	#GL_VERTEX_SHADER_BIT
 0x00000001

	)

5284 
	#GL_FRAGMENT_SHADER_BIT
 0x00000002

	)

5285 
	#GL_GEOMETRY_SHADER_BIT
 0x00000004

	)

5286 
	#GL_TESS_CONTROL_SHADER_BIT
 0x00000008

	)

5287 
	#GL_TESS_EVALUATION_SHADER_BIT
 0x00000010

	)

5288 
	#GL_PROGRAM_SEPARABLE
 0x8258

	)

5289 
	#GL_ACTIVE_PROGRAM
 0x8259

	)

5290 
	#GL_PROGRAM_PIPELINE_BINDING
 0x825A

	)

5291 
	#GL_ALL_SHADER_BITS
 0xFFFFFFFF

	)

5293 (
GLAPIENTRY
 * 
	tPFNGLACTIVESHADERPROGRAMPROC
Ë(
	tGLuöt
 
	tpùñöe
, GLuöà
	t¥ogøm
);

5294 (
GLAPIENTRY
 * 
	tPFNGLBINDPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

5295 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATESHADERPROGRAMVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 ** 
	t°rögs
);

5296 (
GLAPIENTRY
 * 
	tPFNGLDELETEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tpùñöes
);

5297 (
GLAPIENTRY
 * 
	tPFNGLGENPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tpùñöes
);

5298 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMPIPELINEINFOLOGPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

5299 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMPIPELINEIVPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

5300 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

5301 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

5302 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

5303 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tx
);

5304 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5305 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tx
);

5306 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

5307 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tx
);

5308 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

5309 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

5310 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

5311 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5312 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5313 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tx
, GLöà
	ty
);

5314 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

5315 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tx
, GLuöà
	ty
);

5316 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

5317 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5318 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

5319 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5320 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5321 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tx
, GLöà
	ty
, GLöà
	tz
);

5322 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

5323 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

5324 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

5325 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5326 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

5327 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5328 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5329 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

5330 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

5331 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

5332 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

5333 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

5334 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5335 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

5336 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5337 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

5338 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5339 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

5340 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5341 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

5342 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5343 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

5344 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5345 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

5346 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5347 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

5348 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5349 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
* 
	tvÆue
);

5350 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5351 (
GLAPIENTRY
 * 
	tPFNGLUSEPROGRAMSTAGESPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLbôfõld
 
	t°ages
, GLuöà
	t¥ogøm
);

5352 (
GLAPIENTRY
 * 
	tPFNGLVALIDATEPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

5354 
	#glA˘iveShadîProgøm
 
	`GLEW_GET_FUN
(
__gÀwA˘iveShadîProgøm
)

	)

5355 
	#glBödProgømPùñöe
 
	`GLEW_GET_FUN
(
__gÀwBödProgømPùñöe
)

	)

5356 
	#glCª©eShadîProgømv
 
	`GLEW_GET_FUN
(
__gÀwCª©eShadîProgømv
)

	)

5357 
	#glDñëeProgømPùñöes
 
	`GLEW_GET_FUN
(
__gÀwDñëeProgømPùñöes
)

	)

5358 
	#glGíProgømPùñöes
 
	`GLEW_GET_FUN
(
__gÀwGíProgømPùñöes
)

	)

5359 
	#glGëProgømPùñöeInfoLog
 
	`GLEW_GET_FUN
(
__gÀwGëProgømPùñöeInfoLog
)

	)

5360 
	#glGëProgømPùñöeiv
 
	`GLEW_GET_FUN
(
__gÀwGëProgømPùñöeiv
)

	)

5361 
	#glIsProgømPùñöe
 
	`GLEW_GET_FUN
(
__gÀwIsProgømPùñöe
)

	)

5362 
	#glProgømUnif‹m1d
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1d
)

	)

5363 
	#glProgømUnif‹m1dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1dv
)

	)

5364 
	#glProgømUnif‹m1f
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1f
)

	)

5365 
	#glProgømUnif‹m1fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1fv
)

	)

5366 
	#glProgømUnif‹m1i
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1i
)

	)

5367 
	#glProgømUnif‹m1iv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1iv
)

	)

5368 
	#glProgømUnif‹m1ui
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1ui
)

	)

5369 
	#glProgømUnif‹m1uiv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1uiv
)

	)

5370 
	#glProgømUnif‹m2d
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2d
)

	)

5371 
	#glProgømUnif‹m2dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2dv
)

	)

5372 
	#glProgømUnif‹m2f
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2f
)

	)

5373 
	#glProgømUnif‹m2fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2fv
)

	)

5374 
	#glProgømUnif‹m2i
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2i
)

	)

5375 
	#glProgømUnif‹m2iv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2iv
)

	)

5376 
	#glProgømUnif‹m2ui
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2ui
)

	)

5377 
	#glProgømUnif‹m2uiv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2uiv
)

	)

5378 
	#glProgømUnif‹m3d
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3d
)

	)

5379 
	#glProgømUnif‹m3dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3dv
)

	)

5380 
	#glProgømUnif‹m3f
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3f
)

	)

5381 
	#glProgømUnif‹m3fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3fv
)

	)

5382 
	#glProgømUnif‹m3i
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3i
)

	)

5383 
	#glProgømUnif‹m3iv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3iv
)

	)

5384 
	#glProgømUnif‹m3ui
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3ui
)

	)

5385 
	#glProgømUnif‹m3uiv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3uiv
)

	)

5386 
	#glProgømUnif‹m4d
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4d
)

	)

5387 
	#glProgømUnif‹m4dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4dv
)

	)

5388 
	#glProgømUnif‹m4f
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4f
)

	)

5389 
	#glProgømUnif‹m4fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4fv
)

	)

5390 
	#glProgømUnif‹m4i
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4i
)

	)

5391 
	#glProgømUnif‹m4iv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4iv
)

	)

5392 
	#glProgømUnif‹m4ui
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4ui
)

	)

5393 
	#glProgømUnif‹m4uiv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4uiv
)

	)

5394 
	#glProgømUnif‹mM©rix2dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2dv
)

	)

5395 
	#glProgømUnif‹mM©rix2fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2fv
)

	)

5396 
	#glProgømUnif‹mM©rix2x3dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x3dv
)

	)

5397 
	#glProgømUnif‹mM©rix2x3fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x3fv
)

	)

5398 
	#glProgømUnif‹mM©rix2x4dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x4dv
)

	)

5399 
	#glProgømUnif‹mM©rix2x4fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x4fv
)

	)

5400 
	#glProgømUnif‹mM©rix3dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3dv
)

	)

5401 
	#glProgømUnif‹mM©rix3fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3fv
)

	)

5402 
	#glProgømUnif‹mM©rix3x2dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x2dv
)

	)

5403 
	#glProgømUnif‹mM©rix3x2fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x2fv
)

	)

5404 
	#glProgømUnif‹mM©rix3x4dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x4dv
)

	)

5405 
	#glProgømUnif‹mM©rix3x4fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x4fv
)

	)

5406 
	#glProgømUnif‹mM©rix4dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4dv
)

	)

5407 
	#glProgømUnif‹mM©rix4fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4fv
)

	)

5408 
	#glProgømUnif‹mM©rix4x2dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x2dv
)

	)

5409 
	#glProgømUnif‹mM©rix4x2fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x2fv
)

	)

5410 
	#glProgømUnif‹mM©rix4x3dv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x3dv
)

	)

5411 
	#glProgømUnif‹mM©rix4x3fv
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x3fv
)

	)

5412 
	#glU£ProgømSèges
 
	`GLEW_GET_FUN
(
__gÀwU£ProgømSèges
)

	)

5413 
	#glVÆid©eProgømPùñöe
 
	`GLEW_GET_FUN
(
__gÀwVÆid©eProgømPùñöe
)

	)

5415 
	#GLEW_ARB_£∑øã_shadî_obje˘s
 
	`GLEW_GET_VAR
(
__GLEW_ARB_£∑øã_shadî_obje˘s
)

	)

5421 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


5422 
	#GL_ARB_shadî_©omic_cou¡îs
 1

	)

5424 
	#GL_ATOMIC_COUNTER_BUFFER
 0x92C0

	)

5425 
	#GL_ATOMIC_COUNTER_BUFFER_BINDING
 0x92C1

	)

5426 
	#GL_ATOMIC_COUNTER_BUFFER_START
 0x92C2

	)

5427 
	#GL_ATOMIC_COUNTER_BUFFER_SIZE
 0x92C3

	)

5428 
	#GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
 0x92C4

	)

5429 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
 0x92C5

	)

5430 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
 0x92C6

	)

5431 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
 0x92C7

	)

5432 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
 0x92C8

	)

5433 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x92C9

	)

5434 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
 0x92CA

	)

5435 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
 0x92CB

	)

5436 
	#GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
 0x92CC

	)

5437 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
 0x92CD

	)

5438 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
 0x92CE

	)

5439 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
 0x92CF

	)

5440 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
 0x92D0

	)

5441 
	#GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
 0x92D1

	)

5442 
	#GL_MAX_VERTEX_ATOMIC_COUNTERS
 0x92D2

	)

5443 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
 0x92D3

	)

5444 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
 0x92D4

	)

5445 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTERS
 0x92D5

	)

5446 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTERS
 0x92D6

	)

5447 
	#GL_MAX_COMBINED_ATOMIC_COUNTERS
 0x92D7

	)

5448 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
 0x92D8

	)

5449 
	#GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
 0x92D9

	)

5450 
	#GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
 0x92DA

	)

5451 
	#GL_UNSIGNED_INT_ATOMIC_COUNTER
 0x92DB

	)

5452 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
 0x92DC

	)

5454 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tbuf„rIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

5456 
	#glGëA˘iveAtomicCou¡îBuf„riv
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveAtomicCou¡îBuf„riv
)

	)

5458 
	#GLEW_ARB_shadî_©omic_cou¡îs
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_©omic_cou¡îs
)

	)

5464 #i‚de‡
GL_ARB_shadî_bô_ícodög


5465 
	#GL_ARB_shadî_bô_ícodög
 1

	)

5467 
	#GLEW_ARB_shadî_bô_ícodög
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_bô_ícodög
)

	)

5473 #i‚de‡
GL_ARB_shadî_døw_∑ømëîs


5474 
	#GL_ARB_shadî_døw_∑ømëîs
 1

	)

5476 
	#GLEW_ARB_shadî_døw_∑ømëîs
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_døw_∑ømëîs
)

	)

5482 #i‚de‡
GL_ARB_shadî_group_vŸe


5483 
	#GL_ARB_shadî_group_vŸe
 1

	)

5485 
	#GLEW_ARB_shadî_group_vŸe
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_group_vŸe
)

	)

5491 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


5492 
	#GL_ARB_shadî_image_lﬂd_°‹e
 1

	)

5494 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
 0x00000001

	)

5495 
	#GL_ELEMENT_ARRAY_BARRIER_BIT
 0x00000002

	)

5496 
	#GL_UNIFORM_BARRIER_BIT
 0x00000004

	)

5497 
	#GL_TEXTURE_FETCH_BARRIER_BIT
 0x00000008

	)

5498 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
 0x00000020

	)

5499 
	#GL_COMMAND_BARRIER_BIT
 0x00000040

	)

5500 
	#GL_PIXEL_BUFFER_BARRIER_BIT
 0x00000080

	)

5501 
	#GL_TEXTURE_UPDATE_BARRIER_BIT
 0x00000100

	)

5502 
	#GL_BUFFER_UPDATE_BARRIER_BIT
 0x00000200

	)

5503 
	#GL_FRAMEBUFFER_BARRIER_BIT
 0x00000400

	)

5504 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT
 0x00000800

	)

5505 
	#GL_ATOMIC_COUNTER_BARRIER_BIT
 0x00001000

	)

5506 
	#GL_MAX_IMAGE_UNITS
 0x8F38

	)

5507 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
 0x8F39

	)

5508 
	#GL_IMAGE_BINDING_NAME
 0x8F3A

	)

5509 
	#GL_IMAGE_BINDING_LEVEL
 0x8F3B

	)

5510 
	#GL_IMAGE_BINDING_LAYERED
 0x8F3C

	)

5511 
	#GL_IMAGE_BINDING_LAYER
 0x8F3D

	)

5512 
	#GL_IMAGE_BINDING_ACCESS
 0x8F3E

	)

5513 
	#GL_IMAGE_1D
 0x904C

	)

5514 
	#GL_IMAGE_2D
 0x904D

	)

5515 
	#GL_IMAGE_3D
 0x904E

	)

5516 
	#GL_IMAGE_2D_RECT
 0x904F

	)

5517 
	#GL_IMAGE_CUBE
 0x9050

	)

5518 
	#GL_IMAGE_BUFFER
 0x9051

	)

5519 
	#GL_IMAGE_1D_ARRAY
 0x9052

	)

5520 
	#GL_IMAGE_2D_ARRAY
 0x9053

	)

5521 
	#GL_IMAGE_CUBE_MAP_ARRAY
 0x9054

	)

5522 
	#GL_IMAGE_2D_MULTISAMPLE
 0x9055

	)

5523 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9056

	)

5524 
	#GL_INT_IMAGE_1D
 0x9057

	)

5525 
	#GL_INT_IMAGE_2D
 0x9058

	)

5526 
	#GL_INT_IMAGE_3D
 0x9059

	)

5527 
	#GL_INT_IMAGE_2D_RECT
 0x905A

	)

5528 
	#GL_INT_IMAGE_CUBE
 0x905B

	)

5529 
	#GL_INT_IMAGE_BUFFER
 0x905C

	)

5530 
	#GL_INT_IMAGE_1D_ARRAY
 0x905D

	)

5531 
	#GL_INT_IMAGE_2D_ARRAY
 0x905E

	)

5532 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY
 0x905F

	)

5533 
	#GL_INT_IMAGE_2D_MULTISAMPLE
 0x9060

	)

5534 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9061

	)

5535 
	#GL_UNSIGNED_INT_IMAGE_1D
 0x9062

	)

5536 
	#GL_UNSIGNED_INT_IMAGE_2D
 0x9063

	)

5537 
	#GL_UNSIGNED_INT_IMAGE_3D
 0x9064

	)

5538 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT
 0x9065

	)

5539 
	#GL_UNSIGNED_INT_IMAGE_CUBE
 0x9066

	)

5540 
	#GL_UNSIGNED_INT_IMAGE_BUFFER
 0x9067

	)

5541 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY
 0x9068

	)

5542 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY
 0x9069

	)

5543 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
 0x906A

	)

5544 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
 0x906B

	)

5545 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x906C

	)

5546 
	#GL_MAX_IMAGE_SAMPLES
 0x906D

	)

5547 
	#GL_IMAGE_BINDING_FORMAT
 0x906E

	)

5548 
	#GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
 0x90C7

	)

5549 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
 0x90C8

	)

5550 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
 0x90C9

	)

5551 
	#GL_MAX_VERTEX_IMAGE_UNIFORMS
 0x90CA

	)

5552 
	#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
 0x90CB

	)

5553 
	#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
 0x90CC

	)

5554 
	#GL_MAX_GEOMETRY_IMAGE_UNIFORMS
 0x90CD

	)

5555 
	#GL_MAX_FRAGMENT_IMAGE_UNIFORMS
 0x90CE

	)

5556 
	#GL_MAX_COMBINED_IMAGE_UNIFORMS
 0x90CF

	)

5557 
	#GL_ALL_BARRIER_BITS
 0xFFFFFFFF

	)

5559 (
GLAPIENTRY
 * 
	tPFNGLBINDIMAGETEXTUREPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLíum 
	tf‹m©
);

5560 (
GLAPIENTRY
 * 
	tPFNGLMEMORYBARRIERPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

5562 
	#glBödImageTextuª
 
	`GLEW_GET_FUN
(
__gÀwBödImageTextuª
)

	)

5563 
	#glMem‹yB¨rõr
 
	`GLEW_GET_FUN
(
__gÀwMem‹yB¨rõr
)

	)

5565 
	#GLEW_ARB_shadî_image_lﬂd_°‹e
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_image_lﬂd_°‹e
)

	)

5571 #i‚de‡
GL_ARB_shadî_image_size


5572 
	#GL_ARB_shadî_image_size
 1

	)

5574 
	#GLEW_ARB_shadî_image_size
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_image_size
)

	)

5580 #i‚de‡
GL_ARB_shadî_obje˘s


5581 
	#GL_ARB_shadî_obje˘s
 1

	)

5583 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

5584 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

5585 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

5586 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

5587 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

5588 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

5589 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

5590 
	#GL_INT_VEC2_ARB
 0x8B53

	)

5591 
	#GL_INT_VEC3_ARB
 0x8B54

	)

5592 
	#GL_INT_VEC4_ARB
 0x8B55

	)

5593 
	#GL_BOOL_ARB
 0x8B56

	)

5594 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

5595 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

5596 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

5597 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

5598 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

5599 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

5600 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

5601 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

5602 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

5603 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

5604 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

5605 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

5606 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

5607 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

5608 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

5609 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

5610 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

5611 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

5612 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

5613 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

5614 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

5615 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

5616 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

5618 
	tGLch¨ARB
;

5619 
	tGLh™dÀARB
;

5621 (
GLAPIENTRY
 * 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

5622 (
GLAPIENTRY
 * 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

5623 
GLh™dÀARB
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

5624 
GLh™dÀARB
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

5625 (
GLAPIENTRY
 * 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

5626 (
GLAPIENTRY
 * 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

5627 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

5628 (
GLAPIENTRY
 * 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizei* 
	tcou¡
, GLh™dÀARB *
	tobj
);

5629 
GLh™dÀARB
 (
	tGLAPIENTRY
 * 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

5630 (
GLAPIENTRY
 * 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

5631 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

5632 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

5633 (
GLAPIENTRY
 * 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

5634 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
* 
	t«me
);

5635 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
* 
	t∑øms
);

5636 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöt* 
	t∑øms
);

5637 (
GLAPIENTRY
 * 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

5638 (
GLAPIENTRY
 * 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
 ** 
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

5639 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

5640 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5641 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

5642 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

5643 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

5644 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5645 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

5646 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

5647 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

5648 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5649 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

5650 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

5651 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

5652 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5653 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

5654 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

5655 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5656 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5657 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

5658 (
GLAPIENTRY
 * 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

5659 (
GLAPIENTRY
 * 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

5661 
	#glAâachObje˘ARB
 
	`GLEW_GET_FUN
(
__gÀwAâachObje˘ARB
)

	)

5662 
	#glCompûeShadîARB
 
	`GLEW_GET_FUN
(
__gÀwCompûeShadîARB
)

	)

5663 
	#glCª©eProgømObje˘ARB
 
	`GLEW_GET_FUN
(
__gÀwCª©eProgømObje˘ARB
)

	)

5664 
	#glCª©eShadîObje˘ARB
 
	`GLEW_GET_FUN
(
__gÀwCª©eShadîObje˘ARB
)

	)

5665 
	#glDñëeObje˘ARB
 
	`GLEW_GET_FUN
(
__gÀwDñëeObje˘ARB
)

	)

5666 
	#glDëachObje˘ARB
 
	`GLEW_GET_FUN
(
__gÀwDëachObje˘ARB
)

	)

5667 
	#glGëA˘iveUnif‹mARB
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveUnif‹mARB
)

	)

5668 
	#glGëAâachedObje˘sARB
 
	`GLEW_GET_FUN
(
__gÀwGëAâachedObje˘sARB
)

	)

5669 
	#glGëH™dÀARB
 
	`GLEW_GET_FUN
(
__gÀwGëH™dÀARB
)

	)

5670 
	#glGëInfoLogARB
 
	`GLEW_GET_FUN
(
__gÀwGëInfoLogARB
)

	)

5671 
	#glGëObje˘P¨amëîfvARB
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘P¨amëîfvARB
)

	)

5672 
	#glGëObje˘P¨amëîivARB
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘P¨amëîivARB
)

	)

5673 
	#glGëShadîSour˚ARB
 
	`GLEW_GET_FUN
(
__gÀwGëShadîSour˚ARB
)

	)

5674 
	#glGëUnif‹mLoˇti⁄ARB
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mLoˇti⁄ARB
)

	)

5675 
	#glGëUnif‹mfvARB
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mfvARB
)

	)

5676 
	#glGëUnif‹mivARB
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mivARB
)

	)

5677 
	#glLökProgømARB
 
	`GLEW_GET_FUN
(
__gÀwLökProgømARB
)

	)

5678 
	#glShadîSour˚ARB
 
	`GLEW_GET_FUN
(
__gÀwShadîSour˚ARB
)

	)

5679 
	#glUnif‹m1fARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1fARB
)

	)

5680 
	#glUnif‹m1fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1fvARB
)

	)

5681 
	#glUnif‹m1iARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1iARB
)

	)

5682 
	#glUnif‹m1ivARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1ivARB
)

	)

5683 
	#glUnif‹m2fARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2fARB
)

	)

5684 
	#glUnif‹m2fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2fvARB
)

	)

5685 
	#glUnif‹m2iARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2iARB
)

	)

5686 
	#glUnif‹m2ivARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2ivARB
)

	)

5687 
	#glUnif‹m3fARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3fARB
)

	)

5688 
	#glUnif‹m3fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3fvARB
)

	)

5689 
	#glUnif‹m3iARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3iARB
)

	)

5690 
	#glUnif‹m3ivARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3ivARB
)

	)

5691 
	#glUnif‹m4fARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4fARB
)

	)

5692 
	#glUnif‹m4fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4fvARB
)

	)

5693 
	#glUnif‹m4iARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4iARB
)

	)

5694 
	#glUnif‹m4ivARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4ivARB
)

	)

5695 
	#glUnif‹mM©rix2fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix2fvARB
)

	)

5696 
	#glUnif‹mM©rix3fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix3fvARB
)

	)

5697 
	#glUnif‹mM©rix4fvARB
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mM©rix4fvARB
)

	)

5698 
	#glU£ProgømObje˘ARB
 
	`GLEW_GET_FUN
(
__gÀwU£ProgømObje˘ARB
)

	)

5699 
	#glVÆid©eProgømARB
 
	`GLEW_GET_FUN
(
__gÀwVÆid©eProgømARB
)

	)

5701 
	#GLEW_ARB_shadî_obje˘s
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_obje˘s
)

	)

5707 #i‚de‡
GL_ARB_shadî_¥ecisi⁄


5708 
	#GL_ARB_shadî_¥ecisi⁄
 1

	)

5710 
	#GLEW_ARB_shadî_¥ecisi⁄
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_¥ecisi⁄
)

	)

5716 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


5717 
	#GL_ARB_shadî_°ícû_exp‹t
 1

	)

5719 
	#GLEW_ARB_shadî_°ícû_exp‹t
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_°ícû_exp‹t
)

	)

5725 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


5726 
	#GL_ARB_shadî_°‹age_buf„r_obje˘
 1

	)

5728 
	#GL_SHADER_STORAGE_BARRIER_BIT
 0x2000

	)

5729 
	#GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
 0x8F39

	)

5730 
	#GL_SHADER_STORAGE_BUFFER
 0x90D2

	)

5731 
	#GL_SHADER_STORAGE_BUFFER_BINDING
 0x90D3

	)

5732 
	#GL_SHADER_STORAGE_BUFFER_START
 0x90D4

	)

5733 
	#GL_SHADER_STORAGE_BUFFER_SIZE
 0x90D5

	)

5734 
	#GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
 0x90D6

	)

5735 
	#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
 0x90D7

	)

5736 
	#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
 0x90D8

	)

5737 
	#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
 0x90D9

	)

5738 
	#GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
 0x90DA

	)

5739 
	#GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
 0x90DB

	)

5740 
	#GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
 0x90DC

	)

5741 
	#GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
 0x90DD

	)

5742 
	#GL_MAX_SHADER_STORAGE_BLOCK_SIZE
 0x90DE

	)

5743 
	#GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
 0x90DF

	)

5745 (
GLAPIENTRY
 * 
	tPFNGLSHADERSTORAGEBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	t°‹ageBlockIndex
, GLuöà
	t°‹ageBlockBödög
);

5747 
	#glShadîSt‹ageBlockBödög
 
	`GLEW_GET_FUN
(
__gÀwShadîSt‹ageBlockBödög
)

	)

5749 
	#GLEW_ARB_shadî_°‹age_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_°‹age_buf„r_obje˘
)

	)

5755 #i‚de‡
GL_ARB_shadî_subroutöe


5756 
	#GL_ARB_shadî_subroutöe
 1

	)

5758 
	#GL_ACTIVE_SUBROUTINES
 0x8DE5

	)

5759 
	#GL_ACTIVE_SUBROUTINE_UNIFORMS
 0x8DE6

	)

5760 
	#GL_MAX_SUBROUTINES
 0x8DE7

	)

5761 
	#GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
 0x8DE8

	)

5762 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
 0x8E47

	)

5763 
	#GL_ACTIVE_SUBROUTINE_MAX_LENGTH
 0x8E48

	)

5764 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
 0x8E49

	)

5765 
	#GL_NUM_COMPATIBLE_SUBROUTINES
 0x8E4A

	)

5766 
	#GL_COMPATIBLE_SUBROUTINES
 0x8E4B

	)

5768 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVESUBROUTINENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	t«me
);

5769 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	t«me
);

5770 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
* 
	tvÆues
);

5771 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMSTAGEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLíum 
	t≤ame
, 
	tGLöt
* 
	tvÆues
);

5772 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETSUBROUTINEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
* 
	t«me
);

5773 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
* 
	t«me
);

5774 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMSUBROUTINEUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
* 
	t∑øms
);

5775 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMSUBROUTINESUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
* 
	tödi˚s
);

5777 
	#glGëA˘iveSubroutöeName
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveSubroutöeName
)

	)

5778 
	#glGëA˘iveSubroutöeUnif‹mName
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveSubroutöeUnif‹mName
)

	)

5779 
	#glGëA˘iveSubroutöeUnif‹miv
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveSubroutöeUnif‹miv
)

	)

5780 
	#glGëProgømSègeiv
 
	`GLEW_GET_FUN
(
__gÀwGëProgømSègeiv
)

	)

5781 
	#glGëSubroutöeIndex
 
	`GLEW_GET_FUN
(
__gÀwGëSubroutöeIndex
)

	)

5782 
	#glGëSubroutöeUnif‹mLoˇti⁄
 
	`GLEW_GET_FUN
(
__gÀwGëSubroutöeUnif‹mLoˇti⁄
)

	)

5783 
	#glGëUnif‹mSubroutöeuiv
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mSubroutöeuiv
)

	)

5784 
	#glUnif‹mSubroutöesuiv
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mSubroutöesuiv
)

	)

5786 
	#GLEW_ARB_shadî_subroutöe
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_subroutöe
)

	)

5792 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


5793 
	#GL_ARB_shadî_ãxtuª_lod
 1

	)

5795 
	#GLEW_ARB_shadî_ãxtuª_lod
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadî_ãxtuª_lod
)

	)

5801 #i‚de‡
GL_ARB_shadög_œnguage_100


5802 
	#GL_ARB_shadög_œnguage_100
 1

	)

5804 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

5806 
	#GLEW_ARB_shadög_œnguage_100
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadög_œnguage_100
)

	)

5812 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


5813 
	#GL_ARB_shadög_œnguage_420∑ck
 1

	)

5815 
	#GLEW_ARB_shadög_œnguage_420∑ck
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadög_œnguage_420∑ck
)

	)

5821 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


5822 
	#GL_ARB_shadög_œnguage_ö˛ude
 1

	)

5824 
	#GL_SHADER_INCLUDE_ARB
 0x8DAE

	)

5825 
	#GL_NAMED_STRING_LENGTH_ARB
 0x8DE9

	)

5826 
	#GL_NAMED_STRING_TYPE_ARB
 0x8DEA

	)

5828 (
GLAPIENTRY
 * 
	tPFNGLCOMPILESHADERINCLUDEARBPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
* c⁄° *
	t∑th
, c⁄° 
	tGLöt
 *
	tÀngth
);

5829 (
GLAPIENTRY
 * 
	tPFNGLDELETENAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
* 
	t«me
);

5830 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
* 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t°rögÀn
, GLch¨ *
	t°rög
);

5831 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDSTRINGIVARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
* 
	t«me
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

5832 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
* 
	t«me
);

5833 (
GLAPIENTRY
 * 
	tPFNGLNAMEDSTRINGARBPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
* 
	t«me
, GLöà
	t°rögÀn
, c⁄° GLch¨ *
	t°rög
);

5835 
	#glCompûeShadîIn˛udeARB
 
	`GLEW_GET_FUN
(
__gÀwCompûeShadîIn˛udeARB
)

	)

5836 
	#glDñëeNamedSåögARB
 
	`GLEW_GET_FUN
(
__gÀwDñëeNamedSåögARB
)

	)

5837 
	#glGëNamedSåögARB
 
	`GLEW_GET_FUN
(
__gÀwGëNamedSåögARB
)

	)

5838 
	#glGëNamedSåögivARB
 
	`GLEW_GET_FUN
(
__gÀwGëNamedSåögivARB
)

	)

5839 
	#glIsNamedSåögARB
 
	`GLEW_GET_FUN
(
__gÀwIsNamedSåögARB
)

	)

5840 
	#glNamedSåögARB
 
	`GLEW_GET_FUN
(
__gÀwNamedSåögARB
)

	)

5842 
	#GLEW_ARB_shadög_œnguage_ö˛ude
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadög_œnguage_ö˛ude
)

	)

5848 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


5849 
	#GL_ARB_shadög_œnguage_∑ckög
 1

	)

5851 
	#GLEW_ARB_shadög_œnguage_∑ckög
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadög_œnguage_∑ckög
)

	)

5857 #i‚de‡
GL_ARB_shadow


5858 
	#GL_ARB_shadow
 1

	)

5860 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

5861 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

5862 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

5864 
	#GLEW_ARB_shadow
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadow
)

	)

5870 #i‚de‡
GL_ARB_shadow_ambõ¡


5871 
	#GL_ARB_shadow_ambõ¡
 1

	)

5873 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

5875 
	#GLEW_ARB_shadow_ambõ¡
 
	`GLEW_GET_VAR
(
__GLEW_ARB_shadow_ambõ¡
)

	)

5881 #i‚de‡
GL_ARB_•¨£_ãxtuª


5882 
	#GL_ARB_•¨£_ãxtuª
 1

	)

5884 
	#GL_VIRTUAL_PAGE_SIZE_X_ARB
 0x9195

	)

5885 
	#GL_VIRTUAL_PAGE_SIZE_Y_ARB
 0x9196

	)

5886 
	#GL_VIRTUAL_PAGE_SIZE_Z_ARB
 0x9197

	)

5887 
	#GL_MAX_SPARSE_TEXTURE_SIZE_ARB
 0x9198

	)

5888 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
 0x9199

	)

5889 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
 0x919A

	)

5890 
	#GL_TEXTURE_SPARSE_ARB
 0x91A6

	)

5891 
	#GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
 0x91A7

	)

5892 
	#GL_NUM_VIRTUAL_PAGE_SIZES_ARB
 0x91A8

	)

5893 
	#GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
 0x91A9

	)

5894 
	#GL_NUM_SPARSE_LEVELS_ARB
 0x91AA

	)

5896 (
GLAPIENTRY
 * 
	tPFNGLTEXPAGECOMMITMENTARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tcommô
);

5897 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREPAGECOMMITMENTEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tcommô
);

5899 
	#glTexPageCommômítARB
 
	`GLEW_GET_FUN
(
__gÀwTexPageCommômítARB
)

	)

5900 
	#glTextuªPageCommômítEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªPageCommômítEXT
)

	)

5902 
	#GLEW_ARB_•¨£_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_ARB_•¨£_ãxtuª
)

	)

5908 #i‚de‡
GL_ARB_°ícû_ãxturög


5909 
	#GL_ARB_°ícû_ãxturög
 1

	)

5911 
	#GL_DEPTH_STENCIL_TEXTURE_MODE
 0x90EA

	)

5913 
	#GLEW_ARB_°ícû_ãxturög
 
	`GLEW_GET_VAR
(
__GLEW_ARB_°ícû_ãxturög
)

	)

5919 #i‚de‡
GL_ARB_sync


5920 
	#GL_ARB_sync
 1

	)

5922 
	#GL_SYNC_FLUSH_COMMANDS_BIT
 0x00000001

	)

5923 
	#GL_MAX_SERVER_WAIT_TIMEOUT
 0x9111

	)

5924 
	#GL_OBJECT_TYPE
 0x9112

	)

5925 
	#GL_SYNC_CONDITION
 0x9113

	)

5926 
	#GL_SYNC_STATUS
 0x9114

	)

5927 
	#GL_SYNC_FLAGS
 0x9115

	)

5928 
	#GL_SYNC_FENCE
 0x9116

	)

5929 
	#GL_SYNC_GPU_COMMANDS_COMPLETE
 0x9117

	)

5930 
	#GL_UNSIGNALED
 0x9118

	)

5931 
	#GL_SIGNALED
 0x9119

	)

5932 
	#GL_ALREADY_SIGNALED
 0x911A

	)

5933 
	#GL_TIMEOUT_EXPIRED
 0x911B

	)

5934 
	#GL_CONDITION_SATISFIED
 0x911C

	)

5935 
	#GL_WAIT_FAILED
 0x911D

	)

5936 
	#GL_TIMEOUT_IGNORED
 0xFFFFFFFFFFFFFFFF

	)

5938 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLCLIENTWAITSYNCPROC
Ë(
	tGLsync
 GLsync,
	tGLbôfõld
 
	tÊags
,
	tGLuöt64
 
	ttimeout
);

5939 (
GLAPIENTRY
 * 
	tPFNGLDELETESYNCPROC
Ë(
	tGLsync
 GLsync);

5940 
GLsync
 (
	tGLAPIENTRY
 * 
	tPFNGLFENCESYNCPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
,
	tGLbôfõld
 
	tÊags
);

5941 (
GLAPIENTRY
 * 
	tPFNGLGETINTEGER64VPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
* 
	t∑øms
);

5942 (
GLAPIENTRY
 * 
	tPFNGLGETSYNCIVPROC
Ë(
	tGLsync
 GLsync,
	tGLíum
 
	t≤ame
,
	tGLsizei
 
	tbufSize
,GLsizei* 
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

5943 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISSYNCPROC
Ë(
	tGLsync
 GLsync);

5944 (
GLAPIENTRY
 * 
	tPFNGLWAITSYNCPROC
Ë(
	tGLsync
 GLsync,
	tGLbôfõld
 
	tÊags
,
	tGLuöt64
 
	ttimeout
);

5946 
	#glClõ¡WaôSync
 
	`GLEW_GET_FUN
(
__gÀwClõ¡WaôSync
)

	)

5947 
	#glDñëeSync
 
	`GLEW_GET_FUN
(
__gÀwDñëeSync
)

	)

5948 
	#glFí˚Sync
 
	`GLEW_GET_FUN
(
__gÀwFí˚Sync
)

	)

5949 
	#glGëI¡egî64v
 
	`GLEW_GET_FUN
(
__gÀwGëI¡egî64v
)

	)

5950 
	#glGëSynciv
 
	`GLEW_GET_FUN
(
__gÀwGëSynciv
)

	)

5951 
	#glIsSync
 
	`GLEW_GET_FUN
(
__gÀwIsSync
)

	)

5952 
	#glWaôSync
 
	`GLEW_GET_FUN
(
__gÀwWaôSync
)

	)

5954 
	#GLEW_ARB_sync
 
	`GLEW_GET_VAR
(
__GLEW_ARB_sync
)

	)

5960 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


5961 
	#GL_ARB_ãs£Œ©i⁄_shadî
 1

	)

5963 
	#GL_PATCHES
 0xE

	)

5964 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
 0x84F0

	)

5965 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x84F1

	)

5966 
	#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
 0x886C

	)

5967 
	#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
 0x886D

	)

5968 
	#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E1E

	)

5969 
	#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E1F

	)

5970 
	#GL_PATCH_VERTICES
 0x8E72

	)

5971 
	#GL_PATCH_DEFAULT_INNER_LEVEL
 0x8E73

	)

5972 
	#GL_PATCH_DEFAULT_OUTER_LEVEL
 0x8E74

	)

5973 
	#GL_TESS_CONTROL_OUTPUT_VERTICES
 0x8E75

	)

5974 
	#GL_TESS_GEN_MODE
 0x8E76

	)

5975 
	#GL_TESS_GEN_SPACING
 0x8E77

	)

5976 
	#GL_TESS_GEN_VERTEX_ORDER
 0x8E78

	)

5977 
	#GL_TESS_GEN_POINT_MODE
 0x8E79

	)

5978 
	#GL_ISOLINES
 0x8E7A

	)

5979 
	#GL_FRACTIONAL_ODD
 0x8E7B

	)

5980 
	#GL_FRACTIONAL_EVEN
 0x8E7C

	)

5981 
	#GL_MAX_PATCH_VERTICES
 0x8E7D

	)

5982 
	#GL_MAX_TESS_GEN_LEVEL
 0x8E7E

	)

5983 
	#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E7F

	)

5984 
	#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E80

	)

5985 
	#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
 0x8E81

	)

5986 
	#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
 0x8E82

	)

5987 
	#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
 0x8E83

	)

5988 
	#GL_MAX_TESS_PATCH_COMPONENTS
 0x8E84

	)

5989 
	#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
 0x8E85

	)

5990 
	#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
 0x8E86

	)

5991 
	#GL_TESS_EVALUATION_SHADER
 0x8E87

	)

5992 
	#GL_TESS_CONTROL_SHADER
 0x8E88

	)

5993 
	#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
 0x8E89

	)

5994 
	#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
 0x8E8A

	)

5996 (
GLAPIENTRY
 * 
	tPFNGLPATCHPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	tvÆues
);

5997 (
GLAPIENTRY
 * 
	tPFNGLPATCHPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

5999 
	#glP©chP¨amëîfv
 
	`GLEW_GET_FUN
(
__gÀwP©chP¨amëîfv
)

	)

6000 
	#glP©chP¨amëîi
 
	`GLEW_GET_FUN
(
__gÀwP©chP¨amëîi
)

	)

6002 
	#GLEW_ARB_ãs£Œ©i⁄_shadî
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãs£Œ©i⁄_shadî
)

	)

6008 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


6009 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

6011 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

6013 
	#GLEW_ARB_ãxtuª_b‹dî_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_b‹dî_˛amp
)

	)

6019 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


6020 
	#GL_ARB_ãxtuª_buf„r_obje˘
 1

	)

6022 
	#GL_TEXTURE_BUFFER_ARB
 0x8C2A

	)

6023 
	#GL_MAX_TEXTURE_BUFFER_SIZE_ARB
 0x8C2B

	)

6024 
	#GL_TEXTURE_BINDING_BUFFER_ARB
 0x8C2C

	)

6025 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
 0x8C2D

	)

6026 
	#GL_TEXTURE_BUFFER_FORMAT_ARB
 0x8C2E

	)

6028 (
GLAPIENTRY
 * 
	tPFNGLTEXBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

6030 
	#glTexBuf„rARB
 
	`GLEW_GET_FUN
(
__gÀwTexBuf„rARB
)

	)

6032 
	#GLEW_ARB_ãxtuª_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_buf„r_obje˘
)

	)

6038 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


6039 
	#GL_ARB_ãxtuª_buf„r_obje˘_rgb32
 1

	)

6041 
	#GLEW_ARB_ãxtuª_buf„r_obje˘_rgb32
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_buf„r_obje˘_rgb32
)

	)

6047 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


6048 
	#GL_ARB_ãxtuª_buf„r_ønge
 1

	)

6050 
	#GL_TEXTURE_BUFFER_OFFSET
 0x919D

	)

6051 
	#GL_TEXTURE_BUFFER_SIZE
 0x919E

	)

6052 
	#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
 0x919F

	)

6054 (
GLAPIENTRY
 * 
	tPFNGLTEXBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

6055 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

6057 
	#glTexBuf„rR™ge
 
	`GLEW_GET_FUN
(
__gÀwTexBuf„rR™ge
)

	)

6058 
	#glTextuªBuf„rR™geEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªBuf„rR™geEXT
)

	)

6060 
	#GLEW_ARB_ãxtuª_buf„r_ønge
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_buf„r_ønge
)

	)

6066 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


6067 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

6069 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

6070 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

6071 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

6072 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

6073 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

6074 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

6075 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

6076 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

6077 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

6078 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

6079 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

6081 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6082 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6083 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6084 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6085 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6086 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

6087 (
GLAPIENTRY
 * 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLvoid
 *
	timg
);

6089 
	#glCom¥es£dTexImage1DARB
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexImage1DARB
)

	)

6090 
	#glCom¥es£dTexImage2DARB
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexImage2DARB
)

	)

6091 
	#glCom¥es£dTexImage3DARB
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexImage3DARB
)

	)

6092 
	#glCom¥es£dTexSubImage1DARB
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexSubImage1DARB
)

	)

6093 
	#glCom¥es£dTexSubImage2DARB
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexSubImage2DARB
)

	)

6094 
	#glCom¥es£dTexSubImage3DARB
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTexSubImage3DARB
)

	)

6095 
	#glGëCom¥es£dTexImageARB
 
	`GLEW_GET_FUN
(
__gÀwGëCom¥es£dTexImageARB
)

	)

6097 
	#GLEW_ARB_ãxtuª_com¥essi⁄
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_com¥essi⁄
)

	)

6103 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


6104 
	#GL_ARB_ãxtuª_com¥essi⁄_b±c
 1

	)

6106 
	#GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
 0x8E8C

	)

6107 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
 0x8E8D

	)

6108 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
 0x8E8E

	)

6109 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
 0x8E8F

	)

6111 
	#GLEW_ARB_ãxtuª_com¥essi⁄_b±c
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_com¥essi⁄_b±c
)

	)

6117 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


6118 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

6120 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

6121 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

6122 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

6123 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

6125 
	#GLEW_ARB_ãxtuª_com¥essi⁄_rgtc
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_com¥essi⁄_rgtc
)

	)

6131 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


6132 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

6134 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

6135 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

6136 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

6137 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

6138 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

6139 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

6140 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

6141 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

6142 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

6143 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

6144 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

6145 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

6147 
	#GLEW_ARB_ãxtuª_cube_m≠
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_cube_m≠
)

	)

6153 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


6154 
	#GL_ARB_ãxtuª_cube_m≠_¨øy
 1

	)

6156 
	#GL_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x9009

	)

6157 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
 0x900A

	)

6158 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x900B

	)

6159 
	#GL_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900C

	)

6160 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
 0x900D

	)

6161 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900E

	)

6162 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900F

	)

6164 
	#GLEW_ARB_ãxtuª_cube_m≠_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_cube_m≠_¨øy
)

	)

6170 #i‚de‡
GL_ARB_ãxtuª_ív_add


6171 
	#GL_ARB_ãxtuª_ív_add
 1

	)

6173 
	#GLEW_ARB_ãxtuª_ív_add
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_ív_add
)

	)

6179 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


6180 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

6182 
	#GL_SUBTRACT_ARB
 0x84E7

	)

6183 
	#GL_COMBINE_ARB
 0x8570

	)

6184 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

6185 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

6186 
	#GL_RGB_SCALE_ARB
 0x8573

	)

6187 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

6188 
	#GL_INTERPOLATE_ARB
 0x8575

	)

6189 
	#GL_CONSTANT_ARB
 0x8576

	)

6190 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

6191 
	#GL_PREVIOUS_ARB
 0x8578

	)

6192 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

6193 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

6194 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

6195 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

6196 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

6197 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

6198 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

6199 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

6200 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

6201 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

6202 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

6203 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

6205 
	#GLEW_ARB_ãxtuª_ív_comböe
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_ív_comböe
)

	)

6211 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


6212 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

6214 
	#GLEW_ARB_ãxtuª_ív_¸ossb¨
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_ív_¸ossb¨
)

	)

6220 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


6221 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

6223 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

6224 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

6226 
	#GLEW_ARB_ãxtuª_ív_dŸ3
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_ív_dŸ3
)

	)

6232 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


6233 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

6235 
	#GL_RGBA32F_ARB
 0x8814

	)

6236 
	#GL_RGB32F_ARB
 0x8815

	)

6237 
	#GL_ALPHA32F_ARB
 0x8816

	)

6238 
	#GL_INTENSITY32F_ARB
 0x8817

	)

6239 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

6240 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

6241 
	#GL_RGBA16F_ARB
 0x881A

	)

6242 
	#GL_RGB16F_ARB
 0x881B

	)

6243 
	#GL_ALPHA16F_ARB
 0x881C

	)

6244 
	#GL_INTENSITY16F_ARB
 0x881D

	)

6245 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

6246 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

6247 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

6248 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

6249 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

6250 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

6251 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

6252 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

6253 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

6254 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

6256 
	#GLEW_ARB_ãxtuª_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_Êﬂt
)

	)

6262 #i‚de‡
GL_ARB_ãxtuª_g©hî


6263 
	#GL_ARB_ãxtuª_g©hî
 1

	)

6265 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5E

	)

6266 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5F

	)

6267 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
 0x8F9F

	)

6269 
	#GLEW_ARB_ãxtuª_g©hî
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_g©hî
)

	)

6275 #i‚de‡
GL_ARB_ãxtuª_múr‹_˛amp_to_edge


6276 
	#GL_ARB_ãxtuª_múr‹_˛amp_to_edge
 1

	)

6278 
	#GL_MIRROR_CLAMP_TO_EDGE
 0x8743

	)

6280 
	#GLEW_ARB_ãxtuª_múr‹_˛amp_to_edge
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_múr‹_˛amp_to_edge
)

	)

6286 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


6287 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

6289 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

6291 
	#GLEW_ARB_ãxtuª_múr‹ed_ª≥©
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_múr‹ed_ª≥©
)

	)

6297 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


6298 
	#GL_ARB_ãxtuª_mu…ißm∂e
 1

	)

6300 
	#GL_SAMPLE_POSITION
 0x8E50

	)

6301 
	#GL_SAMPLE_MASK
 0x8E51

	)

6302 
	#GL_SAMPLE_MASK_VALUE
 0x8E52

	)

6303 
	#GL_MAX_SAMPLE_MASK_WORDS
 0x8E59

	)

6304 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

6305 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE
 0x9101

	)

6306 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

6307 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9103

	)

6308 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE
 0x9104

	)

6309 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
 0x9105

	)

6310 
	#GL_TEXTURE_SAMPLES
 0x9106

	)

6311 
	#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
 0x9107

	)

6312 
	#GL_SAMPLER_2D_MULTISAMPLE
 0x9108

	)

6313 
	#GL_INT_SAMPLER_2D_MULTISAMPLE
 0x9109

	)

6314 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
 0x910A

	)

6315 
	#GL_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910B

	)

6316 
	#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910C

	)

6317 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910D

	)

6318 
	#GL_MAX_COLOR_TEXTURE_SAMPLES
 0x910E

	)

6319 
	#GL_MAX_DEPTH_TEXTURE_SAMPLES
 0x910F

	)

6320 
	#GL_MAX_INTEGER_SAMPLES
 0x9110

	)

6322 (
GLAPIENTRY
 * 
	tPFNGLGETMULTISAMPLEFVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	tvÆ
);

6323 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

6324 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6325 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6327 
	#glGëMu…ißm∂efv
 
	`GLEW_GET_FUN
(
__gÀwGëMu…ißm∂efv
)

	)

6328 
	#glSam∂eMaski
 
	`GLEW_GET_FUN
(
__gÀwSam∂eMaski
)

	)

6329 
	#glTexImage2DMu…ißm∂e
 
	`GLEW_GET_FUN
(
__gÀwTexImage2DMu…ißm∂e
)

	)

6330 
	#glTexImage3DMu…ißm∂e
 
	`GLEW_GET_FUN
(
__gÀwTexImage3DMu…ißm∂e
)

	)

6332 
	#GLEW_ARB_ãxtuª_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_mu…ißm∂e
)

	)

6338 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


6339 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

6341 
	#GLEW_ARB_ãxtuª_n⁄_powî_of_two
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_n⁄_powî_of_two
)

	)

6347 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


6348 
	#GL_ARB_ãxtuª_quîy_Àvñs
 1

	)

6350 
	#GLEW_ARB_ãxtuª_quîy_Àvñs
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_quîy_Àvñs
)

	)

6356 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


6357 
	#GL_ARB_ãxtuª_quîy_lod
 1

	)

6359 
	#GLEW_ARB_ãxtuª_quîy_lod
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_quîy_lod
)

	)

6365 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


6366 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

6368 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

6369 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

6370 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

6371 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

6372 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

6373 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

6375 
	#GLEW_ARB_ãxtuª_ª˘™gÀ
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_ª˘™gÀ
)

	)

6381 #i‚de‡
GL_ARB_ãxtuª_rg


6382 
	#GL_ARB_ãxtuª_rg
 1

	)

6384 
	#GL_COMPRESSED_RED
 0x8225

	)

6385 
	#GL_COMPRESSED_RG
 0x8226

	)

6386 
	#GL_RG
 0x8227

	)

6387 
	#GL_RG_INTEGER
 0x8228

	)

6388 
	#GL_R8
 0x8229

	)

6389 
	#GL_R16
 0x822A

	)

6390 
	#GL_RG8
 0x822B

	)

6391 
	#GL_RG16
 0x822C

	)

6392 
	#GL_R16F
 0x822D

	)

6393 
	#GL_R32F
 0x822E

	)

6394 
	#GL_RG16F
 0x822F

	)

6395 
	#GL_RG32F
 0x8230

	)

6396 
	#GL_R8I
 0x8231

	)

6397 
	#GL_R8UI
 0x8232

	)

6398 
	#GL_R16I
 0x8233

	)

6399 
	#GL_R16UI
 0x8234

	)

6400 
	#GL_R32I
 0x8235

	)

6401 
	#GL_R32UI
 0x8236

	)

6402 
	#GL_RG8I
 0x8237

	)

6403 
	#GL_RG8UI
 0x8238

	)

6404 
	#GL_RG16I
 0x8239

	)

6405 
	#GL_RG16UI
 0x823A

	)

6406 
	#GL_RG32I
 0x823B

	)

6407 
	#GL_RG32UI
 0x823C

	)

6409 
	#GLEW_ARB_ãxtuª_rg
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_rg
)

	)

6415 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


6416 
	#GL_ARB_ãxtuª_rgb10_a2ui
 1

	)

6418 
	#GL_RGB10_A2UI
 0x906F

	)

6420 
	#GLEW_ARB_ãxtuª_rgb10_a2ui
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_rgb10_a2ui
)

	)

6426 #i‚de‡
GL_ARB_ãxtuª_°ícû8


6427 
	#GL_ARB_ãxtuª_°ícû8
 1

	)

6429 
	#GL_STENCIL_INDEX
 0x1901

	)

6430 
	#GL_STENCIL_INDEX8
 0x8D48

	)

6432 
	#GLEW_ARB_ãxtuª_°ícû8
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_°ícû8
)

	)

6438 #i‚de‡
GL_ARB_ãxtuª_°‹age


6439 
	#GL_ARB_ãxtuª_°‹age
 1

	)

6441 
	#GL_TEXTURE_IMMUTABLE_FORMAT
 0x912F

	)

6443 (
GLAPIENTRY
 * 
	tPFNGLTEXSTORAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

6444 (
GLAPIENTRY
 * 
	tPFNGLTEXSTORAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6445 (
GLAPIENTRY
 * 
	tPFNGLTEXSTORAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

6446 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESTORAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

6447 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESTORAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6448 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESTORAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

6450 
	#glTexSt‹age1D
 
	`GLEW_GET_FUN
(
__gÀwTexSt‹age1D
)

	)

6451 
	#glTexSt‹age2D
 
	`GLEW_GET_FUN
(
__gÀwTexSt‹age2D
)

	)

6452 
	#glTexSt‹age3D
 
	`GLEW_GET_FUN
(
__gÀwTexSt‹age3D
)

	)

6453 
	#glTextuªSt‹age1DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSt‹age1DEXT
)

	)

6454 
	#glTextuªSt‹age2DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSt‹age2DEXT
)

	)

6455 
	#glTextuªSt‹age3DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSt‹age3DEXT
)

	)

6457 
	#GLEW_ARB_ãxtuª_°‹age
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_°‹age
)

	)

6463 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


6464 
	#GL_ARB_ãxtuª_°‹age_mu…ißm∂e
 1

	)

6466 (
GLAPIENTRY
 * 
	tPFNGLTEXSTORAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6467 (
GLAPIENTRY
 * 
	tPFNGLTEXSTORAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6468 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6469 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6471 
	#glTexSt‹age2DMu…ißm∂e
 
	`GLEW_GET_FUN
(
__gÀwTexSt‹age2DMu…ißm∂e
)

	)

6472 
	#glTexSt‹age3DMu…ißm∂e
 
	`GLEW_GET_FUN
(
__gÀwTexSt‹age3DMu…ißm∂e
)

	)

6473 
	#glTextuªSt‹age2DMu…ißm∂eEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSt‹age2DMu…ißm∂eEXT
)

	)

6474 
	#glTextuªSt‹age3DMu…ißm∂eEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSt‹age3DMu…ißm∂eEXT
)

	)

6476 
	#GLEW_ARB_ãxtuª_°‹age_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_°‹age_mu…ißm∂e
)

	)

6482 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


6483 
	#GL_ARB_ãxtuª_swizzÀ
 1

	)

6485 
	#GL_TEXTURE_SWIZZLE_R
 0x8E42

	)

6486 
	#GL_TEXTURE_SWIZZLE_G
 0x8E43

	)

6487 
	#GL_TEXTURE_SWIZZLE_B
 0x8E44

	)

6488 
	#GL_TEXTURE_SWIZZLE_A
 0x8E45

	)

6489 
	#GL_TEXTURE_SWIZZLE_RGBA
 0x8E46

	)

6491 
	#GLEW_ARB_ãxtuª_swizzÀ
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_swizzÀ
)

	)

6497 #i‚de‡
GL_ARB_ãxtuª_võw


6498 
	#GL_ARB_ãxtuª_võw
 1

	)

6500 
	#GL_TEXTURE_VIEW_MIN_LEVEL
 0x82DB

	)

6501 
	#GL_TEXTURE_VIEW_NUM_LEVELS
 0x82DC

	)

6502 
	#GL_TEXTURE_VIEW_MIN_LAYER
 0x82DD

	)

6503 
	#GL_TEXTURE_VIEW_NUM_LAYERS
 0x82DE

	)

6504 
	#GL_TEXTURE_IMMUTABLE_LEVELS
 0x82DF

	)

6506 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREVIEWPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	t‹igãxtuª
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tmöÀvñ
, GLuöà
	tnumÀvñs
, GLuöà
	tmöœyî
, GLuöà
	tnumœyîs
);

6508 
	#glTextuªVõw
 
	`GLEW_GET_FUN
(
__gÀwTextuªVõw
)

	)

6510 
	#GLEW_ARB_ãxtuª_võw
 
	`GLEW_GET_VAR
(
__GLEW_ARB_ãxtuª_võw
)

	)

6516 #i‚de‡
GL_ARB_timî_quîy


6517 
	#GL_ARB_timî_quîy
 1

	)

6519 
	#GL_TIME_ELAPSED
 0x88BF

	)

6520 
	#GL_TIMESTAMP
 0x8E28

	)

6522 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
* 
	t∑øms
);

6523 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
* 
	t∑øms
);

6524 (
GLAPIENTRY
 * 
	tPFNGLQUERYCOUNTERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

6526 
	#glGëQuîyObje˘i64v
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘i64v
)

	)

6527 
	#glGëQuîyObje˘ui64v
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘ui64v
)

	)

6528 
	#glQuîyCou¡î
 
	`GLEW_GET_FUN
(
__gÀwQuîyCou¡î
)

	)

6530 
	#GLEW_ARB_timî_quîy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_timî_quîy
)

	)

6536 #i‚de‡
GL_ARB_å™sf‹m_„edback2


6537 
	#GL_ARB_å™sf‹m_„edback2
 1

	)

6539 
	#GL_TRANSFORM_FEEDBACK
 0x8E22

	)

6540 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
 0x8E23

	)

6541 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
 0x8E24

	)

6542 
	#GL_TRANSFORM_FEEDBACK_BINDING
 0x8E25

	)

6544 (
GLAPIENTRY
 * 
	tPFNGLBINDTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

6545 (
GLAPIENTRY
 * 
	tPFNGLDELETETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
);

6546 (
GLAPIENTRY
 * 
	tPFNGLDRAWTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

6547 (
GLAPIENTRY
 * 
	tPFNGLGENTRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

6548 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISTRANSFORMFEEDBACKPROC
Ë(
	tGLuöt
 
	tid
);

6549 (
GLAPIENTRY
 * 
	tPFNGLPAUSETRANSFORMFEEDBACKPROC
) ();

6550 (
GLAPIENTRY
 * 
	tPFNGLRESUMETRANSFORMFEEDBACKPROC
) ();

6552 
	#glBödTønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwBödTønsf‹mFìdback
)

	)

6553 
	#glDñëeTønsf‹mFìdbacks
 
	`GLEW_GET_FUN
(
__gÀwDñëeTønsf‹mFìdbacks
)

	)

6554 
	#glDøwTønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwDøwTønsf‹mFìdback
)

	)

6555 
	#glGíTønsf‹mFìdbacks
 
	`GLEW_GET_FUN
(
__gÀwGíTønsf‹mFìdbacks
)

	)

6556 
	#glIsTønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwIsTønsf‹mFìdback
)

	)

6557 
	#glPau£Tønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwPau£Tønsf‹mFìdback
)

	)

6558 
	#glResumeTønsf‹mFìdback
 
	`GLEW_GET_FUN
(
__gÀwResumeTønsf‹mFìdback
)

	)

6560 
	#GLEW_ARB_å™sf‹m_„edback2
 
	`GLEW_GET_VAR
(
__GLEW_ARB_å™sf‹m_„edback2
)

	)

6566 #i‚de‡
GL_ARB_å™sf‹m_„edback3


6567 
	#GL_ARB_å™sf‹m_„edback3
 1

	)

6569 
	#GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
 0x8E70

	)

6570 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

6572 (
GLAPIENTRY
 * 
	tPFNGLBEGINQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tid
);

6573 (
GLAPIENTRY
 * 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
);

6574 (
GLAPIENTRY
 * 
	tPFNGLENDQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6575 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYINDEXEDIVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

6577 
	#glBegöQuîyIndexed
 
	`GLEW_GET_FUN
(
__gÀwBegöQuîyIndexed
)

	)

6578 
	#glDøwTønsf‹mFìdbackSåóm
 
	`GLEW_GET_FUN
(
__gÀwDøwTønsf‹mFìdbackSåóm
)

	)

6579 
	#glEndQuîyIndexed
 
	`GLEW_GET_FUN
(
__gÀwEndQuîyIndexed
)

	)

6580 
	#glGëQuîyIndexediv
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyIndexediv
)

	)

6582 
	#GLEW_ARB_å™sf‹m_„edback3
 
	`GLEW_GET_VAR
(
__GLEW_ARB_å™sf‹m_„edback3
)

	)

6588 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


6589 
	#GL_ARB_å™sf‹m_„edback_ö°™˚d
 1

	)

6591 (
GLAPIENTRY
 * 
	tPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	t¥imcou¡
);

6592 (
GLAPIENTRY
 * 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
, 
	tGLsizei
 
	t¥imcou¡
);

6594 
	#glDøwTønsf‹mFìdbackIn°™˚d
 
	`GLEW_GET_FUN
(
__gÀwDøwTønsf‹mFìdbackIn°™˚d
)

	)

6595 
	#glDøwTønsf‹mFìdbackSåómIn°™˚d
 
	`GLEW_GET_FUN
(
__gÀwDøwTønsf‹mFìdbackSåómIn°™˚d
)

	)

6597 
	#GLEW_ARB_å™sf‹m_„edback_ö°™˚d
 
	`GLEW_GET_VAR
(
__GLEW_ARB_å™sf‹m_„edback_ö°™˚d
)

	)

6603 #i‚de‡
GL_ARB_å™•o£_m©rix


6604 
	#GL_ARB_å™•o£_m©rix
 1

	)

6606 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

6607 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

6608 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

6609 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

6611 (
GLAPIENTRY
 * 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(
	tGLdoubÀ
 
	tm
[16]);

6612 (
GLAPIENTRY
 * 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(
	tGLÊﬂt
 
	tm
[16]);

6613 (
GLAPIENTRY
 * 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(
	tGLdoubÀ
 
	tm
[16]);

6614 (
GLAPIENTRY
 * 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(
	tGLÊﬂt
 
	tm
[16]);

6616 
	#glLﬂdTøn•o£M©rixdARB
 
	`GLEW_GET_FUN
(
__gÀwLﬂdTøn•o£M©rixdARB
)

	)

6617 
	#glLﬂdTøn•o£M©rixfARB
 
	`GLEW_GET_FUN
(
__gÀwLﬂdTøn•o£M©rixfARB
)

	)

6618 
	#glMu…Tøn•o£M©rixdARB
 
	`GLEW_GET_FUN
(
__gÀwMu…Tøn•o£M©rixdARB
)

	)

6619 
	#glMu…Tøn•o£M©rixfARB
 
	`GLEW_GET_FUN
(
__gÀwMu…Tøn•o£M©rixfARB
)

	)

6621 
	#GLEW_ARB_å™•o£_m©rix
 
	`GLEW_GET_VAR
(
__GLEW_ARB_å™•o£_m©rix
)

	)

6627 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


6628 
	#GL_ARB_unif‹m_buf„r_obje˘
 1

	)

6630 
	#GL_UNIFORM_BUFFER
 0x8A11

	)

6631 
	#GL_UNIFORM_BUFFER_BINDING
 0x8A28

	)

6632 
	#GL_UNIFORM_BUFFER_START
 0x8A29

	)

6633 
	#GL_UNIFORM_BUFFER_SIZE
 0x8A2A

	)

6634 
	#GL_MAX_VERTEX_UNIFORM_BLOCKS
 0x8A2B

	)

6635 
	#GL_MAX_GEOMETRY_UNIFORM_BLOCKS
 0x8A2C

	)

6636 
	#GL_MAX_FRAGMENT_UNIFORM_BLOCKS
 0x8A2D

	)

6637 
	#GL_MAX_COMBINED_UNIFORM_BLOCKS
 0x8A2E

	)

6638 
	#GL_MAX_UNIFORM_BUFFER_BINDINGS
 0x8A2F

	)

6639 
	#GL_MAX_UNIFORM_BLOCK_SIZE
 0x8A30

	)

6640 
	#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
 0x8A31

	)

6641 
	#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
 0x8A32

	)

6642 
	#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
 0x8A33

	)

6643 
	#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
 0x8A34

	)

6644 
	#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
 0x8A35

	)

6645 
	#GL_ACTIVE_UNIFORM_BLOCKS
 0x8A36

	)

6646 
	#GL_UNIFORM_TYPE
 0x8A37

	)

6647 
	#GL_UNIFORM_SIZE
 0x8A38

	)

6648 
	#GL_UNIFORM_NAME_LENGTH
 0x8A39

	)

6649 
	#GL_UNIFORM_BLOCK_INDEX
 0x8A3A

	)

6650 
	#GL_UNIFORM_OFFSET
 0x8A3B

	)

6651 
	#GL_UNIFORM_ARRAY_STRIDE
 0x8A3C

	)

6652 
	#GL_UNIFORM_MATRIX_STRIDE
 0x8A3D

	)

6653 
	#GL_UNIFORM_IS_ROW_MAJOR
 0x8A3E

	)

6654 
	#GL_UNIFORM_BLOCK_BINDING
 0x8A3F

	)

6655 
	#GL_UNIFORM_BLOCK_DATA_SIZE
 0x8A40

	)

6656 
	#GL_UNIFORM_BLOCK_NAME_LENGTH
 0x8A41

	)

6657 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
 0x8A42

	)

6658 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
 0x8A43

	)

6659 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
 0x8A44

	)

6660 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
 0x8A45

	)

6661 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
 0x8A46

	)

6662 
	#GL_INVALID_INDEX
 0xFFFFFFFF

	)

6664 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

6665 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

6666 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
* 
	tunif‹mBlockName
);

6667 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEUNIFORMBLOCKIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

6668 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mIndex
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
* 
	tunif‹mName
);

6669 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEUNIFORMSIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° GLuöt* 
	tunif‹mIndi˚s
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

6670 (
GLAPIENTRY
 * 
	tPFNGLGETINTEGERI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
* 
	td©a
);

6671 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETUNIFORMBLOCKINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
* 
	tunif‹mBlockName
);

6672 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMINDICESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° 
	tGLch¨
** 
	tunif‹mNames
, GLuöt* 
	tunif‹mIndi˚s
);

6673 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, GLuöà
	tunif‹mBlockBödög
);

6675 
	#glBödBuf„rBa£
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rBa£
)

	)

6676 
	#glBödBuf„rR™ge
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rR™ge
)

	)

6677 
	#glGëA˘iveUnif‹mBlockName
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveUnif‹mBlockName
)

	)

6678 
	#glGëA˘iveUnif‹mBlockiv
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveUnif‹mBlockiv
)

	)

6679 
	#glGëA˘iveUnif‹mName
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveUnif‹mName
)

	)

6680 
	#glGëA˘iveUnif‹msiv
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveUnif‹msiv
)

	)

6681 
	#glGëI¡egîi_v
 
	`GLEW_GET_FUN
(
__gÀwGëI¡egîi_v
)

	)

6682 
	#glGëUnif‹mBlockIndex
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mBlockIndex
)

	)

6683 
	#glGëUnif‹mIndi˚s
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mIndi˚s
)

	)

6684 
	#glUnif‹mBlockBödög
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mBlockBödög
)

	)

6686 
	#GLEW_ARB_unif‹m_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_unif‹m_buf„r_obje˘
)

	)

6692 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


6693 
	#GL_ARB_vîãx_¨øy_bgø
 1

	)

6695 
	#GL_BGRA
 0x80E1

	)

6697 
	#GLEW_ARB_vîãx_¨øy_bgø
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_¨øy_bgø
)

	)

6703 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


6704 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

6706 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

6708 (
GLAPIENTRY
 * 
	tPFNGLBINDVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

6709 (
GLAPIENTRY
 * 
	tPFNGLDELETEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t¨øys
);

6710 (
GLAPIENTRY
 * 
	tPFNGLGENVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t¨øys
);

6711 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

6713 
	#glBödVîãxAºay
 
	`GLEW_GET_FUN
(
__gÀwBödVîãxAºay
)

	)

6714 
	#glDñëeVîãxAºays
 
	`GLEW_GET_FUN
(
__gÀwDñëeVîãxAºays
)

	)

6715 
	#glGíVîãxAºays
 
	`GLEW_GET_FUN
(
__gÀwGíVîãxAºays
)

	)

6716 
	#glIsVîãxAºay
 
	`GLEW_GET_FUN
(
__gÀwIsVîãxAºay
)

	)

6718 
	#GLEW_ARB_vîãx_¨øy_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_¨øy_obje˘
)

	)

6724 #i‚de‡
GL_ARB_vîãx_©åib_64bô


6725 
	#GL_ARB_vîãx_©åib_64bô
 1

	)

6727 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBLDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

6728 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

6729 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

6730 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6731 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

6732 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6733 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

6734 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6735 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

6736 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBLPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° * 
	tpoöãr
);

6738 
	#glGëVîãxAâribLdv
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribLdv
)

	)

6739 
	#glVîãxAâribL1d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1d
)

	)

6740 
	#glVîãxAâribL1dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1dv
)

	)

6741 
	#glVîãxAâribL2d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2d
)

	)

6742 
	#glVîãxAâribL2dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2dv
)

	)

6743 
	#glVîãxAâribL3d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3d
)

	)

6744 
	#glVîãxAâribL3dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3dv
)

	)

6745 
	#glVîãxAâribL4d
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4d
)

	)

6746 
	#glVîãxAâribL4dv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4dv
)

	)

6747 
	#glVîãxAâribLPoöãr
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribLPoöãr
)

	)

6749 
	#GLEW_ARB_vîãx_©åib_64bô
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_©åib_64bô
)

	)

6755 #i‚de‡
GL_ARB_vîãx_©åib_bödög


6756 
	#GL_ARB_vîãx_©åib_bödög
 1

	)

6758 
	#GL_VERTEX_ATTRIB_BINDING
 0x82D4

	)

6759 
	#GL_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D5

	)

6760 
	#GL_VERTEX_BINDING_DIVISOR
 0x82D6

	)

6761 
	#GL_VERTEX_BINDING_OFFSET
 0x82D7

	)

6762 
	#GL_VERTEX_BINDING_STRIDE
 0x82D8

	)

6763 
	#GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D9

	)

6764 
	#GL_MAX_VERTEX_ATTRIB_BINDINGS
 0x82DA

	)

6766 (
GLAPIENTRY
 * 
	tPFNGLBINDVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

6767 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	t©åibödex
, GLuöà
	tbödögödex
);

6768 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

6769 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6770 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6771 (
GLAPIENTRY
 * 
	tPFNGLVERTEXBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tdivis‹
);

6773 
	#glBödVîãxBuf„r
 
	`GLEW_GET_FUN
(
__gÀwBödVîãxBuf„r
)

	)

6774 
	#glVîãxAâribBödög
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribBödög
)

	)

6775 
	#glVîãxAâribF‹m©
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribF‹m©
)

	)

6776 
	#glVîãxAâribIF‹m©
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribIF‹m©
)

	)

6777 
	#glVîãxAâribLF‹m©
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribLF‹m©
)

	)

6778 
	#glVîãxBödögDivis‹
 
	`GLEW_GET_FUN
(
__gÀwVîãxBödögDivis‹
)

	)

6780 
	#GLEW_ARB_vîãx_©åib_bödög
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_©åib_bödög
)

	)

6786 #i‚de‡
GL_ARB_vîãx_bÀnd


6787 
	#GL_ARB_vîãx_bÀnd
 1

	)

6789 
	#GL_MODELVIEW0_ARB
 0x1700

	)

6790 
	#GL_MODELVIEW1_ARB
 0x850A

	)

6791 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

6792 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

6793 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

6794 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

6795 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

6796 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

6797 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

6798 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

6799 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

6800 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

6801 
	#GL_MODELVIEW2_ARB
 0x8722

	)

6802 
	#GL_MODELVIEW3_ARB
 0x8723

	)

6803 
	#GL_MODELVIEW4_ARB
 0x8724

	)

6804 
	#GL_MODELVIEW5_ARB
 0x8725

	)

6805 
	#GL_MODELVIEW6_ARB
 0x8726

	)

6806 
	#GL_MODELVIEW7_ARB
 0x8727

	)

6807 
	#GL_MODELVIEW8_ARB
 0x8728

	)

6808 
	#GL_MODELVIEW9_ARB
 0x8729

	)

6809 
	#GL_MODELVIEW10_ARB
 0x872A

	)

6810 
	#GL_MODELVIEW11_ARB
 0x872B

	)

6811 
	#GL_MODELVIEW12_ARB
 0x872C

	)

6812 
	#GL_MODELVIEW13_ARB
 0x872D

	)

6813 
	#GL_MODELVIEW14_ARB
 0x872E

	)

6814 
	#GL_MODELVIEW15_ARB
 0x872F

	)

6815 
	#GL_MODELVIEW16_ARB
 0x8730

	)

6816 
	#GL_MODELVIEW17_ARB
 0x8731

	)

6817 
	#GL_MODELVIEW18_ARB
 0x8732

	)

6818 
	#GL_MODELVIEW19_ARB
 0x8733

	)

6819 
	#GL_MODELVIEW20_ARB
 0x8734

	)

6820 
	#GL_MODELVIEW21_ARB
 0x8735

	)

6821 
	#GL_MODELVIEW22_ARB
 0x8736

	)

6822 
	#GL_MODELVIEW23_ARB
 0x8737

	)

6823 
	#GL_MODELVIEW24_ARB
 0x8738

	)

6824 
	#GL_MODELVIEW25_ARB
 0x8739

	)

6825 
	#GL_MODELVIEW26_ARB
 0x873A

	)

6826 
	#GL_MODELVIEW27_ARB
 0x873B

	)

6827 
	#GL_MODELVIEW28_ARB
 0x873C

	)

6828 
	#GL_MODELVIEW29_ARB
 0x873D

	)

6829 
	#GL_MODELVIEW30_ARB
 0x873E

	)

6830 
	#GL_MODELVIEW31_ARB
 0x873F

	)

6832 (
GLAPIENTRY
 * 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

6833 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLvoid
 *
	tpoöãr
);

6834 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLbyã
 *
	tweights
);

6835 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLdoubÀ
 *
	tweights
);

6836 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLÊﬂt
 *
	tweights
);

6837 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, GLöà*
	tweights
);

6838 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLsh‹t
 *
	tweights
);

6839 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLubyã
 *
	tweights
);

6840 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLuöt
 *
	tweights
);

6841 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLush‹t
 *
	tweights
);

6843 
	#glVîãxBÀndARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxBÀndARB
)

	)

6844 
	#glWeightPoöãrARB
 
	`GLEW_GET_FUN
(
__gÀwWeightPoöãrARB
)

	)

6845 
	#glWeightbvARB
 
	`GLEW_GET_FUN
(
__gÀwWeightbvARB
)

	)

6846 
	#glWeightdvARB
 
	`GLEW_GET_FUN
(
__gÀwWeightdvARB
)

	)

6847 
	#glWeightfvARB
 
	`GLEW_GET_FUN
(
__gÀwWeightfvARB
)

	)

6848 
	#glWeightivARB
 
	`GLEW_GET_FUN
(
__gÀwWeightivARB
)

	)

6849 
	#glWeightsvARB
 
	`GLEW_GET_FUN
(
__gÀwWeightsvARB
)

	)

6850 
	#glWeightubvARB
 
	`GLEW_GET_FUN
(
__gÀwWeightubvARB
)

	)

6851 
	#glWeightuivARB
 
	`GLEW_GET_FUN
(
__gÀwWeightuivARB
)

	)

6852 
	#glWeightusvARB
 
	`GLEW_GET_FUN
(
__gÀwWeightusvARB
)

	)

6854 
	#GLEW_ARB_vîãx_bÀnd
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_bÀnd
)

	)

6860 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


6861 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

6863 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

6864 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

6865 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

6866 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

6867 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

6868 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

6869 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

6870 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

6871 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

6872 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

6873 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

6874 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

6875 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

6876 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

6877 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

6878 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

6879 
	#GL_READ_ONLY_ARB
 0x88B8

	)

6880 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

6881 
	#GL_READ_WRITE_ARB
 0x88BA

	)

6882 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

6883 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

6884 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

6885 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

6886 
	#GL_STREAM_READ_ARB
 0x88E1

	)

6887 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

6888 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

6889 
	#GL_STATIC_READ_ARB
 0x88E5

	)

6890 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

6891 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

6892 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

6893 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

6895 
±rdiff_t
 
	tGLöçåARB
;

6896 
±rdiff_t
 
	tGLsizeùåARB
;

6898 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

6899 (
GLAPIENTRY
 * 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, GLíum 
	tußge
);

6900 (
GLAPIENTRY
 * 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

6901 (
GLAPIENTRY
 * 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tbuf„rs
);

6902 (
GLAPIENTRY
 * 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tbuf„rs
);

6903 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

6904 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
** 
	t∑øms
);

6905 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, 
	tGLvoid
 *
	td©a
);

6906 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6907 
	gGLvoid
 * (
	tGLAPIENTRY
 * 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

6908 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

6910 
	#glBödBuf„rARB
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rARB
)

	)

6911 
	#glBuf„rD©aARB
 
	`GLEW_GET_FUN
(
__gÀwBuf„rD©aARB
)

	)

6912 
	#glBuf„rSubD©aARB
 
	`GLEW_GET_FUN
(
__gÀwBuf„rSubD©aARB
)

	)

6913 
	#glDñëeBuf„rsARB
 
	`GLEW_GET_FUN
(
__gÀwDñëeBuf„rsARB
)

	)

6914 
	#glGíBuf„rsARB
 
	`GLEW_GET_FUN
(
__gÀwGíBuf„rsARB
)

	)

6915 
	#glGëBuf„rP¨amëîivARB
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rP¨amëîivARB
)

	)

6916 
	#glGëBuf„rPoöãrvARB
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rPoöãrvARB
)

	)

6917 
	#glGëBuf„rSubD©aARB
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rSubD©aARB
)

	)

6918 
	#glIsBuf„rARB
 
	`GLEW_GET_FUN
(
__gÀwIsBuf„rARB
)

	)

6919 
	#glM≠Buf„rARB
 
	`GLEW_GET_FUN
(
__gÀwM≠Buf„rARB
)

	)

6920 
	#glUnm≠Buf„rARB
 
	`GLEW_GET_FUN
(
__gÀwUnm≠Buf„rARB
)

	)

6922 
	#GLEW_ARB_vîãx_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_buf„r_obje˘
)

	)

6928 #i‚de‡
GL_ARB_vîãx_¥ogøm


6929 
	#GL_ARB_vîãx_¥ogøm
 1

	)

6931 
	#GL_COLOR_SUM_ARB
 0x8458

	)

6932 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

6933 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

6934 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

6935 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

6936 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

6937 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

6938 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

6939 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

6940 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

6941 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

6942 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

6943 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

6944 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

6945 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

6946 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

6947 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

6948 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

6949 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

6950 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

6951 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

6952 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

6953 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

6954 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

6955 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

6956 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

6957 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

6958 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

6959 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

6960 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

6961 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

6962 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

6963 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

6964 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

6965 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

6966 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

6967 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

6968 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

6969 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

6970 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

6971 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

6972 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

6973 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

6974 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

6975 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

6976 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

6977 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

6978 
	#GL_MATRIX0_ARB
 0x88C0

	)

6979 
	#GL_MATRIX1_ARB
 0x88C1

	)

6980 
	#GL_MATRIX2_ARB
 0x88C2

	)

6981 
	#GL_MATRIX3_ARB
 0x88C3

	)

6982 
	#GL_MATRIX4_ARB
 0x88C4

	)

6983 
	#GL_MATRIX5_ARB
 0x88C5

	)

6984 
	#GL_MATRIX6_ARB
 0x88C6

	)

6985 
	#GL_MATRIX7_ARB
 0x88C7

	)

6986 
	#GL_MATRIX8_ARB
 0x88C8

	)

6987 
	#GL_MATRIX9_ARB
 0x88C9

	)

6988 
	#GL_MATRIX10_ARB
 0x88CA

	)

6989 
	#GL_MATRIX11_ARB
 0x88CB

	)

6990 
	#GL_MATRIX12_ARB
 0x88CC

	)

6991 
	#GL_MATRIX13_ARB
 0x88CD

	)

6992 
	#GL_MATRIX14_ARB
 0x88CE

	)

6993 
	#GL_MATRIX15_ARB
 0x88CF

	)

6994 
	#GL_MATRIX16_ARB
 0x88D0

	)

6995 
	#GL_MATRIX17_ARB
 0x88D1

	)

6996 
	#GL_MATRIX18_ARB
 0x88D2

	)

6997 
	#GL_MATRIX19_ARB
 0x88D3

	)

6998 
	#GL_MATRIX20_ARB
 0x88D4

	)

6999 
	#GL_MATRIX21_ARB
 0x88D5

	)

7000 
	#GL_MATRIX22_ARB
 0x88D6

	)

7001 
	#GL_MATRIX23_ARB
 0x88D7

	)

7002 
	#GL_MATRIX24_ARB
 0x88D8

	)

7003 
	#GL_MATRIX25_ARB
 0x88D9

	)

7004 
	#GL_MATRIX26_ARB
 0x88DA

	)

7005 
	#GL_MATRIX27_ARB
 0x88DB

	)

7006 
	#GL_MATRIX28_ARB
 0x88DC

	)

7007 
	#GL_MATRIX29_ARB
 0x88DD

	)

7008 
	#GL_MATRIX30_ARB
 0x88DE

	)

7009 
	#GL_MATRIX31_ARB
 0x88DF

	)

7011 (
GLAPIENTRY
 * 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

7012 (
GLAPIENTRY
 * 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t¥ogøms
);

7013 (
GLAPIENTRY
 * 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

7014 (
GLAPIENTRY
 * 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

7015 (
GLAPIENTRY
 * 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t¥ogøms
);

7016 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
* 
	t∑øms
);

7017 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	t∑øms
);

7018 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
* 
	t∑øms
);

7019 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	t∑øms
);

7020 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

7021 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7022 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
** 
	tpoöãr
);

7023 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

7024 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7025 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7026 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

7027 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7028 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

7029 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7030 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

7031 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7032 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

7033 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7034 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

7035 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

7036 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

7037 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

7038 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

7039 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

7040 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

7041 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

7042 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7043 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

7044 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7045 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

7046 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

7047 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

7048 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7049 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

7050 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7051 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

7052 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7053 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

7054 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
* 
	tv
);

7055 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
* 
	tv
);

7056 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

7057 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

7058 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
* 
	tv
);

7059 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöt* 
	tv
);

7060 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
* 
	tv
);

7061 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
* 
	tv
);

7062 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7063 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

7064 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7065 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

7066 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
* 
	tv
);

7067 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

7068 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

7069 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
* 
	tv
);

7070 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöt* 
	tv
);

7071 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
* 
	tv
);

7072 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7074 
	#glBödProgømARB
 
	`GLEW_GET_FUN
(
__gÀwBödProgømARB
)

	)

7075 
	#glDñëeProgømsARB
 
	`GLEW_GET_FUN
(
__gÀwDñëeProgømsARB
)

	)

7076 
	#glDißbÀVîãxAâribAºayARB
 
	`GLEW_GET_FUN
(
__gÀwDißbÀVîãxAâribAºayARB
)

	)

7077 
	#glE«bÀVîãxAâribAºayARB
 
	`GLEW_GET_FUN
(
__gÀwE«bÀVîãxAâribAºayARB
)

	)

7078 
	#glGíProgømsARB
 
	`GLEW_GET_FUN
(
__gÀwGíProgømsARB
)

	)

7079 
	#glGëProgømEnvP¨amëîdvARB
 
	`GLEW_GET_FUN
(
__gÀwGëProgømEnvP¨amëîdvARB
)

	)

7080 
	#glGëProgømEnvP¨amëîfvARB
 
	`GLEW_GET_FUN
(
__gÀwGëProgømEnvP¨amëîfvARB
)

	)

7081 
	#glGëProgømLoˇlP¨amëîdvARB
 
	`GLEW_GET_FUN
(
__gÀwGëProgømLoˇlP¨amëîdvARB
)

	)

7082 
	#glGëProgømLoˇlP¨amëîfvARB
 
	`GLEW_GET_FUN
(
__gÀwGëProgømLoˇlP¨amëîfvARB
)

	)

7083 
	#glGëProgømSåögARB
 
	`GLEW_GET_FUN
(
__gÀwGëProgømSåögARB
)

	)

7084 
	#glGëProgømivARB
 
	`GLEW_GET_FUN
(
__gÀwGëProgømivARB
)

	)

7085 
	#glGëVîãxAâribPoöãrvARB
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribPoöãrvARB
)

	)

7086 
	#glGëVîãxAâribdvARB
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribdvARB
)

	)

7087 
	#glGëVîãxAâribfvARB
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribfvARB
)

	)

7088 
	#glGëVîãxAâribivARB
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribivARB
)

	)

7089 
	#glIsProgømARB
 
	`GLEW_GET_FUN
(
__gÀwIsProgømARB
)

	)

7090 
	#glProgømEnvP¨amëî4dARB
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëî4dARB
)

	)

7091 
	#glProgømEnvP¨amëî4dvARB
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëî4dvARB
)

	)

7092 
	#glProgømEnvP¨amëî4fARB
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëî4fARB
)

	)

7093 
	#glProgømEnvP¨amëî4fvARB
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëî4fvARB
)

	)

7094 
	#glProgømLoˇlP¨amëî4dARB
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëî4dARB
)

	)

7095 
	#glProgømLoˇlP¨amëî4dvARB
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëî4dvARB
)

	)

7096 
	#glProgømLoˇlP¨amëî4fARB
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëî4fARB
)

	)

7097 
	#glProgømLoˇlP¨amëî4fvARB
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëî4fvARB
)

	)

7098 
	#glProgømSåögARB
 
	`GLEW_GET_FUN
(
__gÀwProgømSåögARB
)

	)

7099 
	#glVîãxAârib1dARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1dARB
)

	)

7100 
	#glVîãxAârib1dvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1dvARB
)

	)

7101 
	#glVîãxAârib1fARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1fARB
)

	)

7102 
	#glVîãxAârib1fvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1fvARB
)

	)

7103 
	#glVîãxAârib1sARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1sARB
)

	)

7104 
	#glVîãxAârib1svARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1svARB
)

	)

7105 
	#glVîãxAârib2dARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2dARB
)

	)

7106 
	#glVîãxAârib2dvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2dvARB
)

	)

7107 
	#glVîãxAârib2fARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2fARB
)

	)

7108 
	#glVîãxAârib2fvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2fvARB
)

	)

7109 
	#glVîãxAârib2sARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2sARB
)

	)

7110 
	#glVîãxAârib2svARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2svARB
)

	)

7111 
	#glVîãxAârib3dARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3dARB
)

	)

7112 
	#glVîãxAârib3dvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3dvARB
)

	)

7113 
	#glVîãxAârib3fARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3fARB
)

	)

7114 
	#glVîãxAârib3fvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3fvARB
)

	)

7115 
	#glVîãxAârib3sARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3sARB
)

	)

7116 
	#glVîãxAârib3svARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3svARB
)

	)

7117 
	#glVîãxAârib4NbvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NbvARB
)

	)

7118 
	#glVîãxAârib4NivARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NivARB
)

	)

7119 
	#glVîãxAârib4NsvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NsvARB
)

	)

7120 
	#glVîãxAârib4NubARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NubARB
)

	)

7121 
	#glVîãxAârib4NubvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NubvARB
)

	)

7122 
	#glVîãxAârib4NuivARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NuivARB
)

	)

7123 
	#glVîãxAârib4NusvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4NusvARB
)

	)

7124 
	#glVîãxAârib4bvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4bvARB
)

	)

7125 
	#glVîãxAârib4dARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4dARB
)

	)

7126 
	#glVîãxAârib4dvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4dvARB
)

	)

7127 
	#glVîãxAârib4fARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4fARB
)

	)

7128 
	#glVîãxAârib4fvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4fvARB
)

	)

7129 
	#glVîãxAârib4ivARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4ivARB
)

	)

7130 
	#glVîãxAârib4sARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4sARB
)

	)

7131 
	#glVîãxAârib4svARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4svARB
)

	)

7132 
	#glVîãxAârib4ubvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4ubvARB
)

	)

7133 
	#glVîãxAârib4uivARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4uivARB
)

	)

7134 
	#glVîãxAârib4usvARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4usvARB
)

	)

7135 
	#glVîãxAâribPoöãrARB
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribPoöãrARB
)

	)

7137 
	#GLEW_ARB_vîãx_¥ogøm
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_¥ogøm
)

	)

7143 #i‚de‡
GL_ARB_vîãx_shadî


7144 
	#GL_ARB_vîãx_shadî
 1

	)

7146 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

7147 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

7148 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

7149 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

7150 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

7151 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

7152 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

7154 (
GLAPIENTRY
 * 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
* 
	t«me
);

7155 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizei* 
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

7156 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
* 
	t«me
);

7158 
	#glBödAâribLoˇti⁄ARB
 
	`GLEW_GET_FUN
(
__gÀwBödAâribLoˇti⁄ARB
)

	)

7159 
	#glGëA˘iveAâribARB
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveAâribARB
)

	)

7160 
	#glGëAâribLoˇti⁄ARB
 
	`GLEW_GET_FUN
(
__gÀwGëAâribLoˇti⁄ARB
)

	)

7162 
	#GLEW_ARB_vîãx_shadî
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_shadî
)

	)

7168 #i‚de‡
GL_ARB_vîãx_ty≥_10f_11f_11f_ªv


7169 
	#GL_ARB_vîãx_ty≥_10f_11f_11f_ªv
 1

	)

7171 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

7173 
	#GLEW_ARB_vîãx_ty≥_10f_11f_11f_ªv
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_ty≥_10f_11f_11f_ªv
)

	)

7179 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


7180 
	#GL_ARB_vîãx_ty≥_2_10_10_10_ªv
 1

	)

7182 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

7183 
	#GL_INT_2_10_10_10_REV
 0x8D9F

	)

7185 (
GLAPIENTRY
 * 
	tPFNGLCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

7186 (
GLAPIENTRY
 * 
	tPFNGLCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tcﬁ‹
);

7187 (
GLAPIENTRY
 * 
	tPFNGLCOLORP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

7188 (
GLAPIENTRY
 * 
	tPFNGLCOLORP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tcﬁ‹
);

7189 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

7190 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

7191 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

7192 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

7193 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

7194 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

7195 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

7196 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

7197 (
GLAPIENTRY
 * 
	tPFNGLNORMALP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

7198 (
GLAPIENTRY
 * 
	tPFNGLNORMALP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

7199 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

7200 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tcﬁ‹
);

7201 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

7202 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

7203 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

7204 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

7205 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

7206 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

7207 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

7208 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tco‹ds
);

7209 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP1UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

7210 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP1UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöt* 
	tvÆue
);

7211 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP2UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

7212 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP2UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöt* 
	tvÆue
);

7213 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP3UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

7214 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP3UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöt* 
	tvÆue
);

7215 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP4UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

7216 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBP4UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöt* 
	tvÆue
);

7217 (
GLAPIENTRY
 * 
	tPFNGLVERTEXP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

7218 (
GLAPIENTRY
 * 
	tPFNGLVERTEXP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tvÆue
);

7219 (
GLAPIENTRY
 * 
	tPFNGLVERTEXP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

7220 (
GLAPIENTRY
 * 
	tPFNGLVERTEXP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tvÆue
);

7221 (
GLAPIENTRY
 * 
	tPFNGLVERTEXP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

7222 (
GLAPIENTRY
 * 
	tPFNGLVERTEXP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
* 
	tvÆue
);

7224 
	#glCﬁ‹P3ui
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹P3ui
)

	)

7225 
	#glCﬁ‹P3uiv
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹P3uiv
)

	)

7226 
	#glCﬁ‹P4ui
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹P4ui
)

	)

7227 
	#glCﬁ‹P4uiv
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹P4uiv
)

	)

7228 
	#glMu…iTexCo‹dP1ui
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP1ui
)

	)

7229 
	#glMu…iTexCo‹dP1uiv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP1uiv
)

	)

7230 
	#glMu…iTexCo‹dP2ui
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP2ui
)

	)

7231 
	#glMu…iTexCo‹dP2uiv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP2uiv
)

	)

7232 
	#glMu…iTexCo‹dP3ui
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP3ui
)

	)

7233 
	#glMu…iTexCo‹dP3uiv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP3uiv
)

	)

7234 
	#glMu…iTexCo‹dP4ui
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP4ui
)

	)

7235 
	#glMu…iTexCo‹dP4uiv
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dP4uiv
)

	)

7236 
	#glN‹mÆP3ui
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆP3ui
)

	)

7237 
	#glN‹mÆP3uiv
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆP3uiv
)

	)

7238 
	#glSec⁄d¨yCﬁ‹P3ui
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹P3ui
)

	)

7239 
	#glSec⁄d¨yCﬁ‹P3uiv
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹P3uiv
)

	)

7240 
	#glTexCo‹dP1ui
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP1ui
)

	)

7241 
	#glTexCo‹dP1uiv
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP1uiv
)

	)

7242 
	#glTexCo‹dP2ui
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP2ui
)

	)

7243 
	#glTexCo‹dP2uiv
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP2uiv
)

	)

7244 
	#glTexCo‹dP3ui
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP3ui
)

	)

7245 
	#glTexCo‹dP3uiv
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP3uiv
)

	)

7246 
	#glTexCo‹dP4ui
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP4ui
)

	)

7247 
	#glTexCo‹dP4uiv
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dP4uiv
)

	)

7248 
	#glVîãxAâribP1ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP1ui
)

	)

7249 
	#glVîãxAâribP1uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP1uiv
)

	)

7250 
	#glVîãxAâribP2ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP2ui
)

	)

7251 
	#glVîãxAâribP2uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP2uiv
)

	)

7252 
	#glVîãxAâribP3ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP3ui
)

	)

7253 
	#glVîãxAâribP3uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP3uiv
)

	)

7254 
	#glVîãxAâribP4ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP4ui
)

	)

7255 
	#glVîãxAâribP4uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribP4uiv
)

	)

7256 
	#glVîãxP2ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxP2ui
)

	)

7257 
	#glVîãxP2uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxP2uiv
)

	)

7258 
	#glVîãxP3ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxP3ui
)

	)

7259 
	#glVîãxP3uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxP3uiv
)

	)

7260 
	#glVîãxP4ui
 
	`GLEW_GET_FUN
(
__gÀwVîãxP4ui
)

	)

7261 
	#glVîãxP4uiv
 
	`GLEW_GET_FUN
(
__gÀwVîãxP4uiv
)

	)

7263 
	#GLEW_ARB_vîãx_ty≥_2_10_10_10_ªv
 
	`GLEW_GET_VAR
(
__GLEW_ARB_vîãx_ty≥_2_10_10_10_ªv
)

	)

7269 #i‚de‡
GL_ARB_võwp‹t_¨øy


7270 
	#GL_ARB_võwp‹t_¨øy
 1

	)

7272 
	#GL_DEPTH_RANGE
 0x0B70

	)

7273 
	#GL_VIEWPORT
 0x0BA2

	)

7274 
	#GL_SCISSOR_BOX
 0x0C10

	)

7275 
	#GL_SCISSOR_TEST
 0x0C11

	)

7276 
	#GL_MAX_VIEWPORTS
 0x825B

	)

7277 
	#GL_VIEWPORT_SUBPIXEL_BITS
 0x825C

	)

7278 
	#GL_VIEWPORT_BOUNDS_RANGE
 0x825D

	)

7279 
	#GL_LAYER_PROVOKING_VERTEX
 0x825E

	)

7280 
	#GL_VIEWPORT_INDEX_PROVOKING_VERTEX
 0x825F

	)

7281 
	#GL_UNDEFINED_VERTEX
 0x8260

	)

7282 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

7283 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

7284 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

7286 (
GLAPIENTRY
 * 
	tPFNGLDEPTHRANGEARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGL˛ampd
 * 
	tv
);

7287 (
GLAPIENTRY
 * 
	tPFNGLDEPTHRANGEINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGL˛ampd
 
	tn
, GL˛ampd 
	tf
);

7288 (
GLAPIENTRY
 * 
	tPFNGLGETDOUBLEI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
* 
	td©a
);

7289 (
GLAPIENTRY
 * 
	tPFNGLGETFLOATI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	td©a
);

7290 (
GLAPIENTRY
 * 
	tPFNGLSCISSORARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 * 
	tv
);

7291 (
GLAPIENTRY
 * 
	tPFNGLSCISSORINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tÀ·
, GLöà
	tbŸtom
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

7292 (
GLAPIENTRY
 * 
	tPFNGLSCISSORINDEXEDVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 * 
	tv
);

7293 (
GLAPIENTRY
 * 
	tPFNGLVIEWPORTARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 * 
	tv
);

7294 (
GLAPIENTRY
 * 
	tPFNGLVIEWPORTINDEXEDFPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tw
, GLÊﬂà
	th
);

7295 (
GLAPIENTRY
 * 
	tPFNGLVIEWPORTINDEXEDFVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 * 
	tv
);

7297 
	#glDïthR™geAºayv
 
	`GLEW_GET_FUN
(
__gÀwDïthR™geAºayv
)

	)

7298 
	#glDïthR™geIndexed
 
	`GLEW_GET_FUN
(
__gÀwDïthR™geIndexed
)

	)

7299 
	#glGëDoubÀi_v
 
	`GLEW_GET_FUN
(
__gÀwGëDoubÀi_v
)

	)

7300 
	#glGëFlﬂti_v
 
	`GLEW_GET_FUN
(
__gÀwGëFlﬂti_v
)

	)

7301 
	#glSciss‹Aºayv
 
	`GLEW_GET_FUN
(
__gÀwSciss‹Aºayv
)

	)

7302 
	#glSciss‹Indexed
 
	`GLEW_GET_FUN
(
__gÀwSciss‹Indexed
)

	)

7303 
	#glSciss‹Indexedv
 
	`GLEW_GET_FUN
(
__gÀwSciss‹Indexedv
)

	)

7304 
	#glVõwp‹tAºayv
 
	`GLEW_GET_FUN
(
__gÀwVõwp‹tAºayv
)

	)

7305 
	#glVõwp‹tIndexedf
 
	`GLEW_GET_FUN
(
__gÀwVõwp‹tIndexedf
)

	)

7306 
	#glVõwp‹tIndexedfv
 
	`GLEW_GET_FUN
(
__gÀwVõwp‹tIndexedfv
)

	)

7308 
	#GLEW_ARB_võwp‹t_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_ARB_võwp‹t_¨øy
)

	)

7314 #i‚de‡
GL_ARB_wödow_pos


7315 
	#GL_ARB_wödow_pos
 1

	)

7317 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7318 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
* 
	tp
);

7319 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7320 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tp
);

7321 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

7322 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
* 
	tp
);

7323 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

7324 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
* 
	tp
);

7325 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7326 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
* 
	tp
);

7327 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7328 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tp
);

7329 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

7330 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
* 
	tp
);

7331 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7332 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
* 
	tp
);

7334 
	#glWödowPos2dARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2dARB
)

	)

7335 
	#glWödowPos2dvARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2dvARB
)

	)

7336 
	#glWödowPos2fARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2fARB
)

	)

7337 
	#glWödowPos2fvARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2fvARB
)

	)

7338 
	#glWödowPos2iARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2iARB
)

	)

7339 
	#glWödowPos2ivARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2ivARB
)

	)

7340 
	#glWödowPos2sARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2sARB
)

	)

7341 
	#glWödowPos2svARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2svARB
)

	)

7342 
	#glWödowPos3dARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3dARB
)

	)

7343 
	#glWödowPos3dvARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3dvARB
)

	)

7344 
	#glWödowPos3fARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3fARB
)

	)

7345 
	#glWödowPos3fvARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3fvARB
)

	)

7346 
	#glWödowPos3iARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3iARB
)

	)

7347 
	#glWödowPos3ivARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3ivARB
)

	)

7348 
	#glWödowPos3sARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3sARB
)

	)

7349 
	#glWödowPos3svARB
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3svARB
)

	)

7351 
	#GLEW_ARB_wödow_pos
 
	`GLEW_GET_VAR
(
__GLEW_ARB_wödow_pos
)

	)

7357 #i‚de‡
GL_ATIX_poöt_•rôes


7358 
	#GL_ATIX_poöt_•rôes
 1

	)

7360 
	#GL_TEXTURE_POINT_MODE_ATIX
 0x60B0

	)

7361 
	#GL_TEXTURE_POINT_ONE_COORD_ATIX
 0x60B1

	)

7362 
	#GL_TEXTURE_POINT_SPRITE_ATIX
 0x60B2

	)

7363 
	#GL_POINT_SPRITE_CULL_MODE_ATIX
 0x60B3

	)

7364 
	#GL_POINT_SPRITE_CULL_CENTER_ATIX
 0x60B4

	)

7365 
	#GL_POINT_SPRITE_CULL_CLIP_ATIX
 0x60B5

	)

7367 
	#GLEW_ATIX_poöt_•rôes
 
	`GLEW_GET_VAR
(
__GLEW_ATIX_poöt_•rôes
)

	)

7373 #i‚de‡
GL_ATIX_ãxtuª_ív_comböe3


7374 
	#GL_ATIX_ãxtuª_ív_comböe3
 1

	)

7376 
	#GL_MODULATE_ADD_ATIX
 0x8744

	)

7377 
	#GL_MODULATE_SIGNED_ADD_ATIX
 0x8745

	)

7378 
	#GL_MODULATE_SUBTRACT_ATIX
 0x8746

	)

7380 
	#GLEW_ATIX_ãxtuª_ív_comböe3
 
	`GLEW_GET_VAR
(
__GLEW_ATIX_ãxtuª_ív_comböe3
)

	)

7386 #i‚de‡
GL_ATIX_ãxtuª_ív_rouã


7387 
	#GL_ATIX_ãxtuª_ív_rouã
 1

	)

7389 
	#GL_SECONDARY_COLOR_ATIX
 0x8747

	)

7390 
	#GL_TEXTURE_OUTPUT_RGB_ATIX
 0x8748

	)

7391 
	#GL_TEXTURE_OUTPUT_ALPHA_ATIX
 0x8749

	)

7393 
	#GLEW_ATIX_ãxtuª_ív_rouã
 
	`GLEW_GET_VAR
(
__GLEW_ATIX_ãxtuª_ív_rouã
)

	)

7399 #i‚de‡
GL_ATIX_vîãx_shadî_ouçut_poöt_size


7400 
	#GL_ATIX_vîãx_shadî_ouçut_poöt_size
 1

	)

7402 
	#GL_OUTPUT_POINT_SIZE_ATIX
 0x610E

	)

7404 
	#GLEW_ATIX_vîãx_shadî_ouçut_poöt_size
 
	`GLEW_GET_VAR
(
__GLEW_ATIX_vîãx_shadî_ouçut_poöt_size
)

	)

7410 #i‚de‡
GL_ATI_døw_buf„rs


7411 
	#GL_ATI_døw_buf„rs
 1

	)

7413 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

7414 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

7415 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

7416 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

7417 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

7418 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

7419 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

7420 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

7421 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

7422 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

7423 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

7424 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

7425 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

7426 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

7427 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

7428 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

7429 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

7431 (
GLAPIENTRY
 * 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
* 
	tbufs
);

7433 
	#glDøwBuf„rsATI
 
	`GLEW_GET_FUN
(
__gÀwDøwBuf„rsATI
)

	)

7435 
	#GLEW_ATI_døw_buf„rs
 
	`GLEW_GET_VAR
(
__GLEW_ATI_døw_buf„rs
)

	)

7441 #i‚de‡
GL_ATI_ñemít_¨øy


7442 
	#GL_ATI_ñemít_¨øy
 1

	)

7444 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

7445 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

7446 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

7448 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

7449 (
GLAPIENTRY
 * 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

7450 (
GLAPIENTRY
 * 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

7452 
	#glDøwEÀmítAºayATI
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítAºayATI
)

	)

7453 
	#glDøwR™geEÀmítAºayATI
 
	`GLEW_GET_FUN
(
__gÀwDøwR™geEÀmítAºayATI
)

	)

7454 
	#glEÀmítPoöãrATI
 
	`GLEW_GET_FUN
(
__gÀwEÀmítPoöãrATI
)

	)

7456 
	#GLEW_ATI_ñemít_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ñemít_¨øy
)

	)

7462 #i‚de‡
GL_ATI_ívm≠_bumpm≠


7463 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

7465 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

7466 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

7467 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

7468 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

7469 
	#GL_DUDV_ATI
 0x8779

	)

7470 
	#GL_DU8DV8_ATI
 0x877A

	)

7471 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

7472 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

7474 (
GLAPIENTRY
 * 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

7475 (
GLAPIENTRY
 * 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

7476 (
GLAPIENTRY
 * 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

7477 (
GLAPIENTRY
 * 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

7479 
	#glGëTexBumpP¨amëîfvATI
 
	`GLEW_GET_FUN
(
__gÀwGëTexBumpP¨amëîfvATI
)

	)

7480 
	#glGëTexBumpP¨amëîivATI
 
	`GLEW_GET_FUN
(
__gÀwGëTexBumpP¨amëîivATI
)

	)

7481 
	#glTexBumpP¨amëîfvATI
 
	`GLEW_GET_FUN
(
__gÀwTexBumpP¨amëîfvATI
)

	)

7482 
	#glTexBumpP¨amëîivATI
 
	`GLEW_GET_FUN
(
__gÀwTexBumpP¨amëîivATI
)

	)

7484 
	#GLEW_ATI_ívm≠_bumpm≠
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ívm≠_bumpm≠
)

	)

7490 #i‚de‡
GL_ATI_‰agmít_shadî


7491 
	#GL_ATI_‰agmít_shadî
 1

	)

7493 
	#GL_RED_BIT_ATI
 0x00000001

	)

7494 
	#GL_2X_BIT_ATI
 0x00000001

	)

7495 
	#GL_4X_BIT_ATI
 0x00000002

	)

7496 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

7497 
	#GL_COMP_BIT_ATI
 0x00000002

	)

7498 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

7499 
	#GL_8X_BIT_ATI
 0x00000004

	)

7500 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

7501 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

7502 
	#GL_HALF_BIT_ATI
 0x00000008

	)

7503 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

7504 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

7505 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

7506 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

7507 
	#GL_REG_0_ATI
 0x8921

	)

7508 
	#GL_REG_1_ATI
 0x8922

	)

7509 
	#GL_REG_2_ATI
 0x8923

	)

7510 
	#GL_REG_3_ATI
 0x8924

	)

7511 
	#GL_REG_4_ATI
 0x8925

	)

7512 
	#GL_REG_5_ATI
 0x8926

	)

7513 
	#GL_CON_0_ATI
 0x8941

	)

7514 
	#GL_CON_1_ATI
 0x8942

	)

7515 
	#GL_CON_2_ATI
 0x8943

	)

7516 
	#GL_CON_3_ATI
 0x8944

	)

7517 
	#GL_CON_4_ATI
 0x8945

	)

7518 
	#GL_CON_5_ATI
 0x8946

	)

7519 
	#GL_CON_6_ATI
 0x8947

	)

7520 
	#GL_CON_7_ATI
 0x8948

	)

7521 
	#GL_MOV_ATI
 0x8961

	)

7522 
	#GL_ADD_ATI
 0x8963

	)

7523 
	#GL_MUL_ATI
 0x8964

	)

7524 
	#GL_SUB_ATI
 0x8965

	)

7525 
	#GL_DOT3_ATI
 0x8966

	)

7526 
	#GL_DOT4_ATI
 0x8967

	)

7527 
	#GL_MAD_ATI
 0x8968

	)

7528 
	#GL_LERP_ATI
 0x8969

	)

7529 
	#GL_CND_ATI
 0x896A

	)

7530 
	#GL_CND0_ATI
 0x896B

	)

7531 
	#GL_DOT2_ADD_ATI
 0x896C

	)

7532 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

7533 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

7534 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

7535 
	#GL_NUM_PASSES_ATI
 0x8970

	)

7536 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

7537 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

7538 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

7539 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

7540 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

7541 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

7542 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

7543 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

7544 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

7545 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

7546 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

7548 (
GLAPIENTRY
 * 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

7549 (
GLAPIENTRY
 * 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

7550 (
GLAPIENTRY
 * 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

7551 (
GLAPIENTRY
 * 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

7552 (
GLAPIENTRY
 * 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

7553 (
GLAPIENTRY
 * 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

7554 (
GLAPIENTRY
 * 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

7555 (
GLAPIENTRY
 * 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

7556 (
GLAPIENTRY
 * 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

7557 (
GLAPIENTRY
 * 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

7558 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

7559 (
GLAPIENTRY
 * 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

7560 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

7561 (
GLAPIENTRY
 * 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

7563 
	#glAÕhaFøgmítOp1ATI
 
	`GLEW_GET_FUN
(
__gÀwAÕhaFøgmítOp1ATI
)

	)

7564 
	#glAÕhaFøgmítOp2ATI
 
	`GLEW_GET_FUN
(
__gÀwAÕhaFøgmítOp2ATI
)

	)

7565 
	#glAÕhaFøgmítOp3ATI
 
	`GLEW_GET_FUN
(
__gÀwAÕhaFøgmítOp3ATI
)

	)

7566 
	#glBegöFøgmítShadîATI
 
	`GLEW_GET_FUN
(
__gÀwBegöFøgmítShadîATI
)

	)

7567 
	#glBödFøgmítShadîATI
 
	`GLEW_GET_FUN
(
__gÀwBödFøgmítShadîATI
)

	)

7568 
	#glCﬁ‹FøgmítOp1ATI
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹FøgmítOp1ATI
)

	)

7569 
	#glCﬁ‹FøgmítOp2ATI
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹FøgmítOp2ATI
)

	)

7570 
	#glCﬁ‹FøgmítOp3ATI
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹FøgmítOp3ATI
)

	)

7571 
	#glDñëeFøgmítShadîATI
 
	`GLEW_GET_FUN
(
__gÀwDñëeFøgmítShadîATI
)

	)

7572 
	#glEndFøgmítShadîATI
 
	`GLEW_GET_FUN
(
__gÀwEndFøgmítShadîATI
)

	)

7573 
	#glGíFøgmítShadîsATI
 
	`GLEW_GET_FUN
(
__gÀwGíFøgmítShadîsATI
)

	)

7574 
	#glPassTexCo‹dATI
 
	`GLEW_GET_FUN
(
__gÀwPassTexCo‹dATI
)

	)

7575 
	#glSam∂eM≠ATI
 
	`GLEW_GET_FUN
(
__gÀwSam∂eM≠ATI
)

	)

7576 
	#glSëFøgmítShadîC⁄°™tATI
 
	`GLEW_GET_FUN
(
__gÀwSëFøgmítShadîC⁄°™tATI
)

	)

7578 
	#GLEW_ATI_‰agmít_shadî
 
	`GLEW_GET_VAR
(
__GLEW_ATI_‰agmít_shadî
)

	)

7584 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


7585 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

7587 
	gGLvoid
 * (
	tGLAPIENTRY
 * 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7588 (
GLAPIENTRY
 * 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7590 
	#glM≠Obje˘Buf„rATI
 
	`GLEW_GET_FUN
(
__gÀwM≠Obje˘Buf„rATI
)

	)

7591 
	#glUnm≠Obje˘Buf„rATI
 
	`GLEW_GET_FUN
(
__gÀwUnm≠Obje˘Buf„rATI
)

	)

7593 
	#GLEW_ATI_m≠_obje˘_buf„r
 
	`GLEW_GET_VAR
(
__GLEW_ATI_m≠_obje˘_buf„r
)

	)

7599 #i‚de‡
GL_ATI_memöfo


7600 
	#GL_ATI_memöfo
 1

	)

7602 
	#GL_VBO_FREE_MEMORY_ATI
 0x87FB

	)

7603 
	#GL_TEXTURE_FREE_MEMORY_ATI
 0x87FC

	)

7604 
	#GL_RENDERBUFFER_FREE_MEMORY_ATI
 0x87FD

	)

7606 
	#GLEW_ATI_memöfo
 
	`GLEW_GET_VAR
(
__GLEW_ATI_memöfo
)

	)

7612 #i‚de‡
GL_ATI_≤_åüngÀs


7613 
	#GL_ATI_≤_åüngÀs
 1

	)

7615 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

7616 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

7617 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

7618 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

7619 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

7620 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

7621 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

7622 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

7623 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

7625 (
GLAPIENTRY
 * 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7626 (
GLAPIENTRY
 * 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7628 
	#glPNTrüngÀsfATI
 
	`GLEW_GET_FUN
(
__gÀwPNTrüngÀsfATI
)

	)

7629 
	#glPNTrüngÀsiATI
 
	`GLEW_GET_FUN
(
__gÀwPNTrüngÀsiATI
)

	)

7631 
	#GLEW_ATI_≤_åüngÀs
 
	`GLEW_GET_VAR
(
__GLEW_ATI_≤_åüngÀs
)

	)

7637 #i‚de‡
GL_ATI_£∑øã_°ícû


7638 
	#GL_ATI_£∑øã_°ícû
 1

	)

7640 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

7641 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

7642 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

7643 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

7645 (
GLAPIENTRY
 * 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

7646 (
GLAPIENTRY
 * 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

7648 
	#glSãncûFuncSï¨©eATI
 
	`GLEW_GET_FUN
(
__gÀwSãncûFuncSï¨©eATI
)

	)

7649 
	#glSãncûOpSï¨©eATI
 
	`GLEW_GET_FUN
(
__gÀwSãncûOpSï¨©eATI
)

	)

7651 
	#GLEW_ATI_£∑øã_°ícû
 
	`GLEW_GET_VAR
(
__GLEW_ATI_£∑øã_°ícû
)

	)

7657 #i‚de‡
GL_ATI_shadî_ãxtuª_lod


7658 
	#GL_ATI_shadî_ãxtuª_lod
 1

	)

7660 
	#GLEW_ATI_shadî_ãxtuª_lod
 
	`GLEW_GET_VAR
(
__GLEW_ATI_shadî_ãxtuª_lod
)

	)

7666 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


7667 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

7669 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

7671 
	#GLEW_ATI_ãxt_‰agmít_shadî
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ãxt_‰agmít_shadî
)

	)

7677 #i‚de‡
GL_ATI_ãxtuª_com¥essi⁄_3dc


7678 
	#GL_ATI_ãxtuª_com¥essi⁄_3dc
 1

	)

7680 
	#GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI
 0x8837

	)

7682 
	#GLEW_ATI_ãxtuª_com¥essi⁄_3dc
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ãxtuª_com¥essi⁄_3dc
)

	)

7688 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


7689 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

7691 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

7692 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

7693 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

7695 
	#GLEW_ATI_ãxtuª_ív_comböe3
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ãxtuª_ív_comböe3
)

	)

7701 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


7702 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

7704 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

7705 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

7706 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

7707 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

7708 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

7709 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

7710 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

7711 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

7712 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

7713 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

7714 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

7715 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

7717 
	#GLEW_ATI_ãxtuª_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ãxtuª_Êﬂt
)

	)

7723 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


7724 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

7726 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

7727 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

7729 
	#GLEW_ATI_ãxtuª_múr‹_⁄˚
 
	`GLEW_GET_VAR
(
__GLEW_ATI_ãxtuª_múr‹_⁄˚
)

	)

7735 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


7736 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

7738 
	#GL_STATIC_ATI
 0x8760

	)

7739 
	#GL_DYNAMIC_ATI
 0x8761

	)

7740 
	#GL_PRESERVE_ATI
 0x8762

	)

7741 
	#GL_DISCARD_ATI
 0x8763

	)

7742 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

7743 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

7744 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

7745 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

7747 (
GLAPIENTRY
 * 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

7748 (
GLAPIENTRY
 * 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7749 (
GLAPIENTRY
 * 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7750 (
GLAPIENTRY
 * 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7751 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7752 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7753 (
GLAPIENTRY
 * 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7754 (
GLAPIENTRY
 * 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7755 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

7756 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	tußge
);

7757 (
GLAPIENTRY
 * 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° 
	tGLvoid
 *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

7758 (
GLAPIENTRY
 * 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

7760 
	#glAºayObje˘ATI
 
	`GLEW_GET_FUN
(
__gÀwAºayObje˘ATI
)

	)

7761 
	#glFªeObje˘Buf„rATI
 
	`GLEW_GET_FUN
(
__gÀwFªeObje˘Buf„rATI
)

	)

7762 
	#glGëAºayObje˘fvATI
 
	`GLEW_GET_FUN
(
__gÀwGëAºayObje˘fvATI
)

	)

7763 
	#glGëAºayObje˘ivATI
 
	`GLEW_GET_FUN
(
__gÀwGëAºayObje˘ivATI
)

	)

7764 
	#glGëObje˘Buf„rfvATI
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘Buf„rfvATI
)

	)

7765 
	#glGëObje˘Buf„rivATI
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘Buf„rivATI
)

	)

7766 
	#glGëV¨ü¡AºayObje˘fvATI
 
	`GLEW_GET_FUN
(
__gÀwGëV¨ü¡AºayObje˘fvATI
)

	)

7767 
	#glGëV¨ü¡AºayObje˘ivATI
 
	`GLEW_GET_FUN
(
__gÀwGëV¨ü¡AºayObje˘ivATI
)

	)

7768 
	#glIsObje˘Buf„rATI
 
	`GLEW_GET_FUN
(
__gÀwIsObje˘Buf„rATI
)

	)

7769 
	#glNewObje˘Buf„rATI
 
	`GLEW_GET_FUN
(
__gÀwNewObje˘Buf„rATI
)

	)

7770 
	#glUpd©eObje˘Buf„rATI
 
	`GLEW_GET_FUN
(
__gÀwUpd©eObje˘Buf„rATI
)

	)

7771 
	#glV¨ü¡AºayObje˘ATI
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡AºayObje˘ATI
)

	)

7773 
	#GLEW_ATI_vîãx_¨øy_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ATI_vîãx_¨øy_obje˘
)

	)

7779 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


7780 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

7782 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

7783 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

7784 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

7786 
	#glGëVîãxAâribAºayObje˘fvATI
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribAºayObje˘fvATI
)

	)

7787 
	#glGëVîãxAâribAºayObje˘ivATI
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribAºayObje˘ivATI
)

	)

7788 
	#glVîãxAâribAºayObje˘ATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribAºayObje˘ATI
)

	)

7790 
	#GLEW_ATI_vîãx_©åib_¨øy_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_ATI_vîãx_©åib_¨øy_obje˘
)

	)

7796 #i‚de‡
GL_ATI_vîãx_°ªams


7797 
	#GL_ATI_vîãx_°ªams
 1

	)

7799 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

7800 
	#GL_VERTEX_SOURCE_ATI
 0x876C

	)

7801 
	#GL_VERTEX_STREAM0_ATI
 0x876D

	)

7802 
	#GL_VERTEX_STREAM1_ATI
 0x876E

	)

7803 
	#GL_VERTEX_STREAM2_ATI
 0x876F

	)

7804 
	#GL_VERTEX_STREAM3_ATI
 0x8770

	)

7805 
	#GL_VERTEX_STREAM4_ATI
 0x8771

	)

7806 
	#GL_VERTEX_STREAM5_ATI
 0x8772

	)

7807 
	#GL_VERTEX_STREAM6_ATI
 0x8773

	)

7808 
	#GL_VERTEX_STREAM7_ATI
 0x8774

	)

7810 (
GLAPIENTRY
 * 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

7811 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tx
, GLbyã 
	ty
, GLbyã 
	tz
);

7812 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

7813 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7814 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7815 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7816 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7817 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

7818 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7819 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7820 (
GLAPIENTRY
 * 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7821 (
GLAPIENTRY
 * 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7822 (
GLAPIENTRY
 * 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7823 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

7824 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7825 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

7826 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7827 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

7828 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7829 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

7830 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7831 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7832 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7833 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

7834 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7835 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

7836 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7837 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

7838 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7839 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7840 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7841 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

7842 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7843 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

7844 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7845 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

7846 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7847 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7848 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

7849 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

7850 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

7851 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

7852 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

7853 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

7854 (
GLAPIENTRY
 * 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

7856 
	#glClõ¡A˘iveVîãxSåómATI
 
	`GLEW_GET_FUN
(
__gÀwClõ¡A˘iveVîãxSåómATI
)

	)

7857 
	#glN‹mÆSåóm3bATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3bATI
)

	)

7858 
	#glN‹mÆSåóm3bvATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3bvATI
)

	)

7859 
	#glN‹mÆSåóm3dATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3dATI
)

	)

7860 
	#glN‹mÆSåóm3dvATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3dvATI
)

	)

7861 
	#glN‹mÆSåóm3fATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3fATI
)

	)

7862 
	#glN‹mÆSåóm3fvATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3fvATI
)

	)

7863 
	#glN‹mÆSåóm3iATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3iATI
)

	)

7864 
	#glN‹mÆSåóm3ivATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3ivATI
)

	)

7865 
	#glN‹mÆSåóm3sATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3sATI
)

	)

7866 
	#glN‹mÆSåóm3svATI
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆSåóm3svATI
)

	)

7867 
	#glVîãxBÀndEnvfATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxBÀndEnvfATI
)

	)

7868 
	#glVîãxBÀndEnviATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxBÀndEnviATI
)

	)

7869 
	#glVîãxSåóm1dATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1dATI
)

	)

7870 
	#glVîãxSåóm1dvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1dvATI
)

	)

7871 
	#glVîãxSåóm1fATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1fATI
)

	)

7872 
	#glVîãxSåóm1fvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1fvATI
)

	)

7873 
	#glVîãxSåóm1iATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1iATI
)

	)

7874 
	#glVîãxSåóm1ivATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1ivATI
)

	)

7875 
	#glVîãxSåóm1sATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1sATI
)

	)

7876 
	#glVîãxSåóm1svATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm1svATI
)

	)

7877 
	#glVîãxSåóm2dATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2dATI
)

	)

7878 
	#glVîãxSåóm2dvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2dvATI
)

	)

7879 
	#glVîãxSåóm2fATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2fATI
)

	)

7880 
	#glVîãxSåóm2fvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2fvATI
)

	)

7881 
	#glVîãxSåóm2iATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2iATI
)

	)

7882 
	#glVîãxSåóm2ivATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2ivATI
)

	)

7883 
	#glVîãxSåóm2sATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2sATI
)

	)

7884 
	#glVîãxSåóm2svATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm2svATI
)

	)

7885 
	#glVîãxSåóm3dATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3dATI
)

	)

7886 
	#glVîãxSåóm3dvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3dvATI
)

	)

7887 
	#glVîãxSåóm3fATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3fATI
)

	)

7888 
	#glVîãxSåóm3fvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3fvATI
)

	)

7889 
	#glVîãxSåóm3iATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3iATI
)

	)

7890 
	#glVîãxSåóm3ivATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3ivATI
)

	)

7891 
	#glVîãxSåóm3sATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3sATI
)

	)

7892 
	#glVîãxSåóm3svATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm3svATI
)

	)

7893 
	#glVîãxSåóm4dATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4dATI
)

	)

7894 
	#glVîãxSåóm4dvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4dvATI
)

	)

7895 
	#glVîãxSåóm4fATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4fATI
)

	)

7896 
	#glVîãxSåóm4fvATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4fvATI
)

	)

7897 
	#glVîãxSåóm4iATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4iATI
)

	)

7898 
	#glVîãxSåóm4ivATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4ivATI
)

	)

7899 
	#glVîãxSåóm4sATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4sATI
)

	)

7900 
	#glVîãxSåóm4svATI
 
	`GLEW_GET_FUN
(
__gÀwVîãxSåóm4svATI
)

	)

7902 
	#GLEW_ATI_vîãx_°ªams
 
	`GLEW_GET_VAR
(
__GLEW_ATI_vîãx_°ªams
)

	)

7908 #i‚de‡
GL_EXT_422_pixñs


7909 
	#GL_EXT_422_pixñs
 1

	)

7911 
	#GL_422_EXT
 0x80CC

	)

7912 
	#GL_422_REV_EXT
 0x80CD

	)

7913 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

7914 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

7916 
	#GLEW_EXT_422_pixñs
 
	`GLEW_GET_VAR
(
__GLEW_EXT_422_pixñs
)

	)

7922 #i‚de‡
GL_EXT_Cg_shadî


7923 
	#GL_EXT_Cg_shadî
 1

	)

7925 
	#GL_CG_VERTEX_SHADER_EXT
 0x890E

	)

7926 
	#GL_CG_FRAGMENT_SHADER_EXT
 0x890F

	)

7928 
	#GLEW_EXT_Cg_shadî
 
	`GLEW_GET_VAR
(
__GLEW_EXT_Cg_shadî
)

	)

7934 #i‚de‡
GL_EXT_abgr


7935 
	#GL_EXT_abgr
 1

	)

7937 
	#GL_ABGR_EXT
 0x8000

	)

7939 
	#GLEW_EXT_abgr
 
	`GLEW_GET_VAR
(
__GLEW_EXT_abgr
)

	)

7945 #i‚de‡
GL_EXT_bgø


7946 
	#GL_EXT_bgø
 1

	)

7948 
	#GL_BGR_EXT
 0x80E0

	)

7949 
	#GL_BGRA_EXT
 0x80E1

	)

7951 
	#GLEW_EXT_bgø
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bgø
)

	)

7957 #i‚de‡
GL_EXT_bödabÀ_unif‹m


7958 
	#GL_EXT_bödabÀ_unif‹m
 1

	)

7960 
	#GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
 0x8DE2

	)

7961 
	#GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
 0x8DE3

	)

7962 
	#GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
 0x8DE4

	)

7963 
	#GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
 0x8DED

	)

7964 
	#GL_UNIFORM_BUFFER_EXT
 0x8DEE

	)

7965 
	#GL_UNIFORM_BUFFER_BINDING_EXT
 0x8DEF

	)

7967 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETUNIFORMBUFFERSIZEEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

7968 
GLöçå
 (
	tGLAPIENTRY
 * 
	tPFNGLGETUNIFORMOFFSETEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

7969 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMBUFFEREXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tbuf„r
);

7971 
	#glGëUnif‹mBuf„rSizeEXT
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mBuf„rSizeEXT
)

	)

7972 
	#glGëUnif‹mOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mOff£tEXT
)

	)

7973 
	#glUnif‹mBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mBuf„rEXT
)

	)

7975 
	#GLEW_EXT_bödabÀ_unif‹m
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bödabÀ_unif‹m
)

	)

7981 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


7982 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

7984 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

7985 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

7986 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

7987 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

7988 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

7990 (
GLAPIENTRY
 * 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGL˛ampf
 
	tªd
, GL˛amp‡
	tgªí
, GL˛amp‡
	tblue
, GL˛amp‡
	tÆpha
);

7992 
	#glBÀndCﬁ‹EXT
 
	`GLEW_GET_FUN
(
__gÀwBÀndCﬁ‹EXT
)

	)

7994 
	#GLEW_EXT_bÀnd_cﬁ‹
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bÀnd_cﬁ‹
)

	)

8000 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


8001 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

8003 
	#GL_BLEND_EQUATION_RGB_EXT
 0x8009

	)

8004 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

8006 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

8008 
	#glBÀndEqu©i⁄Sï¨©eEXT
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄Sï¨©eEXT
)

	)

8010 
	#GLEW_EXT_bÀnd_equ©i⁄_£∑øã
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bÀnd_equ©i⁄_£∑øã
)

	)

8016 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


8017 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

8019 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

8020 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

8021 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

8022 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

8024 (
GLAPIENTRY
 * 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

8026 
	#glBÀndFuncSï¨©eEXT
 
	`GLEW_GET_FUN
(
__gÀwBÀndFuncSï¨©eEXT
)

	)

8028 
	#GLEW_EXT_bÀnd_func_£∑øã
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bÀnd_func_£∑øã
)

	)

8034 #i‚de‡
GL_EXT_bÀnd_logic_›


8035 
	#GL_EXT_bÀnd_logic_›
 1

	)

8037 
	#GLEW_EXT_bÀnd_logic_›
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bÀnd_logic_›
)

	)

8043 #i‚de‡
GL_EXT_bÀnd_mömax


8044 
	#GL_EXT_bÀnd_mömax
 1

	)

8046 
	#GL_FUNC_ADD_EXT
 0x8006

	)

8047 
	#GL_MIN_EXT
 0x8007

	)

8048 
	#GL_MAX_EXT
 0x8008

	)

8049 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

8051 (
GLAPIENTRY
 * 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

8053 
	#glBÀndEqu©i⁄EXT
 
	`GLEW_GET_FUN
(
__gÀwBÀndEqu©i⁄EXT
)

	)

8055 
	#GLEW_EXT_bÀnd_mömax
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bÀnd_mömax
)

	)

8061 #i‚de‡
GL_EXT_bÀnd_subåa˘


8062 
	#GL_EXT_bÀnd_subåa˘
 1

	)

8064 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

8065 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

8067 
	#GLEW_EXT_bÀnd_subåa˘
 
	`GLEW_GET_VAR
(
__GLEW_EXT_bÀnd_subåa˘
)

	)

8073 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


8074 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

8076 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

8078 
	#GLEW_EXT_˛ù_vﬁume_höt
 
	`GLEW_GET_VAR
(
__GLEW_EXT_˛ù_vﬁume_höt
)

	)

8084 #i‚de‡
GL_EXT_cmyka


8085 
	#GL_EXT_cmyka
 1

	)

8087 
	#GL_CMYK_EXT
 0x800C

	)

8088 
	#GL_CMYKA_EXT
 0x800D

	)

8089 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

8090 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

8092 
	#GLEW_EXT_cmyka
 
	`GLEW_GET_VAR
(
__GLEW_EXT_cmyka
)

	)

8098 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


8099 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

8101 (
GLAPIENTRY
 * 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

8102 (
GLAPIENTRY
 * 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

8104 
	#glCﬁ‹SubTabÀEXT
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹SubTabÀEXT
)

	)

8105 
	#glC›yCﬁ‹SubTabÀEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yCﬁ‹SubTabÀEXT
)

	)

8107 
	#GLEW_EXT_cﬁ‹_subèbÀ
 
	`GLEW_GET_VAR
(
__GLEW_EXT_cﬁ‹_subèbÀ
)

	)

8113 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


8114 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

8116 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

8117 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

8119 (
GLAPIENTRY
 * 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

8120 (
GLAPIENTRY
 * 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

8122 
	#glLockAºaysEXT
 
	`GLEW_GET_FUN
(
__gÀwLockAºaysEXT
)

	)

8123 
	#glU∆ockAºaysEXT
 
	`GLEW_GET_FUN
(
__gÀwU∆ockAºaysEXT
)

	)

8125 
	#GLEW_EXT_compûed_vîãx_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_EXT_compûed_vîãx_¨øy
)

	)

8131 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


8132 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

8134 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

8135 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

8136 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

8137 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

8138 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

8139 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

8140 
	#GL_REDUCE_EXT
 0x8016

	)

8141 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

8142 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

8143 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

8144 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

8145 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

8146 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

8147 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

8148 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

8149 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

8150 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

8151 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

8152 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

8153 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

8155 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

8156 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	timage
);

8157 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8158 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

8159 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8160 (
GLAPIENTRY
 * 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

8161 (
GLAPIENTRY
 * 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

8162 (
GLAPIENTRY
 * 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8163 (
GLAPIENTRY
 * 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	timage
);

8164 (
GLAPIENTRY
 * 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8165 (
GLAPIENTRY
 * 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8166 (
GLAPIENTRY
 * 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	trow
, GLvoid *
	tcﬁumn
, GLvoid *
	t•™
);

8167 (
GLAPIENTRY
 * 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	trow
, c⁄° GLvoid *
	tcﬁumn
);

8169 
	#glC⁄vﬁuti⁄Fûãr1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄Fûãr1DEXT
)

	)

8170 
	#glC⁄vﬁuti⁄Fûãr2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄Fûãr2DEXT
)

	)

8171 
	#glC⁄vﬁuti⁄P¨amëîfEXT
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîfEXT
)

	)

8172 
	#glC⁄vﬁuti⁄P¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîfvEXT
)

	)

8173 
	#glC⁄vﬁuti⁄P¨amëîiEXT
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîiEXT
)

	)

8174 
	#glC⁄vﬁuti⁄P¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwC⁄vﬁuti⁄P¨amëîivEXT
)

	)

8175 
	#glC›yC⁄vﬁuti⁄Fûãr1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yC⁄vﬁuti⁄Fûãr1DEXT
)

	)

8176 
	#glC›yC⁄vﬁuti⁄Fûãr2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yC⁄vﬁuti⁄Fûãr2DEXT
)

	)

8177 
	#glGëC⁄vﬁuti⁄FûãrEXT
 
	`GLEW_GET_FUN
(
__gÀwGëC⁄vﬁuti⁄FûãrEXT
)

	)

8178 
	#glGëC⁄vﬁuti⁄P¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëC⁄vﬁuti⁄P¨amëîfvEXT
)

	)

8179 
	#glGëC⁄vﬁuti⁄P¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëC⁄vﬁuti⁄P¨amëîivEXT
)

	)

8180 
	#glGëSï¨abÀFûãrEXT
 
	`GLEW_GET_FUN
(
__gÀwGëSï¨abÀFûãrEXT
)

	)

8181 
	#glSï¨abÀFûãr2DEXT
 
	`GLEW_GET_FUN
(
__gÀwSï¨abÀFûãr2DEXT
)

	)

8183 
	#GLEW_EXT_c⁄vﬁuti⁄
 
	`GLEW_GET_VAR
(
__GLEW_EXT_c⁄vﬁuti⁄
)

	)

8189 #i‚de‡
GL_EXT_co‹dö©e_‰ame


8190 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

8192 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

8193 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

8194 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

8195 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

8196 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

8197 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

8198 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

8199 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

8200 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

8201 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

8202 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

8203 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

8204 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

8205 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

8207 (
GLAPIENTRY
 * 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLvoid
 *
	tpoöãr
);

8208 (
GLAPIENTRY
 * 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLvoid
 *
	tpoöãr
);

8210 
	#glBö‹mÆPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwBö‹mÆPoöãrEXT
)

	)

8211 
	#glT™gítPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwT™gítPoöãrEXT
)

	)

8213 
	#GLEW_EXT_co‹dö©e_‰ame
 
	`GLEW_GET_VAR
(
__GLEW_EXT_co‹dö©e_‰ame
)

	)

8219 #i‚de‡
GL_EXT_c›y_ãxtuª


8220 
	#GL_EXT_c›y_ãxtuª
 1

	)

8222 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

8223 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

8224 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

8225 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8226 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8228 
	#glC›yTexImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTexImage1DEXT
)

	)

8229 
	#glC›yTexImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTexImage2DEXT
)

	)

8230 
	#glC›yTexSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTexSubImage1DEXT
)

	)

8231 
	#glC›yTexSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTexSubImage2DEXT
)

	)

8232 
	#glC›yTexSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTexSubImage3DEXT
)

	)

8234 
	#GLEW_EXT_c›y_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_EXT_c›y_ãxtuª
)

	)

8240 #i‚de‡
GL_EXT_cuŒ_vîãx


8241 
	#GL_EXT_cuŒ_vîãx
 1

	)

8243 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

8244 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

8245 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

8247 (
GLAPIENTRY
 * 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

8248 (
GLAPIENTRY
 * 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8250 
	#glCuŒP¨amëîdvEXT
 
	`GLEW_GET_FUN
(
__gÀwCuŒP¨amëîdvEXT
)

	)

8251 
	#glCuŒP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwCuŒP¨amëîfvEXT
)

	)

8253 
	#GLEW_EXT_cuŒ_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_EXT_cuŒ_vîãx
)

	)

8259 #i‚de‡
GL_EXT_debug_m¨kî


8260 
	#GL_EXT_debug_m¨kî
 1

	)

8262 (
GLAPIENTRY
 * 
	tPFNGLINSERTEVENTMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tm¨kî
);

8263 (
GLAPIENTRY
 * 
	tPFNGLPOPGROUPMARKEREXTPROC
) ();

8264 (
GLAPIENTRY
 * 
	tPFNGLPUSHGROUPMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tm¨kî
);

8266 
	#glIn£πEvítM¨kîEXT
 
	`GLEW_GET_FUN
(
__gÀwIn£πEvítM¨kîEXT
)

	)

8267 
	#glP›GroupM¨kîEXT
 
	`GLEW_GET_FUN
(
__gÀwP›GroupM¨kîEXT
)

	)

8268 
	#glPushGroupM¨kîEXT
 
	`GLEW_GET_FUN
(
__gÀwPushGroupM¨kîEXT
)

	)

8270 
	#GLEW_EXT_debug_m¨kî
 
	`GLEW_GET_VAR
(
__GLEW_EXT_debug_m¨kî
)

	)

8276 #i‚de‡
GL_EXT_dïth_bounds_ã°


8277 
	#GL_EXT_dïth_bounds_ã°
 1

	)

8279 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

8280 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

8282 (
GLAPIENTRY
 * 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

8284 
	#glDïthBoundsEXT
 
	`GLEW_GET_FUN
(
__gÀwDïthBoundsEXT
)

	)

8286 
	#GLEW_EXT_dïth_bounds_ã°
 
	`GLEW_GET_VAR
(
__GLEW_EXT_dïth_bounds_ã°
)

	)

8292 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


8293 
	#GL_EXT_dúe˘_°©e_ac˚ss
 1

	)

8295 
	#GL_PROGRAM_MATRIX_EXT
 0x8E2D

	)

8296 
	#GL_TRANSPOSE_PROGRAM_MATRIX_EXT
 0x8E2E

	)

8297 
	#GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
 0x8E2F

	)

8299 (
GLAPIENTRY
 * 
	tPFNGLBINDMULTITEXTUREEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

8300 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

8301 (
GLAPIENTRY
 * 
	tPFNGLCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

8302 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

8303 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

8304 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

8305 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

8306 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

8307 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

8308 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

8309 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

8310 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

8311 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

8312 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

8313 (
GLAPIENTRY
 * 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° 
	tGLvoid
 *
	td©a
);

8314 (
GLAPIENTRY
 * 
	tPFNGLCOPYMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

8315 (
GLAPIENTRY
 * 
	tPFNGLCOPYMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

8316 (
GLAPIENTRY
 * 
	tPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

8317 (
GLAPIENTRY
 * 
	tPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8318 (
GLAPIENTRY
 * 
	tPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8319 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

8320 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

8321 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

8322 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8323 (
GLAPIENTRY
 * 
	tPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8324 (
GLAPIENTRY
 * 
	tPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

8325 (
GLAPIENTRY
 * 
	tPFNGLDISABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

8326 (
GLAPIENTRY
 * 
	tPFNGLDISABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

8327 (
GLAPIENTRY
 * 
	tPFNGLDISABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

8328 (
GLAPIENTRY
 * 
	tPFNGLENABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

8329 (
GLAPIENTRY
 * 
	tPFNGLENABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

8330 (
GLAPIENTRY
 * 
	tPFNGLENABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

8331 (
GLAPIENTRY
 * 
	tPFNGLENABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

8332 (
GLAPIENTRY
 * 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

8333 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

8334 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
* 
	tbufs
);

8335 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERREADBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

8336 (
GLAPIENTRY
 * 
	tPFNGLGENERATEMULTITEXMIPMAPEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
);

8337 (
GLAPIENTRY
 * 
	tPFNGLGENERATETEXTUREMIPMAPEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
);

8338 (
GLAPIENTRY
 * 
	tPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

8339 (
GLAPIENTRY
 * 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, 
	tGLvoid
 *
	timg
);

8340 (
GLAPIENTRY
 * 
	tPFNGLGETDOUBLEINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
* 
	t∑øms
);

8341 (
GLAPIENTRY
 * 
	tPFNGLGETDOUBLEI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
* 
	t∑øms
);

8342 (
GLAPIENTRY
 * 
	tPFNGLGETFLOATINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	t∑øms
);

8343 (
GLAPIENTRY
 * 
	tPFNGLGETFLOATI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	t∑øms
);

8344 (
GLAPIENTRY
 * 
	tPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øm
);

8345 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8346 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8347 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

8348 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8349 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8350 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tpixñs
);

8351 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8352 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöt* 
	t∑øms
);

8353 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8354 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
* 
	t∑øms
);

8355 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8356 (
GLAPIENTRY
 * 
	tPFNGLGETMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8357 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8358 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDBUFFERPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, ** 
	t∑øms
);

8359 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, 
	tGLvoid
 *
	td©a
);

8360 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8361 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
* 
	t∑øms
);

8362 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöt* 
	t∑øms
);

8363 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
* 
	t∑øms
);

8364 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
* 
	t∑øms
);

8365 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLvoid
 *
	t°rög
);

8366 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDPROGRAMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8367 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8368 (
GLAPIENTRY
 * 
	tPFNGLGETPOINTERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLvoid
** 
	t∑øms
);

8369 (
GLAPIENTRY
 * 
	tPFNGLGETPOINTERI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLvoid
** 
	t∑øms
);

8370 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tpixñs
);

8371 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8372 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöt* 
	t∑øms
);

8373 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8374 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, GLuöt* 
	t∑øms
);

8375 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8376 (
GLAPIENTRY
 * 
	tPFNGLGETTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8377 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXARRAYINTEGERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øm
);

8378 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXARRAYINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øm
);

8379 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXARRAYPOINTERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
** 
	t∑øm
);

8380 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXARRAYPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
** 
	t∑øm
);

8381 
	gGLvoid
 * (
	tGLAPIENTRY
 * 
	tPFNGLMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

8382 
	gGLvoid
 * (
	tGLAPIENTRY
 * 
	tPFNGLMAPNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

8383 (
GLAPIENTRY
 * 
	tPFNGLMATRIXFRUSTUMEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLdoubÀ
 
	tl
, GLdoubÀ 
	tr
, GLdoubÀ 
	tb
, GLdoubÀ 
	tt
, GLdoubÀ 
	tn
, GLdoubÀ 
	tf
);

8384 (
GLAPIENTRY
 * 
	tPFNGLMATRIXLOADIDENTITYEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
);

8385 (
GLAPIENTRY
 * 
	tPFNGLMATRIXLOADTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLdoubÀ
* 
	tm
);

8386 (
GLAPIENTRY
 * 
	tPFNGLMATRIXLOADTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
* 
	tm
);

8387 (
GLAPIENTRY
 * 
	tPFNGLMATRIXLOADDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLdoubÀ
* 
	tm
);

8388 (
GLAPIENTRY
 * 
	tPFNGLMATRIXLOADFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
* 
	tm
);

8389 (
GLAPIENTRY
 * 
	tPFNGLMATRIXMULTTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLdoubÀ
* 
	tm
);

8390 (
GLAPIENTRY
 * 
	tPFNGLMATRIXMULTTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
* 
	tm
);

8391 (
GLAPIENTRY
 * 
	tPFNGLMATRIXMULTDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLdoubÀ
* 
	tm
);

8392 (
GLAPIENTRY
 * 
	tPFNGLMATRIXMULTFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, c⁄° 
	tGLÊﬂt
* 
	tm
);

8393 (
GLAPIENTRY
 * 
	tPFNGLMATRIXORTHOEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLdoubÀ
 
	tl
, GLdoubÀ 
	tr
, GLdoubÀ 
	tb
, GLdoubÀ 
	tt
, GLdoubÀ 
	tn
, GLdoubÀ 
	tf
);

8394 (
GLAPIENTRY
 * 
	tPFNGLMATRIXPOPEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
);

8395 (
GLAPIENTRY
 * 
	tPFNGLMATRIXPUSHEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
);

8396 (
GLAPIENTRY
 * 
	tPFNGLMATRIXROTATEDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLdoubÀ
 
	t™gÀ
, GLdoubÀ 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8397 (
GLAPIENTRY
 * 
	tPFNGLMATRIXROTATEFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLÊﬂt
 
	t™gÀ
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

8398 (
GLAPIENTRY
 * 
	tPFNGLMATRIXSCALEDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8399 (
GLAPIENTRY
 * 
	tPFNGLMATRIXSCALEFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

8400 (
GLAPIENTRY
 * 
	tPFNGLMATRIXTRANSLATEDEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8401 (
GLAPIENTRY
 * 
	tPFNGLMATRIXTRANSLATEFEXTPROC
Ë(
	tGLíum
 
	tm©rixMode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

8402 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

8403 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

8404 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXENVFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8405 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

8406 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXENVIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8407 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

8408 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXGENDEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 
	t∑øm
);

8409 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

8410 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXGENFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8411 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

8412 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXGENIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8413 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

8414 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8415 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8416 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8417 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

8418 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
* 
	t∑øms
);

8419 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8420 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øm
);

8421 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8422 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øm
);

8423 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

8424 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8425 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8426 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8427 (
GLAPIENTRY
 * 
	tPFNGLNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
, 
	tGLíum
 
	tußge
);

8428 (
GLAPIENTRY
 * 
	tPFNGLNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° 
	tGLvoid
 *
	td©a
);

8429 (
GLAPIENTRY
 * 
	tPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

8430 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

8431 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8432 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8433 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

8434 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8435 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

8436 (
GLAPIENTRY
 * 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

8437 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8438 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

8439 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

8440 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

8441 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8442 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLöt
* 
	t∑øms
);

8443 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

8444 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° GLuöt* 
	t∑øms
);

8445 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

8446 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
* 
	t∑øms
);

8447 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	t∑øms
);

8448 (
GLAPIENTRY
 * 
	tPFNGLNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

8449 (
GLAPIENTRY
 * 
	tPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8450 (
GLAPIENTRY
 * 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8451 (
GLAPIENTRY
 * 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8452 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

8453 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

8454 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

8455 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

8456 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

8457 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

8458 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

8459 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

8460 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

8461 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

8462 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

8463 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

8464 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

8465 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

8466 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

8467 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

8468 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

8469 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

8470 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

8471 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

8472 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

8473 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöt* 
	tvÆue
);

8474 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

8475 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöt* 
	tvÆue
);

8476 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

8477 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

8478 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

8479 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

8480 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

8481 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

8482 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

8483 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

8484 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

8485 (
GLAPIENTRY
 * 
	tPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

8486 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

8487 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8488 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8489 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8490 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

8491 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° GLuöt* 
	t∑øms
);

8492 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREPARAMETERFEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8493 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øm
);

8494 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8495 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øm
);

8496 (
GLAPIENTRY
 * 
	tPFNGLTEXTURERENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	tªndîbuf„r
);

8497 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8498 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8499 (
GLAPIENTRY
 * 
	tPFNGLTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

8500 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLUNMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
);

8501 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8502 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8503 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8504 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYINDEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8505 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8506 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYNORMALOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8507 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8508 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8509 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8510 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8511 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYVERTEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

8513 
	#glBödMu…iTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwBödMu…iTextuªEXT
)

	)

8514 
	#glCheckNamedFømebuf„rSètusEXT
 
	`GLEW_GET_FUN
(
__gÀwCheckNamedFømebuf„rSètusEXT
)

	)

8515 
	#glClõ¡AâribDeÁu…EXT
 
	`GLEW_GET_FUN
(
__gÀwClõ¡AâribDeÁu…EXT
)

	)

8516 
	#glCom¥es£dMu…iTexImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dMu…iTexImage1DEXT
)

	)

8517 
	#glCom¥es£dMu…iTexImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dMu…iTexImage2DEXT
)

	)

8518 
	#glCom¥es£dMu…iTexImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dMu…iTexImage3DEXT
)

	)

8519 
	#glCom¥es£dMu…iTexSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dMu…iTexSubImage1DEXT
)

	)

8520 
	#glCom¥es£dMu…iTexSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dMu…iTexSubImage2DEXT
)

	)

8521 
	#glCom¥es£dMu…iTexSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dMu…iTexSubImage3DEXT
)

	)

8522 
	#glCom¥es£dTextuªImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTextuªImage1DEXT
)

	)

8523 
	#glCom¥es£dTextuªImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTextuªImage2DEXT
)

	)

8524 
	#glCom¥es£dTextuªImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTextuªImage3DEXT
)

	)

8525 
	#glCom¥es£dTextuªSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTextuªSubImage1DEXT
)

	)

8526 
	#glCom¥es£dTextuªSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTextuªSubImage2DEXT
)

	)

8527 
	#glCom¥es£dTextuªSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwCom¥es£dTextuªSubImage3DEXT
)

	)

8528 
	#glC›yMu…iTexImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yMu…iTexImage1DEXT
)

	)

8529 
	#glC›yMu…iTexImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yMu…iTexImage2DEXT
)

	)

8530 
	#glC›yMu…iTexSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yMu…iTexSubImage1DEXT
)

	)

8531 
	#glC›yMu…iTexSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yMu…iTexSubImage2DEXT
)

	)

8532 
	#glC›yMu…iTexSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yMu…iTexSubImage3DEXT
)

	)

8533 
	#glC›yTextuªImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTextuªImage1DEXT
)

	)

8534 
	#glC›yTextuªImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTextuªImage2DEXT
)

	)

8535 
	#glC›yTextuªSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTextuªSubImage1DEXT
)

	)

8536 
	#glC›yTextuªSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTextuªSubImage2DEXT
)

	)

8537 
	#glC›yTextuªSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwC›yTextuªSubImage3DEXT
)

	)

8538 
	#glDißbÀClõ¡SèãIndexedEXT
 
	`GLEW_GET_FUN
(
__gÀwDißbÀClõ¡SèãIndexedEXT
)

	)

8539 
	#glDißbÀClõ¡SèãiEXT
 
	`GLEW_GET_FUN
(
__gÀwDißbÀClõ¡SèãiEXT
)

	)

8540 
	#glDißbÀVîãxAºayAâribEXT
 
	`GLEW_GET_FUN
(
__gÀwDißbÀVîãxAºayAâribEXT
)

	)

8541 
	#glDißbÀVîãxAºayEXT
 
	`GLEW_GET_FUN
(
__gÀwDißbÀVîãxAºayEXT
)

	)

8542 
	#glE«bÀClõ¡SèãIndexedEXT
 
	`GLEW_GET_FUN
(
__gÀwE«bÀClõ¡SèãIndexedEXT
)

	)

8543 
	#glE«bÀClõ¡SèãiEXT
 
	`GLEW_GET_FUN
(
__gÀwE«bÀClõ¡SèãiEXT
)

	)

8544 
	#glE«bÀVîãxAºayAâribEXT
 
	`GLEW_GET_FUN
(
__gÀwE«bÀVîãxAºayAâribEXT
)

	)

8545 
	#glE«bÀVîãxAºayEXT
 
	`GLEW_GET_FUN
(
__gÀwE«bÀVîãxAºayEXT
)

	)

8546 
	#glFlushM≠≥dNamedBuf„rR™geEXT
 
	`GLEW_GET_FUN
(
__gÀwFlushM≠≥dNamedBuf„rR™geEXT
)

	)

8547 
	#glFømebuf„rDøwBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rDøwBuf„rEXT
)

	)

8548 
	#glFømebuf„rDøwBuf„rsEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rDøwBuf„rsEXT
)

	)

8549 
	#glFømebuf„rRódBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rRódBuf„rEXT
)

	)

8550 
	#glGíî©eMu…iTexMùm≠EXT
 
	`GLEW_GET_FUN
(
__gÀwGíî©eMu…iTexMùm≠EXT
)

	)

8551 
	#glGíî©eTextuªMùm≠EXT
 
	`GLEW_GET_FUN
(
__gÀwGíî©eTextuªMùm≠EXT
)

	)

8552 
	#glGëCom¥es£dMu…iTexImageEXT
 
	`GLEW_GET_FUN
(
__gÀwGëCom¥es£dMu…iTexImageEXT
)

	)

8553 
	#glGëCom¥es£dTextuªImageEXT
 
	`GLEW_GET_FUN
(
__gÀwGëCom¥es£dTextuªImageEXT
)

	)

8554 
	#glGëDoubÀIndexedvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëDoubÀIndexedvEXT
)

	)

8555 
	#glGëDoubÀi_vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëDoubÀi_vEXT
)

	)

8556 
	#glGëFlﬂtIndexedvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFlﬂtIndexedvEXT
)

	)

8557 
	#glGëFlﬂti_vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFlﬂti_vEXT
)

	)

8558 
	#glGëFømebuf„rP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFømebuf„rP¨amëîivEXT
)

	)

8559 
	#glGëMu…iTexEnvfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexEnvfvEXT
)

	)

8560 
	#glGëMu…iTexEnvivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexEnvivEXT
)

	)

8561 
	#glGëMu…iTexGídvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexGídvEXT
)

	)

8562 
	#glGëMu…iTexGífvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexGífvEXT
)

	)

8563 
	#glGëMu…iTexGíivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexGíivEXT
)

	)

8564 
	#glGëMu…iTexImageEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexImageEXT
)

	)

8565 
	#glGëMu…iTexLevñP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexLevñP¨amëîfvEXT
)

	)

8566 
	#glGëMu…iTexLevñP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexLevñP¨amëîivEXT
)

	)

8567 
	#glGëMu…iTexP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexP¨amëîIivEXT
)

	)

8568 
	#glGëMu…iTexP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexP¨amëîIuivEXT
)

	)

8569 
	#glGëMu…iTexP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexP¨amëîfvEXT
)

	)

8570 
	#glGëMu…iTexP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMu…iTexP¨amëîivEXT
)

	)

8571 
	#glGëNamedBuf„rP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedBuf„rP¨amëîivEXT
)

	)

8572 
	#glGëNamedBuf„rPoöãrvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedBuf„rPoöãrvEXT
)

	)

8573 
	#glGëNamedBuf„rSubD©aEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedBuf„rSubD©aEXT
)

	)

8574 
	#glGëNamedFømebuf„rAâachmítP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedFømebuf„rAâachmítP¨amëîivEXT
)

	)

8575 
	#glGëNamedProgømLoˇlP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedProgømLoˇlP¨amëîIivEXT
)

	)

8576 
	#glGëNamedProgømLoˇlP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedProgømLoˇlP¨amëîIuivEXT
)

	)

8577 
	#glGëNamedProgømLoˇlP¨amëîdvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedProgømLoˇlP¨amëîdvEXT
)

	)

8578 
	#glGëNamedProgømLoˇlP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedProgømLoˇlP¨amëîfvEXT
)

	)

8579 
	#glGëNamedProgømSåögEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedProgømSåögEXT
)

	)

8580 
	#glGëNamedProgømivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedProgømivEXT
)

	)

8581 
	#glGëNamedRídîbuf„rP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëNamedRídîbuf„rP¨amëîivEXT
)

	)

8582 
	#glGëPoöãrIndexedvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëPoöãrIndexedvEXT
)

	)

8583 
	#glGëPoöãri_vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëPoöãri_vEXT
)

	)

8584 
	#glGëTextuªImageEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªImageEXT
)

	)

8585 
	#glGëTextuªLevñP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªLevñP¨amëîfvEXT
)

	)

8586 
	#glGëTextuªLevñP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªLevñP¨amëîivEXT
)

	)

8587 
	#glGëTextuªP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªP¨amëîIivEXT
)

	)

8588 
	#glGëTextuªP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªP¨amëîIuivEXT
)

	)

8589 
	#glGëTextuªP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªP¨amëîfvEXT
)

	)

8590 
	#glGëTextuªP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªP¨amëîivEXT
)

	)

8591 
	#glGëVîãxAºayI¡egîi_vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAºayI¡egîi_vEXT
)

	)

8592 
	#glGëVîãxAºayI¡egîvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAºayI¡egîvEXT
)

	)

8593 
	#glGëVîãxAºayPoöãri_vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAºayPoöãri_vEXT
)

	)

8594 
	#glGëVîãxAºayPoöãrvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAºayPoöãrvEXT
)

	)

8595 
	#glM≠NamedBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwM≠NamedBuf„rEXT
)

	)

8596 
	#glM≠NamedBuf„rR™geEXT
 
	`GLEW_GET_FUN
(
__gÀwM≠NamedBuf„rR™geEXT
)

	)

8597 
	#glM©rixFru°umEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixFru°umEXT
)

	)

8598 
	#glM©rixLﬂdIdítôyEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixLﬂdIdítôyEXT
)

	)

8599 
	#glM©rixLﬂdTøn•o£dEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixLﬂdTøn•o£dEXT
)

	)

8600 
	#glM©rixLﬂdTøn•o£fEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixLﬂdTøn•o£fEXT
)

	)

8601 
	#glM©rixLﬂddEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixLﬂddEXT
)

	)

8602 
	#glM©rixLﬂdfEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixLﬂdfEXT
)

	)

8603 
	#glM©rixMu…Tøn•o£dEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixMu…Tøn•o£dEXT
)

	)

8604 
	#glM©rixMu…Tøn•o£fEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixMu…Tøn•o£fEXT
)

	)

8605 
	#glM©rixMu…dEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixMu…dEXT
)

	)

8606 
	#glM©rixMu…fEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixMu…fEXT
)

	)

8607 
	#glM©rixOπhoEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixOπhoEXT
)

	)

8608 
	#glM©rixP›EXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixP›EXT
)

	)

8609 
	#glM©rixPushEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixPushEXT
)

	)

8610 
	#glM©rixRŸ©edEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixRŸ©edEXT
)

	)

8611 
	#glM©rixRŸ©efEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixRŸ©efEXT
)

	)

8612 
	#glM©rixSˇÀdEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixSˇÀdEXT
)

	)

8613 
	#glM©rixSˇÀfEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixSˇÀfEXT
)

	)

8614 
	#glM©rixTøn¶©edEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixTøn¶©edEXT
)

	)

8615 
	#glM©rixTøn¶©efEXT
 
	`GLEW_GET_FUN
(
__gÀwM©rixTøn¶©efEXT
)

	)

8616 
	#glMu…iTexBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexBuf„rEXT
)

	)

8617 
	#glMu…iTexCo‹dPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹dPoöãrEXT
)

	)

8618 
	#glMu…iTexEnvfEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexEnvfEXT
)

	)

8619 
	#glMu…iTexEnvfvEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexEnvfvEXT
)

	)

8620 
	#glMu…iTexEnviEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexEnviEXT
)

	)

8621 
	#glMu…iTexEnvivEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexEnvivEXT
)

	)

8622 
	#glMu…iTexGídEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexGídEXT
)

	)

8623 
	#glMu…iTexGídvEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexGídvEXT
)

	)

8624 
	#glMu…iTexGífEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexGífEXT
)

	)

8625 
	#glMu…iTexGífvEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexGífvEXT
)

	)

8626 
	#glMu…iTexGíiEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexGíiEXT
)

	)

8627 
	#glMu…iTexGíivEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexGíivEXT
)

	)

8628 
	#glMu…iTexImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexImage1DEXT
)

	)

8629 
	#glMu…iTexImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexImage2DEXT
)

	)

8630 
	#glMu…iTexImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexImage3DEXT
)

	)

8631 
	#glMu…iTexP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexP¨amëîIivEXT
)

	)

8632 
	#glMu…iTexP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexP¨amëîIuivEXT
)

	)

8633 
	#glMu…iTexP¨amëîfEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexP¨amëîfEXT
)

	)

8634 
	#glMu…iTexP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexP¨amëîfvEXT
)

	)

8635 
	#glMu…iTexP¨amëîiEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexP¨amëîiEXT
)

	)

8636 
	#glMu…iTexP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexP¨amëîivEXT
)

	)

8637 
	#glMu…iTexRídîbuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexRídîbuf„rEXT
)

	)

8638 
	#glMu…iTexSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexSubImage1DEXT
)

	)

8639 
	#glMu…iTexSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexSubImage2DEXT
)

	)

8640 
	#glMu…iTexSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexSubImage3DEXT
)

	)

8641 
	#glNamedBuf„rD©aEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedBuf„rD©aEXT
)

	)

8642 
	#glNamedBuf„rSubD©aEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedBuf„rSubD©aEXT
)

	)

8643 
	#glNamedC›yBuf„rSubD©aEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedC›yBuf„rSubD©aEXT
)

	)

8644 
	#glNamedFømebuf„rRídîbuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rRídîbuf„rEXT
)

	)

8645 
	#glNamedFømebuf„rTextuª1DEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rTextuª1DEXT
)

	)

8646 
	#glNamedFømebuf„rTextuª2DEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rTextuª2DEXT
)

	)

8647 
	#glNamedFømebuf„rTextuª3DEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rTextuª3DEXT
)

	)

8648 
	#glNamedFømebuf„rTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rTextuªEXT
)

	)

8649 
	#glNamedFømebuf„rTextuªFa˚EXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rTextuªFa˚EXT
)

	)

8650 
	#glNamedFømebuf„rTextuªLayîEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedFømebuf„rTextuªLayîEXT
)

	)

8651 
	#glNamedProgømLoˇlP¨amëî4dEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëî4dEXT
)

	)

8652 
	#glNamedProgømLoˇlP¨amëî4dvEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëî4dvEXT
)

	)

8653 
	#glNamedProgømLoˇlP¨amëî4fEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëî4fEXT
)

	)

8654 
	#glNamedProgømLoˇlP¨amëî4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëî4fvEXT
)

	)

8655 
	#glNamedProgømLoˇlP¨amëîI4iEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîI4iEXT
)

	)

8656 
	#glNamedProgømLoˇlP¨amëîI4ivEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîI4ivEXT
)

	)

8657 
	#glNamedProgømLoˇlP¨amëîI4uiEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîI4uiEXT
)

	)

8658 
	#glNamedProgømLoˇlP¨amëîI4uivEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîI4uivEXT
)

	)

8659 
	#glNamedProgømLoˇlP¨amëîs4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîs4fvEXT
)

	)

8660 
	#glNamedProgømLoˇlP¨amëîsI4ivEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîsI4ivEXT
)

	)

8661 
	#glNamedProgømLoˇlP¨amëîsI4uivEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømLoˇlP¨amëîsI4uivEXT
)

	)

8662 
	#glNamedProgømSåögEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedProgømSåögEXT
)

	)

8663 
	#glNamedRídîbuf„rSt‹ageEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedRídîbuf„rSt‹ageEXT
)

	)

8664 
	#glNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
)

	)

8665 
	#glNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
 
	`GLEW_GET_FUN
(
__gÀwNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
)

	)

8666 
	#glProgømUnif‹m1fEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1fEXT
)

	)

8667 
	#glProgømUnif‹m1fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1fvEXT
)

	)

8668 
	#glProgømUnif‹m1iEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1iEXT
)

	)

8669 
	#glProgømUnif‹m1ivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1ivEXT
)

	)

8670 
	#glProgømUnif‹m1uiEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1uiEXT
)

	)

8671 
	#glProgømUnif‹m1uivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1uivEXT
)

	)

8672 
	#glProgømUnif‹m2fEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2fEXT
)

	)

8673 
	#glProgømUnif‹m2fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2fvEXT
)

	)

8674 
	#glProgømUnif‹m2iEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2iEXT
)

	)

8675 
	#glProgømUnif‹m2ivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2ivEXT
)

	)

8676 
	#glProgømUnif‹m2uiEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2uiEXT
)

	)

8677 
	#glProgømUnif‹m2uivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2uivEXT
)

	)

8678 
	#glProgømUnif‹m3fEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3fEXT
)

	)

8679 
	#glProgømUnif‹m3fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3fvEXT
)

	)

8680 
	#glProgømUnif‹m3iEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3iEXT
)

	)

8681 
	#glProgømUnif‹m3ivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3ivEXT
)

	)

8682 
	#glProgømUnif‹m3uiEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3uiEXT
)

	)

8683 
	#glProgømUnif‹m3uivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3uivEXT
)

	)

8684 
	#glProgømUnif‹m4fEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4fEXT
)

	)

8685 
	#glProgømUnif‹m4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4fvEXT
)

	)

8686 
	#glProgømUnif‹m4iEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4iEXT
)

	)

8687 
	#glProgømUnif‹m4ivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4ivEXT
)

	)

8688 
	#glProgømUnif‹m4uiEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4uiEXT
)

	)

8689 
	#glProgømUnif‹m4uivEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4uivEXT
)

	)

8690 
	#glProgømUnif‹mM©rix2fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2fvEXT
)

	)

8691 
	#glProgømUnif‹mM©rix2x3fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x3fvEXT
)

	)

8692 
	#glProgømUnif‹mM©rix2x4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix2x4fvEXT
)

	)

8693 
	#glProgømUnif‹mM©rix3fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3fvEXT
)

	)

8694 
	#glProgømUnif‹mM©rix3x2fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x2fvEXT
)

	)

8695 
	#glProgømUnif‹mM©rix3x4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix3x4fvEXT
)

	)

8696 
	#glProgømUnif‹mM©rix4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4fvEXT
)

	)

8697 
	#glProgømUnif‹mM©rix4x2fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x2fvEXT
)

	)

8698 
	#glProgømUnif‹mM©rix4x3fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mM©rix4x3fvEXT
)

	)

8699 
	#glPushClõ¡AâribDeÁu…EXT
 
	`GLEW_GET_FUN
(
__gÀwPushClõ¡AâribDeÁu…EXT
)

	)

8700 
	#glTextuªBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªBuf„rEXT
)

	)

8701 
	#glTextuªImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage1DEXT
)

	)

8702 
	#glTextuªImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage2DEXT
)

	)

8703 
	#glTextuªImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage3DEXT
)

	)

8704 
	#glTextuªP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªP¨amëîIivEXT
)

	)

8705 
	#glTextuªP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªP¨amëîIuivEXT
)

	)

8706 
	#glTextuªP¨amëîfEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªP¨amëîfEXT
)

	)

8707 
	#glTextuªP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªP¨amëîfvEXT
)

	)

8708 
	#glTextuªP¨amëîiEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªP¨amëîiEXT
)

	)

8709 
	#glTextuªP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªP¨amëîivEXT
)

	)

8710 
	#glTextuªRídîbuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªRídîbuf„rEXT
)

	)

8711 
	#glTextuªSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSubImage1DEXT
)

	)

8712 
	#glTextuªSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSubImage2DEXT
)

	)

8713 
	#glTextuªSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªSubImage3DEXT
)

	)

8714 
	#glUnm≠NamedBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwUnm≠NamedBuf„rEXT
)

	)

8715 
	#glVîãxAºayCﬁ‹Off£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayCﬁ‹Off£tEXT
)

	)

8716 
	#glVîãxAºayEdgeFœgOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayEdgeFœgOff£tEXT
)

	)

8717 
	#glVîãxAºayFogCo‹dOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayFogCo‹dOff£tEXT
)

	)

8718 
	#glVîãxAºayIndexOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayIndexOff£tEXT
)

	)

8719 
	#glVîãxAºayMu…iTexCo‹dOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayMu…iTexCo‹dOff£tEXT
)

	)

8720 
	#glVîãxAºayN‹mÆOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayN‹mÆOff£tEXT
)

	)

8721 
	#glVîãxAºaySec⁄d¨yCﬁ‹Off£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºaySec⁄d¨yCﬁ‹Off£tEXT
)

	)

8722 
	#glVîãxAºayTexCo‹dOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayTexCo‹dOff£tEXT
)

	)

8723 
	#glVîãxAºayVîãxAâribIOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayVîãxAâribIOff£tEXT
)

	)

8724 
	#glVîãxAºayVîãxAâribOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayVîãxAâribOff£tEXT
)

	)

8725 
	#glVîãxAºayVîãxOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayVîãxOff£tEXT
)

	)

8727 
	#GLEW_EXT_dúe˘_°©e_ac˚ss
 
	`GLEW_GET_VAR
(
__GLEW_EXT_dúe˘_°©e_ac˚ss
)

	)

8733 #i‚de‡
GL_EXT_døw_buf„rs2


8734 
	#GL_EXT_døw_buf„rs2
 1

	)

8736 (
GLAPIENTRY
 * 
	tPFNGLCOLORMASKINDEXEDEXTPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

8737 (
GLAPIENTRY
 * 
	tPFNGLDISABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

8738 (
GLAPIENTRY
 * 
	tPFNGLENABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

8739 (
GLAPIENTRY
 * 
	tPFNGLGETBOOLEANINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
* 
	td©a
);

8740 (
GLAPIENTRY
 * 
	tPFNGLGETINTEGERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLöt
* 
	td©a
);

8741 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISENABLEDINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

8743 
	#glCﬁ‹MaskIndexedEXT
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹MaskIndexedEXT
)

	)

8744 
	#glDißbÀIndexedEXT
 
	`GLEW_GET_FUN
(
__gÀwDißbÀIndexedEXT
)

	)

8745 
	#glE«bÀIndexedEXT
 
	`GLEW_GET_FUN
(
__gÀwE«bÀIndexedEXT
)

	)

8746 
	#glGëBoﬁónIndexedvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëBoﬁónIndexedvEXT
)

	)

8747 
	#glGëI¡egîIndexedvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëI¡egîIndexedvEXT
)

	)

8748 
	#glIsE«bÀdIndexedEXT
 
	`GLEW_GET_FUN
(
__gÀwIsE«bÀdIndexedEXT
)

	)

8750 
	#GLEW_EXT_døw_buf„rs2
 
	`GLEW_GET_VAR
(
__GLEW_EXT_døw_buf„rs2
)

	)

8756 #i‚de‡
GL_EXT_døw_ö°™˚d


8757 
	#GL_EXT_døw_ö°™˚d
 1

	)

8759 (
GLAPIENTRY
 * 
	tPFNGLDRAWARRAYSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

8760 (
GLAPIENTRY
 * 
	tPFNGLDRAWELEMENTSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

8762 
	#glDøwAºaysIn°™˚dEXT
 
	`GLEW_GET_FUN
(
__gÀwDøwAºaysIn°™˚dEXT
)

	)

8763 
	#glDøwEÀmítsIn°™˚dEXT
 
	`GLEW_GET_FUN
(
__gÀwDøwEÀmítsIn°™˚dEXT
)

	)

8765 
	#GLEW_EXT_døw_ö°™˚d
 
	`GLEW_GET_VAR
(
__GLEW_EXT_døw_ö°™˚d
)

	)

8771 #i‚de‡
GL_EXT_døw_ønge_ñemíts


8772 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

8774 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

8775 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

8777 (
GLAPIENTRY
 * 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödi˚s
);

8779 
	#glDøwR™geEÀmítsEXT
 
	`GLEW_GET_FUN
(
__gÀwDøwR™geEÀmítsEXT
)

	)

8781 
	#GLEW_EXT_døw_ønge_ñemíts
 
	`GLEW_GET_VAR
(
__GLEW_EXT_døw_ønge_ñemíts
)

	)

8787 #i‚de‡
GL_EXT_fog_co‹d


8788 
	#GL_EXT_fog_co‹d
 1

	)

8790 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

8791 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

8792 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

8793 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

8794 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

8795 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

8796 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

8797 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

8799 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

8800 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

8801 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

8802 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

8803 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

8805 
	#glFogCo‹dPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dPoöãrEXT
)

	)

8806 
	#glFogCo‹ddEXT
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹ddEXT
)

	)

8807 
	#glFogCo‹ddvEXT
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹ddvEXT
)

	)

8808 
	#glFogCo‹dfEXT
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dfEXT
)

	)

8809 
	#glFogCo‹dfvEXT
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dfvEXT
)

	)

8811 
	#GLEW_EXT_fog_co‹d
 
	`GLEW_GET_VAR
(
__GLEW_EXT_fog_co‹d
)

	)

8817 #i‚de‡
GL_EXT_‰agmít_lightög


8818 
	#GL_EXT_‰agmít_lightög
 1

	)

8820 
	#GL_FRAGMENT_LIGHTING_EXT
 0x8400

	)

8821 
	#GL_FRAGMENT_COLOR_MATERIAL_EXT
 0x8401

	)

8822 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_EXT
 0x8402

	)

8823 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_EXT
 0x8403

	)

8824 
	#GL_MAX_FRAGMENT_LIGHTS_EXT
 0x8404

	)

8825 
	#GL_MAX_ACTIVE_LIGHTS_EXT
 0x8405

	)

8826 
	#GL_CURRENT_RASTER_NORMAL_EXT
 0x8406

	)

8827 
	#GL_LIGHT_ENV_MODE_EXT
 0x8407

	)

8828 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_EXT
 0x8408

	)

8829 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_EXT
 0x8409

	)

8830 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_EXT
 0x840A

	)

8831 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_EXT
 0x840B

	)

8832 
	#GL_FRAGMENT_LIGHT0_EXT
 0x840C

	)

8833 
	#GL_FRAGMENT_LIGHT7_EXT
 0x8413

	)

8835 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTCOLORMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

8836 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8837 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8838 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELIEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8839 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELIVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8840 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTFEXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

8841 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTFVEXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8842 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTIEXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8843 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTIVEXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8844 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALFEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 
	t∑øm
);

8845 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALFVEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

8846 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALIEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 
	t∑øm
);

8847 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALIVEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

8848 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTLIGHTFVEXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

8849 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTLIGHTIVEXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8850 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTMATERIALFVEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

8851 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTMATERIALIVEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

8852 (
GLAPIENTRY
 * 
	tPFNGLLIGHTENVIEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

8854 
	#glFøgmítCﬁ‹M©îülEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítCﬁ‹M©îülEXT
)

	)

8855 
	#glFøgmítLightModñfEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñfEXT
)

	)

8856 
	#glFøgmítLightModñfvEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñfvEXT
)

	)

8857 
	#glFøgmítLightModñiEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñiEXT
)

	)

8858 
	#glFøgmítLightModñivEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñivEXT
)

	)

8859 
	#glFøgmítLightfEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightfEXT
)

	)

8860 
	#glFøgmítLightfvEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightfvEXT
)

	)

8861 
	#glFøgmítLightiEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightiEXT
)

	)

8862 
	#glFøgmítLightivEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightivEXT
)

	)

8863 
	#glFøgmítM©îülfEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îülfEXT
)

	)

8864 
	#glFøgmítM©îülfvEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îülfvEXT
)

	)

8865 
	#glFøgmítM©îüliEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îüliEXT
)

	)

8866 
	#glFøgmítM©îülivEXT
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îülivEXT
)

	)

8867 
	#glGëFøgmítLightfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítLightfvEXT
)

	)

8868 
	#glGëFøgmítLightivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítLightivEXT
)

	)

8869 
	#glGëFøgmítM©îülfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítM©îülfvEXT
)

	)

8870 
	#glGëFøgmítM©îülivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítM©îülivEXT
)

	)

8871 
	#glLightEnviEXT
 
	`GLEW_GET_FUN
(
__gÀwLightEnviEXT
)

	)

8873 
	#GLEW_EXT_‰agmít_lightög
 
	`GLEW_GET_VAR
(
__GLEW_EXT_‰agmít_lightög
)

	)

8879 #i‚de‡
GL_EXT_‰amebuf„r_blô


8880 
	#GL_EXT_‰amebuf„r_blô
 1

	)

8882 
	#GL_DRAW_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

8883 
	#GL_READ_FRAMEBUFFER_EXT
 0x8CA8

	)

8884 
	#GL_DRAW_FRAMEBUFFER_EXT
 0x8CA9

	)

8885 
	#GL_READ_FRAMEBUFFER_BINDING_EXT
 0x8CAA

	)

8887 (
GLAPIENTRY
 * 
	tPFNGLBLITFRAMEBUFFEREXTPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

8889 
	#glBlôFømebuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwBlôFømebuf„rEXT
)

	)

8891 
	#GLEW_EXT_‰amebuf„r_blô
 
	`GLEW_GET_VAR
(
__GLEW_EXT_‰amebuf„r_blô
)

	)

8897 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


8898 
	#GL_EXT_‰amebuf„r_mu…ißm∂e
 1

	)

8900 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

8901 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

8902 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

8904 (
GLAPIENTRY
 * 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8906 
	#glRídîbuf„rSt‹ageMu…ißm∂eEXT
 
	`GLEW_GET_FUN
(
__gÀwRídîbuf„rSt‹ageMu…ißm∂eEXT
)

	)

8908 
	#GLEW_EXT_‰amebuf„r_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_EXT_‰amebuf„r_mu…ißm∂e
)

	)

8914 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


8915 
	#GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
 1

	)

8917 
	#GL_SCALED_RESOLVE_FASTEST_EXT
 0x90BA

	)

8918 
	#GL_SCALED_RESOLVE_NICEST_EXT
 0x90BB

	)

8920 
	#GLEW_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
 
	`GLEW_GET_VAR
(
__GLEW_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
)

	)

8926 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


8927 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

8929 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

8930 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

8931 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

8932 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

8933 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

8934 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

8935 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

8936 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

8937 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

8938 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

8939 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

8940 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

8941 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

8942 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

8943 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

8944 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

8945 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

8946 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

8947 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

8948 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

8949 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

8950 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

8951 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

8952 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

8953 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

8954 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

8955 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

8956 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

8957 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

8958 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

8959 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

8960 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

8961 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

8962 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

8963 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

8964 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

8965 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

8966 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

8967 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

8968 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

8969 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

8970 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

8971 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

8972 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

8973 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

8974 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

8975 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

8976 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

8977 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

8978 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

8979 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

8981 (
GLAPIENTRY
 * 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

8982 (
GLAPIENTRY
 * 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

8983 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8984 (
GLAPIENTRY
 * 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t‰amebuf„rs
);

8985 (
GLAPIENTRY
 * 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tªndîbuf„rs
);

8986 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

8987 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8988 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8989 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

8990 (
GLAPIENTRY
 * 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t‰amebuf„rs
);

8991 (
GLAPIENTRY
 * 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tªndîbuf„rs
);

8992 (
GLAPIENTRY
 * 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

8993 (
GLAPIENTRY
 * 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8994 (
GLAPIENTRY
 * 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

8995 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

8996 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

8997 (
GLAPIENTRY
 * 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

8999 
	#glBödFømebuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwBödFømebuf„rEXT
)

	)

9000 
	#glBödRídîbuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwBödRídîbuf„rEXT
)

	)

9001 
	#glCheckFømebuf„rSètusEXT
 
	`GLEW_GET_FUN
(
__gÀwCheckFømebuf„rSètusEXT
)

	)

9002 
	#glDñëeFømebuf„rsEXT
 
	`GLEW_GET_FUN
(
__gÀwDñëeFømebuf„rsEXT
)

	)

9003 
	#glDñëeRídîbuf„rsEXT
 
	`GLEW_GET_FUN
(
__gÀwDñëeRídîbuf„rsEXT
)

	)

9004 
	#glFømebuf„rRídîbuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rRídîbuf„rEXT
)

	)

9005 
	#glFømebuf„rTextuª1DEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª1DEXT
)

	)

9006 
	#glFømebuf„rTextuª2DEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª2DEXT
)

	)

9007 
	#glFømebuf„rTextuª3DEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuª3DEXT
)

	)

9008 
	#glGíFømebuf„rsEXT
 
	`GLEW_GET_FUN
(
__gÀwGíFømebuf„rsEXT
)

	)

9009 
	#glGíRídîbuf„rsEXT
 
	`GLEW_GET_FUN
(
__gÀwGíRídîbuf„rsEXT
)

	)

9010 
	#glGíî©eMùm≠EXT
 
	`GLEW_GET_FUN
(
__gÀwGíî©eMùm≠EXT
)

	)

9011 
	#glGëFømebuf„rAâachmítP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëFømebuf„rAâachmítP¨amëîivEXT
)

	)

9012 
	#glGëRídîbuf„rP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëRídîbuf„rP¨amëîivEXT
)

	)

9013 
	#glIsFømebuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwIsFømebuf„rEXT
)

	)

9014 
	#glIsRídîbuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwIsRídîbuf„rEXT
)

	)

9015 
	#glRídîbuf„rSt‹ageEXT
 
	`GLEW_GET_FUN
(
__gÀwRídîbuf„rSt‹ageEXT
)

	)

9017 
	#GLEW_EXT_‰amebuf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_EXT_‰amebuf„r_obje˘
)

	)

9023 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


9024 
	#GL_EXT_‰amebuf„r_sRGB
 1

	)

9026 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

9027 
	#GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x8DBA

	)

9029 
	#GLEW_EXT_‰amebuf„r_sRGB
 
	`GLEW_GET_VAR
(
__GLEW_EXT_‰amebuf„r_sRGB
)

	)

9035 #i‚de‡
GL_EXT_geomëry_shadî4


9036 
	#GL_EXT_geomëry_shadî4
 1

	)

9038 
	#GL_LINES_ADJACENCY_EXT
 0xA

	)

9039 
	#GL_LINE_STRIP_ADJACENCY_EXT
 0xB

	)

9040 
	#GL_TRIANGLES_ADJACENCY_EXT
 0xC

	)

9041 
	#GL_TRIANGLE_STRIP_ADJACENCY_EXT
 0xD

	)

9042 
	#GL_PROGRAM_POINT_SIZE_EXT
 0x8642

	)

9043 
	#GL_MAX_VARYING_COMPONENTS_EXT
 0x8B4B

	)

9044 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
 0x8C29

	)

9045 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

9046 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
 0x8DA7

	)

9047 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
 0x8DA8

	)

9048 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
 0x8DA9

	)

9049 
	#GL_GEOMETRY_SHADER_EXT
 0x8DD9

	)

9050 
	#GL_GEOMETRY_VERTICES_OUT_EXT
 0x8DDA

	)

9051 
	#GL_GEOMETRY_INPUT_TYPE_EXT
 0x8DDB

	)

9052 
	#GL_GEOMETRY_OUTPUT_TYPE_EXT
 0x8DDC

	)

9053 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
 0x8DDD

	)

9054 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
 0x8DDE

	)

9055 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
 0x8DDF

	)

9056 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
 0x8DE0

	)

9057 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
 0x8DE1

	)

9059 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

9060 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

9061 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

9063 
	#glFømebuf„rTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªEXT
)

	)

9064 
	#glFømebuf„rTextuªFa˚EXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªFa˚EXT
)

	)

9065 
	#glProgømP¨amëîiEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëîiEXT
)

	)

9067 
	#GLEW_EXT_geomëry_shadî4
 
	`GLEW_GET_VAR
(
__GLEW_EXT_geomëry_shadî4
)

	)

9073 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


9074 
	#GL_EXT_gpu_¥ogøm_∑ømëîs
 1

	)

9076 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

9077 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

9079 
	#glProgømEnvP¨amëîs4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîs4fvEXT
)

	)

9080 
	#glProgømLoˇlP¨amëîs4fvEXT
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîs4fvEXT
)

	)

9082 
	#GLEW_EXT_gpu_¥ogøm_∑ømëîs
 
	`GLEW_GET_VAR
(
__GLEW_EXT_gpu_¥ogøm_∑ømëîs
)

	)

9088 #i‚de‡
GL_EXT_gpu_shadî4


9089 
	#GL_EXT_gpu_shadî4
 1

	)

9091 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
 0x88FD

	)

9092 
	#GL_SAMPLER_1D_ARRAY_EXT
 0x8DC0

	)

9093 
	#GL_SAMPLER_2D_ARRAY_EXT
 0x8DC1

	)

9094 
	#GL_SAMPLER_BUFFER_EXT
 0x8DC2

	)

9095 
	#GL_SAMPLER_1D_ARRAY_SHADOW_EXT
 0x8DC3

	)

9096 
	#GL_SAMPLER_2D_ARRAY_SHADOW_EXT
 0x8DC4

	)

9097 
	#GL_SAMPLER_CUBE_SHADOW_EXT
 0x8DC5

	)

9098 
	#GL_UNSIGNED_INT_VEC2_EXT
 0x8DC6

	)

9099 
	#GL_UNSIGNED_INT_VEC3_EXT
 0x8DC7

	)

9100 
	#GL_UNSIGNED_INT_VEC4_EXT
 0x8DC8

	)

9101 
	#GL_INT_SAMPLER_1D_EXT
 0x8DC9

	)

9102 
	#GL_INT_SAMPLER_2D_EXT
 0x8DCA

	)

9103 
	#GL_INT_SAMPLER_3D_EXT
 0x8DCB

	)

9104 
	#GL_INT_SAMPLER_CUBE_EXT
 0x8DCC

	)

9105 
	#GL_INT_SAMPLER_2D_RECT_EXT
 0x8DCD

	)

9106 
	#GL_INT_SAMPLER_1D_ARRAY_EXT
 0x8DCE

	)

9107 
	#GL_INT_SAMPLER_2D_ARRAY_EXT
 0x8DCF

	)

9108 
	#GL_INT_SAMPLER_BUFFER_EXT
 0x8DD0

	)

9109 
	#GL_UNSIGNED_INT_SAMPLER_1D_EXT
 0x8DD1

	)

9110 
	#GL_UNSIGNED_INT_SAMPLER_2D_EXT
 0x8DD2

	)

9111 
	#GL_UNSIGNED_INT_SAMPLER_3D_EXT
 0x8DD3

	)

9112 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
 0x8DD4

	)

9113 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
 0x8DD5

	)

9114 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
 0x8DD6

	)

9115 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
 0x8DD7

	)

9116 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
 0x8DD8

	)

9118 (
GLAPIENTRY
 * 
	tPFNGLBINDFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

9119 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

9120 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

9121 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9122 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIUIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

9123 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

9124 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

9125 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

9126 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

9127 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

9128 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

9129 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

9130 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

9131 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

9132 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

9133 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

9134 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI1UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

9135 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

9136 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

9137 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

9138 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI2UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

9139 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

9140 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

9141 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

9142 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI3UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

9143 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4BVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

9144 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

9145 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

9146 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4SVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

9147 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4UBVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

9148 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

9149 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

9150 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBI4USVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

9151 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBIPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9153 
	#glBödFøgD©aLoˇti⁄EXT
 
	`GLEW_GET_FUN
(
__gÀwBödFøgD©aLoˇti⁄EXT
)

	)

9154 
	#glGëFøgD©aLoˇti⁄EXT
 
	`GLEW_GET_FUN
(
__gÀwGëFøgD©aLoˇti⁄EXT
)

	)

9155 
	#glGëUnif‹muivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹muivEXT
)

	)

9156 
	#glGëVîãxAâribIivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribIivEXT
)

	)

9157 
	#glGëVîãxAâribIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribIuivEXT
)

	)

9158 
	#glUnif‹m1uiEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1uiEXT
)

	)

9159 
	#glUnif‹m1uivEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1uivEXT
)

	)

9160 
	#glUnif‹m2uiEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2uiEXT
)

	)

9161 
	#glUnif‹m2uivEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2uivEXT
)

	)

9162 
	#glUnif‹m3uiEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3uiEXT
)

	)

9163 
	#glUnif‹m3uivEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3uivEXT
)

	)

9164 
	#glUnif‹m4uiEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4uiEXT
)

	)

9165 
	#glUnif‹m4uivEXT
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4uivEXT
)

	)

9166 
	#glVîãxAâribI1iEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1iEXT
)

	)

9167 
	#glVîãxAâribI1ivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1ivEXT
)

	)

9168 
	#glVîãxAâribI1uiEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1uiEXT
)

	)

9169 
	#glVîãxAâribI1uivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI1uivEXT
)

	)

9170 
	#glVîãxAâribI2iEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2iEXT
)

	)

9171 
	#glVîãxAâribI2ivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2ivEXT
)

	)

9172 
	#glVîãxAâribI2uiEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2uiEXT
)

	)

9173 
	#glVîãxAâribI2uivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI2uivEXT
)

	)

9174 
	#glVîãxAâribI3iEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3iEXT
)

	)

9175 
	#glVîãxAâribI3ivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3ivEXT
)

	)

9176 
	#glVîãxAâribI3uiEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3uiEXT
)

	)

9177 
	#glVîãxAâribI3uivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI3uivEXT
)

	)

9178 
	#glVîãxAâribI4bvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4bvEXT
)

	)

9179 
	#glVîãxAâribI4iEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4iEXT
)

	)

9180 
	#glVîãxAâribI4ivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4ivEXT
)

	)

9181 
	#glVîãxAâribI4svEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4svEXT
)

	)

9182 
	#glVîãxAâribI4ubvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4ubvEXT
)

	)

9183 
	#glVîãxAâribI4uiEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4uiEXT
)

	)

9184 
	#glVîãxAâribI4uivEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4uivEXT
)

	)

9185 
	#glVîãxAâribI4usvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribI4usvEXT
)

	)

9186 
	#glVîãxAâribIPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribIPoöãrEXT
)

	)

9188 
	#GLEW_EXT_gpu_shadî4
 
	`GLEW_GET_VAR
(
__GLEW_EXT_gpu_shadî4
)

	)

9194 #i‚de‡
GL_EXT_hi°ogøm


9195 
	#GL_EXT_hi°ogøm
 1

	)

9197 
	#GL_HISTOGRAM_EXT
 0x8024

	)

9198 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

9199 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

9200 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

9201 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

9202 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

9203 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

9204 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

9205 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

9206 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

9207 
	#GL_MINMAX_EXT
 0x802E

	)

9208 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

9209 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

9211 (
GLAPIENTRY
 * 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

9212 (
GLAPIENTRY
 * 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

9213 (
GLAPIENTRY
 * 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

9214 (
GLAPIENTRY
 * 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tvÆues
);

9215 (
GLAPIENTRY
 * 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

9216 (
GLAPIENTRY
 * 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

9217 (
GLAPIENTRY
 * 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

9218 (
GLAPIENTRY
 * 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

9219 (
GLAPIENTRY
 * 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

9220 (
GLAPIENTRY
 * 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

9222 
	#glGëHi°ogømEXT
 
	`GLEW_GET_FUN
(
__gÀwGëHi°ogømEXT
)

	)

9223 
	#glGëHi°ogømP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëHi°ogømP¨amëîfvEXT
)

	)

9224 
	#glGëHi°ogømP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëHi°ogømP¨amëîivEXT
)

	)

9225 
	#glGëMömaxEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMömaxEXT
)

	)

9226 
	#glGëMömaxP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMömaxP¨amëîfvEXT
)

	)

9227 
	#glGëMömaxP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëMömaxP¨amëîivEXT
)

	)

9228 
	#glHi°ogømEXT
 
	`GLEW_GET_FUN
(
__gÀwHi°ogømEXT
)

	)

9229 
	#glMömaxEXT
 
	`GLEW_GET_FUN
(
__gÀwMömaxEXT
)

	)

9230 
	#glRe£tHi°ogømEXT
 
	`GLEW_GET_FUN
(
__gÀwRe£tHi°ogømEXT
)

	)

9231 
	#glRe£tMömaxEXT
 
	`GLEW_GET_FUN
(
__gÀwRe£tMömaxEXT
)

	)

9233 
	#GLEW_EXT_hi°ogøm
 
	`GLEW_GET_VAR
(
__GLEW_EXT_hi°ogøm
)

	)

9239 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


9240 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

9242 
	#GLEW_EXT_ödex_¨øy_f‹m©s
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ödex_¨øy_f‹m©s
)

	)

9248 #i‚de‡
GL_EXT_ödex_func


9249 
	#GL_EXT_ödex_func
 1

	)

9251 (
GLAPIENTRY
 * 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLÊﬂt
 
	tªf
);

9253 
	#glIndexFuncEXT
 
	`GLEW_GET_FUN
(
__gÀwIndexFuncEXT
)

	)

9255 
	#GLEW_EXT_ödex_func
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ödex_func
)

	)

9261 #i‚de‡
GL_EXT_ödex_m©îül


9262 
	#GL_EXT_ödex_m©îül
 1

	)

9264 (
GLAPIENTRY
 * 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

9266 
	#glIndexM©îülEXT
 
	`GLEW_GET_FUN
(
__gÀwIndexM©îülEXT
)

	)

9268 
	#GLEW_EXT_ödex_m©îül
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ödex_m©îül
)

	)

9274 #i‚de‡
GL_EXT_ödex_ãxtuª


9275 
	#GL_EXT_ödex_ãxtuª
 1

	)

9277 
	#GLEW_EXT_ödex_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ödex_ãxtuª
)

	)

9283 #i‚de‡
GL_EXT_light_ãxtuª


9284 
	#GL_EXT_light_ãxtuª
 1

	)

9286 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

9287 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

9288 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

9289 
	#GL_ATTENUATION_EXT
 0x834D

	)

9290 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

9291 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

9292 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

9293 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

9294 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

9296 (
GLAPIENTRY
 * 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

9297 (
GLAPIENTRY
 * 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

9298 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

9300 
	#glAµlyTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwAµlyTextuªEXT
)

	)

9301 
	#glTextuªLightEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªLightEXT
)

	)

9302 
	#glTextuªM©îülEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªM©îülEXT
)

	)

9304 
	#GLEW_EXT_light_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_EXT_light_ãxtuª
)

	)

9310 #i‚de‡
GL_EXT_misc_©åibuã


9311 
	#GL_EXT_misc_©åibuã
 1

	)

9313 
	#GLEW_EXT_misc_©åibuã
 
	`GLEW_GET_VAR
(
__GLEW_EXT_misc_©åibuã
)

	)

9319 #i‚de‡
GL_EXT_mu…i_døw_¨øys


9320 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

9322 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
* 
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

9323 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
* 
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 * c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

9325 
	#glMu…iDøwAºaysEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwAºaysEXT
)

	)

9326 
	#glMu…iDøwEÀmítsEXT
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmítsEXT
)

	)

9328 
	#GLEW_EXT_mu…i_døw_¨øys
 
	`GLEW_GET_VAR
(
__GLEW_EXT_mu…i_døw_¨øys
)

	)

9334 #i‚de‡
GL_EXT_mu…ißm∂e


9335 
	#GL_EXT_mu…ißm∂e
 1

	)

9337 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

9338 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

9339 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

9340 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

9341 
	#GL_1PASS_EXT
 0x80A1

	)

9342 
	#GL_2PASS_0_EXT
 0x80A2

	)

9343 
	#GL_2PASS_1_EXT
 0x80A3

	)

9344 
	#GL_4PASS_0_EXT
 0x80A4

	)

9345 
	#GL_4PASS_1_EXT
 0x80A5

	)

9346 
	#GL_4PASS_2_EXT
 0x80A6

	)

9347 
	#GL_4PASS_3_EXT
 0x80A7

	)

9348 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

9349 
	#GL_SAMPLES_EXT
 0x80A9

	)

9350 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

9351 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

9352 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

9353 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

9355 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

9356 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

9358 
	#glSam∂eMaskEXT
 
	`GLEW_GET_FUN
(
__gÀwSam∂eMaskEXT
)

	)

9359 
	#glSam∂eP©ã∫EXT
 
	`GLEW_GET_FUN
(
__gÀwSam∂eP©ã∫EXT
)

	)

9361 
	#GLEW_EXT_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_EXT_mu…ißm∂e
)

	)

9367 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


9368 
	#GL_EXT_∑cked_dïth_°ícû
 1

	)

9370 
	#GL_DEPTH_STENCIL_EXT
 0x84F9

	)

9371 
	#GL_UNSIGNED_INT_24_8_EXT
 0x84FA

	)

9372 
	#GL_DEPTH24_STENCIL8_EXT
 0x88F0

	)

9373 
	#GL_TEXTURE_STENCIL_SIZE_EXT
 0x88F1

	)

9375 
	#GLEW_EXT_∑cked_dïth_°ícû
 
	`GLEW_GET_VAR
(
__GLEW_EXT_∑cked_dïth_°ícû
)

	)

9381 #i‚de‡
GL_EXT_∑cked_Êﬂt


9382 
	#GL_EXT_∑cked_Êﬂt
 1

	)

9384 
	#GL_R11F_G11F_B10F_EXT
 0x8C3A

	)

9385 
	#GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
 0x8C3B

	)

9386 
	#GL_RGBA_SIGNED_COMPONENTS_EXT
 0x8C3C

	)

9388 
	#GLEW_EXT_∑cked_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_EXT_∑cked_Êﬂt
)

	)

9394 #i‚de‡
GL_EXT_∑cked_pixñs


9395 
	#GL_EXT_∑cked_pixñs
 1

	)

9397 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

9398 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

9399 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

9400 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

9401 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

9403 
	#GLEW_EXT_∑cked_pixñs
 
	`GLEW_GET_VAR
(
__GLEW_EXT_∑cked_pixñs
)

	)

9409 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


9410 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

9412 
	#GL_TEXTURE_1D
 0x0DE0

	)

9413 
	#GL_TEXTURE_2D
 0x0DE1

	)

9414 
	#GL_PROXY_TEXTURE_1D
 0x8063

	)

9415 
	#GL_PROXY_TEXTURE_2D
 0x8064

	)

9416 
	#GL_COLOR_TABLE_FORMAT_EXT
 0x80D8

	)

9417 
	#GL_COLOR_TABLE_WIDTH_EXT
 0x80D9

	)

9418 
	#GL_COLOR_TABLE_RED_SIZE_EXT
 0x80DA

	)

9419 
	#GL_COLOR_TABLE_GREEN_SIZE_EXT
 0x80DB

	)

9420 
	#GL_COLOR_TABLE_BLUE_SIZE_EXT
 0x80DC

	)

9421 
	#GL_COLOR_TABLE_ALPHA_SIZE_EXT
 0x80DD

	)

9422 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_EXT
 0x80DE

	)

9423 
	#GL_COLOR_TABLE_INTENSITY_SIZE_EXT
 0x80DF

	)

9424 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

9425 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

9426 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

9427 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

9428 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

9429 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

9430 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

9431 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

9432 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

9434 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	td©a
);

9435 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	td©a
);

9436 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

9437 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

9439 
	#glCﬁ‹TabÀEXT
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀEXT
)

	)

9440 
	#glGëCﬁ‹TabÀEXT
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀEXT
)

	)

9441 
	#glGëCﬁ‹TabÀP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀP¨amëîfvEXT
)

	)

9442 
	#glGëCﬁ‹TabÀP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀP¨amëîivEXT
)

	)

9444 
	#GLEW_EXT_∑Àâed_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_EXT_∑Àâed_ãxtuª
)

	)

9450 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


9451 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

9453 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

9454 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

9455 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

9456 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

9458 
	#GLEW_EXT_pixñ_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_EXT_pixñ_buf„r_obje˘
)

	)

9464 #i‚de‡
GL_EXT_pixñ_å™sf‹m


9465 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

9467 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

9468 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

9469 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

9470 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

9471 
	#GL_CUBIC_EXT
 0x8334

	)

9472 
	#GL_AVERAGE_EXT
 0x8335

	)

9473 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

9474 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

9475 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

9477 (
GLAPIENTRY
 * 
	tPFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

9478 (
GLAPIENTRY
 * 
	tPFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

9479 (
GLAPIENTRY
 * 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 
	t∑øm
);

9480 (
GLAPIENTRY
 * 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

9481 (
GLAPIENTRY
 * 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 
	t∑øm
);

9482 (
GLAPIENTRY
 * 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

9484 
	#glGëPixñTønsf‹mP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëPixñTønsf‹mP¨amëîfvEXT
)

	)

9485 
	#glGëPixñTønsf‹mP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëPixñTønsf‹mP¨amëîivEXT
)

	)

9486 
	#glPixñTønsf‹mP¨amëîfEXT
 
	`GLEW_GET_FUN
(
__gÀwPixñTønsf‹mP¨amëîfEXT
)

	)

9487 
	#glPixñTønsf‹mP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwPixñTønsf‹mP¨amëîfvEXT
)

	)

9488 
	#glPixñTønsf‹mP¨amëîiEXT
 
	`GLEW_GET_FUN
(
__gÀwPixñTønsf‹mP¨amëîiEXT
)

	)

9489 
	#glPixñTønsf‹mP¨amëîivEXT
 
	`GLEW_GET_FUN
(
__gÀwPixñTønsf‹mP¨amëîivEXT
)

	)

9491 
	#GLEW_EXT_pixñ_å™sf‹m
 
	`GLEW_GET_VAR
(
__GLEW_EXT_pixñ_å™sf‹m
)

	)

9497 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


9498 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

9500 
	#GLEW_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 
	`GLEW_GET_VAR
(
__GLEW_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
)

	)

9506 #i‚de‡
GL_EXT_poöt_∑ømëîs


9507 
	#GL_EXT_poöt_∑ømëîs
 1

	)

9509 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

9510 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

9511 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

9512 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

9514 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9515 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

9517 
	#glPoötP¨amëîfEXT
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîfEXT
)

	)

9518 
	#glPoötP¨amëîfvEXT
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîfvEXT
)

	)

9520 
	#GLEW_EXT_poöt_∑ømëîs
 
	`GLEW_GET_VAR
(
__GLEW_EXT_poöt_∑ømëîs
)

	)

9526 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


9527 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

9529 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

9530 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

9531 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

9533 (
GLAPIENTRY
 * 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

9535 
	#glPﬁyg⁄Off£tEXT
 
	`GLEW_GET_FUN
(
__gÀwPﬁyg⁄Off£tEXT
)

	)

9537 
	#GLEW_EXT_pﬁyg⁄_off£t
 
	`GLEW_GET_VAR
(
__GLEW_EXT_pﬁyg⁄_off£t
)

	)

9543 #i‚de‡
GL_EXT_¥ovokög_vîãx


9544 
	#GL_EXT_¥ovokög_vîãx
 1

	)

9546 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
 0x8E4C

	)

9547 
	#GL_FIRST_VERTEX_CONVENTION_EXT
 0x8E4D

	)

9548 
	#GL_LAST_VERTEX_CONVENTION_EXT
 0x8E4E

	)

9549 
	#GL_PROVOKING_VERTEX_EXT
 0x8E4F

	)

9551 (
GLAPIENTRY
 * 
	tPFNGLPROVOKINGVERTEXEXTPROC
Ë(
	tGLíum
 
	tmode
);

9553 
	#glProvokögVîãxEXT
 
	`GLEW_GET_FUN
(
__gÀwProvokögVîãxEXT
)

	)

9555 
	#GLEW_EXT_¥ovokög_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_EXT_¥ovokög_vîãx
)

	)

9561 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


9562 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

9564 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

9566 
	#GLEW_EXT_ªsˇÀ_n‹mÆ
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ªsˇÀ_n‹mÆ
)

	)

9572 #i‚de‡
GL_EXT_s˚√_m¨kî


9573 
	#GL_EXT_s˚√_m¨kî
 1

	)

9575 (
GLAPIENTRY
 * 
	tPFNGLBEGINSCENEEXTPROC
) ();

9576 (
GLAPIENTRY
 * 
	tPFNGLENDSCENEEXTPROC
) ();

9578 
	#glBegöS˚√EXT
 
	`GLEW_GET_FUN
(
__gÀwBegöS˚√EXT
)

	)

9579 
	#glEndS˚√EXT
 
	`GLEW_GET_FUN
(
__gÀwEndS˚√EXT
)

	)

9581 
	#GLEW_EXT_s˚√_m¨kî
 
	`GLEW_GET_VAR
(
__GLEW_EXT_s˚√_m¨kî
)

	)

9587 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


9588 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

9590 
	#GL_COLOR_SUM_EXT
 0x8458

	)

9591 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

9592 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

9593 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

9594 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

9595 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

9596 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

9598 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

9599 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

9600 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

9601 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

9602 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

9603 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

9604 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

9605 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

9606 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

9607 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

9608 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

9609 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

9610 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

9611 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

9612 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

9613 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

9614 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

9616 
	#glSec⁄d¨yCﬁ‹3bEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3bEXT
)

	)

9617 
	#glSec⁄d¨yCﬁ‹3bvEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3bvEXT
)

	)

9618 
	#glSec⁄d¨yCﬁ‹3dEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3dEXT
)

	)

9619 
	#glSec⁄d¨yCﬁ‹3dvEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3dvEXT
)

	)

9620 
	#glSec⁄d¨yCﬁ‹3fEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3fEXT
)

	)

9621 
	#glSec⁄d¨yCﬁ‹3fvEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3fvEXT
)

	)

9622 
	#glSec⁄d¨yCﬁ‹3iEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3iEXT
)

	)

9623 
	#glSec⁄d¨yCﬁ‹3ivEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3ivEXT
)

	)

9624 
	#glSec⁄d¨yCﬁ‹3sEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3sEXT
)

	)

9625 
	#glSec⁄d¨yCﬁ‹3svEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3svEXT
)

	)

9626 
	#glSec⁄d¨yCﬁ‹3ubEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3ubEXT
)

	)

9627 
	#glSec⁄d¨yCﬁ‹3ubvEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3ubvEXT
)

	)

9628 
	#glSec⁄d¨yCﬁ‹3uiEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3uiEXT
)

	)

9629 
	#glSec⁄d¨yCﬁ‹3uivEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3uivEXT
)

	)

9630 
	#glSec⁄d¨yCﬁ‹3usEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3usEXT
)

	)

9631 
	#glSec⁄d¨yCﬁ‹3usvEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3usvEXT
)

	)

9632 
	#glSec⁄d¨yCﬁ‹PoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹PoöãrEXT
)

	)

9634 
	#GLEW_EXT_£c⁄d¨y_cﬁ‹
 
	`GLEW_GET_VAR
(
__GLEW_EXT_£c⁄d¨y_cﬁ‹
)

	)

9640 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


9641 
	#GL_EXT_£∑øã_shadî_obje˘s
 1

	)

9643 
	#GL_ACTIVE_PROGRAM_EXT
 0x8B8D

	)

9645 (
GLAPIENTRY
 * 
	tPFNGLACTIVEPROGRAMEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

9646 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLCREATESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLch¨
* 
	t°rög
);

9647 (
GLAPIENTRY
 * 
	tPFNGLUSESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	t¥ogøm
);

9649 
	#glA˘iveProgømEXT
 
	`GLEW_GET_FUN
(
__gÀwA˘iveProgømEXT
)

	)

9650 
	#glCª©eShadîProgømEXT
 
	`GLEW_GET_FUN
(
__gÀwCª©eShadîProgømEXT
)

	)

9651 
	#glU£ShadîProgømEXT
 
	`GLEW_GET_FUN
(
__gÀwU£ShadîProgømEXT
)

	)

9653 
	#GLEW_EXT_£∑øã_shadî_obje˘s
 
	`GLEW_GET_VAR
(
__GLEW_EXT_£∑øã_shadî_obje˘s
)

	)

9659 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


9660 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

9662 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

9663 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

9664 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

9666 
	#GLEW_EXT_£∑øã_•ecuœr_cﬁ‹
 
	`GLEW_GET_VAR
(
__GLEW_EXT_£∑øã_•ecuœr_cﬁ‹
)

	)

9672 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


9673 
	#GL_EXT_shadî_image_lﬂd_°‹e
 1

	)

9675 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
 0x00000001

	)

9676 
	#GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
 0x00000002

	)

9677 
	#GL_UNIFORM_BARRIER_BIT_EXT
 0x00000004

	)

9678 
	#GL_TEXTURE_FETCH_BARRIER_BIT_EXT
 0x00000008

	)

9679 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
 0x00000020

	)

9680 
	#GL_COMMAND_BARRIER_BIT_EXT
 0x00000040

	)

9681 
	#GL_PIXEL_BUFFER_BARRIER_BIT_EXT
 0x00000080

	)

9682 
	#GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
 0x00000100

	)

9683 
	#GL_BUFFER_UPDATE_BARRIER_BIT_EXT
 0x00000200

	)

9684 
	#GL_FRAMEBUFFER_BARRIER_BIT_EXT
 0x00000400

	)

9685 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
 0x00000800

	)

9686 
	#GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
 0x00001000

	)

9687 
	#GL_MAX_IMAGE_UNITS_EXT
 0x8F38

	)

9688 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
 0x8F39

	)

9689 
	#GL_IMAGE_BINDING_NAME_EXT
 0x8F3A

	)

9690 
	#GL_IMAGE_BINDING_LEVEL_EXT
 0x8F3B

	)

9691 
	#GL_IMAGE_BINDING_LAYERED_EXT
 0x8F3C

	)

9692 
	#GL_IMAGE_BINDING_LAYER_EXT
 0x8F3D

	)

9693 
	#GL_IMAGE_BINDING_ACCESS_EXT
 0x8F3E

	)

9694 
	#GL_IMAGE_1D_EXT
 0x904C

	)

9695 
	#GL_IMAGE_2D_EXT
 0x904D

	)

9696 
	#GL_IMAGE_3D_EXT
 0x904E

	)

9697 
	#GL_IMAGE_2D_RECT_EXT
 0x904F

	)

9698 
	#GL_IMAGE_CUBE_EXT
 0x9050

	)

9699 
	#GL_IMAGE_BUFFER_EXT
 0x9051

	)

9700 
	#GL_IMAGE_1D_ARRAY_EXT
 0x9052

	)

9701 
	#GL_IMAGE_2D_ARRAY_EXT
 0x9053

	)

9702 
	#GL_IMAGE_CUBE_MAP_ARRAY_EXT
 0x9054

	)

9703 
	#GL_IMAGE_2D_MULTISAMPLE_EXT
 0x9055

	)

9704 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9056

	)

9705 
	#GL_INT_IMAGE_1D_EXT
 0x9057

	)

9706 
	#GL_INT_IMAGE_2D_EXT
 0x9058

	)

9707 
	#GL_INT_IMAGE_3D_EXT
 0x9059

	)

9708 
	#GL_INT_IMAGE_2D_RECT_EXT
 0x905A

	)

9709 
	#GL_INT_IMAGE_CUBE_EXT
 0x905B

	)

9710 
	#GL_INT_IMAGE_BUFFER_EXT
 0x905C

	)

9711 
	#GL_INT_IMAGE_1D_ARRAY_EXT
 0x905D

	)

9712 
	#GL_INT_IMAGE_2D_ARRAY_EXT
 0x905E

	)

9713 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x905F

	)

9714 
	#GL_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x9060

	)

9715 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9061

	)

9716 
	#GL_UNSIGNED_INT_IMAGE_1D_EXT
 0x9062

	)

9717 
	#GL_UNSIGNED_INT_IMAGE_2D_EXT
 0x9063

	)

9718 
	#GL_UNSIGNED_INT_IMAGE_3D_EXT
 0x9064

	)

9719 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
 0x9065

	)

9720 
	#GL_UNSIGNED_INT_IMAGE_CUBE_EXT
 0x9066

	)

9721 
	#GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
 0x9067

	)

9722 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
 0x9068

	)

9723 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
 0x9069

	)

9724 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x906A

	)

9725 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x906B

	)

9726 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x906C

	)

9727 
	#GL_MAX_IMAGE_SAMPLES_EXT
 0x906D

	)

9728 
	#GL_IMAGE_BINDING_FORMAT_EXT
 0x906E

	)

9729 
	#GL_ALL_BARRIER_BITS_EXT
 0xFFFFFFFF

	)

9731 (
GLAPIENTRY
 * 
	tPFNGLBINDIMAGETEXTUREEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLöà
	tf‹m©
);

9732 (
GLAPIENTRY
 * 
	tPFNGLMEMORYBARRIEREXTPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

9734 
	#glBödImageTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwBödImageTextuªEXT
)

	)

9735 
	#glMem‹yB¨rõrEXT
 
	`GLEW_GET_FUN
(
__gÀwMem‹yB¨rõrEXT
)

	)

9737 
	#GLEW_EXT_shadî_image_lﬂd_°‹e
 
	`GLEW_GET_VAR
(
__GLEW_EXT_shadî_image_lﬂd_°‹e
)

	)

9743 #i‚de‡
GL_EXT_shadow_funcs


9744 
	#GL_EXT_shadow_funcs
 1

	)

9746 
	#GLEW_EXT_shadow_funcs
 
	`GLEW_GET_VAR
(
__GLEW_EXT_shadow_funcs
)

	)

9752 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


9753 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

9755 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

9757 
	#GLEW_EXT_sh¨ed_ãxtuª_∑Àâe
 
	`GLEW_GET_VAR
(
__GLEW_EXT_sh¨ed_ãxtuª_∑Àâe
)

	)

9763 #i‚de‡
GL_EXT_°ícû_˛ór_èg


9764 
	#GL_EXT_°ícû_˛ór_èg
 1

	)

9766 
	#GL_STENCIL_TAG_BITS_EXT
 0x88F2

	)

9767 
	#GL_STENCIL_CLEAR_TAG_VALUE_EXT
 0x88F3

	)

9769 
	#GLEW_EXT_°ícû_˛ór_èg
 
	`GLEW_GET_VAR
(
__GLEW_EXT_°ícû_˛ór_èg
)

	)

9775 #i‚de‡
GL_EXT_°ícû_two_side


9776 
	#GL_EXT_°ícû_two_side
 1

	)

9778 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

9779 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

9781 (
GLAPIENTRY
 * 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

9783 
	#glA˘iveSãncûFa˚EXT
 
	`GLEW_GET_FUN
(
__gÀwA˘iveSãncûFa˚EXT
)

	)

9785 
	#GLEW_EXT_°ícû_two_side
 
	`GLEW_GET_VAR
(
__GLEW_EXT_°ícû_two_side
)

	)

9791 #i‚de‡
GL_EXT_°ícû_wøp


9792 
	#GL_EXT_°ícû_wøp
 1

	)

9794 
	#GL_INCR_WRAP_EXT
 0x8507

	)

9795 
	#GL_DECR_WRAP_EXT
 0x8508

	)

9797 
	#GLEW_EXT_°ícû_wøp
 
	`GLEW_GET_VAR
(
__GLEW_EXT_°ícû_wøp
)

	)

9803 #i‚de‡
GL_EXT_subãxtuª


9804 
	#GL_EXT_subãxtuª
 1

	)

9806 (
GLAPIENTRY
 * 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9807 (
GLAPIENTRY
 * 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9808 (
GLAPIENTRY
 * 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9810 
	#glTexSubImage1DEXT
 
	`GLEW_GET_FUN
(
__gÀwTexSubImage1DEXT
)

	)

9811 
	#glTexSubImage2DEXT
 
	`GLEW_GET_FUN
(
__gÀwTexSubImage2DEXT
)

	)

9812 
	#glTexSubImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwTexSubImage3DEXT
)

	)

9814 
	#GLEW_EXT_subãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_EXT_subãxtuª
)

	)

9820 #i‚de‡
GL_EXT_ãxtuª


9821 
	#GL_EXT_ãxtuª
 1

	)

9823 
	#GL_ALPHA4_EXT
 0x803B

	)

9824 
	#GL_ALPHA8_EXT
 0x803C

	)

9825 
	#GL_ALPHA12_EXT
 0x803D

	)

9826 
	#GL_ALPHA16_EXT
 0x803E

	)

9827 
	#GL_LUMINANCE4_EXT
 0x803F

	)

9828 
	#GL_LUMINANCE8_EXT
 0x8040

	)

9829 
	#GL_LUMINANCE12_EXT
 0x8041

	)

9830 
	#GL_LUMINANCE16_EXT
 0x8042

	)

9831 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

9832 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

9833 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

9834 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

9835 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

9836 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

9837 
	#GL_INTENSITY_EXT
 0x8049

	)

9838 
	#GL_INTENSITY4_EXT
 0x804A

	)

9839 
	#GL_INTENSITY8_EXT
 0x804B

	)

9840 
	#GL_INTENSITY12_EXT
 0x804C

	)

9841 
	#GL_INTENSITY16_EXT
 0x804D

	)

9842 
	#GL_RGB2_EXT
 0x804E

	)

9843 
	#GL_RGB4_EXT
 0x804F

	)

9844 
	#GL_RGB5_EXT
 0x8050

	)

9845 
	#GL_RGB8_EXT
 0x8051

	)

9846 
	#GL_RGB10_EXT
 0x8052

	)

9847 
	#GL_RGB12_EXT
 0x8053

	)

9848 
	#GL_RGB16_EXT
 0x8054

	)

9849 
	#GL_RGBA2_EXT
 0x8055

	)

9850 
	#GL_RGBA4_EXT
 0x8056

	)

9851 
	#GL_RGB5_A1_EXT
 0x8057

	)

9852 
	#GL_RGBA8_EXT
 0x8058

	)

9853 
	#GL_RGB10_A2_EXT
 0x8059

	)

9854 
	#GL_RGBA12_EXT
 0x805A

	)

9855 
	#GL_RGBA16_EXT
 0x805B

	)

9856 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

9857 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

9858 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

9859 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

9860 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

9861 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

9862 
	#GL_REPLACE_EXT
 0x8062

	)

9863 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

9864 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

9866 
	#GLEW_EXT_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª
)

	)

9872 #i‚de‡
GL_EXT_ãxtuª3D


9873 
	#GL_EXT_ãxtuª3D
 1

	)

9875 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

9876 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

9877 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

9878 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

9879 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

9880 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

9881 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

9882 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

9883 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

9885 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

9887 
	#glTexImage3DEXT
 
	`GLEW_GET_FUN
(
__gÀwTexImage3DEXT
)

	)

9889 
	#GLEW_EXT_ãxtuª3D
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª3D
)

	)

9895 #i‚de‡
GL_EXT_ãxtuª_¨øy


9896 
	#GL_EXT_ãxtuª_¨øy
 1

	)

9898 
	#GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
 0x884E

	)

9899 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

9900 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

9901 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

9902 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

9903 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

9904 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

9905 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

9907 (
GLAPIENTRY
 * 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

9909 
	#glFømebuf„rTextuªLayîEXT
 
	`GLEW_GET_FUN
(
__gÀwFømebuf„rTextuªLayîEXT
)

	)

9911 
	#GLEW_EXT_ãxtuª_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_¨øy
)

	)

9917 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


9918 
	#GL_EXT_ãxtuª_buf„r_obje˘
 1

	)

9920 
	#GL_TEXTURE_BUFFER_EXT
 0x8C2A

	)

9921 
	#GL_MAX_TEXTURE_BUFFER_SIZE_EXT
 0x8C2B

	)

9922 
	#GL_TEXTURE_BINDING_BUFFER_EXT
 0x8C2C

	)

9923 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
 0x8C2D

	)

9924 
	#GL_TEXTURE_BUFFER_FORMAT_EXT
 0x8C2E

	)

9926 (
GLAPIENTRY
 * 
	tPFNGLTEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

9928 
	#glTexBuf„rEXT
 
	`GLEW_GET_FUN
(
__gÀwTexBuf„rEXT
)

	)

9930 
	#GLEW_EXT_ãxtuª_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_buf„r_obje˘
)

	)

9936 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_dxt1


9937 
	#GL_EXT_ãxtuª_com¥essi⁄_dxt1
 1

	)

9939 
	#GLEW_EXT_ãxtuª_com¥essi⁄_dxt1
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_com¥essi⁄_dxt1
)

	)

9945 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


9946 
	#GL_EXT_ãxtuª_com¥essi⁄_œtc
 1

	)

9948 
	#GL_COMPRESSED_LUMINANCE_LATC1_EXT
 0x8C70

	)

9949 
	#GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
 0x8C71

	)

9950 
	#GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C72

	)

9951 
	#GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C73

	)

9953 
	#GLEW_EXT_ãxtuª_com¥essi⁄_œtc
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_com¥essi⁄_œtc
)

	)

9959 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


9960 
	#GL_EXT_ãxtuª_com¥essi⁄_rgtc
 1

	)

9962 
	#GL_COMPRESSED_RED_RGTC1_EXT
 0x8DBB

	)

9963 
	#GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
 0x8DBC

	)

9964 
	#GL_COMPRESSED_RED_GREEN_RGTC2_EXT
 0x8DBD

	)

9965 
	#GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
 0x8DBE

	)

9967 
	#GLEW_EXT_ãxtuª_com¥essi⁄_rgtc
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_com¥essi⁄_rgtc
)

	)

9973 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


9974 
	#GL_EXT_ãxtuª_com¥essi⁄_s3tc
 1

	)

9976 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

9977 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

9978 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

9979 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

9981 
	#GLEW_EXT_ãxtuª_com¥essi⁄_s3tc
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_com¥essi⁄_s3tc
)

	)

9987 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


9988 
	#GL_EXT_ãxtuª_cube_m≠
 1

	)

9990 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

9991 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

9992 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

9993 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

9994 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

9995 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

9996 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

9997 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

9998 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

9999 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

10000 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

10001 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

10003 
	#GLEW_EXT_ãxtuª_cube_m≠
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_cube_m≠
)

	)

10009 #i‚de‡
GL_EXT_ãxtuª_edge_˛amp


10010 
	#GL_EXT_ãxtuª_edge_˛amp
 1

	)

10012 
	#GL_CLAMP_TO_EDGE_EXT
 0x812F

	)

10014 
	#GLEW_EXT_ãxtuª_edge_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_edge_˛amp
)

	)

10020 #i‚de‡
GL_EXT_ãxtuª_ív


10021 
	#GL_EXT_ãxtuª_ív
 1

	)

10023 
	#GLEW_EXT_ãxtuª_ív
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_ív
)

	)

10029 #i‚de‡
GL_EXT_ãxtuª_ív_add


10030 
	#GL_EXT_ãxtuª_ív_add
 1

	)

10032 
	#GLEW_EXT_ãxtuª_ív_add
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_ív_add
)

	)

10038 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


10039 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

10041 
	#GL_COMBINE_EXT
 0x8570

	)

10042 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

10043 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

10044 
	#GL_RGB_SCALE_EXT
 0x8573

	)

10045 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

10046 
	#GL_INTERPOLATE_EXT
 0x8575

	)

10047 
	#GL_CONSTANT_EXT
 0x8576

	)

10048 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

10049 
	#GL_PREVIOUS_EXT
 0x8578

	)

10050 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

10051 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

10052 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

10053 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

10054 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

10055 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

10056 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

10057 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

10058 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

10059 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

10060 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

10061 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

10063 
	#GLEW_EXT_ãxtuª_ív_comböe
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_ív_comböe
)

	)

10069 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


10070 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

10072 
	#GL_DOT3_RGB_EXT
 0x8740

	)

10073 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

10075 
	#GLEW_EXT_ãxtuª_ív_dŸ3
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_ív_dŸ3
)

	)

10081 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


10082 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

10084 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

10085 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

10087 
	#GLEW_EXT_ãxtuª_fûãr_™isŸr›ic
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_fûãr_™isŸr›ic
)

	)

10093 #i‚de‡
GL_EXT_ãxtuª_öãgî


10094 
	#GL_EXT_ãxtuª_öãgî
 1

	)

10096 
	#GL_RGBA32UI_EXT
 0x8D70

	)

10097 
	#GL_RGB32UI_EXT
 0x8D71

	)

10098 
	#GL_ALPHA32UI_EXT
 0x8D72

	)

10099 
	#GL_INTENSITY32UI_EXT
 0x8D73

	)

10100 
	#GL_LUMINANCE32UI_EXT
 0x8D74

	)

10101 
	#GL_LUMINANCE_ALPHA32UI_EXT
 0x8D75

	)

10102 
	#GL_RGBA16UI_EXT
 0x8D76

	)

10103 
	#GL_RGB16UI_EXT
 0x8D77

	)

10104 
	#GL_ALPHA16UI_EXT
 0x8D78

	)

10105 
	#GL_INTENSITY16UI_EXT
 0x8D79

	)

10106 
	#GL_LUMINANCE16UI_EXT
 0x8D7A

	)

10107 
	#GL_LUMINANCE_ALPHA16UI_EXT
 0x8D7B

	)

10108 
	#GL_RGBA8UI_EXT
 0x8D7C

	)

10109 
	#GL_RGB8UI_EXT
 0x8D7D

	)

10110 
	#GL_ALPHA8UI_EXT
 0x8D7E

	)

10111 
	#GL_INTENSITY8UI_EXT
 0x8D7F

	)

10112 
	#GL_LUMINANCE8UI_EXT
 0x8D80

	)

10113 
	#GL_LUMINANCE_ALPHA8UI_EXT
 0x8D81

	)

10114 
	#GL_RGBA32I_EXT
 0x8D82

	)

10115 
	#GL_RGB32I_EXT
 0x8D83

	)

10116 
	#GL_ALPHA32I_EXT
 0x8D84

	)

10117 
	#GL_INTENSITY32I_EXT
 0x8D85

	)

10118 
	#GL_LUMINANCE32I_EXT
 0x8D86

	)

10119 
	#GL_LUMINANCE_ALPHA32I_EXT
 0x8D87

	)

10120 
	#GL_RGBA16I_EXT
 0x8D88

	)

10121 
	#GL_RGB16I_EXT
 0x8D89

	)

10122 
	#GL_ALPHA16I_EXT
 0x8D8A

	)

10123 
	#GL_INTENSITY16I_EXT
 0x8D8B

	)

10124 
	#GL_LUMINANCE16I_EXT
 0x8D8C

	)

10125 
	#GL_LUMINANCE_ALPHA16I_EXT
 0x8D8D

	)

10126 
	#GL_RGBA8I_EXT
 0x8D8E

	)

10127 
	#GL_RGB8I_EXT
 0x8D8F

	)

10128 
	#GL_ALPHA8I_EXT
 0x8D90

	)

10129 
	#GL_INTENSITY8I_EXT
 0x8D91

	)

10130 
	#GL_LUMINANCE8I_EXT
 0x8D92

	)

10131 
	#GL_LUMINANCE_ALPHA8I_EXT
 0x8D93

	)

10132 
	#GL_RED_INTEGER_EXT
 0x8D94

	)

10133 
	#GL_GREEN_INTEGER_EXT
 0x8D95

	)

10134 
	#GL_BLUE_INTEGER_EXT
 0x8D96

	)

10135 
	#GL_ALPHA_INTEGER_EXT
 0x8D97

	)

10136 
	#GL_RGB_INTEGER_EXT
 0x8D98

	)

10137 
	#GL_RGBA_INTEGER_EXT
 0x8D99

	)

10138 
	#GL_BGR_INTEGER_EXT
 0x8D9A

	)

10139 
	#GL_BGRA_INTEGER_EXT
 0x8D9B

	)

10140 
	#GL_LUMINANCE_INTEGER_EXT
 0x8D9C

	)

10141 
	#GL_LUMINANCE_ALPHA_INTEGER_EXT
 0x8D9D

	)

10142 
	#GL_RGBA_INTEGER_MODE_EXT
 0x8D9E

	)

10144 (
GLAPIENTRY
 * 
	tPFNGLCLEARCOLORIIEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
, GLöà
	tÆpha
);

10145 (
GLAPIENTRY
 * 
	tPFNGLCLEARCOLORIUIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
, GLuöà
	tÆpha
);

10146 (
GLAPIENTRY
 * 
	tPFNGLGETTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10147 (
GLAPIENTRY
 * 
	tPFNGLGETTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

10148 (
GLAPIENTRY
 * 
	tPFNGLTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10149 (
GLAPIENTRY
 * 
	tPFNGLTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

10151 
	#glCÀ¨Cﬁ‹IiEXT
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Cﬁ‹IiEXT
)

	)

10152 
	#glCÀ¨Cﬁ‹IuiEXT
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Cﬁ‹IuiEXT
)

	)

10153 
	#glGëTexP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTexP¨amëîIivEXT
)

	)

10154 
	#glGëTexP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTexP¨amëîIuivEXT
)

	)

10155 
	#glTexP¨amëîIivEXT
 
	`GLEW_GET_FUN
(
__gÀwTexP¨amëîIivEXT
)

	)

10156 
	#glTexP¨amëîIuivEXT
 
	`GLEW_GET_FUN
(
__gÀwTexP¨amëîIuivEXT
)

	)

10158 
	#GLEW_EXT_ãxtuª_öãgî
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_öãgî
)

	)

10164 #i‚de‡
GL_EXT_ãxtuª_lod_büs


10165 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

10167 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

10168 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

10169 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

10171 
	#GLEW_EXT_ãxtuª_lod_büs
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_lod_büs
)

	)

10177 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


10178 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

10180 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

10181 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

10182 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

10184 
	#GLEW_EXT_ãxtuª_múr‹_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_múr‹_˛amp
)

	)

10190 #i‚de‡
GL_EXT_ãxtuª_obje˘


10191 
	#GL_EXT_ãxtuª_obje˘
 1

	)

10193 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

10194 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

10195 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

10196 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

10197 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

10199 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tãxtuªs
, 
	tGLboﬁón
* 
	tªsidí˚s
);

10200 (
GLAPIENTRY
 * 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

10201 (
GLAPIENTRY
 * 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tãxtuªs
);

10202 (
GLAPIENTRY
 * 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tãxtuªs
);

10203 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

10204 (
GLAPIENTRY
 * 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tãxtuªs
, c⁄° 
	tGL˛ampf
* 
	t¥i‹ôõs
);

10206 
	#glAªTextuªsResidítEXT
 
	`GLEW_GET_FUN
(
__gÀwAªTextuªsResidítEXT
)

	)

10207 
	#glBödTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwBödTextuªEXT
)

	)

10208 
	#glDñëeTextuªsEXT
 
	`GLEW_GET_FUN
(
__gÀwDñëeTextuªsEXT
)

	)

10209 
	#glGíTextuªsEXT
 
	`GLEW_GET_FUN
(
__gÀwGíTextuªsEXT
)

	)

10210 
	#glIsTextuªEXT
 
	`GLEW_GET_FUN
(
__gÀwIsTextuªEXT
)

	)

10211 
	#glPri‹ôizeTextuªsEXT
 
	`GLEW_GET_FUN
(
__gÀwPri‹ôizeTextuªsEXT
)

	)

10213 
	#GLEW_EXT_ãxtuª_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_obje˘
)

	)

10219 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


10220 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

10222 
	#GL_PERTURB_EXT
 0x85AE

	)

10223 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

10225 (
GLAPIENTRY
 * 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

10227 
	#glTextuªN‹mÆEXT
 
	`GLEW_GET_FUN
(
__gÀwTextuªN‹mÆEXT
)

	)

10229 
	#GLEW_EXT_ãxtuª_≥πurb_n‹mÆ
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_≥πurb_n‹mÆ
)

	)

10235 #i‚de‡
GL_EXT_ãxtuª_ª˘™gÀ


10236 
	#GL_EXT_ãxtuª_ª˘™gÀ
 1

	)

10238 
	#GL_TEXTURE_RECTANGLE_EXT
 0x84F5

	)

10239 
	#GL_TEXTURE_BINDING_RECTANGLE_EXT
 0x84F6

	)

10240 
	#GL_PROXY_TEXTURE_RECTANGLE_EXT
 0x84F7

	)

10241 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_EXT
 0x84F8

	)

10243 
	#GLEW_EXT_ãxtuª_ª˘™gÀ
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_ª˘™gÀ
)

	)

10249 #i‚de‡
GL_EXT_ãxtuª_sRGB


10250 
	#GL_EXT_ãxtuª_sRGB
 1

	)

10252 
	#GL_SRGB_EXT
 0x8C40

	)

10253 
	#GL_SRGB8_EXT
 0x8C41

	)

10254 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

10255 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

10256 
	#GL_SLUMINANCE_ALPHA_EXT
 0x8C44

	)

10257 
	#GL_SLUMINANCE8_ALPHA8_EXT
 0x8C45

	)

10258 
	#GL_SLUMINANCE_EXT
 0x8C46

	)

10259 
	#GL_SLUMINANCE8_EXT
 0x8C47

	)

10260 
	#GL_COMPRESSED_SRGB_EXT
 0x8C48

	)

10261 
	#GL_COMPRESSED_SRGB_ALPHA_EXT
 0x8C49

	)

10262 
	#GL_COMPRESSED_SLUMINANCE_EXT
 0x8C4A

	)

10263 
	#GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
 0x8C4B

	)

10264 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
 0x8C4C

	)

10265 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
 0x8C4D

	)

10266 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
 0x8C4E

	)

10267 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
 0x8C4F

	)

10269 
	#GLEW_EXT_ãxtuª_sRGB
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_sRGB
)

	)

10275 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


10276 
	#GL_EXT_ãxtuª_sRGB_decode
 1

	)

10278 
	#GL_TEXTURE_SRGB_DECODE_EXT
 0x8A48

	)

10279 
	#GL_DECODE_EXT
 0x8A49

	)

10280 
	#GL_SKIP_DECODE_EXT
 0x8A4A

	)

10282 
	#GLEW_EXT_ãxtuª_sRGB_decode
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_sRGB_decode
)

	)

10288 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


10289 
	#GL_EXT_ãxtuª_sh¨ed_exp⁄ít
 1

	)

10291 
	#GL_RGB9_E5_EXT
 0x8C3D

	)

10292 
	#GL_UNSIGNED_INT_5_9_9_9_REV_EXT
 0x8C3E

	)

10293 
	#GL_TEXTURE_SHARED_SIZE_EXT
 0x8C3F

	)

10295 
	#GLEW_EXT_ãxtuª_sh¨ed_exp⁄ít
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_sh¨ed_exp⁄ít
)

	)

10301 #i‚de‡
GL_EXT_ãxtuª_¢‹m


10302 
	#GL_EXT_ãxtuª_¢‹m
 1

	)

10304 
	#GL_RED_SNORM
 0x8F90

	)

10305 
	#GL_RG_SNORM
 0x8F91

	)

10306 
	#GL_RGB_SNORM
 0x8F92

	)

10307 
	#GL_RGBA_SNORM
 0x8F93

	)

10308 
	#GL_R8_SNORM
 0x8F94

	)

10309 
	#GL_RG8_SNORM
 0x8F95

	)

10310 
	#GL_RGB8_SNORM
 0x8F96

	)

10311 
	#GL_RGBA8_SNORM
 0x8F97

	)

10312 
	#GL_R16_SNORM
 0x8F98

	)

10313 
	#GL_RG16_SNORM
 0x8F99

	)

10314 
	#GL_RGB16_SNORM
 0x8F9A

	)

10315 
	#GL_RGBA16_SNORM
 0x8F9B

	)

10316 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

10317 
	#GL_ALPHA_SNORM
 0x9010

	)

10318 
	#GL_LUMINANCE_SNORM
 0x9011

	)

10319 
	#GL_LUMINANCE_ALPHA_SNORM
 0x9012

	)

10320 
	#GL_INTENSITY_SNORM
 0x9013

	)

10321 
	#GL_ALPHA8_SNORM
 0x9014

	)

10322 
	#GL_LUMINANCE8_SNORM
 0x9015

	)

10323 
	#GL_LUMINANCE8_ALPHA8_SNORM
 0x9016

	)

10324 
	#GL_INTENSITY8_SNORM
 0x9017

	)

10325 
	#GL_ALPHA16_SNORM
 0x9018

	)

10326 
	#GL_LUMINANCE16_SNORM
 0x9019

	)

10327 
	#GL_LUMINANCE16_ALPHA16_SNORM
 0x901A

	)

10328 
	#GL_INTENSITY16_SNORM
 0x901B

	)

10330 
	#GLEW_EXT_ãxtuª_¢‹m
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_¢‹m
)

	)

10336 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


10337 
	#GL_EXT_ãxtuª_swizzÀ
 1

	)

10339 
	#GL_TEXTURE_SWIZZLE_R_EXT
 0x8E42

	)

10340 
	#GL_TEXTURE_SWIZZLE_G_EXT
 0x8E43

	)

10341 
	#GL_TEXTURE_SWIZZLE_B_EXT
 0x8E44

	)

10342 
	#GL_TEXTURE_SWIZZLE_A_EXT
 0x8E45

	)

10343 
	#GL_TEXTURE_SWIZZLE_RGBA_EXT
 0x8E46

	)

10345 
	#GLEW_EXT_ãxtuª_swizzÀ
 
	`GLEW_GET_VAR
(
__GLEW_EXT_ãxtuª_swizzÀ
)

	)

10351 #i‚de‡
GL_EXT_timî_quîy


10352 
	#GL_EXT_timî_quîy
 1

	)

10354 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

10356 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

10357 (
GLAPIENTRY
 * 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

10359 
	#glGëQuîyObje˘i64vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘i64vEXT
)

	)

10360 
	#glGëQuîyObje˘ui64vEXT
 
	`GLEW_GET_FUN
(
__gÀwGëQuîyObje˘ui64vEXT
)

	)

10362 
	#GLEW_EXT_timî_quîy
 
	`GLEW_GET_VAR
(
__GLEW_EXT_timî_quîy
)

	)

10368 #i‚de‡
GL_EXT_å™sf‹m_„edback


10369 
	#GL_EXT_å™sf‹m_„edback
 1

	)

10371 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
 0x8C76

	)

10372 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
 0x8C7F

	)

10373 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
 0x8C80

	)

10374 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
 0x8C83

	)

10375 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
 0x8C84

	)

10376 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
 0x8C85

	)

10377 
	#GL_PRIMITIVES_GENERATED_EXT
 0x8C87

	)

10378 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
 0x8C88

	)

10379 
	#GL_RASTERIZER_DISCARD_EXT
 0x8C89

	)

10380 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
 0x8C8A

	)

10381 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
 0x8C8B

	)

10382 
	#GL_INTERLEAVED_ATTRIBS_EXT
 0x8C8C

	)

10383 
	#GL_SEPARATE_ATTRIBS_EXT
 0x8C8D

	)

10384 
	#GL_TRANSFORM_FEEDBACK_BUFFER_EXT
 0x8C8E

	)

10385 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
 0x8C8F

	)

10387 (
GLAPIENTRY
 * 
	tPFNGLBEGINTRANSFORMFEEDBACKEXTPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

10388 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERBASEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

10389 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFEROFFSETEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

10390 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

10391 (
GLAPIENTRY
 * 
	tPFNGLENDTRANSFORMFEEDBACKEXTPROC
) ();

10392 (
GLAPIENTRY
 * 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

10393 (
GLAPIENTRY
 * 
	tPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 * c⁄°* 
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

10395 
	#glBegöTønsf‹mFìdbackEXT
 
	`GLEW_GET_FUN
(
__gÀwBegöTønsf‹mFìdbackEXT
)

	)

10396 
	#glBödBuf„rBa£EXT
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rBa£EXT
)

	)

10397 
	#glBödBuf„rOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rOff£tEXT
)

	)

10398 
	#glBödBuf„rR™geEXT
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rR™geEXT
)

	)

10399 
	#glEndTønsf‹mFìdbackEXT
 
	`GLEW_GET_FUN
(
__gÀwEndTønsf‹mFìdbackEXT
)

	)

10400 
	#glGëTønsf‹mFìdbackV¨yögEXT
 
	`GLEW_GET_FUN
(
__gÀwGëTønsf‹mFìdbackV¨yögEXT
)

	)

10401 
	#glTønsf‹mFìdbackV¨yögsEXT
 
	`GLEW_GET_FUN
(
__gÀwTønsf‹mFìdbackV¨yögsEXT
)

	)

10403 
	#GLEW_EXT_å™sf‹m_„edback
 
	`GLEW_GET_VAR
(
__GLEW_EXT_å™sf‹m_„edback
)

	)

10409 #i‚de‡
GL_EXT_vîãx_¨øy


10410 
	#GL_EXT_vîãx_¨øy
 1

	)

10412 
	#GL_DOUBLE_EXT
 0x140A

	)

10413 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

10414 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

10415 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

10416 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

10417 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

10418 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

10419 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

10420 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

10421 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

10422 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

10423 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

10424 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

10425 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

10426 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

10427 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

10428 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

10429 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

10430 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

10431 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

10432 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

10433 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

10434 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

10435 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

10436 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

10437 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

10438 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

10439 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

10440 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

10441 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

10442 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

10443 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

10444 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

10446 (
GLAPIENTRY
 * 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

10447 (
GLAPIENTRY
 * 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10448 (
GLAPIENTRY
 * 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

10449 (
GLAPIENTRY
 * 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
* 
	tpoöãr
);

10450 (
GLAPIENTRY
 * 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10451 (
GLAPIENTRY
 * 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10452 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10453 (
GLAPIENTRY
 * 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10455 
	#glAºayEÀmítEXT
 
	`GLEW_GET_FUN
(
__gÀwAºayEÀmítEXT
)

	)

10456 
	#glCﬁ‹PoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹PoöãrEXT
)

	)

10457 
	#glDøwAºaysEXT
 
	`GLEW_GET_FUN
(
__gÀwDøwAºaysEXT
)

	)

10458 
	#glEdgeFœgPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwEdgeFœgPoöãrEXT
)

	)

10459 
	#glIndexPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwIndexPoöãrEXT
)

	)

10460 
	#glN‹mÆPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆPoöãrEXT
)

	)

10461 
	#glTexCo‹dPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dPoöãrEXT
)

	)

10462 
	#glVîãxPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxPoöãrEXT
)

	)

10464 
	#GLEW_EXT_vîãx_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_EXT_vîãx_¨øy
)

	)

10470 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


10471 
	#GL_EXT_vîãx_¨øy_bgø
 1

	)

10473 
	#GL_BGRA
 0x80E1

	)

10475 
	#GLEW_EXT_vîãx_¨øy_bgø
 
	`GLEW_GET_VAR
(
__GLEW_EXT_vîãx_¨øy_bgø
)

	)

10481 #i‚de‡
GL_EXT_vîãx_©åib_64bô


10482 
	#GL_EXT_vîãx_©åib_64bô
 1

	)

10484 
	#GL_DOUBLE_MAT2_EXT
 0x8F46

	)

10485 
	#GL_DOUBLE_MAT3_EXT
 0x8F47

	)

10486 
	#GL_DOUBLE_MAT4_EXT
 0x8F48

	)

10487 
	#GL_DOUBLE_MAT2x3_EXT
 0x8F49

	)

10488 
	#GL_DOUBLE_MAT2x4_EXT
 0x8F4A

	)

10489 
	#GL_DOUBLE_MAT3x2_EXT
 0x8F4B

	)

10490 
	#GL_DOUBLE_MAT3x4_EXT
 0x8F4C

	)

10491 
	#GL_DOUBLE_MAT4x2_EXT
 0x8F4D

	)

10492 
	#GL_DOUBLE_MAT4x3_EXT
 0x8F4E

	)

10493 
	#GL_DOUBLE_VEC2_EXT
 0x8FFC

	)

10494 
	#GL_DOUBLE_VEC3_EXT
 0x8FFD

	)

10495 
	#GL_DOUBLE_VEC4_EXT
 0x8FFE

	)

10497 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBLDVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

10498 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

10499 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

10500 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

10501 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

10502 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

10503 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

10504 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

10505 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

10506 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

10507 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBLPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

10509 
	#glGëVîãxAâribLdvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribLdvEXT
)

	)

10510 
	#glVîãxAºayVîãxAâribLOff£tEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayVîãxAâribLOff£tEXT
)

	)

10511 
	#glVîãxAâribL1dEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1dEXT
)

	)

10512 
	#glVîãxAâribL1dvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1dvEXT
)

	)

10513 
	#glVîãxAâribL2dEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2dEXT
)

	)

10514 
	#glVîãxAâribL2dvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2dvEXT
)

	)

10515 
	#glVîãxAâribL3dEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3dEXT
)

	)

10516 
	#glVîãxAâribL3dvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3dvEXT
)

	)

10517 
	#glVîãxAâribL4dEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4dEXT
)

	)

10518 
	#glVîãxAâribL4dvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4dvEXT
)

	)

10519 
	#glVîãxAâribLPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribLPoöãrEXT
)

	)

10521 
	#GLEW_EXT_vîãx_©åib_64bô
 
	`GLEW_GET_VAR
(
__GLEW_EXT_vîãx_©åib_64bô
)

	)

10527 #i‚de‡
GL_EXT_vîãx_shadî


10528 
	#GL_EXT_vîãx_shadî
 1

	)

10530 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

10531 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

10532 
	#GL_OP_INDEX_EXT
 0x8782

	)

10533 
	#GL_OP_NEGATE_EXT
 0x8783

	)

10534 
	#GL_OP_DOT3_EXT
 0x8784

	)

10535 
	#GL_OP_DOT4_EXT
 0x8785

	)

10536 
	#GL_OP_MUL_EXT
 0x8786

	)

10537 
	#GL_OP_ADD_EXT
 0x8787

	)

10538 
	#GL_OP_MADD_EXT
 0x8788

	)

10539 
	#GL_OP_FRAC_EXT
 0x8789

	)

10540 
	#GL_OP_MAX_EXT
 0x878A

	)

10541 
	#GL_OP_MIN_EXT
 0x878B

	)

10542 
	#GL_OP_SET_GE_EXT
 0x878C

	)

10543 
	#GL_OP_SET_LT_EXT
 0x878D

	)

10544 
	#GL_OP_CLAMP_EXT
 0x878E

	)

10545 
	#GL_OP_FLOOR_EXT
 0x878F

	)

10546 
	#GL_OP_ROUND_EXT
 0x8790

	)

10547 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

10548 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

10549 
	#GL_OP_POWER_EXT
 0x8793

	)

10550 
	#GL_OP_RECIP_EXT
 0x8794

	)

10551 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

10552 
	#GL_OP_SUB_EXT
 0x8796

	)

10553 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

10554 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

10555 
	#GL_OP_MOV_EXT
 0x8799

	)

10556 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

10557 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

10558 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

10559 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

10560 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

10561 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

10562 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

10563 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

10564 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

10565 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

10566 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

10567 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

10568 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

10569 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

10570 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

10571 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

10572 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

10573 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

10574 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

10575 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

10576 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

10577 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

10578 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

10579 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

10580 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

10581 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

10582 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

10583 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

10584 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

10585 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

10586 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

10587 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

10588 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

10589 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

10590 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

10591 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

10592 
	#GL_SCALAR_EXT
 0x87BE

	)

10593 
	#GL_VECTOR_EXT
 0x87BF

	)

10594 
	#GL_MATRIX_EXT
 0x87C0

	)

10595 
	#GL_VARIANT_EXT
 0x87C1

	)

10596 
	#GL_INVARIANT_EXT
 0x87C2

	)

10597 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

10598 
	#GL_LOCAL_EXT
 0x87C4

	)

10599 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

10600 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

10601 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

10602 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

10603 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

10604 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

10605 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

10606 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CC

	)

10607 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CD

	)

10608 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

10609 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

10610 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

10611 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

10612 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

10613 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

10614 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

10615 
	#GL_X_EXT
 0x87D5

	)

10616 
	#GL_Y_EXT
 0x87D6

	)

10617 
	#GL_Z_EXT
 0x87D7

	)

10618 
	#GL_W_EXT
 0x87D8

	)

10619 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

10620 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

10621 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

10622 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

10623 
	#GL_ZERO_EXT
 0x87DD

	)

10624 
	#GL_ONE_EXT
 0x87DE

	)

10625 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

10626 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

10627 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

10628 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

10629 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

10630 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

10631 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

10632 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

10633 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

10634 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

10635 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

10636 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

10637 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

10638 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

10639 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

10641 (
GLAPIENTRY
 * 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

10642 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

10643 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

10644 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

10645 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

10646 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

10647 (
GLAPIENTRY
 * 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

10648 (
GLAPIENTRY
 * 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

10649 (
GLAPIENTRY
 * 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

10650 (
GLAPIENTRY
 * 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

10651 (
GLAPIENTRY
 * 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

10652 (
GLAPIENTRY
 * 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

10653 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©aTy≥
, GLíum 
	t°‹ageTy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

10654 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

10655 (
GLAPIENTRY
 * 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10656 (
GLAPIENTRY
 * 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10657 (
GLAPIENTRY
 * 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10658 (
GLAPIENTRY
 * 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10659 (
GLAPIENTRY
 * 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10660 (
GLAPIENTRY
 * 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10661 (
GLAPIENTRY
 * 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

10662 (
GLAPIENTRY
 * 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

10663 (
GLAPIENTRY
 * 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

10664 (
GLAPIENTRY
 * 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLvoid
 **
	td©a
);

10665 (
GLAPIENTRY
 * 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

10666 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

10667 (
GLAPIENTRY
 * 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLvoid
 *
	taddr
);

10668 (
GLAPIENTRY
 * 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLvoid
 *
	taddr
);

10669 (
GLAPIENTRY
 * 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

10670 (
GLAPIENTRY
 * 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

10671 (
GLAPIENTRY
 * 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

10672 (
GLAPIENTRY
 * 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

10673 (
GLAPIENTRY
 * 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, 
	tGLvoid
 *
	taddr
);

10674 (
GLAPIENTRY
 * 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLbyã
 *
	taddr
);

10675 (
GLAPIENTRY
 * 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLdoubÀ
 *
	taddr
);

10676 (
GLAPIENTRY
 * 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLÊﬂt
 *
	taddr
);

10677 (
GLAPIENTRY
 * 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLöt
 *
	taddr
);

10678 (
GLAPIENTRY
 * 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsh‹t
 *
	taddr
);

10679 (
GLAPIENTRY
 * 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLubyã
 *
	taddr
);

10680 (
GLAPIENTRY
 * 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, GLuöà*
	taddr
);

10681 (
GLAPIENTRY
 * 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLush‹t
 *
	taddr
);

10682 (
GLAPIENTRY
 * 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

10684 
	#glBegöVîãxShadîEXT
 
	`GLEW_GET_FUN
(
__gÀwBegöVîãxShadîEXT
)

	)

10685 
	#glBödLightP¨amëîEXT
 
	`GLEW_GET_FUN
(
__gÀwBödLightP¨amëîEXT
)

	)

10686 
	#glBödM©îülP¨amëîEXT
 
	`GLEW_GET_FUN
(
__gÀwBödM©îülP¨amëîEXT
)

	)

10687 
	#glBödP¨amëîEXT
 
	`GLEW_GET_FUN
(
__gÀwBödP¨amëîEXT
)

	)

10688 
	#glBödTexGíP¨amëîEXT
 
	`GLEW_GET_FUN
(
__gÀwBödTexGíP¨amëîEXT
)

	)

10689 
	#glBödTextuªUnôP¨amëîEXT
 
	`GLEW_GET_FUN
(
__gÀwBödTextuªUnôP¨amëîEXT
)

	)

10690 
	#glBödVîãxShadîEXT
 
	`GLEW_GET_FUN
(
__gÀwBödVîãxShadîEXT
)

	)

10691 
	#glDñëeVîãxShadîEXT
 
	`GLEW_GET_FUN
(
__gÀwDñëeVîãxShadîEXT
)

	)

10692 
	#glDißbÀV¨ü¡Clõ¡SèãEXT
 
	`GLEW_GET_FUN
(
__gÀwDißbÀV¨ü¡Clõ¡SèãEXT
)

	)

10693 
	#glE«bÀV¨ü¡Clõ¡SèãEXT
 
	`GLEW_GET_FUN
(
__gÀwE«bÀV¨ü¡Clõ¡SèãEXT
)

	)

10694 
	#glEndVîãxShadîEXT
 
	`GLEW_GET_FUN
(
__gÀwEndVîãxShadîEXT
)

	)

10695 
	#glExåa˘Comp⁄ítEXT
 
	`GLEW_GET_FUN
(
__gÀwExåa˘Comp⁄ítEXT
)

	)

10696 
	#glGíSymbﬁsEXT
 
	`GLEW_GET_FUN
(
__gÀwGíSymbﬁsEXT
)

	)

10697 
	#glGíVîãxShadîsEXT
 
	`GLEW_GET_FUN
(
__gÀwGíVîãxShadîsEXT
)

	)

10698 
	#glGëInv¨ü¡BoﬁónvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëInv¨ü¡BoﬁónvEXT
)

	)

10699 
	#glGëInv¨ü¡FlﬂtvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëInv¨ü¡FlﬂtvEXT
)

	)

10700 
	#glGëInv¨ü¡I¡egîvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëInv¨ü¡I¡egîvEXT
)

	)

10701 
	#glGëLoˇlC⁄°™tBoﬁónvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëLoˇlC⁄°™tBoﬁónvEXT
)

	)

10702 
	#glGëLoˇlC⁄°™tFlﬂtvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëLoˇlC⁄°™tFlﬂtvEXT
)

	)

10703 
	#glGëLoˇlC⁄°™tI¡egîvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëLoˇlC⁄°™tI¡egîvEXT
)

	)

10704 
	#glGëV¨ü¡BoﬁónvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëV¨ü¡BoﬁónvEXT
)

	)

10705 
	#glGëV¨ü¡FlﬂtvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëV¨ü¡FlﬂtvEXT
)

	)

10706 
	#glGëV¨ü¡I¡egîvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëV¨ü¡I¡egîvEXT
)

	)

10707 
	#glGëV¨ü¡PoöãrvEXT
 
	`GLEW_GET_FUN
(
__gÀwGëV¨ü¡PoöãrvEXT
)

	)

10708 
	#glIn£πComp⁄ítEXT
 
	`GLEW_GET_FUN
(
__gÀwIn£πComp⁄ítEXT
)

	)

10709 
	#glIsV¨ü¡E«bÀdEXT
 
	`GLEW_GET_FUN
(
__gÀwIsV¨ü¡E«bÀdEXT
)

	)

10710 
	#glSëInv¨ü¡EXT
 
	`GLEW_GET_FUN
(
__gÀwSëInv¨ü¡EXT
)

	)

10711 
	#glSëLoˇlC⁄°™tEXT
 
	`GLEW_GET_FUN
(
__gÀwSëLoˇlC⁄°™tEXT
)

	)

10712 
	#glShadîOp1EXT
 
	`GLEW_GET_FUN
(
__gÀwShadîOp1EXT
)

	)

10713 
	#glShadîOp2EXT
 
	`GLEW_GET_FUN
(
__gÀwShadîOp2EXT
)

	)

10714 
	#glShadîOp3EXT
 
	`GLEW_GET_FUN
(
__gÀwShadîOp3EXT
)

	)

10715 
	#glSwizzÀEXT
 
	`GLEW_GET_FUN
(
__gÀwSwizzÀEXT
)

	)

10716 
	#glV¨ü¡PoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡PoöãrEXT
)

	)

10717 
	#glV¨ü¡bvEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡bvEXT
)

	)

10718 
	#glV¨ü¡dvEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡dvEXT
)

	)

10719 
	#glV¨ü¡fvEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡fvEXT
)

	)

10720 
	#glV¨ü¡ivEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡ivEXT
)

	)

10721 
	#glV¨ü¡svEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡svEXT
)

	)

10722 
	#glV¨ü¡ubvEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡ubvEXT
)

	)

10723 
	#glV¨ü¡uivEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡uivEXT
)

	)

10724 
	#glV¨ü¡usvEXT
 
	`GLEW_GET_FUN
(
__gÀwV¨ü¡usvEXT
)

	)

10725 
	#glWrôeMaskEXT
 
	`GLEW_GET_FUN
(
__gÀwWrôeMaskEXT
)

	)

10727 
	#GLEW_EXT_vîãx_shadî
 
	`GLEW_GET_VAR
(
__GLEW_EXT_vîãx_shadî
)

	)

10733 #i‚de‡
GL_EXT_vîãx_weightög


10734 
	#GL_EXT_vîãx_weightög
 1

	)

10736 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 0x0BA3

	)

10737 
	#GL_MODELVIEW0_MATRIX_EXT
 0x0BA6

	)

10738 
	#GL_MODELVIEW0_EXT
 0x1700

	)

10739 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

10740 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

10741 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

10742 
	#GL_MODELVIEW1_EXT
 0x850A

	)

10743 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

10744 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

10745 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

10746 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

10747 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

10748 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

10750 (
GLAPIENTRY
 * 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLvoid
 *
	tpoöãr
);

10751 (
GLAPIENTRY
 * 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

10752 (
GLAPIENTRY
 * 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(
	tGLÊﬂt
* 
	tweight
);

10754 
	#glVîãxWeightPoöãrEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxWeightPoöãrEXT
)

	)

10755 
	#glVîãxWeightfEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxWeightfEXT
)

	)

10756 
	#glVîãxWeightfvEXT
 
	`GLEW_GET_FUN
(
__gÀwVîãxWeightfvEXT
)

	)

10758 
	#GLEW_EXT_vîãx_weightög
 
	`GLEW_GET_VAR
(
__GLEW_EXT_vîãx_weightög
)

	)

10764 #i‚de‡
GL_EXT_x11_sync_obje˘


10765 
	#GL_EXT_x11_sync_obje˘
 1

	)

10767 
	#GL_SYNC_X11_FENCE_EXT
 0x90E1

	)

10769 
GLsync
 (
	tGLAPIENTRY
 * 
	tPFNGLIMPORTSYNCEXTPROC
Ë(
	tGLíum
 
	texã∫Æ_sync_ty≥
, 
	tGLöçå
 
	texã∫Æ_sync
, 
	tGLbôfõld
 
	tÊags
);

10771 
	#glImp‹tSyncEXT
 
	`GLEW_GET_FUN
(
__gÀwImp‹tSyncEXT
)

	)

10773 
	#GLEW_EXT_x11_sync_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_EXT_x11_sync_obje˘
)

	)

10779 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


10780 
	#GL_GREMEDY_‰ame_ãrmö©‹
 1

	)

10782 (
GLAPIENTRY
 * 
	tPFNGLFRAMETERMINATORGREMEDYPROC
) ();

10784 
	#glFømeTîmö©‹GREMEDY
 
	`GLEW_GET_FUN
(
__gÀwFømeTîmö©‹GREMEDY
)

	)

10786 
	#GLEW_GREMEDY_‰ame_ãrmö©‹
 
	`GLEW_GET_VAR
(
__GLEW_GREMEDY_‰ame_ãrmö©‹
)

	)

10792 #i‚de‡
GL_GREMEDY_°rög_m¨kî


10793 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

10795 (
GLAPIENTRY
 * 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° 
	tGLvoid
 *
	t°rög
);

10797 
	#glSåögM¨kîGREMEDY
 
	`GLEW_GET_FUN
(
__gÀwSåögM¨kîGREMEDY
)

	)

10799 
	#GLEW_GREMEDY_°rög_m¨kî
 
	`GLEW_GET_VAR
(
__GLEW_GREMEDY_°rög_m¨kî
)

	)

10805 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


10806 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

10808 
	#GLEW_HP_c⁄vﬁuti⁄_b‹dî_modes
 
	`GLEW_GET_VAR
(
__GLEW_HP_c⁄vﬁuti⁄_b‹dî_modes
)

	)

10814 #i‚de‡
GL_HP_image_å™sf‹m


10815 
	#GL_HP_image_å™sf‹m
 1

	)

10817 (
GLAPIENTRY
 * 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

10818 (
GLAPIENTRY
 * 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

10819 (
GLAPIENTRY
 * 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 
	t∑øm
);

10820 (
GLAPIENTRY
 * 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

10821 (
GLAPIENTRY
 * 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 
	t∑øm
);

10822 (
GLAPIENTRY
 * 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

10824 
	#glGëImageTønsf‹mP¨amëîfvHP
 
	`GLEW_GET_FUN
(
__gÀwGëImageTønsf‹mP¨amëîfvHP
)

	)

10825 
	#glGëImageTønsf‹mP¨amëîivHP
 
	`GLEW_GET_FUN
(
__gÀwGëImageTønsf‹mP¨amëîivHP
)

	)

10826 
	#glImageTønsf‹mP¨amëîfHP
 
	`GLEW_GET_FUN
(
__gÀwImageTønsf‹mP¨amëîfHP
)

	)

10827 
	#glImageTønsf‹mP¨amëîfvHP
 
	`GLEW_GET_FUN
(
__gÀwImageTønsf‹mP¨amëîfvHP
)

	)

10828 
	#glImageTønsf‹mP¨amëîiHP
 
	`GLEW_GET_FUN
(
__gÀwImageTønsf‹mP¨amëîiHP
)

	)

10829 
	#glImageTønsf‹mP¨amëîivHP
 
	`GLEW_GET_FUN
(
__gÀwImageTønsf‹mP¨amëîivHP
)

	)

10831 
	#GLEW_HP_image_å™sf‹m
 
	`GLEW_GET_VAR
(
__GLEW_HP_image_å™sf‹m
)

	)

10837 #i‚de‡
GL_HP_oc˛usi⁄_ã°


10838 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

10840 
	#GLEW_HP_oc˛usi⁄_ã°
 
	`GLEW_GET_VAR
(
__GLEW_HP_oc˛usi⁄_ã°
)

	)

10846 #i‚de‡
GL_HP_ãxtuª_lightög


10847 
	#GL_HP_ãxtuª_lightög
 1

	)

10849 
	#GLEW_HP_ãxtuª_lightög
 
	`GLEW_GET_VAR
(
__GLEW_HP_ãxtuª_lightög
)

	)

10855 #i‚de‡
GL_IBM_cuŒ_vîãx


10856 
	#GL_IBM_cuŒ_vîãx
 1

	)

10858 
	#GL_CULL_VERTEX_IBM
 103050

	)

10860 
	#GLEW_IBM_cuŒ_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_IBM_cuŒ_vîãx
)

	)

10866 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


10867 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

10869 (
GLAPIENTRY
 * 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
* 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

10870 (
GLAPIENTRY
 * 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
* 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 * c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

10872 
	#glMu…iModeDøwAºaysIBM
 
	`GLEW_GET_FUN
(
__gÀwMu…iModeDøwAºaysIBM
)

	)

10873 
	#glMu…iModeDøwEÀmítsIBM
 
	`GLEW_GET_FUN
(
__gÀwMu…iModeDøwEÀmítsIBM
)

	)

10875 
	#GLEW_IBM_mu…imode_døw_¨øys
 
	`GLEW_GET_VAR
(
__GLEW_IBM_mu…imode_døw_¨øys
)

	)

10881 #i‚de‡
GL_IBM_ø°îpos_˛ù


10882 
	#GL_IBM_ø°îpos_˛ù
 1

	)

10884 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 103010

	)

10886 
	#GLEW_IBM_ø°îpos_˛ù
 
	`GLEW_GET_VAR
(
__GLEW_IBM_ø°îpos_˛ù
)

	)

10892 #i‚de‡
GL_IBM_°©ic_d©a


10893 
	#GL_IBM_°©ic_d©a
 1

	)

10895 
	#GL_ALL_STATIC_DATA_IBM
 103060

	)

10896 
	#GL_STATIC_VERTEX_ARRAY_IBM
 103061

	)

10898 
	#GLEW_IBM_°©ic_d©a
 
	`GLEW_GET_VAR
(
__GLEW_IBM_°©ic_d©a
)

	)

10904 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


10905 
	#GL_IBM_ãxtuª_múr‹ed_ª≥©
 1

	)

10907 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

10909 
	#GLEW_IBM_ãxtuª_múr‹ed_ª≥©
 
	`GLEW_GET_VAR
(
__GLEW_IBM_ãxtuª_múr‹ed_ª≥©
)

	)

10915 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


10916 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

10918 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

10919 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

10920 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

10921 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

10922 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

10923 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

10924 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

10925 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

10926 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

10927 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

10928 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

10929 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

10930 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

10931 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

10932 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

10933 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

10935 (
GLAPIENTRY
 * 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10936 (
GLAPIENTRY
 * 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10937 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10938 (
GLAPIENTRY
 * 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10939 (
GLAPIENTRY
 * 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10940 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10941 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10942 (
GLAPIENTRY
 * 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° 
	tGLvoid
 ** 
	tpoöãr
, GLöà
	t±r°ride
);

10944 
	#glCﬁ‹PoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹PoöãrLi°IBM
)

	)

10945 
	#glEdgeFœgPoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwEdgeFœgPoöãrLi°IBM
)

	)

10946 
	#glFogCo‹dPoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dPoöãrLi°IBM
)

	)

10947 
	#glIndexPoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwIndexPoöãrLi°IBM
)

	)

10948 
	#glN‹mÆPoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆPoöãrLi°IBM
)

	)

10949 
	#glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹PoöãrLi°IBM
)

	)

10950 
	#glTexCo‹dPoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dPoöãrLi°IBM
)

	)

10951 
	#glVîãxPoöãrLi°IBM
 
	`GLEW_GET_FUN
(
__gÀwVîãxPoöãrLi°IBM
)

	)

10953 
	#GLEW_IBM_vîãx_¨øy_li°s
 
	`GLEW_GET_VAR
(
__GLEW_IBM_vîãx_¨øy_li°s
)

	)

10959 #i‚de‡
GL_INGR_cﬁ‹_˛amp


10960 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

10962 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

10963 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

10964 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

10965 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

10966 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

10967 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

10968 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

10969 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

10971 
	#GLEW_INGR_cﬁ‹_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_INGR_cﬁ‹_˛amp
)

	)

10977 #i‚de‡
GL_INGR_öãæa˚_ªad


10978 
	#GL_INGR_öãæa˚_ªad
 1

	)

10980 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

10982 
	#GLEW_INGR_öãæa˚_ªad
 
	`GLEW_GET_VAR
(
__GLEW_INGR_öãæa˚_ªad
)

	)

10988 #i‚de‡
GL_INTEL_m≠_ãxtuª


10989 
	#GL_INTEL_m≠_ãxtuª
 1

	)

10991 
	#GL_LAYOUT_DEFAULT_INTEL
 0

	)

10992 
	#GL_LAYOUT_LINEAR_INTEL
 1

	)

10993 
	#GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
 2

	)

10994 
	#GL_TEXTURE_MEMORY_LAYOUT_INTEL
 0x83FF

	)

10996 
	gGLvoid
 * (
	tGLAPIENTRY
 * 
	tPFNGLMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLbôfõld
 
	tac˚ss
, GLöt* 
	t°ride
, 
	tGLíum
 *
	tœyout
);

10997 (
GLAPIENTRY
 * 
	tPFNGLSYNCTEXTUREINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
);

10998 (
GLAPIENTRY
 * 
	tPFNGLUNMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

11000 
	#glM≠Textuª2DINTEL
 
	`GLEW_GET_FUN
(
__gÀwM≠Textuª2DINTEL
)

	)

11001 
	#glSyncTextuªINTEL
 
	`GLEW_GET_FUN
(
__gÀwSyncTextuªINTEL
)

	)

11002 
	#glUnm≠Textuª2DINTEL
 
	`GLEW_GET_FUN
(
__gÀwUnm≠Textuª2DINTEL
)

	)

11004 
	#GLEW_INTEL_m≠_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_INTEL_m≠_ãxtuª
)

	)

11010 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


11011 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

11013 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

11014 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

11015 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

11016 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

11017 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

11019 (
GLAPIENTRY
 * 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° ** 
	tpoöãr
);

11020 (
GLAPIENTRY
 * 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° ** 
	tpoöãr
);

11021 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° ** 
	tpoöãr
);

11022 (
GLAPIENTRY
 * 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° ** 
	tpoöãr
);

11024 
	#glCﬁ‹PoöãrvINTEL
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹PoöãrvINTEL
)

	)

11025 
	#glN‹mÆPoöãrvINTEL
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆPoöãrvINTEL
)

	)

11026 
	#glTexCo‹dPoöãrvINTEL
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dPoöãrvINTEL
)

	)

11027 
	#glVîãxPoöãrvINTEL
 
	`GLEW_GET_FUN
(
__gÀwVîãxPoöãrvINTEL
)

	)

11029 
	#GLEW_INTEL_∑øŒñ_¨øys
 
	`GLEW_GET_VAR
(
__GLEW_INTEL_∑øŒñ_¨øys
)

	)

11035 #i‚de‡
GL_INTEL_ãxtuª_sciss‹


11036 
	#GL_INTEL_ãxtuª_sciss‹
 1

	)

11038 (
GLAPIENTRY
 * 
	tPFNGLTEXSCISSORFUNCINTELPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tlfunc
, GLíum 
	thfunc
);

11039 (
GLAPIENTRY
 * 
	tPFNGLTEXSCISSORINTELPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGL˛ampf
 
	téow
, GL˛amp‡
	tthigh
);

11041 
	#glTexSciss‹FuncINTEL
 
	`GLEW_GET_FUN
(
__gÀwTexSciss‹FuncINTEL
)

	)

11042 
	#glTexSciss‹INTEL
 
	`GLEW_GET_FUN
(
__gÀwTexSciss‹INTEL
)

	)

11044 
	#GLEW_INTEL_ãxtuª_sciss‹
 
	`GLEW_GET_VAR
(
__GLEW_INTEL_ãxtuª_sciss‹
)

	)

11050 #i‚de‡
GL_KHR_debug


11051 
	#GL_KHR_debug
 1

	)

11053 
	#GL_CONTEXT_FLAG_DEBUG_BIT
 0x00000002

	)

11054 
	#GL_STACK_OVERFLOW
 0x0503

	)

11055 
	#GL_STACK_UNDERFLOW
 0x0504

	)

11056 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS
 0x8242

	)

11057 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
 0x8243

	)

11058 
	#GL_DEBUG_CALLBACK_FUNCTION
 0x8244

	)

11059 
	#GL_DEBUG_CALLBACK_USER_PARAM
 0x8245

	)

11060 
	#GL_DEBUG_SOURCE_API
 0x8246

	)

11061 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM
 0x8247

	)

11062 
	#GL_DEBUG_SOURCE_SHADER_COMPILER
 0x8248

	)

11063 
	#GL_DEBUG_SOURCE_THIRD_PARTY
 0x8249

	)

11064 
	#GL_DEBUG_SOURCE_APPLICATION
 0x824A

	)

11065 
	#GL_DEBUG_SOURCE_OTHER
 0x824B

	)

11066 
	#GL_DEBUG_TYPE_ERROR
 0x824C

	)

11067 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
 0x824D

	)

11068 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
 0x824E

	)

11069 
	#GL_DEBUG_TYPE_PORTABILITY
 0x824F

	)

11070 
	#GL_DEBUG_TYPE_PERFORMANCE
 0x8250

	)

11071 
	#GL_DEBUG_TYPE_OTHER
 0x8251

	)

11072 
	#GL_DEBUG_TYPE_MARKER
 0x8268

	)

11073 
	#GL_DEBUG_TYPE_PUSH_GROUP
 0x8269

	)

11074 
	#GL_DEBUG_TYPE_POP_GROUP
 0x826A

	)

11075 
	#GL_DEBUG_SEVERITY_NOTIFICATION
 0x826B

	)

11076 
	#GL_MAX_DEBUG_GROUP_STACK_DEPTH
 0x826C

	)

11077 
	#GL_DEBUG_GROUP_STACK_DEPTH
 0x826D

	)

11078 
	#GL_BUFFER
 0x82E0

	)

11079 
	#GL_SHADER
 0x82E1

	)

11080 
	#GL_PROGRAM
 0x82E2

	)

11081 
	#GL_QUERY
 0x82E3

	)

11082 
	#GL_PROGRAM_PIPELINE
 0x82E4

	)

11083 
	#GL_SAMPLER
 0x82E6

	)

11084 
	#GL_DISPLAY_LIST
 0x82E7

	)

11085 
	#GL_MAX_LABEL_LENGTH
 0x82E8

	)

11086 
	#GL_MAX_DEBUG_MESSAGE_LENGTH
 0x9143

	)

11087 
	#GL_MAX_DEBUG_LOGGED_MESSAGES
 0x9144

	)

11088 
	#GL_DEBUG_LOGGED_MESSAGES
 0x9145

	)

11089 
	#GL_DEBUG_SEVERITY_HIGH
 0x9146

	)

11090 
	#GL_DEBUG_SEVERITY_MEDIUM
 0x9147

	)

11091 
	#GL_DEBUG_SEVERITY_LOW
 0x9148

	)

11092 
	#GL_DEBUG_OUTPUT
 0x92E0

	)

11094 (
APIENTRY
 *
	tGLDEBUGPROC
)(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tmesßge
, 
	tGLvoid
* 
	tu£rP¨am
);

11096 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGECALLBACKPROC
Ë(
	tGLDEBUGPROC
 
	tˇŒback
, c⁄° 
	tGLvoid
 *
	tu£rP¨am
);

11097 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGECONTROLPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
* 
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

11098 (
GLAPIENTRY
 * 
	tPFNGLDEBUGMESSAGEINSERTPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tbuf
);

11099 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETDEBUGMESSAGELOGPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
* 
	tsour˚s
, GLíum* 
	tty≥s
, GLuöt* 
	tids
, GLíum* 
	t£vîôõs
, GLsizei* 
	tÀngths
, 
	tGLch¨
* 
	tmesßgeLog
);

11100 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

11101 (
GLAPIENTRY
 * 
	tPFNGLGETOBJECTPTRLABELPROC
Ë(* 
	t±r
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

11102 (
GLAPIENTRY
 * 
	tPFNGLOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tœbñ
);

11103 (
GLAPIENTRY
 * 
	tPFNGLOBJECTPTRLABELPROC
Ë(* 
	t±r
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
* 
	tœbñ
);

11104 (
GLAPIENTRY
 * 
	tPFNGLPOPDEBUGGROUPPROC
) ();

11105 (
GLAPIENTRY
 * 
	tPFNGLPUSHDEBUGGROUPPROC
Ë(
	tGLíum
 
	tsour˚
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 * 
	tmesßge
);

11107 
	#glDebugMesßgeCÆlback
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeCÆlback
)

	)

11108 
	#glDebugMesßgeC⁄åﬁ
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeC⁄åﬁ
)

	)

11109 
	#glDebugMesßgeIn£π
 
	`GLEW_GET_FUN
(
__gÀwDebugMesßgeIn£π
)

	)

11110 
	#glGëDebugMesßgeLog
 
	`GLEW_GET_FUN
(
__gÀwGëDebugMesßgeLog
)

	)

11111 
	#glGëObje˘Labñ
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘Labñ
)

	)

11112 
	#glGëObje˘PåLabñ
 
	`GLEW_GET_FUN
(
__gÀwGëObje˘PåLabñ
)

	)

11113 
	#glObje˘Labñ
 
	`GLEW_GET_FUN
(
__gÀwObje˘Labñ
)

	)

11114 
	#glObje˘PåLabñ
 
	`GLEW_GET_FUN
(
__gÀwObje˘PåLabñ
)

	)

11115 
	#glP›DebugGroup
 
	`GLEW_GET_FUN
(
__gÀwP›DebugGroup
)

	)

11116 
	#glPushDebugGroup
 
	`GLEW_GET_FUN
(
__gÀwPushDebugGroup
)

	)

11118 
	#GLEW_KHR_debug
 
	`GLEW_GET_VAR
(
__GLEW_KHR_debug
)

	)

11124 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


11125 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 1

	)

11127 
	#GL_COMPRESSED_RGBA_ASTC_4x4_KHR
 0x93B0

	)

11128 
	#GL_COMPRESSED_RGBA_ASTC_5x4_KHR
 0x93B1

	)

11129 
	#GL_COMPRESSED_RGBA_ASTC_5x5_KHR
 0x93B2

	)

11130 
	#GL_COMPRESSED_RGBA_ASTC_6x5_KHR
 0x93B3

	)

11131 
	#GL_COMPRESSED_RGBA_ASTC_6x6_KHR
 0x93B4

	)

11132 
	#GL_COMPRESSED_RGBA_ASTC_8x5_KHR
 0x93B5

	)

11133 
	#GL_COMPRESSED_RGBA_ASTC_8x6_KHR
 0x93B6

	)

11134 
	#GL_COMPRESSED_RGBA_ASTC_8x8_KHR
 0x93B7

	)

11135 
	#GL_COMPRESSED_RGBA_ASTC_10x5_KHR
 0x93B8

	)

11136 
	#GL_COMPRESSED_RGBA_ASTC_10x6_KHR
 0x93B9

	)

11137 
	#GL_COMPRESSED_RGBA_ASTC_10x8_KHR
 0x93BA

	)

11138 
	#GL_COMPRESSED_RGBA_ASTC_10x10_KHR
 0x93BB

	)

11139 
	#GL_COMPRESSED_RGBA_ASTC_12x10_KHR
 0x93BC

	)

11140 
	#GL_COMPRESSED_RGBA_ASTC_12x12_KHR
 0x93BD

	)

11141 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
 0x93D0

	)

11142 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
 0x93D1

	)

11143 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
 0x93D2

	)

11144 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
 0x93D3

	)

11145 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
 0x93D4

	)

11146 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
 0x93D5

	)

11147 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
 0x93D6

	)

11148 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
 0x93D7

	)

11149 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
 0x93D8

	)

11150 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
 0x93D9

	)

11151 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
 0x93DA

	)

11152 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
 0x93DB

	)

11153 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
 0x93DC

	)

11154 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
 0x93DD

	)

11156 
	#GLEW_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 
	`GLEW_GET_VAR
(
__GLEW_KHR_ãxtuª_com¥essi⁄_a°c_ldr
)

	)

11162 #i‚de‡
GL_KTX_buf„r_ªgi⁄


11163 
	#GL_KTX_buf„r_ªgi⁄
 1

	)

11165 
	#GL_KTX_FRONT_REGION
 0x0

	)

11166 
	#GL_KTX_BACK_REGION
 0x1

	)

11167 
	#GL_KTX_Z_REGION
 0x2

	)

11168 
	#GL_KTX_STENCIL_REGION
 0x3

	)

11170 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLBUFFERREGIONENABLEDPROC
) ();

11171 (
GLAPIENTRY
 * 
	tPFNGLDELETEBUFFERREGIONPROC
Ë(
	tGLíum
 
	tªgi⁄
);

11172 (
GLAPIENTRY
 * 
	tPFNGLDRAWBUFFERREGIONPROC
Ë(
	tGLuöt
 
	tªgi⁄
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	txDe°
, GLöà
	tyDe°
);

11173 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLNEWBUFFERREGIONPROC
Ë(
	tGLíum
 
	tªgi⁄
);

11174 (
GLAPIENTRY
 * 
	tPFNGLREADBUFFERREGIONPROC
Ë(
	tGLuöt
 
	tªgi⁄
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

11176 
	#glBuf„rRegi⁄E«bÀd
 
	`GLEW_GET_FUN
(
__gÀwBuf„rRegi⁄E«bÀd
)

	)

11177 
	#glDñëeBuf„rRegi⁄
 
	`GLEW_GET_FUN
(
__gÀwDñëeBuf„rRegi⁄
)

	)

11178 
	#glDøwBuf„rRegi⁄
 
	`GLEW_GET_FUN
(
__gÀwDøwBuf„rRegi⁄
)

	)

11179 
	#glNewBuf„rRegi⁄
 
	`GLEW_GET_FUN
(
__gÀwNewBuf„rRegi⁄
)

	)

11180 
	#glRódBuf„rRegi⁄
 
	`GLEW_GET_FUN
(
__gÀwRódBuf„rRegi⁄
)

	)

11182 
	#GLEW_KTX_buf„r_ªgi⁄
 
	`GLEW_GET_VAR
(
__GLEW_KTX_buf„r_ªgi⁄
)

	)

11188 #i‚de‡
GL_MESAX_ãxtuª_°ack


11189 
	#GL_MESAX_ãxtuª_°ack
 1

	)

11191 
	#GL_TEXTURE_1D_STACK_MESAX
 0x8759

	)

11192 
	#GL_TEXTURE_2D_STACK_MESAX
 0x875A

	)

11193 
	#GL_PROXY_TEXTURE_1D_STACK_MESAX
 0x875B

	)

11194 
	#GL_PROXY_TEXTURE_2D_STACK_MESAX
 0x875C

	)

11195 
	#GL_TEXTURE_1D_STACK_BINDING_MESAX
 0x875D

	)

11196 
	#GL_TEXTURE_2D_STACK_BINDING_MESAX
 0x875E

	)

11198 
	#GLEW_MESAX_ãxtuª_°ack
 
	`GLEW_GET_VAR
(
__GLEW_MESAX_ãxtuª_°ack
)

	)

11204 #i‚de‡
GL_MESA_∑ck_övît


11205 
	#GL_MESA_∑ck_övît
 1

	)

11207 
	#GL_PACK_INVERT_MESA
 0x8758

	)

11209 
	#GLEW_MESA_∑ck_övît
 
	`GLEW_GET_VAR
(
__GLEW_MESA_∑ck_övît
)

	)

11215 #i‚de‡
GL_MESA_ªsize_buf„rs


11216 
	#GL_MESA_ªsize_buf„rs
 1

	)

11218 (
GLAPIENTRY
 * 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

11220 
	#glResizeBuf„rsMESA
 
	`GLEW_GET_FUN
(
__gÀwResizeBuf„rsMESA
)

	)

11222 
	#GLEW_MESA_ªsize_buf„rs
 
	`GLEW_GET_VAR
(
__GLEW_MESA_ªsize_buf„rs
)

	)

11228 #i‚de‡
GL_MESA_wödow_pos


11229 
	#GL_MESA_wödow_pos
 1

	)

11231 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

11232 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
* 
	tp
);

11233 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

11234 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tp
);

11235 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

11236 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
* 
	tp
);

11237 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

11238 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
* 
	tp
);

11239 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

11240 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
* 
	tp
);

11241 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11242 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tp
);

11243 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

11244 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
* 
	tp
);

11245 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

11246 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
* 
	tp
);

11247 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdouble);

11248 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
* 
	tp
);

11249 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

11250 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tp
);

11251 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11252 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
* 
	tp
);

11253 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

11254 (
GLAPIENTRY
 * 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
* 
	tp
);

11256 
	#glWödowPos2dMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2dMESA
)

	)

11257 
	#glWödowPos2dvMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2dvMESA
)

	)

11258 
	#glWödowPos2fMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2fMESA
)

	)

11259 
	#glWödowPos2fvMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2fvMESA
)

	)

11260 
	#glWödowPos2iMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2iMESA
)

	)

11261 
	#glWödowPos2ivMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2ivMESA
)

	)

11262 
	#glWödowPos2sMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2sMESA
)

	)

11263 
	#glWödowPos2svMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos2svMESA
)

	)

11264 
	#glWödowPos3dMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3dMESA
)

	)

11265 
	#glWödowPos3dvMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3dvMESA
)

	)

11266 
	#glWödowPos3fMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3fMESA
)

	)

11267 
	#glWödowPos3fvMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3fvMESA
)

	)

11268 
	#glWödowPos3iMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3iMESA
)

	)

11269 
	#glWödowPos3ivMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3ivMESA
)

	)

11270 
	#glWödowPos3sMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3sMESA
)

	)

11271 
	#glWödowPos3svMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos3svMESA
)

	)

11272 
	#glWödowPos4dMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4dMESA
)

	)

11273 
	#glWödowPos4dvMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4dvMESA
)

	)

11274 
	#glWödowPos4fMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4fMESA
)

	)

11275 
	#glWödowPos4fvMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4fvMESA
)

	)

11276 
	#glWödowPos4iMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4iMESA
)

	)

11277 
	#glWödowPos4ivMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4ivMESA
)

	)

11278 
	#glWödowPos4sMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4sMESA
)

	)

11279 
	#glWödowPos4svMESA
 
	`GLEW_GET_FUN
(
__gÀwWödowPos4svMESA
)

	)

11281 
	#GLEW_MESA_wödow_pos
 
	`GLEW_GET_VAR
(
__GLEW_MESA_wödow_pos
)

	)

11287 #i‚de‡
GL_MESA_ycb¸_ãxtuª


11288 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

11290 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

11291 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

11292 
	#GL_YCBCR_MESA
 0x8757

	)

11294 
	#GLEW_MESA_ycb¸_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_MESA_ycb¸_ãxtuª
)

	)

11300 #i‚de‡
GL_NVX_c⁄dôi⁄Æ_ªndî


11301 
	#GL_NVX_c⁄dôi⁄Æ_ªndî
 1

	)

11303 (
GLAPIENTRY
 * 
	tPFNGLBEGINCONDITIONALRENDERNVXPROC
Ë(
	tGLuöt
 
	tid
);

11304 (
GLAPIENTRY
 * 
	tPFNGLENDCONDITIONALRENDERNVXPROC
) ();

11306 
	#glBegöC⁄dôi⁄ÆRídîNVX
 
	`GLEW_GET_FUN
(
__gÀwBegöC⁄dôi⁄ÆRídîNVX
)

	)

11307 
	#glEndC⁄dôi⁄ÆRídîNVX
 
	`GLEW_GET_FUN
(
__gÀwEndC⁄dôi⁄ÆRídîNVX
)

	)

11309 
	#GLEW_NVX_c⁄dôi⁄Æ_ªndî
 
	`GLEW_GET_VAR
(
__GLEW_NVX_c⁄dôi⁄Æ_ªndî
)

	)

11315 #i‚de‡
GL_NVX_gpu_mem‹y_öfo


11316 
	#GL_NVX_gpu_mem‹y_öfo
 1

	)

11318 
	#GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX
 0x9047

	)

11319 
	#GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX
 0x9048

	)

11320 
	#GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX
 0x9049

	)

11321 
	#GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX
 0x904A

	)

11322 
	#GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX
 0x904B

	)

11324 
	#GLEW_NVX_gpu_mem‹y_öfo
 
	`GLEW_GET_VAR
(
__GLEW_NVX_gpu_mem‹y_öfo
)

	)

11330 #i‚de‡
GL_NV_bödÀss_mu…i_døw_ödúe˘


11331 
	#GL_NV_bödÀss_mu…i_døw_ödúe˘
 1

	)

11333 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

11334 (
GLAPIENTRY
 * 
	tPFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

11336 
	#glMu…iDøwAºaysIndúe˘BödÀssNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwAºaysIndúe˘BödÀssNV
)

	)

11337 
	#glMu…iDøwEÀmítsIndúe˘BödÀssNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iDøwEÀmítsIndúe˘BödÀssNV
)

	)

11339 
	#GLEW_NV_bödÀss_mu…i_døw_ödúe˘
 
	`GLEW_GET_VAR
(
__GLEW_NV_bödÀss_mu…i_døw_ödúe˘
)

	)

11345 #i‚de‡
GL_NV_bödÀss_ãxtuª


11346 
	#GL_NV_bödÀss_ãxtuª
 1

	)

11348 
GLuöt64
 (
	tGLAPIENTRY
 * 
	tPFNGLGETIMAGEHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

11349 
GLuöt64
 (
	tGLAPIENTRY
 * 
	tPFNGLGETTEXTUREHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
);

11350 
GLuöt64
 (
	tGLAPIENTRY
 * 
	tPFNGLGETTEXTURESAMPLERHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

11351 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

11352 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISTEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

11353 (
GLAPIENTRY
 * 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

11354 (
GLAPIENTRY
 * 
	tPFNGLMAKEIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

11355 (
GLAPIENTRY
 * 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

11356 (
GLAPIENTRY
 * 
	tPFNGLMAKETEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

11357 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

11358 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
* 
	tvÆues
);

11359 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMHANDLEUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

11360 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
* 
	tvÆue
);

11362 
	#glGëImageH™dÀNV
 
	`GLEW_GET_FUN
(
__gÀwGëImageH™dÀNV
)

	)

11363 
	#glGëTextuªH™dÀNV
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªH™dÀNV
)

	)

11364 
	#glGëTextuªSam∂îH™dÀNV
 
	`GLEW_GET_FUN
(
__gÀwGëTextuªSam∂îH™dÀNV
)

	)

11365 
	#glIsImageH™dÀResidítNV
 
	`GLEW_GET_FUN
(
__gÀwIsImageH™dÀResidítNV
)

	)

11366 
	#glIsTextuªH™dÀResidítNV
 
	`GLEW_GET_FUN
(
__gÀwIsTextuªH™dÀResidítNV
)

	)

11367 
	#glMakeImageH™dÀN⁄ResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeImageH™dÀN⁄ResidítNV
)

	)

11368 
	#glMakeImageH™dÀResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeImageH™dÀResidítNV
)

	)

11369 
	#glMakeTextuªH™dÀN⁄ResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeTextuªH™dÀN⁄ResidítNV
)

	)

11370 
	#glMakeTextuªH™dÀResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeTextuªH™dÀResidítNV
)

	)

11371 
	#glProgømUnif‹mH™dÀui64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mH™dÀui64NV
)

	)

11372 
	#glProgømUnif‹mH™dÀui64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mH™dÀui64vNV
)

	)

11373 
	#glUnif‹mH™dÀui64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mH™dÀui64NV
)

	)

11374 
	#glUnif‹mH™dÀui64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mH™dÀui64vNV
)

	)

11376 
	#GLEW_NV_bödÀss_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_NV_bödÀss_ãxtuª
)

	)

11382 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d


11383 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d
 1

	)

11385 
	#GL_BLEND_PREMULTIPLIED_SRC_NV
 0x9280

	)

11386 
	#GL_BLEND_OVERLAP_NV
 0x9281

	)

11387 
	#GL_UNCORRELATED_NV
 0x9282

	)

11388 
	#GL_DISJOINT_NV
 0x9283

	)

11389 
	#GL_CONJOINT_NV
 0x9284

	)

11390 
	#GL_BLEND_ADVANCED_COHERENT_NV
 0x9285

	)

11391 
	#GL_SRC_NV
 0x9286

	)

11392 
	#GL_DST_NV
 0x9287

	)

11393 
	#GL_SRC_OVER_NV
 0x9288

	)

11394 
	#GL_DST_OVER_NV
 0x9289

	)

11395 
	#GL_SRC_IN_NV
 0x928A

	)

11396 
	#GL_DST_IN_NV
 0x928B

	)

11397 
	#GL_SRC_OUT_NV
 0x928C

	)

11398 
	#GL_DST_OUT_NV
 0x928D

	)

11399 
	#GL_SRC_ATOP_NV
 0x928E

	)

11400 
	#GL_DST_ATOP_NV
 0x928F

	)

11401 
	#GL_PLUS_NV
 0x9291

	)

11402 
	#GL_PLUS_DARKER_NV
 0x9292

	)

11403 
	#GL_MULTIPLY_NV
 0x9294

	)

11404 
	#GL_SCREEN_NV
 0x9295

	)

11405 
	#GL_OVERLAY_NV
 0x9296

	)

11406 
	#GL_DARKEN_NV
 0x9297

	)

11407 
	#GL_LIGHTEN_NV
 0x9298

	)

11408 
	#GL_COLORDODGE_NV
 0x9299

	)

11409 
	#GL_COLORBURN_NV
 0x929A

	)

11410 
	#GL_HARDLIGHT_NV
 0x929B

	)

11411 
	#GL_SOFTLIGHT_NV
 0x929C

	)

11412 
	#GL_DIFFERENCE_NV
 0x929E

	)

11413 
	#GL_MINUS_NV
 0x929F

	)

11414 
	#GL_EXCLUSION_NV
 0x92A0

	)

11415 
	#GL_CONTRAST_NV
 0x92A1

	)

11416 
	#GL_INVERT_RGB_NV
 0x92A3

	)

11417 
	#GL_LINEARDODGE_NV
 0x92A4

	)

11418 
	#GL_LINEARBURN_NV
 0x92A5

	)

11419 
	#GL_VIVIDLIGHT_NV
 0x92A6

	)

11420 
	#GL_LINEARLIGHT_NV
 0x92A7

	)

11421 
	#GL_PINLIGHT_NV
 0x92A8

	)

11422 
	#GL_HARDMIX_NV
 0x92A9

	)

11423 
	#GL_HSL_HUE_NV
 0x92AD

	)

11424 
	#GL_HSL_SATURATION_NV
 0x92AE

	)

11425 
	#GL_HSL_COLOR_NV
 0x92AF

	)

11426 
	#GL_HSL_LUMINOSITY_NV
 0x92B0

	)

11427 
	#GL_PLUS_CLAMPED_NV
 0x92B1

	)

11428 
	#GL_PLUS_CLAMPED_ALPHA_NV
 0x92B2

	)

11429 
	#GL_MINUS_CLAMPED_NV
 0x92B3

	)

11430 
	#GL_INVERT_OVG_NV
 0x92B4

	)

11432 (
GLAPIENTRY
 * 
	tPFNGLBLENDBARRIERNVPROC
) ();

11433 (
GLAPIENTRY
 * 
	tPFNGLBLENDPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

11435 
	#glBÀndB¨rõrNV
 
	`GLEW_GET_FUN
(
__gÀwBÀndB¨rõrNV
)

	)

11436 
	#glBÀndP¨amëîiNV
 
	`GLEW_GET_FUN
(
__gÀwBÀndP¨amëîiNV
)

	)

11438 
	#GLEW_NV_bÀnd_equ©i⁄_adv™˚d
 
	`GLEW_GET_VAR
(
__GLEW_NV_bÀnd_equ©i⁄_adv™˚d
)

	)

11444 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít


11445 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít
 1

	)

11447 
	#GLEW_NV_bÀnd_equ©i⁄_adv™˚d_cohîít
 
	`GLEW_GET_VAR
(
__GLEW_NV_bÀnd_equ©i⁄_adv™˚d_cohîít
)

	)

11453 #i‚de‡
GL_NV_bÀnd_squ¨e


11454 
	#GL_NV_bÀnd_squ¨e
 1

	)

11456 
	#GLEW_NV_bÀnd_squ¨e
 
	`GLEW_GET_VAR
(
__GLEW_NV_bÀnd_squ¨e
)

	)

11462 #i‚de‡
GL_NV_compuã_¥ogøm5


11463 
	#GL_NV_compuã_¥ogøm5
 1

	)

11465 
	#GL_COMPUTE_PROGRAM_NV
 0x90FB

	)

11466 
	#GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
 0x90FC

	)

11468 
	#GLEW_NV_compuã_¥ogøm5
 
	`GLEW_GET_VAR
(
__GLEW_NV_compuã_¥ogøm5
)

	)

11474 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


11475 
	#GL_NV_c⁄dôi⁄Æ_ªndî
 1

	)

11477 
	#GL_QUERY_WAIT_NV
 0x8E13

	)

11478 
	#GL_QUERY_NO_WAIT_NV
 0x8E14

	)

11479 
	#GL_QUERY_BY_REGION_WAIT_NV
 0x8E15

	)

11480 
	#GL_QUERY_BY_REGION_NO_WAIT_NV
 0x8E16

	)

11482 (
GLAPIENTRY
 * 
	tPFNGLBEGINCONDITIONALRENDERNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

11483 (
GLAPIENTRY
 * 
	tPFNGLENDCONDITIONALRENDERNVPROC
) ();

11485 
	#glBegöC⁄dôi⁄ÆRídîNV
 
	`GLEW_GET_FUN
(
__gÀwBegöC⁄dôi⁄ÆRídîNV
)

	)

11486 
	#glEndC⁄dôi⁄ÆRídîNV
 
	`GLEW_GET_FUN
(
__gÀwEndC⁄dôi⁄ÆRídîNV
)

	)

11488 
	#GLEW_NV_c⁄dôi⁄Æ_ªndî
 
	`GLEW_GET_VAR
(
__GLEW_NV_c⁄dôi⁄Æ_ªndî
)

	)

11494 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


11495 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

11497 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

11498 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

11500 
	#GLEW_NV_c›y_dïth_to_cﬁ‹
 
	`GLEW_GET_VAR
(
__GLEW_NV_c›y_dïth_to_cﬁ‹
)

	)

11506 #i‚de‡
GL_NV_c›y_image


11507 
	#GL_NV_c›y_image
 1

	)

11509 (
GLAPIENTRY
 * 
	tPFNGLCOPYIMAGESUBDATANVPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

11511 
	#glC›yImageSubD©aNV
 
	`GLEW_GET_FUN
(
__gÀwC›yImageSubD©aNV
)

	)

11513 
	#GLEW_NV_c›y_image
 
	`GLEW_GET_VAR
(
__GLEW_NV_c›y_image
)

	)

11519 #i‚de‡
GL_NV_dìp_ãxtuª3D


11520 
	#GL_NV_dìp_ãxtuª3D
 1

	)

11522 
	#GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
 0x90D0

	)

11523 
	#GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
 0x90D1

	)

11525 
	#GLEW_NV_dìp_ãxtuª3D
 
	`GLEW_GET_VAR
(
__GLEW_NV_dìp_ãxtuª3D
)

	)

11531 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


11532 
	#GL_NV_dïth_buf„r_Êﬂt
 1

	)

11534 
	#GL_DEPTH_COMPONENT32F_NV
 0x8DAB

	)

11535 
	#GL_DEPTH32F_STENCIL8_NV
 0x8DAC

	)

11536 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
 0x8DAD

	)

11537 
	#GL_DEPTH_BUFFER_FLOAT_MODE_NV
 0x8DAF

	)

11539 (
GLAPIENTRY
 * 
	tPFNGLCLEARDEPTHDNVPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

11540 (
GLAPIENTRY
 * 
	tPFNGLDEPTHBOUNDSDNVPROC
Ë(
	tGLdoubÀ
 
	tzmö
, GLdoubÀ 
	tzmax
);

11541 (
GLAPIENTRY
 * 
	tPFNGLDEPTHRANGEDNVPROC
Ë(
	tGLdoubÀ
 
	tzNór
, GLdoubÀ 
	tzF¨
);

11543 
	#glCÀ¨DïthdNV
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨DïthdNV
)

	)

11544 
	#glDïthBoundsdNV
 
	`GLEW_GET_FUN
(
__gÀwDïthBoundsdNV
)

	)

11545 
	#glDïthR™gedNV
 
	`GLEW_GET_FUN
(
__gÀwDïthR™gedNV
)

	)

11547 
	#GLEW_NV_dïth_buf„r_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_NV_dïth_buf„r_Êﬂt
)

	)

11553 #i‚de‡
GL_NV_dïth_˛amp


11554 
	#GL_NV_dïth_˛amp
 1

	)

11556 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

11558 
	#GLEW_NV_dïth_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_NV_dïth_˛amp
)

	)

11564 #i‚de‡
GL_NV_dïth_ønge_un˛am≥d


11565 
	#GL_NV_dïth_ønge_un˛am≥d
 1

	)

11567 
	#GL_SAMPLE_COUNT_BITS_NV
 0x8864

	)

11568 
	#GL_CURRENT_SAMPLE_COUNT_QUERY_NV
 0x8865

	)

11569 
	#GL_QUERY_RESULT_NV
 0x8866

	)

11570 
	#GL_QUERY_RESULT_AVAILABLE_NV
 0x8867

	)

11571 
	#GL_SAMPLE_COUNT_NV
 0x8914

	)

11573 
	#GLEW_NV_dïth_ønge_un˛am≥d
 
	`GLEW_GET_VAR
(
__GLEW_NV_dïth_ønge_un˛am≥d
)

	)

11579 #i‚de‡
GL_NV_døw_ãxtuª


11580 
	#GL_NV_døw_ãxtuª
 1

	)

11582 (
GLAPIENTRY
 * 
	tPFNGLDRAWTEXTURENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
, 
	tGLÊﬂt
 
	tx0
, GLÊﬂà
	ty0
, GLÊﬂà
	tx1
, GLÊﬂà
	ty1
, GLÊﬂà
	tz
, GLÊﬂà
	ts0
, GLÊﬂà
	tt0
, GLÊﬂà
	ts1
, GLÊﬂà
	tt1
);

11584 
	#glDøwTextuªNV
 
	`GLEW_GET_FUN
(
__gÀwDøwTextuªNV
)

	)

11586 
	#GLEW_NV_døw_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_NV_døw_ãxtuª
)

	)

11592 #i‚de‡
GL_NV_evÆu©‹s


11593 
	#GL_NV_evÆu©‹s
 1

	)

11595 
	#GL_EVAL_2D_NV
 0x86C0

	)

11596 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

11597 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

11598 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

11599 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

11600 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

11601 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

11602 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

11603 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

11604 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

11605 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

11606 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

11607 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

11608 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

11609 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

11610 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

11611 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

11612 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

11613 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

11614 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

11615 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

11616 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

11617 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

11618 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

11620 (
GLAPIENTRY
 * 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

11621 (
GLAPIENTRY
 * 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

11622 (
GLAPIENTRY
 * 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

11623 (
GLAPIENTRY
 * 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, 
	tGLvoid
 *
	tpoöts
);

11624 (
GLAPIENTRY
 * 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

11625 (
GLAPIENTRY
 * 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

11626 (
GLAPIENTRY
 * 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° 
	tGLvoid
 *
	tpoöts
);

11627 (
GLAPIENTRY
 * 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

11628 (
GLAPIENTRY
 * 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

11630 
	#glEvÆM≠sNV
 
	`GLEW_GET_FUN
(
__gÀwEvÆM≠sNV
)

	)

11631 
	#glGëM≠AâribP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëM≠AâribP¨amëîfvNV
)

	)

11632 
	#glGëM≠AâribP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwGëM≠AâribP¨amëîivNV
)

	)

11633 
	#glGëM≠C⁄åﬁPoötsNV
 
	`GLEW_GET_FUN
(
__gÀwGëM≠C⁄åﬁPoötsNV
)

	)

11634 
	#glGëM≠P¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëM≠P¨amëîfvNV
)

	)

11635 
	#glGëM≠P¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwGëM≠P¨amëîivNV
)

	)

11636 
	#glM≠C⁄åﬁPoötsNV
 
	`GLEW_GET_FUN
(
__gÀwM≠C⁄åﬁPoötsNV
)

	)

11637 
	#glM≠P¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwM≠P¨amëîfvNV
)

	)

11638 
	#glM≠P¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwM≠P¨amëîivNV
)

	)

11640 
	#GLEW_NV_evÆu©‹s
 
	`GLEW_GET_VAR
(
__GLEW_NV_evÆu©‹s
)

	)

11646 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


11647 
	#GL_NV_ex∂icô_mu…ißm∂e
 1

	)

11649 
	#GL_SAMPLE_POSITION_NV
 0x8E50

	)

11650 
	#GL_SAMPLE_MASK_NV
 0x8E51

	)

11651 
	#GL_SAMPLE_MASK_VALUE_NV
 0x8E52

	)

11652 
	#GL_TEXTURE_BINDING_RENDERBUFFER_NV
 0x8E53

	)

11653 
	#GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
 0x8E54

	)

11654 
	#GL_TEXTURE_RENDERBUFFER_NV
 0x8E55

	)

11655 
	#GL_SAMPLER_RENDERBUFFER_NV
 0x8E56

	)

11656 
	#GL_INT_SAMPLER_RENDERBUFFER_NV
 0x8E57

	)

11657 
	#GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
 0x8E58

	)

11658 
	#GL_MAX_SAMPLE_MASK_WORDS_NV
 0x8E59

	)

11660 (
GLAPIENTRY
 * 
	tPFNGLGETMULTISAMPLEFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
* 
	tvÆ
);

11661 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEMASKINDEXEDNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

11662 (
GLAPIENTRY
 * 
	tPFNGLTEXRENDERBUFFERNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

11664 
	#glGëMu…ißm∂efvNV
 
	`GLEW_GET_FUN
(
__gÀwGëMu…ißm∂efvNV
)

	)

11665 
	#glSam∂eMaskIndexedNV
 
	`GLEW_GET_FUN
(
__gÀwSam∂eMaskIndexedNV
)

	)

11666 
	#glTexRídîbuf„rNV
 
	`GLEW_GET_FUN
(
__gÀwTexRídîbuf„rNV
)

	)

11668 
	#GLEW_NV_ex∂icô_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_NV_ex∂icô_mu…ißm∂e
)

	)

11674 #i‚de‡
GL_NV_„n˚


11675 
	#GL_NV_„n˚
 1

	)

11677 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

11678 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

11679 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

11681 (
GLAPIENTRY
 * 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	t„n˚s
);

11682 (
GLAPIENTRY
 * 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

11683 (
GLAPIENTRY
 * 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	t„n˚s
);

11684 (
GLAPIENTRY
 * 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

11685 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

11686 (
GLAPIENTRY
 * 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

11687 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

11689 
	#glDñëeFí˚sNV
 
	`GLEW_GET_FUN
(
__gÀwDñëeFí˚sNV
)

	)

11690 
	#glFöishFí˚NV
 
	`GLEW_GET_FUN
(
__gÀwFöishFí˚NV
)

	)

11691 
	#glGíFí˚sNV
 
	`GLEW_GET_FUN
(
__gÀwGíFí˚sNV
)

	)

11692 
	#glGëFí˚ivNV
 
	`GLEW_GET_FUN
(
__gÀwGëFí˚ivNV
)

	)

11693 
	#glIsFí˚NV
 
	`GLEW_GET_FUN
(
__gÀwIsFí˚NV
)

	)

11694 
	#glSëFí˚NV
 
	`GLEW_GET_FUN
(
__gÀwSëFí˚NV
)

	)

11695 
	#glTe°Fí˚NV
 
	`GLEW_GET_FUN
(
__gÀwTe°Fí˚NV
)

	)

11697 
	#GLEW_NV_„n˚
 
	`GLEW_GET_VAR
(
__GLEW_NV_„n˚
)

	)

11703 #i‚de‡
GL_NV_Êﬂt_buf„r


11704 
	#GL_NV_Êﬂt_buf„r
 1

	)

11706 
	#GL_FLOAT_R_NV
 0x8880

	)

11707 
	#GL_FLOAT_RG_NV
 0x8881

	)

11708 
	#GL_FLOAT_RGB_NV
 0x8882

	)

11709 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

11710 
	#GL_FLOAT_R16_NV
 0x8884

	)

11711 
	#GL_FLOAT_R32_NV
 0x8885

	)

11712 
	#GL_FLOAT_RG16_NV
 0x8886

	)

11713 
	#GL_FLOAT_RG32_NV
 0x8887

	)

11714 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

11715 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

11716 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

11717 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

11718 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

11719 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

11720 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

11722 
	#GLEW_NV_Êﬂt_buf„r
 
	`GLEW_GET_VAR
(
__GLEW_NV_Êﬂt_buf„r
)

	)

11728 #i‚de‡
GL_NV_fog_di°™˚


11729 
	#GL_NV_fog_di°™˚
 1

	)

11731 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

11732 
	#GL_EYE_RADIAL_NV
 0x855B

	)

11733 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

11735 
	#GLEW_NV_fog_di°™˚
 
	`GLEW_GET_VAR
(
__GLEW_NV_fog_di°™˚
)

	)

11741 #i‚de‡
GL_NV_‰agmít_¥ogøm


11742 
	#GL_NV_‰agmít_¥ogøm
 1

	)

11744 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

11745 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

11746 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

11747 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

11748 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

11749 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

11751 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

11752 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

11753 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

11754 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t«me
, c⁄° 
	tGLdoubÀ
 
	tv
[]);

11755 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

11756 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t«me
, c⁄° 
	tGLÊﬂt
 
	tv
[]);

11758 
	#glGëProgømNamedP¨amëîdvNV
 
	`GLEW_GET_FUN
(
__gÀwGëProgømNamedP¨amëîdvNV
)

	)

11759 
	#glGëProgømNamedP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëProgømNamedP¨amëîfvNV
)

	)

11760 
	#glProgømNamedP¨amëî4dNV
 
	`GLEW_GET_FUN
(
__gÀwProgømNamedP¨amëî4dNV
)

	)

11761 
	#glProgømNamedP¨amëî4dvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømNamedP¨amëî4dvNV
)

	)

11762 
	#glProgømNamedP¨amëî4fNV
 
	`GLEW_GET_FUN
(
__gÀwProgømNamedP¨amëî4fNV
)

	)

11763 
	#glProgømNamedP¨amëî4fvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømNamedP¨amëî4fvNV
)

	)

11765 
	#GLEW_NV_‰agmít_¥ogøm
 
	`GLEW_GET_VAR
(
__GLEW_NV_‰agmít_¥ogøm
)

	)

11771 #i‚de‡
GL_NV_‰agmít_¥ogøm2


11772 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

11774 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

11775 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

11776 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

11777 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

11778 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

11780 
	#GLEW_NV_‰agmít_¥ogøm2
 
	`GLEW_GET_VAR
(
__GLEW_NV_‰agmít_¥ogøm2
)

	)

11786 #i‚de‡
GL_NV_‰agmít_¥ogøm4


11787 
	#GL_NV_‰agmít_¥ogøm4
 1

	)

11789 
	#GLEW_NV_‰agmít_¥ogøm4
 
	`GLEW_GET_VAR
(
__GLEW_NV_‰agmít_¥ogøm4
)

	)

11795 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


11796 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

11798 
	#GLEW_NV_‰agmít_¥ogøm_›ti⁄
 
	`GLEW_GET_VAR
(
__GLEW_NV_‰agmít_¥ogøm_›ti⁄
)

	)

11804 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


11805 
	#GL_NV_‰amebuf„r_mu…ißm∂e_covîage
 1

	)

11807 
	#GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
 0x8CAB

	)

11808 
	#GL_RENDERBUFFER_COLOR_SAMPLES_NV
 0x8E10

	)

11809 
	#GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E11

	)

11810 
	#GL_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E12

	)

11812 (
GLAPIENTRY
 * 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

11814 
	#glRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
 
	`GLEW_GET_FUN
(
__gÀwRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
)

	)

11816 
	#GLEW_NV_‰amebuf„r_mu…ißm∂e_covîage
 
	`GLEW_GET_VAR
(
__GLEW_NV_‰amebuf„r_mu…ißm∂e_covîage
)

	)

11822 #i‚de‡
GL_NV_geomëry_¥ogøm4


11823 
	#GL_NV_geomëry_¥ogøm4
 1

	)

11825 
	#GL_GEOMETRY_PROGRAM_NV
 0x8C26

	)

11826 
	#GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
 0x8C27

	)

11827 
	#GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
 0x8C28

	)

11829 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMVERTEXLIMITNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlimô
);

11831 
	#glProgømVîãxLimôNV
 
	`GLEW_GET_FUN
(
__gÀwProgømVîãxLimôNV
)

	)

11833 
	#GLEW_NV_geomëry_¥ogøm4
 
	`GLEW_GET_VAR
(
__GLEW_NV_geomëry_¥ogøm4
)

	)

11839 #i‚de‡
GL_NV_geomëry_shadî4


11840 
	#GL_NV_geomëry_shadî4
 1

	)

11842 
	#GLEW_NV_geomëry_shadî4
 
	`GLEW_GET_VAR
(
__GLEW_NV_geomëry_shadî4
)

	)

11848 #i‚de‡
GL_NV_gpu_¥ogøm4


11849 
	#GL_NV_gpu_¥ogøm4
 1

	)

11851 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_NV
 0x8904

	)

11852 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_NV
 0x8905

	)

11853 
	#GL_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8906

	)

11854 
	#GL_PROGRAM_RESULT_COMPONENTS_NV
 0x8907

	)

11855 
	#GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8908

	)

11856 
	#GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
 0x8909

	)

11857 
	#GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
 0x8DA5

	)

11858 
	#GL_MAX_PROGRAM_GENERIC_RESULTS_NV
 0x8DA6

	)

11860 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11861 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

11862 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11863 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

11864 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11865 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11866 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

11867 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

11868 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

11869 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

11870 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

11871 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

11873 
	#glProgømEnvP¨amëîI4iNV
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîI4iNV
)

	)

11874 
	#glProgømEnvP¨amëîI4ivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîI4ivNV
)

	)

11875 
	#glProgømEnvP¨amëîI4uiNV
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîI4uiNV
)

	)

11876 
	#glProgømEnvP¨amëîI4uivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîI4uivNV
)

	)

11877 
	#glProgømEnvP¨amëîsI4ivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîsI4ivNV
)

	)

11878 
	#glProgømEnvP¨amëîsI4uivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømEnvP¨amëîsI4uivNV
)

	)

11879 
	#glProgømLoˇlP¨amëîI4iNV
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîI4iNV
)

	)

11880 
	#glProgømLoˇlP¨amëîI4ivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîI4ivNV
)

	)

11881 
	#glProgømLoˇlP¨amëîI4uiNV
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîI4uiNV
)

	)

11882 
	#glProgømLoˇlP¨amëîI4uivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîI4uivNV
)

	)

11883 
	#glProgømLoˇlP¨amëîsI4ivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîsI4ivNV
)

	)

11884 
	#glProgømLoˇlP¨amëîsI4uivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømLoˇlP¨amëîsI4uivNV
)

	)

11886 
	#GLEW_NV_gpu_¥ogøm4
 
	`GLEW_GET_VAR
(
__GLEW_NV_gpu_¥ogøm4
)

	)

11892 #i‚de‡
GL_NV_gpu_¥ogøm5


11893 
	#GL_NV_gpu_¥ogøm5
 1

	)

11895 
	#GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
 0x8E5A

	)

11896 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5B

	)

11897 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5C

	)

11898 
	#GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
 0x8E5D

	)

11899 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5E

	)

11900 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5F

	)

11902 
	#GLEW_NV_gpu_¥ogøm5
 
	`GLEW_GET_VAR
(
__GLEW_NV_gpu_¥ogøm5
)

	)

11908 #i‚de‡
GL_NV_gpu_¥ogøm5_mem_exãnded


11909 
	#GL_NV_gpu_¥ogøm5_mem_exãnded
 1

	)

11911 
	#GLEW_NV_gpu_¥ogøm5_mem_exãnded
 
	`GLEW_GET_VAR
(
__GLEW_NV_gpu_¥ogøm5_mem_exãnded
)

	)

11917 #i‚de‡
GL_NV_gpu_¥ogøm_Â64


11918 
	#GL_NV_gpu_¥ogøm_Â64
 1

	)

11920 
	#GLEW_NV_gpu_¥ogøm_Â64
 
	`GLEW_GET_VAR
(
__GLEW_NV_gpu_¥ogøm_Â64
)

	)

11926 #i‚de‡
GL_NV_gpu_shadî5


11927 
	#GL_NV_gpu_shadî5
 1

	)

11929 
	#GL_INT64_NV
 0x140E

	)

11930 
	#GL_UNSIGNED_INT64_NV
 0x140F

	)

11931 
	#GL_INT8_NV
 0x8FE0

	)

11932 
	#GL_INT8_VEC2_NV
 0x8FE1

	)

11933 
	#GL_INT8_VEC3_NV
 0x8FE2

	)

11934 
	#GL_INT8_VEC4_NV
 0x8FE3

	)

11935 
	#GL_INT16_NV
 0x8FE4

	)

11936 
	#GL_INT16_VEC2_NV
 0x8FE5

	)

11937 
	#GL_INT16_VEC3_NV
 0x8FE6

	)

11938 
	#GL_INT16_VEC4_NV
 0x8FE7

	)

11939 
	#GL_INT64_VEC2_NV
 0x8FE9

	)

11940 
	#GL_INT64_VEC3_NV
 0x8FEA

	)

11941 
	#GL_INT64_VEC4_NV
 0x8FEB

	)

11942 
	#GL_UNSIGNED_INT8_NV
 0x8FEC

	)

11943 
	#GL_UNSIGNED_INT8_VEC2_NV
 0x8FED

	)

11944 
	#GL_UNSIGNED_INT8_VEC3_NV
 0x8FEE

	)

11945 
	#GL_UNSIGNED_INT8_VEC4_NV
 0x8FEF

	)

11946 
	#GL_UNSIGNED_INT16_NV
 0x8FF0

	)

11947 
	#GL_UNSIGNED_INT16_VEC2_NV
 0x8FF1

	)

11948 
	#GL_UNSIGNED_INT16_VEC3_NV
 0x8FF2

	)

11949 
	#GL_UNSIGNED_INT16_VEC4_NV
 0x8FF3

	)

11950 
	#GL_UNSIGNED_INT64_VEC2_NV
 0x8FF5

	)

11951 
	#GL_UNSIGNED_INT64_VEC3_NV
 0x8FF6

	)

11952 
	#GL_UNSIGNED_INT64_VEC4_NV
 0x8FF7

	)

11953 
	#GL_FLOAT16_NV
 0x8FF8

	)

11954 
	#GL_FLOAT16_VEC2_NV
 0x8FF9

	)

11955 
	#GL_FLOAT16_VEC3_NV
 0x8FFA

	)

11956 
	#GL_FLOAT16_VEC4_NV
 0x8FFB

	)

11958 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
* 
	t∑øms
);

11959 (
GLAPIENTRY
 * 
	tPFNGLGETUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
* 
	t∑øms
);

11960 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

11961 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11962 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

11963 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM1UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11964 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

11965 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11966 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

11967 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM2UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11968 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

11969 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11970 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

11971 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM3UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11972 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

11973 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11974 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

11975 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORM4UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11976 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

11977 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11978 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

11979 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM1UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11980 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

11981 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11982 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

11983 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM2UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11984 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

11985 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11986 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

11987 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM3UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11988 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

11989 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
* 
	tvÆue
);

11990 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

11991 (
GLAPIENTRY
 * 
	tPFNGLUNIFORM4UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

11993 
	#glGëUnif‹mi64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mi64vNV
)

	)

11994 
	#glGëUnif‹mui64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëUnif‹mui64vNV
)

	)

11995 
	#glProgømUnif‹m1i64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1i64NV
)

	)

11996 
	#glProgømUnif‹m1i64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1i64vNV
)

	)

11997 
	#glProgømUnif‹m1ui64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1ui64NV
)

	)

11998 
	#glProgømUnif‹m1ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m1ui64vNV
)

	)

11999 
	#glProgømUnif‹m2i64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2i64NV
)

	)

12000 
	#glProgømUnif‹m2i64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2i64vNV
)

	)

12001 
	#glProgømUnif‹m2ui64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2ui64NV
)

	)

12002 
	#glProgømUnif‹m2ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m2ui64vNV
)

	)

12003 
	#glProgømUnif‹m3i64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3i64NV
)

	)

12004 
	#glProgømUnif‹m3i64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3i64vNV
)

	)

12005 
	#glProgømUnif‹m3ui64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3ui64NV
)

	)

12006 
	#glProgømUnif‹m3ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m3ui64vNV
)

	)

12007 
	#glProgømUnif‹m4i64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4i64NV
)

	)

12008 
	#glProgømUnif‹m4i64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4i64vNV
)

	)

12009 
	#glProgømUnif‹m4ui64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4ui64NV
)

	)

12010 
	#glProgømUnif‹m4ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹m4ui64vNV
)

	)

12011 
	#glUnif‹m1i64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1i64NV
)

	)

12012 
	#glUnif‹m1i64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1i64vNV
)

	)

12013 
	#glUnif‹m1ui64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1ui64NV
)

	)

12014 
	#glUnif‹m1ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m1ui64vNV
)

	)

12015 
	#glUnif‹m2i64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2i64NV
)

	)

12016 
	#glUnif‹m2i64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2i64vNV
)

	)

12017 
	#glUnif‹m2ui64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2ui64NV
)

	)

12018 
	#glUnif‹m2ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m2ui64vNV
)

	)

12019 
	#glUnif‹m3i64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3i64NV
)

	)

12020 
	#glUnif‹m3i64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3i64vNV
)

	)

12021 
	#glUnif‹m3ui64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3ui64NV
)

	)

12022 
	#glUnif‹m3ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m3ui64vNV
)

	)

12023 
	#glUnif‹m4i64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4i64NV
)

	)

12024 
	#glUnif‹m4i64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4i64vNV
)

	)

12025 
	#glUnif‹m4ui64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4ui64NV
)

	)

12026 
	#glUnif‹m4ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹m4ui64vNV
)

	)

12028 
	#GLEW_NV_gpu_shadî5
 
	`GLEW_GET_VAR
(
__GLEW_NV_gpu_shadî5
)

	)

12034 #i‚de‡
GL_NV_hÆf_Êﬂt


12035 
	#GL_NV_hÆf_Êﬂt
 1

	)

12037 
	#GL_HALF_FLOAT_NV
 0x140B

	)

12039 
	tGLhÆf
;

12041 (
GLAPIENTRY
 * 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆf
 
	tªd
, GLhÆ‡
	tgªí
, GLhÆ‡
	tblue
);

12042 (
GLAPIENTRY
 * 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

12043 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆf
 
	tªd
, GLhÆ‡
	tgªí
, GLhÆ‡
	tblue
, GLhÆ‡
	tÆpha
);

12044 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

12045 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆf
 
	tfog
);

12046 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tfog
);

12047 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆf
 
	ts
);

12048 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆf
* 
	tv
);

12049 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆf
 
	ts
, GLhÆ‡
	tt
);

12050 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆf
* 
	tv
);

12051 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆf
 
	ts
, GLhÆ‡
	tt
, GLhÆ‡
	tr
);

12052 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆf
* 
	tv
);

12053 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆf
 
	ts
, GLhÆ‡
	tt
, GLhÆ‡
	tr
, GLhÆ‡
	tq
);

12054 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆf
* 
	tv
);

12055 (
GLAPIENTRY
 * 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆf
 
	tnx
, GLhÆ‡
	tny
, GLhÆ‡
	tnz
);

12056 (
GLAPIENTRY
 * 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

12057 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆf
 
	tªd
, GLhÆ‡
	tgªí
, GLhÆ‡
	tblue
);

12058 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

12059 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆf
 
	ts
);

12060 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

12061 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆf
 
	ts
, GLhÆ‡
	tt
);

12062 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

12063 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆf
 
	ts
, GLhÆ‡
	tt
, GLhÆ‡
	tr
);

12064 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

12065 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆf
 
	ts
, GLhÆ‡
	tt
, GLhÆ‡
	tr
, GLhÆ‡
	tq
);

12066 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

12067 (
GLAPIENTRY
 * 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆf
 
	tx
, GLhÆ‡
	ty
);

12068 (
GLAPIENTRY
 * 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

12069 (
GLAPIENTRY
 * 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆf
 
	tx
, GLhÆ‡
	ty
, GLhÆ‡
	tz
);

12070 (
GLAPIENTRY
 * 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

12071 (
GLAPIENTRY
 * 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆf
 
	tx
, GLhÆ‡
	ty
, GLhÆ‡
	tz
, GLhÆ‡
	tw
);

12072 (
GLAPIENTRY
 * 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tv
);

12073 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆf
 
	tx
);

12074 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆf
* 
	tv
);

12075 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆf
 
	tx
, GLhÆ‡
	ty
);

12076 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆf
* 
	tv
);

12077 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆf
 
	tx
, GLhÆ‡
	ty
, GLhÆ‡
	tz
);

12078 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆf
* 
	tv
);

12079 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆf
 
	tx
, GLhÆ‡
	ty
, GLhÆ‡
	tz
, GLhÆ‡
	tw
);

12080 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆf
* 
	tv
);

12081 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆf
* 
	tv
);

12082 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆf
* 
	tv
);

12083 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆf
* 
	tv
);

12084 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆf
* 
	tv
);

12085 (
GLAPIENTRY
 * 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆf
 
	tweight
);

12086 (
GLAPIENTRY
 * 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆf
* 
	tweight
);

12088 
	#glCﬁ‹3hNV
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹3hNV
)

	)

12089 
	#glCﬁ‹3hvNV
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹3hvNV
)

	)

12090 
	#glCﬁ‹4hNV
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4hNV
)

	)

12091 
	#glCﬁ‹4hvNV
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4hvNV
)

	)

12092 
	#glFogCo‹dhNV
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dhNV
)

	)

12093 
	#glFogCo‹dhvNV
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dhvNV
)

	)

12094 
	#glMu…iTexCo‹d1hNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1hNV
)

	)

12095 
	#glMu…iTexCo‹d1hvNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d1hvNV
)

	)

12096 
	#glMu…iTexCo‹d2hNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2hNV
)

	)

12097 
	#glMu…iTexCo‹d2hvNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d2hvNV
)

	)

12098 
	#glMu…iTexCo‹d3hNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3hNV
)

	)

12099 
	#glMu…iTexCo‹d3hvNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d3hvNV
)

	)

12100 
	#glMu…iTexCo‹d4hNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4hNV
)

	)

12101 
	#glMu…iTexCo‹d4hvNV
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4hvNV
)

	)

12102 
	#glN‹mÆ3hNV
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆ3hNV
)

	)

12103 
	#glN‹mÆ3hvNV
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆ3hvNV
)

	)

12104 
	#glSec⁄d¨yCﬁ‹3hNV
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3hNV
)

	)

12105 
	#glSec⁄d¨yCﬁ‹3hvNV
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹3hvNV
)

	)

12106 
	#glTexCo‹d1hNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d1hNV
)

	)

12107 
	#glTexCo‹d1hvNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d1hvNV
)

	)

12108 
	#glTexCo‹d2hNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2hNV
)

	)

12109 
	#glTexCo‹d2hvNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2hvNV
)

	)

12110 
	#glTexCo‹d3hNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d3hNV
)

	)

12111 
	#glTexCo‹d3hvNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d3hvNV
)

	)

12112 
	#glTexCo‹d4hNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d4hNV
)

	)

12113 
	#glTexCo‹d4hvNV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d4hvNV
)

	)

12114 
	#glVîãx2hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãx2hNV
)

	)

12115 
	#glVîãx2hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãx2hvNV
)

	)

12116 
	#glVîãx3hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãx3hNV
)

	)

12117 
	#glVîãx3hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãx3hvNV
)

	)

12118 
	#glVîãx4hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãx4hNV
)

	)

12119 
	#glVîãx4hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãx4hvNV
)

	)

12120 
	#glVîãxAârib1hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1hNV
)

	)

12121 
	#glVîãxAârib1hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1hvNV
)

	)

12122 
	#glVîãxAârib2hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2hNV
)

	)

12123 
	#glVîãxAârib2hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2hvNV
)

	)

12124 
	#glVîãxAârib3hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3hNV
)

	)

12125 
	#glVîãxAârib3hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3hvNV
)

	)

12126 
	#glVîãxAârib4hNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4hNV
)

	)

12127 
	#glVîãxAârib4hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4hvNV
)

	)

12128 
	#glVîãxAâribs1hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs1hvNV
)

	)

12129 
	#glVîãxAâribs2hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs2hvNV
)

	)

12130 
	#glVîãxAâribs3hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs3hvNV
)

	)

12131 
	#glVîãxAâribs4hvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs4hvNV
)

	)

12132 
	#glVîãxWeighthNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxWeighthNV
)

	)

12133 
	#glVîãxWeighthvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxWeighthvNV
)

	)

12135 
	#GLEW_NV_hÆf_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_NV_hÆf_Êﬂt
)

	)

12141 #i‚de‡
GL_NV_light_max_exp⁄ít


12142 
	#GL_NV_light_max_exp⁄ít
 1

	)

12144 
	#GL_MAX_SHININESS_NV
 0x8504

	)

12145 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

12147 
	#GLEW_NV_light_max_exp⁄ít
 
	`GLEW_GET_VAR
(
__GLEW_NV_light_max_exp⁄ít
)

	)

12153 #i‚de‡
GL_NV_mu…ißm∂e_covîage


12154 
	#GL_NV_mu…ißm∂e_covîage
 1

	)

12156 
	#GL_COLOR_SAMPLES_NV
 0x8E20

	)

12158 
	#GLEW_NV_mu…ißm∂e_covîage
 
	`GLEW_GET_VAR
(
__GLEW_NV_mu…ißm∂e_covîage
)

	)

12164 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


12165 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

12167 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

12169 
	#GLEW_NV_mu…ißm∂e_fûãr_höt
 
	`GLEW_GET_VAR
(
__GLEW_NV_mu…ißm∂e_fûãr_höt
)

	)

12175 #i‚de‡
GL_NV_oc˛usi⁄_quîy


12176 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

12178 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

12179 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

12180 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

12181 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

12183 (
GLAPIENTRY
 * 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

12184 (
GLAPIENTRY
 * 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
);

12185 (
GLAPIENTRY
 * 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

12186 (
GLAPIENTRY
 * 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

12187 (
GLAPIENTRY
 * 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

12188 (
GLAPIENTRY
 * 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöt* 
	t∑øms
);

12189 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

12191 
	#glBegöOc˛usi⁄QuîyNV
 
	`GLEW_GET_FUN
(
__gÀwBegöOc˛usi⁄QuîyNV
)

	)

12192 
	#glDñëeOc˛usi⁄QuîõsNV
 
	`GLEW_GET_FUN
(
__gÀwDñëeOc˛usi⁄QuîõsNV
)

	)

12193 
	#glEndOc˛usi⁄QuîyNV
 
	`GLEW_GET_FUN
(
__gÀwEndOc˛usi⁄QuîyNV
)

	)

12194 
	#glGíOc˛usi⁄QuîõsNV
 
	`GLEW_GET_FUN
(
__gÀwGíOc˛usi⁄QuîõsNV
)

	)

12195 
	#glGëOc˛usi⁄QuîyivNV
 
	`GLEW_GET_FUN
(
__gÀwGëOc˛usi⁄QuîyivNV
)

	)

12196 
	#glGëOc˛usi⁄QuîyuivNV
 
	`GLEW_GET_FUN
(
__gÀwGëOc˛usi⁄QuîyuivNV
)

	)

12197 
	#glIsOc˛usi⁄QuîyNV
 
	`GLEW_GET_FUN
(
__gÀwIsOc˛usi⁄QuîyNV
)

	)

12199 
	#GLEW_NV_oc˛usi⁄_quîy
 
	`GLEW_GET_VAR
(
__GLEW_NV_oc˛usi⁄_quîy
)

	)

12205 #i‚de‡
GL_NV_∑cked_dïth_°ícû


12206 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

12208 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

12209 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

12211 
	#GLEW_NV_∑cked_dïth_°ícû
 
	`GLEW_GET_VAR
(
__GLEW_NV_∑cked_dïth_°ícû
)

	)

12217 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


12218 
	#GL_NV_∑ømëî_buf„r_obje˘
 1

	)

12220 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
 0x8DA0

	)

12221 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
 0x8DA1

	)

12222 
	#GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA2

	)

12223 
	#GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA3

	)

12224 
	#GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA4

	)

12226 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

12227 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

12228 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

12230 
	#glProgømBuf„rP¨amëîsIivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømBuf„rP¨amëîsIivNV
)

	)

12231 
	#glProgømBuf„rP¨amëîsIuivNV
 
	`GLEW_GET_FUN
(
__gÀwProgømBuf„rP¨amëîsIuivNV
)

	)

12232 
	#glProgømBuf„rP¨amëîsfvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømBuf„rP¨amëîsfvNV
)

	)

12234 
	#GLEW_NV_∑ømëî_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_NV_∑ømëî_buf„r_obje˘
)

	)

12240 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


12241 
	#GL_NV_∑ømëî_buf„r_obje˘2
 1

	)

12243 
	#GLEW_NV_∑ømëî_buf„r_obje˘2
 
	`GLEW_GET_VAR
(
__GLEW_NV_∑ømëî_buf„r_obje˘2
)

	)

12249 #i‚de‡
GL_NV_∑th_ªndîög


12250 
	#GL_NV_∑th_ªndîög
 1

	)

12252 
	#GL_CLOSE_PATH_NV
 0x00

	)

12253 
	#GL_BOLD_BIT_NV
 0x01

	)

12254 
	#GL_GLYPH_WIDTH_BIT_NV
 0x01

	)

12255 
	#GL_GLYPH_HEIGHT_BIT_NV
 0x02

	)

12256 
	#GL_ITALIC_BIT_NV
 0x02

	)

12257 
	#GL_MOVE_TO_NV
 0x02

	)

12258 
	#GL_RELATIVE_MOVE_TO_NV
 0x03

	)

12259 
	#GL_LINE_TO_NV
 0x04

	)

12260 
	#GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
 0x04

	)

12261 
	#GL_RELATIVE_LINE_TO_NV
 0x05

	)

12262 
	#GL_HORIZONTAL_LINE_TO_NV
 0x06

	)

12263 
	#GL_RELATIVE_HORIZONTAL_LINE_TO_NV
 0x07

	)

12264 
	#GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
 0x08

	)

12265 
	#GL_VERTICAL_LINE_TO_NV
 0x08

	)

12266 
	#GL_RELATIVE_VERTICAL_LINE_TO_NV
 0x09

	)

12267 
	#GL_QUADRATIC_CURVE_TO_NV
 0x0A

	)

12268 
	#GL_RELATIVE_QUADRATIC_CURVE_TO_NV
 0x0B

	)

12269 
	#GL_CUBIC_CURVE_TO_NV
 0x0C

	)

12270 
	#GL_RELATIVE_CUBIC_CURVE_TO_NV
 0x0D

	)

12271 
	#GL_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0E

	)

12272 
	#GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0F

	)

12273 
	#GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
 0x10

	)

12274 
	#GL_SMOOTH_CUBIC_CURVE_TO_NV
 0x10

	)

12275 
	#GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
 0x11

	)

12276 
	#GL_SMALL_CCW_ARC_TO_NV
 0x12

	)

12277 
	#GL_RELATIVE_SMALL_CCW_ARC_TO_NV
 0x13

	)

12278 
	#GL_SMALL_CW_ARC_TO_NV
 0x14

	)

12279 
	#GL_RELATIVE_SMALL_CW_ARC_TO_NV
 0x15

	)

12280 
	#GL_LARGE_CCW_ARC_TO_NV
 0x16

	)

12281 
	#GL_RELATIVE_LARGE_CCW_ARC_TO_NV
 0x17

	)

12282 
	#GL_LARGE_CW_ARC_TO_NV
 0x18

	)

12283 
	#GL_RELATIVE_LARGE_CW_ARC_TO_NV
 0x19

	)

12284 
	#GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
 0x20

	)

12285 
	#GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
 0x40

	)

12286 
	#GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
 0x80

	)

12287 
	#GL_RESTART_PATH_NV
 0xF0

	)

12288 
	#GL_DUP_FIRST_CUBIC_CURVE_TO_NV
 0xF2

	)

12289 
	#GL_DUP_LAST_CUBIC_CURVE_TO_NV
 0xF4

	)

12290 
	#GL_RECT_NV
 0xF6

	)

12291 
	#GL_CIRCULAR_CCW_ARC_TO_NV
 0xF8

	)

12292 
	#GL_CIRCULAR_CW_ARC_TO_NV
 0xFA

	)

12293 
	#GL_CIRCULAR_TANGENT_ARC_TO_NV
 0xFC

	)

12294 
	#GL_ARC_TO_NV
 0xFE

	)

12295 
	#GL_RELATIVE_ARC_TO_NV
 0xFF

	)

12296 
	#GL_GLYPH_HAS_KERNING_BIT_NV
 0x100

	)

12297 
	#GL_PRIMARY_COLOR
 0x8577

	)

12298 
	#GL_PATH_FORMAT_SVG_NV
 0x9070

	)

12299 
	#GL_PATH_FORMAT_PS_NV
 0x9071

	)

12300 
	#GL_STANDARD_FONT_NAME_NV
 0x9072

	)

12301 
	#GL_SYSTEM_FONT_NAME_NV
 0x9073

	)

12302 
	#GL_FILE_NAME_NV
 0x9074

	)

12303 
	#GL_PATH_STROKE_WIDTH_NV
 0x9075

	)

12304 
	#GL_PATH_END_CAPS_NV
 0x9076

	)

12305 
	#GL_PATH_INITIAL_END_CAP_NV
 0x9077

	)

12306 
	#GL_PATH_TERMINAL_END_CAP_NV
 0x9078

	)

12307 
	#GL_PATH_JOIN_STYLE_NV
 0x9079

	)

12308 
	#GL_PATH_MITER_LIMIT_NV
 0x907A

	)

12309 
	#GL_PATH_DASH_CAPS_NV
 0x907B

	)

12310 
	#GL_PATH_INITIAL_DASH_CAP_NV
 0x907C

	)

12311 
	#GL_PATH_TERMINAL_DASH_CAP_NV
 0x907D

	)

12312 
	#GL_PATH_DASH_OFFSET_NV
 0x907E

	)

12313 
	#GL_PATH_CLIENT_LENGTH_NV
 0x907F

	)

12314 
	#GL_PATH_FILL_MODE_NV
 0x9080

	)

12315 
	#GL_PATH_FILL_MASK_NV
 0x9081

	)

12316 
	#GL_PATH_FILL_COVER_MODE_NV
 0x9082

	)

12317 
	#GL_PATH_STROKE_COVER_MODE_NV
 0x9083

	)

12318 
	#GL_PATH_STROKE_MASK_NV
 0x9084

	)

12319 
	#GL_COUNT_UP_NV
 0x9088

	)

12320 
	#GL_COUNT_DOWN_NV
 0x9089

	)

12321 
	#GL_PATH_OBJECT_BOUNDING_BOX_NV
 0x908A

	)

12322 
	#GL_CONVEX_HULL_NV
 0x908B

	)

12323 
	#GL_BOUNDING_BOX_NV
 0x908D

	)

12324 
	#GL_TRANSLATE_X_NV
 0x908E

	)

12325 
	#GL_TRANSLATE_Y_NV
 0x908F

	)

12326 
	#GL_TRANSLATE_2D_NV
 0x9090

	)

12327 
	#GL_TRANSLATE_3D_NV
 0x9091

	)

12328 
	#GL_AFFINE_2D_NV
 0x9092

	)

12329 
	#GL_AFFINE_3D_NV
 0x9094

	)

12330 
	#GL_TRANSPOSE_AFFINE_2D_NV
 0x9096

	)

12331 
	#GL_TRANSPOSE_AFFINE_3D_NV
 0x9098

	)

12332 
	#GL_UTF8_NV
 0x909A

	)

12333 
	#GL_UTF16_NV
 0x909B

	)

12334 
	#GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
 0x909C

	)

12335 
	#GL_PATH_COMMAND_COUNT_NV
 0x909D

	)

12336 
	#GL_PATH_COORD_COUNT_NV
 0x909E

	)

12337 
	#GL_PATH_DASH_ARRAY_COUNT_NV
 0x909F

	)

12338 
	#GL_PATH_COMPUTED_LENGTH_NV
 0x90A0

	)

12339 
	#GL_PATH_FILL_BOUNDING_BOX_NV
 0x90A1

	)

12340 
	#GL_PATH_STROKE_BOUNDING_BOX_NV
 0x90A2

	)

12341 
	#GL_SQUARE_NV
 0x90A3

	)

12342 
	#GL_ROUND_NV
 0x90A4

	)

12343 
	#GL_TRIANGULAR_NV
 0x90A5

	)

12344 
	#GL_BEVEL_NV
 0x90A6

	)

12345 
	#GL_MITER_REVERT_NV
 0x90A7

	)

12346 
	#GL_MITER_TRUNCATE_NV
 0x90A8

	)

12347 
	#GL_SKIP_MISSING_GLYPH_NV
 0x90A9

	)

12348 
	#GL_USE_MISSING_GLYPH_NV
 0x90AA

	)

12349 
	#GL_PATH_ERROR_POSITION_NV
 0x90AB

	)

12350 
	#GL_PATH_FOG_GEN_MODE_NV
 0x90AC

	)

12351 
	#GL_ACCUM_ADJACENT_PAIRS_NV
 0x90AD

	)

12352 
	#GL_ADJACENT_PAIRS_NV
 0x90AE

	)

12353 
	#GL_FIRST_TO_REST_NV
 0x90AF

	)

12354 
	#GL_PATH_GEN_MODE_NV
 0x90B0

	)

12355 
	#GL_PATH_GEN_COEFF_NV
 0x90B1

	)

12356 
	#GL_PATH_GEN_COLOR_FORMAT_NV
 0x90B2

	)

12357 
	#GL_PATH_GEN_COMPONENTS_NV
 0x90B3

	)

12358 
	#GL_PATH_DASH_OFFSET_RESET_NV
 0x90B4

	)

12359 
	#GL_MOVE_TO_RESETS_NV
 0x90B5

	)

12360 
	#GL_MOVE_TO_CONTINUES_NV
 0x90B6

	)

12361 
	#GL_PATH_STENCIL_FUNC_NV
 0x90B7

	)

12362 
	#GL_PATH_STENCIL_REF_NV
 0x90B8

	)

12363 
	#GL_PATH_STENCIL_VALUE_MASK_NV
 0x90B9

	)

12364 
	#GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
 0x90BD

	)

12365 
	#GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
 0x90BE

	)

12366 
	#GL_PATH_COVER_DEPTH_FUNC_NV
 0x90BF

	)

12367 
	#GL_FONT_X_MIN_BOUNDS_BIT_NV
 0x00010000

	)

12368 
	#GL_FONT_Y_MIN_BOUNDS_BIT_NV
 0x00020000

	)

12369 
	#GL_FONT_X_MAX_BOUNDS_BIT_NV
 0x00040000

	)

12370 
	#GL_FONT_Y_MAX_BOUNDS_BIT_NV
 0x00080000

	)

12371 
	#GL_FONT_UNITS_PER_EM_BIT_NV
 0x00100000

	)

12372 
	#GL_FONT_ASCENDER_BIT_NV
 0x00200000

	)

12373 
	#GL_FONT_DESCENDER_BIT_NV
 0x00400000

	)

12374 
	#GL_FONT_HEIGHT_BIT_NV
 0x00800000

	)

12375 
	#GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
 0x01000000

	)

12376 
	#GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
 0x02000000

	)

12377 
	#GL_FONT_UNDERLINE_POSITION_BIT_NV
 0x04000000

	)

12378 
	#GL_FONT_UNDERLINE_THICKNESS_BIT_NV
 0x08000000

	)

12379 
	#GL_FONT_HAS_KERNING_BIT_NV
 0x10000000

	)

12381 (
GLAPIENTRY
 * 
	tPFNGLCOPYPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
);

12382 (
GLAPIENTRY
 * 
	tPFNGLCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° * 
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12383 (
GLAPIENTRY
 * 
	tPFNGLCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

12384 (
GLAPIENTRY
 * 
	tPFNGLCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° * 
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12385 (
GLAPIENTRY
 * 
	tPFNGLCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t«me
, 
	tGLíum
 
	tcovîMode
);

12386 (
GLAPIENTRY
 * 
	tPFNGLDELETEPATHSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tønge
);

12387 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGENPATHSNVPROC
Ë(
	tGLsizei
 
	tønge
);

12388 (
GLAPIENTRY
 * 
	tPFNGLGETPATHCOLORGENFVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	tvÆue
);

12389 (
GLAPIENTRY
 * 
	tPFNGLGETPATHCOLORGENIVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLöt
* 
	tvÆue
);

12390 (
GLAPIENTRY
 * 
	tPFNGLGETPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t«me
, 
	tGLubyã
* 
	tcomm™ds
);

12391 (
GLAPIENTRY
 * 
	tPFNGLGETPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t«me
, 
	tGLÊﬂt
* 
	tco‹ds
);

12392 (
GLAPIENTRY
 * 
	tPFNGLGETPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t«me
, 
	tGLÊﬂt
* 
	tdashAºay
);

12393 
GLÊﬂt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETPATHLENGTHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
);

12394 (
GLAPIENTRY
 * 
	tPFNGLGETPATHMETRICRANGENVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLuöt
 
	tfi°P©hName
, 
	tGLsizei
 
	tnumP©hs
, GLsizeò
	t°ride
, 
	tGLÊﬂt
* 
	tmërics
);

12395 (
GLAPIENTRY
 * 
	tPFNGLGETPATHMETRICSNVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° * 
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

12396 (
GLAPIENTRY
 * 
	tPFNGLGETPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t«me
, 
	tGLíum
 
	t∑øm
, 
	tGLÊﬂt
* 
	tvÆue
);

12397 (
GLAPIENTRY
 * 
	tPFNGLGETPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t«me
, 
	tGLíum
 
	t∑øm
, 
	tGLöt
* 
	tvÆue
);

12398 (
GLAPIENTRY
 * 
	tPFNGLGETPATHSPACINGNVPROC
Ë(
	tGLíum
 
	t∑thLi°Mode
, 
	tGLsizei
 
	tnumP©hs
, GLíum 
	t∑thNameTy≥
, c⁄° * 
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLÊﬂt
 
	tadv™˚SˇÀ
, GLÊﬂà
	tkînögSˇÀ
, GLíum 
	tå™sf‹mTy≥
, GLÊﬂà*
	tªtu∫edS∑cög
);

12399 (
GLAPIENTRY
 * 
	tPFNGLGETPATHTEXGENFVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	tvÆue
);

12400 (
GLAPIENTRY
 * 
	tPFNGLGETPATHTEXGENIVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	tvÆue
);

12401 (
GLAPIENTRY
 * 
	tPFNGLINTERPOLATEPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t∑thA
, GLuöà
	t∑thB
, 
	tGLÊﬂt
 
	tweight
);

12402 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
);

12403 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPOINTINFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, GLuöà
	tmask
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

12404 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPOINTINSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

12405 (
GLAPIENTRY
 * 
	tPFNGLPATHCOLORGENNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	tgíMode
, GLíum 
	tcﬁ‹F‹m©
, c⁄° 
	tGLÊﬂt
* 
	tc€ffs
);

12406 (
GLAPIENTRY
 * 
	tPFNGLPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumComm™ds
, c⁄° 
	tGLubyã
* 
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
*
	tco‹ds
);

12407 (
GLAPIENTRY
 * 
	tPFNGLPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° * 
	tco‹ds
);

12408 (
GLAPIENTRY
 * 
	tPFNGLPATHCOVERDEPTHFUNCNVPROC
Ë(
	tGLíum
 
	tzfunc
);

12409 (
GLAPIENTRY
 * 
	tPFNGLPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tdashCou¡
, c⁄° 
	tGLÊﬂt
* 
	tdashAºay
);

12410 (
GLAPIENTRY
 * 
	tPFNGLPATHFOGGENNVPROC
Ë(
	tGLíum
 
	tgíMode
);

12411 (
GLAPIENTRY
 * 
	tPFNGLPATHGLYPHRANGENVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° * 
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°Glyph
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

12412 (
GLAPIENTRY
 * 
	tPFNGLPATHGLYPHSNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° * 
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
*
	tch¨codes
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

12413 (
GLAPIENTRY
 * 
	tPFNGLPATHPARAMETERFNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

12414 (
GLAPIENTRY
 * 
	tPFNGLPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	tvÆue
);

12415 (
GLAPIENTRY
 * 
	tPFNGLPATHPARAMETERINVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

12416 (
GLAPIENTRY
 * 
	tPFNGLPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
* 
	tvÆue
);

12417 (
GLAPIENTRY
 * 
	tPFNGLPATHSTENCILDEPTHOFFSETNVPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
);

12418 (
GLAPIENTRY
 * 
	tPFNGLPATHSTENCILFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

12419 (
GLAPIENTRY
 * 
	tPFNGLPATHSTRINGNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tf‹m©
, 
	tGLsizei
 
	tÀngth
, c⁄° * 
	t∑thSåög
);

12420 (
GLAPIENTRY
 * 
	tPFNGLPATHSUBCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tcomm™dSèπ
, GLsizeò
	tcomm™dsToDñëe
, GLsizeò
	tnumComm™ds
, c⁄° 
	tGLubyã
* 
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° 
	tGLvoid
*
	tco‹ds
);

12421 (
GLAPIENTRY
 * 
	tPFNGLPATHSUBCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tco‹dSèπ
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° * 
	tco‹ds
);

12422 (
GLAPIENTRY
 * 
	tPFNGLPATHTEXGENNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	tgíMode
, 
	tGLöt
 
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
* 
	tc€ffs
);

12423 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLPOINTALONGPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
, 
	tGLÊﬂt
 
	tdi°™˚
, GLÊﬂt* 
	tx
, GLÊﬂà*
	ty
, GLÊﬂà*
	tèngítX
, GLÊﬂà*
	tèngítY
);

12424 (
GLAPIENTRY
 * 
	tPFNGLSTENCILFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° * 
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12425 (
GLAPIENTRY
 * 
	tPFNGLSTENCILFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
);

12426 (
GLAPIENTRY
 * 
	tPFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° * 
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

12427 (
GLAPIENTRY
 * 
	tPFNGLSTENCILSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
);

12428 (
GLAPIENTRY
 * 
	tPFNGLTRANSFORMPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
, 
	tGLíum
 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
* 
	tå™sf‹mVÆues
);

12429 (
GLAPIENTRY
 * 
	tPFNGLWEIGHTPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, 
	tGLsizei
 
	tnumP©hs
, c⁄° GLuöà
	t∑ths
[], c⁄° 
	tGLÊﬂt
 
	tweights
[]);

12431 
	#glC›yP©hNV
 
	`GLEW_GET_FUN
(
__gÀwC›yP©hNV
)

	)

12432 
	#glCovîFûlP©hIn°™˚dNV
 
	`GLEW_GET_FUN
(
__gÀwCovîFûlP©hIn°™˚dNV
)

	)

12433 
	#glCovîFûlP©hNV
 
	`GLEW_GET_FUN
(
__gÀwCovîFûlP©hNV
)

	)

12434 
	#glCovîSåokeP©hIn°™˚dNV
 
	`GLEW_GET_FUN
(
__gÀwCovîSåokeP©hIn°™˚dNV
)

	)

12435 
	#glCovîSåokeP©hNV
 
	`GLEW_GET_FUN
(
__gÀwCovîSåokeP©hNV
)

	)

12436 
	#glDñëeP©hsNV
 
	`GLEW_GET_FUN
(
__gÀwDñëeP©hsNV
)

	)

12437 
	#glGíP©hsNV
 
	`GLEW_GET_FUN
(
__gÀwGíP©hsNV
)

	)

12438 
	#glGëP©hCﬁ‹GífvNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hCﬁ‹GífvNV
)

	)

12439 
	#glGëP©hCﬁ‹GíivNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hCﬁ‹GíivNV
)

	)

12440 
	#glGëP©hComm™dsNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hComm™dsNV
)

	)

12441 
	#glGëP©hCo‹dsNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hCo‹dsNV
)

	)

12442 
	#glGëP©hDashAºayNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hDashAºayNV
)

	)

12443 
	#glGëP©hLígthNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hLígthNV
)

	)

12444 
	#glGëP©hMëricR™geNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hMëricR™geNV
)

	)

12445 
	#glGëP©hMëricsNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hMëricsNV
)

	)

12446 
	#glGëP©hP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hP¨amëîfvNV
)

	)

12447 
	#glGëP©hP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hP¨amëîivNV
)

	)

12448 
	#glGëP©hS∑cögNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hS∑cögNV
)

	)

12449 
	#glGëP©hTexGífvNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hTexGífvNV
)

	)

12450 
	#glGëP©hTexGíivNV
 
	`GLEW_GET_FUN
(
__gÀwGëP©hTexGíivNV
)

	)

12451 
	#glI¡îpﬁ©eP©hsNV
 
	`GLEW_GET_FUN
(
__gÀwI¡îpﬁ©eP©hsNV
)

	)

12452 
	#glIsP©hNV
 
	`GLEW_GET_FUN
(
__gÀwIsP©hNV
)

	)

12453 
	#glIsPoötInFûlP©hNV
 
	`GLEW_GET_FUN
(
__gÀwIsPoötInFûlP©hNV
)

	)

12454 
	#glIsPoötInSåokeP©hNV
 
	`GLEW_GET_FUN
(
__gÀwIsPoötInSåokeP©hNV
)

	)

12455 
	#glP©hCﬁ‹GíNV
 
	`GLEW_GET_FUN
(
__gÀwP©hCﬁ‹GíNV
)

	)

12456 
	#glP©hComm™dsNV
 
	`GLEW_GET_FUN
(
__gÀwP©hComm™dsNV
)

	)

12457 
	#glP©hCo‹dsNV
 
	`GLEW_GET_FUN
(
__gÀwP©hCo‹dsNV
)

	)

12458 
	#glP©hCovîDïthFuncNV
 
	`GLEW_GET_FUN
(
__gÀwP©hCovîDïthFuncNV
)

	)

12459 
	#glP©hDashAºayNV
 
	`GLEW_GET_FUN
(
__gÀwP©hDashAºayNV
)

	)

12460 
	#glP©hFogGíNV
 
	`GLEW_GET_FUN
(
__gÀwP©hFogGíNV
)

	)

12461 
	#glP©hGlyphR™geNV
 
	`GLEW_GET_FUN
(
__gÀwP©hGlyphR™geNV
)

	)

12462 
	#glP©hGlyphsNV
 
	`GLEW_GET_FUN
(
__gÀwP©hGlyphsNV
)

	)

12463 
	#glP©hP¨amëîfNV
 
	`GLEW_GET_FUN
(
__gÀwP©hP¨amëîfNV
)

	)

12464 
	#glP©hP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwP©hP¨amëîfvNV
)

	)

12465 
	#glP©hP¨amëîiNV
 
	`GLEW_GET_FUN
(
__gÀwP©hP¨amëîiNV
)

	)

12466 
	#glP©hP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwP©hP¨amëîivNV
)

	)

12467 
	#glP©hSãncûDïthOff£tNV
 
	`GLEW_GET_FUN
(
__gÀwP©hSãncûDïthOff£tNV
)

	)

12468 
	#glP©hSãncûFuncNV
 
	`GLEW_GET_FUN
(
__gÀwP©hSãncûFuncNV
)

	)

12469 
	#glP©hSåögNV
 
	`GLEW_GET_FUN
(
__gÀwP©hSåögNV
)

	)

12470 
	#glP©hSubComm™dsNV
 
	`GLEW_GET_FUN
(
__gÀwP©hSubComm™dsNV
)

	)

12471 
	#glP©hSubCo‹dsNV
 
	`GLEW_GET_FUN
(
__gÀwP©hSubCo‹dsNV
)

	)

12472 
	#glP©hTexGíNV
 
	`GLEW_GET_FUN
(
__gÀwP©hTexGíNV
)

	)

12473 
	#glPoötAl⁄gP©hNV
 
	`GLEW_GET_FUN
(
__gÀwPoötAl⁄gP©hNV
)

	)

12474 
	#glSãncûFûlP©hIn°™˚dNV
 
	`GLEW_GET_FUN
(
__gÀwSãncûFûlP©hIn°™˚dNV
)

	)

12475 
	#glSãncûFûlP©hNV
 
	`GLEW_GET_FUN
(
__gÀwSãncûFûlP©hNV
)

	)

12476 
	#glSãncûSåokeP©hIn°™˚dNV
 
	`GLEW_GET_FUN
(
__gÀwSãncûSåokeP©hIn°™˚dNV
)

	)

12477 
	#glSãncûSåokeP©hNV
 
	`GLEW_GET_FUN
(
__gÀwSãncûSåokeP©hNV
)

	)

12478 
	#glTønsf‹mP©hNV
 
	`GLEW_GET_FUN
(
__gÀwTønsf‹mP©hNV
)

	)

12479 
	#glWeightP©hsNV
 
	`GLEW_GET_FUN
(
__gÀwWeightP©hsNV
)

	)

12481 
	#GLEW_NV_∑th_ªndîög
 
	`GLEW_GET_VAR
(
__GLEW_NV_∑th_ªndîög
)

	)

12487 #i‚de‡
GL_NV_pixñ_d©a_ønge


12488 
	#GL_NV_pixñ_d©a_ønge
 1

	)

12490 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

12491 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

12492 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

12493 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

12494 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

12495 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

12497 (
GLAPIENTRY
 * 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

12498 (
GLAPIENTRY
 * 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

12500 
	#glFlushPixñD©aR™geNV
 
	`GLEW_GET_FUN
(
__gÀwFlushPixñD©aR™geNV
)

	)

12501 
	#glPixñD©aR™geNV
 
	`GLEW_GET_FUN
(
__gÀwPixñD©aR™geNV
)

	)

12503 
	#GLEW_NV_pixñ_d©a_ønge
 
	`GLEW_GET_VAR
(
__GLEW_NV_pixñ_d©a_ønge
)

	)

12509 #i‚de‡
GL_NV_poöt_•rôe


12510 
	#GL_NV_poöt_•rôe
 1

	)

12512 
	#GL_POINT_SPRITE_NV
 0x8861

	)

12513 
	#GL_COORD_REPLACE_NV
 0x8862

	)

12514 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

12516 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

12517 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

12519 
	#glPoötP¨amëîiNV
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîiNV
)

	)

12520 
	#glPoötP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîivNV
)

	)

12522 
	#GLEW_NV_poöt_•rôe
 
	`GLEW_GET_VAR
(
__GLEW_NV_poöt_•rôe
)

	)

12528 #i‚de‡
GL_NV_¥e£¡_video


12529 
	#GL_NV_¥e£¡_video
 1

	)

12531 
	#GL_FRAME_NV
 0x8E26

	)

12532 
	#GL_FIELDS_NV
 0x8E27

	)

12533 
	#GL_CURRENT_TIME_NV
 0x8E28

	)

12534 
	#GL_NUM_FILL_STREAMS_NV
 0x8E29

	)

12535 
	#GL_PRESENT_TIME_NV
 0x8E2A

	)

12536 
	#GL_PRESENT_DURATION_NV
 0x8E2B

	)

12538 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
* 
	t∑øms
);

12539 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

12540 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOUI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
* 
	t∑øms
);

12541 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOUIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, GLuöt* 
	t∑øms
);

12542 (
GLAPIENTRY
 * 
	tPFNGLPRESENTFRAMEDUALFILLNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLíum 
	tèrgë2
, GLuöà
	tfûl2
, GLíum 
	tèrgë3
, GLuöà
	tfûl3
);

12543 (
GLAPIENTRY
 * 
	tPFNGLPRESENTFRAMEKEYEDNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLuöà
	tkey0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLuöà
	tkey1
);

12545 
	#glGëVideoi64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoi64vNV
)

	)

12546 
	#glGëVideoivNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoivNV
)

	)

12547 
	#glGëVideoui64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoui64vNV
)

	)

12548 
	#glGëVideouivNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideouivNV
)

	)

12549 
	#glPª£¡FømeDuÆFûlNV
 
	`GLEW_GET_FUN
(
__gÀwPª£¡FømeDuÆFûlNV
)

	)

12550 
	#glPª£¡FømeKeyedNV
 
	`GLEW_GET_FUN
(
__gÀwPª£¡FømeKeyedNV
)

	)

12552 
	#GLEW_NV_¥e£¡_video
 
	`GLEW_GET_VAR
(
__GLEW_NV_¥e£¡_video
)

	)

12558 #i‚de‡
GL_NV_¥imôive_ª°¨t


12559 
	#GL_NV_¥imôive_ª°¨t
 1

	)

12561 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

12562 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

12564 (
GLAPIENTRY
 * 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

12565 (
GLAPIENTRY
 * 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

12567 
	#glPrimôiveRe°¨tIndexNV
 
	`GLEW_GET_FUN
(
__gÀwPrimôiveRe°¨tIndexNV
)

	)

12568 
	#glPrimôiveRe°¨tNV
 
	`GLEW_GET_FUN
(
__gÀwPrimôiveRe°¨tNV
)

	)

12570 
	#GLEW_NV_¥imôive_ª°¨t
 
	`GLEW_GET_VAR
(
__GLEW_NV_¥imôive_ª°¨t
)

	)

12576 #i‚de‡
GL_NV_ªgi°î_comböîs


12577 
	#GL_NV_ªgi°î_comböîs
 1

	)

12579 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

12580 
	#GL_VARIABLE_A_NV
 0x8523

	)

12581 
	#GL_VARIABLE_B_NV
 0x8524

	)

12582 
	#GL_VARIABLE_C_NV
 0x8525

	)

12583 
	#GL_VARIABLE_D_NV
 0x8526

	)

12584 
	#GL_VARIABLE_E_NV
 0x8527

	)

12585 
	#GL_VARIABLE_F_NV
 0x8528

	)

12586 
	#GL_VARIABLE_G_NV
 0x8529

	)

12587 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

12588 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

12589 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

12590 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

12591 
	#GL_SPARE0_NV
 0x852E

	)

12592 
	#GL_SPARE1_NV
 0x852F

	)

12593 
	#GL_DISCARD_NV
 0x8530

	)

12594 
	#GL_E_TIMES_F_NV
 0x8531

	)

12595 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

12596 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

12597 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

12598 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

12599 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

12600 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

12601 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

12602 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

12603 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

12604 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

12605 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

12606 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

12607 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

12608 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

12609 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

12610 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

12611 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

12612 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

12613 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

12614 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

12615 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

12616 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

12617 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

12618 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

12619 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

12620 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

12621 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

12622 
	#GL_COMBINER0_NV
 0x8550

	)

12623 
	#GL_COMBINER1_NV
 0x8551

	)

12624 
	#GL_COMBINER2_NV
 0x8552

	)

12625 
	#GL_COMBINER3_NV
 0x8553

	)

12626 
	#GL_COMBINER4_NV
 0x8554

	)

12627 
	#GL_COMBINER5_NV
 0x8555

	)

12628 
	#GL_COMBINER6_NV
 0x8556

	)

12629 
	#GL_COMBINER7_NV
 0x8557

	)

12631 (
GLAPIENTRY
 * 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

12632 (
GLAPIENTRY
 * 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

12633 (
GLAPIENTRY
 * 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

12634 (
GLAPIENTRY
 * 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

12635 (
GLAPIENTRY
 * 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

12636 (
GLAPIENTRY
 * 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

12637 (
GLAPIENTRY
 * 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

12638 (
GLAPIENTRY
 * 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

12639 (
GLAPIENTRY
 * 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

12640 (
GLAPIENTRY
 * 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

12641 (
GLAPIENTRY
 * 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

12642 (
GLAPIENTRY
 * 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

12643 (
GLAPIENTRY
 * 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

12645 
	#glComböîI≈utNV
 
	`GLEW_GET_FUN
(
__gÀwComböîI≈utNV
)

	)

12646 
	#glComböîOuçutNV
 
	`GLEW_GET_FUN
(
__gÀwComböîOuçutNV
)

	)

12647 
	#glComböîP¨amëîfNV
 
	`GLEW_GET_FUN
(
__gÀwComböîP¨amëîfNV
)

	)

12648 
	#glComböîP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwComböîP¨amëîfvNV
)

	)

12649 
	#glComböîP¨amëîiNV
 
	`GLEW_GET_FUN
(
__gÀwComböîP¨amëîiNV
)

	)

12650 
	#glComböîP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwComböîP¨amëîivNV
)

	)

12651 
	#glFöÆComböîI≈utNV
 
	`GLEW_GET_FUN
(
__gÀwFöÆComböîI≈utNV
)

	)

12652 
	#glGëComböîI≈utP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëComböîI≈utP¨amëîfvNV
)

	)

12653 
	#glGëComböîI≈utP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwGëComböîI≈utP¨amëîivNV
)

	)

12654 
	#glGëComböîOuçutP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëComböîOuçutP¨amëîfvNV
)

	)

12655 
	#glGëComböîOuçutP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwGëComböîOuçutP¨amëîivNV
)

	)

12656 
	#glGëFöÆComböîI≈utP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëFöÆComböîI≈utP¨amëîfvNV
)

	)

12657 
	#glGëFöÆComböîI≈utP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwGëFöÆComböîI≈utP¨amëîivNV
)

	)

12659 
	#GLEW_NV_ªgi°î_comböîs
 
	`GLEW_GET_VAR
(
__GLEW_NV_ªgi°î_comböîs
)

	)

12665 #i‚de‡
GL_NV_ªgi°î_comböîs2


12666 
	#GL_NV_ªgi°î_comböîs2
 1

	)

12668 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

12670 (
GLAPIENTRY
 * 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

12671 (
GLAPIENTRY
 * 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

12673 
	#glComböîSègeP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwComböîSègeP¨amëîfvNV
)

	)

12674 
	#glGëComböîSègeP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëComböîSègeP¨amëîfvNV
)

	)

12676 
	#GLEW_NV_ªgi°î_comböîs2
 
	`GLEW_GET_VAR
(
__GLEW_NV_ªgi°î_comböîs2
)

	)

12682 #i‚de‡
GL_NV_shadî_©omic_cou¡îs


12683 
	#GL_NV_shadî_©omic_cou¡îs
 1

	)

12685 
	#GLEW_NV_shadî_©omic_cou¡îs
 
	`GLEW_GET_VAR
(
__GLEW_NV_shadî_©omic_cou¡îs
)

	)

12691 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


12692 
	#GL_NV_shadî_©omic_Êﬂt
 1

	)

12694 
	#GLEW_NV_shadî_©omic_Êﬂt
 
	`GLEW_GET_VAR
(
__GLEW_NV_shadî_©omic_Êﬂt
)

	)

12700 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


12701 
	#GL_NV_shadî_buf„r_lﬂd
 1

	)

12703 
	#GL_BUFFER_GPU_ADDRESS_NV
 0x8F1D

	)

12704 
	#GL_GPU_ADDRESS_NV
 0x8F34

	)

12705 
	#GL_MAX_SHADER_BUFFER_ADDRESS_NV
 0x8F35

	)

12707 (
GLAPIENTRY
 * 
	tPFNGLGETBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt64EXT
* 
	t∑øms
);

12708 (
GLAPIENTRY
 * 
	tPFNGLGETINTEGERUI64VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt64EXT
* 
	tªsu…
);

12709 (
GLAPIENTRY
 * 
	tPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
* 
	t∑øms
);

12710 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

12711 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISNAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

12712 (
GLAPIENTRY
 * 
	tPFNGLMAKEBUFFERNONRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

12713 (
GLAPIENTRY
 * 
	tPFNGLMAKEBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

12714 (
GLAPIENTRY
 * 
	tPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

12715 (
GLAPIENTRY
 * 
	tPFNGLMAKENAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

12716 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

12717 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

12718 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

12719 (
GLAPIENTRY
 * 
	tPFNGLUNIFORMUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
* 
	tvÆue
);

12721 
	#glGëBuf„rP¨amëîui64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëBuf„rP¨amëîui64vNV
)

	)

12722 
	#glGëI¡egîui64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëI¡egîui64vNV
)

	)

12723 
	#glGëNamedBuf„rP¨amëîui64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëNamedBuf„rP¨amëîui64vNV
)

	)

12724 
	#glIsBuf„rResidítNV
 
	`GLEW_GET_FUN
(
__gÀwIsBuf„rResidítNV
)

	)

12725 
	#glIsNamedBuf„rResidítNV
 
	`GLEW_GET_FUN
(
__gÀwIsNamedBuf„rResidítNV
)

	)

12726 
	#glMakeBuf„rN⁄ResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeBuf„rN⁄ResidítNV
)

	)

12727 
	#glMakeBuf„rResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeBuf„rResidítNV
)

	)

12728 
	#glMakeNamedBuf„rN⁄ResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeNamedBuf„rN⁄ResidítNV
)

	)

12729 
	#glMakeNamedBuf„rResidítNV
 
	`GLEW_GET_FUN
(
__gÀwMakeNamedBuf„rResidítNV
)

	)

12730 
	#glProgømUnif‹mui64NV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mui64NV
)

	)

12731 
	#glProgømUnif‹mui64vNV
 
	`GLEW_GET_FUN
(
__gÀwProgømUnif‹mui64vNV
)

	)

12732 
	#glUnif‹mui64NV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mui64NV
)

	)

12733 
	#glUnif‹mui64vNV
 
	`GLEW_GET_FUN
(
__gÀwUnif‹mui64vNV
)

	)

12735 
	#GLEW_NV_shadî_buf„r_lﬂd
 
	`GLEW_GET_VAR
(
__GLEW_NV_shadî_buf„r_lﬂd
)

	)

12741 #i‚de‡
GL_NV_shadî_°‹age_buf„r_obje˘


12742 
	#GL_NV_shadî_°‹age_buf„r_obje˘
 1

	)

12744 
	#GLEW_NV_shadî_°‹age_buf„r_obje˘
 
	`GLEW_GET_VAR
(
__GLEW_NV_shadî_°‹age_buf„r_obje˘
)

	)

12750 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


12751 
	#GL_NV_ãs£Œ©i⁄_¥ogøm5
 1

	)

12753 
	#GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
 0x86D8

	)

12754 
	#GL_TESS_CONTROL_PROGRAM_NV
 0x891E

	)

12755 
	#GL_TESS_EVALUATION_PROGRAM_NV
 0x891F

	)

12756 
	#GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
 0x8C74

	)

12757 
	#GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
 0x8C75

	)

12759 
	#GLEW_NV_ãs£Œ©i⁄_¥ogøm5
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãs£Œ©i⁄_¥ogøm5
)

	)

12765 #i‚de‡
GL_NV_ãxgí_emboss


12766 
	#GL_NV_ãxgí_emboss
 1

	)

12768 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

12769 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

12770 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

12772 
	#GLEW_NV_ãxgí_emboss
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxgí_emboss
)

	)

12778 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


12779 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

12781 
	#GL_NORMAL_MAP_NV
 0x8511

	)

12782 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

12784 
	#GLEW_NV_ãxgí_ªÊe˘i⁄
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxgí_ªÊe˘i⁄
)

	)

12790 #i‚de‡
GL_NV_ãxtuª_b¨rõr


12791 
	#GL_NV_ãxtuª_b¨rõr
 1

	)

12793 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREBARRIERNVPROC
) ();

12795 
	#glTextuªB¨rõrNV
 
	`GLEW_GET_FUN
(
__gÀwTextuªB¨rõrNV
)

	)

12797 
	#GLEW_NV_ãxtuª_b¨rõr
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_b¨rõr
)

	)

12803 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


12804 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

12806 
	#GLEW_NV_ãxtuª_com¥essi⁄_vtc
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_com¥essi⁄_vtc
)

	)

12812 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


12813 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

12815 
	#GL_COMBINE4_NV
 0x8503

	)

12816 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

12817 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

12818 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

12819 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

12821 
	#GLEW_NV_ãxtuª_ív_comböe4
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_ív_comböe4
)

	)

12827 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


12828 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

12830 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

12832 
	#GLEW_NV_ãxtuª_ex∑nd_n‹mÆ
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_ex∑nd_n‹mÆ
)

	)

12838 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


12839 
	#GL_NV_ãxtuª_mu…ißm∂e
 1

	)

12841 
	#GL_TEXTURE_COVERAGE_SAMPLES_NV
 0x9045

	)

12842 
	#GL_TEXTURE_COLOR_SAMPLES_NV
 0x9046

	)

12844 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12845 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12846 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12847 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12848 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12849 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

12851 
	#glTexImage2DMu…ißm∂eCovîageNV
 
	`GLEW_GET_FUN
(
__gÀwTexImage2DMu…ißm∂eCovîageNV
)

	)

12852 
	#glTexImage3DMu…ißm∂eCovîageNV
 
	`GLEW_GET_FUN
(
__gÀwTexImage3DMu…ißm∂eCovîageNV
)

	)

12853 
	#glTextuªImage2DMu…ißm∂eCovîageNV
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage2DMu…ißm∂eCovîageNV
)

	)

12854 
	#glTextuªImage2DMu…ißm∂eNV
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage2DMu…ißm∂eNV
)

	)

12855 
	#glTextuªImage3DMu…ißm∂eCovîageNV
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage3DMu…ißm∂eCovîageNV
)

	)

12856 
	#glTextuªImage3DMu…ißm∂eNV
 
	`GLEW_GET_FUN
(
__gÀwTextuªImage3DMu…ißm∂eNV
)

	)

12858 
	#GLEW_NV_ãxtuª_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_mu…ißm∂e
)

	)

12864 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


12865 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

12867 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

12868 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

12869 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

12870 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

12872 
	#GLEW_NV_ãxtuª_ª˘™gÀ
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_ª˘™gÀ
)

	)

12878 #i‚de‡
GL_NV_ãxtuª_shadî


12879 
	#GL_NV_ãxtuª_shadî
 1

	)

12881 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

12882 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

12883 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

12884 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

12885 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

12886 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

12887 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

12888 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

12889 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

12890 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

12891 
	#GL_CULL_MODES_NV
 0x86E0

	)

12892 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 0x86E1

	)

12893 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

12894 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 0x86E2

	)

12895 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

12896 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

12897 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 0x86E3

	)

12898 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

12899 
	#GL_CONST_EYE_NV
 0x86E5

	)

12900 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

12901 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

12902 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

12903 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

12904 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

12905 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

12906 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

12907 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

12908 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

12909 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

12910 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

12911 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

12912 
	#GL_HILO_NV
 0x86F4

	)

12913 
	#GL_DSDT_NV
 0x86F5

	)

12914 
	#GL_DSDT_MAG_NV
 0x86F6

	)

12915 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

12916 
	#GL_HILO16_NV
 0x86F8

	)

12917 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

12918 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

12919 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

12920 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

12921 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

12922 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

12923 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

12924 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

12925 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

12926 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

12927 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

12928 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

12929 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

12930 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

12931 
	#GL_DSDT8_NV
 0x8709

	)

12932 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

12933 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

12934 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

12935 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

12936 
	#GL_HI_SCALE_NV
 0x870E

	)

12937 
	#GL_LO_SCALE_NV
 0x870F

	)

12938 
	#GL_DS_SCALE_NV
 0x8710

	)

12939 
	#GL_DT_SCALE_NV
 0x8711

	)

12940 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

12941 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

12942 
	#GL_HI_BIAS_NV
 0x8714

	)

12943 
	#GL_LO_BIAS_NV
 0x8715

	)

12944 
	#GL_DS_BIAS_NV
 0x8716

	)

12945 
	#GL_DT_BIAS_NV
 0x8717

	)

12946 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

12947 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

12948 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

12949 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

12950 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

12951 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

12952 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

12953 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

12955 
	#GLEW_NV_ãxtuª_shadî
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_shadî
)

	)

12961 #i‚de‡
GL_NV_ãxtuª_shadî2


12962 
	#GL_NV_ãxtuª_shadî2
 1

	)

12964 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

12965 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

12966 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

12967 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

12968 
	#GL_HILO_NV
 0x86F4

	)

12969 
	#GL_DSDT_NV
 0x86F5

	)

12970 
	#GL_DSDT_MAG_NV
 0x86F6

	)

12971 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

12972 
	#GL_HILO16_NV
 0x86F8

	)

12973 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

12974 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

12975 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

12976 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

12977 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

12978 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

12979 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

12980 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

12981 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

12982 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

12983 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

12984 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

12985 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

12986 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

12987 
	#GL_DSDT8_NV
 0x8709

	)

12988 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

12989 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

12990 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

12991 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

12993 
	#GLEW_NV_ãxtuª_shadî2
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_shadî2
)

	)

12999 #i‚de‡
GL_NV_ãxtuª_shadî3


13000 
	#GL_NV_ãxtuª_shadî3
 1

	)

13002 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

13003 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

13004 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

13005 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

13006 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

13007 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

13008 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

13009 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

13010 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

13011 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

13012 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

13013 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

13014 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

13015 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

13016 
	#GL_HILO8_NV
 0x885E

	)

13017 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

13018 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

13020 
	#GLEW_NV_ãxtuª_shadî3
 
	`GLEW_GET_VAR
(
__GLEW_NV_ãxtuª_shadî3
)

	)

13026 #i‚de‡
GL_NV_å™sf‹m_„edback


13027 
	#GL_NV_å™sf‹m_„edback
 1

	)

13029 
	#GL_BACK_PRIMARY_COLOR_NV
 0x8C77

	)

13030 
	#GL_BACK_SECONDARY_COLOR_NV
 0x8C78

	)

13031 
	#GL_TEXTURE_COORD_NV
 0x8C79

	)

13032 
	#GL_CLIP_DISTANCE_NV
 0x8C7A

	)

13033 
	#GL_VERTEX_ID_NV
 0x8C7B

	)

13034 
	#GL_PRIMITIVE_ID_NV
 0x8C7C

	)

13035 
	#GL_GENERIC_ATTRIB_NV
 0x8C7D

	)

13036 
	#GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
 0x8C7E

	)

13037 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
 0x8C7F

	)

13038 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
 0x8C80

	)

13039 
	#GL_ACTIVE_VARYINGS_NV
 0x8C81

	)

13040 
	#GL_ACTIVE_VARYING_MAX_LENGTH_NV
 0x8C82

	)

13041 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_NV
 0x8C83

	)

13042 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
 0x8C84

	)

13043 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
 0x8C85

	)

13044 
	#GL_TRANSFORM_FEEDBACK_RECORD_NV
 0x8C86

	)

13045 
	#GL_PRIMITIVES_GENERATED_NV
 0x8C87

	)

13046 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
 0x8C88

	)

13047 
	#GL_RASTERIZER_DISCARD_NV
 0x8C89

	)

13048 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
 0x8C8A

	)

13049 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
 0x8C8B

	)

13050 
	#GL_INTERLEAVED_ATTRIBS_NV
 0x8C8C

	)

13051 
	#GL_SEPARATE_ATTRIBS_NV
 0x8C8D

	)

13052 
	#GL_TRANSFORM_FEEDBACK_BUFFER_NV
 0x8C8E

	)

13053 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
 0x8C8F

	)

13055 (
GLAPIENTRY
 * 
	tPFNGLACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

13056 (
GLAPIENTRY
 * 
	tPFNGLBEGINTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

13057 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERBASENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

13058 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFEROFFSETNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

13059 (
GLAPIENTRY
 * 
	tPFNGLBINDBUFFERRANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

13060 (
GLAPIENTRY
 * 
	tPFNGLENDTRANSFORMFEEDBACKNVPROC
) ();

13061 (
GLAPIENTRY
 * 
	tPFNGLGETACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

13062 (
GLAPIENTRY
 * 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLöt
 *
	tloˇti⁄
);

13063 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGETVARYINGLOCATIONNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

13064 (
GLAPIENTRY
 * 
	tPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
Ë(
	tGLuöt
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, 
	tGLíum
 
	tbuf„rMode
);

13065 (
GLAPIENTRY
 * 
	tPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tloˇti⁄s
, 
	tGLíum
 
	tbuf„rMode
);

13067 
	#glA˘iveV¨yögNV
 
	`GLEW_GET_FUN
(
__gÀwA˘iveV¨yögNV
)

	)

13068 
	#glBegöTønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwBegöTønsf‹mFìdbackNV
)

	)

13069 
	#glBödBuf„rBa£NV
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rBa£NV
)

	)

13070 
	#glBödBuf„rOff£tNV
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rOff£tNV
)

	)

13071 
	#glBödBuf„rR™geNV
 
	`GLEW_GET_FUN
(
__gÀwBödBuf„rR™geNV
)

	)

13072 
	#glEndTønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwEndTønsf‹mFìdbackNV
)

	)

13073 
	#glGëA˘iveV¨yögNV
 
	`GLEW_GET_FUN
(
__gÀwGëA˘iveV¨yögNV
)

	)

13074 
	#glGëTønsf‹mFìdbackV¨yögNV
 
	`GLEW_GET_FUN
(
__gÀwGëTønsf‹mFìdbackV¨yögNV
)

	)

13075 
	#glGëV¨yögLoˇti⁄NV
 
	`GLEW_GET_FUN
(
__gÀwGëV¨yögLoˇti⁄NV
)

	)

13076 
	#glTønsf‹mFìdbackAâribsNV
 
	`GLEW_GET_FUN
(
__gÀwTønsf‹mFìdbackAâribsNV
)

	)

13077 
	#glTønsf‹mFìdbackV¨yögsNV
 
	`GLEW_GET_FUN
(
__gÀwTønsf‹mFìdbackV¨yögsNV
)

	)

13079 
	#GLEW_NV_å™sf‹m_„edback
 
	`GLEW_GET_VAR
(
__GLEW_NV_å™sf‹m_„edback
)

	)

13085 #i‚de‡
GL_NV_å™sf‹m_„edback2


13086 
	#GL_NV_å™sf‹m_„edback2
 1

	)

13088 
	#GL_TRANSFORM_FEEDBACK_NV
 0x8E22

	)

13089 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
 0x8E23

	)

13090 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
 0x8E24

	)

13091 
	#GL_TRANSFORM_FEEDBACK_BINDING_NV
 0x8E25

	)

13093 (
GLAPIENTRY
 * 
	tPFNGLBINDTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

13094 (
GLAPIENTRY
 * 
	tPFNGLDELETETRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
);

13095 (
GLAPIENTRY
 * 
	tPFNGLDRAWTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

13096 (
GLAPIENTRY
 * 
	tPFNGLGENTRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

13097 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISTRANSFORMFEEDBACKNVPROC
Ë(
	tGLuöt
 
	tid
);

13098 (
GLAPIENTRY
 * 
	tPFNGLPAUSETRANSFORMFEEDBACKNVPROC
) ();

13099 (
GLAPIENTRY
 * 
	tPFNGLRESUMETRANSFORMFEEDBACKNVPROC
) ();

13101 
	#glBödTønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwBödTønsf‹mFìdbackNV
)

	)

13102 
	#glDñëeTønsf‹mFìdbacksNV
 
	`GLEW_GET_FUN
(
__gÀwDñëeTønsf‹mFìdbacksNV
)

	)

13103 
	#glDøwTønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwDøwTønsf‹mFìdbackNV
)

	)

13104 
	#glGíTønsf‹mFìdbacksNV
 
	`GLEW_GET_FUN
(
__gÀwGíTønsf‹mFìdbacksNV
)

	)

13105 
	#glIsTønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwIsTønsf‹mFìdbackNV
)

	)

13106 
	#glPau£Tønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwPau£Tønsf‹mFìdbackNV
)

	)

13107 
	#glResumeTønsf‹mFìdbackNV
 
	`GLEW_GET_FUN
(
__gÀwResumeTønsf‹mFìdbackNV
)

	)

13109 
	#GLEW_NV_å™sf‹m_„edback2
 
	`GLEW_GET_VAR
(
__GLEW_NV_å™sf‹m_„edback2
)

	)

13115 #i‚de‡
GL_NV_vd∑u_öãr›


13116 
	#GL_NV_vd∑u_öãr›
 1

	)

13118 
	#GL_SURFACE_STATE_NV
 0x86EB

	)

13119 
	#GL_SURFACE_REGISTERED_NV
 0x86FD

	)

13120 
	#GL_SURFACE_MAPPED_NV
 0x8700

	)

13121 
	#GL_WRITE_DISCARD_NV
 0x88BE

	)

13123 
GLöçå
 
	tGLvd∑uSurÁ˚NV
;

13125 (
GLAPIENTRY
 * 
	tPFNGLVDPAUFININVPROC
) ();

13126 (
GLAPIENTRY
 * 
	tPFNGLVDPAUGETSURFACEIVNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizei* 
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

13127 (
GLAPIENTRY
 * 
	tPFNGLVDPAUINITNVPROC
Ë(c⁄° * 
	tvdpDevi˚
, c⁄° 
	tGLvoid
*
	tgëProcAddªss
);

13128 (
GLAPIENTRY
 * 
	tPFNGLVDPAUISSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

13129 (
GLAPIENTRY
 * 
	tPFNGLVDPAUMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚s
, c⁄° 
	tGLvd∑uSurÁ˚NV
* 
	tsurÁ˚s
);

13130 
GLvd∑uSurÁ˚NV
 (
	tGLAPIENTRY
 * 
	tPFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
Ë(c⁄° * 
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

13131 
GLvd∑uSurÁ˚NV
 (
	tGLAPIENTRY
 * 
	tPFNGLVDPAUREGISTERVIDEOSURFACENVPROC
Ë(c⁄° * 
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

13132 (
GLAPIENTRY
 * 
	tPFNGLVDPAUSURFACEACCESSNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	tac˚ss
);

13133 (
GLAPIENTRY
 * 
	tPFNGLVDPAUUNMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚
, c⁄° 
	tGLvd∑uSurÁ˚NV
* 
	tsurÁ˚s
);

13134 (
GLAPIENTRY
 * 
	tPFNGLVDPAUUNREGISTERSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

13136 
	#glVDPAUFöiNV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUFöiNV
)

	)

13137 
	#glVDPAUGëSurÁ˚ivNV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUGëSurÁ˚ivNV
)

	)

13138 
	#glVDPAUInôNV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUInôNV
)

	)

13139 
	#glVDPAUIsSurÁ˚NV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUIsSurÁ˚NV
)

	)

13140 
	#glVDPAUM≠SurÁ˚sNV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUM≠SurÁ˚sNV
)

	)

13141 
	#glVDPAURegi°îOuçutSurÁ˚NV
 
	`GLEW_GET_FUN
(
__gÀwVDPAURegi°îOuçutSurÁ˚NV
)

	)

13142 
	#glVDPAURegi°îVideoSurÁ˚NV
 
	`GLEW_GET_FUN
(
__gÀwVDPAURegi°îVideoSurÁ˚NV
)

	)

13143 
	#glVDPAUSurÁ˚Ac˚ssNV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUSurÁ˚Ac˚ssNV
)

	)

13144 
	#glVDPAUUnm≠SurÁ˚sNV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUUnm≠SurÁ˚sNV
)

	)

13145 
	#glVDPAUUƒegi°îSurÁ˚NV
 
	`GLEW_GET_FUN
(
__gÀwVDPAUUƒegi°îSurÁ˚NV
)

	)

13147 
	#GLEW_NV_vd∑u_öãr›
 
	`GLEW_GET_VAR
(
__GLEW_NV_vd∑u_öãr›
)

	)

13153 #i‚de‡
GL_NV_vîãx_¨øy_ønge


13154 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

13156 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

13157 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

13158 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

13159 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

13160 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

13162 (
GLAPIENTRY
 * 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

13163 (
GLAPIENTRY
 * 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, 
	tGLvoid
 *
	tpoöãr
);

13165 
	#glFlushVîãxAºayR™geNV
 
	`GLEW_GET_FUN
(
__gÀwFlushVîãxAºayR™geNV
)

	)

13166 
	#glVîãxAºayR™geNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAºayR™geNV
)

	)

13168 
	#GLEW_NV_vîãx_¨øy_ønge
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¨øy_ønge
)

	)

13174 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


13175 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

13177 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

13179 
	#GLEW_NV_vîãx_¨øy_ønge2
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¨øy_ønge2
)

	)

13185 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


13186 
	#GL_NV_vîãx_©åib_öãgî_64bô
 1

	)

13188 
	#GL_INT64_NV
 0x140E

	)

13189 
	#GL_UNSIGNED_INT64_NV
 0x140F

	)

13191 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBLI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
* 
	t∑øms
);

13192 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBLUI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
* 
	t∑øms
);

13193 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
);

13194 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
* 
	tv
);

13195 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

13196 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL1UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
* 
	tv
);

13197 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

13198 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
* 
	tv
);

13199 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

13200 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL2UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
* 
	tv
);

13201 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

13202 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
* 
	tv
);

13203 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

13204 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL3UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
* 
	tv
);

13205 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

13206 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
* 
	tv
);

13207 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

13208 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBL4UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
* 
	tv
);

13209 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBLFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

13211 
	#glGëVîãxAâribLi64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribLi64vNV
)

	)

13212 
	#glGëVîãxAâribLui64vNV
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribLui64vNV
)

	)

13213 
	#glVîãxAâribL1i64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1i64NV
)

	)

13214 
	#glVîãxAâribL1i64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1i64vNV
)

	)

13215 
	#glVîãxAâribL1ui64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1ui64NV
)

	)

13216 
	#glVîãxAâribL1ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL1ui64vNV
)

	)

13217 
	#glVîãxAâribL2i64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2i64NV
)

	)

13218 
	#glVîãxAâribL2i64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2i64vNV
)

	)

13219 
	#glVîãxAâribL2ui64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2ui64NV
)

	)

13220 
	#glVîãxAâribL2ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL2ui64vNV
)

	)

13221 
	#glVîãxAâribL3i64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3i64NV
)

	)

13222 
	#glVîãxAâribL3i64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3i64vNV
)

	)

13223 
	#glVîãxAâribL3ui64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3ui64NV
)

	)

13224 
	#glVîãxAâribL3ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL3ui64vNV
)

	)

13225 
	#glVîãxAâribL4i64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4i64NV
)

	)

13226 
	#glVîãxAâribL4i64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4i64vNV
)

	)

13227 
	#glVîãxAâribL4ui64NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4ui64NV
)

	)

13228 
	#glVîãxAâribL4ui64vNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribL4ui64vNV
)

	)

13229 
	#glVîãxAâribLF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribLF‹m©NV
)

	)

13231 
	#GLEW_NV_vîãx_©åib_öãgî_64bô
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_©åib_öãgî_64bô
)

	)

13237 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


13238 
	#GL_NV_vîãx_buf„r_unifõd_mem‹y
 1

	)

13240 
	#GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
 0x8F1E

	)

13241 
	#GL_ELEMENT_ARRAY_UNIFIED_NV
 0x8F1F

	)

13242 
	#GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
 0x8F20

	)

13243 
	#GL_VERTEX_ARRAY_ADDRESS_NV
 0x8F21

	)

13244 
	#GL_NORMAL_ARRAY_ADDRESS_NV
 0x8F22

	)

13245 
	#GL_COLOR_ARRAY_ADDRESS_NV
 0x8F23

	)

13246 
	#GL_INDEX_ARRAY_ADDRESS_NV
 0x8F24

	)

13247 
	#GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
 0x8F25

	)

13248 
	#GL_EDGE_FLAG_ARRAY_ADDRESS_NV
 0x8F26

	)

13249 
	#GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
 0x8F27

	)

13250 
	#GL_FOG_COORD_ARRAY_ADDRESS_NV
 0x8F28

	)

13251 
	#GL_ELEMENT_ARRAY_ADDRESS_NV
 0x8F29

	)

13252 
	#GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
 0x8F2A

	)

13253 
	#GL_VERTEX_ARRAY_LENGTH_NV
 0x8F2B

	)

13254 
	#GL_NORMAL_ARRAY_LENGTH_NV
 0x8F2C

	)

13255 
	#GL_COLOR_ARRAY_LENGTH_NV
 0x8F2D

	)

13256 
	#GL_INDEX_ARRAY_LENGTH_NV
 0x8F2E

	)

13257 
	#GL_TEXTURE_COORD_ARRAY_LENGTH_NV
 0x8F2F

	)

13258 
	#GL_EDGE_FLAG_ARRAY_LENGTH_NV
 0x8F30

	)

13259 
	#GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
 0x8F31

	)

13260 
	#GL_FOG_COORD_ARRAY_LENGTH_NV
 0x8F32

	)

13261 
	#GL_ELEMENT_ARRAY_LENGTH_NV
 0x8F33

	)

13262 
	#GL_DRAW_INDIRECT_UNIFIED_NV
 0x8F40

	)

13263 
	#GL_DRAW_INDIRECT_ADDRESS_NV
 0x8F41

	)

13264 
	#GL_DRAW_INDIRECT_LENGTH_NV
 0x8F42

	)

13266 (
GLAPIENTRY
 * 
	tPFNGLBUFFERADDRESSRANGENVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	taddªss
, 
	tGLsizeùå
 
	tÀngth
);

13267 (
GLAPIENTRY
 * 
	tPFNGLCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

13268 (
GLAPIENTRY
 * 
	tPFNGLEDGEFLAGFORMATNVPROC
Ë(
	tGLsizei
 
	t°ride
);

13269 (
GLAPIENTRY
 * 
	tPFNGLFOGCOORDFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

13270 (
GLAPIENTRY
 * 
	tPFNGLGETINTEGERUI64I_VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tªsu…
[]);

13271 (
GLAPIENTRY
 * 
	tPFNGLINDEXFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

13272 (
GLAPIENTRY
 * 
	tPFNGLNORMALFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

13273 (
GLAPIENTRY
 * 
	tPFNGLSECONDARYCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

13274 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORDFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

13275 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
);

13276 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBIFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

13277 (
GLAPIENTRY
 * 
	tPFNGLVERTEXFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

13279 
	#glBuf„rAddªssR™geNV
 
	`GLEW_GET_FUN
(
__gÀwBuf„rAddªssR™geNV
)

	)

13280 
	#glCﬁ‹F‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹F‹m©NV
)

	)

13281 
	#glEdgeFœgF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwEdgeFœgF‹m©NV
)

	)

13282 
	#glFogCo‹dF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwFogCo‹dF‹m©NV
)

	)

13283 
	#glGëI¡egîui64i_vNV
 
	`GLEW_GET_FUN
(
__gÀwGëI¡egîui64i_vNV
)

	)

13284 
	#glIndexF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwIndexF‹m©NV
)

	)

13285 
	#glN‹mÆF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆF‹m©NV
)

	)

13286 
	#glSec⁄d¨yCﬁ‹F‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwSec⁄d¨yCﬁ‹F‹m©NV
)

	)

13287 
	#glTexCo‹dF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹dF‹m©NV
)

	)

13288 
	#glVîãxAâribF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribF‹m©NV
)

	)

13289 
	#glVîãxAâribIF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribIF‹m©NV
)

	)

13290 
	#glVîãxF‹m©NV
 
	`GLEW_GET_FUN
(
__gÀwVîãxF‹m©NV
)

	)

13292 
	#GLEW_NV_vîãx_buf„r_unifõd_mem‹y
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_buf„r_unifõd_mem‹y
)

	)

13298 #i‚de‡
GL_NV_vîãx_¥ogøm


13299 
	#GL_NV_vîãx_¥ogøm
 1

	)

13301 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

13302 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

13303 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

13304 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

13305 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

13306 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

13307 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

13308 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

13309 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

13310 
	#GL_IDENTITY_NV
 0x862A

	)

13311 
	#GL_INVERSE_NV
 0x862B

	)

13312 
	#GL_TRANSPOSE_NV
 0x862C

	)

13313 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

13314 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

13315 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

13316 
	#GL_MATRIX0_NV
 0x8630

	)

13317 
	#GL_MATRIX1_NV
 0x8631

	)

13318 
	#GL_MATRIX2_NV
 0x8632

	)

13319 
	#GL_MATRIX3_NV
 0x8633

	)

13320 
	#GL_MATRIX4_NV
 0x8634

	)

13321 
	#GL_MATRIX5_NV
 0x8635

	)

13322 
	#GL_MATRIX6_NV
 0x8636

	)

13323 
	#GL_MATRIX7_NV
 0x8637

	)

13324 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

13325 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

13326 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

13327 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

13328 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

13329 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

13330 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

13331 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

13332 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

13333 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

13334 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

13335 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

13336 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

13337 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

13338 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

13339 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

13340 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

13341 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

13342 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

13343 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

13344 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

13345 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

13346 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

13347 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

13348 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

13349 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

13350 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

13351 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

13352 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

13353 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

13354 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

13355 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

13356 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

13357 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

13358 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

13359 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

13360 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

13361 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

13362 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

13363 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

13364 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

13365 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

13366 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

13367 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

13368 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

13369 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

13370 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

13371 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

13372 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

13373 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

13374 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

13375 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

13376 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

13377 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

13378 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

13379 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

13380 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

13381 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

13382 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

13383 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

13385 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
, 
	tGLboﬁón
 *
	tªsidí˚s
);

13386 (
GLAPIENTRY
 * 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

13387 (
GLAPIENTRY
 * 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
* 
	tids
);

13388 (
GLAPIENTRY
 * 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

13389 (
GLAPIENTRY
 * 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

13390 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

13391 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

13392 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
* 
	t¥ogøm
);

13393 (
GLAPIENTRY
 * 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

13394 (
GLAPIENTRY
 * 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

13395 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLvoid
** 
	tpoöãr
);

13396 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

13397 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

13398 (
GLAPIENTRY
 * 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

13399 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

13400 (
GLAPIENTRY
 * 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
* 
	t¥ogøm
);

13401 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

13402 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

13403 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

13404 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

13405 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tnum
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

13406 (
GLAPIENTRY
 * 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tnum
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

13407 (
GLAPIENTRY
 * 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
* 
	tids
);

13408 (
GLAPIENTRY
 * 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

13409 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

13410 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

13411 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

13412 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

13413 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

13414 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

13415 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

13416 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

13417 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

13418 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

13419 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

13420 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

13421 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

13422 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

13423 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

13424 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

13425 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

13426 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

13427 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

13428 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
* 
	tv
);

13429 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

13430 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
* 
	tv
);

13431 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

13432 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
* 
	tv
);

13433 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

13434 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
* 
	tv
);

13435 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

13436 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLdoubÀ
* 
	tv
);

13437 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tv
);

13438 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLsh‹t
* 
	tv
);

13439 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLdoubÀ
* 
	tv
);

13440 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tv
);

13441 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLsh‹t
* 
	tv
);

13442 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLdoubÀ
* 
	tv
);

13443 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tv
);

13444 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLsh‹t
* 
	tv
);

13445 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLdoubÀ
* 
	tv
);

13446 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tv
);

13447 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLsh‹t
* 
	tv
);

13448 (
GLAPIENTRY
 * 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLubyã
* 
	tv
);

13450 
	#glAªProgømsResidítNV
 
	`GLEW_GET_FUN
(
__gÀwAªProgømsResidítNV
)

	)

13451 
	#glBödProgømNV
 
	`GLEW_GET_FUN
(
__gÀwBödProgømNV
)

	)

13452 
	#glDñëeProgømsNV
 
	`GLEW_GET_FUN
(
__gÀwDñëeProgømsNV
)

	)

13453 
	#glExecuãProgømNV
 
	`GLEW_GET_FUN
(
__gÀwExecuãProgømNV
)

	)

13454 
	#glGíProgømsNV
 
	`GLEW_GET_FUN
(
__gÀwGíProgømsNV
)

	)

13455 
	#glGëProgømP¨amëîdvNV
 
	`GLEW_GET_FUN
(
__gÀwGëProgømP¨amëîdvNV
)

	)

13456 
	#glGëProgømP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëProgømP¨amëîfvNV
)

	)

13457 
	#glGëProgømSåögNV
 
	`GLEW_GET_FUN
(
__gÀwGëProgømSåögNV
)

	)

13458 
	#glGëProgømivNV
 
	`GLEW_GET_FUN
(
__gÀwGëProgømivNV
)

	)

13459 
	#glGëTøckM©rixivNV
 
	`GLEW_GET_FUN
(
__gÀwGëTøckM©rixivNV
)

	)

13460 
	#glGëVîãxAâribPoöãrvNV
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribPoöãrvNV
)

	)

13461 
	#glGëVîãxAâribdvNV
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribdvNV
)

	)

13462 
	#glGëVîãxAâribfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribfvNV
)

	)

13463 
	#glGëVîãxAâribivNV
 
	`GLEW_GET_FUN
(
__gÀwGëVîãxAâribivNV
)

	)

13464 
	#glIsProgømNV
 
	`GLEW_GET_FUN
(
__gÀwIsProgømNV
)

	)

13465 
	#glLﬂdProgømNV
 
	`GLEW_GET_FUN
(
__gÀwLﬂdProgømNV
)

	)

13466 
	#glProgømP¨amëî4dNV
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëî4dNV
)

	)

13467 
	#glProgømP¨amëî4dvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëî4dvNV
)

	)

13468 
	#glProgømP¨amëî4fNV
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëî4fNV
)

	)

13469 
	#glProgømP¨amëî4fvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëî4fvNV
)

	)

13470 
	#glProgømP¨amëîs4dvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëîs4dvNV
)

	)

13471 
	#glProgømP¨amëîs4fvNV
 
	`GLEW_GET_FUN
(
__gÀwProgømP¨amëîs4fvNV
)

	)

13472 
	#glReque°ResidítProgømsNV
 
	`GLEW_GET_FUN
(
__gÀwReque°ResidítProgømsNV
)

	)

13473 
	#glTøckM©rixNV
 
	`GLEW_GET_FUN
(
__gÀwTøckM©rixNV
)

	)

13474 
	#glVîãxAârib1dNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1dNV
)

	)

13475 
	#glVîãxAârib1dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1dvNV
)

	)

13476 
	#glVîãxAârib1fNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1fNV
)

	)

13477 
	#glVîãxAârib1fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1fvNV
)

	)

13478 
	#glVîãxAârib1sNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1sNV
)

	)

13479 
	#glVîãxAârib1svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib1svNV
)

	)

13480 
	#glVîãxAârib2dNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2dNV
)

	)

13481 
	#glVîãxAârib2dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2dvNV
)

	)

13482 
	#glVîãxAârib2fNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2fNV
)

	)

13483 
	#glVîãxAârib2fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2fvNV
)

	)

13484 
	#glVîãxAârib2sNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2sNV
)

	)

13485 
	#glVîãxAârib2svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib2svNV
)

	)

13486 
	#glVîãxAârib3dNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3dNV
)

	)

13487 
	#glVîãxAârib3dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3dvNV
)

	)

13488 
	#glVîãxAârib3fNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3fNV
)

	)

13489 
	#glVîãxAârib3fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3fvNV
)

	)

13490 
	#glVîãxAârib3sNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3sNV
)

	)

13491 
	#glVîãxAârib3svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib3svNV
)

	)

13492 
	#glVîãxAârib4dNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4dNV
)

	)

13493 
	#glVîãxAârib4dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4dvNV
)

	)

13494 
	#glVîãxAârib4fNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4fNV
)

	)

13495 
	#glVîãxAârib4fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4fvNV
)

	)

13496 
	#glVîãxAârib4sNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4sNV
)

	)

13497 
	#glVîãxAârib4svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4svNV
)

	)

13498 
	#glVîãxAârib4ubNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4ubNV
)

	)

13499 
	#glVîãxAârib4ubvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAârib4ubvNV
)

	)

13500 
	#glVîãxAâribPoöãrNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribPoöãrNV
)

	)

13501 
	#glVîãxAâribs1dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs1dvNV
)

	)

13502 
	#glVîãxAâribs1fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs1fvNV
)

	)

13503 
	#glVîãxAâribs1svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs1svNV
)

	)

13504 
	#glVîãxAâribs2dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs2dvNV
)

	)

13505 
	#glVîãxAâribs2fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs2fvNV
)

	)

13506 
	#glVîãxAâribs2svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs2svNV
)

	)

13507 
	#glVîãxAâribs3dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs3dvNV
)

	)

13508 
	#glVîãxAâribs3fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs3fvNV
)

	)

13509 
	#glVîãxAâribs3svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs3svNV
)

	)

13510 
	#glVîãxAâribs4dvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs4dvNV
)

	)

13511 
	#glVîãxAâribs4fvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs4fvNV
)

	)

13512 
	#glVîãxAâribs4svNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs4svNV
)

	)

13513 
	#glVîãxAâribs4ubvNV
 
	`GLEW_GET_FUN
(
__gÀwVîãxAâribs4ubvNV
)

	)

13515 
	#GLEW_NV_vîãx_¥ogøm
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¥ogøm
)

	)

13521 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


13522 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

13524 
	#GLEW_NV_vîãx_¥ogøm1_1
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¥ogøm1_1
)

	)

13530 #i‚de‡
GL_NV_vîãx_¥ogøm2


13531 
	#GL_NV_vîãx_¥ogøm2
 1

	)

13533 
	#GLEW_NV_vîãx_¥ogøm2
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¥ogøm2
)

	)

13539 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


13540 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

13542 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

13543 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

13545 
	#GLEW_NV_vîãx_¥ogøm2_›ti⁄
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¥ogøm2_›ti⁄
)

	)

13551 #i‚de‡
GL_NV_vîãx_¥ogøm3


13552 
	#GL_NV_vîãx_¥ogøm3
 1

	)

13554 
	#MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

13556 
	#GLEW_NV_vîãx_¥ogøm3
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¥ogøm3
)

	)

13562 #i‚de‡
GL_NV_vîãx_¥ogøm4


13563 
	#GL_NV_vîãx_¥ogøm4
 1

	)

13565 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
 0x88FD

	)

13567 
	#GLEW_NV_vîãx_¥ogøm4
 
	`GLEW_GET_VAR
(
__GLEW_NV_vîãx_¥ogøm4
)

	)

13573 #i‚de‡
GL_NV_video_ˇ±uª


13574 
	#GL_NV_video_ˇ±uª
 1

	)

13576 
	#GL_VIDEO_BUFFER_NV
 0x9020

	)

13577 
	#GL_VIDEO_BUFFER_BINDING_NV
 0x9021

	)

13578 
	#GL_FIELD_UPPER_NV
 0x9022

	)

13579 
	#GL_FIELD_LOWER_NV
 0x9023

	)

13580 
	#GL_NUM_VIDEO_CAPTURE_STREAMS_NV
 0x9024

	)

13581 
	#GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
 0x9025

	)

13582 
	#GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
 0x9026

	)

13583 
	#GL_LAST_VIDEO_CAPTURE_STATUS_NV
 0x9027

	)

13584 
	#GL_VIDEO_BUFFER_PITCH_NV
 0x9028

	)

13585 
	#GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
 0x9029

	)

13586 
	#GL_VIDEO_COLOR_CONVERSION_MAX_NV
 0x902A

	)

13587 
	#GL_VIDEO_COLOR_CONVERSION_MIN_NV
 0x902B

	)

13588 
	#GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
 0x902C

	)

13589 
	#GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
 0x902D

	)

13590 
	#GL_PARTIAL_SUCCESS_NV
 0x902E

	)

13591 
	#GL_SUCCESS_NV
 0x902F

	)

13592 
	#GL_FAILURE_NV
 0x9030

	)

13593 
	#GL_YCBYCR8_422_NV
 0x9031

	)

13594 
	#GL_YCBAYCR8A_4224_NV
 0x9032

	)

13595 
	#GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
 0x9033

	)

13596 
	#GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
 0x9034

	)

13597 
	#GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
 0x9035

	)

13598 
	#GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
 0x9036

	)

13599 
	#GL_Z4Y12Z4CB12Z4CR12_444_NV
 0x9037

	)

13600 
	#GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
 0x9038

	)

13601 
	#GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
 0x9039

	)

13602 
	#GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
 0x903A

	)

13603 
	#GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
 0x903B

	)

13604 
	#GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
 0x903C

	)

13606 (
GLAPIENTRY
 * 
	tPFNGLBEGINVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

13607 (
GLAPIENTRY
 * 
	tPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, 
	tGLöçåARB
 
	toff£t
);

13608 (
GLAPIENTRY
 * 
	tPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, GLíum 
	tèrgë
, GLuöà
	tãxtuª
);

13609 (
GLAPIENTRY
 * 
	tPFNGLENDVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

13610 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOCAPTURESTREAMDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
* 
	t∑øms
);

13611 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOCAPTURESTREAMFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

13612 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOCAPTURESTREAMIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

13613 (
GLAPIENTRY
 * 
	tPFNGLGETVIDEOCAPTUREIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

13614 
GLíum
 (
	tGLAPIENTRY
 * 
	tPFNGLVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöt* 
	t£quí˚_num
, 
	tGLuöt64EXT
 *
	tˇ±uª_time
);

13615 (
GLAPIENTRY
 * 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLdoubÀ
* 
	t∑øms
);

13616 (
GLAPIENTRY
 * 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

13617 (
GLAPIENTRY
 * 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

13619 
	#glBegöVideoC≠tuªNV
 
	`GLEW_GET_FUN
(
__gÀwBegöVideoC≠tuªNV
)

	)

13620 
	#glBödVideoC≠tuªSåómBuf„rNV
 
	`GLEW_GET_FUN
(
__gÀwBödVideoC≠tuªSåómBuf„rNV
)

	)

13621 
	#glBödVideoC≠tuªSåómTextuªNV
 
	`GLEW_GET_FUN
(
__gÀwBödVideoC≠tuªSåómTextuªNV
)

	)

13622 
	#glEndVideoC≠tuªNV
 
	`GLEW_GET_FUN
(
__gÀwEndVideoC≠tuªNV
)

	)

13623 
	#glGëVideoC≠tuªSåómdvNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoC≠tuªSåómdvNV
)

	)

13624 
	#glGëVideoC≠tuªSåómfvNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoC≠tuªSåómfvNV
)

	)

13625 
	#glGëVideoC≠tuªSåómivNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoC≠tuªSåómivNV
)

	)

13626 
	#glGëVideoC≠tuªivNV
 
	`GLEW_GET_FUN
(
__gÀwGëVideoC≠tuªivNV
)

	)

13627 
	#glVideoC≠tuªNV
 
	`GLEW_GET_FUN
(
__gÀwVideoC≠tuªNV
)

	)

13628 
	#glVideoC≠tuªSåómP¨amëîdvNV
 
	`GLEW_GET_FUN
(
__gÀwVideoC≠tuªSåómP¨amëîdvNV
)

	)

13629 
	#glVideoC≠tuªSåómP¨amëîfvNV
 
	`GLEW_GET_FUN
(
__gÀwVideoC≠tuªSåómP¨amëîfvNV
)

	)

13630 
	#glVideoC≠tuªSåómP¨amëîivNV
 
	`GLEW_GET_FUN
(
__gÀwVideoC≠tuªSåómP¨amëîivNV
)

	)

13632 
	#GLEW_NV_video_ˇ±uª
 
	`GLEW_GET_VAR
(
__GLEW_NV_video_ˇ±uª
)

	)

13638 #i‚de‡
GL_OES_byã_co‹dö©es


13639 
	#GL_OES_byã_co‹dö©es
 1

	)

13641 
	#GLEW_OES_byã_co‹dö©es
 
	`GLEW_GET_VAR
(
__GLEW_OES_byã_co‹dö©es
)

	)

13647 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


13648 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

13650 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

13651 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

13652 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

13653 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

13654 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

13655 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

13656 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

13657 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

13658 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

13659 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

13661 
	#GLEW_OES_com¥es£d_∑Àâed_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_OES_com¥es£d_∑Àâed_ãxtuª
)

	)

13667 #i‚de‡
GL_OES_ªad_f‹m©


13668 
	#GL_OES_ªad_f‹m©
 1

	)

13670 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

13671 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

13673 
	#GLEW_OES_ªad_f‹m©
 
	`GLEW_GET_VAR
(
__GLEW_OES_ªad_f‹m©
)

	)

13679 #i‚de‡
GL_OES_sögÀ_¥ecisi⁄


13680 
	#GL_OES_sögÀ_¥ecisi⁄
 1

	)

13682 (
GLAPIENTRY
 * 
	tPFNGLCLEARDEPTHFOESPROC
Ë(
	tGL˛ampd
 
	tdïth
);

13683 (
GLAPIENTRY
 * 
	tPFNGLCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLÊﬂt
* 
	tequ©i⁄
);

13684 (
GLAPIENTRY
 * 
	tPFNGLDEPTHRANGEFOESPROC
Ë(
	tGL˛ampf
 
	tn
, GL˛amp‡
	tf
);

13685 (
GLAPIENTRY
 * 
	tPFNGLFRUSTUMFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

13686 (
GLAPIENTRY
 * 
	tPFNGLGETCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLÊﬂt
* 
	tequ©i⁄
);

13687 (
GLAPIENTRY
 * 
	tPFNGLORTHOFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

13689 
	#glCÀ¨DïthfOES
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨DïthfOES
)

	)

13690 
	#glClùPœ√fOES
 
	`GLEW_GET_FUN
(
__gÀwClùPœ√fOES
)

	)

13691 
	#glDïthR™gefOES
 
	`GLEW_GET_FUN
(
__gÀwDïthR™gefOES
)

	)

13692 
	#glFru°umfOES
 
	`GLEW_GET_FUN
(
__gÀwFru°umfOES
)

	)

13693 
	#glGëClùPœ√fOES
 
	`GLEW_GET_FUN
(
__gÀwGëClùPœ√fOES
)

	)

13694 
	#glOπhofOES
 
	`GLEW_GET_FUN
(
__gÀwOπhofOES
)

	)

13696 
	#GLEW_OES_sögÀ_¥ecisi⁄
 
	`GLEW_GET_VAR
(
__GLEW_OES_sögÀ_¥ecisi⁄
)

	)

13702 #i‚de‡
GL_OML_öãæa˚


13703 
	#GL_OML_öãæa˚
 1

	)

13705 
	#GL_INTERLACE_OML
 0x8980

	)

13706 
	#GL_INTERLACE_READ_OML
 0x8981

	)

13708 
	#GLEW_OML_öãæa˚
 
	`GLEW_GET_VAR
(
__GLEW_OML_öãæa˚
)

	)

13714 #i‚de‡
GL_OML_ªßm∂e


13715 
	#GL_OML_ªßm∂e
 1

	)

13717 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

13718 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

13719 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

13720 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

13721 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

13722 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

13724 
	#GLEW_OML_ªßm∂e
 
	`GLEW_GET_VAR
(
__GLEW_OML_ªßm∂e
)

	)

13730 #i‚de‡
GL_OML_subßm∂e


13731 
	#GL_OML_subßm∂e
 1

	)

13733 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

13734 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

13736 
	#GLEW_OML_subßm∂e
 
	`GLEW_GET_VAR
(
__GLEW_OML_subßm∂e
)

	)

13742 #i‚de‡
GL_PGI_misc_höts


13743 
	#GL_PGI_misc_höts
 1

	)

13745 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 107000

	)

13746 
	#GL_CONSERVE_MEMORY_HINT_PGI
 107005

	)

13747 
	#GL_RECLAIM_MEMORY_HINT_PGI
 107006

	)

13748 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 107010

	)

13749 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 107011

	)

13750 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 107012

	)

13751 
	#GL_ALWAYS_FAST_HINT_PGI
 107020

	)

13752 
	#GL_ALWAYS_SOFT_HINT_PGI
 107021

	)

13753 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 107022

	)

13754 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 107023

	)

13755 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 107024

	)

13756 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 107025

	)

13757 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 107030

	)

13758 
	#GL_STRICT_LIGHTING_HINT_PGI
 107031

	)

13759 
	#GL_STRICT_SCISSOR_HINT_PGI
 107032

	)

13760 
	#GL_FULL_STIPPLE_HINT_PGI
 107033

	)

13761 
	#GL_CLIP_NEAR_HINT_PGI
 107040

	)

13762 
	#GL_CLIP_FAR_HINT_PGI
 107041

	)

13763 
	#GL_WIDE_LINE_HINT_PGI
 107042

	)

13764 
	#GL_BACK_NORMALS_HINT_PGI
 107043

	)

13766 
	#GLEW_PGI_misc_höts
 
	`GLEW_GET_VAR
(
__GLEW_PGI_misc_höts
)

	)

13772 #i‚de‡
GL_PGI_vîãx_höts


13773 
	#GL_PGI_vîãx_höts
 1

	)

13775 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

13776 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

13777 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

13778 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

13779 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

13780 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

13781 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

13782 
	#GL_VERTEX_DATA_HINT_PGI
 107050

	)

13783 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 107051

	)

13784 
	#GL_MATERIAL_SIDE_HINT_PGI
 107052

	)

13785 
	#GL_MAX_VERTEX_HINT_PGI
 107053

	)

13786 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

13787 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

13788 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

13789 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

13790 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

13791 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

13792 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

13793 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

13794 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

13795 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

13796 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

13798 
	#GLEW_PGI_vîãx_höts
 
	`GLEW_GET_VAR
(
__GLEW_PGI_vîãx_höts
)

	)

13804 #i‚de‡
GL_REGAL_ES1_0_com∑tibûôy


13805 
	#GL_REGAL_ES1_0_com∑tibûôy
 1

	)

13807 
	tGL˛ampx
;

13809 (
GLAPIENTRY
 * 
	tPFNGLALPHAFUNCXPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampx
 
	tªf
);

13810 (
GLAPIENTRY
 * 
	tPFNGLCLEARCOLORXPROC
Ë(
	tGL˛ampx
 
	tªd
, GL˛ampx 
	tgªí
, GL˛ampx 
	tblue
, GL˛ampx 
	tÆpha
);

13811 (
GLAPIENTRY
 * 
	tPFNGLCLEARDEPTHXPROC
Ë(
	tGL˛ampx
 
	tdïth
);

13812 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4XPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

13813 (
GLAPIENTRY
 * 
	tPFNGLDEPTHRANGEXPROC
Ë(
	tGL˛ampx
 
	tzNór
, GL˛ampx 
	tzF¨
);

13814 (
GLAPIENTRY
 * 
	tPFNGLFOGXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

13815 (
GLAPIENTRY
 * 
	tPFNGLFOGXVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
* 
	t∑øms
);

13816 (
GLAPIENTRY
 * 
	tPFNGLFRUSTUMFPROC
Ë(
	tGLÊﬂt
 
	tÀ·
, GLÊﬂà
	tright
, GLÊﬂà
	tbŸtom
, GLÊﬂà
	tt›
, GLÊﬂà
	tzNór
, GLÊﬂà
	tzF¨
);

13817 (
GLAPIENTRY
 * 
	tPFNGLFRUSTUMXPROC
Ë(
	tGLfixed
 
	tÀ·
, GLfixed 
	tright
, GLfixed 
	tbŸtom
, GLfixed 
	tt›
, GLfixed 
	tzNór
, GLfixed 
	tzF¨
);

13818 (
GLAPIENTRY
 * 
	tPFNGLLIGHTMODELXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

13819 (
GLAPIENTRY
 * 
	tPFNGLLIGHTMODELXVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
* 
	t∑øms
);

13820 (
GLAPIENTRY
 * 
	tPFNGLLIGHTXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

13821 (
GLAPIENTRY
 * 
	tPFNGLLIGHTXVPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
* 
	t∑øms
);

13822 (
GLAPIENTRY
 * 
	tPFNGLLINEWIDTHXPROC
Ë(
	tGLfixed
 
	twidth
);

13823 (
GLAPIENTRY
 * 
	tPFNGLLOADMATRIXXPROC
Ë(c⁄° 
	tGLfixed
* 
	tm
);

13824 (
GLAPIENTRY
 * 
	tPFNGLMATERIALXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

13825 (
GLAPIENTRY
 * 
	tPFNGLMATERIALXVPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
* 
	t∑øms
);

13826 (
GLAPIENTRY
 * 
	tPFNGLMULTMATRIXXPROC
Ë(c⁄° 
	tGLfixed
* 
	tm
);

13827 (
GLAPIENTRY
 * 
	tPFNGLMULTITEXCOORD4XPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

13828 (
GLAPIENTRY
 * 
	tPFNGLNORMAL3XPROC
Ë(
	tGLfixed
 
	tnx
, GLfixed 
	tny
, GLfixed 
	tnz
);

13829 (
GLAPIENTRY
 * 
	tPFNGLORTHOFPROC
Ë(
	tGLÊﬂt
 
	tÀ·
, GLÊﬂà
	tright
, GLÊﬂà
	tbŸtom
, GLÊﬂà
	tt›
, GLÊﬂà
	tzNór
, GLÊﬂà
	tzF¨
);

13830 (
GLAPIENTRY
 * 
	tPFNGLORTHOXPROC
Ë(
	tGLfixed
 
	tÀ·
, GLfixed 
	tright
, GLfixed 
	tbŸtom
, GLfixed 
	tt›
, GLfixed 
	tzNór
, GLfixed 
	tzF¨
);

13831 (
GLAPIENTRY
 * 
	tPFNGLPOINTSIZEXPROC
Ë(
	tGLfixed
 
	tsize
);

13832 (
GLAPIENTRY
 * 
	tPFNGLPOLYGONOFFSETXPROC
Ë(
	tGLfixed
 
	tÁ˘‹
, GLfixed 
	tunôs
);

13833 (
GLAPIENTRY
 * 
	tPFNGLROTATEXPROC
Ë(
	tGLfixed
 
	t™gÀ
, GLfixed 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

13834 (
GLAPIENTRY
 * 
	tPFNGLSAMPLECOVERAGEXPROC
Ë(
	tGL˛ampx
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

13835 (
GLAPIENTRY
 * 
	tPFNGLSCALEXPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

13836 (
GLAPIENTRY
 * 
	tPFNGLTEXENVXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

13837 (
GLAPIENTRY
 * 
	tPFNGLTEXENVXVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
* 
	t∑øms
);

13838 (
GLAPIENTRY
 * 
	tPFNGLTEXPARAMETERXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

13839 (
GLAPIENTRY
 * 
	tPFNGLTRANSLATEXPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

13841 
	#glAÕhaFuncx
 
	`GLEW_GET_FUN
(
__gÀwAÕhaFuncx
)

	)

13842 
	#glCÀ¨Cﬁ‹x
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Cﬁ‹x
)

	)

13843 
	#glCÀ¨Dïthx
 
	`GLEW_GET_FUN
(
__gÀwCÀ¨Dïthx
)

	)

13844 
	#glCﬁ‹4x
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4x
)

	)

13845 
	#glDïthR™gex
 
	`GLEW_GET_FUN
(
__gÀwDïthR™gex
)

	)

13846 
	#glFogx
 
	`GLEW_GET_FUN
(
__gÀwFogx
)

	)

13847 
	#glFogxv
 
	`GLEW_GET_FUN
(
__gÀwFogxv
)

	)

13848 
	#glFru°umf
 
	`GLEW_GET_FUN
(
__gÀwFru°umf
)

	)

13849 
	#glFru°umx
 
	`GLEW_GET_FUN
(
__gÀwFru°umx
)

	)

13850 
	#glLightModñx
 
	`GLEW_GET_FUN
(
__gÀwLightModñx
)

	)

13851 
	#glLightModñxv
 
	`GLEW_GET_FUN
(
__gÀwLightModñxv
)

	)

13852 
	#glLightx
 
	`GLEW_GET_FUN
(
__gÀwLightx
)

	)

13853 
	#glLightxv
 
	`GLEW_GET_FUN
(
__gÀwLightxv
)

	)

13854 
	#glLöeWidthx
 
	`GLEW_GET_FUN
(
__gÀwLöeWidthx
)

	)

13855 
	#glLﬂdM©rixx
 
	`GLEW_GET_FUN
(
__gÀwLﬂdM©rixx
)

	)

13856 
	#glM©îülx
 
	`GLEW_GET_FUN
(
__gÀwM©îülx
)

	)

13857 
	#glM©îülxv
 
	`GLEW_GET_FUN
(
__gÀwM©îülxv
)

	)

13858 
	#glMu…M©rixx
 
	`GLEW_GET_FUN
(
__gÀwMu…M©rixx
)

	)

13859 
	#glMu…iTexCo‹d4x
 
	`GLEW_GET_FUN
(
__gÀwMu…iTexCo‹d4x
)

	)

13860 
	#glN‹mÆ3x
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆ3x
)

	)

13861 
	#glOπhof
 
	`GLEW_GET_FUN
(
__gÀwOπhof
)

	)

13862 
	#glOπhox
 
	`GLEW_GET_FUN
(
__gÀwOπhox
)

	)

13863 
	#glPoötSizex
 
	`GLEW_GET_FUN
(
__gÀwPoötSizex
)

	)

13864 
	#glPﬁyg⁄Off£tx
 
	`GLEW_GET_FUN
(
__gÀwPﬁyg⁄Off£tx
)

	)

13865 
	#glRŸ©ex
 
	`GLEW_GET_FUN
(
__gÀwRŸ©ex
)

	)

13866 
	#glSam∂eCovîagex
 
	`GLEW_GET_FUN
(
__gÀwSam∂eCovîagex
)

	)

13867 
	#glSˇÀx
 
	`GLEW_GET_FUN
(
__gÀwSˇÀx
)

	)

13868 
	#glTexEnvx
 
	`GLEW_GET_FUN
(
__gÀwTexEnvx
)

	)

13869 
	#glTexEnvxv
 
	`GLEW_GET_FUN
(
__gÀwTexEnvxv
)

	)

13870 
	#glTexP¨amëîx
 
	`GLEW_GET_FUN
(
__gÀwTexP¨amëîx
)

	)

13871 
	#glTøn¶©ex
 
	`GLEW_GET_FUN
(
__gÀwTøn¶©ex
)

	)

13873 
	#GLEW_REGAL_ES1_0_com∑tibûôy
 
	`GLEW_GET_VAR
(
__GLEW_REGAL_ES1_0_com∑tibûôy
)

	)

13879 #i‚de‡
GL_REGAL_ES1_1_com∑tibûôy


13880 
	#GL_REGAL_ES1_1_com∑tibûôy
 1

	)

13882 (
GLAPIENTRY
 * 
	tPFNGLCLIPPLANEFPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLÊﬂt
* 
	tequ©i⁄
);

13883 (
GLAPIENTRY
 * 
	tPFNGLCLIPPLANEXPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLfixed
* 
	tequ©i⁄
);

13884 (
GLAPIENTRY
 * 
	tPFNGLGETCLIPPLANEFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	teqn
[4]);

13885 (
GLAPIENTRY
 * 
	tPFNGLGETCLIPPLANEXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	teqn
[4]);

13886 (
GLAPIENTRY
 * 
	tPFNGLGETFIXEDVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
* 
	t∑øms
);

13887 (
GLAPIENTRY
 * 
	tPFNGLGETLIGHTXVPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
* 
	t∑øms
);

13888 (
GLAPIENTRY
 * 
	tPFNGLGETMATERIALXVPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
* 
	t∑øms
);

13889 (
GLAPIENTRY
 * 
	tPFNGLGETTEXENVXVPROC
Ë(
	tGLíum
 
	tív
, GLíum 
	t≤ame
, 
	tGLfixed
* 
	t∑øms
);

13890 (
GLAPIENTRY
 * 
	tPFNGLGETTEXPARAMETERXVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
* 
	t∑øms
);

13891 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

13892 (
GLAPIENTRY
 * 
	tPFNGLPOINTPARAMETERXVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
* 
	t∑øms
);

13893 (
GLAPIENTRY
 * 
	tPFNGLPOINTSIZEPOINTEROESPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
* 
	tpoöãr
);

13894 (
GLAPIENTRY
 * 
	tPFNGLTEXPARAMETERXVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
* 
	t∑øms
);

13896 
	#glClùPœ√f
 
	`GLEW_GET_FUN
(
__gÀwClùPœ√f
)

	)

13897 
	#glClùPœ√x
 
	`GLEW_GET_FUN
(
__gÀwClùPœ√x
)

	)

13898 
	#glGëClùPœ√f
 
	`GLEW_GET_FUN
(
__gÀwGëClùPœ√f
)

	)

13899 
	#glGëClùPœ√x
 
	`GLEW_GET_FUN
(
__gÀwGëClùPœ√x
)

	)

13900 
	#glGëFixedv
 
	`GLEW_GET_FUN
(
__gÀwGëFixedv
)

	)

13901 
	#glGëLightxv
 
	`GLEW_GET_FUN
(
__gÀwGëLightxv
)

	)

13902 
	#glGëM©îülxv
 
	`GLEW_GET_FUN
(
__gÀwGëM©îülxv
)

	)

13903 
	#glGëTexEnvxv
 
	`GLEW_GET_FUN
(
__gÀwGëTexEnvxv
)

	)

13904 
	#glGëTexP¨amëîxv
 
	`GLEW_GET_FUN
(
__gÀwGëTexP¨amëîxv
)

	)

13905 
	#glPoötP¨amëîx
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîx
)

	)

13906 
	#glPoötP¨amëîxv
 
	`GLEW_GET_FUN
(
__gÀwPoötP¨amëîxv
)

	)

13907 
	#glPoötSizePoöãrOES
 
	`GLEW_GET_FUN
(
__gÀwPoötSizePoöãrOES
)

	)

13908 
	#glTexP¨amëîxv
 
	`GLEW_GET_FUN
(
__gÀwTexP¨amëîxv
)

	)

13910 
	#GLEW_REGAL_ES1_1_com∑tibûôy
 
	`GLEW_GET_VAR
(
__GLEW_REGAL_ES1_1_com∑tibûôy
)

	)

13916 #i‚de‡
GL_REGAL_íabÀ


13917 
	#GL_REGAL_íabÀ
 1

	)

13919 
	#GL_ERROR_REGAL
 0x9322

	)

13920 
	#GL_DEBUG_REGAL
 0x9323

	)

13921 
	#GL_LOG_REGAL
 0x9324

	)

13922 
	#GL_EMULATION_REGAL
 0x9325

	)

13923 
	#GL_DRIVER_REGAL
 0x9326

	)

13924 
	#GL_MISSING_REGAL
 0x9360

	)

13925 
	#GL_TRACE_REGAL
 0x9361

	)

13926 
	#GL_CACHE_REGAL
 0x9362

	)

13927 
	#GL_CODE_REGAL
 0x9363

	)

13928 
	#GL_STATISTICS_REGAL
 0x9364

	)

13930 
	#GLEW_REGAL_íabÀ
 
	`GLEW_GET_VAR
(
__GLEW_REGAL_íabÀ
)

	)

13936 #i‚de‡
GL_REGAL_îr‹_°rög


13937 
	#GL_REGAL_îr‹_°rög
 1

	)

13939 c⁄° 
	tGLch¨
* (
	tGLAPIENTRY
 * 
	tPFNGLERRORSTRINGREGALPROC
Ë(
	tGLíum
 
	tîr‹
);

13941 
	#glEº‹SåögREGAL
 
	`GLEW_GET_FUN
(
__gÀwEº‹SåögREGAL
)

	)

13943 
	#GLEW_REGAL_îr‹_°rög
 
	`GLEW_GET_VAR
(
__GLEW_REGAL_îr‹_°rög
)

	)

13949 #i‚de‡
GL_REGAL_exãnsi⁄_quîy


13950 
	#GL_REGAL_exãnsi⁄_quîy
 1

	)

13952 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLGETEXTENSIONREGALPROC
Ë(c⁄° 
	tGLch¨
* 
	text
);

13953 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISSUPPORTEDREGALPROC
Ë(c⁄° 
	tGLch¨
* 
	text
);

13955 
	#glGëExãnsi⁄REGAL
 
	`GLEW_GET_FUN
(
__gÀwGëExãnsi⁄REGAL
)

	)

13956 
	#glIsSuµ‹ãdREGAL
 
	`GLEW_GET_FUN
(
__gÀwIsSuµ‹ãdREGAL
)

	)

13958 
	#GLEW_REGAL_exãnsi⁄_quîy
 
	`GLEW_GET_VAR
(
__GLEW_REGAL_exãnsi⁄_quîy
)

	)

13964 #i‚de‡
GL_REGAL_log


13965 
	#GL_REGAL_log
 1

	)

13967 
	#GL_LOG_ERROR_REGAL
 0x9319

	)

13968 
	#GL_LOG_WARNING_REGAL
 0x931A

	)

13969 
	#GL_LOG_INFO_REGAL
 0x931B

	)

13970 
	#GL_LOG_APP_REGAL
 0x931C

	)

13971 
	#GL_LOG_DRIVER_REGAL
 0x931D

	)

13972 
	#GL_LOG_INTERNAL_REGAL
 0x931E

	)

13973 
	#GL_LOG_DEBUG_REGAL
 0x931F

	)

13974 
	#GL_LOG_STATUS_REGAL
 0x9320

	)

13975 
	#GL_LOG_HTTP_REGAL
 0x9321

	)

13977 (
APIENTRY
 *
	tGLLOGPROCREGAL
)(
	tGLíum
 
	t°ªam
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tmesßge
, 
	tGLvoid
 *
	tc⁄ãxt
);

13979 (
GLAPIENTRY
 * 
	tPFNGLLOGMESSAGECALLBACKREGALPROC
Ë(
	tGLLOGPROCREGAL
 
	tˇŒback
);

13981 
	#glLogMesßgeCÆlbackREGAL
 
	`GLEW_GET_FUN
(
__gÀwLogMesßgeCÆlbackREGAL
)

	)

13983 
	#GLEW_REGAL_log
 
	`GLEW_GET_VAR
(
__GLEW_REGAL_log
)

	)

13989 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


13990 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

13992 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

13993 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

13995 
	#GLEW_REND_s¸ìn_co‹dö©es
 
	`GLEW_GET_VAR
(
__GLEW_REND_s¸ìn_co‹dö©es
)

	)

14001 #i‚de‡
GL_S3_s3tc


14002 
	#GL_S3_s3tc
 1

	)

14004 
	#GL_RGB_S3TC
 0x83A0

	)

14005 
	#GL_RGB4_S3TC
 0x83A1

	)

14006 
	#GL_RGBA_S3TC
 0x83A2

	)

14007 
	#GL_RGBA4_S3TC
 0x83A3

	)

14008 
	#GL_RGBA_DXT5_S3TC
 0x83A4

	)

14009 
	#GL_RGBA4_DXT5_S3TC
 0x83A5

	)

14011 
	#GLEW_S3_s3tc
 
	`GLEW_GET_VAR
(
__GLEW_S3_s3tc
)

	)

14017 #i‚de‡
GL_SGIS_cﬁ‹_ønge


14018 
	#GL_SGIS_cﬁ‹_ønge
 1

	)

14020 
	#GL_EXTENDED_RANGE_SGIS
 0x85A5

	)

14021 
	#GL_MIN_RED_SGIS
 0x85A6

	)

14022 
	#GL_MAX_RED_SGIS
 0x85A7

	)

14023 
	#GL_MIN_GREEN_SGIS
 0x85A8

	)

14024 
	#GL_MAX_GREEN_SGIS
 0x85A9

	)

14025 
	#GL_MIN_BLUE_SGIS
 0x85AA

	)

14026 
	#GL_MAX_BLUE_SGIS
 0x85AB

	)

14027 
	#GL_MIN_ALPHA_SGIS
 0x85AC

	)

14028 
	#GL_MAX_ALPHA_SGIS
 0x85AD

	)

14030 
	#GLEW_SGIS_cﬁ‹_ønge
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_cﬁ‹_ønge
)

	)

14036 #i‚de‡
GL_SGIS_dëaû_ãxtuª


14037 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

14039 (
GLAPIENTRY
 * 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tpoöts
);

14040 (
GLAPIENTRY
 * 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
* 
	tpoöts
);

14042 
	#glDëaûTexFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwDëaûTexFuncSGIS
)

	)

14043 
	#glGëDëaûTexFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwGëDëaûTexFuncSGIS
)

	)

14045 
	#GLEW_SGIS_dëaû_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_dëaû_ãxtuª
)

	)

14051 #i‚de‡
GL_SGIS_fog_fun˘i⁄


14052 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

14054 (
GLAPIENTRY
 * 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tpoöts
);

14055 (
GLAPIENTRY
 * 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
* 
	tpoöts
);

14057 
	#glFogFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwFogFuncSGIS
)

	)

14058 
	#glGëFogFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwGëFogFuncSGIS
)

	)

14060 
	#GLEW_SGIS_fog_fun˘i⁄
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_fog_fun˘i⁄
)

	)

14066 #i‚de‡
GL_SGIS_gíî©e_mùm≠


14067 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

14069 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

14070 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

14072 
	#GLEW_SGIS_gíî©e_mùm≠
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_gíî©e_mùm≠
)

	)

14078 #i‚de‡
GL_SGIS_mu…ißm∂e


14079 
	#GL_SGIS_mu…ißm∂e
 1

	)

14081 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

14082 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

14083 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

14084 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

14085 
	#GL_1PASS_SGIS
 0x80A1

	)

14086 
	#GL_2PASS_0_SGIS
 0x80A2

	)

14087 
	#GL_2PASS_1_SGIS
 0x80A3

	)

14088 
	#GL_4PASS_0_SGIS
 0x80A4

	)

14089 
	#GL_4PASS_1_SGIS
 0x80A5

	)

14090 
	#GL_4PASS_2_SGIS
 0x80A6

	)

14091 
	#GL_4PASS_3_SGIS
 0x80A7

	)

14092 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

14093 
	#GL_SAMPLES_SGIS
 0x80A9

	)

14094 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

14095 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

14096 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

14098 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

14099 (
GLAPIENTRY
 * 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

14101 
	#glSam∂eMaskSGIS
 
	`GLEW_GET_FUN
(
__gÀwSam∂eMaskSGIS
)

	)

14102 
	#glSam∂eP©ã∫SGIS
 
	`GLEW_GET_FUN
(
__gÀwSam∂eP©ã∫SGIS
)

	)

14104 
	#GLEW_SGIS_mu…ißm∂e
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_mu…ißm∂e
)

	)

14110 #i‚de‡
GL_SGIS_pixñ_ãxtuª


14111 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

14113 
	#GLEW_SGIS_pixñ_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_pixñ_ãxtuª
)

	)

14119 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


14120 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

14122 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

14123 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

14124 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

14125 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

14126 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

14127 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

14128 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

14129 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

14131 
	#GLEW_SGIS_poöt_löe_ãxgí
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_poöt_löe_ãxgí
)

	)

14137 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


14138 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

14140 (
GLAPIENTRY
 * 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
* 
	tpoöts
);

14141 (
GLAPIENTRY
 * 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tpoöts
);

14143 
	#glGëSh¨≥nTexFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwGëSh¨≥nTexFuncSGIS
)

	)

14144 
	#glSh¨≥nTexFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwSh¨≥nTexFuncSGIS
)

	)

14146 
	#GLEW_SGIS_sh¨≥n_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_sh¨≥n_ãxtuª
)

	)

14152 #i‚de‡
GL_SGIS_ãxtuª4D


14153 
	#GL_SGIS_ãxtuª4D
 1

	)

14155 (
GLAPIENTRY
 * 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	texã¡
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

14156 (
GLAPIENTRY
 * 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	texã¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tpixñs
);

14158 
	#glTexImage4DSGIS
 
	`GLEW_GET_FUN
(
__gÀwTexImage4DSGIS
)

	)

14159 
	#glTexSubImage4DSGIS
 
	`GLEW_GET_FUN
(
__gÀwTexSubImage4DSGIS
)

	)

14161 
	#GLEW_SGIS_ãxtuª4D
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_ãxtuª4D
)

	)

14167 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


14168 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

14170 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

14172 
	#GLEW_SGIS_ãxtuª_b‹dî_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_ãxtuª_b‹dî_˛amp
)

	)

14178 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


14179 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

14181 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

14183 
	#GLEW_SGIS_ãxtuª_edge_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_ãxtuª_edge_˛amp
)

	)

14189 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


14190 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

14192 (
GLAPIENTRY
 * 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
* 
	tweights
);

14193 (
GLAPIENTRY
 * 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
* 
	tweights
);

14195 
	#glGëTexFûãrFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwGëTexFûãrFuncSGIS
)

	)

14196 
	#glTexFûãrFuncSGIS
 
	`GLEW_GET_FUN
(
__gÀwTexFûãrFuncSGIS
)

	)

14198 
	#GLEW_SGIS_ãxtuª_fûãr4
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_ãxtuª_fûãr4
)

	)

14204 #i‚de‡
GL_SGIS_ãxtuª_lod


14205 
	#GL_SGIS_ãxtuª_lod
 1

	)

14207 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

14208 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

14209 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

14210 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

14212 
	#GLEW_SGIS_ãxtuª_lod
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_ãxtuª_lod
)

	)

14218 #i‚de‡
GL_SGIS_ãxtuª_£À˘


14219 
	#GL_SGIS_ãxtuª_£À˘
 1

	)

14221 
	#GLEW_SGIS_ãxtuª_£À˘
 
	`GLEW_GET_VAR
(
__GLEW_SGIS_ãxtuª_£À˘
)

	)

14227 #i‚de‡
GL_SGIX_async


14228 
	#GL_SGIX_async
 1

	)

14230 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

14232 (
GLAPIENTRY
 * 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

14233 (
GLAPIENTRY
 * 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

14234 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
* 
	tm¨kîp
);

14235 
GLuöt
 (
	tGLAPIENTRY
 * 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

14236 
GLboﬁón
 (
	tGLAPIENTRY
 * 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

14237 
GLöt
 (
	tGLAPIENTRY
 * 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
* 
	tm¨kîp
);

14239 
	#glAsyncM¨kîSGIX
 
	`GLEW_GET_FUN
(
__gÀwAsyncM¨kîSGIX
)

	)

14240 
	#glDñëeAsyncM¨kîsSGIX
 
	`GLEW_GET_FUN
(
__gÀwDñëeAsyncM¨kîsSGIX
)

	)

14241 
	#glFöishAsyncSGIX
 
	`GLEW_GET_FUN
(
__gÀwFöishAsyncSGIX
)

	)

14242 
	#glGíAsyncM¨kîsSGIX
 
	`GLEW_GET_FUN
(
__gÀwGíAsyncM¨kîsSGIX
)

	)

14243 
	#glIsAsyncM¨kîSGIX
 
	`GLEW_GET_FUN
(
__gÀwIsAsyncM¨kîSGIX
)

	)

14244 
	#glPﬁlAsyncSGIX
 
	`GLEW_GET_FUN
(
__gÀwPﬁlAsyncSGIX
)

	)

14246 
	#GLEW_SGIX_async
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_async
)

	)

14252 #i‚de‡
GL_SGIX_async_hi°ogøm


14253 
	#GL_SGIX_async_hi°ogøm
 1

	)

14255 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

14256 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

14258 
	#GLEW_SGIX_async_hi°ogøm
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_async_hi°ogøm
)

	)

14264 #i‚de‡
GL_SGIX_async_pixñ


14265 
	#GL_SGIX_async_pixñ
 1

	)

14267 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

14268 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

14269 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

14270 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

14271 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

14272 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

14274 
	#GLEW_SGIX_async_pixñ
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_async_pixñ
)

	)

14280 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


14281 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

14283 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

14284 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

14286 
	#GLEW_SGIX_bÀnd_Æpha_mömax
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_bÀnd_Æpha_mömax
)

	)

14292 #i‚de‡
GL_SGIX_˛ùm≠


14293 
	#GL_SGIX_˛ùm≠
 1

	)

14295 
	#GLEW_SGIX_˛ùm≠
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_˛ùm≠
)

	)

14301 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


14302 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

14304 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

14306 
	#GLEW_SGIX_c⁄vﬁuti⁄_accuøcy
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_c⁄vﬁuti⁄_accuøcy
)

	)

14312 #i‚de‡
GL_SGIX_dïth_ãxtuª


14313 
	#GL_SGIX_dïth_ãxtuª
 1

	)

14315 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

14316 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

14317 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

14319 
	#GLEW_SGIX_dïth_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_dïth_ãxtuª
)

	)

14325 #i‚de‡
GL_SGIX_Êush_ø°î


14326 
	#GL_SGIX_Êush_ø°î
 1

	)

14328 (
GLAPIENTRY
 * 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

14330 
	#glFlushRa°îSGIX
 
	`GLEW_GET_FUN
(
__gÀwFlushRa°îSGIX
)

	)

14332 
	#GLEW_SGIX_Êush_ø°î
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_Êush_ø°î
)

	)

14338 #i‚de‡
GL_SGIX_fog_off£t


14339 
	#GL_SGIX_fog_off£t
 1

	)

14341 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

14342 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

14344 
	#GLEW_SGIX_fog_off£t
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_fog_off£t
)

	)

14350 #i‚de‡
GL_SGIX_fog_ãxtuª


14351 
	#GL_SGIX_fog_ãxtuª
 1

	)

14353 
	#GL_TEXTURE_FOG_SGIX
 0

	)

14354 
	#GL_FOG_PATCHY_FACTOR_SGIX
 0

	)

14355 
	#GL_FRAGMENT_FOG_SGIX
 0

	)

14357 (
GLAPIENTRY
 * 
	tPFNGLTEXTUREFOGSGIXPROC
Ë(
	tGLíum
 
	t≤ame
);

14359 
	#glTextuªFogSGIX
 
	`GLEW_GET_FUN
(
__gÀwTextuªFogSGIX
)

	)

14361 
	#GLEW_SGIX_fog_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_fog_ãxtuª
)

	)

14367 #i‚de‡
GL_SGIX_‰agmít_•ecuœr_lightög


14368 
	#GL_SGIX_‰agmít_•ecuœr_lightög
 1

	)

14370 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

14371 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

14372 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

14373 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

14374 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

14375 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

14376 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

14377 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

14378 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

14379 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 
	t∑øm
);

14380 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

14381 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 
	t∑øm
);

14382 (
GLAPIENTRY
 * 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

14383 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
, 
	tGLÊﬂt
* 
	td©a
);

14384 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
, 
	tGLöt
* 
	td©a
);

14385 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	td©a
);

14386 (
GLAPIENTRY
 * 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	td©a
);

14388 
	#glFøgmítCﬁ‹M©îülSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítCﬁ‹M©îülSGIX
)

	)

14389 
	#glFøgmítLightModñfSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñfSGIX
)

	)

14390 
	#glFøgmítLightModñfvSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñfvSGIX
)

	)

14391 
	#glFøgmítLightModñiSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñiSGIX
)

	)

14392 
	#glFøgmítLightModñivSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightModñivSGIX
)

	)

14393 
	#glFøgmítLightfSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightfSGIX
)

	)

14394 
	#glFøgmítLightfvSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightfvSGIX
)

	)

14395 
	#glFøgmítLightiSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightiSGIX
)

	)

14396 
	#glFøgmítLightivSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítLightivSGIX
)

	)

14397 
	#glFøgmítM©îülfSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îülfSGIX
)

	)

14398 
	#glFøgmítM©îülfvSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îülfvSGIX
)

	)

14399 
	#glFøgmítM©îüliSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îüliSGIX
)

	)

14400 
	#glFøgmítM©îülivSGIX
 
	`GLEW_GET_FUN
(
__gÀwFøgmítM©îülivSGIX
)

	)

14401 
	#glGëFøgmítLightfvSGIX
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítLightfvSGIX
)

	)

14402 
	#glGëFøgmítLightivSGIX
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítLightivSGIX
)

	)

14403 
	#glGëFøgmítM©îülfvSGIX
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítM©îülfvSGIX
)

	)

14404 
	#glGëFøgmítM©îülivSGIX
 
	`GLEW_GET_FUN
(
__gÀwGëFøgmítM©îülivSGIX
)

	)

14406 
	#GLEW_SGIX_‰agmít_•ecuœr_lightög
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_‰agmít_•ecuœr_lightög
)

	)

14412 #i‚de‡
GL_SGIX_‰amezoom


14413 
	#GL_SGIX_‰amezoom
 1

	)

14415 (
GLAPIENTRY
 * 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

14417 
	#glFømeZoomSGIX
 
	`GLEW_GET_FUN
(
__gÀwFømeZoomSGIX
)

	)

14419 
	#GLEW_SGIX_‰amezoom
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_‰amezoom
)

	)

14425 #i‚de‡
GL_SGIX_öãæa˚


14426 
	#GL_SGIX_öãæa˚
 1

	)

14428 
	#GL_INTERLACE_SGIX
 0x8094

	)

14430 
	#GLEW_SGIX_öãæa˚
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_öãæa˚
)

	)

14436 #i‚de‡
GL_SGIX_ú_ö°rumít1


14437 
	#GL_SGIX_ú_ö°rumít1
 1

	)

14439 
	#GLEW_SGIX_ú_ö°rumít1
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ú_ö°rumít1
)

	)

14445 #i‚de‡
GL_SGIX_li°_¥i‹ôy


14446 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

14448 
	#GLEW_SGIX_li°_¥i‹ôy
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_li°_¥i‹ôy
)

	)

14454 #i‚de‡
GL_SGIX_pixñ_ãxtuª


14455 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

14457 (
GLAPIENTRY
 * 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

14459 
	#glPixñTexGíSGIX
 
	`GLEW_GET_FUN
(
__gÀwPixñTexGíSGIX
)

	)

14461 
	#GLEW_SGIX_pixñ_ãxtuª
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_pixñ_ãxtuª
)

	)

14467 #i‚de‡
GL_SGIX_pixñ_ãxtuª_bôs


14468 
	#GL_SGIX_pixñ_ãxtuª_bôs
 1

	)

14470 
	#GLEW_SGIX_pixñ_ãxtuª_bôs
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_pixñ_ãxtuª_bôs
)

	)

14476 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


14477 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

14479 (
GLAPIENTRY
 * 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
* 
	tequ©i⁄
);

14481 
	#glRe„ªn˚Pœ√SGIX
 
	`GLEW_GET_FUN
(
__gÀwRe„ªn˚Pœ√SGIX
)

	)

14483 
	#GLEW_SGIX_ª„ªn˚_∂™e
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ª„ªn˚_∂™e
)

	)

14489 #i‚de‡
GL_SGIX_ªßm∂e


14490 
	#GL_SGIX_ªßm∂e
 1

	)

14492 
	#GL_PACK_RESAMPLE_SGIX
 0x842E

	)

14493 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842F

	)

14494 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

14495 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x8433

	)

14496 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x8434

	)

14498 
	#GLEW_SGIX_ªßm∂e
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ªßm∂e
)

	)

14504 #i‚de‡
GL_SGIX_shadow


14505 
	#GL_SGIX_shadow
 1

	)

14507 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

14508 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

14509 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

14510 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

14512 
	#GLEW_SGIX_shadow
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_shadow
)

	)

14518 #i‚de‡
GL_SGIX_shadow_ambõ¡


14519 
	#GL_SGIX_shadow_ambõ¡
 1

	)

14521 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

14523 
	#GLEW_SGIX_shadow_ambõ¡
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_shadow_ambõ¡
)

	)

14529 #i‚de‡
GL_SGIX_•rôe


14530 
	#GL_SGIX_•rôe
 1

	)

14532 (
GLAPIENTRY
 * 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

14533 (
GLAPIENTRY
 * 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

14534 (
GLAPIENTRY
 * 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

14535 (
GLAPIENTRY
 * 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

14537 
	#glS¥ôeP¨amëîfSGIX
 
	`GLEW_GET_FUN
(
__gÀwS¥ôeP¨amëîfSGIX
)

	)

14538 
	#glS¥ôeP¨amëîfvSGIX
 
	`GLEW_GET_FUN
(
__gÀwS¥ôeP¨amëîfvSGIX
)

	)

14539 
	#glS¥ôeP¨amëîiSGIX
 
	`GLEW_GET_FUN
(
__gÀwS¥ôeP¨amëîiSGIX
)

	)

14540 
	#glS¥ôeP¨amëîivSGIX
 
	`GLEW_GET_FUN
(
__gÀwS¥ôeP¨amëîivSGIX
)

	)

14542 
	#GLEW_SGIX_•rôe
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_•rôe
)

	)

14548 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


14549 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

14551 (
GLAPIENTRY
 * 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

14553 
	#glTagSam∂eBuf„rSGIX
 
	`GLEW_GET_FUN
(
__gÀwTagSam∂eBuf„rSGIX
)

	)

14555 
	#GLEW_SGIX_èg_ßm∂e_buf„r
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_èg_ßm∂e_buf„r
)

	)

14561 #i‚de‡
GL_SGIX_ãxtuª_add_ív


14562 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

14564 
	#GLEW_SGIX_ãxtuª_add_ív
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ãxtuª_add_ív
)

	)

14570 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


14571 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

14573 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

14574 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

14575 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

14577 
	#GLEW_SGIX_ãxtuª_co‹dö©e_˛amp
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ãxtuª_co‹dö©e_˛amp
)

	)

14583 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


14584 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

14586 
	#GLEW_SGIX_ãxtuª_lod_büs
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ãxtuª_lod_büs
)

	)

14592 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


14593 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

14595 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

14597 
	#GLEW_SGIX_ãxtuª_mu…i_buf„r
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ãxtuª_mu…i_buf„r
)

	)

14603 #i‚de‡
GL_SGIX_ãxtuª_ønge


14604 
	#GL_SGIX_ãxtuª_ønge
 1

	)

14606 
	#GL_RGB_SIGNED_SGIX
 0x85E0

	)

14607 
	#GL_RGBA_SIGNED_SGIX
 0x85E1

	)

14608 
	#GL_ALPHA_SIGNED_SGIX
 0x85E2

	)

14609 
	#GL_LUMINANCE_SIGNED_SGIX
 0x85E3

	)

14610 
	#GL_INTENSITY_SIGNED_SGIX
 0x85E4

	)

14611 
	#GL_LUMINANCE_ALPHA_SIGNED_SGIX
 0x85E5

	)

14612 
	#GL_RGB16_SIGNED_SGIX
 0x85E6

	)

14613 
	#GL_RGBA16_SIGNED_SGIX
 0x85E7

	)

14614 
	#GL_ALPHA16_SIGNED_SGIX
 0x85E8

	)

14615 
	#GL_LUMINANCE16_SIGNED_SGIX
 0x85E9

	)

14616 
	#GL_INTENSITY16_SIGNED_SGIX
 0x85EA

	)

14617 
	#GL_LUMINANCE16_ALPHA16_SIGNED_SGIX
 0x85EB

	)

14618 
	#GL_RGB_EXTENDED_RANGE_SGIX
 0x85EC

	)

14619 
	#GL_RGBA_EXTENDED_RANGE_SGIX
 0x85ED

	)

14620 
	#GL_ALPHA_EXTENDED_RANGE_SGIX
 0x85EE

	)

14621 
	#GL_LUMINANCE_EXTENDED_RANGE_SGIX
 0x85EF

	)

14622 
	#GL_INTENSITY_EXTENDED_RANGE_SGIX
 0x85F0

	)

14623 
	#GL_LUMINANCE_ALPHA_EXTENDED_RANGE_SGIX
 0x85F1

	)

14624 
	#GL_RGB16_EXTENDED_RANGE_SGIX
 0x85F2

	)

14625 
	#GL_RGBA16_EXTENDED_RANGE_SGIX
 0x85F3

	)

14626 
	#GL_ALPHA16_EXTENDED_RANGE_SGIX
 0x85F4

	)

14627 
	#GL_LUMINANCE16_EXTENDED_RANGE_SGIX
 0x85F5

	)

14628 
	#GL_INTENSITY16_EXTENDED_RANGE_SGIX
 0x85F6

	)

14629 
	#GL_LUMINANCE16_ALPHA16_EXTENDED_RANGE_SGIX
 0x85F7

	)

14630 
	#GL_MIN_LUMINANCE_SGIS
 0x85F8

	)

14631 
	#GL_MAX_LUMINANCE_SGIS
 0x85F9

	)

14632 
	#GL_MIN_INTENSITY_SGIS
 0x85FA

	)

14633 
	#GL_MAX_INTENSITY_SGIS
 0x85FB

	)

14635 
	#GLEW_SGIX_ãxtuª_ønge
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ãxtuª_ønge
)

	)

14641 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


14642 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

14644 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

14645 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

14646 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

14647 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

14649 
	#GLEW_SGIX_ãxtuª_sˇÀ_büs
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_ãxtuª_sˇÀ_büs
)

	)

14655 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


14656 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

14658 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

14659 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

14661 
	#GLEW_SGIX_vîãx_¥e˛ù
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_vîãx_¥e˛ù
)

	)

14667 #i‚de‡
GL_SGIX_vîãx_¥e˛ù_höt


14668 
	#GL_SGIX_vîãx_¥e˛ù_höt
 1

	)

14670 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

14671 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

14673 
	#GLEW_SGIX_vîãx_¥e˛ù_höt
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_vîãx_¥e˛ù_höt
)

	)

14679 #i‚de‡
GL_SGIX_y¸cb


14680 
	#GL_SGIX_y¸cb
 1

	)

14682 
	#GLEW_SGIX_y¸cb
 
	`GLEW_GET_VAR
(
__GLEW_SGIX_y¸cb
)

	)

14688 #i‚de‡
GL_SGI_cﬁ‹_m©rix


14689 
	#GL_SGI_cﬁ‹_m©rix
 1

	)

14691 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

14692 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

14693 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

14694 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

14695 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

14696 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

14697 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

14698 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

14699 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

14700 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

14701 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

14703 
	#GLEW_SGI_cﬁ‹_m©rix
 
	`GLEW_GET_VAR
(
__GLEW_SGI_cﬁ‹_m©rix
)

	)

14709 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


14710 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

14712 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

14713 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

14714 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

14715 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

14716 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

14717 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

14718 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

14719 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

14720 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

14721 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

14722 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

14723 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

14724 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

14725 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

14726 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

14727 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

14729 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
* 
	t∑øms
);

14730 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
* 
	t∑øms
);

14731 (
GLAPIENTRY
 * 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° 
	tGLvoid
 *
	tèbÀ
);

14732 (
GLAPIENTRY
 * 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

14733 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
* 
	t∑øms
);

14734 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
* 
	t∑øms
);

14735 (
GLAPIENTRY
 * 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
 *
	tèbÀ
);

14737 
	#glCﬁ‹TabÀP¨amëîfvSGI
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀP¨amëîfvSGI
)

	)

14738 
	#glCﬁ‹TabÀP¨amëîivSGI
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀP¨amëîivSGI
)

	)

14739 
	#glCﬁ‹TabÀSGI
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹TabÀSGI
)

	)

14740 
	#glC›yCﬁ‹TabÀSGI
 
	`GLEW_GET_FUN
(
__gÀwC›yCﬁ‹TabÀSGI
)

	)

14741 
	#glGëCﬁ‹TabÀP¨amëîfvSGI
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀP¨amëîfvSGI
)

	)

14742 
	#glGëCﬁ‹TabÀP¨amëîivSGI
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀP¨amëîivSGI
)

	)

14743 
	#glGëCﬁ‹TabÀSGI
 
	`GLEW_GET_FUN
(
__gÀwGëCﬁ‹TabÀSGI
)

	)

14745 
	#GLEW_SGI_cﬁ‹_èbÀ
 
	`GLEW_GET_VAR
(
__GLEW_SGI_cﬁ‹_èbÀ
)

	)

14751 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


14752 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

14754 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

14755 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

14757 
	#GLEW_SGI_ãxtuª_cﬁ‹_èbÀ
 
	`GLEW_GET_VAR
(
__GLEW_SGI_ãxtuª_cﬁ‹_èbÀ
)

	)

14763 #i‚de‡
GL_SUNX_c⁄°™t_d©a


14764 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

14766 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

14767 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

14769 (
GLAPIENTRY
 * 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

14771 
	#glFöishTextuªSUNX
 
	`GLEW_GET_FUN
(
__gÀwFöishTextuªSUNX
)

	)

14773 
	#GLEW_SUNX_c⁄°™t_d©a
 
	`GLEW_GET_VAR
(
__GLEW_SUNX_c⁄°™t_d©a
)

	)

14779 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


14780 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

14782 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

14784 
	#GLEW_SUN_c⁄vﬁuti⁄_b‹dî_modes
 
	`GLEW_GET_VAR
(
__GLEW_SUN_c⁄vﬁuti⁄_b‹dî_modes
)

	)

14790 #i‚de‡
GL_SUN_globÆ_Æpha


14791 
	#GL_SUN_globÆ_Æpha
 1

	)

14793 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

14794 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

14796 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

14797 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

14798 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

14799 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

14800 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

14801 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

14802 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

14803 (
GLAPIENTRY
 * 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

14805 
	#glGlobÆAÕhaFa˘‹bSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹bSUN
)

	)

14806 
	#glGlobÆAÕhaFa˘‹dSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹dSUN
)

	)

14807 
	#glGlobÆAÕhaFa˘‹fSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹fSUN
)

	)

14808 
	#glGlobÆAÕhaFa˘‹iSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹iSUN
)

	)

14809 
	#glGlobÆAÕhaFa˘‹sSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹sSUN
)

	)

14810 
	#glGlobÆAÕhaFa˘‹ubSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹ubSUN
)

	)

14811 
	#glGlobÆAÕhaFa˘‹uiSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹uiSUN
)

	)

14812 
	#glGlobÆAÕhaFa˘‹usSUN
 
	`GLEW_GET_FUN
(
__gÀwGlobÆAÕhaFa˘‹usSUN
)

	)

14814 
	#GLEW_SUN_globÆ_Æpha
 
	`GLEW_GET_VAR
(
__GLEW_SUN_globÆ_Æpha
)

	)

14820 #i‚de‡
GL_SUN_mesh_¨øy


14821 
	#GL_SUN_mesh_¨øy
 1

	)

14823 
	#GL_QUAD_MESH_SUN
 0x8614

	)

14824 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

14826 
	#GLEW_SUN_mesh_¨øy
 
	`GLEW_GET_VAR
(
__GLEW_SUN_mesh_¨øy
)

	)

14832 #i‚de‡
GL_SUN_ªad_video_pixñs


14833 
	#GL_SUN_ªad_video_pixñs
 1

	)

14835 (
GLAPIENTRY
 * 
	tPFNGLREADVIDEOPIXELSSUNPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLvoid
* 
	tpixñs
);

14837 
	#glRódVideoPixñsSUN
 
	`GLEW_GET_FUN
(
__gÀwRódVideoPixñsSUN
)

	)

14839 
	#GLEW_SUN_ªad_video_pixñs
 
	`GLEW_GET_VAR
(
__GLEW_SUN_ªad_video_pixñs
)

	)

14845 #i‚de‡
GL_SUN_¶i˚_accum


14846 
	#GL_SUN_¶i˚_accum
 1

	)

14848 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

14850 
	#GLEW_SUN_¶i˚_accum
 
	`GLEW_GET_VAR
(
__GLEW_SUN_¶i˚_accum
)

	)

14856 #i‚de‡
GL_SUN_åüngÀ_li°


14857 
	#GL_SUN_åüngÀ_li°
 1

	)

14859 
	#GL_RESTART_SUN
 0x01

	)

14860 
	#GL_REPLACE_MIDDLE_SUN
 0x02

	)

14861 
	#GL_REPLACE_OLDEST_SUN
 0x03

	)

14862 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

14863 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

14864 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

14865 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

14866 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

14867 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

14868 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

14869 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

14870 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

14871 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

14872 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

14873 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

14874 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

14875 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

14877 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° 
	tGLvoid
 *
	tpoöãr
);

14878 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

14879 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
* 
	tcode
);

14880 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

14881 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	tcode
);

14882 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

14883 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
* 
	tcode
);

14885 
	#glRïœ˚mítCodePoöãrSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodePoöãrSUN
)

	)

14886 
	#glRïœ˚mítCodeubSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeubSUN
)

	)

14887 
	#glRïœ˚mítCodeubvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeubvSUN
)

	)

14888 
	#glRïœ˚mítCodeuiSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiSUN
)

	)

14889 
	#glRïœ˚mítCodeuivSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuivSUN
)

	)

14890 
	#glRïœ˚mítCodeusSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeusSUN
)

	)

14891 
	#glRïœ˚mítCodeusvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeusvSUN
)

	)

14893 
	#GLEW_SUN_åüngÀ_li°
 
	`GLEW_GET_VAR
(
__GLEW_SUN_åüngÀ_li°
)

	)

14899 #i‚de‡
GL_SUN_vîãx


14900 
	#GL_SUN_vîãx
 1

	)

14902 (
GLAPIENTRY
 * 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14903 (
GLAPIENTRY
 * 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tc
, c⁄° GLÊﬂà*
	tv
);

14904 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14905 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14906 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

14907 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
* 
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

14908 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14909 (
GLAPIENTRY
 * 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
* 
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

14910 (
GLAPIENTRY
 * 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14911 (
GLAPIENTRY
 * 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	tn
, c⁄° GLÊﬂà*
	tv
);

14912 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14913 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

14914 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14915 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14916 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14917 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

14918 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14919 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

14920 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14921 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14922 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14923 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14924 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14925 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

14926 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14927 (
GLAPIENTRY
 * 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
* 
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

14928 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14929 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

14930 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14931 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14932 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14933 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

14934 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14935 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14936 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

14937 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° GLÊﬂà*
	tv
);

14938 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

14939 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

14940 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

14941 (
GLAPIENTRY
 * 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
* 
	ttc
, c⁄° GLÊﬂà*
	tv
);

14943 
	#glCﬁ‹3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹3fVîãx3fSUN
)

	)

14944 
	#glCﬁ‹3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹3fVîãx3fvSUN
)

	)

14945 
	#glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4fN‹mÆ3fVîãx3fSUN
)

	)

14946 
	#glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4fN‹mÆ3fVîãx3fvSUN
)

	)

14947 
	#glCﬁ‹4ubVîãx2fSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4ubVîãx2fSUN
)

	)

14948 
	#glCﬁ‹4ubVîãx2fvSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4ubVîãx2fvSUN
)

	)

14949 
	#glCﬁ‹4ubVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4ubVîãx3fSUN
)

	)

14950 
	#glCﬁ‹4ubVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwCﬁ‹4ubVîãx3fvSUN
)

	)

14951 
	#glN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆ3fVîãx3fSUN
)

	)

14952 
	#glN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwN‹mÆ3fVîãx3fvSUN
)

	)

14953 
	#glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
)

	)

14954 
	#glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
)

	)

14955 
	#glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
)

	)

14956 
	#glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
)

	)

14957 
	#glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
)

	)

14958 
	#glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
)

	)

14959 
	#glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
)

	)

14960 
	#glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
)

	)

14961 
	#glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
)

	)

14962 
	#glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
)

	)

14963 
	#glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
)

	)

14964 
	#glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
)

	)

14965 
	#glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
)

	)

14966 
	#glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
)

	)

14967 
	#glRïœ˚mítCodeuiVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiVîãx3fSUN
)

	)

14968 
	#glRïœ˚mítCodeuiVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwRïœ˚mítCodeuiVîãx3fvSUN
)

	)

14969 
	#glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fCﬁ‹3fVîãx3fSUN
)

	)

14970 
	#glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fCﬁ‹3fVîãx3fvSUN
)

	)

14971 
	#glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
)

	)

14972 
	#glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
)

	)

14973 
	#glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fCﬁ‹4ubVîãx3fSUN
)

	)

14974 
	#glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
)

	)

14975 
	#glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fN‹mÆ3fVîãx3fSUN
)

	)

14976 
	#glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fN‹mÆ3fVîãx3fvSUN
)

	)

14977 
	#glTexCo‹d2fVîãx3fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fVîãx3fSUN
)

	)

14978 
	#glTexCo‹d2fVîãx3fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d2fVîãx3fvSUN
)

	)

14979 
	#glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
)

	)

14980 
	#glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
)

	)

14981 
	#glTexCo‹d4fVîãx4fSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d4fVîãx4fSUN
)

	)

14982 
	#glTexCo‹d4fVîãx4fvSUN
 
	`GLEW_GET_FUN
(
__gÀwTexCo‹d4fVîãx4fvSUN
)

	)

14984 
	#GLEW_SUN_vîãx
 
	`GLEW_GET_VAR
(
__GLEW_SUN_vîãx
)

	)

14990 #i‚de‡
GL_WIN_ph⁄g_shadög


14991 
	#GL_WIN_ph⁄g_shadög
 1

	)

14993 
	#GL_PHONG_WIN
 0x80EA

	)

14994 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

14996 
	#GLEW_WIN_ph⁄g_shadög
 
	`GLEW_GET_VAR
(
__GLEW_WIN_ph⁄g_shadög
)

	)

15002 #i‚de‡
GL_WIN_•ecuœr_fog


15003 
	#GL_WIN_•ecuœr_fog
 1

	)

15005 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

15007 
	#GLEW_WIN_•ecuœr_fog
 
	`GLEW_GET_VAR
(
__GLEW_WIN_•ecuœr_fog
)

	)

15013 #i‚de‡
GL_WIN_sw≠_höt


15014 
	#GL_WIN_sw≠_höt
 1

	)

15016 (
GLAPIENTRY
 * 
	tPFNGLADDSWAPHINTRECTWINPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

15018 
	#glAddSw≠HötRe˘WIN
 
	`GLEW_GET_FUN
(
__gÀwAddSw≠HötRe˘WIN
)

	)

15020 
	#GLEW_WIN_sw≠_höt
 
	`GLEW_GET_VAR
(
__GLEW_WIN_sw≠_höt
)

	)

15026 #i‡
deföed
(
GLEW_MX
Ë&& deföed(
_WIN32
)

15027 
	#GLEW_FUN_EXPORT


	)

15029 
	#GLEW_FUN_EXPORT
 
GLEWAPI


	)

15032 #i‡
deföed
(
GLEW_MX
)

15033 
	#GLEW_VAR_EXPORT


	)

15035 
	#GLEW_VAR_EXPORT
 
GLEWAPI


	)

15038 #i‡
deföed
(
GLEW_MX
Ë&& deföed(
_WIN32
)

15039 
	sGLEWC⁄ãxtSåu˘


15043 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXSUBIMAGE3DPROC
 
	g__gÀwC›yTexSubImage3D
;

15044 
GLEW_FUN_EXPORT
 
PFNGLDRAWRANGEELEMENTSPROC
 
	g__gÀwDøwR™geEÀmíts
;

15045 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE3DPROC
 
	g__gÀwTexImage3D
;

15046 
GLEW_FUN_EXPORT
 
PFNGLTEXSUBIMAGE3DPROC
 
	g__gÀwTexSubImage3D
;

15048 
GLEW_FUN_EXPORT
 
PFNGLACTIVETEXTUREPROC
 
	g__gÀwA˘iveTextuª
;

15049 
GLEW_FUN_EXPORT
 
PFNGLCLIENTACTIVETEXTUREPROC
 
	g__gÀwClõ¡A˘iveTextuª
;

15050 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXIMAGE1DPROC
 
	g__gÀwCom¥es£dTexImage1D
;

15051 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXIMAGE2DPROC
 
	g__gÀwCom¥es£dTexImage2D
;

15052 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXIMAGE3DPROC
 
	g__gÀwCom¥es£dTexImage3D
;

15053 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
 
	g__gÀwCom¥es£dTexSubImage1D
;

15054 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
 
	g__gÀwCom¥es£dTexSubImage2D
;

15055 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
 
	g__gÀwCom¥es£dTexSubImage3D
;

15056 
GLEW_FUN_EXPORT
 
PFNGLGETCOMPRESSEDTEXIMAGEPROC
 
	g__gÀwGëCom¥es£dTexImage
;

15057 
GLEW_FUN_EXPORT
 
PFNGLLOADTRANSPOSEMATRIXDPROC
 
	g__gÀwLﬂdTøn•o£M©rixd
;

15058 
GLEW_FUN_EXPORT
 
PFNGLLOADTRANSPOSEMATRIXFPROC
 
	g__gÀwLﬂdTøn•o£M©rixf
;

15059 
GLEW_FUN_EXPORT
 
PFNGLMULTTRANSPOSEMATRIXDPROC
 
	g__gÀwMu…Tøn•o£M©rixd
;

15060 
GLEW_FUN_EXPORT
 
PFNGLMULTTRANSPOSEMATRIXFPROC
 
	g__gÀwMu…Tøn•o£M©rixf
;

15061 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1DPROC
 
	g__gÀwMu…iTexCo‹d1d
;

15062 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1DVPROC
 
	g__gÀwMu…iTexCo‹d1dv
;

15063 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1FPROC
 
	g__gÀwMu…iTexCo‹d1f
;

15064 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1FVPROC
 
	g__gÀwMu…iTexCo‹d1fv
;

15065 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1IPROC
 
	g__gÀwMu…iTexCo‹d1i
;

15066 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1IVPROC
 
	g__gÀwMu…iTexCo‹d1iv
;

15067 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1SPROC
 
	g__gÀwMu…iTexCo‹d1s
;

15068 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1SVPROC
 
	g__gÀwMu…iTexCo‹d1sv
;

15069 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2DPROC
 
	g__gÀwMu…iTexCo‹d2d
;

15070 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2DVPROC
 
	g__gÀwMu…iTexCo‹d2dv
;

15071 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2FPROC
 
	g__gÀwMu…iTexCo‹d2f
;

15072 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2FVPROC
 
	g__gÀwMu…iTexCo‹d2fv
;

15073 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2IPROC
 
	g__gÀwMu…iTexCo‹d2i
;

15074 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2IVPROC
 
	g__gÀwMu…iTexCo‹d2iv
;

15075 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2SPROC
 
	g__gÀwMu…iTexCo‹d2s
;

15076 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2SVPROC
 
	g__gÀwMu…iTexCo‹d2sv
;

15077 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3DPROC
 
	g__gÀwMu…iTexCo‹d3d
;

15078 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3DVPROC
 
	g__gÀwMu…iTexCo‹d3dv
;

15079 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3FPROC
 
	g__gÀwMu…iTexCo‹d3f
;

15080 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3FVPROC
 
	g__gÀwMu…iTexCo‹d3fv
;

15081 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3IPROC
 
	g__gÀwMu…iTexCo‹d3i
;

15082 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3IVPROC
 
	g__gÀwMu…iTexCo‹d3iv
;

15083 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3SPROC
 
	g__gÀwMu…iTexCo‹d3s
;

15084 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3SVPROC
 
	g__gÀwMu…iTexCo‹d3sv
;

15085 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4DPROC
 
	g__gÀwMu…iTexCo‹d4d
;

15086 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4DVPROC
 
	g__gÀwMu…iTexCo‹d4dv
;

15087 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4FPROC
 
	g__gÀwMu…iTexCo‹d4f
;

15088 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4FVPROC
 
	g__gÀwMu…iTexCo‹d4fv
;

15089 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4IPROC
 
	g__gÀwMu…iTexCo‹d4i
;

15090 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4IVPROC
 
	g__gÀwMu…iTexCo‹d4iv
;

15091 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4SPROC
 
	g__gÀwMu…iTexCo‹d4s
;

15092 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4SVPROC
 
	g__gÀwMu…iTexCo‹d4sv
;

15093 
GLEW_FUN_EXPORT
 
PFNGLSAMPLECOVERAGEPROC
 
	g__gÀwSam∂eCovîage
;

15095 
GLEW_FUN_EXPORT
 
PFNGLBLENDCOLORPROC
 
	g__gÀwBÀndCﬁ‹
;

15096 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONPROC
 
	g__gÀwBÀndEqu©i⁄
;

15097 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCSEPARATEPROC
 
	g__gÀwBÀndFuncSï¨©e
;

15098 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDPOINTERPROC
 
	g__gÀwFogCo‹dPoöãr
;

15099 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDDPROC
 
	g__gÀwFogCo‹dd
;

15100 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDDVPROC
 
	g__gÀwFogCo‹ddv
;

15101 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDFPROC
 
	g__gÀwFogCo‹df
;

15102 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDFVPROC
 
	g__gÀwFogCo‹dfv
;

15103 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWARRAYSPROC
 
	g__gÀwMu…iDøwAºays
;

15104 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTSPROC
 
	g__gÀwMu…iDøwEÀmíts
;

15105 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERFPROC
 
	g__gÀwPoötP¨amëîf
;

15106 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERFVPROC
 
	g__gÀwPoötP¨amëîfv
;

15107 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERIPROC
 
	g__gÀwPoötP¨amëîi
;

15108 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERIVPROC
 
	g__gÀwPoötP¨amëîiv
;

15109 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3BPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3b
;

15110 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3BVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3bv
;

15111 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3DPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3d
;

15112 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3DVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3dv
;

15113 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3FPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3f
;

15114 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3FVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3fv
;

15115 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3IPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3i
;

15116 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3IVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3iv
;

15117 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3SPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3s
;

15118 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3SVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3sv
;

15119 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UBPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3ub
;

15120 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UBVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3ubv
;

15121 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UIPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3ui
;

15122 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UIVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3uiv
;

15123 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3USPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3us
;

15124 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3USVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3usv
;

15125 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLORPOINTERPROC
 
	g__gÀwSec⁄d¨yCﬁ‹Poöãr
;

15126 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2DPROC
 
	g__gÀwWödowPos2d
;

15127 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2DVPROC
 
	g__gÀwWödowPos2dv
;

15128 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2FPROC
 
	g__gÀwWödowPos2f
;

15129 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2FVPROC
 
	g__gÀwWödowPos2fv
;

15130 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2IPROC
 
	g__gÀwWödowPos2i
;

15131 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2IVPROC
 
	g__gÀwWödowPos2iv
;

15132 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2SPROC
 
	g__gÀwWödowPos2s
;

15133 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2SVPROC
 
	g__gÀwWödowPos2sv
;

15134 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3DPROC
 
	g__gÀwWödowPos3d
;

15135 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3DVPROC
 
	g__gÀwWödowPos3dv
;

15136 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3FPROC
 
	g__gÀwWödowPos3f
;

15137 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3FVPROC
 
	g__gÀwWödowPos3fv
;

15138 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3IPROC
 
	g__gÀwWödowPos3i
;

15139 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3IVPROC
 
	g__gÀwWödowPos3iv
;

15140 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3SPROC
 
	g__gÀwWödowPos3s
;

15141 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3SVPROC
 
	g__gÀwWödowPos3sv
;

15143 
GLEW_FUN_EXPORT
 
PFNGLBEGINQUERYPROC
 
	g__gÀwBegöQuîy
;

15144 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERPROC
 
	g__gÀwBödBuf„r
;

15145 
GLEW_FUN_EXPORT
 
PFNGLBUFFERDATAPROC
 
	g__gÀwBuf„rD©a
;

15146 
GLEW_FUN_EXPORT
 
PFNGLBUFFERSUBDATAPROC
 
	g__gÀwBuf„rSubD©a
;

15147 
GLEW_FUN_EXPORT
 
PFNGLDELETEBUFFERSPROC
 
	g__gÀwDñëeBuf„rs
;

15148 
GLEW_FUN_EXPORT
 
PFNGLDELETEQUERIESPROC
 
	g__gÀwDñëeQuîõs
;

15149 
GLEW_FUN_EXPORT
 
PFNGLENDQUERYPROC
 
	g__gÀwEndQuîy
;

15150 
GLEW_FUN_EXPORT
 
PFNGLGENBUFFERSPROC
 
	g__gÀwGíBuf„rs
;

15151 
GLEW_FUN_EXPORT
 
PFNGLGENQUERIESPROC
 
	g__gÀwGíQuîõs
;

15152 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERPARAMETERIVPROC
 
	g__gÀwGëBuf„rP¨amëîiv
;

15153 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERPOINTERVPROC
 
	g__gÀwGëBuf„rPoöãrv
;

15154 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERSUBDATAPROC
 
	g__gÀwGëBuf„rSubD©a
;

15155 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTIVPROC
 
	g__gÀwGëQuîyObje˘iv
;

15156 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTUIVPROC
 
	g__gÀwGëQuîyObje˘uiv
;

15157 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYIVPROC
 
	g__gÀwGëQuîyiv
;

15158 
GLEW_FUN_EXPORT
 
PFNGLISBUFFERPROC
 
	g__gÀwIsBuf„r
;

15159 
GLEW_FUN_EXPORT
 
PFNGLISQUERYPROC
 
	g__gÀwIsQuîy
;

15160 
GLEW_FUN_EXPORT
 
PFNGLMAPBUFFERPROC
 
	g__gÀwM≠Buf„r
;

15161 
GLEW_FUN_EXPORT
 
PFNGLUNMAPBUFFERPROC
 
	g__gÀwUnm≠Buf„r
;

15163 
GLEW_FUN_EXPORT
 
PFNGLATTACHSHADERPROC
 
	g__gÀwAâachShadî
;

15164 
GLEW_FUN_EXPORT
 
PFNGLBINDATTRIBLOCATIONPROC
 
	g__gÀwBödAâribLoˇti⁄
;

15165 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONSEPARATEPROC
 
	g__gÀwBÀndEqu©i⁄Sï¨©e
;

15166 
GLEW_FUN_EXPORT
 
PFNGLCOMPILESHADERPROC
 
	g__gÀwCompûeShadî
;

15167 
GLEW_FUN_EXPORT
 
PFNGLCREATEPROGRAMPROC
 
	g__gÀwCª©eProgøm
;

15168 
GLEW_FUN_EXPORT
 
PFNGLCREATESHADERPROC
 
	g__gÀwCª©eShadî
;

15169 
GLEW_FUN_EXPORT
 
PFNGLDELETEPROGRAMPROC
 
	g__gÀwDñëeProgøm
;

15170 
GLEW_FUN_EXPORT
 
PFNGLDELETESHADERPROC
 
	g__gÀwDñëeShadî
;

15171 
GLEW_FUN_EXPORT
 
PFNGLDETACHSHADERPROC
 
	g__gÀwDëachShadî
;

15172 
GLEW_FUN_EXPORT
 
PFNGLDISABLEVERTEXATTRIBARRAYPROC
 
	g__gÀwDißbÀVîãxAâribAºay
;

15173 
GLEW_FUN_EXPORT
 
PFNGLDRAWBUFFERSPROC
 
	g__gÀwDøwBuf„rs
;

15174 
GLEW_FUN_EXPORT
 
PFNGLENABLEVERTEXATTRIBARRAYPROC
 
	g__gÀwE«bÀVîãxAâribAºay
;

15175 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEATTRIBPROC
 
	g__gÀwGëA˘iveAârib
;

15176 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEUNIFORMPROC
 
	g__gÀwGëA˘iveUnif‹m
;

15177 
GLEW_FUN_EXPORT
 
PFNGLGETATTACHEDSHADERSPROC
 
	g__gÀwGëAâachedShadîs
;

15178 
GLEW_FUN_EXPORT
 
PFNGLGETATTRIBLOCATIONPROC
 
	g__gÀwGëAâribLoˇti⁄
;

15179 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMINFOLOGPROC
 
	g__gÀwGëProgømInfoLog
;

15180 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMIVPROC
 
	g__gÀwGëProgømiv
;

15181 
GLEW_FUN_EXPORT
 
PFNGLGETSHADERINFOLOGPROC
 
	g__gÀwGëShadîInfoLog
;

15182 
GLEW_FUN_EXPORT
 
PFNGLGETSHADERSOURCEPROC
 
	g__gÀwGëShadîSour˚
;

15183 
GLEW_FUN_EXPORT
 
PFNGLGETSHADERIVPROC
 
	g__gÀwGëShadîiv
;

15184 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMLOCATIONPROC
 
	g__gÀwGëUnif‹mLoˇti⁄
;

15185 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMFVPROC
 
	g__gÀwGëUnif‹mfv
;

15186 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMIVPROC
 
	g__gÀwGëUnif‹miv
;

15187 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBPOINTERVPROC
 
	g__gÀwGëVîãxAâribPoöãrv
;

15188 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBDVPROC
 
	g__gÀwGëVîãxAâribdv
;

15189 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBFVPROC
 
	g__gÀwGëVîãxAâribfv
;

15190 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIVPROC
 
	g__gÀwGëVîãxAâribiv
;

15191 
GLEW_FUN_EXPORT
 
PFNGLISPROGRAMPROC
 
	g__gÀwIsProgøm
;

15192 
GLEW_FUN_EXPORT
 
PFNGLISSHADERPROC
 
	g__gÀwIsShadî
;

15193 
GLEW_FUN_EXPORT
 
PFNGLLINKPROGRAMPROC
 
	g__gÀwLökProgøm
;

15194 
GLEW_FUN_EXPORT
 
PFNGLSHADERSOURCEPROC
 
	g__gÀwShadîSour˚
;

15195 
GLEW_FUN_EXPORT
 
PFNGLSTENCILFUNCSEPARATEPROC
 
	g__gÀwSãncûFuncSï¨©e
;

15196 
GLEW_FUN_EXPORT
 
PFNGLSTENCILMASKSEPARATEPROC
 
	g__gÀwSãncûMaskSï¨©e
;

15197 
GLEW_FUN_EXPORT
 
PFNGLSTENCILOPSEPARATEPROC
 
	g__gÀwSãncûOpSï¨©e
;

15198 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1FPROC
 
	g__gÀwUnif‹m1f
;

15199 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1FVPROC
 
	g__gÀwUnif‹m1fv
;

15200 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1IPROC
 
	g__gÀwUnif‹m1i
;

15201 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1IVPROC
 
	g__gÀwUnif‹m1iv
;

15202 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2FPROC
 
	g__gÀwUnif‹m2f
;

15203 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2FVPROC
 
	g__gÀwUnif‹m2fv
;

15204 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2IPROC
 
	g__gÀwUnif‹m2i
;

15205 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2IVPROC
 
	g__gÀwUnif‹m2iv
;

15206 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3FPROC
 
	g__gÀwUnif‹m3f
;

15207 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3FVPROC
 
	g__gÀwUnif‹m3fv
;

15208 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3IPROC
 
	g__gÀwUnif‹m3i
;

15209 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3IVPROC
 
	g__gÀwUnif‹m3iv
;

15210 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4FPROC
 
	g__gÀwUnif‹m4f
;

15211 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4FVPROC
 
	g__gÀwUnif‹m4fv
;

15212 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4IPROC
 
	g__gÀwUnif‹m4i
;

15213 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4IVPROC
 
	g__gÀwUnif‹m4iv
;

15214 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2FVPROC
 
	g__gÀwUnif‹mM©rix2fv
;

15215 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3FVPROC
 
	g__gÀwUnif‹mM©rix3fv
;

15216 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4FVPROC
 
	g__gÀwUnif‹mM©rix4fv
;

15217 
GLEW_FUN_EXPORT
 
PFNGLUSEPROGRAMPROC
 
	g__gÀwU£Progøm
;

15218 
GLEW_FUN_EXPORT
 
PFNGLVALIDATEPROGRAMPROC
 
	g__gÀwVÆid©eProgøm
;

15219 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1DPROC
 
	g__gÀwVîãxAârib1d
;

15220 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1DVPROC
 
	g__gÀwVîãxAârib1dv
;

15221 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1FPROC
 
	g__gÀwVîãxAârib1f
;

15222 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1FVPROC
 
	g__gÀwVîãxAârib1fv
;

15223 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1SPROC
 
	g__gÀwVîãxAârib1s
;

15224 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1SVPROC
 
	g__gÀwVîãxAârib1sv
;

15225 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2DPROC
 
	g__gÀwVîãxAârib2d
;

15226 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2DVPROC
 
	g__gÀwVîãxAârib2dv
;

15227 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2FPROC
 
	g__gÀwVîãxAârib2f
;

15228 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2FVPROC
 
	g__gÀwVîãxAârib2fv
;

15229 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2SPROC
 
	g__gÀwVîãxAârib2s
;

15230 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2SVPROC
 
	g__gÀwVîãxAârib2sv
;

15231 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3DPROC
 
	g__gÀwVîãxAârib3d
;

15232 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3DVPROC
 
	g__gÀwVîãxAârib3dv
;

15233 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3FPROC
 
	g__gÀwVîãxAârib3f
;

15234 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3FVPROC
 
	g__gÀwVîãxAârib3fv
;

15235 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3SPROC
 
	g__gÀwVîãxAârib3s
;

15236 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3SVPROC
 
	g__gÀwVîãxAârib3sv
;

15237 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NBVPROC
 
	g__gÀwVîãxAârib4Nbv
;

15238 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NIVPROC
 
	g__gÀwVîãxAârib4Niv
;

15239 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NSVPROC
 
	g__gÀwVîãxAârib4Nsv
;

15240 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUBPROC
 
	g__gÀwVîãxAârib4Nub
;

15241 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUBVPROC
 
	g__gÀwVîãxAârib4Nubv
;

15242 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUIVPROC
 
	g__gÀwVîãxAârib4Nuiv
;

15243 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUSVPROC
 
	g__gÀwVîãxAârib4Nusv
;

15244 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4BVPROC
 
	g__gÀwVîãxAârib4bv
;

15245 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4DPROC
 
	g__gÀwVîãxAârib4d
;

15246 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4DVPROC
 
	g__gÀwVîãxAârib4dv
;

15247 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4FPROC
 
	g__gÀwVîãxAârib4f
;

15248 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4FVPROC
 
	g__gÀwVîãxAârib4fv
;

15249 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4IVPROC
 
	g__gÀwVîãxAârib4iv
;

15250 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4SPROC
 
	g__gÀwVîãxAârib4s
;

15251 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4SVPROC
 
	g__gÀwVîãxAârib4sv
;

15252 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4UBVPROC
 
	g__gÀwVîãxAârib4ubv
;

15253 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4UIVPROC
 
	g__gÀwVîãxAârib4uiv
;

15254 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4USVPROC
 
	g__gÀwVîãxAârib4usv
;

15255 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBPOINTERPROC
 
	g__gÀwVîãxAâribPoöãr
;

15257 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2X3FVPROC
 
	g__gÀwUnif‹mM©rix2x3fv
;

15258 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2X4FVPROC
 
	g__gÀwUnif‹mM©rix2x4fv
;

15259 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3X2FVPROC
 
	g__gÀwUnif‹mM©rix3x2fv
;

15260 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3X4FVPROC
 
	g__gÀwUnif‹mM©rix3x4fv
;

15261 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4X2FVPROC
 
	g__gÀwUnif‹mM©rix4x2fv
;

15262 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4X3FVPROC
 
	g__gÀwUnif‹mM©rix4x3fv
;

15264 
GLEW_FUN_EXPORT
 
PFNGLBEGINCONDITIONALRENDERPROC
 
	g__gÀwBegöC⁄dôi⁄ÆRídî
;

15265 
GLEW_FUN_EXPORT
 
PFNGLBEGINTRANSFORMFEEDBACKPROC
 
	g__gÀwBegöTønsf‹mFìdback
;

15266 
GLEW_FUN_EXPORT
 
PFNGLBINDFRAGDATALOCATIONPROC
 
	g__gÀwBödFøgD©aLoˇti⁄
;

15267 
GLEW_FUN_EXPORT
 
PFNGLCLAMPCOLORPROC
 
	g__gÀwCœmpCﬁ‹
;

15268 
GLEW_FUN_EXPORT
 
PFNGLCLEARBUFFERFIPROC
 
	g__gÀwCÀ¨Buf„rfi
;

15269 
GLEW_FUN_EXPORT
 
PFNGLCLEARBUFFERFVPROC
 
	g__gÀwCÀ¨Buf„rfv
;

15270 
GLEW_FUN_EXPORT
 
PFNGLCLEARBUFFERIVPROC
 
	g__gÀwCÀ¨Buf„riv
;

15271 
GLEW_FUN_EXPORT
 
PFNGLCLEARBUFFERUIVPROC
 
	g__gÀwCÀ¨Buf„ruiv
;

15272 
GLEW_FUN_EXPORT
 
PFNGLCOLORMASKIPROC
 
	g__gÀwCﬁ‹Maski
;

15273 
GLEW_FUN_EXPORT
 
PFNGLDISABLEIPROC
 
	g__gÀwDißbÀi
;

15274 
GLEW_FUN_EXPORT
 
PFNGLENABLEIPROC
 
	g__gÀwE«bÀi
;

15275 
GLEW_FUN_EXPORT
 
PFNGLENDCONDITIONALRENDERPROC
 
	g__gÀwEndC⁄dôi⁄ÆRídî
;

15276 
GLEW_FUN_EXPORT
 
PFNGLENDTRANSFORMFEEDBACKPROC
 
	g__gÀwEndTønsf‹mFìdback
;

15277 
GLEW_FUN_EXPORT
 
PFNGLGETBOOLEANI_VPROC
 
	g__gÀwGëBoﬁóni_v
;

15278 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGDATALOCATIONPROC
 
	g__gÀwGëFøgD©aLoˇti⁄
;

15279 
GLEW_FUN_EXPORT
 
PFNGLGETSTRINGIPROC
 
	g__gÀwGëSåögi
;

15280 
GLEW_FUN_EXPORT
 
PFNGLGETTEXPARAMETERIIVPROC
 
	g__gÀwGëTexP¨amëîIiv
;

15281 
GLEW_FUN_EXPORT
 
PFNGLGETTEXPARAMETERIUIVPROC
 
	g__gÀwGëTexP¨amëîIuiv
;

15282 
GLEW_FUN_EXPORT
 
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC
 
	g__gÀwGëTønsf‹mFìdbackV¨yög
;

15283 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMUIVPROC
 
	g__gÀwGëUnif‹muiv
;

15284 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIIVPROC
 
	g__gÀwGëVîãxAâribIiv
;

15285 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIUIVPROC
 
	g__gÀwGëVîãxAâribIuiv
;

15286 
GLEW_FUN_EXPORT
 
PFNGLISENABLEDIPROC
 
	g__gÀwIsE«bÀdi
;

15287 
GLEW_FUN_EXPORT
 
PFNGLTEXPARAMETERIIVPROC
 
	g__gÀwTexP¨amëîIiv
;

15288 
GLEW_FUN_EXPORT
 
PFNGLTEXPARAMETERIUIVPROC
 
	g__gÀwTexP¨amëîIuiv
;

15289 
GLEW_FUN_EXPORT
 
PFNGLTRANSFORMFEEDBACKVARYINGSPROC
 
	g__gÀwTønsf‹mFìdbackV¨yögs
;

15290 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1UIPROC
 
	g__gÀwUnif‹m1ui
;

15291 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1UIVPROC
 
	g__gÀwUnif‹m1uiv
;

15292 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2UIPROC
 
	g__gÀwUnif‹m2ui
;

15293 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2UIVPROC
 
	g__gÀwUnif‹m2uiv
;

15294 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3UIPROC
 
	g__gÀwUnif‹m3ui
;

15295 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3UIVPROC
 
	g__gÀwUnif‹m3uiv
;

15296 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4UIPROC
 
	g__gÀwUnif‹m4ui
;

15297 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4UIVPROC
 
	g__gÀwUnif‹m4uiv
;

15298 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1IPROC
 
	g__gÀwVîãxAâribI1i
;

15299 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1IVPROC
 
	g__gÀwVîãxAâribI1iv
;

15300 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1UIPROC
 
	g__gÀwVîãxAâribI1ui
;

15301 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1UIVPROC
 
	g__gÀwVîãxAâribI1uiv
;

15302 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2IPROC
 
	g__gÀwVîãxAâribI2i
;

15303 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2IVPROC
 
	g__gÀwVîãxAâribI2iv
;

15304 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2UIPROC
 
	g__gÀwVîãxAâribI2ui
;

15305 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2UIVPROC
 
	g__gÀwVîãxAâribI2uiv
;

15306 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3IPROC
 
	g__gÀwVîãxAâribI3i
;

15307 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3IVPROC
 
	g__gÀwVîãxAâribI3iv
;

15308 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3UIPROC
 
	g__gÀwVîãxAâribI3ui
;

15309 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3UIVPROC
 
	g__gÀwVîãxAâribI3uiv
;

15310 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4BVPROC
 
	g__gÀwVîãxAâribI4bv
;

15311 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4IPROC
 
	g__gÀwVîãxAâribI4i
;

15312 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4IVPROC
 
	g__gÀwVîãxAâribI4iv
;

15313 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4SVPROC
 
	g__gÀwVîãxAâribI4sv
;

15314 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4UBVPROC
 
	g__gÀwVîãxAâribI4ubv
;

15315 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4UIPROC
 
	g__gÀwVîãxAâribI4ui
;

15316 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4UIVPROC
 
	g__gÀwVîãxAâribI4uiv
;

15317 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4USVPROC
 
	g__gÀwVîãxAâribI4usv
;

15318 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBIPOINTERPROC
 
	g__gÀwVîãxAâribIPoöãr
;

15320 
GLEW_FUN_EXPORT
 
PFNGLDRAWARRAYSINSTANCEDPROC
 
	g__gÀwDøwAºaysIn°™˚d
;

15321 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINSTANCEDPROC
 
	g__gÀwDøwEÀmítsIn°™˚d
;

15322 
GLEW_FUN_EXPORT
 
PFNGLPRIMITIVERESTARTINDEXPROC
 
	g__gÀwPrimôiveRe°¨tIndex
;

15323 
GLEW_FUN_EXPORT
 
PFNGLTEXBUFFERPROC
 
	g__gÀwTexBuf„r
;

15325 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTUREPROC
 
	g__gÀwFømebuf„rTextuª
;

15326 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERPARAMETERI64VPROC
 
	g__gÀwGëBuf„rP¨amëîi64v
;

15327 
GLEW_FUN_EXPORT
 
PFNGLGETINTEGER64I_VPROC
 
	g__gÀwGëI¡egî64i_v
;

15329 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBDIVISORPROC
 
	g__gÀwVîãxAâribDivis‹
;

15331 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONSEPARATEIPROC
 
	g__gÀwBÀndEqu©i⁄Sï¨©ei
;

15332 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONIPROC
 
	g__gÀwBÀndEqu©i⁄i
;

15333 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCSEPARATEIPROC
 
	g__gÀwBÀndFuncSï¨©ei
;

15334 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCIPROC
 
	g__gÀwBÀndFunci
;

15335 
GLEW_FUN_EXPORT
 
PFNGLMINSAMPLESHADINGPROC
 
	g__gÀwMöSam∂eShadög
;

15337 
GLEW_FUN_EXPORT
 
PFNGLTBUFFERMASK3DFXPROC
 
	g__gÀwTbuf„rMask3DFX
;

15339 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGECALLBACKAMDPROC
 
	g__gÀwDebugMesßgeCÆlbackAMD
;

15340 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGEENABLEAMDPROC
 
	g__gÀwDebugMesßgeE«bÀAMD
;

15341 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGEINSERTAMDPROC
 
	g__gÀwDebugMesßgeIn£πAMD
;

15342 
GLEW_FUN_EXPORT
 
PFNGLGETDEBUGMESSAGELOGAMDPROC
 
	g__gÀwGëDebugMesßgeLogAMD
;

15344 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONINDEXEDAMDPROC
 
	g__gÀwBÀndEqu©i⁄IndexedAMD
;

15345 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
 
	g__gÀwBÀndEqu©i⁄Sï¨©eIndexedAMD
;

15346 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCINDEXEDAMDPROC
 
	g__gÀwBÀndFuncIndexedAMD
;

15347 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
 
	g__gÀwBÀndFuncSï¨©eIndexedAMD
;

15349 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBPARAMETERIAMDPROC
 
	g__gÀwVîãxAâribP¨amëîiAMD
;

15351 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
 
	g__gÀwMu…iDøwAºaysIndúe˘AMD
;

15352 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
 
	g__gÀwMu…iDøwEÀmítsIndúe˘AMD
;

15354 
GLEW_FUN_EXPORT
 
PFNGLDELETENAMESAMDPROC
 
	g__gÀwDñëeNamesAMD
;

15355 
GLEW_FUN_EXPORT
 
PFNGLGENNAMESAMDPROC
 
	g__gÀwGíNamesAMD
;

15356 
GLEW_FUN_EXPORT
 
PFNGLISNAMEAMDPROC
 
	g__gÀwIsNameAMD
;

15358 
GLEW_FUN_EXPORT
 
PFNGLBEGINPERFMONITORAMDPROC
 
	g__gÀwBegöPîfM⁄ô‹AMD
;

15359 
GLEW_FUN_EXPORT
 
PFNGLDELETEPERFMONITORSAMDPROC
 
	g__gÀwDñëePîfM⁄ô‹sAMD
;

15360 
GLEW_FUN_EXPORT
 
PFNGLENDPERFMONITORAMDPROC
 
	g__gÀwEndPîfM⁄ô‹AMD
;

15361 
GLEW_FUN_EXPORT
 
PFNGLGENPERFMONITORSAMDPROC
 
	g__gÀwGíPîfM⁄ô‹sAMD
;

15362 
GLEW_FUN_EXPORT
 
PFNGLGETPERFMONITORCOUNTERDATAAMDPROC
 
	g__gÀwGëPîfM⁄ô‹Cou¡îD©aAMD
;

15363 
GLEW_FUN_EXPORT
 
PFNGLGETPERFMONITORCOUNTERINFOAMDPROC
 
	g__gÀwGëPîfM⁄ô‹Cou¡îInfoAMD
;

15364 
GLEW_FUN_EXPORT
 
PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
 
	g__gÀwGëPîfM⁄ô‹Cou¡îSåögAMD
;

15365 
GLEW_FUN_EXPORT
 
PFNGLGETPERFMONITORCOUNTERSAMDPROC
 
	g__gÀwGëPîfM⁄ô‹Cou¡îsAMD
;

15366 
GLEW_FUN_EXPORT
 
PFNGLGETPERFMONITORGROUPSTRINGAMDPROC
 
	g__gÀwGëPîfM⁄ô‹GroupSåögAMD
;

15367 
GLEW_FUN_EXPORT
 
PFNGLGETPERFMONITORGROUPSAMDPROC
 
	g__gÀwGëPîfM⁄ô‹GroupsAMD
;

15368 
GLEW_FUN_EXPORT
 
PFNGLSELECTPERFMONITORCOUNTERSAMDPROC
 
	g__gÀwSñe˘PîfM⁄ô‹Cou¡îsAMD
;

15370 
GLEW_FUN_EXPORT
 
PFNGLSETMULTISAMPLEFVAMDPROC
 
	g__gÀwSëMu…ißm∂efvAMD
;

15372 
GLEW_FUN_EXPORT
 
PFNGLTEXSTORAGESPARSEAMDPROC
 
	g__gÀwTexSt‹ageS∑r£AMD
;

15373 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESTORAGESPARSEAMDPROC
 
	g__gÀwTextuªSt‹ageS∑r£AMD
;

15375 
GLEW_FUN_EXPORT
 
PFNGLSTENCILOPVALUEAMDPROC
 
	g__gÀwSãncûOpVÆueAMD
;

15377 
GLEW_FUN_EXPORT
 
PFNGLTESSELLATIONFACTORAMDPROC
 
	g__gÀwTes£Œ©i⁄Fa˘‹AMD
;

15378 
GLEW_FUN_EXPORT
 
PFNGLTESSELLATIONMODEAMDPROC
 
	g__gÀwTes£Œ©i⁄ModeAMD
;

15380 
GLEW_FUN_EXPORT
 
PFNGLBLITFRAMEBUFFERANGLEPROC
 
	g__gÀwBlôFømebuf„rANGLE
;

15382 
GLEW_FUN_EXPORT
 
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC
 
	g__gÀwRídîbuf„rSt‹ageMu…ißm∂eANGLE
;

15384 
GLEW_FUN_EXPORT
 
PFNGLDRAWARRAYSINSTANCEDANGLEPROC
 
	g__gÀwDøwAºaysIn°™˚dANGLE
;

15385 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINSTANCEDANGLEPROC
 
	g__gÀwDøwEÀmítsIn°™˚dANGLE
;

15386 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBDIVISORANGLEPROC
 
	g__gÀwVîãxAâribDivis‹ANGLE
;

15388 
GLEW_FUN_EXPORT
 
PFNGLBEGINQUERYANGLEPROC
 
	g__gÀwBegöQuîyANGLE
;

15389 
GLEW_FUN_EXPORT
 
PFNGLDELETEQUERIESANGLEPROC
 
	g__gÀwDñëeQuîõsANGLE
;

15390 
GLEW_FUN_EXPORT
 
PFNGLENDQUERYANGLEPROC
 
	g__gÀwEndQuîyANGLE
;

15391 
GLEW_FUN_EXPORT
 
PFNGLGENQUERIESANGLEPROC
 
	g__gÀwGíQuîõsANGLE
;

15392 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTI64VANGLEPROC
 
	g__gÀwGëQuîyObje˘i64vANGLE
;

15393 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTIVANGLEPROC
 
	g__gÀwGëQuîyObje˘ivANGLE
;

15394 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTUI64VANGLEPROC
 
	g__gÀwGëQuîyObje˘ui64vANGLE
;

15395 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTUIVANGLEPROC
 
	g__gÀwGëQuîyObje˘uivANGLE
;

15396 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYIVANGLEPROC
 
	g__gÀwGëQuîyivANGLE
;

15397 
GLEW_FUN_EXPORT
 
PFNGLISQUERYANGLEPROC
 
	g__gÀwIsQuîyANGLE
;

15398 
GLEW_FUN_EXPORT
 
PFNGLQUERYCOUNTERANGLEPROC
 
	g__gÀwQuîyCou¡îANGLE
;

15400 
GLEW_FUN_EXPORT
 
PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC
 
	g__gÀwGëTøn¶©edShadîSour˚ANGLE
;

15402 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTARRAYAPPLEPROC
 
	g__gÀwDøwEÀmítAºayAPPLE
;

15403 
GLEW_FUN_EXPORT
 
PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
 
	g__gÀwDøwR™geEÀmítAºayAPPLE
;

15404 
GLEW_FUN_EXPORT
 
PFNGLELEMENTPOINTERAPPLEPROC
 
	g__gÀwEÀmítPoöãrAPPLE
;

15405 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
 
	g__gÀwMu…iDøwEÀmítAºayAPPLE
;

15406 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
 
	g__gÀwMu…iDøwR™geEÀmítAºayAPPLE
;

15408 
GLEW_FUN_EXPORT
 
PFNGLDELETEFENCESAPPLEPROC
 
	g__gÀwDñëeFí˚sAPPLE
;

15409 
GLEW_FUN_EXPORT
 
PFNGLFINISHFENCEAPPLEPROC
 
	g__gÀwFöishFí˚APPLE
;

15410 
GLEW_FUN_EXPORT
 
PFNGLFINISHOBJECTAPPLEPROC
 
	g__gÀwFöishObje˘APPLE
;

15411 
GLEW_FUN_EXPORT
 
PFNGLGENFENCESAPPLEPROC
 
	g__gÀwGíFí˚sAPPLE
;

15412 
GLEW_FUN_EXPORT
 
PFNGLISFENCEAPPLEPROC
 
	g__gÀwIsFí˚APPLE
;

15413 
GLEW_FUN_EXPORT
 
PFNGLSETFENCEAPPLEPROC
 
	g__gÀwSëFí˚APPLE
;

15414 
GLEW_FUN_EXPORT
 
PFNGLTESTFENCEAPPLEPROC
 
	g__gÀwTe°Fí˚APPLE
;

15415 
GLEW_FUN_EXPORT
 
PFNGLTESTOBJECTAPPLEPROC
 
	g__gÀwTe°Obje˘APPLE
;

15417 
GLEW_FUN_EXPORT
 
PFNGLBUFFERPARAMETERIAPPLEPROC
 
	g__gÀwBuf„rP¨amëîiAPPLE
;

15418 
GLEW_FUN_EXPORT
 
PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
 
	g__gÀwFlushM≠≥dBuf„rR™geAPPLE
;

15420 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTPARAMETERIVAPPLEPROC
 
	g__gÀwGëObje˘P¨amëîivAPPLE
;

15421 
GLEW_FUN_EXPORT
 
PFNGLOBJECTPURGEABLEAPPLEPROC
 
	g__gÀwObje˘PurgóbÀAPPLE
;

15422 
GLEW_FUN_EXPORT
 
PFNGLOBJECTUNPURGEABLEAPPLEPROC
 
	g__gÀwObje˘U≈urgóbÀAPPLE
;

15424 
GLEW_FUN_EXPORT
 
PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
 
	g__gÀwGëTexP¨amëîPoöãrvAPPLE
;

15425 
GLEW_FUN_EXPORT
 
PFNGLTEXTURERANGEAPPLEPROC
 
	g__gÀwTextuªR™geAPPLE
;

15427 
GLEW_FUN_EXPORT
 
PFNGLBINDVERTEXARRAYAPPLEPROC
 
	g__gÀwBödVîãxAºayAPPLE
;

15428 
GLEW_FUN_EXPORT
 
PFNGLDELETEVERTEXARRAYSAPPLEPROC
 
	g__gÀwDñëeVîãxAºaysAPPLE
;

15429 
GLEW_FUN_EXPORT
 
PFNGLGENVERTEXARRAYSAPPLEPROC
 
	g__gÀwGíVîãxAºaysAPPLE
;

15430 
GLEW_FUN_EXPORT
 
PFNGLISVERTEXARRAYAPPLEPROC
 
	g__gÀwIsVîãxAºayAPPLE
;

15432 
GLEW_FUN_EXPORT
 
PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
 
	g__gÀwFlushVîãxAºayR™geAPPLE
;

15433 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYPARAMETERIAPPLEPROC
 
	g__gÀwVîãxAºayP¨amëîiAPPLE
;

15434 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYRANGEAPPLEPROC
 
	g__gÀwVîãxAºayR™geAPPLE
;

15436 
GLEW_FUN_EXPORT
 
PFNGLDISABLEVERTEXATTRIBAPPLEPROC
 
	g__gÀwDißbÀVîãxAâribAPPLE
;

15437 
GLEW_FUN_EXPORT
 
PFNGLENABLEVERTEXATTRIBAPPLEPROC
 
	g__gÀwE«bÀVîãxAâribAPPLE
;

15438 
GLEW_FUN_EXPORT
 
PFNGLISVERTEXATTRIBENABLEDAPPLEPROC
 
	g__gÀwIsVîãxAâribE«bÀdAPPLE
;

15439 
GLEW_FUN_EXPORT
 
PFNGLMAPVERTEXATTRIB1DAPPLEPROC
 
	g__gÀwM≠VîãxAârib1dAPPLE
;

15440 
GLEW_FUN_EXPORT
 
PFNGLMAPVERTEXATTRIB1FAPPLEPROC
 
	g__gÀwM≠VîãxAârib1fAPPLE
;

15441 
GLEW_FUN_EXPORT
 
PFNGLMAPVERTEXATTRIB2DAPPLEPROC
 
	g__gÀwM≠VîãxAârib2dAPPLE
;

15442 
GLEW_FUN_EXPORT
 
PFNGLMAPVERTEXATTRIB2FAPPLEPROC
 
	g__gÀwM≠VîãxAârib2fAPPLE
;

15444 
GLEW_FUN_EXPORT
 
PFNGLCLEARDEPTHFPROC
 
	g__gÀwCÀ¨Dïthf
;

15445 
GLEW_FUN_EXPORT
 
PFNGLDEPTHRANGEFPROC
 
	g__gÀwDïthR™gef
;

15446 
GLEW_FUN_EXPORT
 
PFNGLGETSHADERPRECISIONFORMATPROC
 
	g__gÀwGëShadîPªcisi⁄F‹m©
;

15447 
GLEW_FUN_EXPORT
 
PFNGLRELEASESHADERCOMPILERPROC
 
	g__gÀwRñó£ShadîCompûî
;

15448 
GLEW_FUN_EXPORT
 
PFNGLSHADERBINARYPROC
 
	g__gÀwShadîBö¨y
;

15450 
GLEW_FUN_EXPORT
 
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
 
	g__gÀwDøwAºaysIn°™˚dBa£In°™˚
;

15451 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
 
	g__gÀwDøwEÀmítsIn°™˚dBa£In°™˚
;

15452 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
 
	g__gÀwDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
;

15454 
GLEW_FUN_EXPORT
 
PFNGLGETIMAGEHANDLEARBPROC
 
	g__gÀwGëImageH™dÀARB
;

15455 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTUREHANDLEARBPROC
 
	g__gÀwGëTextuªH™dÀARB
;

15456 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTURESAMPLERHANDLEARBPROC
 
	g__gÀwGëTextuªSam∂îH™dÀARB
;

15457 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBLUI64VARBPROC
 
	g__gÀwGëVîãxAâribLui64vARB
;

15458 
GLEW_FUN_EXPORT
 
PFNGLISIMAGEHANDLERESIDENTARBPROC
 
	g__gÀwIsImageH™dÀResidítARB
;

15459 
GLEW_FUN_EXPORT
 
PFNGLISTEXTUREHANDLERESIDENTARBPROC
 
	g__gÀwIsTextuªH™dÀResidítARB
;

15460 
GLEW_FUN_EXPORT
 
PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC
 
	g__gÀwMakeImageH™dÀN⁄ResidítARB
;

15461 
GLEW_FUN_EXPORT
 
PFNGLMAKEIMAGEHANDLERESIDENTARBPROC
 
	g__gÀwMakeImageH™dÀResidítARB
;

15462 
GLEW_FUN_EXPORT
 
PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC
 
	g__gÀwMakeTextuªH™dÀN⁄ResidítARB
;

15463 
GLEW_FUN_EXPORT
 
PFNGLMAKETEXTUREHANDLERESIDENTARBPROC
 
	g__gÀwMakeTextuªH™dÀResidítARB
;

15464 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC
 
	g__gÀwProgømUnif‹mH™dÀui64ARB
;

15465 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC
 
	g__gÀwProgømUnif‹mH™dÀui64vARB
;

15466 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMHANDLEUI64ARBPROC
 
	g__gÀwUnif‹mH™dÀui64ARB
;

15467 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMHANDLEUI64VARBPROC
 
	g__gÀwUnif‹mH™dÀui64vARB
;

15468 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1UI64ARBPROC
 
	g__gÀwVîãxAâribL1ui64ARB
;

15469 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1UI64VARBPROC
 
	g__gÀwVîãxAâribL1ui64vARB
;

15471 
GLEW_FUN_EXPORT
 
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC
 
	g__gÀwBödFøgD©aLoˇti⁄Indexed
;

15472 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGDATAINDEXPROC
 
	g__gÀwGëFøgD©aIndex
;

15474 
GLEW_FUN_EXPORT
 
PFNGLBUFFERSTORAGEPROC
 
	g__gÀwBuf„rSt‹age
;

15475 
GLEW_FUN_EXPORT
 
PFNGLNAMEDBUFFERSTORAGEEXTPROC
 
	g__gÀwNamedBuf„rSt‹ageEXT
;

15477 
GLEW_FUN_EXPORT
 
PFNGLCREATESYNCFROMCLEVENTARBPROC
 
	g__gÀwCª©eSyncFromCLevítARB
;

15479 
GLEW_FUN_EXPORT
 
PFNGLCLEARBUFFERDATAPROC
 
	g__gÀwCÀ¨Buf„rD©a
;

15480 
GLEW_FUN_EXPORT
 
PFNGLCLEARBUFFERSUBDATAPROC
 
	g__gÀwCÀ¨Buf„rSubD©a
;

15481 
GLEW_FUN_EXPORT
 
PFNGLCLEARNAMEDBUFFERDATAEXTPROC
 
	g__gÀwCÀ¨NamedBuf„rD©aEXT
;

15482 
GLEW_FUN_EXPORT
 
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
 
	g__gÀwCÀ¨NamedBuf„rSubD©aEXT
;

15484 
GLEW_FUN_EXPORT
 
PFNGLCLEARTEXIMAGEPROC
 
	g__gÀwCÀ¨TexImage
;

15485 
GLEW_FUN_EXPORT
 
PFNGLCLEARTEXSUBIMAGEPROC
 
	g__gÀwCÀ¨TexSubImage
;

15487 
GLEW_FUN_EXPORT
 
PFNGLCLAMPCOLORARBPROC
 
	g__gÀwCœmpCﬁ‹ARB
;

15489 
GLEW_FUN_EXPORT
 
PFNGLDISPATCHCOMPUTEPROC
 
	g__gÀwDi•©chCompuã
;

15490 
GLEW_FUN_EXPORT
 
PFNGLDISPATCHCOMPUTEINDIRECTPROC
 
	g__gÀwDi•©chCompuãIndúe˘
;

15492 
GLEW_FUN_EXPORT
 
PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC
 
	g__gÀwDi•©chCompuãGroupSizeARB
;

15494 
GLEW_FUN_EXPORT
 
PFNGLCOPYBUFFERSUBDATAPROC
 
	g__gÀwC›yBuf„rSubD©a
;

15496 
GLEW_FUN_EXPORT
 
PFNGLCOPYIMAGESUBDATAPROC
 
	g__gÀwC›yImageSubD©a
;

15498 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGECALLBACKARBPROC
 
	g__gÀwDebugMesßgeCÆlbackARB
;

15499 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGECONTROLARBPROC
 
	g__gÀwDebugMesßgeC⁄åﬁARB
;

15500 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGEINSERTARBPROC
 
	g__gÀwDebugMesßgeIn£πARB
;

15501 
GLEW_FUN_EXPORT
 
PFNGLGETDEBUGMESSAGELOGARBPROC
 
	g__gÀwGëDebugMesßgeLogARB
;

15503 
GLEW_FUN_EXPORT
 
PFNGLDRAWBUFFERSARBPROC
 
	g__gÀwDøwBuf„rsARB
;

15505 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONSEPARATEIARBPROC
 
	g__gÀwBÀndEqu©i⁄Sï¨©eiARB
;

15506 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONIARBPROC
 
	g__gÀwBÀndEqu©i⁄iARB
;

15507 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCSEPARATEIARBPROC
 
	g__gÀwBÀndFuncSï¨©eiARB
;

15508 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCIARBPROC
 
	g__gÀwBÀndFunciARB
;

15510 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSBASEVERTEXPROC
 
	g__gÀwDøwEÀmítsBa£Vîãx
;

15511 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
 
	g__gÀwDøwEÀmítsIn°™˚dBa£Vîãx
;

15512 
GLEW_FUN_EXPORT
 
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
 
	g__gÀwDøwR™geEÀmítsBa£Vîãx
;

15513 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
 
	g__gÀwMu…iDøwEÀmítsBa£Vîãx
;

15515 
GLEW_FUN_EXPORT
 
PFNGLDRAWARRAYSINDIRECTPROC
 
	g__gÀwDøwAºaysIndúe˘
;

15516 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINDIRECTPROC
 
	g__gÀwDøwEÀmítsIndúe˘
;

15518 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERPARAMETERIPROC
 
	g__gÀwFømebuf„rP¨amëîi
;

15519 
GLEW_FUN_EXPORT
 
PFNGLGETFRAMEBUFFERPARAMETERIVPROC
 
	g__gÀwGëFømebuf„rP¨amëîiv
;

15520 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
 
	g__gÀwGëNamedFømebuf„rP¨amëîivEXT
;

15521 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
 
	g__gÀwNamedFømebuf„rP¨amëîiEXT
;

15523 
GLEW_FUN_EXPORT
 
PFNGLBINDFRAMEBUFFERPROC
 
	g__gÀwBödFømebuf„r
;

15524 
GLEW_FUN_EXPORT
 
PFNGLBINDRENDERBUFFERPROC
 
	g__gÀwBödRídîbuf„r
;

15525 
GLEW_FUN_EXPORT
 
PFNGLBLITFRAMEBUFFERPROC
 
	g__gÀwBlôFømebuf„r
;

15526 
GLEW_FUN_EXPORT
 
PFNGLCHECKFRAMEBUFFERSTATUSPROC
 
	g__gÀwCheckFømebuf„rSètus
;

15527 
GLEW_FUN_EXPORT
 
PFNGLDELETEFRAMEBUFFERSPROC
 
	g__gÀwDñëeFømebuf„rs
;

15528 
GLEW_FUN_EXPORT
 
PFNGLDELETERENDERBUFFERSPROC
 
	g__gÀwDñëeRídîbuf„rs
;

15529 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERRENDERBUFFERPROC
 
	g__gÀwFømebuf„rRídîbuf„r
;

15530 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURE1DPROC
 
	g__gÀwFømebuf„rTextuª1D
;

15531 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURE2DPROC
 
	g__gÀwFømebuf„rTextuª2D
;

15532 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURE3DPROC
 
	g__gÀwFømebuf„rTextuª3D
;

15533 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURELAYERPROC
 
	g__gÀwFømebuf„rTextuªLayî
;

15534 
GLEW_FUN_EXPORT
 
PFNGLGENFRAMEBUFFERSPROC
 
	g__gÀwGíFømebuf„rs
;

15535 
GLEW_FUN_EXPORT
 
PFNGLGENRENDERBUFFERSPROC
 
	g__gÀwGíRídîbuf„rs
;

15536 
GLEW_FUN_EXPORT
 
PFNGLGENERATEMIPMAPPROC
 
	g__gÀwGíî©eMùm≠
;

15537 
GLEW_FUN_EXPORT
 
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
 
	g__gÀwGëFømebuf„rAâachmítP¨amëîiv
;

15538 
GLEW_FUN_EXPORT
 
PFNGLGETRENDERBUFFERPARAMETERIVPROC
 
	g__gÀwGëRídîbuf„rP¨amëîiv
;

15539 
GLEW_FUN_EXPORT
 
PFNGLISFRAMEBUFFERPROC
 
	g__gÀwIsFømebuf„r
;

15540 
GLEW_FUN_EXPORT
 
PFNGLISRENDERBUFFERPROC
 
	g__gÀwIsRídîbuf„r
;

15541 
GLEW_FUN_EXPORT
 
PFNGLRENDERBUFFERSTORAGEPROC
 
	g__gÀwRídîbuf„rSt‹age
;

15542 
GLEW_FUN_EXPORT
 
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
 
	g__gÀwRídîbuf„rSt‹ageMu…ißm∂e
;

15544 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTUREARBPROC
 
	g__gÀwFømebuf„rTextuªARB
;

15545 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC
 
	g__gÀwFømebuf„rTextuªFa˚ARB
;

15546 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC
 
	g__gÀwFømebuf„rTextuªLayîARB
;

15547 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETERIARBPROC
 
	g__gÀwProgømP¨amëîiARB
;

15549 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMBINARYPROC
 
	g__gÀwGëProgømBö¨y
;

15550 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMBINARYPROC
 
	g__gÀwProgømBö¨y
;

15551 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETERIPROC
 
	g__gÀwProgømP¨amëîi
;

15553 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMDVPROC
 
	g__gÀwGëUnif‹mdv
;

15554 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1DPROC
 
	g__gÀwUnif‹m1d
;

15555 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1DVPROC
 
	g__gÀwUnif‹m1dv
;

15556 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2DPROC
 
	g__gÀwUnif‹m2d
;

15557 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2DVPROC
 
	g__gÀwUnif‹m2dv
;

15558 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3DPROC
 
	g__gÀwUnif‹m3d
;

15559 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3DVPROC
 
	g__gÀwUnif‹m3dv
;

15560 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4DPROC
 
	g__gÀwUnif‹m4d
;

15561 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4DVPROC
 
	g__gÀwUnif‹m4dv
;

15562 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2DVPROC
 
	g__gÀwUnif‹mM©rix2dv
;

15563 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2X3DVPROC
 
	g__gÀwUnif‹mM©rix2x3dv
;

15564 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2X4DVPROC
 
	g__gÀwUnif‹mM©rix2x4dv
;

15565 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3DVPROC
 
	g__gÀwUnif‹mM©rix3dv
;

15566 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3X2DVPROC
 
	g__gÀwUnif‹mM©rix3x2dv
;

15567 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3X4DVPROC
 
	g__gÀwUnif‹mM©rix3x4dv
;

15568 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4DVPROC
 
	g__gÀwUnif‹mM©rix4dv
;

15569 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4X2DVPROC
 
	g__gÀwUnif‹mM©rix4x2dv
;

15570 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4X3DVPROC
 
	g__gÀwUnif‹mM©rix4x3dv
;

15572 
GLEW_FUN_EXPORT
 
PFNGLCOLORSUBTABLEPROC
 
	g__gÀwCﬁ‹SubTabÀ
;

15573 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLEPROC
 
	g__gÀwCﬁ‹TabÀ
;

15574 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLEPARAMETERFVPROC
 
	g__gÀwCﬁ‹TabÀP¨amëîfv
;

15575 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLEPARAMETERIVPROC
 
	g__gÀwCﬁ‹TabÀP¨amëîiv
;

15576 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONFILTER1DPROC
 
	g__gÀwC⁄vﬁuti⁄Fûãr1D
;

15577 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONFILTER2DPROC
 
	g__gÀwC⁄vﬁuti⁄Fûãr2D
;

15578 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERFPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîf
;

15579 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERFVPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîfv
;

15580 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERIPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîi
;

15581 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERIVPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîiv
;

15582 
GLEW_FUN_EXPORT
 
PFNGLCOPYCOLORSUBTABLEPROC
 
	g__gÀwC›yCﬁ‹SubTabÀ
;

15583 
GLEW_FUN_EXPORT
 
PFNGLCOPYCOLORTABLEPROC
 
	g__gÀwC›yCﬁ‹TabÀ
;

15584 
GLEW_FUN_EXPORT
 
PFNGLCOPYCONVOLUTIONFILTER1DPROC
 
	g__gÀwC›yC⁄vﬁuti⁄Fûãr1D
;

15585 
GLEW_FUN_EXPORT
 
PFNGLCOPYCONVOLUTIONFILTER2DPROC
 
	g__gÀwC›yC⁄vﬁuti⁄Fûãr2D
;

15586 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPROC
 
	g__gÀwGëCﬁ‹TabÀ
;

15587 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPARAMETERFVPROC
 
	g__gÀwGëCﬁ‹TabÀP¨amëîfv
;

15588 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPARAMETERIVPROC
 
	g__gÀwGëCﬁ‹TabÀP¨amëîiv
;

15589 
GLEW_FUN_EXPORT
 
PFNGLGETCONVOLUTIONFILTERPROC
 
	g__gÀwGëC⁄vﬁuti⁄Fûãr
;

15590 
GLEW_FUN_EXPORT
 
PFNGLGETCONVOLUTIONPARAMETERFVPROC
 
	g__gÀwGëC⁄vﬁuti⁄P¨amëîfv
;

15591 
GLEW_FUN_EXPORT
 
PFNGLGETCONVOLUTIONPARAMETERIVPROC
 
	g__gÀwGëC⁄vﬁuti⁄P¨amëîiv
;

15592 
GLEW_FUN_EXPORT
 
PFNGLGETHISTOGRAMPROC
 
	g__gÀwGëHi°ogøm
;

15593 
GLEW_FUN_EXPORT
 
PFNGLGETHISTOGRAMPARAMETERFVPROC
 
	g__gÀwGëHi°ogømP¨amëîfv
;

15594 
GLEW_FUN_EXPORT
 
PFNGLGETHISTOGRAMPARAMETERIVPROC
 
	g__gÀwGëHi°ogømP¨amëîiv
;

15595 
GLEW_FUN_EXPORT
 
PFNGLGETMINMAXPROC
 
	g__gÀwGëMömax
;

15596 
GLEW_FUN_EXPORT
 
PFNGLGETMINMAXPARAMETERFVPROC
 
	g__gÀwGëMömaxP¨amëîfv
;

15597 
GLEW_FUN_EXPORT
 
PFNGLGETMINMAXPARAMETERIVPROC
 
	g__gÀwGëMömaxP¨amëîiv
;

15598 
GLEW_FUN_EXPORT
 
PFNGLGETSEPARABLEFILTERPROC
 
	g__gÀwGëSï¨abÀFûãr
;

15599 
GLEW_FUN_EXPORT
 
PFNGLHISTOGRAMPROC
 
	g__gÀwHi°ogøm
;

15600 
GLEW_FUN_EXPORT
 
PFNGLMINMAXPROC
 
	g__gÀwMömax
;

15601 
GLEW_FUN_EXPORT
 
PFNGLRESETHISTOGRAMPROC
 
	g__gÀwRe£tHi°ogøm
;

15602 
GLEW_FUN_EXPORT
 
PFNGLRESETMINMAXPROC
 
	g__gÀwRe£tMömax
;

15603 
GLEW_FUN_EXPORT
 
PFNGLSEPARABLEFILTER2DPROC
 
	g__gÀwSï¨abÀFûãr2D
;

15605 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC
 
	g__gÀwMu…iDøwAºaysIndúe˘Cou¡ARB
;

15606 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC
 
	g__gÀwMu…iDøwEÀmítsIndúe˘Cou¡ARB
;

15608 
GLEW_FUN_EXPORT
 
PFNGLDRAWARRAYSINSTANCEDARBPROC
 
	g__gÀwDøwAºaysIn°™˚dARB
;

15609 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINSTANCEDARBPROC
 
	g__gÀwDøwEÀmítsIn°™˚dARB
;

15610 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBDIVISORARBPROC
 
	g__gÀwVîãxAâribDivis‹ARB
;

15612 
GLEW_FUN_EXPORT
 
PFNGLGETINTERNALFORMATIVPROC
 
	g__gÀwGëI¡î«lf‹m©iv
;

15614 
GLEW_FUN_EXPORT
 
PFNGLGETINTERNALFORMATI64VPROC
 
	g__gÀwGëI¡î«lf‹m©i64v
;

15616 
GLEW_FUN_EXPORT
 
PFNGLINVALIDATEBUFFERDATAPROC
 
	g__gÀwInvÆid©eBuf„rD©a
;

15617 
GLEW_FUN_EXPORT
 
PFNGLINVALIDATEBUFFERSUBDATAPROC
 
	g__gÀwInvÆid©eBuf„rSubD©a
;

15618 
GLEW_FUN_EXPORT
 
PFNGLINVALIDATEFRAMEBUFFERPROC
 
	g__gÀwInvÆid©eFømebuf„r
;

15619 
GLEW_FUN_EXPORT
 
PFNGLINVALIDATESUBFRAMEBUFFERPROC
 
	g__gÀwInvÆid©eSubFømebuf„r
;

15620 
GLEW_FUN_EXPORT
 
PFNGLINVALIDATETEXIMAGEPROC
 
	g__gÀwInvÆid©eTexImage
;

15621 
GLEW_FUN_EXPORT
 
PFNGLINVALIDATETEXSUBIMAGEPROC
 
	g__gÀwInvÆid©eTexSubImage
;

15623 
GLEW_FUN_EXPORT
 
PFNGLFLUSHMAPPEDBUFFERRANGEPROC
 
	g__gÀwFlushM≠≥dBuf„rR™ge
;

15624 
GLEW_FUN_EXPORT
 
PFNGLMAPBUFFERRANGEPROC
 
	g__gÀwM≠Buf„rR™ge
;

15626 
GLEW_FUN_EXPORT
 
PFNGLCURRENTPALETTEMATRIXARBPROC
 
	g__gÀwCuºítPÆëãM©rixARB
;

15627 
GLEW_FUN_EXPORT
 
PFNGLMATRIXINDEXPOINTERARBPROC
 
	g__gÀwM©rixIndexPoöãrARB
;

15628 
GLEW_FUN_EXPORT
 
PFNGLMATRIXINDEXUBVARBPROC
 
	g__gÀwM©rixIndexubvARB
;

15629 
GLEW_FUN_EXPORT
 
PFNGLMATRIXINDEXUIVARBPROC
 
	g__gÀwM©rixIndexuivARB
;

15630 
GLEW_FUN_EXPORT
 
PFNGLMATRIXINDEXUSVARBPROC
 
	g__gÀwM©rixIndexusvARB
;

15632 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERSBASEPROC
 
	g__gÀwBödBuf„rsBa£
;

15633 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERSRANGEPROC
 
	g__gÀwBödBuf„rsR™ge
;

15634 
GLEW_FUN_EXPORT
 
PFNGLBINDIMAGETEXTURESPROC
 
	g__gÀwBödImageTextuªs
;

15635 
GLEW_FUN_EXPORT
 
PFNGLBINDSAMPLERSPROC
 
	g__gÀwBödSam∂îs
;

15636 
GLEW_FUN_EXPORT
 
PFNGLBINDTEXTURESPROC
 
	g__gÀwBödTextuªs
;

15637 
GLEW_FUN_EXPORT
 
PFNGLBINDVERTEXBUFFERSPROC
 
	g__gÀwBödVîãxBuf„rs
;

15639 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWARRAYSINDIRECTPROC
 
	g__gÀwMu…iDøwAºaysIndúe˘
;

15640 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTSINDIRECTPROC
 
	g__gÀwMu…iDøwEÀmítsIndúe˘
;

15642 
GLEW_FUN_EXPORT
 
PFNGLSAMPLECOVERAGEARBPROC
 
	g__gÀwSam∂eCovîageARB
;

15644 
GLEW_FUN_EXPORT
 
PFNGLACTIVETEXTUREARBPROC
 
	g__gÀwA˘iveTextuªARB
;

15645 
GLEW_FUN_EXPORT
 
PFNGLCLIENTACTIVETEXTUREARBPROC
 
	g__gÀwClõ¡A˘iveTextuªARB
;

15646 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1DARBPROC
 
	g__gÀwMu…iTexCo‹d1dARB
;

15647 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1DVARBPROC
 
	g__gÀwMu…iTexCo‹d1dvARB
;

15648 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1FARBPROC
 
	g__gÀwMu…iTexCo‹d1fARB
;

15649 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1FVARBPROC
 
	g__gÀwMu…iTexCo‹d1fvARB
;

15650 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1IARBPROC
 
	g__gÀwMu…iTexCo‹d1iARB
;

15651 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1IVARBPROC
 
	g__gÀwMu…iTexCo‹d1ivARB
;

15652 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1SARBPROC
 
	g__gÀwMu…iTexCo‹d1sARB
;

15653 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1SVARBPROC
 
	g__gÀwMu…iTexCo‹d1svARB
;

15654 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2DARBPROC
 
	g__gÀwMu…iTexCo‹d2dARB
;

15655 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2DVARBPROC
 
	g__gÀwMu…iTexCo‹d2dvARB
;

15656 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2FARBPROC
 
	g__gÀwMu…iTexCo‹d2fARB
;

15657 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2FVARBPROC
 
	g__gÀwMu…iTexCo‹d2fvARB
;

15658 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2IARBPROC
 
	g__gÀwMu…iTexCo‹d2iARB
;

15659 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2IVARBPROC
 
	g__gÀwMu…iTexCo‹d2ivARB
;

15660 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2SARBPROC
 
	g__gÀwMu…iTexCo‹d2sARB
;

15661 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2SVARBPROC
 
	g__gÀwMu…iTexCo‹d2svARB
;

15662 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3DARBPROC
 
	g__gÀwMu…iTexCo‹d3dARB
;

15663 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3DVARBPROC
 
	g__gÀwMu…iTexCo‹d3dvARB
;

15664 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3FARBPROC
 
	g__gÀwMu…iTexCo‹d3fARB
;

15665 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3FVARBPROC
 
	g__gÀwMu…iTexCo‹d3fvARB
;

15666 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3IARBPROC
 
	g__gÀwMu…iTexCo‹d3iARB
;

15667 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3IVARBPROC
 
	g__gÀwMu…iTexCo‹d3ivARB
;

15668 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3SARBPROC
 
	g__gÀwMu…iTexCo‹d3sARB
;

15669 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3SVARBPROC
 
	g__gÀwMu…iTexCo‹d3svARB
;

15670 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4DARBPROC
 
	g__gÀwMu…iTexCo‹d4dARB
;

15671 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4DVARBPROC
 
	g__gÀwMu…iTexCo‹d4dvARB
;

15672 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4FARBPROC
 
	g__gÀwMu…iTexCo‹d4fARB
;

15673 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4FVARBPROC
 
	g__gÀwMu…iTexCo‹d4fvARB
;

15674 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4IARBPROC
 
	g__gÀwMu…iTexCo‹d4iARB
;

15675 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4IVARBPROC
 
	g__gÀwMu…iTexCo‹d4ivARB
;

15676 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4SARBPROC
 
	g__gÀwMu…iTexCo‹d4sARB
;

15677 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4SVARBPROC
 
	g__gÀwMu…iTexCo‹d4svARB
;

15679 
GLEW_FUN_EXPORT
 
PFNGLBEGINQUERYARBPROC
 
	g__gÀwBegöQuîyARB
;

15680 
GLEW_FUN_EXPORT
 
PFNGLDELETEQUERIESARBPROC
 
	g__gÀwDñëeQuîõsARB
;

15681 
GLEW_FUN_EXPORT
 
PFNGLENDQUERYARBPROC
 
	g__gÀwEndQuîyARB
;

15682 
GLEW_FUN_EXPORT
 
PFNGLGENQUERIESARBPROC
 
	g__gÀwGíQuîõsARB
;

15683 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTIVARBPROC
 
	g__gÀwGëQuîyObje˘ivARB
;

15684 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTUIVARBPROC
 
	g__gÀwGëQuîyObje˘uivARB
;

15685 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYIVARBPROC
 
	g__gÀwGëQuîyivARB
;

15686 
GLEW_FUN_EXPORT
 
PFNGLISQUERYARBPROC
 
	g__gÀwIsQuîyARB
;

15688 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERFARBPROC
 
	g__gÀwPoötP¨amëîfARB
;

15689 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERFVARBPROC
 
	g__gÀwPoötP¨amëîfvARB
;

15691 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMINTERFACEIVPROC
 
	g__gÀwGëProgømI¡îÁ˚iv
;

15692 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMRESOURCEINDEXPROC
 
	g__gÀwGëProgømResour˚Index
;

15693 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMRESOURCELOCATIONPROC
 
	g__gÀwGëProgømResour˚Loˇti⁄
;

15694 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
 
	g__gÀwGëProgømResour˚Loˇti⁄Index
;

15695 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMRESOURCENAMEPROC
 
	g__gÀwGëProgømResour˚Name
;

15696 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMRESOURCEIVPROC
 
	g__gÀwGëProgømResour˚iv
;

15698 
GLEW_FUN_EXPORT
 
PFNGLPROVOKINGVERTEXPROC
 
	g__gÀwProvokögVîãx
;

15700 
GLEW_FUN_EXPORT
 
PFNGLGETGRAPHICSRESETSTATUSARBPROC
 
	g__gÀwGëGøphicsRe£tSètusARB
;

15701 
GLEW_FUN_EXPORT
 
PFNGLGETNCOLORTABLEARBPROC
 
	g__gÀwGënCﬁ‹TabÀARB
;

15702 
GLEW_FUN_EXPORT
 
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
 
	g__gÀwGënCom¥es£dTexImageARB
;

15703 
GLEW_FUN_EXPORT
 
PFNGLGETNCONVOLUTIONFILTERARBPROC
 
	g__gÀwGënC⁄vﬁuti⁄FûãrARB
;

15704 
GLEW_FUN_EXPORT
 
PFNGLGETNHISTOGRAMARBPROC
 
	g__gÀwGënHi°ogømARB
;

15705 
GLEW_FUN_EXPORT
 
PFNGLGETNMAPDVARBPROC
 
	g__gÀwGënM≠dvARB
;

15706 
GLEW_FUN_EXPORT
 
PFNGLGETNMAPFVARBPROC
 
	g__gÀwGënM≠fvARB
;

15707 
GLEW_FUN_EXPORT
 
PFNGLGETNMAPIVARBPROC
 
	g__gÀwGënM≠ivARB
;

15708 
GLEW_FUN_EXPORT
 
PFNGLGETNMINMAXARBPROC
 
	g__gÀwGënMömaxARB
;

15709 
GLEW_FUN_EXPORT
 
PFNGLGETNPIXELMAPFVARBPROC
 
	g__gÀwGënPixñM≠fvARB
;

15710 
GLEW_FUN_EXPORT
 
PFNGLGETNPIXELMAPUIVARBPROC
 
	g__gÀwGënPixñM≠uivARB
;

15711 
GLEW_FUN_EXPORT
 
PFNGLGETNPIXELMAPUSVARBPROC
 
	g__gÀwGënPixñM≠usvARB
;

15712 
GLEW_FUN_EXPORT
 
PFNGLGETNPOLYGONSTIPPLEARBPROC
 
	g__gÀwGënPﬁyg⁄Stù∂eARB
;

15713 
GLEW_FUN_EXPORT
 
PFNGLGETNSEPARABLEFILTERARBPROC
 
	g__gÀwGënSï¨abÀFûãrARB
;

15714 
GLEW_FUN_EXPORT
 
PFNGLGETNTEXIMAGEARBPROC
 
	g__gÀwGënTexImageARB
;

15715 
GLEW_FUN_EXPORT
 
PFNGLGETNUNIFORMDVARBPROC
 
	g__gÀwGënUnif‹mdvARB
;

15716 
GLEW_FUN_EXPORT
 
PFNGLGETNUNIFORMFVARBPROC
 
	g__gÀwGënUnif‹mfvARB
;

15717 
GLEW_FUN_EXPORT
 
PFNGLGETNUNIFORMIVARBPROC
 
	g__gÀwGënUnif‹mivARB
;

15718 
GLEW_FUN_EXPORT
 
PFNGLGETNUNIFORMUIVARBPROC
 
	g__gÀwGënUnif‹muivARB
;

15719 
GLEW_FUN_EXPORT
 
PFNGLREADNPIXELSARBPROC
 
	g__gÀwRódnPixñsARB
;

15721 
GLEW_FUN_EXPORT
 
PFNGLMINSAMPLESHADINGARBPROC
 
	g__gÀwMöSam∂eShadögARB
;

15723 
GLEW_FUN_EXPORT
 
PFNGLBINDSAMPLERPROC
 
	g__gÀwBödSam∂î
;

15724 
GLEW_FUN_EXPORT
 
PFNGLDELETESAMPLERSPROC
 
	g__gÀwDñëeSam∂îs
;

15725 
GLEW_FUN_EXPORT
 
PFNGLGENSAMPLERSPROC
 
	g__gÀwGíSam∂îs
;

15726 
GLEW_FUN_EXPORT
 
PFNGLGETSAMPLERPARAMETERIIVPROC
 
	g__gÀwGëSam∂îP¨amëîIiv
;

15727 
GLEW_FUN_EXPORT
 
PFNGLGETSAMPLERPARAMETERIUIVPROC
 
	g__gÀwGëSam∂îP¨amëîIuiv
;

15728 
GLEW_FUN_EXPORT
 
PFNGLGETSAMPLERPARAMETERFVPROC
 
	g__gÀwGëSam∂îP¨amëîfv
;

15729 
GLEW_FUN_EXPORT
 
PFNGLGETSAMPLERPARAMETERIVPROC
 
	g__gÀwGëSam∂îP¨amëîiv
;

15730 
GLEW_FUN_EXPORT
 
PFNGLISSAMPLERPROC
 
	g__gÀwIsSam∂î
;

15731 
GLEW_FUN_EXPORT
 
PFNGLSAMPLERPARAMETERIIVPROC
 
	g__gÀwSam∂îP¨amëîIiv
;

15732 
GLEW_FUN_EXPORT
 
PFNGLSAMPLERPARAMETERIUIVPROC
 
	g__gÀwSam∂îP¨amëîIuiv
;

15733 
GLEW_FUN_EXPORT
 
PFNGLSAMPLERPARAMETERFPROC
 
	g__gÀwSam∂îP¨amëîf
;

15734 
GLEW_FUN_EXPORT
 
PFNGLSAMPLERPARAMETERFVPROC
 
	g__gÀwSam∂îP¨amëîfv
;

15735 
GLEW_FUN_EXPORT
 
PFNGLSAMPLERPARAMETERIPROC
 
	g__gÀwSam∂îP¨amëîi
;

15736 
GLEW_FUN_EXPORT
 
PFNGLSAMPLERPARAMETERIVPROC
 
	g__gÀwSam∂îP¨amëîiv
;

15738 
GLEW_FUN_EXPORT
 
PFNGLACTIVESHADERPROGRAMPROC
 
	g__gÀwA˘iveShadîProgøm
;

15739 
GLEW_FUN_EXPORT
 
PFNGLBINDPROGRAMPIPELINEPROC
 
	g__gÀwBödProgømPùñöe
;

15740 
GLEW_FUN_EXPORT
 
PFNGLCREATESHADERPROGRAMVPROC
 
	g__gÀwCª©eShadîProgømv
;

15741 
GLEW_FUN_EXPORT
 
PFNGLDELETEPROGRAMPIPELINESPROC
 
	g__gÀwDñëeProgømPùñöes
;

15742 
GLEW_FUN_EXPORT
 
PFNGLGENPROGRAMPIPELINESPROC
 
	g__gÀwGíProgømPùñöes
;

15743 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMPIPELINEINFOLOGPROC
 
	g__gÀwGëProgømPùñöeInfoLog
;

15744 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMPIPELINEIVPROC
 
	g__gÀwGëProgømPùñöeiv
;

15745 
GLEW_FUN_EXPORT
 
PFNGLISPROGRAMPIPELINEPROC
 
	g__gÀwIsProgømPùñöe
;

15746 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1DPROC
 
	g__gÀwProgømUnif‹m1d
;

15747 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1DVPROC
 
	g__gÀwProgømUnif‹m1dv
;

15748 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1FPROC
 
	g__gÀwProgømUnif‹m1f
;

15749 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1FVPROC
 
	g__gÀwProgømUnif‹m1fv
;

15750 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1IPROC
 
	g__gÀwProgømUnif‹m1i
;

15751 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1IVPROC
 
	g__gÀwProgømUnif‹m1iv
;

15752 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1UIPROC
 
	g__gÀwProgømUnif‹m1ui
;

15753 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1UIVPROC
 
	g__gÀwProgømUnif‹m1uiv
;

15754 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2DPROC
 
	g__gÀwProgømUnif‹m2d
;

15755 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2DVPROC
 
	g__gÀwProgømUnif‹m2dv
;

15756 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2FPROC
 
	g__gÀwProgømUnif‹m2f
;

15757 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2FVPROC
 
	g__gÀwProgømUnif‹m2fv
;

15758 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2IPROC
 
	g__gÀwProgømUnif‹m2i
;

15759 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2IVPROC
 
	g__gÀwProgømUnif‹m2iv
;

15760 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2UIPROC
 
	g__gÀwProgømUnif‹m2ui
;

15761 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2UIVPROC
 
	g__gÀwProgømUnif‹m2uiv
;

15762 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3DPROC
 
	g__gÀwProgømUnif‹m3d
;

15763 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3DVPROC
 
	g__gÀwProgømUnif‹m3dv
;

15764 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3FPROC
 
	g__gÀwProgømUnif‹m3f
;

15765 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3FVPROC
 
	g__gÀwProgømUnif‹m3fv
;

15766 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3IPROC
 
	g__gÀwProgømUnif‹m3i
;

15767 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3IVPROC
 
	g__gÀwProgømUnif‹m3iv
;

15768 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3UIPROC
 
	g__gÀwProgømUnif‹m3ui
;

15769 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3UIVPROC
 
	g__gÀwProgømUnif‹m3uiv
;

15770 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4DPROC
 
	g__gÀwProgømUnif‹m4d
;

15771 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4DVPROC
 
	g__gÀwProgømUnif‹m4dv
;

15772 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4FPROC
 
	g__gÀwProgømUnif‹m4f
;

15773 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4FVPROC
 
	g__gÀwProgømUnif‹m4fv
;

15774 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4IPROC
 
	g__gÀwProgømUnif‹m4i
;

15775 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4IVPROC
 
	g__gÀwProgømUnif‹m4iv
;

15776 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4UIPROC
 
	g__gÀwProgømUnif‹m4ui
;

15777 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4UIVPROC
 
	g__gÀwProgømUnif‹m4uiv
;

15778 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2DVPROC
 
	g__gÀwProgømUnif‹mM©rix2dv
;

15779 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2FVPROC
 
	g__gÀwProgømUnif‹mM©rix2fv
;

15780 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
 
	g__gÀwProgømUnif‹mM©rix2x3dv
;

15781 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
 
	g__gÀwProgømUnif‹mM©rix2x3fv
;

15782 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
 
	g__gÀwProgømUnif‹mM©rix2x4dv
;

15783 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
 
	g__gÀwProgømUnif‹mM©rix2x4fv
;

15784 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3DVPROC
 
	g__gÀwProgømUnif‹mM©rix3dv
;

15785 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3FVPROC
 
	g__gÀwProgømUnif‹mM©rix3fv
;

15786 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
 
	g__gÀwProgømUnif‹mM©rix3x2dv
;

15787 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
 
	g__gÀwProgømUnif‹mM©rix3x2fv
;

15788 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
 
	g__gÀwProgømUnif‹mM©rix3x4dv
;

15789 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
 
	g__gÀwProgømUnif‹mM©rix3x4fv
;

15790 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4DVPROC
 
	g__gÀwProgømUnif‹mM©rix4dv
;

15791 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4FVPROC
 
	g__gÀwProgømUnif‹mM©rix4fv
;

15792 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
 
	g__gÀwProgømUnif‹mM©rix4x2dv
;

15793 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
 
	g__gÀwProgømUnif‹mM©rix4x2fv
;

15794 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
 
	g__gÀwProgømUnif‹mM©rix4x3dv
;

15795 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
 
	g__gÀwProgømUnif‹mM©rix4x3fv
;

15796 
GLEW_FUN_EXPORT
 
PFNGLUSEPROGRAMSTAGESPROC
 
	g__gÀwU£ProgømSèges
;

15797 
GLEW_FUN_EXPORT
 
PFNGLVALIDATEPROGRAMPIPELINEPROC
 
	g__gÀwVÆid©eProgømPùñöe
;

15799 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
 
	g__gÀwGëA˘iveAtomicCou¡îBuf„riv
;

15801 
GLEW_FUN_EXPORT
 
PFNGLBINDIMAGETEXTUREPROC
 
	g__gÀwBödImageTextuª
;

15802 
GLEW_FUN_EXPORT
 
PFNGLMEMORYBARRIERPROC
 
	g__gÀwMem‹yB¨rõr
;

15804 
GLEW_FUN_EXPORT
 
PFNGLATTACHOBJECTARBPROC
 
	g__gÀwAâachObje˘ARB
;

15805 
GLEW_FUN_EXPORT
 
PFNGLCOMPILESHADERARBPROC
 
	g__gÀwCompûeShadîARB
;

15806 
GLEW_FUN_EXPORT
 
PFNGLCREATEPROGRAMOBJECTARBPROC
 
	g__gÀwCª©eProgømObje˘ARB
;

15807 
GLEW_FUN_EXPORT
 
PFNGLCREATESHADEROBJECTARBPROC
 
	g__gÀwCª©eShadîObje˘ARB
;

15808 
GLEW_FUN_EXPORT
 
PFNGLDELETEOBJECTARBPROC
 
	g__gÀwDñëeObje˘ARB
;

15809 
GLEW_FUN_EXPORT
 
PFNGLDETACHOBJECTARBPROC
 
	g__gÀwDëachObje˘ARB
;

15810 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEUNIFORMARBPROC
 
	g__gÀwGëA˘iveUnif‹mARB
;

15811 
GLEW_FUN_EXPORT
 
PFNGLGETATTACHEDOBJECTSARBPROC
 
	g__gÀwGëAâachedObje˘sARB
;

15812 
GLEW_FUN_EXPORT
 
PFNGLGETHANDLEARBPROC
 
	g__gÀwGëH™dÀARB
;

15813 
GLEW_FUN_EXPORT
 
PFNGLGETINFOLOGARBPROC
 
	g__gÀwGëInfoLogARB
;

15814 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTPARAMETERFVARBPROC
 
	g__gÀwGëObje˘P¨amëîfvARB
;

15815 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTPARAMETERIVARBPROC
 
	g__gÀwGëObje˘P¨amëîivARB
;

15816 
GLEW_FUN_EXPORT
 
PFNGLGETSHADERSOURCEARBPROC
 
	g__gÀwGëShadîSour˚ARB
;

15817 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMLOCATIONARBPROC
 
	g__gÀwGëUnif‹mLoˇti⁄ARB
;

15818 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMFVARBPROC
 
	g__gÀwGëUnif‹mfvARB
;

15819 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMIVARBPROC
 
	g__gÀwGëUnif‹mivARB
;

15820 
GLEW_FUN_EXPORT
 
PFNGLLINKPROGRAMARBPROC
 
	g__gÀwLökProgømARB
;

15821 
GLEW_FUN_EXPORT
 
PFNGLSHADERSOURCEARBPROC
 
	g__gÀwShadîSour˚ARB
;

15822 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1FARBPROC
 
	g__gÀwUnif‹m1fARB
;

15823 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1FVARBPROC
 
	g__gÀwUnif‹m1fvARB
;

15824 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1IARBPROC
 
	g__gÀwUnif‹m1iARB
;

15825 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1IVARBPROC
 
	g__gÀwUnif‹m1ivARB
;

15826 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2FARBPROC
 
	g__gÀwUnif‹m2fARB
;

15827 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2FVARBPROC
 
	g__gÀwUnif‹m2fvARB
;

15828 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2IARBPROC
 
	g__gÀwUnif‹m2iARB
;

15829 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2IVARBPROC
 
	g__gÀwUnif‹m2ivARB
;

15830 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3FARBPROC
 
	g__gÀwUnif‹m3fARB
;

15831 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3FVARBPROC
 
	g__gÀwUnif‹m3fvARB
;

15832 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3IARBPROC
 
	g__gÀwUnif‹m3iARB
;

15833 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3IVARBPROC
 
	g__gÀwUnif‹m3ivARB
;

15834 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4FARBPROC
 
	g__gÀwUnif‹m4fARB
;

15835 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4FVARBPROC
 
	g__gÀwUnif‹m4fvARB
;

15836 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4IARBPROC
 
	g__gÀwUnif‹m4iARB
;

15837 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4IVARBPROC
 
	g__gÀwUnif‹m4ivARB
;

15838 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX2FVARBPROC
 
	g__gÀwUnif‹mM©rix2fvARB
;

15839 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX3FVARBPROC
 
	g__gÀwUnif‹mM©rix3fvARB
;

15840 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMMATRIX4FVARBPROC
 
	g__gÀwUnif‹mM©rix4fvARB
;

15841 
GLEW_FUN_EXPORT
 
PFNGLUSEPROGRAMOBJECTARBPROC
 
	g__gÀwU£ProgømObje˘ARB
;

15842 
GLEW_FUN_EXPORT
 
PFNGLVALIDATEPROGRAMARBPROC
 
	g__gÀwVÆid©eProgømARB
;

15844 
GLEW_FUN_EXPORT
 
PFNGLSHADERSTORAGEBLOCKBINDINGPROC
 
	g__gÀwShadîSt‹ageBlockBödög
;

15846 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVESUBROUTINENAMEPROC
 
	g__gÀwGëA˘iveSubroutöeName
;

15847 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
 
	g__gÀwGëA˘iveSubroutöeUnif‹mName
;

15848 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
 
	g__gÀwGëA˘iveSubroutöeUnif‹miv
;

15849 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMSTAGEIVPROC
 
	g__gÀwGëProgømSègeiv
;

15850 
GLEW_FUN_EXPORT
 
PFNGLGETSUBROUTINEINDEXPROC
 
	g__gÀwGëSubroutöeIndex
;

15851 
GLEW_FUN_EXPORT
 
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
 
	g__gÀwGëSubroutöeUnif‹mLoˇti⁄
;

15852 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMSUBROUTINEUIVPROC
 
	g__gÀwGëUnif‹mSubroutöeuiv
;

15853 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMSUBROUTINESUIVPROC
 
	g__gÀwUnif‹mSubroutöesuiv
;

15855 
GLEW_FUN_EXPORT
 
PFNGLCOMPILESHADERINCLUDEARBPROC
 
	g__gÀwCompûeShadîIn˛udeARB
;

15856 
GLEW_FUN_EXPORT
 
PFNGLDELETENAMEDSTRINGARBPROC
 
	g__gÀwDñëeNamedSåögARB
;

15857 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDSTRINGARBPROC
 
	g__gÀwGëNamedSåögARB
;

15858 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDSTRINGIVARBPROC
 
	g__gÀwGëNamedSåögivARB
;

15859 
GLEW_FUN_EXPORT
 
PFNGLISNAMEDSTRINGARBPROC
 
	g__gÀwIsNamedSåögARB
;

15860 
GLEW_FUN_EXPORT
 
PFNGLNAMEDSTRINGARBPROC
 
	g__gÀwNamedSåögARB
;

15862 
GLEW_FUN_EXPORT
 
PFNGLTEXPAGECOMMITMENTARBPROC
 
	g__gÀwTexPageCommômítARB
;

15863 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREPAGECOMMITMENTEXTPROC
 
	g__gÀwTextuªPageCommômítEXT
;

15865 
GLEW_FUN_EXPORT
 
PFNGLCLIENTWAITSYNCPROC
 
	g__gÀwClõ¡WaôSync
;

15866 
GLEW_FUN_EXPORT
 
PFNGLDELETESYNCPROC
 
	g__gÀwDñëeSync
;

15867 
GLEW_FUN_EXPORT
 
PFNGLFENCESYNCPROC
 
	g__gÀwFí˚Sync
;

15868 
GLEW_FUN_EXPORT
 
PFNGLGETINTEGER64VPROC
 
	g__gÀwGëI¡egî64v
;

15869 
GLEW_FUN_EXPORT
 
PFNGLGETSYNCIVPROC
 
	g__gÀwGëSynciv
;

15870 
GLEW_FUN_EXPORT
 
PFNGLISSYNCPROC
 
	g__gÀwIsSync
;

15871 
GLEW_FUN_EXPORT
 
PFNGLWAITSYNCPROC
 
	g__gÀwWaôSync
;

15873 
GLEW_FUN_EXPORT
 
PFNGLPATCHPARAMETERFVPROC
 
	g__gÀwP©chP¨amëîfv
;

15874 
GLEW_FUN_EXPORT
 
PFNGLPATCHPARAMETERIPROC
 
	g__gÀwP©chP¨amëîi
;

15876 
GLEW_FUN_EXPORT
 
PFNGLTEXBUFFERARBPROC
 
	g__gÀwTexBuf„rARB
;

15878 
GLEW_FUN_EXPORT
 
PFNGLTEXBUFFERRANGEPROC
 
	g__gÀwTexBuf„rR™ge
;

15879 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREBUFFERRANGEEXTPROC
 
	g__gÀwTextuªBuf„rR™geEXT
;

15881 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXIMAGE1DARBPROC
 
	g__gÀwCom¥es£dTexImage1DARB
;

15882 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXIMAGE2DARBPROC
 
	g__gÀwCom¥es£dTexImage2DARB
;

15883 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXIMAGE3DARBPROC
 
	g__gÀwCom¥es£dTexImage3DARB
;

15884 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
 
	g__gÀwCom¥es£dTexSubImage1DARB
;

15885 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
 
	g__gÀwCom¥es£dTexSubImage2DARB
;

15886 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
 
	g__gÀwCom¥es£dTexSubImage3DARB
;

15887 
GLEW_FUN_EXPORT
 
PFNGLGETCOMPRESSEDTEXIMAGEARBPROC
 
	g__gÀwGëCom¥es£dTexImageARB
;

15889 
GLEW_FUN_EXPORT
 
PFNGLGETMULTISAMPLEFVPROC
 
	g__gÀwGëMu…ißm∂efv
;

15890 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEMASKIPROC
 
	g__gÀwSam∂eMaski
;

15891 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE2DMULTISAMPLEPROC
 
	g__gÀwTexImage2DMu…ißm∂e
;

15892 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE3DMULTISAMPLEPROC
 
	g__gÀwTexImage3DMu…ißm∂e
;

15894 
GLEW_FUN_EXPORT
 
PFNGLTEXSTORAGE1DPROC
 
	g__gÀwTexSt‹age1D
;

15895 
GLEW_FUN_EXPORT
 
PFNGLTEXSTORAGE2DPROC
 
	g__gÀwTexSt‹age2D
;

15896 
GLEW_FUN_EXPORT
 
PFNGLTEXSTORAGE3DPROC
 
	g__gÀwTexSt‹age3D
;

15897 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESTORAGE1DEXTPROC
 
	g__gÀwTextuªSt‹age1DEXT
;

15898 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESTORAGE2DEXTPROC
 
	g__gÀwTextuªSt‹age2DEXT
;

15899 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESTORAGE3DEXTPROC
 
	g__gÀwTextuªSt‹age3DEXT
;

15901 
GLEW_FUN_EXPORT
 
PFNGLTEXSTORAGE2DMULTISAMPLEPROC
 
	g__gÀwTexSt‹age2DMu…ißm∂e
;

15902 
GLEW_FUN_EXPORT
 
PFNGLTEXSTORAGE3DMULTISAMPLEPROC
 
	g__gÀwTexSt‹age3DMu…ißm∂e
;

15903 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
 
	g__gÀwTextuªSt‹age2DMu…ißm∂eEXT
;

15904 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
 
	g__gÀwTextuªSt‹age3DMu…ißm∂eEXT
;

15906 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREVIEWPROC
 
	g__gÀwTextuªVõw
;

15908 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTI64VPROC
 
	g__gÀwGëQuîyObje˘i64v
;

15909 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTUI64VPROC
 
	g__gÀwGëQuîyObje˘ui64v
;

15910 
GLEW_FUN_EXPORT
 
PFNGLQUERYCOUNTERPROC
 
	g__gÀwQuîyCou¡î
;

15912 
GLEW_FUN_EXPORT
 
PFNGLBINDTRANSFORMFEEDBACKPROC
 
	g__gÀwBödTønsf‹mFìdback
;

15913 
GLEW_FUN_EXPORT
 
PFNGLDELETETRANSFORMFEEDBACKSPROC
 
	g__gÀwDñëeTønsf‹mFìdbacks
;

15914 
GLEW_FUN_EXPORT
 
PFNGLDRAWTRANSFORMFEEDBACKPROC
 
	g__gÀwDøwTønsf‹mFìdback
;

15915 
GLEW_FUN_EXPORT
 
PFNGLGENTRANSFORMFEEDBACKSPROC
 
	g__gÀwGíTønsf‹mFìdbacks
;

15916 
GLEW_FUN_EXPORT
 
PFNGLISTRANSFORMFEEDBACKPROC
 
	g__gÀwIsTønsf‹mFìdback
;

15917 
GLEW_FUN_EXPORT
 
PFNGLPAUSETRANSFORMFEEDBACKPROC
 
	g__gÀwPau£Tønsf‹mFìdback
;

15918 
GLEW_FUN_EXPORT
 
PFNGLRESUMETRANSFORMFEEDBACKPROC
 
	g__gÀwResumeTønsf‹mFìdback
;

15920 
GLEW_FUN_EXPORT
 
PFNGLBEGINQUERYINDEXEDPROC
 
	g__gÀwBegöQuîyIndexed
;

15921 
GLEW_FUN_EXPORT
 
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
 
	g__gÀwDøwTønsf‹mFìdbackSåóm
;

15922 
GLEW_FUN_EXPORT
 
PFNGLENDQUERYINDEXEDPROC
 
	g__gÀwEndQuîyIndexed
;

15923 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYINDEXEDIVPROC
 
	g__gÀwGëQuîyIndexediv
;

15925 
GLEW_FUN_EXPORT
 
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
 
	g__gÀwDøwTønsf‹mFìdbackIn°™˚d
;

15926 
GLEW_FUN_EXPORT
 
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
 
	g__gÀwDøwTønsf‹mFìdbackSåómIn°™˚d
;

15928 
GLEW_FUN_EXPORT
 
PFNGLLOADTRANSPOSEMATRIXDARBPROC
 
	g__gÀwLﬂdTøn•o£M©rixdARB
;

15929 
GLEW_FUN_EXPORT
 
PFNGLLOADTRANSPOSEMATRIXFARBPROC
 
	g__gÀwLﬂdTøn•o£M©rixfARB
;

15930 
GLEW_FUN_EXPORT
 
PFNGLMULTTRANSPOSEMATRIXDARBPROC
 
	g__gÀwMu…Tøn•o£M©rixdARB
;

15931 
GLEW_FUN_EXPORT
 
PFNGLMULTTRANSPOSEMATRIXFARBPROC
 
	g__gÀwMu…Tøn•o£M©rixfARB
;

15933 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERBASEPROC
 
	g__gÀwBödBuf„rBa£
;

15934 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERRANGEPROC
 
	g__gÀwBödBuf„rR™ge
;

15935 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
 
	g__gÀwGëA˘iveUnif‹mBlockName
;

15936 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEUNIFORMBLOCKIVPROC
 
	g__gÀwGëA˘iveUnif‹mBlockiv
;

15937 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEUNIFORMNAMEPROC
 
	g__gÀwGëA˘iveUnif‹mName
;

15938 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEUNIFORMSIVPROC
 
	g__gÀwGëA˘iveUnif‹msiv
;

15939 
GLEW_FUN_EXPORT
 
PFNGLGETINTEGERI_VPROC
 
	g__gÀwGëI¡egîi_v
;

15940 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMBLOCKINDEXPROC
 
	g__gÀwGëUnif‹mBlockIndex
;

15941 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMINDICESPROC
 
	g__gÀwGëUnif‹mIndi˚s
;

15942 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMBLOCKBINDINGPROC
 
	g__gÀwUnif‹mBlockBödög
;

15944 
GLEW_FUN_EXPORT
 
PFNGLBINDVERTEXARRAYPROC
 
	g__gÀwBödVîãxAºay
;

15945 
GLEW_FUN_EXPORT
 
PFNGLDELETEVERTEXARRAYSPROC
 
	g__gÀwDñëeVîãxAºays
;

15946 
GLEW_FUN_EXPORT
 
PFNGLGENVERTEXARRAYSPROC
 
	g__gÀwGíVîãxAºays
;

15947 
GLEW_FUN_EXPORT
 
PFNGLISVERTEXARRAYPROC
 
	g__gÀwIsVîãxAºay
;

15949 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBLDVPROC
 
	g__gÀwGëVîãxAâribLdv
;

15950 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1DPROC
 
	g__gÀwVîãxAâribL1d
;

15951 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1DVPROC
 
	g__gÀwVîãxAâribL1dv
;

15952 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2DPROC
 
	g__gÀwVîãxAâribL2d
;

15953 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2DVPROC
 
	g__gÀwVîãxAâribL2dv
;

15954 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3DPROC
 
	g__gÀwVîãxAâribL3d
;

15955 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3DVPROC
 
	g__gÀwVîãxAâribL3dv
;

15956 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4DPROC
 
	g__gÀwVîãxAâribL4d
;

15957 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4DVPROC
 
	g__gÀwVîãxAâribL4dv
;

15958 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBLPOINTERPROC
 
	g__gÀwVîãxAâribLPoöãr
;

15960 
GLEW_FUN_EXPORT
 
PFNGLBINDVERTEXBUFFERPROC
 
	g__gÀwBödVîãxBuf„r
;

15961 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBBINDINGPROC
 
	g__gÀwVîãxAâribBödög
;

15962 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBFORMATPROC
 
	g__gÀwVîãxAâribF‹m©
;

15963 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBIFORMATPROC
 
	g__gÀwVîãxAâribIF‹m©
;

15964 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBLFORMATPROC
 
	g__gÀwVîãxAâribLF‹m©
;

15965 
GLEW_FUN_EXPORT
 
PFNGLVERTEXBINDINGDIVISORPROC
 
	g__gÀwVîãxBödögDivis‹
;

15967 
GLEW_FUN_EXPORT
 
PFNGLVERTEXBLENDARBPROC
 
	g__gÀwVîãxBÀndARB
;

15968 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTPOINTERARBPROC
 
	g__gÀwWeightPoöãrARB
;

15969 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTBVARBPROC
 
	g__gÀwWeightbvARB
;

15970 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTDVARBPROC
 
	g__gÀwWeightdvARB
;

15971 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTFVARBPROC
 
	g__gÀwWeightfvARB
;

15972 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTIVARBPROC
 
	g__gÀwWeightivARB
;

15973 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTSVARBPROC
 
	g__gÀwWeightsvARB
;

15974 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTUBVARBPROC
 
	g__gÀwWeightubvARB
;

15975 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTUIVARBPROC
 
	g__gÀwWeightuivARB
;

15976 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTUSVARBPROC
 
	g__gÀwWeightusvARB
;

15978 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERARBPROC
 
	g__gÀwBödBuf„rARB
;

15979 
GLEW_FUN_EXPORT
 
PFNGLBUFFERDATAARBPROC
 
	g__gÀwBuf„rD©aARB
;

15980 
GLEW_FUN_EXPORT
 
PFNGLBUFFERSUBDATAARBPROC
 
	g__gÀwBuf„rSubD©aARB
;

15981 
GLEW_FUN_EXPORT
 
PFNGLDELETEBUFFERSARBPROC
 
	g__gÀwDñëeBuf„rsARB
;

15982 
GLEW_FUN_EXPORT
 
PFNGLGENBUFFERSARBPROC
 
	g__gÀwGíBuf„rsARB
;

15983 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERPARAMETERIVARBPROC
 
	g__gÀwGëBuf„rP¨amëîivARB
;

15984 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERPOINTERVARBPROC
 
	g__gÀwGëBuf„rPoöãrvARB
;

15985 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERSUBDATAARBPROC
 
	g__gÀwGëBuf„rSubD©aARB
;

15986 
GLEW_FUN_EXPORT
 
PFNGLISBUFFERARBPROC
 
	g__gÀwIsBuf„rARB
;

15987 
GLEW_FUN_EXPORT
 
PFNGLMAPBUFFERARBPROC
 
	g__gÀwM≠Buf„rARB
;

15988 
GLEW_FUN_EXPORT
 
PFNGLUNMAPBUFFERARBPROC
 
	g__gÀwUnm≠Buf„rARB
;

15990 
GLEW_FUN_EXPORT
 
PFNGLBINDPROGRAMARBPROC
 
	g__gÀwBödProgømARB
;

15991 
GLEW_FUN_EXPORT
 
PFNGLDELETEPROGRAMSARBPROC
 
	g__gÀwDñëeProgømsARB
;

15992 
GLEW_FUN_EXPORT
 
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC
 
	g__gÀwDißbÀVîãxAâribAºayARB
;

15993 
GLEW_FUN_EXPORT
 
PFNGLENABLEVERTEXATTRIBARRAYARBPROC
 
	g__gÀwE«bÀVîãxAâribAºayARB
;

15994 
GLEW_FUN_EXPORT
 
PFNGLGENPROGRAMSARBPROC
 
	g__gÀwGíProgømsARB
;

15995 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMENVPARAMETERDVARBPROC
 
	g__gÀwGëProgømEnvP¨amëîdvARB
;

15996 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMENVPARAMETERFVARBPROC
 
	g__gÀwGëProgømEnvP¨amëîfvARB
;

15997 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
 
	g__gÀwGëProgømLoˇlP¨amëîdvARB
;

15998 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
 
	g__gÀwGëProgømLoˇlP¨amëîfvARB
;

15999 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMSTRINGARBPROC
 
	g__gÀwGëProgømSåögARB
;

16000 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMIVARBPROC
 
	g__gÀwGëProgømivARB
;

16001 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBPOINTERVARBPROC
 
	g__gÀwGëVîãxAâribPoöãrvARB
;

16002 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBDVARBPROC
 
	g__gÀwGëVîãxAâribdvARB
;

16003 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBFVARBPROC
 
	g__gÀwGëVîãxAâribfvARB
;

16004 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIVARBPROC
 
	g__gÀwGëVîãxAâribivARB
;

16005 
GLEW_FUN_EXPORT
 
PFNGLISPROGRAMARBPROC
 
	g__gÀwIsProgømARB
;

16006 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETER4DARBPROC
 
	g__gÀwProgømEnvP¨amëî4dARB
;

16007 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETER4DVARBPROC
 
	g__gÀwProgømEnvP¨amëî4dvARB
;

16008 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETER4FARBPROC
 
	g__gÀwProgømEnvP¨amëî4fARB
;

16009 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETER4FVARBPROC
 
	g__gÀwProgømEnvP¨amëî4fvARB
;

16010 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETER4DARBPROC
 
	g__gÀwProgømLoˇlP¨amëî4dARB
;

16011 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETER4DVARBPROC
 
	g__gÀwProgømLoˇlP¨amëî4dvARB
;

16012 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETER4FARBPROC
 
	g__gÀwProgømLoˇlP¨amëî4fARB
;

16013 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC
 
	g__gÀwProgømLoˇlP¨amëî4fvARB
;

16014 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMSTRINGARBPROC
 
	g__gÀwProgømSåögARB
;

16015 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1DARBPROC
 
	g__gÀwVîãxAârib1dARB
;

16016 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1DVARBPROC
 
	g__gÀwVîãxAârib1dvARB
;

16017 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1FARBPROC
 
	g__gÀwVîãxAârib1fARB
;

16018 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1FVARBPROC
 
	g__gÀwVîãxAârib1fvARB
;

16019 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1SARBPROC
 
	g__gÀwVîãxAârib1sARB
;

16020 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1SVARBPROC
 
	g__gÀwVîãxAârib1svARB
;

16021 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2DARBPROC
 
	g__gÀwVîãxAârib2dARB
;

16022 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2DVARBPROC
 
	g__gÀwVîãxAârib2dvARB
;

16023 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2FARBPROC
 
	g__gÀwVîãxAârib2fARB
;

16024 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2FVARBPROC
 
	g__gÀwVîãxAârib2fvARB
;

16025 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2SARBPROC
 
	g__gÀwVîãxAârib2sARB
;

16026 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2SVARBPROC
 
	g__gÀwVîãxAârib2svARB
;

16027 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3DARBPROC
 
	g__gÀwVîãxAârib3dARB
;

16028 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3DVARBPROC
 
	g__gÀwVîãxAârib3dvARB
;

16029 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3FARBPROC
 
	g__gÀwVîãxAârib3fARB
;

16030 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3FVARBPROC
 
	g__gÀwVîãxAârib3fvARB
;

16031 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3SARBPROC
 
	g__gÀwVîãxAârib3sARB
;

16032 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3SVARBPROC
 
	g__gÀwVîãxAârib3svARB
;

16033 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NBVARBPROC
 
	g__gÀwVîãxAârib4NbvARB
;

16034 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NIVARBPROC
 
	g__gÀwVîãxAârib4NivARB
;

16035 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NSVARBPROC
 
	g__gÀwVîãxAârib4NsvARB
;

16036 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUBARBPROC
 
	g__gÀwVîãxAârib4NubARB
;

16037 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUBVARBPROC
 
	g__gÀwVîãxAârib4NubvARB
;

16038 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUIVARBPROC
 
	g__gÀwVîãxAârib4NuivARB
;

16039 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4NUSVARBPROC
 
	g__gÀwVîãxAârib4NusvARB
;

16040 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4BVARBPROC
 
	g__gÀwVîãxAârib4bvARB
;

16041 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4DARBPROC
 
	g__gÀwVîãxAârib4dARB
;

16042 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4DVARBPROC
 
	g__gÀwVîãxAârib4dvARB
;

16043 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4FARBPROC
 
	g__gÀwVîãxAârib4fARB
;

16044 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4FVARBPROC
 
	g__gÀwVîãxAârib4fvARB
;

16045 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4IVARBPROC
 
	g__gÀwVîãxAârib4ivARB
;

16046 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4SARBPROC
 
	g__gÀwVîãxAârib4sARB
;

16047 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4SVARBPROC
 
	g__gÀwVîãxAârib4svARB
;

16048 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4UBVARBPROC
 
	g__gÀwVîãxAârib4ubvARB
;

16049 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4UIVARBPROC
 
	g__gÀwVîãxAârib4uivARB
;

16050 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4USVARBPROC
 
	g__gÀwVîãxAârib4usvARB
;

16051 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBPOINTERARBPROC
 
	g__gÀwVîãxAâribPoöãrARB
;

16053 
GLEW_FUN_EXPORT
 
PFNGLBINDATTRIBLOCATIONARBPROC
 
	g__gÀwBödAâribLoˇti⁄ARB
;

16054 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEATTRIBARBPROC
 
	g__gÀwGëA˘iveAâribARB
;

16055 
GLEW_FUN_EXPORT
 
PFNGLGETATTRIBLOCATIONARBPROC
 
	g__gÀwGëAâribLoˇti⁄ARB
;

16057 
GLEW_FUN_EXPORT
 
PFNGLCOLORP3UIPROC
 
	g__gÀwCﬁ‹P3ui
;

16058 
GLEW_FUN_EXPORT
 
PFNGLCOLORP3UIVPROC
 
	g__gÀwCﬁ‹P3uiv
;

16059 
GLEW_FUN_EXPORT
 
PFNGLCOLORP4UIPROC
 
	g__gÀwCﬁ‹P4ui
;

16060 
GLEW_FUN_EXPORT
 
PFNGLCOLORP4UIVPROC
 
	g__gÀwCﬁ‹P4uiv
;

16061 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP1UIPROC
 
	g__gÀwMu…iTexCo‹dP1ui
;

16062 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP1UIVPROC
 
	g__gÀwMu…iTexCo‹dP1uiv
;

16063 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP2UIPROC
 
	g__gÀwMu…iTexCo‹dP2ui
;

16064 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP2UIVPROC
 
	g__gÀwMu…iTexCo‹dP2uiv
;

16065 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP3UIPROC
 
	g__gÀwMu…iTexCo‹dP3ui
;

16066 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP3UIVPROC
 
	g__gÀwMu…iTexCo‹dP3uiv
;

16067 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP4UIPROC
 
	g__gÀwMu…iTexCo‹dP4ui
;

16068 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDP4UIVPROC
 
	g__gÀwMu…iTexCo‹dP4uiv
;

16069 
GLEW_FUN_EXPORT
 
PFNGLNORMALP3UIPROC
 
	g__gÀwN‹mÆP3ui
;

16070 
GLEW_FUN_EXPORT
 
PFNGLNORMALP3UIVPROC
 
	g__gÀwN‹mÆP3uiv
;

16071 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLORP3UIPROC
 
	g__gÀwSec⁄d¨yCﬁ‹P3ui
;

16072 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLORP3UIVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹P3uiv
;

16073 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP1UIPROC
 
	g__gÀwTexCo‹dP1ui
;

16074 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP1UIVPROC
 
	g__gÀwTexCo‹dP1uiv
;

16075 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP2UIPROC
 
	g__gÀwTexCo‹dP2ui
;

16076 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP2UIVPROC
 
	g__gÀwTexCo‹dP2uiv
;

16077 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP3UIPROC
 
	g__gÀwTexCo‹dP3ui
;

16078 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP3UIVPROC
 
	g__gÀwTexCo‹dP3uiv
;

16079 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP4UIPROC
 
	g__gÀwTexCo‹dP4ui
;

16080 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDP4UIVPROC
 
	g__gÀwTexCo‹dP4uiv
;

16081 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP1UIPROC
 
	g__gÀwVîãxAâribP1ui
;

16082 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP1UIVPROC
 
	g__gÀwVîãxAâribP1uiv
;

16083 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP2UIPROC
 
	g__gÀwVîãxAâribP2ui
;

16084 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP2UIVPROC
 
	g__gÀwVîãxAâribP2uiv
;

16085 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP3UIPROC
 
	g__gÀwVîãxAâribP3ui
;

16086 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP3UIVPROC
 
	g__gÀwVîãxAâribP3uiv
;

16087 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP4UIPROC
 
	g__gÀwVîãxAâribP4ui
;

16088 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBP4UIVPROC
 
	g__gÀwVîãxAâribP4uiv
;

16089 
GLEW_FUN_EXPORT
 
PFNGLVERTEXP2UIPROC
 
	g__gÀwVîãxP2ui
;

16090 
GLEW_FUN_EXPORT
 
PFNGLVERTEXP2UIVPROC
 
	g__gÀwVîãxP2uiv
;

16091 
GLEW_FUN_EXPORT
 
PFNGLVERTEXP3UIPROC
 
	g__gÀwVîãxP3ui
;

16092 
GLEW_FUN_EXPORT
 
PFNGLVERTEXP3UIVPROC
 
	g__gÀwVîãxP3uiv
;

16093 
GLEW_FUN_EXPORT
 
PFNGLVERTEXP4UIPROC
 
	g__gÀwVîãxP4ui
;

16094 
GLEW_FUN_EXPORT
 
PFNGLVERTEXP4UIVPROC
 
	g__gÀwVîãxP4uiv
;

16096 
GLEW_FUN_EXPORT
 
PFNGLDEPTHRANGEARRAYVPROC
 
	g__gÀwDïthR™geAºayv
;

16097 
GLEW_FUN_EXPORT
 
PFNGLDEPTHRANGEINDEXEDPROC
 
	g__gÀwDïthR™geIndexed
;

16098 
GLEW_FUN_EXPORT
 
PFNGLGETDOUBLEI_VPROC
 
	g__gÀwGëDoubÀi_v
;

16099 
GLEW_FUN_EXPORT
 
PFNGLGETFLOATI_VPROC
 
	g__gÀwGëFlﬂti_v
;

16100 
GLEW_FUN_EXPORT
 
PFNGLSCISSORARRAYVPROC
 
	g__gÀwSciss‹Aºayv
;

16101 
GLEW_FUN_EXPORT
 
PFNGLSCISSORINDEXEDPROC
 
	g__gÀwSciss‹Indexed
;

16102 
GLEW_FUN_EXPORT
 
PFNGLSCISSORINDEXEDVPROC
 
	g__gÀwSciss‹Indexedv
;

16103 
GLEW_FUN_EXPORT
 
PFNGLVIEWPORTARRAYVPROC
 
	g__gÀwVõwp‹tAºayv
;

16104 
GLEW_FUN_EXPORT
 
PFNGLVIEWPORTINDEXEDFPROC
 
	g__gÀwVõwp‹tIndexedf
;

16105 
GLEW_FUN_EXPORT
 
PFNGLVIEWPORTINDEXEDFVPROC
 
	g__gÀwVõwp‹tIndexedfv
;

16107 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2DARBPROC
 
	g__gÀwWödowPos2dARB
;

16108 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2DVARBPROC
 
	g__gÀwWödowPos2dvARB
;

16109 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2FARBPROC
 
	g__gÀwWödowPos2fARB
;

16110 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2FVARBPROC
 
	g__gÀwWödowPos2fvARB
;

16111 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2IARBPROC
 
	g__gÀwWödowPos2iARB
;

16112 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2IVARBPROC
 
	g__gÀwWödowPos2ivARB
;

16113 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2SARBPROC
 
	g__gÀwWödowPos2sARB
;

16114 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2SVARBPROC
 
	g__gÀwWödowPos2svARB
;

16115 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3DARBPROC
 
	g__gÀwWödowPos3dARB
;

16116 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3DVARBPROC
 
	g__gÀwWödowPos3dvARB
;

16117 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3FARBPROC
 
	g__gÀwWödowPos3fARB
;

16118 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3FVARBPROC
 
	g__gÀwWödowPos3fvARB
;

16119 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3IARBPROC
 
	g__gÀwWödowPos3iARB
;

16120 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3IVARBPROC
 
	g__gÀwWödowPos3ivARB
;

16121 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3SARBPROC
 
	g__gÀwWödowPos3sARB
;

16122 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3SVARBPROC
 
	g__gÀwWödowPos3svARB
;

16124 
GLEW_FUN_EXPORT
 
PFNGLDRAWBUFFERSATIPROC
 
	g__gÀwDøwBuf„rsATI
;

16126 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTARRAYATIPROC
 
	g__gÀwDøwEÀmítAºayATI
;

16127 
GLEW_FUN_EXPORT
 
PFNGLDRAWRANGEELEMENTARRAYATIPROC
 
	g__gÀwDøwR™geEÀmítAºayATI
;

16128 
GLEW_FUN_EXPORT
 
PFNGLELEMENTPOINTERATIPROC
 
	g__gÀwEÀmítPoöãrATI
;

16130 
GLEW_FUN_EXPORT
 
PFNGLGETTEXBUMPPARAMETERFVATIPROC
 
	g__gÀwGëTexBumpP¨amëîfvATI
;

16131 
GLEW_FUN_EXPORT
 
PFNGLGETTEXBUMPPARAMETERIVATIPROC
 
	g__gÀwGëTexBumpP¨amëîivATI
;

16132 
GLEW_FUN_EXPORT
 
PFNGLTEXBUMPPARAMETERFVATIPROC
 
	g__gÀwTexBumpP¨amëîfvATI
;

16133 
GLEW_FUN_EXPORT
 
PFNGLTEXBUMPPARAMETERIVATIPROC
 
	g__gÀwTexBumpP¨amëîivATI
;

16135 
GLEW_FUN_EXPORT
 
PFNGLALPHAFRAGMENTOP1ATIPROC
 
	g__gÀwAÕhaFøgmítOp1ATI
;

16136 
GLEW_FUN_EXPORT
 
PFNGLALPHAFRAGMENTOP2ATIPROC
 
	g__gÀwAÕhaFøgmítOp2ATI
;

16137 
GLEW_FUN_EXPORT
 
PFNGLALPHAFRAGMENTOP3ATIPROC
 
	g__gÀwAÕhaFøgmítOp3ATI
;

16138 
GLEW_FUN_EXPORT
 
PFNGLBEGINFRAGMENTSHADERATIPROC
 
	g__gÀwBegöFøgmítShadîATI
;

16139 
GLEW_FUN_EXPORT
 
PFNGLBINDFRAGMENTSHADERATIPROC
 
	g__gÀwBödFøgmítShadîATI
;

16140 
GLEW_FUN_EXPORT
 
PFNGLCOLORFRAGMENTOP1ATIPROC
 
	g__gÀwCﬁ‹FøgmítOp1ATI
;

16141 
GLEW_FUN_EXPORT
 
PFNGLCOLORFRAGMENTOP2ATIPROC
 
	g__gÀwCﬁ‹FøgmítOp2ATI
;

16142 
GLEW_FUN_EXPORT
 
PFNGLCOLORFRAGMENTOP3ATIPROC
 
	g__gÀwCﬁ‹FøgmítOp3ATI
;

16143 
GLEW_FUN_EXPORT
 
PFNGLDELETEFRAGMENTSHADERATIPROC
 
	g__gÀwDñëeFøgmítShadîATI
;

16144 
GLEW_FUN_EXPORT
 
PFNGLENDFRAGMENTSHADERATIPROC
 
	g__gÀwEndFøgmítShadîATI
;

16145 
GLEW_FUN_EXPORT
 
PFNGLGENFRAGMENTSHADERSATIPROC
 
	g__gÀwGíFøgmítShadîsATI
;

16146 
GLEW_FUN_EXPORT
 
PFNGLPASSTEXCOORDATIPROC
 
	g__gÀwPassTexCo‹dATI
;

16147 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEMAPATIPROC
 
	g__gÀwSam∂eM≠ATI
;

16148 
GLEW_FUN_EXPORT
 
PFNGLSETFRAGMENTSHADERCONSTANTATIPROC
 
	g__gÀwSëFøgmítShadîC⁄°™tATI
;

16150 
GLEW_FUN_EXPORT
 
PFNGLMAPOBJECTBUFFERATIPROC
 
	g__gÀwM≠Obje˘Buf„rATI
;

16151 
GLEW_FUN_EXPORT
 
PFNGLUNMAPOBJECTBUFFERATIPROC
 
	g__gÀwUnm≠Obje˘Buf„rATI
;

16153 
GLEW_FUN_EXPORT
 
PFNGLPNTRIANGLESFATIPROC
 
	g__gÀwPNTrüngÀsfATI
;

16154 
GLEW_FUN_EXPORT
 
PFNGLPNTRIANGLESIATIPROC
 
	g__gÀwPNTrüngÀsiATI
;

16156 
GLEW_FUN_EXPORT
 
PFNGLSTENCILFUNCSEPARATEATIPROC
 
	g__gÀwSãncûFuncSï¨©eATI
;

16157 
GLEW_FUN_EXPORT
 
PFNGLSTENCILOPSEPARATEATIPROC
 
	g__gÀwSãncûOpSï¨©eATI
;

16159 
GLEW_FUN_EXPORT
 
PFNGLARRAYOBJECTATIPROC
 
	g__gÀwAºayObje˘ATI
;

16160 
GLEW_FUN_EXPORT
 
PFNGLFREEOBJECTBUFFERATIPROC
 
	g__gÀwFªeObje˘Buf„rATI
;

16161 
GLEW_FUN_EXPORT
 
PFNGLGETARRAYOBJECTFVATIPROC
 
	g__gÀwGëAºayObje˘fvATI
;

16162 
GLEW_FUN_EXPORT
 
PFNGLGETARRAYOBJECTIVATIPROC
 
	g__gÀwGëAºayObje˘ivATI
;

16163 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTBUFFERFVATIPROC
 
	g__gÀwGëObje˘Buf„rfvATI
;

16164 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTBUFFERIVATIPROC
 
	g__gÀwGëObje˘Buf„rivATI
;

16165 
GLEW_FUN_EXPORT
 
PFNGLGETVARIANTARRAYOBJECTFVATIPROC
 
	g__gÀwGëV¨ü¡AºayObje˘fvATI
;

16166 
GLEW_FUN_EXPORT
 
PFNGLGETVARIANTARRAYOBJECTIVATIPROC
 
	g__gÀwGëV¨ü¡AºayObje˘ivATI
;

16167 
GLEW_FUN_EXPORT
 
PFNGLISOBJECTBUFFERATIPROC
 
	g__gÀwIsObje˘Buf„rATI
;

16168 
GLEW_FUN_EXPORT
 
PFNGLNEWOBJECTBUFFERATIPROC
 
	g__gÀwNewObje˘Buf„rATI
;

16169 
GLEW_FUN_EXPORT
 
PFNGLUPDATEOBJECTBUFFERATIPROC
 
	g__gÀwUpd©eObje˘Buf„rATI
;

16170 
GLEW_FUN_EXPORT
 
PFNGLVARIANTARRAYOBJECTATIPROC
 
	g__gÀwV¨ü¡AºayObje˘ATI
;

16172 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
 
	g__gÀwGëVîãxAâribAºayObje˘fvATI
;

16173 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
 
	g__gÀwGëVîãxAâribAºayObje˘ivATI
;

16174 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBARRAYOBJECTATIPROC
 
	g__gÀwVîãxAâribAºayObje˘ATI
;

16176 
GLEW_FUN_EXPORT
 
PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
 
	g__gÀwClõ¡A˘iveVîãxSåómATI
;

16177 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3BATIPROC
 
	g__gÀwN‹mÆSåóm3bATI
;

16178 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3BVATIPROC
 
	g__gÀwN‹mÆSåóm3bvATI
;

16179 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3DATIPROC
 
	g__gÀwN‹mÆSåóm3dATI
;

16180 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3DVATIPROC
 
	g__gÀwN‹mÆSåóm3dvATI
;

16181 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3FATIPROC
 
	g__gÀwN‹mÆSåóm3fATI
;

16182 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3FVATIPROC
 
	g__gÀwN‹mÆSåóm3fvATI
;

16183 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3IATIPROC
 
	g__gÀwN‹mÆSåóm3iATI
;

16184 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3IVATIPROC
 
	g__gÀwN‹mÆSåóm3ivATI
;

16185 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3SATIPROC
 
	g__gÀwN‹mÆSåóm3sATI
;

16186 
GLEW_FUN_EXPORT
 
PFNGLNORMALSTREAM3SVATIPROC
 
	g__gÀwN‹mÆSåóm3svATI
;

16187 
GLEW_FUN_EXPORT
 
PFNGLVERTEXBLENDENVFATIPROC
 
	g__gÀwVîãxBÀndEnvfATI
;

16188 
GLEW_FUN_EXPORT
 
PFNGLVERTEXBLENDENVIATIPROC
 
	g__gÀwVîãxBÀndEnviATI
;

16189 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1DATIPROC
 
	g__gÀwVîãxSåóm1dATI
;

16190 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1DVATIPROC
 
	g__gÀwVîãxSåóm1dvATI
;

16191 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1FATIPROC
 
	g__gÀwVîãxSåóm1fATI
;

16192 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1FVATIPROC
 
	g__gÀwVîãxSåóm1fvATI
;

16193 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1IATIPROC
 
	g__gÀwVîãxSåóm1iATI
;

16194 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1IVATIPROC
 
	g__gÀwVîãxSåóm1ivATI
;

16195 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1SATIPROC
 
	g__gÀwVîãxSåóm1sATI
;

16196 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM1SVATIPROC
 
	g__gÀwVîãxSåóm1svATI
;

16197 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2DATIPROC
 
	g__gÀwVîãxSåóm2dATI
;

16198 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2DVATIPROC
 
	g__gÀwVîãxSåóm2dvATI
;

16199 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2FATIPROC
 
	g__gÀwVîãxSåóm2fATI
;

16200 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2FVATIPROC
 
	g__gÀwVîãxSåóm2fvATI
;

16201 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2IATIPROC
 
	g__gÀwVîãxSåóm2iATI
;

16202 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2IVATIPROC
 
	g__gÀwVîãxSåóm2ivATI
;

16203 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2SATIPROC
 
	g__gÀwVîãxSåóm2sATI
;

16204 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM2SVATIPROC
 
	g__gÀwVîãxSåóm2svATI
;

16205 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3DATIPROC
 
	g__gÀwVîãxSåóm3dATI
;

16206 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3DVATIPROC
 
	g__gÀwVîãxSåóm3dvATI
;

16207 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3FATIPROC
 
	g__gÀwVîãxSåóm3fATI
;

16208 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3FVATIPROC
 
	g__gÀwVîãxSåóm3fvATI
;

16209 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3IATIPROC
 
	g__gÀwVîãxSåóm3iATI
;

16210 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3IVATIPROC
 
	g__gÀwVîãxSåóm3ivATI
;

16211 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3SATIPROC
 
	g__gÀwVîãxSåóm3sATI
;

16212 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM3SVATIPROC
 
	g__gÀwVîãxSåóm3svATI
;

16213 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4DATIPROC
 
	g__gÀwVîãxSåóm4dATI
;

16214 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4DVATIPROC
 
	g__gÀwVîãxSåóm4dvATI
;

16215 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4FATIPROC
 
	g__gÀwVîãxSåóm4fATI
;

16216 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4FVATIPROC
 
	g__gÀwVîãxSåóm4fvATI
;

16217 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4IATIPROC
 
	g__gÀwVîãxSåóm4iATI
;

16218 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4IVATIPROC
 
	g__gÀwVîãxSåóm4ivATI
;

16219 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4SATIPROC
 
	g__gÀwVîãxSåóm4sATI
;

16220 
GLEW_FUN_EXPORT
 
PFNGLVERTEXSTREAM4SVATIPROC
 
	g__gÀwVîãxSåóm4svATI
;

16222 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMBUFFERSIZEEXTPROC
 
	g__gÀwGëUnif‹mBuf„rSizeEXT
;

16223 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMOFFSETEXTPROC
 
	g__gÀwGëUnif‹mOff£tEXT
;

16224 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMBUFFEREXTPROC
 
	g__gÀwUnif‹mBuf„rEXT
;

16226 
GLEW_FUN_EXPORT
 
PFNGLBLENDCOLOREXTPROC
 
	g__gÀwBÀndCﬁ‹EXT
;

16228 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONSEPARATEEXTPROC
 
	g__gÀwBÀndEqu©i⁄Sï¨©eEXT
;

16230 
GLEW_FUN_EXPORT
 
PFNGLBLENDFUNCSEPARATEEXTPROC
 
	g__gÀwBÀndFuncSï¨©eEXT
;

16232 
GLEW_FUN_EXPORT
 
PFNGLBLENDEQUATIONEXTPROC
 
	g__gÀwBÀndEqu©i⁄EXT
;

16234 
GLEW_FUN_EXPORT
 
PFNGLCOLORSUBTABLEEXTPROC
 
	g__gÀwCﬁ‹SubTabÀEXT
;

16235 
GLEW_FUN_EXPORT
 
PFNGLCOPYCOLORSUBTABLEEXTPROC
 
	g__gÀwC›yCﬁ‹SubTabÀEXT
;

16237 
GLEW_FUN_EXPORT
 
PFNGLLOCKARRAYSEXTPROC
 
	g__gÀwLockAºaysEXT
;

16238 
GLEW_FUN_EXPORT
 
PFNGLUNLOCKARRAYSEXTPROC
 
	g__gÀwU∆ockAºaysEXT
;

16240 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONFILTER1DEXTPROC
 
	g__gÀwC⁄vﬁuti⁄Fûãr1DEXT
;

16241 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONFILTER2DEXTPROC
 
	g__gÀwC⁄vﬁuti⁄Fûãr2DEXT
;

16242 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERFEXTPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîfEXT
;

16243 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERFVEXTPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîfvEXT
;

16244 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERIEXTPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîiEXT
;

16245 
GLEW_FUN_EXPORT
 
PFNGLCONVOLUTIONPARAMETERIVEXTPROC
 
	g__gÀwC⁄vﬁuti⁄P¨amëîivEXT
;

16246 
GLEW_FUN_EXPORT
 
PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
 
	g__gÀwC›yC⁄vﬁuti⁄Fûãr1DEXT
;

16247 
GLEW_FUN_EXPORT
 
PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
 
	g__gÀwC›yC⁄vﬁuti⁄Fûãr2DEXT
;

16248 
GLEW_FUN_EXPORT
 
PFNGLGETCONVOLUTIONFILTEREXTPROC
 
	g__gÀwGëC⁄vﬁuti⁄FûãrEXT
;

16249 
GLEW_FUN_EXPORT
 
PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
 
	g__gÀwGëC⁄vﬁuti⁄P¨amëîfvEXT
;

16250 
GLEW_FUN_EXPORT
 
PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
 
	g__gÀwGëC⁄vﬁuti⁄P¨amëîivEXT
;

16251 
GLEW_FUN_EXPORT
 
PFNGLGETSEPARABLEFILTEREXTPROC
 
	g__gÀwGëSï¨abÀFûãrEXT
;

16252 
GLEW_FUN_EXPORT
 
PFNGLSEPARABLEFILTER2DEXTPROC
 
	g__gÀwSï¨abÀFûãr2DEXT
;

16254 
GLEW_FUN_EXPORT
 
PFNGLBINORMALPOINTEREXTPROC
 
	g__gÀwBö‹mÆPoöãrEXT
;

16255 
GLEW_FUN_EXPORT
 
PFNGLTANGENTPOINTEREXTPROC
 
	g__gÀwT™gítPoöãrEXT
;

16257 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXIMAGE1DEXTPROC
 
	g__gÀwC›yTexImage1DEXT
;

16258 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXIMAGE2DEXTPROC
 
	g__gÀwC›yTexImage2DEXT
;

16259 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXSUBIMAGE1DEXTPROC
 
	g__gÀwC›yTexSubImage1DEXT
;

16260 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXSUBIMAGE2DEXTPROC
 
	g__gÀwC›yTexSubImage2DEXT
;

16261 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXSUBIMAGE3DEXTPROC
 
	g__gÀwC›yTexSubImage3DEXT
;

16263 
GLEW_FUN_EXPORT
 
PFNGLCULLPARAMETERDVEXTPROC
 
	g__gÀwCuŒP¨amëîdvEXT
;

16264 
GLEW_FUN_EXPORT
 
PFNGLCULLPARAMETERFVEXTPROC
 
	g__gÀwCuŒP¨amëîfvEXT
;

16266 
GLEW_FUN_EXPORT
 
PFNGLINSERTEVENTMARKEREXTPROC
 
	g__gÀwIn£πEvítM¨kîEXT
;

16267 
GLEW_FUN_EXPORT
 
PFNGLPOPGROUPMARKEREXTPROC
 
	g__gÀwP›GroupM¨kîEXT
;

16268 
GLEW_FUN_EXPORT
 
PFNGLPUSHGROUPMARKEREXTPROC
 
	g__gÀwPushGroupM¨kîEXT
;

16270 
GLEW_FUN_EXPORT
 
PFNGLDEPTHBOUNDSEXTPROC
 
	g__gÀwDïthBoundsEXT
;

16272 
GLEW_FUN_EXPORT
 
PFNGLBINDMULTITEXTUREEXTPROC
 
	g__gÀwBödMu…iTextuªEXT
;

16273 
GLEW_FUN_EXPORT
 
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
 
	g__gÀwCheckNamedFømebuf„rSètusEXT
;

16274 
GLEW_FUN_EXPORT
 
PFNGLCLIENTATTRIBDEFAULTEXTPROC
 
	g__gÀwClõ¡AâribDeÁu…EXT
;

16275 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
 
	g__gÀwCom¥es£dMu…iTexImage1DEXT
;

16276 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
 
	g__gÀwCom¥es£dMu…iTexImage2DEXT
;

16277 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
 
	g__gÀwCom¥es£dMu…iTexImage3DEXT
;

16278 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
 
	g__gÀwCom¥es£dMu…iTexSubImage1DEXT
;

16279 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
 
	g__gÀwCom¥es£dMu…iTexSubImage2DEXT
;

16280 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
 
	g__gÀwCom¥es£dMu…iTexSubImage3DEXT
;

16281 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
 
	g__gÀwCom¥es£dTextuªImage1DEXT
;

16282 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
 
	g__gÀwCom¥es£dTextuªImage2DEXT
;

16283 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
 
	g__gÀwCom¥es£dTextuªImage3DEXT
;

16284 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
 
	g__gÀwCom¥es£dTextuªSubImage1DEXT
;

16285 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
 
	g__gÀwCom¥es£dTextuªSubImage2DEXT
;

16286 
GLEW_FUN_EXPORT
 
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
 
	g__gÀwCom¥es£dTextuªSubImage3DEXT
;

16287 
GLEW_FUN_EXPORT
 
PFNGLCOPYMULTITEXIMAGE1DEXTPROC
 
	g__gÀwC›yMu…iTexImage1DEXT
;

16288 
GLEW_FUN_EXPORT
 
PFNGLCOPYMULTITEXIMAGE2DEXTPROC
 
	g__gÀwC›yMu…iTexImage2DEXT
;

16289 
GLEW_FUN_EXPORT
 
PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
 
	g__gÀwC›yMu…iTexSubImage1DEXT
;

16290 
GLEW_FUN_EXPORT
 
PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
 
	g__gÀwC›yMu…iTexSubImage2DEXT
;

16291 
GLEW_FUN_EXPORT
 
PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
 
	g__gÀwC›yMu…iTexSubImage3DEXT
;

16292 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXTUREIMAGE1DEXTPROC
 
	g__gÀwC›yTextuªImage1DEXT
;

16293 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXTUREIMAGE2DEXTPROC
 
	g__gÀwC›yTextuªImage2DEXT
;

16294 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
 
	g__gÀwC›yTextuªSubImage1DEXT
;

16295 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
 
	g__gÀwC›yTextuªSubImage2DEXT
;

16296 
GLEW_FUN_EXPORT
 
PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
 
	g__gÀwC›yTextuªSubImage3DEXT
;

16297 
GLEW_FUN_EXPORT
 
PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
 
	g__gÀwDißbÀClõ¡SèãIndexedEXT
;

16298 
GLEW_FUN_EXPORT
 
PFNGLDISABLECLIENTSTATEIEXTPROC
 
	g__gÀwDißbÀClõ¡SèãiEXT
;

16299 
GLEW_FUN_EXPORT
 
PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC
 
	g__gÀwDißbÀVîãxAºayAâribEXT
;

16300 
GLEW_FUN_EXPORT
 
PFNGLDISABLEVERTEXARRAYEXTPROC
 
	g__gÀwDißbÀVîãxAºayEXT
;

16301 
GLEW_FUN_EXPORT
 
PFNGLENABLECLIENTSTATEINDEXEDEXTPROC
 
	g__gÀwE«bÀClõ¡SèãIndexedEXT
;

16302 
GLEW_FUN_EXPORT
 
PFNGLENABLECLIENTSTATEIEXTPROC
 
	g__gÀwE«bÀClõ¡SèãiEXT
;

16303 
GLEW_FUN_EXPORT
 
PFNGLENABLEVERTEXARRAYATTRIBEXTPROC
 
	g__gÀwE«bÀVîãxAºayAâribEXT
;

16304 
GLEW_FUN_EXPORT
 
PFNGLENABLEVERTEXARRAYEXTPROC
 
	g__gÀwE«bÀVîãxAºayEXT
;

16305 
GLEW_FUN_EXPORT
 
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
 
	g__gÀwFlushM≠≥dNamedBuf„rR™geEXT
;

16306 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
 
	g__gÀwFømebuf„rDøwBuf„rEXT
;

16307 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
 
	g__gÀwFømebuf„rDøwBuf„rsEXT
;

16308 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERREADBUFFEREXTPROC
 
	g__gÀwFømebuf„rRódBuf„rEXT
;

16309 
GLEW_FUN_EXPORT
 
PFNGLGENERATEMULTITEXMIPMAPEXTPROC
 
	g__gÀwGíî©eMu…iTexMùm≠EXT
;

16310 
GLEW_FUN_EXPORT
 
PFNGLGENERATETEXTUREMIPMAPEXTPROC
 
	g__gÀwGíî©eTextuªMùm≠EXT
;

16311 
GLEW_FUN_EXPORT
 
PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
 
	g__gÀwGëCom¥es£dMu…iTexImageEXT
;

16312 
GLEW_FUN_EXPORT
 
PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
 
	g__gÀwGëCom¥es£dTextuªImageEXT
;

16313 
GLEW_FUN_EXPORT
 
PFNGLGETDOUBLEINDEXEDVEXTPROC
 
	g__gÀwGëDoubÀIndexedvEXT
;

16314 
GLEW_FUN_EXPORT
 
PFNGLGETDOUBLEI_VEXTPROC
 
	g__gÀwGëDoubÀi_vEXT
;

16315 
GLEW_FUN_EXPORT
 
PFNGLGETFLOATINDEXEDVEXTPROC
 
	g__gÀwGëFlﬂtIndexedvEXT
;

16316 
GLEW_FUN_EXPORT
 
PFNGLGETFLOATI_VEXTPROC
 
	g__gÀwGëFlﬂti_vEXT
;

16317 
GLEW_FUN_EXPORT
 
PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
 
	g__gÀwGëFømebuf„rP¨amëîivEXT
;

16318 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXENVFVEXTPROC
 
	g__gÀwGëMu…iTexEnvfvEXT
;

16319 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXENVIVEXTPROC
 
	g__gÀwGëMu…iTexEnvivEXT
;

16320 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXGENDVEXTPROC
 
	g__gÀwGëMu…iTexGídvEXT
;

16321 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXGENFVEXTPROC
 
	g__gÀwGëMu…iTexGífvEXT
;

16322 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXGENIVEXTPROC
 
	g__gÀwGëMu…iTexGíivEXT
;

16323 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXIMAGEEXTPROC
 
	g__gÀwGëMu…iTexImageEXT
;

16324 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
 
	g__gÀwGëMu…iTexLevñP¨amëîfvEXT
;

16325 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
 
	g__gÀwGëMu…iTexLevñP¨amëîivEXT
;

16326 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXPARAMETERIIVEXTPROC
 
	g__gÀwGëMu…iTexP¨amëîIivEXT
;

16327 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXPARAMETERIUIVEXTPROC
 
	g__gÀwGëMu…iTexP¨amëîIuivEXT
;

16328 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXPARAMETERFVEXTPROC
 
	g__gÀwGëMu…iTexP¨amëîfvEXT
;

16329 
GLEW_FUN_EXPORT
 
PFNGLGETMULTITEXPARAMETERIVEXTPROC
 
	g__gÀwGëMu…iTexP¨amëîivEXT
;

16330 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
 
	g__gÀwGëNamedBuf„rP¨amëîivEXT
;

16331 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDBUFFERPOINTERVEXTPROC
 
	g__gÀwGëNamedBuf„rPoöãrvEXT
;

16332 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDBUFFERSUBDATAEXTPROC
 
	g__gÀwGëNamedBuf„rSubD©aEXT
;

16333 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
 
	g__gÀwGëNamedFømebuf„rAâachmítP¨amëîivEXT
;

16334 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
 
	g__gÀwGëNamedProgømLoˇlP¨amëîIivEXT
;

16335 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
 
	g__gÀwGëNamedProgømLoˇlP¨amëîIuivEXT
;

16336 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
 
	g__gÀwGëNamedProgømLoˇlP¨amëîdvEXT
;

16337 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
 
	g__gÀwGëNamedProgømLoˇlP¨amëîfvEXT
;

16338 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDPROGRAMSTRINGEXTPROC
 
	g__gÀwGëNamedProgømSåögEXT
;

16339 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDPROGRAMIVEXTPROC
 
	g__gÀwGëNamedProgømivEXT
;

16340 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
 
	g__gÀwGëNamedRídîbuf„rP¨amëîivEXT
;

16341 
GLEW_FUN_EXPORT
 
PFNGLGETPOINTERINDEXEDVEXTPROC
 
	g__gÀwGëPoöãrIndexedvEXT
;

16342 
GLEW_FUN_EXPORT
 
PFNGLGETPOINTERI_VEXTPROC
 
	g__gÀwGëPoöãri_vEXT
;

16343 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTUREIMAGEEXTPROC
 
	g__gÀwGëTextuªImageEXT
;

16344 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
 
	g__gÀwGëTextuªLevñP¨amëîfvEXT
;

16345 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
 
	g__gÀwGëTextuªLevñP¨amëîivEXT
;

16346 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTUREPARAMETERIIVEXTPROC
 
	g__gÀwGëTextuªP¨amëîIivEXT
;

16347 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTUREPARAMETERIUIVEXTPROC
 
	g__gÀwGëTextuªP¨amëîIuivEXT
;

16348 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTUREPARAMETERFVEXTPROC
 
	g__gÀwGëTextuªP¨amëîfvEXT
;

16349 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTUREPARAMETERIVEXTPROC
 
	g__gÀwGëTextuªP¨amëîivEXT
;

16350 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC
 
	g__gÀwGëVîãxAºayI¡egîi_vEXT
;

16351 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXARRAYINTEGERVEXTPROC
 
	g__gÀwGëVîãxAºayI¡egîvEXT
;

16352 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC
 
	g__gÀwGëVîãxAºayPoöãri_vEXT
;

16353 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXARRAYPOINTERVEXTPROC
 
	g__gÀwGëVîãxAºayPoöãrvEXT
;

16354 
GLEW_FUN_EXPORT
 
PFNGLMAPNAMEDBUFFEREXTPROC
 
	g__gÀwM≠NamedBuf„rEXT
;

16355 
GLEW_FUN_EXPORT
 
PFNGLMAPNAMEDBUFFERRANGEEXTPROC
 
	g__gÀwM≠NamedBuf„rR™geEXT
;

16356 
GLEW_FUN_EXPORT
 
PFNGLMATRIXFRUSTUMEXTPROC
 
	g__gÀwM©rixFru°umEXT
;

16357 
GLEW_FUN_EXPORT
 
PFNGLMATRIXLOADIDENTITYEXTPROC
 
	g__gÀwM©rixLﬂdIdítôyEXT
;

16358 
GLEW_FUN_EXPORT
 
PFNGLMATRIXLOADTRANSPOSEDEXTPROC
 
	g__gÀwM©rixLﬂdTøn•o£dEXT
;

16359 
GLEW_FUN_EXPORT
 
PFNGLMATRIXLOADTRANSPOSEFEXTPROC
 
	g__gÀwM©rixLﬂdTøn•o£fEXT
;

16360 
GLEW_FUN_EXPORT
 
PFNGLMATRIXLOADDEXTPROC
 
	g__gÀwM©rixLﬂddEXT
;

16361 
GLEW_FUN_EXPORT
 
PFNGLMATRIXLOADFEXTPROC
 
	g__gÀwM©rixLﬂdfEXT
;

16362 
GLEW_FUN_EXPORT
 
PFNGLMATRIXMULTTRANSPOSEDEXTPROC
 
	g__gÀwM©rixMu…Tøn•o£dEXT
;

16363 
GLEW_FUN_EXPORT
 
PFNGLMATRIXMULTTRANSPOSEFEXTPROC
 
	g__gÀwM©rixMu…Tøn•o£fEXT
;

16364 
GLEW_FUN_EXPORT
 
PFNGLMATRIXMULTDEXTPROC
 
	g__gÀwM©rixMu…dEXT
;

16365 
GLEW_FUN_EXPORT
 
PFNGLMATRIXMULTFEXTPROC
 
	g__gÀwM©rixMu…fEXT
;

16366 
GLEW_FUN_EXPORT
 
PFNGLMATRIXORTHOEXTPROC
 
	g__gÀwM©rixOπhoEXT
;

16367 
GLEW_FUN_EXPORT
 
PFNGLMATRIXPOPEXTPROC
 
	g__gÀwM©rixP›EXT
;

16368 
GLEW_FUN_EXPORT
 
PFNGLMATRIXPUSHEXTPROC
 
	g__gÀwM©rixPushEXT
;

16369 
GLEW_FUN_EXPORT
 
PFNGLMATRIXROTATEDEXTPROC
 
	g__gÀwM©rixRŸ©edEXT
;

16370 
GLEW_FUN_EXPORT
 
PFNGLMATRIXROTATEFEXTPROC
 
	g__gÀwM©rixRŸ©efEXT
;

16371 
GLEW_FUN_EXPORT
 
PFNGLMATRIXSCALEDEXTPROC
 
	g__gÀwM©rixSˇÀdEXT
;

16372 
GLEW_FUN_EXPORT
 
PFNGLMATRIXSCALEFEXTPROC
 
	g__gÀwM©rixSˇÀfEXT
;

16373 
GLEW_FUN_EXPORT
 
PFNGLMATRIXTRANSLATEDEXTPROC
 
	g__gÀwM©rixTøn¶©edEXT
;

16374 
GLEW_FUN_EXPORT
 
PFNGLMATRIXTRANSLATEFEXTPROC
 
	g__gÀwM©rixTøn¶©efEXT
;

16375 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXBUFFEREXTPROC
 
	g__gÀwMu…iTexBuf„rEXT
;

16376 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORDPOINTEREXTPROC
 
	g__gÀwMu…iTexCo‹dPoöãrEXT
;

16377 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXENVFEXTPROC
 
	g__gÀwMu…iTexEnvfEXT
;

16378 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXENVFVEXTPROC
 
	g__gÀwMu…iTexEnvfvEXT
;

16379 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXENVIEXTPROC
 
	g__gÀwMu…iTexEnviEXT
;

16380 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXENVIVEXTPROC
 
	g__gÀwMu…iTexEnvivEXT
;

16381 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXGENDEXTPROC
 
	g__gÀwMu…iTexGídEXT
;

16382 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXGENDVEXTPROC
 
	g__gÀwMu…iTexGídvEXT
;

16383 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXGENFEXTPROC
 
	g__gÀwMu…iTexGífEXT
;

16384 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXGENFVEXTPROC
 
	g__gÀwMu…iTexGífvEXT
;

16385 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXGENIEXTPROC
 
	g__gÀwMu…iTexGíiEXT
;

16386 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXGENIVEXTPROC
 
	g__gÀwMu…iTexGíivEXT
;

16387 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXIMAGE1DEXTPROC
 
	g__gÀwMu…iTexImage1DEXT
;

16388 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXIMAGE2DEXTPROC
 
	g__gÀwMu…iTexImage2DEXT
;

16389 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXIMAGE3DEXTPROC
 
	g__gÀwMu…iTexImage3DEXT
;

16390 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXPARAMETERIIVEXTPROC
 
	g__gÀwMu…iTexP¨amëîIivEXT
;

16391 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXPARAMETERIUIVEXTPROC
 
	g__gÀwMu…iTexP¨amëîIuivEXT
;

16392 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXPARAMETERFEXTPROC
 
	g__gÀwMu…iTexP¨amëîfEXT
;

16393 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXPARAMETERFVEXTPROC
 
	g__gÀwMu…iTexP¨amëîfvEXT
;

16394 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXPARAMETERIEXTPROC
 
	g__gÀwMu…iTexP¨amëîiEXT
;

16395 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXPARAMETERIVEXTPROC
 
	g__gÀwMu…iTexP¨amëîivEXT
;

16396 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXRENDERBUFFEREXTPROC
 
	g__gÀwMu…iTexRídîbuf„rEXT
;

16397 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXSUBIMAGE1DEXTPROC
 
	g__gÀwMu…iTexSubImage1DEXT
;

16398 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXSUBIMAGE2DEXTPROC
 
	g__gÀwMu…iTexSubImage2DEXT
;

16399 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXSUBIMAGE3DEXTPROC
 
	g__gÀwMu…iTexSubImage3DEXT
;

16400 
GLEW_FUN_EXPORT
 
PFNGLNAMEDBUFFERDATAEXTPROC
 
	g__gÀwNamedBuf„rD©aEXT
;

16401 
GLEW_FUN_EXPORT
 
PFNGLNAMEDBUFFERSUBDATAEXTPROC
 
	g__gÀwNamedBuf„rSubD©aEXT
;

16402 
GLEW_FUN_EXPORT
 
PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
 
	g__gÀwNamedC›yBuf„rSubD©aEXT
;

16403 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
 
	g__gÀwNamedFømebuf„rRídîbuf„rEXT
;

16404 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
 
	g__gÀwNamedFømebuf„rTextuª1DEXT
;

16405 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
 
	g__gÀwNamedFømebuf„rTextuª2DEXT
;

16406 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
 
	g__gÀwNamedFømebuf„rTextuª3DEXT
;

16407 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
 
	g__gÀwNamedFømebuf„rTextuªEXT
;

16408 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
 
	g__gÀwNamedFømebuf„rTextuªFa˚EXT
;

16409 
GLEW_FUN_EXPORT
 
PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
 
	g__gÀwNamedFømebuf„rTextuªLayîEXT
;

16410 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëî4dEXT
;

16411 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëî4dvEXT
;

16412 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëî4fEXT
;

16413 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëî4fvEXT
;

16414 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîI4iEXT
;

16415 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîI4ivEXT
;

16416 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîI4uiEXT
;

16417 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîI4uivEXT
;

16418 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîs4fvEXT
;

16419 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîsI4ivEXT
;

16420 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
 
	g__gÀwNamedProgømLoˇlP¨amëîsI4uivEXT
;

16421 
GLEW_FUN_EXPORT
 
PFNGLNAMEDPROGRAMSTRINGEXTPROC
 
	g__gÀwNamedProgømSåögEXT
;

16422 
GLEW_FUN_EXPORT
 
PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
 
	g__gÀwNamedRídîbuf„rSt‹ageEXT
;

16423 
GLEW_FUN_EXPORT
 
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
 
	g__gÀwNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
;

16424 
GLEW_FUN_EXPORT
 
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
 
	g__gÀwNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
;

16425 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1FEXTPROC
 
	g__gÀwProgømUnif‹m1fEXT
;

16426 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1FVEXTPROC
 
	g__gÀwProgømUnif‹m1fvEXT
;

16427 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1IEXTPROC
 
	g__gÀwProgømUnif‹m1iEXT
;

16428 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1IVEXTPROC
 
	g__gÀwProgømUnif‹m1ivEXT
;

16429 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1UIEXTPROC
 
	g__gÀwProgømUnif‹m1uiEXT
;

16430 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1UIVEXTPROC
 
	g__gÀwProgømUnif‹m1uivEXT
;

16431 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2FEXTPROC
 
	g__gÀwProgømUnif‹m2fEXT
;

16432 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2FVEXTPROC
 
	g__gÀwProgømUnif‹m2fvEXT
;

16433 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2IEXTPROC
 
	g__gÀwProgømUnif‹m2iEXT
;

16434 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2IVEXTPROC
 
	g__gÀwProgømUnif‹m2ivEXT
;

16435 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2UIEXTPROC
 
	g__gÀwProgømUnif‹m2uiEXT
;

16436 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2UIVEXTPROC
 
	g__gÀwProgømUnif‹m2uivEXT
;

16437 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3FEXTPROC
 
	g__gÀwProgømUnif‹m3fEXT
;

16438 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3FVEXTPROC
 
	g__gÀwProgømUnif‹m3fvEXT
;

16439 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3IEXTPROC
 
	g__gÀwProgømUnif‹m3iEXT
;

16440 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3IVEXTPROC
 
	g__gÀwProgømUnif‹m3ivEXT
;

16441 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3UIEXTPROC
 
	g__gÀwProgømUnif‹m3uiEXT
;

16442 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3UIVEXTPROC
 
	g__gÀwProgømUnif‹m3uivEXT
;

16443 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4FEXTPROC
 
	g__gÀwProgømUnif‹m4fEXT
;

16444 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4FVEXTPROC
 
	g__gÀwProgømUnif‹m4fvEXT
;

16445 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4IEXTPROC
 
	g__gÀwProgømUnif‹m4iEXT
;

16446 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4IVEXTPROC
 
	g__gÀwProgømUnif‹m4ivEXT
;

16447 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4UIEXTPROC
 
	g__gÀwProgømUnif‹m4uiEXT
;

16448 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4UIVEXTPROC
 
	g__gÀwProgømUnif‹m4uivEXT
;

16449 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix2fvEXT
;

16450 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix2x3fvEXT
;

16451 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix2x4fvEXT
;

16452 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix3fvEXT
;

16453 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix3x2fvEXT
;

16454 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix3x4fvEXT
;

16455 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix4fvEXT
;

16456 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix4x2fvEXT
;

16457 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
 
	g__gÀwProgømUnif‹mM©rix4x3fvEXT
;

16458 
GLEW_FUN_EXPORT
 
PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
 
	g__gÀwPushClõ¡AâribDeÁu…EXT
;

16459 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREBUFFEREXTPROC
 
	g__gÀwTextuªBuf„rEXT
;

16460 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE1DEXTPROC
 
	g__gÀwTextuªImage1DEXT
;

16461 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE2DEXTPROC
 
	g__gÀwTextuªImage2DEXT
;

16462 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE3DEXTPROC
 
	g__gÀwTextuªImage3DEXT
;

16463 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREPARAMETERIIVEXTPROC
 
	g__gÀwTextuªP¨amëîIivEXT
;

16464 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREPARAMETERIUIVEXTPROC
 
	g__gÀwTextuªP¨amëîIuivEXT
;

16465 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREPARAMETERFEXTPROC
 
	g__gÀwTextuªP¨amëîfEXT
;

16466 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREPARAMETERFVEXTPROC
 
	g__gÀwTextuªP¨amëîfvEXT
;

16467 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREPARAMETERIEXTPROC
 
	g__gÀwTextuªP¨amëîiEXT
;

16468 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREPARAMETERIVEXTPROC
 
	g__gÀwTextuªP¨amëîivEXT
;

16469 
GLEW_FUN_EXPORT
 
PFNGLTEXTURERENDERBUFFEREXTPROC
 
	g__gÀwTextuªRídîbuf„rEXT
;

16470 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESUBIMAGE1DEXTPROC
 
	g__gÀwTextuªSubImage1DEXT
;

16471 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESUBIMAGE2DEXTPROC
 
	g__gÀwTextuªSubImage2DEXT
;

16472 
GLEW_FUN_EXPORT
 
PFNGLTEXTURESUBIMAGE3DEXTPROC
 
	g__gÀwTextuªSubImage3DEXT
;

16473 
GLEW_FUN_EXPORT
 
PFNGLUNMAPNAMEDBUFFEREXTPROC
 
	g__gÀwUnm≠NamedBuf„rEXT
;

16474 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYCOLOROFFSETEXTPROC
 
	g__gÀwVîãxAºayCﬁ‹Off£tEXT
;

16475 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC
 
	g__gÀwVîãxAºayEdgeFœgOff£tEXT
;

16476 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC
 
	g__gÀwVîãxAºayFogCo‹dOff£tEXT
;

16477 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYINDEXOFFSETEXTPROC
 
	g__gÀwVîãxAºayIndexOff£tEXT
;

16478 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC
 
	g__gÀwVîãxAºayMu…iTexCo‹dOff£tEXT
;

16479 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYNORMALOFFSETEXTPROC
 
	g__gÀwVîãxAºayN‹mÆOff£tEXT
;

16480 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC
 
	g__gÀwVîãxAºaySec⁄d¨yCﬁ‹Off£tEXT
;

16481 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC
 
	g__gÀwVîãxAºayTexCo‹dOff£tEXT
;

16482 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC
 
	g__gÀwVîãxAºayVîãxAâribIOff£tEXT
;

16483 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC
 
	g__gÀwVîãxAºayVîãxAâribOff£tEXT
;

16484 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC
 
	g__gÀwVîãxAºayVîãxOff£tEXT
;

16486 
GLEW_FUN_EXPORT
 
PFNGLCOLORMASKINDEXEDEXTPROC
 
	g__gÀwCﬁ‹MaskIndexedEXT
;

16487 
GLEW_FUN_EXPORT
 
PFNGLDISABLEINDEXEDEXTPROC
 
	g__gÀwDißbÀIndexedEXT
;

16488 
GLEW_FUN_EXPORT
 
PFNGLENABLEINDEXEDEXTPROC
 
	g__gÀwE«bÀIndexedEXT
;

16489 
GLEW_FUN_EXPORT
 
PFNGLGETBOOLEANINDEXEDVEXTPROC
 
	g__gÀwGëBoﬁónIndexedvEXT
;

16490 
GLEW_FUN_EXPORT
 
PFNGLGETINTEGERINDEXEDVEXTPROC
 
	g__gÀwGëI¡egîIndexedvEXT
;

16491 
GLEW_FUN_EXPORT
 
PFNGLISENABLEDINDEXEDEXTPROC
 
	g__gÀwIsE«bÀdIndexedEXT
;

16493 
GLEW_FUN_EXPORT
 
PFNGLDRAWARRAYSINSTANCEDEXTPROC
 
	g__gÀwDøwAºaysIn°™˚dEXT
;

16494 
GLEW_FUN_EXPORT
 
PFNGLDRAWELEMENTSINSTANCEDEXTPROC
 
	g__gÀwDøwEÀmítsIn°™˚dEXT
;

16496 
GLEW_FUN_EXPORT
 
PFNGLDRAWRANGEELEMENTSEXTPROC
 
	g__gÀwDøwR™geEÀmítsEXT
;

16498 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDPOINTEREXTPROC
 
	g__gÀwFogCo‹dPoöãrEXT
;

16499 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDDEXTPROC
 
	g__gÀwFogCo‹ddEXT
;

16500 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDDVEXTPROC
 
	g__gÀwFogCo‹ddvEXT
;

16501 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDFEXTPROC
 
	g__gÀwFogCo‹dfEXT
;

16502 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDFVEXTPROC
 
	g__gÀwFogCo‹dfvEXT
;

16504 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTCOLORMATERIALEXTPROC
 
	g__gÀwFøgmítCﬁ‹M©îülEXT
;

16505 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELFEXTPROC
 
	g__gÀwFøgmítLightModñfEXT
;

16506 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELFVEXTPROC
 
	g__gÀwFøgmítLightModñfvEXT
;

16507 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELIEXTPROC
 
	g__gÀwFøgmítLightModñiEXT
;

16508 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELIVEXTPROC
 
	g__gÀwFøgmítLightModñivEXT
;

16509 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTFEXTPROC
 
	g__gÀwFøgmítLightfEXT
;

16510 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTFVEXTPROC
 
	g__gÀwFøgmítLightfvEXT
;

16511 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTIEXTPROC
 
	g__gÀwFøgmítLightiEXT
;

16512 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTIVEXTPROC
 
	g__gÀwFøgmítLightivEXT
;

16513 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALFEXTPROC
 
	g__gÀwFøgmítM©îülfEXT
;

16514 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALFVEXTPROC
 
	g__gÀwFøgmítM©îülfvEXT
;

16515 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALIEXTPROC
 
	g__gÀwFøgmítM©îüliEXT
;

16516 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALIVEXTPROC
 
	g__gÀwFøgmítM©îülivEXT
;

16517 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTLIGHTFVEXTPROC
 
	g__gÀwGëFøgmítLightfvEXT
;

16518 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTLIGHTIVEXTPROC
 
	g__gÀwGëFøgmítLightivEXT
;

16519 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTMATERIALFVEXTPROC
 
	g__gÀwGëFøgmítM©îülfvEXT
;

16520 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTMATERIALIVEXTPROC
 
	g__gÀwGëFøgmítM©îülivEXT
;

16521 
GLEW_FUN_EXPORT
 
PFNGLLIGHTENVIEXTPROC
 
	g__gÀwLightEnviEXT
;

16523 
GLEW_FUN_EXPORT
 
PFNGLBLITFRAMEBUFFEREXTPROC
 
	g__gÀwBlôFømebuf„rEXT
;

16525 
GLEW_FUN_EXPORT
 
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
 
	g__gÀwRídîbuf„rSt‹ageMu…ißm∂eEXT
;

16527 
GLEW_FUN_EXPORT
 
PFNGLBINDFRAMEBUFFEREXTPROC
 
	g__gÀwBödFømebuf„rEXT
;

16528 
GLEW_FUN_EXPORT
 
PFNGLBINDRENDERBUFFEREXTPROC
 
	g__gÀwBödRídîbuf„rEXT
;

16529 
GLEW_FUN_EXPORT
 
PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
 
	g__gÀwCheckFømebuf„rSètusEXT
;

16530 
GLEW_FUN_EXPORT
 
PFNGLDELETEFRAMEBUFFERSEXTPROC
 
	g__gÀwDñëeFømebuf„rsEXT
;

16531 
GLEW_FUN_EXPORT
 
PFNGLDELETERENDERBUFFERSEXTPROC
 
	g__gÀwDñëeRídîbuf„rsEXT
;

16532 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
 
	g__gÀwFømebuf„rRídîbuf„rEXT
;

16533 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURE1DEXTPROC
 
	g__gÀwFømebuf„rTextuª1DEXT
;

16534 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURE2DEXTPROC
 
	g__gÀwFømebuf„rTextuª2DEXT
;

16535 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURE3DEXTPROC
 
	g__gÀwFømebuf„rTextuª3DEXT
;

16536 
GLEW_FUN_EXPORT
 
PFNGLGENFRAMEBUFFERSEXTPROC
 
	g__gÀwGíFømebuf„rsEXT
;

16537 
GLEW_FUN_EXPORT
 
PFNGLGENRENDERBUFFERSEXTPROC
 
	g__gÀwGíRídîbuf„rsEXT
;

16538 
GLEW_FUN_EXPORT
 
PFNGLGENERATEMIPMAPEXTPROC
 
	g__gÀwGíî©eMùm≠EXT
;

16539 
GLEW_FUN_EXPORT
 
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
 
	g__gÀwGëFømebuf„rAâachmítP¨amëîivEXT
;

16540 
GLEW_FUN_EXPORT
 
PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
 
	g__gÀwGëRídîbuf„rP¨amëîivEXT
;

16541 
GLEW_FUN_EXPORT
 
PFNGLISFRAMEBUFFEREXTPROC
 
	g__gÀwIsFømebuf„rEXT
;

16542 
GLEW_FUN_EXPORT
 
PFNGLISRENDERBUFFEREXTPROC
 
	g__gÀwIsRídîbuf„rEXT
;

16543 
GLEW_FUN_EXPORT
 
PFNGLRENDERBUFFERSTORAGEEXTPROC
 
	g__gÀwRídîbuf„rSt‹ageEXT
;

16545 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTUREEXTPROC
 
	g__gÀwFømebuf„rTextuªEXT
;

16546 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
 
	g__gÀwFømebuf„rTextuªFa˚EXT
;

16547 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETERIEXTPROC
 
	g__gÀwProgømP¨amëîiEXT
;

16549 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERS4FVEXTPROC
 
	g__gÀwProgømEnvP¨amëîs4fvEXT
;

16550 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
 
	g__gÀwProgømLoˇlP¨amëîs4fvEXT
;

16552 
GLEW_FUN_EXPORT
 
PFNGLBINDFRAGDATALOCATIONEXTPROC
 
	g__gÀwBödFøgD©aLoˇti⁄EXT
;

16553 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGDATALOCATIONEXTPROC
 
	g__gÀwGëFøgD©aLoˇti⁄EXT
;

16554 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMUIVEXTPROC
 
	g__gÀwGëUnif‹muivEXT
;

16555 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIIVEXTPROC
 
	g__gÀwGëVîãxAâribIivEXT
;

16556 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIUIVEXTPROC
 
	g__gÀwGëVîãxAâribIuivEXT
;

16557 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1UIEXTPROC
 
	g__gÀwUnif‹m1uiEXT
;

16558 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1UIVEXTPROC
 
	g__gÀwUnif‹m1uivEXT
;

16559 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2UIEXTPROC
 
	g__gÀwUnif‹m2uiEXT
;

16560 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2UIVEXTPROC
 
	g__gÀwUnif‹m2uivEXT
;

16561 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3UIEXTPROC
 
	g__gÀwUnif‹m3uiEXT
;

16562 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3UIVEXTPROC
 
	g__gÀwUnif‹m3uivEXT
;

16563 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4UIEXTPROC
 
	g__gÀwUnif‹m4uiEXT
;

16564 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4UIVEXTPROC
 
	g__gÀwUnif‹m4uivEXT
;

16565 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1IEXTPROC
 
	g__gÀwVîãxAâribI1iEXT
;

16566 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1IVEXTPROC
 
	g__gÀwVîãxAâribI1ivEXT
;

16567 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1UIEXTPROC
 
	g__gÀwVîãxAâribI1uiEXT
;

16568 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI1UIVEXTPROC
 
	g__gÀwVîãxAâribI1uivEXT
;

16569 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2IEXTPROC
 
	g__gÀwVîãxAâribI2iEXT
;

16570 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2IVEXTPROC
 
	g__gÀwVîãxAâribI2ivEXT
;

16571 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2UIEXTPROC
 
	g__gÀwVîãxAâribI2uiEXT
;

16572 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI2UIVEXTPROC
 
	g__gÀwVîãxAâribI2uivEXT
;

16573 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3IEXTPROC
 
	g__gÀwVîãxAâribI3iEXT
;

16574 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3IVEXTPROC
 
	g__gÀwVîãxAâribI3ivEXT
;

16575 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3UIEXTPROC
 
	g__gÀwVîãxAâribI3uiEXT
;

16576 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI3UIVEXTPROC
 
	g__gÀwVîãxAâribI3uivEXT
;

16577 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4BVEXTPROC
 
	g__gÀwVîãxAâribI4bvEXT
;

16578 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4IEXTPROC
 
	g__gÀwVîãxAâribI4iEXT
;

16579 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4IVEXTPROC
 
	g__gÀwVîãxAâribI4ivEXT
;

16580 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4SVEXTPROC
 
	g__gÀwVîãxAâribI4svEXT
;

16581 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4UBVEXTPROC
 
	g__gÀwVîãxAâribI4ubvEXT
;

16582 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4UIEXTPROC
 
	g__gÀwVîãxAâribI4uiEXT
;

16583 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4UIVEXTPROC
 
	g__gÀwVîãxAâribI4uivEXT
;

16584 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBI4USVEXTPROC
 
	g__gÀwVîãxAâribI4usvEXT
;

16585 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBIPOINTEREXTPROC
 
	g__gÀwVîãxAâribIPoöãrEXT
;

16587 
GLEW_FUN_EXPORT
 
PFNGLGETHISTOGRAMEXTPROC
 
	g__gÀwGëHi°ogømEXT
;

16588 
GLEW_FUN_EXPORT
 
PFNGLGETHISTOGRAMPARAMETERFVEXTPROC
 
	g__gÀwGëHi°ogømP¨amëîfvEXT
;

16589 
GLEW_FUN_EXPORT
 
PFNGLGETHISTOGRAMPARAMETERIVEXTPROC
 
	g__gÀwGëHi°ogømP¨amëîivEXT
;

16590 
GLEW_FUN_EXPORT
 
PFNGLGETMINMAXEXTPROC
 
	g__gÀwGëMömaxEXT
;

16591 
GLEW_FUN_EXPORT
 
PFNGLGETMINMAXPARAMETERFVEXTPROC
 
	g__gÀwGëMömaxP¨amëîfvEXT
;

16592 
GLEW_FUN_EXPORT
 
PFNGLGETMINMAXPARAMETERIVEXTPROC
 
	g__gÀwGëMömaxP¨amëîivEXT
;

16593 
GLEW_FUN_EXPORT
 
PFNGLHISTOGRAMEXTPROC
 
	g__gÀwHi°ogømEXT
;

16594 
GLEW_FUN_EXPORT
 
PFNGLMINMAXEXTPROC
 
	g__gÀwMömaxEXT
;

16595 
GLEW_FUN_EXPORT
 
PFNGLRESETHISTOGRAMEXTPROC
 
	g__gÀwRe£tHi°ogømEXT
;

16596 
GLEW_FUN_EXPORT
 
PFNGLRESETMINMAXEXTPROC
 
	g__gÀwRe£tMömaxEXT
;

16598 
GLEW_FUN_EXPORT
 
PFNGLINDEXFUNCEXTPROC
 
	g__gÀwIndexFuncEXT
;

16600 
GLEW_FUN_EXPORT
 
PFNGLINDEXMATERIALEXTPROC
 
	g__gÀwIndexM©îülEXT
;

16602 
GLEW_FUN_EXPORT
 
PFNGLAPPLYTEXTUREEXTPROC
 
	g__gÀwAµlyTextuªEXT
;

16603 
GLEW_FUN_EXPORT
 
PFNGLTEXTURELIGHTEXTPROC
 
	g__gÀwTextuªLightEXT
;

16604 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREMATERIALEXTPROC
 
	g__gÀwTextuªM©îülEXT
;

16606 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWARRAYSEXTPROC
 
	g__gÀwMu…iDøwAºaysEXT
;

16607 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTSEXTPROC
 
	g__gÀwMu…iDøwEÀmítsEXT
;

16609 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEMASKEXTPROC
 
	g__gÀwSam∂eMaskEXT
;

16610 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEPATTERNEXTPROC
 
	g__gÀwSam∂eP©ã∫EXT
;

16612 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLEEXTPROC
 
	g__gÀwCﬁ‹TabÀEXT
;

16613 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEEXTPROC
 
	g__gÀwGëCﬁ‹TabÀEXT
;

16614 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPARAMETERFVEXTPROC
 
	g__gÀwGëCﬁ‹TabÀP¨amëîfvEXT
;

16615 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPARAMETERIVEXTPROC
 
	g__gÀwGëCﬁ‹TabÀP¨amëîivEXT
;

16617 
GLEW_FUN_EXPORT
 
PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
 
	g__gÀwGëPixñTønsf‹mP¨amëîfvEXT
;

16618 
GLEW_FUN_EXPORT
 
PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
 
	g__gÀwGëPixñTønsf‹mP¨amëîivEXT
;

16619 
GLEW_FUN_EXPORT
 
PFNGLPIXELTRANSFORMPARAMETERFEXTPROC
 
	g__gÀwPixñTønsf‹mP¨amëîfEXT
;

16620 
GLEW_FUN_EXPORT
 
PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
 
	g__gÀwPixñTønsf‹mP¨amëîfvEXT
;

16621 
GLEW_FUN_EXPORT
 
PFNGLPIXELTRANSFORMPARAMETERIEXTPROC
 
	g__gÀwPixñTønsf‹mP¨amëîiEXT
;

16622 
GLEW_FUN_EXPORT
 
PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
 
	g__gÀwPixñTønsf‹mP¨amëîivEXT
;

16624 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERFEXTPROC
 
	g__gÀwPoötP¨amëîfEXT
;

16625 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERFVEXTPROC
 
	g__gÀwPoötP¨amëîfvEXT
;

16627 
GLEW_FUN_EXPORT
 
PFNGLPOLYGONOFFSETEXTPROC
 
	g__gÀwPﬁyg⁄Off£tEXT
;

16629 
GLEW_FUN_EXPORT
 
PFNGLPROVOKINGVERTEXEXTPROC
 
	g__gÀwProvokögVîãxEXT
;

16631 
GLEW_FUN_EXPORT
 
PFNGLBEGINSCENEEXTPROC
 
	g__gÀwBegöS˚√EXT
;

16632 
GLEW_FUN_EXPORT
 
PFNGLENDSCENEEXTPROC
 
	g__gÀwEndS˚√EXT
;

16634 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3BEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3bEXT
;

16635 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3BVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3bvEXT
;

16636 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3DEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3dEXT
;

16637 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3DVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3dvEXT
;

16638 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3FEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3fEXT
;

16639 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3FVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3fvEXT
;

16640 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3IEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3iEXT
;

16641 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3IVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3ivEXT
;

16642 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3SEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3sEXT
;

16643 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3SVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3svEXT
;

16644 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UBEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3ubEXT
;

16645 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UBVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3ubvEXT
;

16646 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UIEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3uiEXT
;

16647 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3UIVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3uivEXT
;

16648 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3USEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3usEXT
;

16649 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3USVEXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3usvEXT
;

16650 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLORPOINTEREXTPROC
 
	g__gÀwSec⁄d¨yCﬁ‹PoöãrEXT
;

16652 
GLEW_FUN_EXPORT
 
PFNGLACTIVEPROGRAMEXTPROC
 
	g__gÀwA˘iveProgømEXT
;

16653 
GLEW_FUN_EXPORT
 
PFNGLCREATESHADERPROGRAMEXTPROC
 
	g__gÀwCª©eShadîProgømEXT
;

16654 
GLEW_FUN_EXPORT
 
PFNGLUSESHADERPROGRAMEXTPROC
 
	g__gÀwU£ShadîProgømEXT
;

16656 
GLEW_FUN_EXPORT
 
PFNGLBINDIMAGETEXTUREEXTPROC
 
	g__gÀwBödImageTextuªEXT
;

16657 
GLEW_FUN_EXPORT
 
PFNGLMEMORYBARRIEREXTPROC
 
	g__gÀwMem‹yB¨rõrEXT
;

16659 
GLEW_FUN_EXPORT
 
PFNGLACTIVESTENCILFACEEXTPROC
 
	g__gÀwA˘iveSãncûFa˚EXT
;

16661 
GLEW_FUN_EXPORT
 
PFNGLTEXSUBIMAGE1DEXTPROC
 
	g__gÀwTexSubImage1DEXT
;

16662 
GLEW_FUN_EXPORT
 
PFNGLTEXSUBIMAGE2DEXTPROC
 
	g__gÀwTexSubImage2DEXT
;

16663 
GLEW_FUN_EXPORT
 
PFNGLTEXSUBIMAGE3DEXTPROC
 
	g__gÀwTexSubImage3DEXT
;

16665 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE3DEXTPROC
 
	g__gÀwTexImage3DEXT
;

16667 
GLEW_FUN_EXPORT
 
PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
 
	g__gÀwFømebuf„rTextuªLayîEXT
;

16669 
GLEW_FUN_EXPORT
 
PFNGLTEXBUFFEREXTPROC
 
	g__gÀwTexBuf„rEXT
;

16671 
GLEW_FUN_EXPORT
 
PFNGLCLEARCOLORIIEXTPROC
 
	g__gÀwCÀ¨Cﬁ‹IiEXT
;

16672 
GLEW_FUN_EXPORT
 
PFNGLCLEARCOLORIUIEXTPROC
 
	g__gÀwCÀ¨Cﬁ‹IuiEXT
;

16673 
GLEW_FUN_EXPORT
 
PFNGLGETTEXPARAMETERIIVEXTPROC
 
	g__gÀwGëTexP¨amëîIivEXT
;

16674 
GLEW_FUN_EXPORT
 
PFNGLGETTEXPARAMETERIUIVEXTPROC
 
	g__gÀwGëTexP¨amëîIuivEXT
;

16675 
GLEW_FUN_EXPORT
 
PFNGLTEXPARAMETERIIVEXTPROC
 
	g__gÀwTexP¨amëîIivEXT
;

16676 
GLEW_FUN_EXPORT
 
PFNGLTEXPARAMETERIUIVEXTPROC
 
	g__gÀwTexP¨amëîIuivEXT
;

16678 
GLEW_FUN_EXPORT
 
PFNGLARETEXTURESRESIDENTEXTPROC
 
	g__gÀwAªTextuªsResidítEXT
;

16679 
GLEW_FUN_EXPORT
 
PFNGLBINDTEXTUREEXTPROC
 
	g__gÀwBödTextuªEXT
;

16680 
GLEW_FUN_EXPORT
 
PFNGLDELETETEXTURESEXTPROC
 
	g__gÀwDñëeTextuªsEXT
;

16681 
GLEW_FUN_EXPORT
 
PFNGLGENTEXTURESEXTPROC
 
	g__gÀwGíTextuªsEXT
;

16682 
GLEW_FUN_EXPORT
 
PFNGLISTEXTUREEXTPROC
 
	g__gÀwIsTextuªEXT
;

16683 
GLEW_FUN_EXPORT
 
PFNGLPRIORITIZETEXTURESEXTPROC
 
	g__gÀwPri‹ôizeTextuªsEXT
;

16685 
GLEW_FUN_EXPORT
 
PFNGLTEXTURENORMALEXTPROC
 
	g__gÀwTextuªN‹mÆEXT
;

16687 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTI64VEXTPROC
 
	g__gÀwGëQuîyObje˘i64vEXT
;

16688 
GLEW_FUN_EXPORT
 
PFNGLGETQUERYOBJECTUI64VEXTPROC
 
	g__gÀwGëQuîyObje˘ui64vEXT
;

16690 
GLEW_FUN_EXPORT
 
PFNGLBEGINTRANSFORMFEEDBACKEXTPROC
 
	g__gÀwBegöTønsf‹mFìdbackEXT
;

16691 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERBASEEXTPROC
 
	g__gÀwBödBuf„rBa£EXT
;

16692 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFEROFFSETEXTPROC
 
	g__gÀwBödBuf„rOff£tEXT
;

16693 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERRANGEEXTPROC
 
	g__gÀwBödBuf„rR™geEXT
;

16694 
GLEW_FUN_EXPORT
 
PFNGLENDTRANSFORMFEEDBACKEXTPROC
 
	g__gÀwEndTønsf‹mFìdbackEXT
;

16695 
GLEW_FUN_EXPORT
 
PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
 
	g__gÀwGëTønsf‹mFìdbackV¨yögEXT
;

16696 
GLEW_FUN_EXPORT
 
PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
 
	g__gÀwTønsf‹mFìdbackV¨yögsEXT
;

16698 
GLEW_FUN_EXPORT
 
PFNGLARRAYELEMENTEXTPROC
 
	g__gÀwAºayEÀmítEXT
;

16699 
GLEW_FUN_EXPORT
 
PFNGLCOLORPOINTEREXTPROC
 
	g__gÀwCﬁ‹PoöãrEXT
;

16700 
GLEW_FUN_EXPORT
 
PFNGLDRAWARRAYSEXTPROC
 
	g__gÀwDøwAºaysEXT
;

16701 
GLEW_FUN_EXPORT
 
PFNGLEDGEFLAGPOINTEREXTPROC
 
	g__gÀwEdgeFœgPoöãrEXT
;

16702 
GLEW_FUN_EXPORT
 
PFNGLINDEXPOINTEREXTPROC
 
	g__gÀwIndexPoöãrEXT
;

16703 
GLEW_FUN_EXPORT
 
PFNGLNORMALPOINTEREXTPROC
 
	g__gÀwN‹mÆPoöãrEXT
;

16704 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDPOINTEREXTPROC
 
	g__gÀwTexCo‹dPoöãrEXT
;

16705 
GLEW_FUN_EXPORT
 
PFNGLVERTEXPOINTEREXTPROC
 
	g__gÀwVîãxPoöãrEXT
;

16707 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBLDVEXTPROC
 
	g__gÀwGëVîãxAâribLdvEXT
;

16708 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
 
	g__gÀwVîãxAºayVîãxAâribLOff£tEXT
;

16709 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1DEXTPROC
 
	g__gÀwVîãxAâribL1dEXT
;

16710 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1DVEXTPROC
 
	g__gÀwVîãxAâribL1dvEXT
;

16711 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2DEXTPROC
 
	g__gÀwVîãxAâribL2dEXT
;

16712 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2DVEXTPROC
 
	g__gÀwVîãxAâribL2dvEXT
;

16713 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3DEXTPROC
 
	g__gÀwVîãxAâribL3dEXT
;

16714 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3DVEXTPROC
 
	g__gÀwVîãxAâribL3dvEXT
;

16715 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4DEXTPROC
 
	g__gÀwVîãxAâribL4dEXT
;

16716 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4DVEXTPROC
 
	g__gÀwVîãxAâribL4dvEXT
;

16717 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBLPOINTEREXTPROC
 
	g__gÀwVîãxAâribLPoöãrEXT
;

16719 
GLEW_FUN_EXPORT
 
PFNGLBEGINVERTEXSHADEREXTPROC
 
	g__gÀwBegöVîãxShadîEXT
;

16720 
GLEW_FUN_EXPORT
 
PFNGLBINDLIGHTPARAMETEREXTPROC
 
	g__gÀwBödLightP¨amëîEXT
;

16721 
GLEW_FUN_EXPORT
 
PFNGLBINDMATERIALPARAMETEREXTPROC
 
	g__gÀwBödM©îülP¨amëîEXT
;

16722 
GLEW_FUN_EXPORT
 
PFNGLBINDPARAMETEREXTPROC
 
	g__gÀwBödP¨amëîEXT
;

16723 
GLEW_FUN_EXPORT
 
PFNGLBINDTEXGENPARAMETEREXTPROC
 
	g__gÀwBödTexGíP¨amëîEXT
;

16724 
GLEW_FUN_EXPORT
 
PFNGLBINDTEXTUREUNITPARAMETEREXTPROC
 
	g__gÀwBödTextuªUnôP¨amëîEXT
;

16725 
GLEW_FUN_EXPORT
 
PFNGLBINDVERTEXSHADEREXTPROC
 
	g__gÀwBödVîãxShadîEXT
;

16726 
GLEW_FUN_EXPORT
 
PFNGLDELETEVERTEXSHADEREXTPROC
 
	g__gÀwDñëeVîãxShadîEXT
;

16727 
GLEW_FUN_EXPORT
 
PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
 
	g__gÀwDißbÀV¨ü¡Clõ¡SèãEXT
;

16728 
GLEW_FUN_EXPORT
 
PFNGLENABLEVARIANTCLIENTSTATEEXTPROC
 
	g__gÀwE«bÀV¨ü¡Clõ¡SèãEXT
;

16729 
GLEW_FUN_EXPORT
 
PFNGLENDVERTEXSHADEREXTPROC
 
	g__gÀwEndVîãxShadîEXT
;

16730 
GLEW_FUN_EXPORT
 
PFNGLEXTRACTCOMPONENTEXTPROC
 
	g__gÀwExåa˘Comp⁄ítEXT
;

16731 
GLEW_FUN_EXPORT
 
PFNGLGENSYMBOLSEXTPROC
 
	g__gÀwGíSymbﬁsEXT
;

16732 
GLEW_FUN_EXPORT
 
PFNGLGENVERTEXSHADERSEXTPROC
 
	g__gÀwGíVîãxShadîsEXT
;

16733 
GLEW_FUN_EXPORT
 
PFNGLGETINVARIANTBOOLEANVEXTPROC
 
	g__gÀwGëInv¨ü¡BoﬁónvEXT
;

16734 
GLEW_FUN_EXPORT
 
PFNGLGETINVARIANTFLOATVEXTPROC
 
	g__gÀwGëInv¨ü¡FlﬂtvEXT
;

16735 
GLEW_FUN_EXPORT
 
PFNGLGETINVARIANTINTEGERVEXTPROC
 
	g__gÀwGëInv¨ü¡I¡egîvEXT
;

16736 
GLEW_FUN_EXPORT
 
PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
 
	g__gÀwGëLoˇlC⁄°™tBoﬁónvEXT
;

16737 
GLEW_FUN_EXPORT
 
PFNGLGETLOCALCONSTANTFLOATVEXTPROC
 
	g__gÀwGëLoˇlC⁄°™tFlﬂtvEXT
;

16738 
GLEW_FUN_EXPORT
 
PFNGLGETLOCALCONSTANTINTEGERVEXTPROC
 
	g__gÀwGëLoˇlC⁄°™tI¡egîvEXT
;

16739 
GLEW_FUN_EXPORT
 
PFNGLGETVARIANTBOOLEANVEXTPROC
 
	g__gÀwGëV¨ü¡BoﬁónvEXT
;

16740 
GLEW_FUN_EXPORT
 
PFNGLGETVARIANTFLOATVEXTPROC
 
	g__gÀwGëV¨ü¡FlﬂtvEXT
;

16741 
GLEW_FUN_EXPORT
 
PFNGLGETVARIANTINTEGERVEXTPROC
 
	g__gÀwGëV¨ü¡I¡egîvEXT
;

16742 
GLEW_FUN_EXPORT
 
PFNGLGETVARIANTPOINTERVEXTPROC
 
	g__gÀwGëV¨ü¡PoöãrvEXT
;

16743 
GLEW_FUN_EXPORT
 
PFNGLINSERTCOMPONENTEXTPROC
 
	g__gÀwIn£πComp⁄ítEXT
;

16744 
GLEW_FUN_EXPORT
 
PFNGLISVARIANTENABLEDEXTPROC
 
	g__gÀwIsV¨ü¡E«bÀdEXT
;

16745 
GLEW_FUN_EXPORT
 
PFNGLSETINVARIANTEXTPROC
 
	g__gÀwSëInv¨ü¡EXT
;

16746 
GLEW_FUN_EXPORT
 
PFNGLSETLOCALCONSTANTEXTPROC
 
	g__gÀwSëLoˇlC⁄°™tEXT
;

16747 
GLEW_FUN_EXPORT
 
PFNGLSHADEROP1EXTPROC
 
	g__gÀwShadîOp1EXT
;

16748 
GLEW_FUN_EXPORT
 
PFNGLSHADEROP2EXTPROC
 
	g__gÀwShadîOp2EXT
;

16749 
GLEW_FUN_EXPORT
 
PFNGLSHADEROP3EXTPROC
 
	g__gÀwShadîOp3EXT
;

16750 
GLEW_FUN_EXPORT
 
PFNGLSWIZZLEEXTPROC
 
	g__gÀwSwizzÀEXT
;

16751 
GLEW_FUN_EXPORT
 
PFNGLVARIANTPOINTEREXTPROC
 
	g__gÀwV¨ü¡PoöãrEXT
;

16752 
GLEW_FUN_EXPORT
 
PFNGLVARIANTBVEXTPROC
 
	g__gÀwV¨ü¡bvEXT
;

16753 
GLEW_FUN_EXPORT
 
PFNGLVARIANTDVEXTPROC
 
	g__gÀwV¨ü¡dvEXT
;

16754 
GLEW_FUN_EXPORT
 
PFNGLVARIANTFVEXTPROC
 
	g__gÀwV¨ü¡fvEXT
;

16755 
GLEW_FUN_EXPORT
 
PFNGLVARIANTIVEXTPROC
 
	g__gÀwV¨ü¡ivEXT
;

16756 
GLEW_FUN_EXPORT
 
PFNGLVARIANTSVEXTPROC
 
	g__gÀwV¨ü¡svEXT
;

16757 
GLEW_FUN_EXPORT
 
PFNGLVARIANTUBVEXTPROC
 
	g__gÀwV¨ü¡ubvEXT
;

16758 
GLEW_FUN_EXPORT
 
PFNGLVARIANTUIVEXTPROC
 
	g__gÀwV¨ü¡uivEXT
;

16759 
GLEW_FUN_EXPORT
 
PFNGLVARIANTUSVEXTPROC
 
	g__gÀwV¨ü¡usvEXT
;

16760 
GLEW_FUN_EXPORT
 
PFNGLWRITEMASKEXTPROC
 
	g__gÀwWrôeMaskEXT
;

16762 
GLEW_FUN_EXPORT
 
PFNGLVERTEXWEIGHTPOINTEREXTPROC
 
	g__gÀwVîãxWeightPoöãrEXT
;

16763 
GLEW_FUN_EXPORT
 
PFNGLVERTEXWEIGHTFEXTPROC
 
	g__gÀwVîãxWeightfEXT
;

16764 
GLEW_FUN_EXPORT
 
PFNGLVERTEXWEIGHTFVEXTPROC
 
	g__gÀwVîãxWeightfvEXT
;

16766 
GLEW_FUN_EXPORT
 
PFNGLIMPORTSYNCEXTPROC
 
	g__gÀwImp‹tSyncEXT
;

16768 
GLEW_FUN_EXPORT
 
PFNGLFRAMETERMINATORGREMEDYPROC
 
	g__gÀwFømeTîmö©‹GREMEDY
;

16770 
GLEW_FUN_EXPORT
 
PFNGLSTRINGMARKERGREMEDYPROC
 
	g__gÀwSåögM¨kîGREMEDY
;

16772 
GLEW_FUN_EXPORT
 
PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
 
	g__gÀwGëImageTønsf‹mP¨amëîfvHP
;

16773 
GLEW_FUN_EXPORT
 
PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
 
	g__gÀwGëImageTønsf‹mP¨amëîivHP
;

16774 
GLEW_FUN_EXPORT
 
PFNGLIMAGETRANSFORMPARAMETERFHPPROC
 
	g__gÀwImageTønsf‹mP¨amëîfHP
;

16775 
GLEW_FUN_EXPORT
 
PFNGLIMAGETRANSFORMPARAMETERFVHPPROC
 
	g__gÀwImageTønsf‹mP¨amëîfvHP
;

16776 
GLEW_FUN_EXPORT
 
PFNGLIMAGETRANSFORMPARAMETERIHPPROC
 
	g__gÀwImageTønsf‹mP¨amëîiHP
;

16777 
GLEW_FUN_EXPORT
 
PFNGLIMAGETRANSFORMPARAMETERIVHPPROC
 
	g__gÀwImageTønsf‹mP¨amëîivHP
;

16779 
GLEW_FUN_EXPORT
 
PFNGLMULTIMODEDRAWARRAYSIBMPROC
 
	g__gÀwMu…iModeDøwAºaysIBM
;

16780 
GLEW_FUN_EXPORT
 
PFNGLMULTIMODEDRAWELEMENTSIBMPROC
 
	g__gÀwMu…iModeDøwEÀmítsIBM
;

16782 
GLEW_FUN_EXPORT
 
PFNGLCOLORPOINTERLISTIBMPROC
 
	g__gÀwCﬁ‹PoöãrLi°IBM
;

16783 
GLEW_FUN_EXPORT
 
PFNGLEDGEFLAGPOINTERLISTIBMPROC
 
	g__gÀwEdgeFœgPoöãrLi°IBM
;

16784 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDPOINTERLISTIBMPROC
 
	g__gÀwFogCo‹dPoöãrLi°IBM
;

16785 
GLEW_FUN_EXPORT
 
PFNGLINDEXPOINTERLISTIBMPROC
 
	g__gÀwIndexPoöãrLi°IBM
;

16786 
GLEW_FUN_EXPORT
 
PFNGLNORMALPOINTERLISTIBMPROC
 
	g__gÀwN‹mÆPoöãrLi°IBM
;

16787 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLORPOINTERLISTIBMPROC
 
	g__gÀwSec⁄d¨yCﬁ‹PoöãrLi°IBM
;

16788 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDPOINTERLISTIBMPROC
 
	g__gÀwTexCo‹dPoöãrLi°IBM
;

16789 
GLEW_FUN_EXPORT
 
PFNGLVERTEXPOINTERLISTIBMPROC
 
	g__gÀwVîãxPoöãrLi°IBM
;

16791 
GLEW_FUN_EXPORT
 
PFNGLMAPTEXTURE2DINTELPROC
 
	g__gÀwM≠Textuª2DINTEL
;

16792 
GLEW_FUN_EXPORT
 
PFNGLSYNCTEXTUREINTELPROC
 
	g__gÀwSyncTextuªINTEL
;

16793 
GLEW_FUN_EXPORT
 
PFNGLUNMAPTEXTURE2DINTELPROC
 
	g__gÀwUnm≠Textuª2DINTEL
;

16795 
GLEW_FUN_EXPORT
 
PFNGLCOLORPOINTERVINTELPROC
 
	g__gÀwCﬁ‹PoöãrvINTEL
;

16796 
GLEW_FUN_EXPORT
 
PFNGLNORMALPOINTERVINTELPROC
 
	g__gÀwN‹mÆPoöãrvINTEL
;

16797 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDPOINTERVINTELPROC
 
	g__gÀwTexCo‹dPoöãrvINTEL
;

16798 
GLEW_FUN_EXPORT
 
PFNGLVERTEXPOINTERVINTELPROC
 
	g__gÀwVîãxPoöãrvINTEL
;

16800 
GLEW_FUN_EXPORT
 
PFNGLTEXSCISSORFUNCINTELPROC
 
	g__gÀwTexSciss‹FuncINTEL
;

16801 
GLEW_FUN_EXPORT
 
PFNGLTEXSCISSORINTELPROC
 
	g__gÀwTexSciss‹INTEL
;

16803 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGECALLBACKPROC
 
	g__gÀwDebugMesßgeCÆlback
;

16804 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGECONTROLPROC
 
	g__gÀwDebugMesßgeC⁄åﬁ
;

16805 
GLEW_FUN_EXPORT
 
PFNGLDEBUGMESSAGEINSERTPROC
 
	g__gÀwDebugMesßgeIn£π
;

16806 
GLEW_FUN_EXPORT
 
PFNGLGETDEBUGMESSAGELOGPROC
 
	g__gÀwGëDebugMesßgeLog
;

16807 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTLABELPROC
 
	g__gÀwGëObje˘Labñ
;

16808 
GLEW_FUN_EXPORT
 
PFNGLGETOBJECTPTRLABELPROC
 
	g__gÀwGëObje˘PåLabñ
;

16809 
GLEW_FUN_EXPORT
 
PFNGLOBJECTLABELPROC
 
	g__gÀwObje˘Labñ
;

16810 
GLEW_FUN_EXPORT
 
PFNGLOBJECTPTRLABELPROC
 
	g__gÀwObje˘PåLabñ
;

16811 
GLEW_FUN_EXPORT
 
PFNGLPOPDEBUGGROUPPROC
 
	g__gÀwP›DebugGroup
;

16812 
GLEW_FUN_EXPORT
 
PFNGLPUSHDEBUGGROUPPROC
 
	g__gÀwPushDebugGroup
;

16814 
GLEW_FUN_EXPORT
 
PFNGLBUFFERREGIONENABLEDPROC
 
	g__gÀwBuf„rRegi⁄E«bÀd
;

16815 
GLEW_FUN_EXPORT
 
PFNGLDELETEBUFFERREGIONPROC
 
	g__gÀwDñëeBuf„rRegi⁄
;

16816 
GLEW_FUN_EXPORT
 
PFNGLDRAWBUFFERREGIONPROC
 
	g__gÀwDøwBuf„rRegi⁄
;

16817 
GLEW_FUN_EXPORT
 
PFNGLNEWBUFFERREGIONPROC
 
	g__gÀwNewBuf„rRegi⁄
;

16818 
GLEW_FUN_EXPORT
 
PFNGLREADBUFFERREGIONPROC
 
	g__gÀwRódBuf„rRegi⁄
;

16820 
GLEW_FUN_EXPORT
 
PFNGLRESIZEBUFFERSMESAPROC
 
	g__gÀwResizeBuf„rsMESA
;

16822 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2DMESAPROC
 
	g__gÀwWödowPos2dMESA
;

16823 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2DVMESAPROC
 
	g__gÀwWödowPos2dvMESA
;

16824 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2FMESAPROC
 
	g__gÀwWödowPos2fMESA
;

16825 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2FVMESAPROC
 
	g__gÀwWödowPos2fvMESA
;

16826 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2IMESAPROC
 
	g__gÀwWödowPos2iMESA
;

16827 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2IVMESAPROC
 
	g__gÀwWödowPos2ivMESA
;

16828 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2SMESAPROC
 
	g__gÀwWödowPos2sMESA
;

16829 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS2SVMESAPROC
 
	g__gÀwWödowPos2svMESA
;

16830 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3DMESAPROC
 
	g__gÀwWödowPos3dMESA
;

16831 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3DVMESAPROC
 
	g__gÀwWödowPos3dvMESA
;

16832 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3FMESAPROC
 
	g__gÀwWödowPos3fMESA
;

16833 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3FVMESAPROC
 
	g__gÀwWödowPos3fvMESA
;

16834 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3IMESAPROC
 
	g__gÀwWödowPos3iMESA
;

16835 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3IVMESAPROC
 
	g__gÀwWödowPos3ivMESA
;

16836 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3SMESAPROC
 
	g__gÀwWödowPos3sMESA
;

16837 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS3SVMESAPROC
 
	g__gÀwWödowPos3svMESA
;

16838 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4DMESAPROC
 
	g__gÀwWödowPos4dMESA
;

16839 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4DVMESAPROC
 
	g__gÀwWödowPos4dvMESA
;

16840 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4FMESAPROC
 
	g__gÀwWödowPos4fMESA
;

16841 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4FVMESAPROC
 
	g__gÀwWödowPos4fvMESA
;

16842 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4IMESAPROC
 
	g__gÀwWödowPos4iMESA
;

16843 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4IVMESAPROC
 
	g__gÀwWödowPos4ivMESA
;

16844 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4SMESAPROC
 
	g__gÀwWödowPos4sMESA
;

16845 
GLEW_FUN_EXPORT
 
PFNGLWINDOWPOS4SVMESAPROC
 
	g__gÀwWödowPos4svMESA
;

16847 
GLEW_FUN_EXPORT
 
PFNGLBEGINCONDITIONALRENDERNVXPROC
 
	g__gÀwBegöC⁄dôi⁄ÆRídîNVX
;

16848 
GLEW_FUN_EXPORT
 
PFNGLENDCONDITIONALRENDERNVXPROC
 
	g__gÀwEndC⁄dôi⁄ÆRídîNVX
;

16850 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC
 
	g__gÀwMu…iDøwAºaysIndúe˘BödÀssNV
;

16851 
GLEW_FUN_EXPORT
 
PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC
 
	g__gÀwMu…iDøwEÀmítsIndúe˘BödÀssNV
;

16853 
GLEW_FUN_EXPORT
 
PFNGLGETIMAGEHANDLENVPROC
 
	g__gÀwGëImageH™dÀNV
;

16854 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTUREHANDLENVPROC
 
	g__gÀwGëTextuªH™dÀNV
;

16855 
GLEW_FUN_EXPORT
 
PFNGLGETTEXTURESAMPLERHANDLENVPROC
 
	g__gÀwGëTextuªSam∂îH™dÀNV
;

16856 
GLEW_FUN_EXPORT
 
PFNGLISIMAGEHANDLERESIDENTNVPROC
 
	g__gÀwIsImageH™dÀResidítNV
;

16857 
GLEW_FUN_EXPORT
 
PFNGLISTEXTUREHANDLERESIDENTNVPROC
 
	g__gÀwIsTextuªH™dÀResidítNV
;

16858 
GLEW_FUN_EXPORT
 
PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
 
	g__gÀwMakeImageH™dÀN⁄ResidítNV
;

16859 
GLEW_FUN_EXPORT
 
PFNGLMAKEIMAGEHANDLERESIDENTNVPROC
 
	g__gÀwMakeImageH™dÀResidítNV
;

16860 
GLEW_FUN_EXPORT
 
PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
 
	g__gÀwMakeTextuªH™dÀN⁄ResidítNV
;

16861 
GLEW_FUN_EXPORT
 
PFNGLMAKETEXTUREHANDLERESIDENTNVPROC
 
	g__gÀwMakeTextuªH™dÀResidítNV
;

16862 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
 
	g__gÀwProgømUnif‹mH™dÀui64NV
;

16863 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
 
	g__gÀwProgømUnif‹mH™dÀui64vNV
;

16864 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMHANDLEUI64NVPROC
 
	g__gÀwUnif‹mH™dÀui64NV
;

16865 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMHANDLEUI64VNVPROC
 
	g__gÀwUnif‹mH™dÀui64vNV
;

16867 
GLEW_FUN_EXPORT
 
PFNGLBLENDBARRIERNVPROC
 
	g__gÀwBÀndB¨rõrNV
;

16868 
GLEW_FUN_EXPORT
 
PFNGLBLENDPARAMETERINVPROC
 
	g__gÀwBÀndP¨amëîiNV
;

16870 
GLEW_FUN_EXPORT
 
PFNGLBEGINCONDITIONALRENDERNVPROC
 
	g__gÀwBegöC⁄dôi⁄ÆRídîNV
;

16871 
GLEW_FUN_EXPORT
 
PFNGLENDCONDITIONALRENDERNVPROC
 
	g__gÀwEndC⁄dôi⁄ÆRídîNV
;

16873 
GLEW_FUN_EXPORT
 
PFNGLCOPYIMAGESUBDATANVPROC
 
	g__gÀwC›yImageSubD©aNV
;

16875 
GLEW_FUN_EXPORT
 
PFNGLCLEARDEPTHDNVPROC
 
	g__gÀwCÀ¨DïthdNV
;

16876 
GLEW_FUN_EXPORT
 
PFNGLDEPTHBOUNDSDNVPROC
 
	g__gÀwDïthBoundsdNV
;

16877 
GLEW_FUN_EXPORT
 
PFNGLDEPTHRANGEDNVPROC
 
	g__gÀwDïthR™gedNV
;

16879 
GLEW_FUN_EXPORT
 
PFNGLDRAWTEXTURENVPROC
 
	g__gÀwDøwTextuªNV
;

16881 
GLEW_FUN_EXPORT
 
PFNGLEVALMAPSNVPROC
 
	g__gÀwEvÆM≠sNV
;

16882 
GLEW_FUN_EXPORT
 
PFNGLGETMAPATTRIBPARAMETERFVNVPROC
 
	g__gÀwGëM≠AâribP¨amëîfvNV
;

16883 
GLEW_FUN_EXPORT
 
PFNGLGETMAPATTRIBPARAMETERIVNVPROC
 
	g__gÀwGëM≠AâribP¨amëîivNV
;

16884 
GLEW_FUN_EXPORT
 
PFNGLGETMAPCONTROLPOINTSNVPROC
 
	g__gÀwGëM≠C⁄åﬁPoötsNV
;

16885 
GLEW_FUN_EXPORT
 
PFNGLGETMAPPARAMETERFVNVPROC
 
	g__gÀwGëM≠P¨amëîfvNV
;

16886 
GLEW_FUN_EXPORT
 
PFNGLGETMAPPARAMETERIVNVPROC
 
	g__gÀwGëM≠P¨amëîivNV
;

16887 
GLEW_FUN_EXPORT
 
PFNGLMAPCONTROLPOINTSNVPROC
 
	g__gÀwM≠C⁄åﬁPoötsNV
;

16888 
GLEW_FUN_EXPORT
 
PFNGLMAPPARAMETERFVNVPROC
 
	g__gÀwM≠P¨amëîfvNV
;

16889 
GLEW_FUN_EXPORT
 
PFNGLMAPPARAMETERIVNVPROC
 
	g__gÀwM≠P¨amëîivNV
;

16891 
GLEW_FUN_EXPORT
 
PFNGLGETMULTISAMPLEFVNVPROC
 
	g__gÀwGëMu…ißm∂efvNV
;

16892 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEMASKINDEXEDNVPROC
 
	g__gÀwSam∂eMaskIndexedNV
;

16893 
GLEW_FUN_EXPORT
 
PFNGLTEXRENDERBUFFERNVPROC
 
	g__gÀwTexRídîbuf„rNV
;

16895 
GLEW_FUN_EXPORT
 
PFNGLDELETEFENCESNVPROC
 
	g__gÀwDñëeFí˚sNV
;

16896 
GLEW_FUN_EXPORT
 
PFNGLFINISHFENCENVPROC
 
	g__gÀwFöishFí˚NV
;

16897 
GLEW_FUN_EXPORT
 
PFNGLGENFENCESNVPROC
 
	g__gÀwGíFí˚sNV
;

16898 
GLEW_FUN_EXPORT
 
PFNGLGETFENCEIVNVPROC
 
	g__gÀwGëFí˚ivNV
;

16899 
GLEW_FUN_EXPORT
 
PFNGLISFENCENVPROC
 
	g__gÀwIsFí˚NV
;

16900 
GLEW_FUN_EXPORT
 
PFNGLSETFENCENVPROC
 
	g__gÀwSëFí˚NV
;

16901 
GLEW_FUN_EXPORT
 
PFNGLTESTFENCENVPROC
 
	g__gÀwTe°Fí˚NV
;

16903 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
 
	g__gÀwGëProgømNamedP¨amëîdvNV
;

16904 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
 
	g__gÀwGëProgømNamedP¨amëîfvNV
;

16905 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMNAMEDPARAMETER4DNVPROC
 
	g__gÀwProgømNamedP¨amëî4dNV
;

16906 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
 
	g__gÀwProgømNamedP¨amëî4dvNV
;

16907 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMNAMEDPARAMETER4FNVPROC
 
	g__gÀwProgømNamedP¨amëî4fNV
;

16908 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
 
	g__gÀwProgømNamedP¨amëî4fvNV
;

16910 
GLEW_FUN_EXPORT
 
PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
 
	g__gÀwRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
;

16912 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMVERTEXLIMITNVPROC
 
	g__gÀwProgømVîãxLimôNV
;

16914 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERI4INVPROC
 
	g__gÀwProgømEnvP¨amëîI4iNV
;

16915 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERI4IVNVPROC
 
	g__gÀwProgømEnvP¨amëîI4ivNV
;

16916 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERI4UINVPROC
 
	g__gÀwProgømEnvP¨amëîI4uiNV
;

16917 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERI4UIVNVPROC
 
	g__gÀwProgømEnvP¨amëîI4uivNV
;

16918 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERSI4IVNVPROC
 
	g__gÀwProgømEnvP¨amëîsI4ivNV
;

16919 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
 
	g__gÀwProgømEnvP¨amëîsI4uivNV
;

16920 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERI4INVPROC
 
	g__gÀwProgømLoˇlP¨amëîI4iNV
;

16921 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
 
	g__gÀwProgømLoˇlP¨amëîI4ivNV
;

16922 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERI4UINVPROC
 
	g__gÀwProgømLoˇlP¨amëîI4uiNV
;

16923 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
 
	g__gÀwProgømLoˇlP¨amëîI4uivNV
;

16924 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
 
	g__gÀwProgømLoˇlP¨amëîsI4ivNV
;

16925 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
 
	g__gÀwProgømLoˇlP¨amëîsI4uivNV
;

16927 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMI64VNVPROC
 
	g__gÀwGëUnif‹mi64vNV
;

16928 
GLEW_FUN_EXPORT
 
PFNGLGETUNIFORMUI64VNVPROC
 
	g__gÀwGëUnif‹mui64vNV
;

16929 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1I64NVPROC
 
	g__gÀwProgømUnif‹m1i64NV
;

16930 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1I64VNVPROC
 
	g__gÀwProgømUnif‹m1i64vNV
;

16931 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1UI64NVPROC
 
	g__gÀwProgømUnif‹m1ui64NV
;

16932 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM1UI64VNVPROC
 
	g__gÀwProgømUnif‹m1ui64vNV
;

16933 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2I64NVPROC
 
	g__gÀwProgømUnif‹m2i64NV
;

16934 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2I64VNVPROC
 
	g__gÀwProgømUnif‹m2i64vNV
;

16935 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2UI64NVPROC
 
	g__gÀwProgømUnif‹m2ui64NV
;

16936 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM2UI64VNVPROC
 
	g__gÀwProgømUnif‹m2ui64vNV
;

16937 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3I64NVPROC
 
	g__gÀwProgømUnif‹m3i64NV
;

16938 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3I64VNVPROC
 
	g__gÀwProgømUnif‹m3i64vNV
;

16939 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3UI64NVPROC
 
	g__gÀwProgømUnif‹m3ui64NV
;

16940 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM3UI64VNVPROC
 
	g__gÀwProgømUnif‹m3ui64vNV
;

16941 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4I64NVPROC
 
	g__gÀwProgømUnif‹m4i64NV
;

16942 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4I64VNVPROC
 
	g__gÀwProgømUnif‹m4i64vNV
;

16943 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4UI64NVPROC
 
	g__gÀwProgømUnif‹m4ui64NV
;

16944 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORM4UI64VNVPROC
 
	g__gÀwProgømUnif‹m4ui64vNV
;

16945 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1I64NVPROC
 
	g__gÀwUnif‹m1i64NV
;

16946 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1I64VNVPROC
 
	g__gÀwUnif‹m1i64vNV
;

16947 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1UI64NVPROC
 
	g__gÀwUnif‹m1ui64NV
;

16948 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM1UI64VNVPROC
 
	g__gÀwUnif‹m1ui64vNV
;

16949 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2I64NVPROC
 
	g__gÀwUnif‹m2i64NV
;

16950 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2I64VNVPROC
 
	g__gÀwUnif‹m2i64vNV
;

16951 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2UI64NVPROC
 
	g__gÀwUnif‹m2ui64NV
;

16952 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM2UI64VNVPROC
 
	g__gÀwUnif‹m2ui64vNV
;

16953 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3I64NVPROC
 
	g__gÀwUnif‹m3i64NV
;

16954 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3I64VNVPROC
 
	g__gÀwUnif‹m3i64vNV
;

16955 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3UI64NVPROC
 
	g__gÀwUnif‹m3ui64NV
;

16956 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM3UI64VNVPROC
 
	g__gÀwUnif‹m3ui64vNV
;

16957 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4I64NVPROC
 
	g__gÀwUnif‹m4i64NV
;

16958 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4I64VNVPROC
 
	g__gÀwUnif‹m4i64vNV
;

16959 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4UI64NVPROC
 
	g__gÀwUnif‹m4ui64NV
;

16960 
GLEW_FUN_EXPORT
 
PFNGLUNIFORM4UI64VNVPROC
 
	g__gÀwUnif‹m4ui64vNV
;

16962 
GLEW_FUN_EXPORT
 
PFNGLCOLOR3HNVPROC
 
	g__gÀwCﬁ‹3hNV
;

16963 
GLEW_FUN_EXPORT
 
PFNGLCOLOR3HVNVPROC
 
	g__gÀwCﬁ‹3hvNV
;

16964 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4HNVPROC
 
	g__gÀwCﬁ‹4hNV
;

16965 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4HVNVPROC
 
	g__gÀwCﬁ‹4hvNV
;

16966 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDHNVPROC
 
	g__gÀwFogCo‹dhNV
;

16967 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDHVNVPROC
 
	g__gÀwFogCo‹dhvNV
;

16968 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1HNVPROC
 
	g__gÀwMu…iTexCo‹d1hNV
;

16969 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD1HVNVPROC
 
	g__gÀwMu…iTexCo‹d1hvNV
;

16970 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2HNVPROC
 
	g__gÀwMu…iTexCo‹d2hNV
;

16971 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD2HVNVPROC
 
	g__gÀwMu…iTexCo‹d2hvNV
;

16972 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3HNVPROC
 
	g__gÀwMu…iTexCo‹d3hNV
;

16973 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD3HVNVPROC
 
	g__gÀwMu…iTexCo‹d3hvNV
;

16974 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4HNVPROC
 
	g__gÀwMu…iTexCo‹d4hNV
;

16975 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4HVNVPROC
 
	g__gÀwMu…iTexCo‹d4hvNV
;

16976 
GLEW_FUN_EXPORT
 
PFNGLNORMAL3HNVPROC
 
	g__gÀwN‹mÆ3hNV
;

16977 
GLEW_FUN_EXPORT
 
PFNGLNORMAL3HVNVPROC
 
	g__gÀwN‹mÆ3hvNV
;

16978 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3HNVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3hNV
;

16979 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLOR3HVNVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹3hvNV
;

16980 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD1HNVPROC
 
	g__gÀwTexCo‹d1hNV
;

16981 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD1HVNVPROC
 
	g__gÀwTexCo‹d1hvNV
;

16982 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2HNVPROC
 
	g__gÀwTexCo‹d2hNV
;

16983 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2HVNVPROC
 
	g__gÀwTexCo‹d2hvNV
;

16984 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD3HNVPROC
 
	g__gÀwTexCo‹d3hNV
;

16985 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD3HVNVPROC
 
	g__gÀwTexCo‹d3hvNV
;

16986 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD4HNVPROC
 
	g__gÀwTexCo‹d4hNV
;

16987 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD4HVNVPROC
 
	g__gÀwTexCo‹d4hvNV
;

16988 
GLEW_FUN_EXPORT
 
PFNGLVERTEX2HNVPROC
 
	g__gÀwVîãx2hNV
;

16989 
GLEW_FUN_EXPORT
 
PFNGLVERTEX2HVNVPROC
 
	g__gÀwVîãx2hvNV
;

16990 
GLEW_FUN_EXPORT
 
PFNGLVERTEX3HNVPROC
 
	g__gÀwVîãx3hNV
;

16991 
GLEW_FUN_EXPORT
 
PFNGLVERTEX3HVNVPROC
 
	g__gÀwVîãx3hvNV
;

16992 
GLEW_FUN_EXPORT
 
PFNGLVERTEX4HNVPROC
 
	g__gÀwVîãx4hNV
;

16993 
GLEW_FUN_EXPORT
 
PFNGLVERTEX4HVNVPROC
 
	g__gÀwVîãx4hvNV
;

16994 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1HNVPROC
 
	g__gÀwVîãxAârib1hNV
;

16995 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1HVNVPROC
 
	g__gÀwVîãxAârib1hvNV
;

16996 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2HNVPROC
 
	g__gÀwVîãxAârib2hNV
;

16997 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2HVNVPROC
 
	g__gÀwVîãxAârib2hvNV
;

16998 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3HNVPROC
 
	g__gÀwVîãxAârib3hNV
;

16999 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3HVNVPROC
 
	g__gÀwVîãxAârib3hvNV
;

17000 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4HNVPROC
 
	g__gÀwVîãxAârib4hNV
;

17001 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4HVNVPROC
 
	g__gÀwVîãxAârib4hvNV
;

17002 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS1HVNVPROC
 
	g__gÀwVîãxAâribs1hvNV
;

17003 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS2HVNVPROC
 
	g__gÀwVîãxAâribs2hvNV
;

17004 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS3HVNVPROC
 
	g__gÀwVîãxAâribs3hvNV
;

17005 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS4HVNVPROC
 
	g__gÀwVîãxAâribs4hvNV
;

17006 
GLEW_FUN_EXPORT
 
PFNGLVERTEXWEIGHTHNVPROC
 
	g__gÀwVîãxWeighthNV
;

17007 
GLEW_FUN_EXPORT
 
PFNGLVERTEXWEIGHTHVNVPROC
 
	g__gÀwVîãxWeighthvNV
;

17009 
GLEW_FUN_EXPORT
 
PFNGLBEGINOCCLUSIONQUERYNVPROC
 
	g__gÀwBegöOc˛usi⁄QuîyNV
;

17010 
GLEW_FUN_EXPORT
 
PFNGLDELETEOCCLUSIONQUERIESNVPROC
 
	g__gÀwDñëeOc˛usi⁄QuîõsNV
;

17011 
GLEW_FUN_EXPORT
 
PFNGLENDOCCLUSIONQUERYNVPROC
 
	g__gÀwEndOc˛usi⁄QuîyNV
;

17012 
GLEW_FUN_EXPORT
 
PFNGLGENOCCLUSIONQUERIESNVPROC
 
	g__gÀwGíOc˛usi⁄QuîõsNV
;

17013 
GLEW_FUN_EXPORT
 
PFNGLGETOCCLUSIONQUERYIVNVPROC
 
	g__gÀwGëOc˛usi⁄QuîyivNV
;

17014 
GLEW_FUN_EXPORT
 
PFNGLGETOCCLUSIONQUERYUIVNVPROC
 
	g__gÀwGëOc˛usi⁄QuîyuivNV
;

17015 
GLEW_FUN_EXPORT
 
PFNGLISOCCLUSIONQUERYNVPROC
 
	g__gÀwIsOc˛usi⁄QuîyNV
;

17017 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
 
	g__gÀwProgømBuf„rP¨amëîsIivNV
;

17018 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
 
	g__gÀwProgømBuf„rP¨amëîsIuivNV
;

17019 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
 
	g__gÀwProgømBuf„rP¨amëîsfvNV
;

17021 
GLEW_FUN_EXPORT
 
PFNGLCOPYPATHNVPROC
 
	g__gÀwC›yP©hNV
;

17022 
GLEW_FUN_EXPORT
 
PFNGLCOVERFILLPATHINSTANCEDNVPROC
 
	g__gÀwCovîFûlP©hIn°™˚dNV
;

17023 
GLEW_FUN_EXPORT
 
PFNGLCOVERFILLPATHNVPROC
 
	g__gÀwCovîFûlP©hNV
;

17024 
GLEW_FUN_EXPORT
 
PFNGLCOVERSTROKEPATHINSTANCEDNVPROC
 
	g__gÀwCovîSåokeP©hIn°™˚dNV
;

17025 
GLEW_FUN_EXPORT
 
PFNGLCOVERSTROKEPATHNVPROC
 
	g__gÀwCovîSåokeP©hNV
;

17026 
GLEW_FUN_EXPORT
 
PFNGLDELETEPATHSNVPROC
 
	g__gÀwDñëeP©hsNV
;

17027 
GLEW_FUN_EXPORT
 
PFNGLGENPATHSNVPROC
 
	g__gÀwGíP©hsNV
;

17028 
GLEW_FUN_EXPORT
 
PFNGLGETPATHCOLORGENFVNVPROC
 
	g__gÀwGëP©hCﬁ‹GífvNV
;

17029 
GLEW_FUN_EXPORT
 
PFNGLGETPATHCOLORGENIVNVPROC
 
	g__gÀwGëP©hCﬁ‹GíivNV
;

17030 
GLEW_FUN_EXPORT
 
PFNGLGETPATHCOMMANDSNVPROC
 
	g__gÀwGëP©hComm™dsNV
;

17031 
GLEW_FUN_EXPORT
 
PFNGLGETPATHCOORDSNVPROC
 
	g__gÀwGëP©hCo‹dsNV
;

17032 
GLEW_FUN_EXPORT
 
PFNGLGETPATHDASHARRAYNVPROC
 
	g__gÀwGëP©hDashAºayNV
;

17033 
GLEW_FUN_EXPORT
 
PFNGLGETPATHLENGTHNVPROC
 
	g__gÀwGëP©hLígthNV
;

17034 
GLEW_FUN_EXPORT
 
PFNGLGETPATHMETRICRANGENVPROC
 
	g__gÀwGëP©hMëricR™geNV
;

17035 
GLEW_FUN_EXPORT
 
PFNGLGETPATHMETRICSNVPROC
 
	g__gÀwGëP©hMëricsNV
;

17036 
GLEW_FUN_EXPORT
 
PFNGLGETPATHPARAMETERFVNVPROC
 
	g__gÀwGëP©hP¨amëîfvNV
;

17037 
GLEW_FUN_EXPORT
 
PFNGLGETPATHPARAMETERIVNVPROC
 
	g__gÀwGëP©hP¨amëîivNV
;

17038 
GLEW_FUN_EXPORT
 
PFNGLGETPATHSPACINGNVPROC
 
	g__gÀwGëP©hS∑cögNV
;

17039 
GLEW_FUN_EXPORT
 
PFNGLGETPATHTEXGENFVNVPROC
 
	g__gÀwGëP©hTexGífvNV
;

17040 
GLEW_FUN_EXPORT
 
PFNGLGETPATHTEXGENIVNVPROC
 
	g__gÀwGëP©hTexGíivNV
;

17041 
GLEW_FUN_EXPORT
 
PFNGLINTERPOLATEPATHSNVPROC
 
	g__gÀwI¡îpﬁ©eP©hsNV
;

17042 
GLEW_FUN_EXPORT
 
PFNGLISPATHNVPROC
 
	g__gÀwIsP©hNV
;

17043 
GLEW_FUN_EXPORT
 
PFNGLISPOINTINFILLPATHNVPROC
 
	g__gÀwIsPoötInFûlP©hNV
;

17044 
GLEW_FUN_EXPORT
 
PFNGLISPOINTINSTROKEPATHNVPROC
 
	g__gÀwIsPoötInSåokeP©hNV
;

17045 
GLEW_FUN_EXPORT
 
PFNGLPATHCOLORGENNVPROC
 
	g__gÀwP©hCﬁ‹GíNV
;

17046 
GLEW_FUN_EXPORT
 
PFNGLPATHCOMMANDSNVPROC
 
	g__gÀwP©hComm™dsNV
;

17047 
GLEW_FUN_EXPORT
 
PFNGLPATHCOORDSNVPROC
 
	g__gÀwP©hCo‹dsNV
;

17048 
GLEW_FUN_EXPORT
 
PFNGLPATHCOVERDEPTHFUNCNVPROC
 
	g__gÀwP©hCovîDïthFuncNV
;

17049 
GLEW_FUN_EXPORT
 
PFNGLPATHDASHARRAYNVPROC
 
	g__gÀwP©hDashAºayNV
;

17050 
GLEW_FUN_EXPORT
 
PFNGLPATHFOGGENNVPROC
 
	g__gÀwP©hFogGíNV
;

17051 
GLEW_FUN_EXPORT
 
PFNGLPATHGLYPHRANGENVPROC
 
	g__gÀwP©hGlyphR™geNV
;

17052 
GLEW_FUN_EXPORT
 
PFNGLPATHGLYPHSNVPROC
 
	g__gÀwP©hGlyphsNV
;

17053 
GLEW_FUN_EXPORT
 
PFNGLPATHPARAMETERFNVPROC
 
	g__gÀwP©hP¨amëîfNV
;

17054 
GLEW_FUN_EXPORT
 
PFNGLPATHPARAMETERFVNVPROC
 
	g__gÀwP©hP¨amëîfvNV
;

17055 
GLEW_FUN_EXPORT
 
PFNGLPATHPARAMETERINVPROC
 
	g__gÀwP©hP¨amëîiNV
;

17056 
GLEW_FUN_EXPORT
 
PFNGLPATHPARAMETERIVNVPROC
 
	g__gÀwP©hP¨amëîivNV
;

17057 
GLEW_FUN_EXPORT
 
PFNGLPATHSTENCILDEPTHOFFSETNVPROC
 
	g__gÀwP©hSãncûDïthOff£tNV
;

17058 
GLEW_FUN_EXPORT
 
PFNGLPATHSTENCILFUNCNVPROC
 
	g__gÀwP©hSãncûFuncNV
;

17059 
GLEW_FUN_EXPORT
 
PFNGLPATHSTRINGNVPROC
 
	g__gÀwP©hSåögNV
;

17060 
GLEW_FUN_EXPORT
 
PFNGLPATHSUBCOMMANDSNVPROC
 
	g__gÀwP©hSubComm™dsNV
;

17061 
GLEW_FUN_EXPORT
 
PFNGLPATHSUBCOORDSNVPROC
 
	g__gÀwP©hSubCo‹dsNV
;

17062 
GLEW_FUN_EXPORT
 
PFNGLPATHTEXGENNVPROC
 
	g__gÀwP©hTexGíNV
;

17063 
GLEW_FUN_EXPORT
 
PFNGLPOINTALONGPATHNVPROC
 
	g__gÀwPoötAl⁄gP©hNV
;

17064 
GLEW_FUN_EXPORT
 
PFNGLSTENCILFILLPATHINSTANCEDNVPROC
 
	g__gÀwSãncûFûlP©hIn°™˚dNV
;

17065 
GLEW_FUN_EXPORT
 
PFNGLSTENCILFILLPATHNVPROC
 
	g__gÀwSãncûFûlP©hNV
;

17066 
GLEW_FUN_EXPORT
 
PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
 
	g__gÀwSãncûSåokeP©hIn°™˚dNV
;

17067 
GLEW_FUN_EXPORT
 
PFNGLSTENCILSTROKEPATHNVPROC
 
	g__gÀwSãncûSåokeP©hNV
;

17068 
GLEW_FUN_EXPORT
 
PFNGLTRANSFORMPATHNVPROC
 
	g__gÀwTønsf‹mP©hNV
;

17069 
GLEW_FUN_EXPORT
 
PFNGLWEIGHTPATHSNVPROC
 
	g__gÀwWeightP©hsNV
;

17071 
GLEW_FUN_EXPORT
 
PFNGLFLUSHPIXELDATARANGENVPROC
 
	g__gÀwFlushPixñD©aR™geNV
;

17072 
GLEW_FUN_EXPORT
 
PFNGLPIXELDATARANGENVPROC
 
	g__gÀwPixñD©aR™geNV
;

17074 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERINVPROC
 
	g__gÀwPoötP¨amëîiNV
;

17075 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERIVNVPROC
 
	g__gÀwPoötP¨amëîivNV
;

17077 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOI64VNVPROC
 
	g__gÀwGëVideoi64vNV
;

17078 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOIVNVPROC
 
	g__gÀwGëVideoivNV
;

17079 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOUI64VNVPROC
 
	g__gÀwGëVideoui64vNV
;

17080 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOUIVNVPROC
 
	g__gÀwGëVideouivNV
;

17081 
GLEW_FUN_EXPORT
 
PFNGLPRESENTFRAMEDUALFILLNVPROC
 
	g__gÀwPª£¡FømeDuÆFûlNV
;

17082 
GLEW_FUN_EXPORT
 
PFNGLPRESENTFRAMEKEYEDNVPROC
 
	g__gÀwPª£¡FømeKeyedNV
;

17084 
GLEW_FUN_EXPORT
 
PFNGLPRIMITIVERESTARTINDEXNVPROC
 
	g__gÀwPrimôiveRe°¨tIndexNV
;

17085 
GLEW_FUN_EXPORT
 
PFNGLPRIMITIVERESTARTNVPROC
 
	g__gÀwPrimôiveRe°¨tNV
;

17087 
GLEW_FUN_EXPORT
 
PFNGLCOMBINERINPUTNVPROC
 
	g__gÀwComböîI≈utNV
;

17088 
GLEW_FUN_EXPORT
 
PFNGLCOMBINEROUTPUTNVPROC
 
	g__gÀwComböîOuçutNV
;

17089 
GLEW_FUN_EXPORT
 
PFNGLCOMBINERPARAMETERFNVPROC
 
	g__gÀwComböîP¨amëîfNV
;

17090 
GLEW_FUN_EXPORT
 
PFNGLCOMBINERPARAMETERFVNVPROC
 
	g__gÀwComböîP¨amëîfvNV
;

17091 
GLEW_FUN_EXPORT
 
PFNGLCOMBINERPARAMETERINVPROC
 
	g__gÀwComböîP¨amëîiNV
;

17092 
GLEW_FUN_EXPORT
 
PFNGLCOMBINERPARAMETERIVNVPROC
 
	g__gÀwComböîP¨amëîivNV
;

17093 
GLEW_FUN_EXPORT
 
PFNGLFINALCOMBINERINPUTNVPROC
 
	g__gÀwFöÆComböîI≈utNV
;

17094 
GLEW_FUN_EXPORT
 
PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
 
	g__gÀwGëComböîI≈utP¨amëîfvNV
;

17095 
GLEW_FUN_EXPORT
 
PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
 
	g__gÀwGëComböîI≈utP¨amëîivNV
;

17096 
GLEW_FUN_EXPORT
 
PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
 
	g__gÀwGëComböîOuçutP¨amëîfvNV
;

17097 
GLEW_FUN_EXPORT
 
PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
 
	g__gÀwGëComböîOuçutP¨amëîivNV
;

17098 
GLEW_FUN_EXPORT
 
PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
 
	g__gÀwGëFöÆComböîI≈utP¨amëîfvNV
;

17099 
GLEW_FUN_EXPORT
 
PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
 
	g__gÀwGëFöÆComböîI≈utP¨amëîivNV
;

17101 
GLEW_FUN_EXPORT
 
PFNGLCOMBINERSTAGEPARAMETERFVNVPROC
 
	g__gÀwComböîSègeP¨amëîfvNV
;

17102 
GLEW_FUN_EXPORT
 
PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
 
	g__gÀwGëComböîSègeP¨amëîfvNV
;

17104 
GLEW_FUN_EXPORT
 
PFNGLGETBUFFERPARAMETERUI64VNVPROC
 
	g__gÀwGëBuf„rP¨amëîui64vNV
;

17105 
GLEW_FUN_EXPORT
 
PFNGLGETINTEGERUI64VNVPROC
 
	g__gÀwGëI¡egîui64vNV
;

17106 
GLEW_FUN_EXPORT
 
PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
 
	g__gÀwGëNamedBuf„rP¨amëîui64vNV
;

17107 
GLEW_FUN_EXPORT
 
PFNGLISBUFFERRESIDENTNVPROC
 
	g__gÀwIsBuf„rResidítNV
;

17108 
GLEW_FUN_EXPORT
 
PFNGLISNAMEDBUFFERRESIDENTNVPROC
 
	g__gÀwIsNamedBuf„rResidítNV
;

17109 
GLEW_FUN_EXPORT
 
PFNGLMAKEBUFFERNONRESIDENTNVPROC
 
	g__gÀwMakeBuf„rN⁄ResidítNV
;

17110 
GLEW_FUN_EXPORT
 
PFNGLMAKEBUFFERRESIDENTNVPROC
 
	g__gÀwMakeBuf„rResidítNV
;

17111 
GLEW_FUN_EXPORT
 
PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
 
	g__gÀwMakeNamedBuf„rN⁄ResidítNV
;

17112 
GLEW_FUN_EXPORT
 
PFNGLMAKENAMEDBUFFERRESIDENTNVPROC
 
	g__gÀwMakeNamedBuf„rResidítNV
;

17113 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMUI64NVPROC
 
	g__gÀwProgømUnif‹mui64NV
;

17114 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMUNIFORMUI64VNVPROC
 
	g__gÀwProgømUnif‹mui64vNV
;

17115 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMUI64NVPROC
 
	g__gÀwUnif‹mui64NV
;

17116 
GLEW_FUN_EXPORT
 
PFNGLUNIFORMUI64VNVPROC
 
	g__gÀwUnif‹mui64vNV
;

17118 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREBARRIERNVPROC
 
	g__gÀwTextuªB¨rõrNV
;

17120 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
 
	g__gÀwTexImage2DMu…ißm∂eCovîageNV
;

17121 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
 
	g__gÀwTexImage3DMu…ißm∂eCovîageNV
;

17122 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
 
	g__gÀwTextuªImage2DMu…ißm∂eCovîageNV
;

17123 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
 
	g__gÀwTextuªImage2DMu…ißm∂eNV
;

17124 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
 
	g__gÀwTextuªImage3DMu…ißm∂eCovîageNV
;

17125 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
 
	g__gÀwTextuªImage3DMu…ißm∂eNV
;

17127 
GLEW_FUN_EXPORT
 
PFNGLACTIVEVARYINGNVPROC
 
	g__gÀwA˘iveV¨yögNV
;

17128 
GLEW_FUN_EXPORT
 
PFNGLBEGINTRANSFORMFEEDBACKNVPROC
 
	g__gÀwBegöTønsf‹mFìdbackNV
;

17129 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERBASENVPROC
 
	g__gÀwBödBuf„rBa£NV
;

17130 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFEROFFSETNVPROC
 
	g__gÀwBödBuf„rOff£tNV
;

17131 
GLEW_FUN_EXPORT
 
PFNGLBINDBUFFERRANGENVPROC
 
	g__gÀwBödBuf„rR™geNV
;

17132 
GLEW_FUN_EXPORT
 
PFNGLENDTRANSFORMFEEDBACKNVPROC
 
	g__gÀwEndTønsf‹mFìdbackNV
;

17133 
GLEW_FUN_EXPORT
 
PFNGLGETACTIVEVARYINGNVPROC
 
	g__gÀwGëA˘iveV¨yögNV
;

17134 
GLEW_FUN_EXPORT
 
PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
 
	g__gÀwGëTønsf‹mFìdbackV¨yögNV
;

17135 
GLEW_FUN_EXPORT
 
PFNGLGETVARYINGLOCATIONNVPROC
 
	g__gÀwGëV¨yögLoˇti⁄NV
;

17136 
GLEW_FUN_EXPORT
 
PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
 
	g__gÀwTønsf‹mFìdbackAâribsNV
;

17137 
GLEW_FUN_EXPORT
 
PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
 
	g__gÀwTønsf‹mFìdbackV¨yögsNV
;

17139 
GLEW_FUN_EXPORT
 
PFNGLBINDTRANSFORMFEEDBACKNVPROC
 
	g__gÀwBödTønsf‹mFìdbackNV
;

17140 
GLEW_FUN_EXPORT
 
PFNGLDELETETRANSFORMFEEDBACKSNVPROC
 
	g__gÀwDñëeTønsf‹mFìdbacksNV
;

17141 
GLEW_FUN_EXPORT
 
PFNGLDRAWTRANSFORMFEEDBACKNVPROC
 
	g__gÀwDøwTønsf‹mFìdbackNV
;

17142 
GLEW_FUN_EXPORT
 
PFNGLGENTRANSFORMFEEDBACKSNVPROC
 
	g__gÀwGíTønsf‹mFìdbacksNV
;

17143 
GLEW_FUN_EXPORT
 
PFNGLISTRANSFORMFEEDBACKNVPROC
 
	g__gÀwIsTønsf‹mFìdbackNV
;

17144 
GLEW_FUN_EXPORT
 
PFNGLPAUSETRANSFORMFEEDBACKNVPROC
 
	g__gÀwPau£Tønsf‹mFìdbackNV
;

17145 
GLEW_FUN_EXPORT
 
PFNGLRESUMETRANSFORMFEEDBACKNVPROC
 
	g__gÀwResumeTønsf‹mFìdbackNV
;

17147 
GLEW_FUN_EXPORT
 
PFNGLVDPAUFININVPROC
 
	g__gÀwVDPAUFöiNV
;

17148 
GLEW_FUN_EXPORT
 
PFNGLVDPAUGETSURFACEIVNVPROC
 
	g__gÀwVDPAUGëSurÁ˚ivNV
;

17149 
GLEW_FUN_EXPORT
 
PFNGLVDPAUINITNVPROC
 
	g__gÀwVDPAUInôNV
;

17150 
GLEW_FUN_EXPORT
 
PFNGLVDPAUISSURFACENVPROC
 
	g__gÀwVDPAUIsSurÁ˚NV
;

17151 
GLEW_FUN_EXPORT
 
PFNGLVDPAUMAPSURFACESNVPROC
 
	g__gÀwVDPAUM≠SurÁ˚sNV
;

17152 
GLEW_FUN_EXPORT
 
PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
 
	g__gÀwVDPAURegi°îOuçutSurÁ˚NV
;

17153 
GLEW_FUN_EXPORT
 
PFNGLVDPAUREGISTERVIDEOSURFACENVPROC
 
	g__gÀwVDPAURegi°îVideoSurÁ˚NV
;

17154 
GLEW_FUN_EXPORT
 
PFNGLVDPAUSURFACEACCESSNVPROC
 
	g__gÀwVDPAUSurÁ˚Ac˚ssNV
;

17155 
GLEW_FUN_EXPORT
 
PFNGLVDPAUUNMAPSURFACESNVPROC
 
	g__gÀwVDPAUUnm≠SurÁ˚sNV
;

17156 
GLEW_FUN_EXPORT
 
PFNGLVDPAUUNREGISTERSURFACENVPROC
 
	g__gÀwVDPAUUƒegi°îSurÁ˚NV
;

17158 
GLEW_FUN_EXPORT
 
PFNGLFLUSHVERTEXARRAYRANGENVPROC
 
	g__gÀwFlushVîãxAºayR™geNV
;

17159 
GLEW_FUN_EXPORT
 
PFNGLVERTEXARRAYRANGENVPROC
 
	g__gÀwVîãxAºayR™geNV
;

17161 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBLI64VNVPROC
 
	g__gÀwGëVîãxAâribLi64vNV
;

17162 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBLUI64VNVPROC
 
	g__gÀwGëVîãxAâribLui64vNV
;

17163 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1I64NVPROC
 
	g__gÀwVîãxAâribL1i64NV
;

17164 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1I64VNVPROC
 
	g__gÀwVîãxAâribL1i64vNV
;

17165 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1UI64NVPROC
 
	g__gÀwVîãxAâribL1ui64NV
;

17166 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL1UI64VNVPROC
 
	g__gÀwVîãxAâribL1ui64vNV
;

17167 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2I64NVPROC
 
	g__gÀwVîãxAâribL2i64NV
;

17168 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2I64VNVPROC
 
	g__gÀwVîãxAâribL2i64vNV
;

17169 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2UI64NVPROC
 
	g__gÀwVîãxAâribL2ui64NV
;

17170 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL2UI64VNVPROC
 
	g__gÀwVîãxAâribL2ui64vNV
;

17171 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3I64NVPROC
 
	g__gÀwVîãxAâribL3i64NV
;

17172 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3I64VNVPROC
 
	g__gÀwVîãxAâribL3i64vNV
;

17173 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3UI64NVPROC
 
	g__gÀwVîãxAâribL3ui64NV
;

17174 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL3UI64VNVPROC
 
	g__gÀwVîãxAâribL3ui64vNV
;

17175 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4I64NVPROC
 
	g__gÀwVîãxAâribL4i64NV
;

17176 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4I64VNVPROC
 
	g__gÀwVîãxAâribL4i64vNV
;

17177 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4UI64NVPROC
 
	g__gÀwVîãxAâribL4ui64NV
;

17178 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBL4UI64VNVPROC
 
	g__gÀwVîãxAâribL4ui64vNV
;

17179 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBLFORMATNVPROC
 
	g__gÀwVîãxAâribLF‹m©NV
;

17181 
GLEW_FUN_EXPORT
 
PFNGLBUFFERADDRESSRANGENVPROC
 
	g__gÀwBuf„rAddªssR™geNV
;

17182 
GLEW_FUN_EXPORT
 
PFNGLCOLORFORMATNVPROC
 
	g__gÀwCﬁ‹F‹m©NV
;

17183 
GLEW_FUN_EXPORT
 
PFNGLEDGEFLAGFORMATNVPROC
 
	g__gÀwEdgeFœgF‹m©NV
;

17184 
GLEW_FUN_EXPORT
 
PFNGLFOGCOORDFORMATNVPROC
 
	g__gÀwFogCo‹dF‹m©NV
;

17185 
GLEW_FUN_EXPORT
 
PFNGLGETINTEGERUI64I_VNVPROC
 
	g__gÀwGëI¡egîui64i_vNV
;

17186 
GLEW_FUN_EXPORT
 
PFNGLINDEXFORMATNVPROC
 
	g__gÀwIndexF‹m©NV
;

17187 
GLEW_FUN_EXPORT
 
PFNGLNORMALFORMATNVPROC
 
	g__gÀwN‹mÆF‹m©NV
;

17188 
GLEW_FUN_EXPORT
 
PFNGLSECONDARYCOLORFORMATNVPROC
 
	g__gÀwSec⁄d¨yCﬁ‹F‹m©NV
;

17189 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORDFORMATNVPROC
 
	g__gÀwTexCo‹dF‹m©NV
;

17190 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBFORMATNVPROC
 
	g__gÀwVîãxAâribF‹m©NV
;

17191 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBIFORMATNVPROC
 
	g__gÀwVîãxAâribIF‹m©NV
;

17192 
GLEW_FUN_EXPORT
 
PFNGLVERTEXFORMATNVPROC
 
	g__gÀwVîãxF‹m©NV
;

17194 
GLEW_FUN_EXPORT
 
PFNGLAREPROGRAMSRESIDENTNVPROC
 
	g__gÀwAªProgømsResidítNV
;

17195 
GLEW_FUN_EXPORT
 
PFNGLBINDPROGRAMNVPROC
 
	g__gÀwBödProgømNV
;

17196 
GLEW_FUN_EXPORT
 
PFNGLDELETEPROGRAMSNVPROC
 
	g__gÀwDñëeProgømsNV
;

17197 
GLEW_FUN_EXPORT
 
PFNGLEXECUTEPROGRAMNVPROC
 
	g__gÀwExecuãProgømNV
;

17198 
GLEW_FUN_EXPORT
 
PFNGLGENPROGRAMSNVPROC
 
	g__gÀwGíProgømsNV
;

17199 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMPARAMETERDVNVPROC
 
	g__gÀwGëProgømP¨amëîdvNV
;

17200 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMPARAMETERFVNVPROC
 
	g__gÀwGëProgømP¨amëîfvNV
;

17201 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMSTRINGNVPROC
 
	g__gÀwGëProgømSåögNV
;

17202 
GLEW_FUN_EXPORT
 
PFNGLGETPROGRAMIVNVPROC
 
	g__gÀwGëProgømivNV
;

17203 
GLEW_FUN_EXPORT
 
PFNGLGETTRACKMATRIXIVNVPROC
 
	g__gÀwGëTøckM©rixivNV
;

17204 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBPOINTERVNVPROC
 
	g__gÀwGëVîãxAâribPoöãrvNV
;

17205 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBDVNVPROC
 
	g__gÀwGëVîãxAâribdvNV
;

17206 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBFVNVPROC
 
	g__gÀwGëVîãxAâribfvNV
;

17207 
GLEW_FUN_EXPORT
 
PFNGLGETVERTEXATTRIBIVNVPROC
 
	g__gÀwGëVîãxAâribivNV
;

17208 
GLEW_FUN_EXPORT
 
PFNGLISPROGRAMNVPROC
 
	g__gÀwIsProgømNV
;

17209 
GLEW_FUN_EXPORT
 
PFNGLLOADPROGRAMNVPROC
 
	g__gÀwLﬂdProgømNV
;

17210 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETER4DNVPROC
 
	g__gÀwProgømP¨amëî4dNV
;

17211 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETER4DVNVPROC
 
	g__gÀwProgømP¨amëî4dvNV
;

17212 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETER4FNVPROC
 
	g__gÀwProgømP¨amëî4fNV
;

17213 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETER4FVNVPROC
 
	g__gÀwProgømP¨amëî4fvNV
;

17214 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETERS4DVNVPROC
 
	g__gÀwProgømP¨amëîs4dvNV
;

17215 
GLEW_FUN_EXPORT
 
PFNGLPROGRAMPARAMETERS4FVNVPROC
 
	g__gÀwProgømP¨amëîs4fvNV
;

17216 
GLEW_FUN_EXPORT
 
PFNGLREQUESTRESIDENTPROGRAMSNVPROC
 
	g__gÀwReque°ResidítProgømsNV
;

17217 
GLEW_FUN_EXPORT
 
PFNGLTRACKMATRIXNVPROC
 
	g__gÀwTøckM©rixNV
;

17218 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1DNVPROC
 
	g__gÀwVîãxAârib1dNV
;

17219 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1DVNVPROC
 
	g__gÀwVîãxAârib1dvNV
;

17220 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1FNVPROC
 
	g__gÀwVîãxAârib1fNV
;

17221 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1FVNVPROC
 
	g__gÀwVîãxAârib1fvNV
;

17222 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1SNVPROC
 
	g__gÀwVîãxAârib1sNV
;

17223 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB1SVNVPROC
 
	g__gÀwVîãxAârib1svNV
;

17224 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2DNVPROC
 
	g__gÀwVîãxAârib2dNV
;

17225 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2DVNVPROC
 
	g__gÀwVîãxAârib2dvNV
;

17226 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2FNVPROC
 
	g__gÀwVîãxAârib2fNV
;

17227 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2FVNVPROC
 
	g__gÀwVîãxAârib2fvNV
;

17228 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2SNVPROC
 
	g__gÀwVîãxAârib2sNV
;

17229 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB2SVNVPROC
 
	g__gÀwVîãxAârib2svNV
;

17230 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3DNVPROC
 
	g__gÀwVîãxAârib3dNV
;

17231 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3DVNVPROC
 
	g__gÀwVîãxAârib3dvNV
;

17232 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3FNVPROC
 
	g__gÀwVîãxAârib3fNV
;

17233 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3FVNVPROC
 
	g__gÀwVîãxAârib3fvNV
;

17234 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3SNVPROC
 
	g__gÀwVîãxAârib3sNV
;

17235 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB3SVNVPROC
 
	g__gÀwVîãxAârib3svNV
;

17236 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4DNVPROC
 
	g__gÀwVîãxAârib4dNV
;

17237 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4DVNVPROC
 
	g__gÀwVîãxAârib4dvNV
;

17238 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4FNVPROC
 
	g__gÀwVîãxAârib4fNV
;

17239 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4FVNVPROC
 
	g__gÀwVîãxAârib4fvNV
;

17240 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4SNVPROC
 
	g__gÀwVîãxAârib4sNV
;

17241 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4SVNVPROC
 
	g__gÀwVîãxAârib4svNV
;

17242 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4UBNVPROC
 
	g__gÀwVîãxAârib4ubNV
;

17243 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIB4UBVNVPROC
 
	g__gÀwVîãxAârib4ubvNV
;

17244 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBPOINTERNVPROC
 
	g__gÀwVîãxAâribPoöãrNV
;

17245 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS1DVNVPROC
 
	g__gÀwVîãxAâribs1dvNV
;

17246 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS1FVNVPROC
 
	g__gÀwVîãxAâribs1fvNV
;

17247 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS1SVNVPROC
 
	g__gÀwVîãxAâribs1svNV
;

17248 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS2DVNVPROC
 
	g__gÀwVîãxAâribs2dvNV
;

17249 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS2FVNVPROC
 
	g__gÀwVîãxAâribs2fvNV
;

17250 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS2SVNVPROC
 
	g__gÀwVîãxAâribs2svNV
;

17251 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS3DVNVPROC
 
	g__gÀwVîãxAâribs3dvNV
;

17252 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS3FVNVPROC
 
	g__gÀwVîãxAâribs3fvNV
;

17253 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS3SVNVPROC
 
	g__gÀwVîãxAâribs3svNV
;

17254 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS4DVNVPROC
 
	g__gÀwVîãxAâribs4dvNV
;

17255 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS4FVNVPROC
 
	g__gÀwVîãxAâribs4fvNV
;

17256 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS4SVNVPROC
 
	g__gÀwVîãxAâribs4svNV
;

17257 
GLEW_FUN_EXPORT
 
PFNGLVERTEXATTRIBS4UBVNVPROC
 
	g__gÀwVîãxAâribs4ubvNV
;

17259 
GLEW_FUN_EXPORT
 
PFNGLBEGINVIDEOCAPTURENVPROC
 
	g__gÀwBegöVideoC≠tuªNV
;

17260 
GLEW_FUN_EXPORT
 
PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
 
	g__gÀwBödVideoC≠tuªSåómBuf„rNV
;

17261 
GLEW_FUN_EXPORT
 
PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
 
	g__gÀwBödVideoC≠tuªSåómTextuªNV
;

17262 
GLEW_FUN_EXPORT
 
PFNGLENDVIDEOCAPTURENVPROC
 
	g__gÀwEndVideoC≠tuªNV
;

17263 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOCAPTURESTREAMDVNVPROC
 
	g__gÀwGëVideoC≠tuªSåómdvNV
;

17264 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOCAPTURESTREAMFVNVPROC
 
	g__gÀwGëVideoC≠tuªSåómfvNV
;

17265 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOCAPTURESTREAMIVNVPROC
 
	g__gÀwGëVideoC≠tuªSåómivNV
;

17266 
GLEW_FUN_EXPORT
 
PFNGLGETVIDEOCAPTUREIVNVPROC
 
	g__gÀwGëVideoC≠tuªivNV
;

17267 
GLEW_FUN_EXPORT
 
PFNGLVIDEOCAPTURENVPROC
 
	g__gÀwVideoC≠tuªNV
;

17268 
GLEW_FUN_EXPORT
 
PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
 
	g__gÀwVideoC≠tuªSåómP¨amëîdvNV
;

17269 
GLEW_FUN_EXPORT
 
PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
 
	g__gÀwVideoC≠tuªSåómP¨amëîfvNV
;

17270 
GLEW_FUN_EXPORT
 
PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
 
	g__gÀwVideoC≠tuªSåómP¨amëîivNV
;

17272 
GLEW_FUN_EXPORT
 
PFNGLCLEARDEPTHFOESPROC
 
	g__gÀwCÀ¨DïthfOES
;

17273 
GLEW_FUN_EXPORT
 
PFNGLCLIPPLANEFOESPROC
 
	g__gÀwClùPœ√fOES
;

17274 
GLEW_FUN_EXPORT
 
PFNGLDEPTHRANGEFOESPROC
 
	g__gÀwDïthR™gefOES
;

17275 
GLEW_FUN_EXPORT
 
PFNGLFRUSTUMFOESPROC
 
	g__gÀwFru°umfOES
;

17276 
GLEW_FUN_EXPORT
 
PFNGLGETCLIPPLANEFOESPROC
 
	g__gÀwGëClùPœ√fOES
;

17277 
GLEW_FUN_EXPORT
 
PFNGLORTHOFOESPROC
 
	g__gÀwOπhofOES
;

17279 
GLEW_FUN_EXPORT
 
PFNGLALPHAFUNCXPROC
 
	g__gÀwAÕhaFuncx
;

17280 
GLEW_FUN_EXPORT
 
PFNGLCLEARCOLORXPROC
 
	g__gÀwCÀ¨Cﬁ‹x
;

17281 
GLEW_FUN_EXPORT
 
PFNGLCLEARDEPTHXPROC
 
	g__gÀwCÀ¨Dïthx
;

17282 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4XPROC
 
	g__gÀwCﬁ‹4x
;

17283 
GLEW_FUN_EXPORT
 
PFNGLDEPTHRANGEXPROC
 
	g__gÀwDïthR™gex
;

17284 
GLEW_FUN_EXPORT
 
PFNGLFOGXPROC
 
	g__gÀwFogx
;

17285 
GLEW_FUN_EXPORT
 
PFNGLFOGXVPROC
 
	g__gÀwFogxv
;

17286 
GLEW_FUN_EXPORT
 
PFNGLFRUSTUMFPROC
 
	g__gÀwFru°umf
;

17287 
GLEW_FUN_EXPORT
 
PFNGLFRUSTUMXPROC
 
	g__gÀwFru°umx
;

17288 
GLEW_FUN_EXPORT
 
PFNGLLIGHTMODELXPROC
 
	g__gÀwLightModñx
;

17289 
GLEW_FUN_EXPORT
 
PFNGLLIGHTMODELXVPROC
 
	g__gÀwLightModñxv
;

17290 
GLEW_FUN_EXPORT
 
PFNGLLIGHTXPROC
 
	g__gÀwLightx
;

17291 
GLEW_FUN_EXPORT
 
PFNGLLIGHTXVPROC
 
	g__gÀwLightxv
;

17292 
GLEW_FUN_EXPORT
 
PFNGLLINEWIDTHXPROC
 
	g__gÀwLöeWidthx
;

17293 
GLEW_FUN_EXPORT
 
PFNGLLOADMATRIXXPROC
 
	g__gÀwLﬂdM©rixx
;

17294 
GLEW_FUN_EXPORT
 
PFNGLMATERIALXPROC
 
	g__gÀwM©îülx
;

17295 
GLEW_FUN_EXPORT
 
PFNGLMATERIALXVPROC
 
	g__gÀwM©îülxv
;

17296 
GLEW_FUN_EXPORT
 
PFNGLMULTMATRIXXPROC
 
	g__gÀwMu…M©rixx
;

17297 
GLEW_FUN_EXPORT
 
PFNGLMULTITEXCOORD4XPROC
 
	g__gÀwMu…iTexCo‹d4x
;

17298 
GLEW_FUN_EXPORT
 
PFNGLNORMAL3XPROC
 
	g__gÀwN‹mÆ3x
;

17299 
GLEW_FUN_EXPORT
 
PFNGLORTHOFPROC
 
	g__gÀwOπhof
;

17300 
GLEW_FUN_EXPORT
 
PFNGLORTHOXPROC
 
	g__gÀwOπhox
;

17301 
GLEW_FUN_EXPORT
 
PFNGLPOINTSIZEXPROC
 
	g__gÀwPoötSizex
;

17302 
GLEW_FUN_EXPORT
 
PFNGLPOLYGONOFFSETXPROC
 
	g__gÀwPﬁyg⁄Off£tx
;

17303 
GLEW_FUN_EXPORT
 
PFNGLROTATEXPROC
 
	g__gÀwRŸ©ex
;

17304 
GLEW_FUN_EXPORT
 
PFNGLSAMPLECOVERAGEXPROC
 
	g__gÀwSam∂eCovîagex
;

17305 
GLEW_FUN_EXPORT
 
PFNGLSCALEXPROC
 
	g__gÀwSˇÀx
;

17306 
GLEW_FUN_EXPORT
 
PFNGLTEXENVXPROC
 
	g__gÀwTexEnvx
;

17307 
GLEW_FUN_EXPORT
 
PFNGLTEXENVXVPROC
 
	g__gÀwTexEnvxv
;

17308 
GLEW_FUN_EXPORT
 
PFNGLTEXPARAMETERXPROC
 
	g__gÀwTexP¨amëîx
;

17309 
GLEW_FUN_EXPORT
 
PFNGLTRANSLATEXPROC
 
	g__gÀwTøn¶©ex
;

17311 
GLEW_FUN_EXPORT
 
PFNGLCLIPPLANEFPROC
 
	g__gÀwClùPœ√f
;

17312 
GLEW_FUN_EXPORT
 
PFNGLCLIPPLANEXPROC
 
	g__gÀwClùPœ√x
;

17313 
GLEW_FUN_EXPORT
 
PFNGLGETCLIPPLANEFPROC
 
	g__gÀwGëClùPœ√f
;

17314 
GLEW_FUN_EXPORT
 
PFNGLGETCLIPPLANEXPROC
 
	g__gÀwGëClùPœ√x
;

17315 
GLEW_FUN_EXPORT
 
PFNGLGETFIXEDVPROC
 
	g__gÀwGëFixedv
;

17316 
GLEW_FUN_EXPORT
 
PFNGLGETLIGHTXVPROC
 
	g__gÀwGëLightxv
;

17317 
GLEW_FUN_EXPORT
 
PFNGLGETMATERIALXVPROC
 
	g__gÀwGëM©îülxv
;

17318 
GLEW_FUN_EXPORT
 
PFNGLGETTEXENVXVPROC
 
	g__gÀwGëTexEnvxv
;

17319 
GLEW_FUN_EXPORT
 
PFNGLGETTEXPARAMETERXVPROC
 
	g__gÀwGëTexP¨amëîxv
;

17320 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERXPROC
 
	g__gÀwPoötP¨amëîx
;

17321 
GLEW_FUN_EXPORT
 
PFNGLPOINTPARAMETERXVPROC
 
	g__gÀwPoötP¨amëîxv
;

17322 
GLEW_FUN_EXPORT
 
PFNGLPOINTSIZEPOINTEROESPROC
 
	g__gÀwPoötSizePoöãrOES
;

17323 
GLEW_FUN_EXPORT
 
PFNGLTEXPARAMETERXVPROC
 
	g__gÀwTexP¨amëîxv
;

17325 
GLEW_FUN_EXPORT
 
PFNGLERRORSTRINGREGALPROC
 
	g__gÀwEº‹SåögREGAL
;

17327 
GLEW_FUN_EXPORT
 
PFNGLGETEXTENSIONREGALPROC
 
	g__gÀwGëExãnsi⁄REGAL
;

17328 
GLEW_FUN_EXPORT
 
PFNGLISSUPPORTEDREGALPROC
 
	g__gÀwIsSuµ‹ãdREGAL
;

17330 
GLEW_FUN_EXPORT
 
PFNGLLOGMESSAGECALLBACKREGALPROC
 
	g__gÀwLogMesßgeCÆlbackREGAL
;

17332 
GLEW_FUN_EXPORT
 
PFNGLDETAILTEXFUNCSGISPROC
 
	g__gÀwDëaûTexFuncSGIS
;

17333 
GLEW_FUN_EXPORT
 
PFNGLGETDETAILTEXFUNCSGISPROC
 
	g__gÀwGëDëaûTexFuncSGIS
;

17335 
GLEW_FUN_EXPORT
 
PFNGLFOGFUNCSGISPROC
 
	g__gÀwFogFuncSGIS
;

17336 
GLEW_FUN_EXPORT
 
PFNGLGETFOGFUNCSGISPROC
 
	g__gÀwGëFogFuncSGIS
;

17338 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEMASKSGISPROC
 
	g__gÀwSam∂eMaskSGIS
;

17339 
GLEW_FUN_EXPORT
 
PFNGLSAMPLEPATTERNSGISPROC
 
	g__gÀwSam∂eP©ã∫SGIS
;

17341 
GLEW_FUN_EXPORT
 
PFNGLGETSHARPENTEXFUNCSGISPROC
 
	g__gÀwGëSh¨≥nTexFuncSGIS
;

17342 
GLEW_FUN_EXPORT
 
PFNGLSHARPENTEXFUNCSGISPROC
 
	g__gÀwSh¨≥nTexFuncSGIS
;

17344 
GLEW_FUN_EXPORT
 
PFNGLTEXIMAGE4DSGISPROC
 
	g__gÀwTexImage4DSGIS
;

17345 
GLEW_FUN_EXPORT
 
PFNGLTEXSUBIMAGE4DSGISPROC
 
	g__gÀwTexSubImage4DSGIS
;

17347 
GLEW_FUN_EXPORT
 
PFNGLGETTEXFILTERFUNCSGISPROC
 
	g__gÀwGëTexFûãrFuncSGIS
;

17348 
GLEW_FUN_EXPORT
 
PFNGLTEXFILTERFUNCSGISPROC
 
	g__gÀwTexFûãrFuncSGIS
;

17350 
GLEW_FUN_EXPORT
 
PFNGLASYNCMARKERSGIXPROC
 
	g__gÀwAsyncM¨kîSGIX
;

17351 
GLEW_FUN_EXPORT
 
PFNGLDELETEASYNCMARKERSSGIXPROC
 
	g__gÀwDñëeAsyncM¨kîsSGIX
;

17352 
GLEW_FUN_EXPORT
 
PFNGLFINISHASYNCSGIXPROC
 
	g__gÀwFöishAsyncSGIX
;

17353 
GLEW_FUN_EXPORT
 
PFNGLGENASYNCMARKERSSGIXPROC
 
	g__gÀwGíAsyncM¨kîsSGIX
;

17354 
GLEW_FUN_EXPORT
 
PFNGLISASYNCMARKERSGIXPROC
 
	g__gÀwIsAsyncM¨kîSGIX
;

17355 
GLEW_FUN_EXPORT
 
PFNGLPOLLASYNCSGIXPROC
 
	g__gÀwPﬁlAsyncSGIX
;

17357 
GLEW_FUN_EXPORT
 
PFNGLFLUSHRASTERSGIXPROC
 
	g__gÀwFlushRa°îSGIX
;

17359 
GLEW_FUN_EXPORT
 
PFNGLTEXTUREFOGSGIXPROC
 
	g__gÀwTextuªFogSGIX
;

17361 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTCOLORMATERIALSGIXPROC
 
	g__gÀwFøgmítCﬁ‹M©îülSGIX
;

17362 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELFSGIXPROC
 
	g__gÀwFøgmítLightModñfSGIX
;

17363 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELFVSGIXPROC
 
	g__gÀwFøgmítLightModñfvSGIX
;

17364 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELISGIXPROC
 
	g__gÀwFøgmítLightModñiSGIX
;

17365 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTMODELIVSGIXPROC
 
	g__gÀwFøgmítLightModñivSGIX
;

17366 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTFSGIXPROC
 
	g__gÀwFøgmítLightfSGIX
;

17367 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTFVSGIXPROC
 
	g__gÀwFøgmítLightfvSGIX
;

17368 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTISGIXPROC
 
	g__gÀwFøgmítLightiSGIX
;

17369 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTLIGHTIVSGIXPROC
 
	g__gÀwFøgmítLightivSGIX
;

17370 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALFSGIXPROC
 
	g__gÀwFøgmítM©îülfSGIX
;

17371 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALFVSGIXPROC
 
	g__gÀwFøgmítM©îülfvSGIX
;

17372 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALISGIXPROC
 
	g__gÀwFøgmítM©îüliSGIX
;

17373 
GLEW_FUN_EXPORT
 
PFNGLFRAGMENTMATERIALIVSGIXPROC
 
	g__gÀwFøgmítM©îülivSGIX
;

17374 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTLIGHTFVSGIXPROC
 
	g__gÀwGëFøgmítLightfvSGIX
;

17375 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTLIGHTIVSGIXPROC
 
	g__gÀwGëFøgmítLightivSGIX
;

17376 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTMATERIALFVSGIXPROC
 
	g__gÀwGëFøgmítM©îülfvSGIX
;

17377 
GLEW_FUN_EXPORT
 
PFNGLGETFRAGMENTMATERIALIVSGIXPROC
 
	g__gÀwGëFøgmítM©îülivSGIX
;

17379 
GLEW_FUN_EXPORT
 
PFNGLFRAMEZOOMSGIXPROC
 
	g__gÀwFømeZoomSGIX
;

17381 
GLEW_FUN_EXPORT
 
PFNGLPIXELTEXGENSGIXPROC
 
	g__gÀwPixñTexGíSGIX
;

17383 
GLEW_FUN_EXPORT
 
PFNGLREFERENCEPLANESGIXPROC
 
	g__gÀwRe„ªn˚Pœ√SGIX
;

17385 
GLEW_FUN_EXPORT
 
PFNGLSPRITEPARAMETERFSGIXPROC
 
	g__gÀwS¥ôeP¨amëîfSGIX
;

17386 
GLEW_FUN_EXPORT
 
PFNGLSPRITEPARAMETERFVSGIXPROC
 
	g__gÀwS¥ôeP¨amëîfvSGIX
;

17387 
GLEW_FUN_EXPORT
 
PFNGLSPRITEPARAMETERISGIXPROC
 
	g__gÀwS¥ôeP¨amëîiSGIX
;

17388 
GLEW_FUN_EXPORT
 
PFNGLSPRITEPARAMETERIVSGIXPROC
 
	g__gÀwS¥ôeP¨amëîivSGIX
;

17390 
GLEW_FUN_EXPORT
 
PFNGLTAGSAMPLEBUFFERSGIXPROC
 
	g__gÀwTagSam∂eBuf„rSGIX
;

17392 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLEPARAMETERFVSGIPROC
 
	g__gÀwCﬁ‹TabÀP¨amëîfvSGI
;

17393 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLEPARAMETERIVSGIPROC
 
	g__gÀwCﬁ‹TabÀP¨amëîivSGI
;

17394 
GLEW_FUN_EXPORT
 
PFNGLCOLORTABLESGIPROC
 
	g__gÀwCﬁ‹TabÀSGI
;

17395 
GLEW_FUN_EXPORT
 
PFNGLCOPYCOLORTABLESGIPROC
 
	g__gÀwC›yCﬁ‹TabÀSGI
;

17396 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPARAMETERFVSGIPROC
 
	g__gÀwGëCﬁ‹TabÀP¨amëîfvSGI
;

17397 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLEPARAMETERIVSGIPROC
 
	g__gÀwGëCﬁ‹TabÀP¨amëîivSGI
;

17398 
GLEW_FUN_EXPORT
 
PFNGLGETCOLORTABLESGIPROC
 
	g__gÀwGëCﬁ‹TabÀSGI
;

17400 
GLEW_FUN_EXPORT
 
PFNGLFINISHTEXTURESUNXPROC
 
	g__gÀwFöishTextuªSUNX
;

17402 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORBSUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹bSUN
;

17403 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORDSUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹dSUN
;

17404 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORFSUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹fSUN
;

17405 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORISUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹iSUN
;

17406 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORSSUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹sSUN
;

17407 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORUBSUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹ubSUN
;

17408 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORUISUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹uiSUN
;

17409 
GLEW_FUN_EXPORT
 
PFNGLGLOBALALPHAFACTORUSSUNPROC
 
	g__gÀwGlobÆAÕhaFa˘‹usSUN
;

17411 
GLEW_FUN_EXPORT
 
PFNGLREADVIDEOPIXELSSUNPROC
 
	g__gÀwRódVideoPixñsSUN
;

17413 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEPOINTERSUNPROC
 
	g__gÀwRïœ˚mítCodePoöãrSUN
;

17414 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUBSUNPROC
 
	g__gÀwRïœ˚mítCodeubSUN
;

17415 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUBVSUNPROC
 
	g__gÀwRïœ˚mítCodeubvSUN
;

17416 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUISUNPROC
 
	g__gÀwRïœ˚mítCodeuiSUN
;

17417 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUIVSUNPROC
 
	g__gÀwRïœ˚mítCodeuivSUN
;

17418 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUSSUNPROC
 
	g__gÀwRïœ˚mítCodeusSUN
;

17419 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUSVSUNPROC
 
	g__gÀwRïœ˚mítCodeusvSUN
;

17421 
GLEW_FUN_EXPORT
 
PFNGLCOLOR3FVERTEX3FSUNPROC
 
	g__gÀwCﬁ‹3fVîãx3fSUN
;

17422 
GLEW_FUN_EXPORT
 
PFNGLCOLOR3FVERTEX3FVSUNPROC
 
	g__gÀwCﬁ‹3fVîãx3fvSUN
;

17423 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwCﬁ‹4fN‹mÆ3fVîãx3fSUN
;

17424 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwCﬁ‹4fN‹mÆ3fVîãx3fvSUN
;

17425 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4UBVERTEX2FSUNPROC
 
	g__gÀwCﬁ‹4ubVîãx2fSUN
;

17426 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4UBVERTEX2FVSUNPROC
 
	g__gÀwCﬁ‹4ubVîãx2fvSUN
;

17427 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4UBVERTEX3FSUNPROC
 
	g__gÀwCﬁ‹4ubVîãx3fSUN
;

17428 
GLEW_FUN_EXPORT
 
PFNGLCOLOR4UBVERTEX3FVSUNPROC
 
	g__gÀwCﬁ‹4ubVîãx3fvSUN
;

17429 
GLEW_FUN_EXPORT
 
PFNGLNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwN‹mÆ3fVîãx3fSUN
;

17430 
GLEW_FUN_EXPORT
 
PFNGLNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwN‹mÆ3fVîãx3fvSUN
;

17431 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
;

17432 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
;

17433 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
;

17434 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
;

17435 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
;

17436 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
;

17437 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
;

17438 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
;

17439 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
;

17440 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
;

17441 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
;

17442 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
;

17443 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
;

17444 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
;

17445 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
 
	g__gÀwRïœ˚mítCodeuiVîãx3fSUN
;

17446 
GLEW_FUN_EXPORT
 
PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
 
	g__gÀwRïœ˚mítCodeuiVîãx3fvSUN
;

17447 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
 
	g__gÀwTexCo‹d2fCﬁ‹3fVîãx3fSUN
;

17448 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
 
	g__gÀwTexCo‹d2fCﬁ‹3fVîãx3fvSUN
;

17449 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
;

17450 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
;

17451 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
 
	g__gÀwTexCo‹d2fCﬁ‹4ubVîãx3fSUN
;

17452 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
 
	g__gÀwTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
;

17453 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
 
	g__gÀwTexCo‹d2fN‹mÆ3fVîãx3fSUN
;

17454 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
 
	g__gÀwTexCo‹d2fN‹mÆ3fVîãx3fvSUN
;

17455 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FVERTEX3FSUNPROC
 
	g__gÀwTexCo‹d2fVîãx3fSUN
;

17456 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD2FVERTEX3FVSUNPROC
 
	g__gÀwTexCo‹d2fVîãx3fvSUN
;

17457 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
 
	g__gÀwTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
;

17458 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
 
	g__gÀwTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
;

17459 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD4FVERTEX4FSUNPROC
 
	g__gÀwTexCo‹d4fVîãx4fSUN
;

17460 
GLEW_FUN_EXPORT
 
PFNGLTEXCOORD4FVERTEX4FVSUNPROC
 
	g__gÀwTexCo‹d4fVîãx4fvSUN
;

17462 
GLEW_FUN_EXPORT
 
PFNGLADDSWAPHINTRECTWINPROC
 
	g__gÀwAddSw≠HötRe˘WIN
;

17464 #i‡
deföed
(
GLEW_MX
Ë&& !deföed(
_WIN32
)

17465 
	sGLEWC⁄ãxtSåu˘


17469 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_1_1
;

17470 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_1_2
;

17471 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_1_2_1
;

17472 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_1_3
;

17473 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_1_4
;

17474 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_1_5
;

17475 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_2_0
;

17476 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_2_1
;

17477 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_3_0
;

17478 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_3_1
;

17479 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_3_2
;

17480 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_3_3
;

17481 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_4_0
;

17482 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_4_1
;

17483 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_4_2
;

17484 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_4_3
;

17485 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_VERSION_4_4
;

17486 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_3DFX_mu…ißm∂e
;

17487 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_3DFX_tbuf„r
;

17488 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_3DFX_ãxtuª_com¥essi⁄_FXT1
;

17489 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_bÀnd_mömax_Á˘‹
;

17490 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_c⁄£rv©ive_dïth
;

17491 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_debug_ouçut
;

17492 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_dïth_˛amp_£∑øã
;

17493 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_døw_buf„rs_bÀnd
;

17494 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_öãæóved_ñemíts
;

17495 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_mu…i_døw_ödúe˘
;

17496 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_«me_gí_dñëe
;

17497 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_≥rf‹m™˚_m⁄ô‹
;

17498 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_pö√d_mem‹y
;

17499 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_quîy_buf„r_obje˘
;

17500 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_ßm∂e_posôi⁄s
;

17501 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_£amÀss_cubem≠_≥r_ãxtuª
;

17502 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_shadî_°ícû_exp‹t
;

17503 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_shadî_åö¨y_mömax
;

17504 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_•¨£_ãxtuª
;

17505 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_°ícû_›î©i⁄_exãnded
;

17506 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_ãxtuª_ãxtuª4
;

17507 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_å™sf‹m_„edback3_löes_åüngÀs
;

17508 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_vîãx_shadî_œyî
;

17509 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_vîãx_shadî_ãs£Œ©‹
;

17510 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_AMD_vîãx_shadî_võwp‹t_ödex
;

17511 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ANGLE_dïth_ãxtuª
;

17512 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ANGLE_‰amebuf„r_blô
;

17513 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ANGLE_‰amebuf„r_mu…ißm∂e
;

17514 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ANGLE_ö°™˚d_¨øys
;

17515 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ANGLE_∑ck_ªvî£_row_‹dî
;

17516 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ANGLE_¥ogøm_bö¨y
;

17517 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ANGLE_ãxtuª_com¥essi⁄_dxt1
;

17518 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ANGLE_ãxtuª_com¥essi⁄_dxt3
;

17519 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ANGLE_ãxtuª_com¥essi⁄_dxt5
;

17520 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ANGLE_ãxtuª_ußge
;

17521 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ANGLE_timî_quîy
;

17522 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ANGLE_å™¶©ed_shadî_sour˚
;

17523 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_aux_dïth_°ícû
;

17524 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_˛õ¡_°‹age
;

17525 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_ñemít_¨øy
;

17526 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_„n˚
;

17527 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_Êﬂt_pixñs
;

17528 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_Êush_buf„r_ønge
;

17529 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_obje˘_purgóbÀ
;

17530 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_pixñ_buf„r
;

17531 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_rgb_422
;

17532 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_row_byãs
;

17533 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_•ecuœr_ve˘‹
;

17534 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_ãxtuª_ønge
;

17535 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_å™sf‹m_höt
;

17536 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_vîãx_¨øy_obje˘
;

17537 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_vîãx_¨øy_ønge
;

17538 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_vîãx_¥ogøm_evÆu©‹s
;

17539 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_APPLE_ycb¸_422
;

17540 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ES2_com∑tibûôy
;

17541 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ES3_com∑tibûôy
;

17542 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_¨øys_of_¨øys
;

17543 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ba£_ö°™˚
;

17544 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_bödÀss_ãxtuª
;

17545 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_bÀnd_func_exãnded
;

17546 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_buf„r_°‹age
;

17547 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_˛_evít
;

17548 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_˛ór_buf„r_obje˘
;

17549 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_˛ór_ãxtuª
;

17550 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_cﬁ‹_buf„r_Êﬂt
;

17551 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_com∑tibûôy
;

17552 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_com¥es£d_ãxtuª_pixñ_°‹age
;

17553 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_compuã_shadî
;

17554 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_compuã_v¨übÀ_group_size
;

17555 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_c⁄£rv©ive_dïth
;

17556 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_c›y_buf„r
;

17557 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_c›y_image
;

17558 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_debug_ouçut
;

17559 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_dïth_buf„r_Êﬂt
;

17560 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_dïth_˛amp
;

17561 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_dïth_ãxtuª
;

17562 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_døw_buf„rs
;

17563 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_døw_buf„rs_bÀnd
;

17564 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_døw_ñemíts_ba£_vîãx
;

17565 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_døw_ödúe˘
;

17566 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_døw_ö°™˚d
;

17567 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_íh™˚d_œyouts
;

17568 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ex∂icô_©åib_loˇti⁄
;

17569 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ex∂icô_unif‹m_loˇti⁄
;

17570 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰agmít_co‹d_c⁄víti⁄s
;

17571 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰agmít_œyî_võwp‹t
;

17572 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰agmít_¥ogøm
;

17573 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰agmít_¥ogøm_shadow
;

17574 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰agmít_shadî
;

17575 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰amebuf„r_no_©èchmíts
;

17576 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰amebuf„r_obje˘
;

17577 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_‰amebuf„r_sRGB
;

17578 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_geomëry_shadî4
;

17579 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_gë_¥ogøm_bö¨y
;

17580 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_gpu_shadî5
;

17581 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_gpu_shadî_Â64
;

17582 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_hÆf_Êﬂt_pixñ
;

17583 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_hÆf_Êﬂt_vîãx
;

17584 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_imagög
;

17585 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ödúe˘_∑ømëîs
;

17586 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ö°™˚d_¨øys
;

17587 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_öã∫Æf‹m©_quîy
;

17588 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_öã∫Æf‹m©_quîy2
;

17589 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_övÆid©e_subd©a
;

17590 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_m≠_buf„r_Æignmít
;

17591 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_m≠_buf„r_ønge
;

17592 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_m©rix_∑Àâe
;

17593 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_mu…i_böd
;

17594 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_mu…i_døw_ödúe˘
;

17595 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_mu…ißm∂e
;

17596 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_mu…ôextuª
;

17597 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_oc˛usi⁄_quîy
;

17598 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_oc˛usi⁄_quîy2
;

17599 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_pixñ_buf„r_obje˘
;

17600 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_poöt_∑ømëîs
;

17601 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_poöt_•rôe
;

17602 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_¥ogøm_öãrÁ˚_quîy
;

17603 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_¥ovokög_vîãx
;

17604 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_quîy_buf„r_obje˘
;

17605 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_robu°_buf„r_ac˚ss_behavi‹
;

17606 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_robu°√ss
;

17607 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_robu°√ss_≠∂iˇti⁄_isﬁ©i⁄
;

17608 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_robu°√ss_sh¨e_group_isﬁ©i⁄
;

17609 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ßm∂e_shadög
;

17610 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ßm∂î_obje˘s
;

17611 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_£amÀss_cube_m≠
;

17612 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_£amÀss_cubem≠_≥r_ãxtuª
;

17613 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_£∑øã_shadî_obje˘s
;

17614 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_©omic_cou¡îs
;

17615 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_bô_ícodög
;

17616 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_døw_∑ømëîs
;

17617 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_group_vŸe
;

17618 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_image_lﬂd_°‹e
;

17619 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_image_size
;

17620 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_obje˘s
;

17621 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_¥ecisi⁄
;

17622 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_°ícû_exp‹t
;

17623 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_°‹age_buf„r_obje˘
;

17624 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_subroutöe
;

17625 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadî_ãxtuª_lod
;

17626 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadög_œnguage_100
;

17627 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadög_œnguage_420∑ck
;

17628 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadög_œnguage_ö˛ude
;

17629 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadög_œnguage_∑ckög
;

17630 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadow
;

17631 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_shadow_ambõ¡
;

17632 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_•¨£_ãxtuª
;

17633 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_°ícû_ãxturög
;

17634 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_sync
;

17635 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãs£Œ©i⁄_shadî
;

17636 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_b‹dî_˛amp
;

17637 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_buf„r_obje˘
;

17638 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_buf„r_obje˘_rgb32
;

17639 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_buf„r_ønge
;

17640 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_com¥essi⁄
;

17641 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_com¥essi⁄_b±c
;

17642 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_com¥essi⁄_rgtc
;

17643 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_cube_m≠
;

17644 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_cube_m≠_¨øy
;

17645 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_ív_add
;

17646 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_ív_comböe
;

17647 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_ív_¸ossb¨
;

17648 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_ív_dŸ3
;

17649 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_Êﬂt
;

17650 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_g©hî
;

17651 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_múr‹_˛amp_to_edge
;

17652 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_múr‹ed_ª≥©
;

17653 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_mu…ißm∂e
;

17654 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_n⁄_powî_of_two
;

17655 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_quîy_Àvñs
;

17656 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_quîy_lod
;

17657 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_ª˘™gÀ
;

17658 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_rg
;

17659 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_rgb10_a2ui
;

17660 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_°ícû8
;

17661 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_°‹age
;

17662 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_°‹age_mu…ißm∂e
;

17663 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_swizzÀ
;

17664 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_ãxtuª_võw
;

17665 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_timî_quîy
;

17666 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_å™sf‹m_„edback2
;

17667 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_å™sf‹m_„edback3
;

17668 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_å™sf‹m_„edback_ö°™˚d
;

17669 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_å™•o£_m©rix
;

17670 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_unif‹m_buf„r_obje˘
;

17671 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_¨øy_bgø
;

17672 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_¨øy_obje˘
;

17673 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_©åib_64bô
;

17674 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_©åib_bödög
;

17675 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_bÀnd
;

17676 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_buf„r_obje˘
;

17677 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_¥ogøm
;

17678 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_shadî
;

17679 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_ty≥_10f_11f_11f_ªv
;

17680 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_vîãx_ty≥_2_10_10_10_ªv
;

17681 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_võwp‹t_¨øy
;

17682 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ARB_wödow_pos
;

17683 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATIX_poöt_•rôes
;

17684 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATIX_ãxtuª_ív_comböe3
;

17685 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATIX_ãxtuª_ív_rouã
;

17686 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATIX_vîãx_shadî_ouçut_poöt_size
;

17687 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_døw_buf„rs
;

17688 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ñemít_¨øy
;

17689 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ívm≠_bumpm≠
;

17690 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_‰agmít_shadî
;

17691 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_m≠_obje˘_buf„r
;

17692 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_memöfo
;

17693 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_≤_åüngÀs
;

17694 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_£∑øã_°ícû
;

17695 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_shadî_ãxtuª_lod
;

17696 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ãxt_‰agmít_shadî
;

17697 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ãxtuª_com¥essi⁄_3dc
;

17698 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ãxtuª_ív_comböe3
;

17699 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ãxtuª_Êﬂt
;

17700 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_ãxtuª_múr‹_⁄˚
;

17701 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_vîãx_¨øy_obje˘
;

17702 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_vîãx_©åib_¨øy_obje˘
;

17703 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_ATI_vîãx_°ªams
;

17704 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_422_pixñs
;

17705 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_Cg_shadî
;

17706 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_abgr
;

17707 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bgø
;

17708 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bödabÀ_unif‹m
;

17709 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bÀnd_cﬁ‹
;

17710 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bÀnd_equ©i⁄_£∑øã
;

17711 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bÀnd_func_£∑øã
;

17712 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bÀnd_logic_›
;

17713 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bÀnd_mömax
;

17714 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_bÀnd_subåa˘
;

17715 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_˛ù_vﬁume_höt
;

17716 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_cmyka
;

17717 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_cﬁ‹_subèbÀ
;

17718 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_compûed_vîãx_¨øy
;

17719 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_c⁄vﬁuti⁄
;

17720 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_co‹dö©e_‰ame
;

17721 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_c›y_ãxtuª
;

17722 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_cuŒ_vîãx
;

17723 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_debug_m¨kî
;

17724 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_dïth_bounds_ã°
;

17725 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_dúe˘_°©e_ac˚ss
;

17726 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_døw_buf„rs2
;

17727 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_døw_ö°™˚d
;

17728 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_døw_ønge_ñemíts
;

17729 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_fog_co‹d
;

17730 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_‰agmít_lightög
;

17731 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_‰amebuf„r_blô
;

17732 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_‰amebuf„r_mu…ißm∂e
;

17733 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
;

17734 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_‰amebuf„r_obje˘
;

17735 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_‰amebuf„r_sRGB
;

17736 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_geomëry_shadî4
;

17737 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_gpu_¥ogøm_∑ømëîs
;

17738 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_gpu_shadî4
;

17739 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_hi°ogøm
;

17740 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ödex_¨øy_f‹m©s
;

17741 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ödex_func
;

17742 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ödex_m©îül
;

17743 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ödex_ãxtuª
;

17744 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_light_ãxtuª
;

17745 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_misc_©åibuã
;

17746 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_mu…i_døw_¨øys
;

17747 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_mu…ißm∂e
;

17748 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_∑cked_dïth_°ícû
;

17749 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_∑cked_Êﬂt
;

17750 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_∑cked_pixñs
;

17751 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_∑Àâed_ãxtuª
;

17752 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_pixñ_buf„r_obje˘
;

17753 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_pixñ_å™sf‹m
;

17754 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
;

17755 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_poöt_∑ømëîs
;

17756 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_pﬁyg⁄_off£t
;

17757 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_¥ovokög_vîãx
;

17758 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ªsˇÀ_n‹mÆ
;

17759 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_s˚√_m¨kî
;

17760 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_£c⁄d¨y_cﬁ‹
;

17761 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_£∑øã_shadî_obje˘s
;

17762 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_£∑øã_•ecuœr_cﬁ‹
;

17763 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_shadî_image_lﬂd_°‹e
;

17764 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_shadow_funcs
;

17765 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_sh¨ed_ãxtuª_∑Àâe
;

17766 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_°ícû_˛ór_èg
;

17767 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_°ícû_two_side
;

17768 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_°ícû_wøp
;

17769 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_subãxtuª
;

17770 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª
;

17771 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª3D
;

17772 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_¨øy
;

17773 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_buf„r_obje˘
;

17774 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_com¥essi⁄_dxt1
;

17775 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_com¥essi⁄_œtc
;

17776 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_com¥essi⁄_rgtc
;

17777 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_com¥essi⁄_s3tc
;

17778 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_cube_m≠
;

17779 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_edge_˛amp
;

17780 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_ív
;

17781 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_ív_add
;

17782 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_ív_comböe
;

17783 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_ív_dŸ3
;

17784 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_fûãr_™isŸr›ic
;

17785 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_öãgî
;

17786 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_lod_büs
;

17787 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_múr‹_˛amp
;

17788 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_obje˘
;

17789 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_≥πurb_n‹mÆ
;

17790 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_ª˘™gÀ
;

17791 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_sRGB
;

17792 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_sRGB_decode
;

17793 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_sh¨ed_exp⁄ít
;

17794 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_¢‹m
;

17795 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_ãxtuª_swizzÀ
;

17796 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_timî_quîy
;

17797 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_å™sf‹m_„edback
;

17798 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_vîãx_¨øy
;

17799 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_vîãx_¨øy_bgø
;

17800 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_vîãx_©åib_64bô
;

17801 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_vîãx_shadî
;

17802 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_vîãx_weightög
;

17803 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_EXT_x11_sync_obje˘
;

17804 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_GREMEDY_‰ame_ãrmö©‹
;

17805 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_GREMEDY_°rög_m¨kî
;

17806 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_HP_c⁄vﬁuti⁄_b‹dî_modes
;

17807 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_HP_image_å™sf‹m
;

17808 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_HP_oc˛usi⁄_ã°
;

17809 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_HP_ãxtuª_lightög
;

17810 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_IBM_cuŒ_vîãx
;

17811 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_IBM_mu…imode_døw_¨øys
;

17812 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_IBM_ø°îpos_˛ù
;

17813 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_IBM_°©ic_d©a
;

17814 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_IBM_ãxtuª_múr‹ed_ª≥©
;

17815 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_IBM_vîãx_¨øy_li°s
;

17816 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_INGR_cﬁ‹_˛amp
;

17817 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_INGR_öãæa˚_ªad
;

17818 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_INTEL_m≠_ãxtuª
;

17819 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_INTEL_∑øŒñ_¨øys
;

17820 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_INTEL_ãxtuª_sciss‹
;

17821 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_KHR_debug
;

17822 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_KHR_ãxtuª_com¥essi⁄_a°c_ldr
;

17823 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_KTX_buf„r_ªgi⁄
;

17824 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_MESAX_ãxtuª_°ack
;

17825 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_MESA_∑ck_övît
;

17826 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_MESA_ªsize_buf„rs
;

17827 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_MESA_wödow_pos
;

17828 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_MESA_ycb¸_ãxtuª
;

17829 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NVX_c⁄dôi⁄Æ_ªndî
;

17830 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NVX_gpu_mem‹y_öfo
;

17831 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_bödÀss_mu…i_døw_ödúe˘
;

17832 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_bödÀss_ãxtuª
;

17833 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_bÀnd_equ©i⁄_adv™˚d
;

17834 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_bÀnd_equ©i⁄_adv™˚d_cohîít
;

17835 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_bÀnd_squ¨e
;

17836 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_compuã_¥ogøm5
;

17837 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_c⁄dôi⁄Æ_ªndî
;

17838 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_c›y_dïth_to_cﬁ‹
;

17839 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_c›y_image
;

17840 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_dìp_ãxtuª3D
;

17841 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_dïth_buf„r_Êﬂt
;

17842 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_dïth_˛amp
;

17843 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_dïth_ønge_un˛am≥d
;

17844 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_døw_ãxtuª
;

17845 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_evÆu©‹s
;

17846 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ex∂icô_mu…ißm∂e
;

17847 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_„n˚
;

17848 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_Êﬂt_buf„r
;

17849 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_fog_di°™˚
;

17850 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_‰agmít_¥ogøm
;

17851 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_‰agmít_¥ogøm2
;

17852 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_‰agmít_¥ogøm4
;

17853 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_‰agmít_¥ogøm_›ti⁄
;

17854 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_‰amebuf„r_mu…ißm∂e_covîage
;

17855 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_geomëry_¥ogøm4
;

17856 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_geomëry_shadî4
;

17857 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_gpu_¥ogøm4
;

17858 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_gpu_¥ogøm5
;

17859 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_gpu_¥ogøm5_mem_exãnded
;

17860 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_gpu_¥ogøm_Â64
;

17861 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_gpu_shadî5
;

17862 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_hÆf_Êﬂt
;

17863 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_light_max_exp⁄ít
;

17864 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_mu…ißm∂e_covîage
;

17865 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_mu…ißm∂e_fûãr_höt
;

17866 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_oc˛usi⁄_quîy
;

17867 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_∑cked_dïth_°ícû
;

17868 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_∑ømëî_buf„r_obje˘
;

17869 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_∑ømëî_buf„r_obje˘2
;

17870 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_∑th_ªndîög
;

17871 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_pixñ_d©a_ønge
;

17872 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_poöt_•rôe
;

17873 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_¥e£¡_video
;

17874 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_¥imôive_ª°¨t
;

17875 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ªgi°î_comböîs
;

17876 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ªgi°î_comböîs2
;

17877 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_shadî_©omic_cou¡îs
;

17878 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_shadî_©omic_Êﬂt
;

17879 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_shadî_buf„r_lﬂd
;

17880 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_shadî_°‹age_buf„r_obje˘
;

17881 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãs£Œ©i⁄_¥ogøm5
;

17882 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxgí_emboss
;

17883 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxgí_ªÊe˘i⁄
;

17884 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_b¨rõr
;

17885 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_com¥essi⁄_vtc
;

17886 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_ív_comböe4
;

17887 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_ex∑nd_n‹mÆ
;

17888 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_mu…ißm∂e
;

17889 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_ª˘™gÀ
;

17890 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_shadî
;

17891 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_shadî2
;

17892 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_ãxtuª_shadî3
;

17893 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_å™sf‹m_„edback
;

17894 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_å™sf‹m_„edback2
;

17895 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vd∑u_öãr›
;

17896 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¨øy_ønge
;

17897 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¨øy_ønge2
;

17898 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_©åib_öãgî_64bô
;

17899 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_buf„r_unifõd_mem‹y
;

17900 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¥ogøm
;

17901 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¥ogøm1_1
;

17902 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¥ogøm2
;

17903 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¥ogøm2_›ti⁄
;

17904 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¥ogøm3
;

17905 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_vîãx_¥ogøm4
;

17906 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_NV_video_ˇ±uª
;

17907 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OES_byã_co‹dö©es
;

17908 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OES_com¥es£d_∑Àâed_ãxtuª
;

17909 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OES_ªad_f‹m©
;

17910 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OES_sögÀ_¥ecisi⁄
;

17911 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OML_öãæa˚
;

17912 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OML_ªßm∂e
;

17913 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_OML_subßm∂e
;

17914 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_PGI_misc_höts
;

17915 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_PGI_vîãx_höts
;

17916 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_REGAL_ES1_0_com∑tibûôy
;

17917 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_REGAL_ES1_1_com∑tibûôy
;

17918 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_REGAL_íabÀ
;

17919 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_REGAL_îr‹_°rög
;

17920 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_REGAL_exãnsi⁄_quîy
;

17921 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_REGAL_log
;

17922 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_REND_s¸ìn_co‹dö©es
;

17923 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_S3_s3tc
;

17924 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_cﬁ‹_ønge
;

17925 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_dëaû_ãxtuª
;

17926 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_fog_fun˘i⁄
;

17927 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_gíî©e_mùm≠
;

17928 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_mu…ißm∂e
;

17929 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_pixñ_ãxtuª
;

17930 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_poöt_löe_ãxgí
;

17931 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_sh¨≥n_ãxtuª
;

17932 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_ãxtuª4D
;

17933 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_ãxtuª_b‹dî_˛amp
;

17934 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_ãxtuª_edge_˛amp
;

17935 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_ãxtuª_fûãr4
;

17936 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_ãxtuª_lod
;

17937 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIS_ãxtuª_£À˘
;

17938 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_async
;

17939 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_async_hi°ogøm
;

17940 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_async_pixñ
;

17941 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_bÀnd_Æpha_mömax
;

17942 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_˛ùm≠
;

17943 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_c⁄vﬁuti⁄_accuøcy
;

17944 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_dïth_ãxtuª
;

17945 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_Êush_ø°î
;

17946 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_fog_off£t
;

17947 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_fog_ãxtuª
;

17948 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_‰agmít_•ecuœr_lightög
;

17949 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_‰amezoom
;

17950 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_öãæa˚
;

17951 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ú_ö°rumít1
;

17952 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_li°_¥i‹ôy
;

17953 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_pixñ_ãxtuª
;

17954 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_pixñ_ãxtuª_bôs
;

17955 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ª„ªn˚_∂™e
;

17956 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ªßm∂e
;

17957 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_shadow
;

17958 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_shadow_ambõ¡
;

17959 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_•rôe
;

17960 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_èg_ßm∂e_buf„r
;

17961 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ãxtuª_add_ív
;

17962 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ãxtuª_co‹dö©e_˛amp
;

17963 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ãxtuª_lod_büs
;

17964 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ãxtuª_mu…i_buf„r
;

17965 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ãxtuª_ønge
;

17966 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_ãxtuª_sˇÀ_büs
;

17967 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_vîãx_¥e˛ù
;

17968 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_vîãx_¥e˛ù_höt
;

17969 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGIX_y¸cb
;

17970 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGI_cﬁ‹_m©rix
;

17971 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGI_cﬁ‹_èbÀ
;

17972 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SGI_ãxtuª_cﬁ‹_èbÀ
;

17973 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUNX_c⁄°™t_d©a
;

17974 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_c⁄vﬁuti⁄_b‹dî_modes
;

17975 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_globÆ_Æpha
;

17976 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_mesh_¨øy
;

17977 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_ªad_video_pixñs
;

17978 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_¶i˚_accum
;

17979 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_åüngÀ_li°
;

17980 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_SUN_vîãx
;

17981 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_WIN_ph⁄g_shadög
;

17982 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_WIN_•ecuœr_fog
;

17983 
GLEW_VAR_EXPORT
 
GLboﬁón
 
	g__GLEW_WIN_sw≠_höt
;

17985 #ifde‡
GLEW_MX


17992 
	#GLEW_OK
 0

	)

17993 
	#GLEW_NO_ERROR
 0

	)

17994 
	#GLEW_ERROR_NO_GL_VERSION
 1

	)

17995 
	#GLEW_ERROR_GL_VERSION_10_ONLY
 2

	)

17996 
	#GLEW_ERROR_GLX_VERSION_11_ONLY
 3

	)

17999 
	#GLEW_VERSION
 1

	)

18000 
	#GLEW_VERSION_MAJOR
 2

	)

18001 
	#GLEW_VERSION_MINOR
 3

	)

18002 
	#GLEW_VERSION_MICRO
 4

	)

18005 #ifde‡
GLEW_MX


18007 
GLEWC⁄ãxtSåu˘
 
	tGLEWC⁄ãxt
;

18008 
GLEWAPI
 
GLíum
 
GLEWAPIENTRY
 
gÀwC⁄ãxtInô
 (
GLEWC⁄ãxt
 *
˘x
);

18009 
GLEWAPI
 
GLboﬁón
 
GLEWAPIENTRY
 
gÀwC⁄ãxtIsSuµ‹ãd
 (c⁄° 
GLEWC⁄ãxt
 *
˘x
, c⁄° *
«me
);

18011 
	#gÀwInô
(Ë
	`gÀwC⁄ãxtInô
(
	`gÀwGëC⁄ãxt
())

	)

18012 
	#gÀwIsSuµ‹ãd
(
x
Ë
	`gÀwC⁄ãxtIsSuµ‹ãd
(
	`gÀwGëC⁄ãxt
(), x)

	)

18013 
	#gÀwIsExãnsi⁄Suµ‹ãd
(
x
Ë
	`gÀwIsSuµ‹ãd
(x)

	)

18015 
	#GLEW_GET_VAR
(
x
Ë(*(c⁄° 
GLboﬁón
*)&(
	`gÀwGëC⁄ãxt
()->x))

	)

18016 #ifde‡
_WIN32


18017 
	#GLEW_GET_FUN
(
x
Ë
	`gÀwGëC⁄ãxt
()->
	)
x

18019 
	#GLEW_GET_FUN
(
x
Ë
	)
x

18024 
GLEWAPI
 
GLíum
 
GLEWAPIENTRY
 
gÀwInô
 ();

18025 
GLEWAPI
 
GLboﬁón
 
GLEWAPIENTRY
 
gÀwIsSuµ‹ãd
 (c⁄° *
«me
);

18026 
	#gÀwIsExãnsi⁄Suµ‹ãd
(
x
Ë
	`gÀwIsSuµ‹ãd
(x)

	)

18028 
	#GLEW_GET_VAR
(
x
Ë(*(c⁄° 
GLboﬁón
*)&x)

	)

18029 
	#GLEW_GET_FUN
(
x
Ë
	)
x

18033 
GLEWAPI
 
GLboﬁón
 
	ggÀwEx≥rimíèl
;

18034 
GLEWAPI
 
GLboﬁón
 
GLEWAPIENTRY
 
gÀwGëExãnsi⁄
 (c⁄° *
«me
);

18035 
GLEWAPI
 c⁄° 
GLubyã
 * 
GLEWAPIENTRY
 
gÀwGëEº‹Såög
 (
GLíum
 
îr‹
);

18036 
GLEWAPI
 c⁄° 
GLubyã
 * 
GLEWAPIENTRY
 
gÀwGëSåög
 (
GLíum
 
«me
);

18038 #ifde‡
__˝lu•lus


18042 #ifde‡
GLEW_APIENTRY_DEFINED


18043 #unde‡
GLEW_APIENTRY_DEFINED


18044 #unde‡
APIENTRY


18045 #unde‡
GLAPIENTRY


18046 
	#GLAPIENTRY


	)

18049 #ifde‡
GLEW_CALLBACK_DEFINED


18050 #unde‡
GLEW_CALLBACK_DEFINED


18051 #unde‡
CALLBACK


18054 #ifde‡
GLEW_WINGDIAPI_DEFINED


18055 #unde‡
GLEW_WINGDIAPI_DEFINED


18056 #unde‡
WINGDIAPI


18059 #unde‡
GLAPI


	@/usr/include/GL/glext.h

1 #i‚de‡
__gÀxt_h_


2 
	#__gÀxt_h_
 1

	)

4 #ifde‡
__˝lu•lus


39 #i‡
deföed
(
_WIN32
Ë&& !deföed(
APIENTRY
Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__SCITECH_SNAP__
)

40 #i‚de‡
WIN32_LEAN_AND_MEAN


41 
	#WIN32_LEAN_AND_MEAN
 1

	)

43 
	~<wödows.h
>

46 #i‚de‡
APIENTRY


47 
	#APIENTRY


	)

49 #i‚de‡
APIENTRYP


50 
	#APIENTRYP
 
APIENTRY
 *

	)

52 #i‚de‡
GLAPI


53 
	#GLAPI
 

	)

56 
	#GL_GLEXT_VERSION
 20131212

	)

68 #i‚de‡
GL_VERSION_1_2


69 
	#GL_VERSION_1_2
 1

	)

70 
	#GL_UNSIGNED_BYTE_3_3_2
 0x8032

	)

71 
	#GL_UNSIGNED_SHORT_4_4_4_4
 0x8033

	)

72 
	#GL_UNSIGNED_SHORT_5_5_5_1
 0x8034

	)

73 
	#GL_UNSIGNED_INT_8_8_8_8
 0x8035

	)

74 
	#GL_UNSIGNED_INT_10_10_10_2
 0x8036

	)

75 
	#GL_TEXTURE_BINDING_3D
 0x806A

	)

76 
	#GL_PACK_SKIP_IMAGES
 0x806B

	)

77 
	#GL_PACK_IMAGE_HEIGHT
 0x806C

	)

78 
	#GL_UNPACK_SKIP_IMAGES
 0x806D

	)

79 
	#GL_UNPACK_IMAGE_HEIGHT
 0x806E

	)

80 
	#GL_TEXTURE_3D
 0x806F

	)

81 
	#GL_PROXY_TEXTURE_3D
 0x8070

	)

82 
	#GL_TEXTURE_DEPTH
 0x8071

	)

83 
	#GL_TEXTURE_WRAP_R
 0x8072

	)

84 
	#GL_MAX_3D_TEXTURE_SIZE
 0x8073

	)

85 
	#GL_UNSIGNED_BYTE_2_3_3_REV
 0x8362

	)

86 
	#GL_UNSIGNED_SHORT_5_6_5
 0x8363

	)

87 
	#GL_UNSIGNED_SHORT_5_6_5_REV
 0x8364

	)

88 
	#GL_UNSIGNED_SHORT_4_4_4_4_REV
 0x8365

	)

89 
	#GL_UNSIGNED_SHORT_1_5_5_5_REV
 0x8366

	)

90 
	#GL_UNSIGNED_INT_8_8_8_8_REV
 0x8367

	)

91 
	#GL_UNSIGNED_INT_2_10_10_10_REV
 0x8368

	)

92 
	#GL_BGR
 0x80E0

	)

93 
	#GL_BGRA
 0x80E1

	)

94 
	#GL_MAX_ELEMENTS_VERTICES
 0x80E8

	)

95 
	#GL_MAX_ELEMENTS_INDICES
 0x80E9

	)

96 
	#GL_CLAMP_TO_EDGE
 0x812F

	)

97 
	#GL_TEXTURE_MIN_LOD
 0x813A

	)

98 
	#GL_TEXTURE_MAX_LOD
 0x813B

	)

99 
	#GL_TEXTURE_BASE_LEVEL
 0x813C

	)

100 
	#GL_TEXTURE_MAX_LEVEL
 0x813D

	)

101 
	#GL_SMOOTH_POINT_SIZE_RANGE
 0x0B12

	)

102 
	#GL_SMOOTH_POINT_SIZE_GRANULARITY
 0x0B13

	)

103 
	#GL_SMOOTH_LINE_WIDTH_RANGE
 0x0B22

	)

104 
	#GL_SMOOTH_LINE_WIDTH_GRANULARITY
 0x0B23

	)

105 
	#GL_ALIASED_LINE_WIDTH_RANGE
 0x846E

	)

106 
	#GL_RESCALE_NORMAL
 0x803A

	)

107 
	#GL_LIGHT_MODEL_COLOR_CONTROL
 0x81F8

	)

108 
	#GL_SINGLE_COLOR
 0x81F9

	)

109 
	#GL_SEPARATE_SPECULAR_COLOR
 0x81FA

	)

110 
	#GL_ALIASED_POINT_SIZE_RANGE
 0x846D

	)

111 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

112 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

113 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

114 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

115 #ifde‡
GL_GLEXT_PROTOTYPES


116 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmíts
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

117 
GLAPI
 
APIENTRY
 
glTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

118 
GLAPI
 
APIENTRY
 
glTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

119 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

123 #i‚de‡
GL_VERSION_1_3


124 
	#GL_VERSION_1_3
 1

	)

125 
	#GL_TEXTURE0
 0x84C0

	)

126 
	#GL_TEXTURE1
 0x84C1

	)

127 
	#GL_TEXTURE2
 0x84C2

	)

128 
	#GL_TEXTURE3
 0x84C3

	)

129 
	#GL_TEXTURE4
 0x84C4

	)

130 
	#GL_TEXTURE5
 0x84C5

	)

131 
	#GL_TEXTURE6
 0x84C6

	)

132 
	#GL_TEXTURE7
 0x84C7

	)

133 
	#GL_TEXTURE8
 0x84C8

	)

134 
	#GL_TEXTURE9
 0x84C9

	)

135 
	#GL_TEXTURE10
 0x84CA

	)

136 
	#GL_TEXTURE11
 0x84CB

	)

137 
	#GL_TEXTURE12
 0x84CC

	)

138 
	#GL_TEXTURE13
 0x84CD

	)

139 
	#GL_TEXTURE14
 0x84CE

	)

140 
	#GL_TEXTURE15
 0x84CF

	)

141 
	#GL_TEXTURE16
 0x84D0

	)

142 
	#GL_TEXTURE17
 0x84D1

	)

143 
	#GL_TEXTURE18
 0x84D2

	)

144 
	#GL_TEXTURE19
 0x84D3

	)

145 
	#GL_TEXTURE20
 0x84D4

	)

146 
	#GL_TEXTURE21
 0x84D5

	)

147 
	#GL_TEXTURE22
 0x84D6

	)

148 
	#GL_TEXTURE23
 0x84D7

	)

149 
	#GL_TEXTURE24
 0x84D8

	)

150 
	#GL_TEXTURE25
 0x84D9

	)

151 
	#GL_TEXTURE26
 0x84DA

	)

152 
	#GL_TEXTURE27
 0x84DB

	)

153 
	#GL_TEXTURE28
 0x84DC

	)

154 
	#GL_TEXTURE29
 0x84DD

	)

155 
	#GL_TEXTURE30
 0x84DE

	)

156 
	#GL_TEXTURE31
 0x84DF

	)

157 
	#GL_ACTIVE_TEXTURE
 0x84E0

	)

158 
	#GL_MULTISAMPLE
 0x809D

	)

159 
	#GL_SAMPLE_ALPHA_TO_COVERAGE
 0x809E

	)

160 
	#GL_SAMPLE_ALPHA_TO_ONE
 0x809F

	)

161 
	#GL_SAMPLE_COVERAGE
 0x80A0

	)

162 
	#GL_SAMPLE_BUFFERS
 0x80A8

	)

163 
	#GL_SAMPLES
 0x80A9

	)

164 
	#GL_SAMPLE_COVERAGE_VALUE
 0x80AA

	)

165 
	#GL_SAMPLE_COVERAGE_INVERT
 0x80AB

	)

166 
	#GL_TEXTURE_CUBE_MAP
 0x8513

	)

167 
	#GL_TEXTURE_BINDING_CUBE_MAP
 0x8514

	)

168 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X
 0x8515

	)

169 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X
 0x8516

	)

170 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y
 0x8517

	)

171 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y
 0x8518

	)

172 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z
 0x8519

	)

173 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z
 0x851A

	)

174 
	#GL_PROXY_TEXTURE_CUBE_MAP
 0x851B

	)

175 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE
 0x851C

	)

176 
	#GL_COMPRESSED_RGB
 0x84ED

	)

177 
	#GL_COMPRESSED_RGBA
 0x84EE

	)

178 
	#GL_TEXTURE_COMPRESSION_HINT
 0x84EF

	)

179 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE
 0x86A0

	)

180 
	#GL_TEXTURE_COMPRESSED
 0x86A1

	)

181 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS
 0x86A2

	)

182 
	#GL_COMPRESSED_TEXTURE_FORMATS
 0x86A3

	)

183 
	#GL_CLAMP_TO_BORDER
 0x812D

	)

184 
	#GL_CLIENT_ACTIVE_TEXTURE
 0x84E1

	)

185 
	#GL_MAX_TEXTURE_UNITS
 0x84E2

	)

186 
	#GL_TRANSPOSE_MODELVIEW_MATRIX
 0x84E3

	)

187 
	#GL_TRANSPOSE_PROJECTION_MATRIX
 0x84E4

	)

188 
	#GL_TRANSPOSE_TEXTURE_MATRIX
 0x84E5

	)

189 
	#GL_TRANSPOSE_COLOR_MATRIX
 0x84E6

	)

190 
	#GL_MULTISAMPLE_BIT
 0x20000000

	)

191 
	#GL_NORMAL_MAP
 0x8511

	)

192 
	#GL_REFLECTION_MAP
 0x8512

	)

193 
	#GL_COMPRESSED_ALPHA
 0x84E9

	)

194 
	#GL_COMPRESSED_LUMINANCE
 0x84EA

	)

195 
	#GL_COMPRESSED_LUMINANCE_ALPHA
 0x84EB

	)

196 
	#GL_COMPRESSED_INTENSITY
 0x84EC

	)

197 
	#GL_COMBINE
 0x8570

	)

198 
	#GL_COMBINE_RGB
 0x8571

	)

199 
	#GL_COMBINE_ALPHA
 0x8572

	)

200 
	#GL_SOURCE0_RGB
 0x8580

	)

201 
	#GL_SOURCE1_RGB
 0x8581

	)

202 
	#GL_SOURCE2_RGB
 0x8582

	)

203 
	#GL_SOURCE0_ALPHA
 0x8588

	)

204 
	#GL_SOURCE1_ALPHA
 0x8589

	)

205 
	#GL_SOURCE2_ALPHA
 0x858A

	)

206 
	#GL_OPERAND0_RGB
 0x8590

	)

207 
	#GL_OPERAND1_RGB
 0x8591

	)

208 
	#GL_OPERAND2_RGB
 0x8592

	)

209 
	#GL_OPERAND0_ALPHA
 0x8598

	)

210 
	#GL_OPERAND1_ALPHA
 0x8599

	)

211 
	#GL_OPERAND2_ALPHA
 0x859A

	)

212 
	#GL_RGB_SCALE
 0x8573

	)

213 
	#GL_ADD_SIGNED
 0x8574

	)

214 
	#GL_INTERPOLATE
 0x8575

	)

215 
	#GL_SUBTRACT
 0x84E7

	)

216 
	#GL_CONSTANT
 0x8576

	)

217 
	#GL_PRIMARY_COLOR
 0x8577

	)

218 
	#GL_PREVIOUS
 0x8578

	)

219 
	#GL_DOT3_RGB
 0x86AE

	)

220 
	#GL_DOT3_RGBA
 0x86AF

	)

221 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

222 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

223 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

224 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

225 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

226 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

227 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

228 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

229 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

230 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREPROC
Ë(
	tGLíum
 
	tãxtuª
);

231 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

232 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

233 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

234 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

235 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

236 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

237 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

238 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

239 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

240 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

241 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

242 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

243 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

244 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

245 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

246 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

247 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

248 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

249 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

250 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

251 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

252 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

253 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

254 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

255 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

256 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

257 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

258 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

259 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

260 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

261 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

262 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

263 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

264 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

265 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

266 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

267 #ifde‡
GL_GLEXT_PROTOTYPES


268 
GLAPI
 
APIENTRY
 
glA˘iveTextuª
 (
GLíum
 
ãxtuª
);

269 
GLAPI
 
APIENTRY
 
glSam∂eCovîage
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

270 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

271 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

272 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

273 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

274 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

275 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1D
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

276 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImage
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, *
img
);

277 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuª
 (
GLíum
 
ãxtuª
);

278 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

279 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

280 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

281 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

282 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1i
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

283 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

284 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

285 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

286 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

287 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

288 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

289 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

290 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

291 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

292 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

293 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

294 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

295 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

296 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

297 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

298 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

299 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

300 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

301 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

302 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4d
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

303 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dv
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

304 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4f
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

305 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fv
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

306 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4i
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

307 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iv
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

308 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4s
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

309 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sv
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

310 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

311 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

312 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixf
 (c⁄° 
GLÊﬂt
 *
m
);

313 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixd
 (c⁄° 
GLdoubÀ
 *
m
);

317 #i‚de‡
GL_VERSION_1_4


318 
	#GL_VERSION_1_4
 1

	)

319 
	#GL_BLEND_DST_RGB
 0x80C8

	)

320 
	#GL_BLEND_SRC_RGB
 0x80C9

	)

321 
	#GL_BLEND_DST_ALPHA
 0x80CA

	)

322 
	#GL_BLEND_SRC_ALPHA
 0x80CB

	)

323 
	#GL_POINT_FADE_THRESHOLD_SIZE
 0x8128

	)

324 
	#GL_DEPTH_COMPONENT16
 0x81A5

	)

325 
	#GL_DEPTH_COMPONENT24
 0x81A6

	)

326 
	#GL_DEPTH_COMPONENT32
 0x81A7

	)

327 
	#GL_MIRRORED_REPEAT
 0x8370

	)

328 
	#GL_MAX_TEXTURE_LOD_BIAS
 0x84FD

	)

329 
	#GL_TEXTURE_LOD_BIAS
 0x8501

	)

330 
	#GL_INCR_WRAP
 0x8507

	)

331 
	#GL_DECR_WRAP
 0x8508

	)

332 
	#GL_TEXTURE_DEPTH_SIZE
 0x884A

	)

333 
	#GL_TEXTURE_COMPARE_MODE
 0x884C

	)

334 
	#GL_TEXTURE_COMPARE_FUNC
 0x884D

	)

335 
	#GL_POINT_SIZE_MIN
 0x8126

	)

336 
	#GL_POINT_SIZE_MAX
 0x8127

	)

337 
	#GL_POINT_DISTANCE_ATTENUATION
 0x8129

	)

338 
	#GL_GENERATE_MIPMAP
 0x8191

	)

339 
	#GL_GENERATE_MIPMAP_HINT
 0x8192

	)

340 
	#GL_FOG_COORDINATE_SOURCE
 0x8450

	)

341 
	#GL_FOG_COORDINATE
 0x8451

	)

342 
	#GL_FRAGMENT_DEPTH
 0x8452

	)

343 
	#GL_CURRENT_FOG_COORDINATE
 0x8453

	)

344 
	#GL_FOG_COORDINATE_ARRAY_TYPE
 0x8454

	)

345 
	#GL_FOG_COORDINATE_ARRAY_STRIDE
 0x8455

	)

346 
	#GL_FOG_COORDINATE_ARRAY_POINTER
 0x8456

	)

347 
	#GL_FOG_COORDINATE_ARRAY
 0x8457

	)

348 
	#GL_COLOR_SUM
 0x8458

	)

349 
	#GL_CURRENT_SECONDARY_COLOR
 0x8459

	)

350 
	#GL_SECONDARY_COLOR_ARRAY_SIZE
 0x845A

	)

351 
	#GL_SECONDARY_COLOR_ARRAY_TYPE
 0x845B

	)

352 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE
 0x845C

	)

353 
	#GL_SECONDARY_COLOR_ARRAY_POINTER
 0x845D

	)

354 
	#GL_SECONDARY_COLOR_ARRAY
 0x845E

	)

355 
	#GL_TEXTURE_FILTER_CONTROL
 0x8500

	)

356 
	#GL_DEPTH_TEXTURE_MODE
 0x884B

	)

357 
	#GL_COMPARE_R_TO_TEXTURE
 0x884E

	)

358 
	#GL_FUNC_ADD
 0x8006

	)

359 
	#GL_FUNC_SUBTRACT
 0x800A

	)

360 
	#GL_FUNC_REVERSE_SUBTRACT
 0x800B

	)

361 
	#GL_MIN
 0x8007

	)

362 
	#GL_MAX
 0x8008

	)

363 
	#GL_CONSTANT_COLOR
 0x8001

	)

364 
	#GL_ONE_MINUS_CONSTANT_COLOR
 0x8002

	)

365 
	#GL_CONSTANT_ALPHA
 0x8003

	)

366 
	#GL_ONE_MINUS_CONSTANT_ALPHA
 0x8004

	)

367 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

368 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	tdøwcou¡
);

369 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
);

370 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

371 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

372 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

373 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

374 (
APIENTRYP
 
	tPFNGLFOGCOORDFPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

375 (
APIENTRYP
 
	tPFNGLFOGCOORDFVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

376 (
APIENTRYP
 
	tPFNGLFOGCOORDDPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

377 (
APIENTRYP
 
	tPFNGLFOGCOORDDVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

378 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

379 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

380 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

381 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

382 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

383 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

384 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

385 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

386 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

387 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

388 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

389 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

390 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

391 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

392 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

393 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

394 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

395 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

396 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

397 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

398 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

399 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

400 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

401 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

402 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

403 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

404 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

405 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

406 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

407 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

408 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

409 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

410 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

411 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

412 (
APIENTRYP
 
	tPFNGLBLENDCOLORPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

413 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONPROC
Ë(
	tGLíum
 
	tmode
);

414 #ifde‡
GL_GLEXT_PROTOTYPES


415 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©e
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

416 
GLAPI
 
APIENTRY
 
glMu…iDøwAºays
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
døwcou¡
);

417 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmíts
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
);

418 
GLAPI
 
APIENTRY
 
glPoötP¨amëîf
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

419 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

420 
GLAPI
 
APIENTRY
 
glPoötP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

421 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiv
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

422 
GLAPI
 
APIENTRY
 
glFogCo‹df
 (
GLÊﬂt
 
co‹d
);

423 
GLAPI
 
APIENTRY
 
glFogCo‹dfv
 (c⁄° 
GLÊﬂt
 *
co‹d
);

424 
GLAPI
 
APIENTRY
 
glFogCo‹dd
 (
GLdoubÀ
 
co‹d
);

425 
GLAPI
 
APIENTRY
 
glFogCo‹ddv
 (c⁄° 
GLdoubÀ
 *
co‹d
);

426 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãr
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

427 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3b
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

428 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bv
 (c⁄° 
GLbyã
 *
v
);

429 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3d
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

430 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dv
 (c⁄° 
GLdoubÀ
 *
v
);

431 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3f
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

432 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fv
 (c⁄° 
GLÊﬂt
 *
v
);

433 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3i
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

434 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iv
 (c⁄° 
GLöt
 *
v
);

435 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3s
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

436 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sv
 (c⁄° 
GLsh‹t
 *
v
);

437 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ub
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

438 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubv
 (c⁄° 
GLubyã
 *
v
);

439 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ui
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

440 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiv
 (c⁄° 
GLuöt
 *
v
);

441 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3us
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

442 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usv
 (c⁄° 
GLush‹t
 *
v
);

443 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹Poöãr
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

444 
GLAPI
 
APIENTRY
 
glWödowPos2d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

445 
GLAPI
 
APIENTRY
 
glWödowPos2dv
 (c⁄° 
GLdoubÀ
 *
v
);

446 
GLAPI
 
APIENTRY
 
glWödowPos2f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

447 
GLAPI
 
APIENTRY
 
glWödowPos2fv
 (c⁄° 
GLÊﬂt
 *
v
);

448 
GLAPI
 
APIENTRY
 
glWödowPos2i
 (
GLöt
 
x
, GLöà
y
);

449 
GLAPI
 
APIENTRY
 
glWödowPos2iv
 (c⁄° 
GLöt
 *
v
);

450 
GLAPI
 
APIENTRY
 
glWödowPos2s
 (
GLsh‹t
 
x
, GLsh‹à
y
);

451 
GLAPI
 
APIENTRY
 
glWödowPos2sv
 (c⁄° 
GLsh‹t
 *
v
);

452 
GLAPI
 
APIENTRY
 
glWödowPos3d
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

453 
GLAPI
 
APIENTRY
 
glWödowPos3dv
 (c⁄° 
GLdoubÀ
 *
v
);

454 
GLAPI
 
APIENTRY
 
glWödowPos3f
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

455 
GLAPI
 
APIENTRY
 
glWödowPos3fv
 (c⁄° 
GLÊﬂt
 *
v
);

456 
GLAPI
 
APIENTRY
 
glWödowPos3i
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

457 
GLAPI
 
APIENTRY
 
glWödowPos3iv
 (c⁄° 
GLöt
 *
v
);

458 
GLAPI
 
APIENTRY
 
glWödowPos3s
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

459 
GLAPI
 
APIENTRY
 
glWödowPos3sv
 (c⁄° 
GLsh‹t
 *
v
);

460 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

461 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄
 (
GLíum
 
mode
);

465 #i‚de‡
GL_VERSION_1_5


466 
	#GL_VERSION_1_5
 1

	)

467 
	~<°ddef.h
>

468 
±rdiff_t
 
	tGLsizeùå
;

469 
±rdiff_t
 
	tGLöçå
;

470 
	#GL_BUFFER_SIZE
 0x8764

	)

471 
	#GL_BUFFER_USAGE
 0x8765

	)

472 
	#GL_QUERY_COUNTER_BITS
 0x8864

	)

473 
	#GL_CURRENT_QUERY
 0x8865

	)

474 
	#GL_QUERY_RESULT
 0x8866

	)

475 
	#GL_QUERY_RESULT_AVAILABLE
 0x8867

	)

476 
	#GL_ARRAY_BUFFER
 0x8892

	)

477 
	#GL_ELEMENT_ARRAY_BUFFER
 0x8893

	)

478 
	#GL_ARRAY_BUFFER_BINDING
 0x8894

	)

479 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING
 0x8895

	)

480 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING
 0x889F

	)

481 
	#GL_READ_ONLY
 0x88B8

	)

482 
	#GL_WRITE_ONLY
 0x88B9

	)

483 
	#GL_READ_WRITE
 0x88BA

	)

484 
	#GL_BUFFER_ACCESS
 0x88BB

	)

485 
	#GL_BUFFER_MAPPED
 0x88BC

	)

486 
	#GL_BUFFER_MAP_POINTER
 0x88BD

	)

487 
	#GL_STREAM_DRAW
 0x88E0

	)

488 
	#GL_STREAM_READ
 0x88E1

	)

489 
	#GL_STREAM_COPY
 0x88E2

	)

490 
	#GL_STATIC_DRAW
 0x88E4

	)

491 
	#GL_STATIC_READ
 0x88E5

	)

492 
	#GL_STATIC_COPY
 0x88E6

	)

493 
	#GL_DYNAMIC_DRAW
 0x88E8

	)

494 
	#GL_DYNAMIC_READ
 0x88E9

	)

495 
	#GL_DYNAMIC_COPY
 0x88EA

	)

496 
	#GL_SAMPLES_PASSED
 0x8914

	)

497 
	#GL_SRC1_ALPHA
 0x8589

	)

498 
	#GL_VERTEX_ARRAY_BUFFER_BINDING
 0x8896

	)

499 
	#GL_NORMAL_ARRAY_BUFFER_BINDING
 0x8897

	)

500 
	#GL_COLOR_ARRAY_BUFFER_BINDING
 0x8898

	)

501 
	#GL_INDEX_ARRAY_BUFFER_BINDING
 0x8899

	)

502 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING
 0x889A

	)

503 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING
 0x889B

	)

504 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING
 0x889C

	)

505 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING
 0x889D

	)

506 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING
 0x889E

	)

507 
	#GL_FOG_COORD_SRC
 0x8450

	)

508 
	#GL_FOG_COORD
 0x8451

	)

509 
	#GL_CURRENT_FOG_COORD
 0x8453

	)

510 
	#GL_FOG_COORD_ARRAY_TYPE
 0x8454

	)

511 
	#GL_FOG_COORD_ARRAY_STRIDE
 0x8455

	)

512 
	#GL_FOG_COORD_ARRAY_POINTER
 0x8456

	)

513 
	#GL_FOG_COORD_ARRAY
 0x8457

	)

514 
	#GL_FOG_COORD_ARRAY_BUFFER_BINDING
 0x889D

	)

515 
	#GL_SRC0_RGB
 0x8580

	)

516 
	#GL_SRC1_RGB
 0x8581

	)

517 
	#GL_SRC2_RGB
 0x8582

	)

518 
	#GL_SRC0_ALPHA
 0x8588

	)

519 
	#GL_SRC2_ALPHA
 0x858A

	)

520 (
APIENTRYP
 
	tPFNGLGENQUERIESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

521 (
APIENTRYP
 
	tPFNGLDELETEQUERIESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

522 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYPROC
Ë(
	tGLuöt
 
	tid
);

523 (
APIENTRYP
 
	tPFNGLBEGINQUERYPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

524 (
APIENTRYP
 
	tPFNGLENDQUERYPROC
Ë(
	tGLíum
 
	tèrgë
);

525 (
APIENTRYP
 
	tPFNGLGETQUERYIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

526 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

527 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

528 (
APIENTRYP
 
	tPFNGLBINDBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

529 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

530 (
APIENTRYP
 
	tPFNGLGENBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

531 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERPROC
Ë(
	tGLuöt
 
	tbuf„r
);

532 (
APIENTRYP
 
	tPFNGLBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, GLíum 
	tußge
);

533 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

534 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

535 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

536 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
);

537 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

538 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

539 #ifde‡
GL_GLEXT_PROTOTYPES


540 
GLAPI
 
APIENTRY
 
glGíQuîõs
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

541 
GLAPI
 
APIENTRY
 
glDñëeQuîõs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

542 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîy
 (
GLuöt
 
id
);

543 
GLAPI
 
APIENTRY
 
glBegöQuîy
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

544 
GLAPI
 
APIENTRY
 
glEndQuîy
 (
GLíum
 
èrgë
);

545 
GLAPI
 
APIENTRY
 
glGëQuîyiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

546 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘iv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

547 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uiv
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

548 
GLAPI
 
APIENTRY
 
glBödBuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

549 
GLAPI
 
APIENTRY
 
glDñëeBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

550 
GLAPI
 
APIENTRY
 
glGíBuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

551 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„r
 (
GLuöt
 
buf„r
);

552 
GLAPI
 
APIENTRY
 
glBuf„rD©a
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, GLíum 
ußge
);

553 
GLAPI
 
APIENTRY
 
glBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

554 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©a
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

555 
GLAPI
 *
APIENTRY
 
glM≠Buf„r
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

556 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„r
 (
GLíum
 
èrgë
);

557 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

558 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

562 #i‚de‡
GL_VERSION_2_0


563 
	#GL_VERSION_2_0
 1

	)

564 
	tGLch¨
;

565 
	#GL_BLEND_EQUATION_RGB
 0x8009

	)

566 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED
 0x8622

	)

567 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE
 0x8623

	)

568 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE
 0x8624

	)

569 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE
 0x8625

	)

570 
	#GL_CURRENT_VERTEX_ATTRIB
 0x8626

	)

571 
	#GL_VERTEX_PROGRAM_POINT_SIZE
 0x8642

	)

572 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER
 0x8645

	)

573 
	#GL_STENCIL_BACK_FUNC
 0x8800

	)

574 
	#GL_STENCIL_BACK_FAIL
 0x8801

	)

575 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL
 0x8802

	)

576 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS
 0x8803

	)

577 
	#GL_MAX_DRAW_BUFFERS
 0x8824

	)

578 
	#GL_DRAW_BUFFER0
 0x8825

	)

579 
	#GL_DRAW_BUFFER1
 0x8826

	)

580 
	#GL_DRAW_BUFFER2
 0x8827

	)

581 
	#GL_DRAW_BUFFER3
 0x8828

	)

582 
	#GL_DRAW_BUFFER4
 0x8829

	)

583 
	#GL_DRAW_BUFFER5
 0x882A

	)

584 
	#GL_DRAW_BUFFER6
 0x882B

	)

585 
	#GL_DRAW_BUFFER7
 0x882C

	)

586 
	#GL_DRAW_BUFFER8
 0x882D

	)

587 
	#GL_DRAW_BUFFER9
 0x882E

	)

588 
	#GL_DRAW_BUFFER10
 0x882F

	)

589 
	#GL_DRAW_BUFFER11
 0x8830

	)

590 
	#GL_DRAW_BUFFER12
 0x8831

	)

591 
	#GL_DRAW_BUFFER13
 0x8832

	)

592 
	#GL_DRAW_BUFFER14
 0x8833

	)

593 
	#GL_DRAW_BUFFER15
 0x8834

	)

594 
	#GL_BLEND_EQUATION_ALPHA
 0x883D

	)

595 
	#GL_MAX_VERTEX_ATTRIBS
 0x8869

	)

596 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED
 0x886A

	)

597 
	#GL_MAX_TEXTURE_IMAGE_UNITS
 0x8872

	)

598 
	#GL_FRAGMENT_SHADER
 0x8B30

	)

599 
	#GL_VERTEX_SHADER
 0x8B31

	)

600 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS
 0x8B49

	)

601 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS
 0x8B4A

	)

602 
	#GL_MAX_VARYING_FLOATS
 0x8B4B

	)

603 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS
 0x8B4C

	)

604 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS
 0x8B4D

	)

605 
	#GL_SHADER_TYPE
 0x8B4F

	)

606 
	#GL_FLOAT_VEC2
 0x8B50

	)

607 
	#GL_FLOAT_VEC3
 0x8B51

	)

608 
	#GL_FLOAT_VEC4
 0x8B52

	)

609 
	#GL_INT_VEC2
 0x8B53

	)

610 
	#GL_INT_VEC3
 0x8B54

	)

611 
	#GL_INT_VEC4
 0x8B55

	)

612 
	#GL_BOOL
 0x8B56

	)

613 
	#GL_BOOL_VEC2
 0x8B57

	)

614 
	#GL_BOOL_VEC3
 0x8B58

	)

615 
	#GL_BOOL_VEC4
 0x8B59

	)

616 
	#GL_FLOAT_MAT2
 0x8B5A

	)

617 
	#GL_FLOAT_MAT3
 0x8B5B

	)

618 
	#GL_FLOAT_MAT4
 0x8B5C

	)

619 
	#GL_SAMPLER_1D
 0x8B5D

	)

620 
	#GL_SAMPLER_2D
 0x8B5E

	)

621 
	#GL_SAMPLER_3D
 0x8B5F

	)

622 
	#GL_SAMPLER_CUBE
 0x8B60

	)

623 
	#GL_SAMPLER_1D_SHADOW
 0x8B61

	)

624 
	#GL_SAMPLER_2D_SHADOW
 0x8B62

	)

625 
	#GL_DELETE_STATUS
 0x8B80

	)

626 
	#GL_COMPILE_STATUS
 0x8B81

	)

627 
	#GL_LINK_STATUS
 0x8B82

	)

628 
	#GL_VALIDATE_STATUS
 0x8B83

	)

629 
	#GL_INFO_LOG_LENGTH
 0x8B84

	)

630 
	#GL_ATTACHED_SHADERS
 0x8B85

	)

631 
	#GL_ACTIVE_UNIFORMS
 0x8B86

	)

632 
	#GL_ACTIVE_UNIFORM_MAX_LENGTH
 0x8B87

	)

633 
	#GL_SHADER_SOURCE_LENGTH
 0x8B88

	)

634 
	#GL_ACTIVE_ATTRIBUTES
 0x8B89

	)

635 
	#GL_ACTIVE_ATTRIBUTE_MAX_LENGTH
 0x8B8A

	)

636 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT
 0x8B8B

	)

637 
	#GL_SHADING_LANGUAGE_VERSION
 0x8B8C

	)

638 
	#GL_CURRENT_PROGRAM
 0x8B8D

	)

639 
	#GL_POINT_SPRITE_COORD_ORIGIN
 0x8CA0

	)

640 
	#GL_LOWER_LEFT
 0x8CA1

	)

641 
	#GL_UPPER_LEFT
 0x8CA2

	)

642 
	#GL_STENCIL_BACK_REF
 0x8CA3

	)

643 
	#GL_STENCIL_BACK_VALUE_MASK
 0x8CA4

	)

644 
	#GL_STENCIL_BACK_WRITEMASK
 0x8CA5

	)

645 
	#GL_VERTEX_PROGRAM_TWO_SIDE
 0x8643

	)

646 
	#GL_POINT_SPRITE
 0x8861

	)

647 
	#GL_COORD_REPLACE
 0x8862

	)

648 
	#GL_MAX_TEXTURE_COORDS
 0x8871

	)

649 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

650 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

651 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

652 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

653 (
APIENTRYP
 
	tPFNGLSTENCILMASKSEPARATEPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tmask
);

654 (
APIENTRYP
 
	tPFNGLATTACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

655 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

656 (
APIENTRYP
 
	tPFNGLCOMPILESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

657 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMPROC
) ();

658 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROC
Ë(
	tGLíum
 
	tty≥
);

659 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

660 (
APIENTRYP
 
	tPFNGLDELETESHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

661 (
APIENTRYP
 
	tPFNGLDETACHSHADERPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tshadî
);

662 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

663 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYPROC
Ë(
	tGLuöt
 
	tödex
);

664 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

665 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

666 (
APIENTRYP
 
	tPFNGLGETATTACHEDSHADERSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLuöà*
	tshadîs
);

667 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

668 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

669 (
APIENTRYP
 
	tPFNGLGETPROGRAMINFOLOGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

670 (
APIENTRYP
 
	tPFNGLGETSHADERIVPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

671 (
APIENTRYP
 
	tPFNGLGETSHADERINFOLOGPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

672 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tsour˚
);

673 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

674 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

675 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

676 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

677 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

678 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

679 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

680 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

681 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSHADERPROC
Ë(
	tGLuöt
 
	tshadî
);

682 (
APIENTRYP
 
	tPFNGLLINKPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

683 (
APIENTRYP
 
	tPFNGLSHADERSOURCEPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

684 (
APIENTRYP
 
	tPFNGLUSEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

685 (
APIENTRYP
 
	tPFNGLUNIFORM1FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

686 (
APIENTRYP
 
	tPFNGLUNIFORM2FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

687 (
APIENTRYP
 
	tPFNGLUNIFORM3FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

688 (
APIENTRYP
 
	tPFNGLUNIFORM4FPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

689 (
APIENTRYP
 
	tPFNGLUNIFORM1IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

690 (
APIENTRYP
 
	tPFNGLUNIFORM2IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

691 (
APIENTRYP
 
	tPFNGLUNIFORM3IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

692 (
APIENTRYP
 
	tPFNGLUNIFORM4IPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

693 (
APIENTRYP
 
	tPFNGLUNIFORM1FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

694 (
APIENTRYP
 
	tPFNGLUNIFORM2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

695 (
APIENTRYP
 
	tPFNGLUNIFORM3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

696 (
APIENTRYP
 
	tPFNGLUNIFORM4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

697 (
APIENTRYP
 
	tPFNGLUNIFORM1IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

698 (
APIENTRYP
 
	tPFNGLUNIFORM2IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

699 (
APIENTRYP
 
	tPFNGLUNIFORM3IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

700 (
APIENTRYP
 
	tPFNGLUNIFORM4IVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

701 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

702 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

703 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

704 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

705 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

706 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

707 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

708 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

709 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

710 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

711 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

712 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

713 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

714 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

715 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

716 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

717 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

718 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

719 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

720 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

721 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

722 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

723 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

724 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

725 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

726 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

727 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

728 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

729 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

730 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

731 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

732 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

733 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

734 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

735 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

736 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

737 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

738 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

739 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

740 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

741 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

742 #ifde‡
GL_GLEXT_PROTOTYPES


743 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©e
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

744 
GLAPI
 
APIENTRY
 
glDøwBuf„rs
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

745 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©e
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

746 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©e
 (
GLíum
 
Á˚
, GLíum 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

747 
GLAPI
 
APIENTRY
 
glSãncûMaskSï¨©e
 (
GLíum
 
Á˚
, 
GLuöt
 
mask
);

748 
GLAPI
 
APIENTRY
 
glAâachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

749 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

750 
GLAPI
 
APIENTRY
 
glCompûeShadî
 (
GLuöt
 
shadî
);

751 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eProgøm
 ();

752 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadî
 (
GLíum
 
ty≥
);

753 
GLAPI
 
APIENTRY
 
glDñëeProgøm
 (
GLuöt
 
¥ogøm
);

754 
GLAPI
 
APIENTRY
 
glDñëeShadî
 (
GLuöt
 
shadî
);

755 
GLAPI
 
APIENTRY
 
glDëachShadî
 (
GLuöt
 
¥ogøm
, GLuöà
shadî
);

756 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

757 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºay
 (
GLuöt
 
ödex
);

758 
GLAPI
 
APIENTRY
 
glGëA˘iveAârib
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

759 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹m
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

760 
GLAPI
 
APIENTRY
 
glGëAâachedShadîs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLuöà*
shadîs
);

761 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

762 
GLAPI
 
APIENTRY
 
glGëProgømiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

763 
GLAPI
 
APIENTRY
 
glGëProgømInfoLog
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

764 
GLAPI
 
APIENTRY
 
glGëShadîiv
 (
GLuöt
 
shadî
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

765 
GLAPI
 
APIENTRY
 
glGëShadîInfoLog
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

766 
GLAPI
 
APIENTRY
 
glGëShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
sour˚
);

767 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

768 
GLAPI
 
APIENTRY
 
glGëUnif‹mfv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

769 
GLAPI
 
APIENTRY
 
glGëUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

770 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

771 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

772 
GLAPI
 
APIENTRY
 
glGëVîãxAâribiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

773 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

774 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgøm
 (
GLuöt
 
¥ogøm
);

775 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsShadî
 (
GLuöt
 
shadî
);

776 
GLAPI
 
APIENTRY
 
glLökProgøm
 (
GLuöt
 
¥ogøm
);

777 
GLAPI
 
APIENTRY
 
glShadîSour˚
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rög
, c⁄° 
GLöt
 *
Àngth
);

778 
GLAPI
 
APIENTRY
 
glU£Progøm
 (
GLuöt
 
¥ogøm
);

779 
GLAPI
 
APIENTRY
 
glUnif‹m1f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

780 
GLAPI
 
APIENTRY
 
glUnif‹m2f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

781 
GLAPI
 
APIENTRY
 
glUnif‹m3f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

782 
GLAPI
 
APIENTRY
 
glUnif‹m4f
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

783 
GLAPI
 
APIENTRY
 
glUnif‹m1i
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

784 
GLAPI
 
APIENTRY
 
glUnif‹m2i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

785 
GLAPI
 
APIENTRY
 
glUnif‹m3i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

786 
GLAPI
 
APIENTRY
 
glUnif‹m4i
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

787 
GLAPI
 
APIENTRY
 
glUnif‹m1fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

788 
GLAPI
 
APIENTRY
 
glUnif‹m2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

789 
GLAPI
 
APIENTRY
 
glUnif‹m3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

790 
GLAPI
 
APIENTRY
 
glUnif‹m4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

791 
GLAPI
 
APIENTRY
 
glUnif‹m1iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

792 
GLAPI
 
APIENTRY
 
glUnif‹m2iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

793 
GLAPI
 
APIENTRY
 
glUnif‹m3iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

794 
GLAPI
 
APIENTRY
 
glUnif‹m4iv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

795 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

796 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

797 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

798 
GLAPI
 
APIENTRY
 
glVÆid©eProgøm
 (
GLuöt
 
¥ogøm
);

799 
GLAPI
 
APIENTRY
 
glVîãxAârib1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

800 
GLAPI
 
APIENTRY
 
glVîãxAârib1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

801 
GLAPI
 
APIENTRY
 
glVîãxAârib1f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

802 
GLAPI
 
APIENTRY
 
glVîãxAârib1fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

803 
GLAPI
 
APIENTRY
 
glVîãxAârib1s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

804 
GLAPI
 
APIENTRY
 
glVîãxAârib1sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

805 
GLAPI
 
APIENTRY
 
glVîãxAârib2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

806 
GLAPI
 
APIENTRY
 
glVîãxAârib2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

807 
GLAPI
 
APIENTRY
 
glVîãxAârib2f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

808 
GLAPI
 
APIENTRY
 
glVîãxAârib2fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

809 
GLAPI
 
APIENTRY
 
glVîãxAârib2s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

810 
GLAPI
 
APIENTRY
 
glVîãxAârib2sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

811 
GLAPI
 
APIENTRY
 
glVîãxAârib3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

812 
GLAPI
 
APIENTRY
 
glVîãxAârib3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

813 
GLAPI
 
APIENTRY
 
glVîãxAârib3f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

814 
GLAPI
 
APIENTRY
 
glVîãxAârib3fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

815 
GLAPI
 
APIENTRY
 
glVîãxAârib3s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

816 
GLAPI
 
APIENTRY
 
glVîãxAârib3sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

817 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nbv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

818 
GLAPI
 
APIENTRY
 
glVîãxAârib4Niv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

819 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nsv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

820 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nub
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

821 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

822 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nuiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

823 
GLAPI
 
APIENTRY
 
glVîãxAârib4Nusv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

824 
GLAPI
 
APIENTRY
 
glVîãxAârib4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

825 
GLAPI
 
APIENTRY
 
glVîãxAârib4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

826 
GLAPI
 
APIENTRY
 
glVîãxAârib4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

827 
GLAPI
 
APIENTRY
 
glVîãxAârib4f
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

828 
GLAPI
 
APIENTRY
 
glVîãxAârib4fv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

829 
GLAPI
 
APIENTRY
 
glVîãxAârib4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

830 
GLAPI
 
APIENTRY
 
glVîãxAârib4s
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

831 
GLAPI
 
APIENTRY
 
glVîãxAârib4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

832 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

833 
GLAPI
 
APIENTRY
 
glVîãxAârib4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

834 
GLAPI
 
APIENTRY
 
glVîãxAârib4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

835 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

839 #i‚de‡
GL_VERSION_2_1


840 
	#GL_VERSION_2_1
 1

	)

841 
	#GL_PIXEL_PACK_BUFFER
 0x88EB

	)

842 
	#GL_PIXEL_UNPACK_BUFFER
 0x88EC

	)

843 
	#GL_PIXEL_PACK_BUFFER_BINDING
 0x88ED

	)

844 
	#GL_PIXEL_UNPACK_BUFFER_BINDING
 0x88EF

	)

845 
	#GL_FLOAT_MAT2x3
 0x8B65

	)

846 
	#GL_FLOAT_MAT2x4
 0x8B66

	)

847 
	#GL_FLOAT_MAT3x2
 0x8B67

	)

848 
	#GL_FLOAT_MAT3x4
 0x8B68

	)

849 
	#GL_FLOAT_MAT4x2
 0x8B69

	)

850 
	#GL_FLOAT_MAT4x3
 0x8B6A

	)

851 
	#GL_SRGB
 0x8C40

	)

852 
	#GL_SRGB8
 0x8C41

	)

853 
	#GL_SRGB_ALPHA
 0x8C42

	)

854 
	#GL_SRGB8_ALPHA8
 0x8C43

	)

855 
	#GL_COMPRESSED_SRGB
 0x8C48

	)

856 
	#GL_COMPRESSED_SRGB_ALPHA
 0x8C49

	)

857 
	#GL_CURRENT_RASTER_SECONDARY_COLOR
 0x845F

	)

858 
	#GL_SLUMINANCE_ALPHA
 0x8C44

	)

859 
	#GL_SLUMINANCE8_ALPHA8
 0x8C45

	)

860 
	#GL_SLUMINANCE
 0x8C46

	)

861 
	#GL_SLUMINANCE8
 0x8C47

	)

862 
	#GL_COMPRESSED_SLUMINANCE
 0x8C4A

	)

863 
	#GL_COMPRESSED_SLUMINANCE_ALPHA
 0x8C4B

	)

864 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

865 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

866 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

867 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

868 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

869 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3FVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

870 #ifde‡
GL_GLEXT_PROTOTYPES


871 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

872 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

873 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

874 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

875 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

876 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3fv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

880 #i‚de‡
GL_VERSION_3_0


881 
	#GL_VERSION_3_0
 1

	)

882 
	tGLhÆf
;

883 
	#GL_COMPARE_REF_TO_TEXTURE
 0x884E

	)

884 
	#GL_CLIP_DISTANCE0
 0x3000

	)

885 
	#GL_CLIP_DISTANCE1
 0x3001

	)

886 
	#GL_CLIP_DISTANCE2
 0x3002

	)

887 
	#GL_CLIP_DISTANCE3
 0x3003

	)

888 
	#GL_CLIP_DISTANCE4
 0x3004

	)

889 
	#GL_CLIP_DISTANCE5
 0x3005

	)

890 
	#GL_CLIP_DISTANCE6
 0x3006

	)

891 
	#GL_CLIP_DISTANCE7
 0x3007

	)

892 
	#GL_MAX_CLIP_DISTANCES
 0x0D32

	)

893 
	#GL_MAJOR_VERSION
 0x821B

	)

894 
	#GL_MINOR_VERSION
 0x821C

	)

895 
	#GL_NUM_EXTENSIONS
 0x821D

	)

896 
	#GL_CONTEXT_FLAGS
 0x821E

	)

897 
	#GL_COMPRESSED_RED
 0x8225

	)

898 
	#GL_COMPRESSED_RG
 0x8226

	)

899 
	#GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT
 0x00000001

	)

900 
	#GL_RGBA32F
 0x8814

	)

901 
	#GL_RGB32F
 0x8815

	)

902 
	#GL_RGBA16F
 0x881A

	)

903 
	#GL_RGB16F
 0x881B

	)

904 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER
 0x88FD

	)

905 
	#GL_MAX_ARRAY_TEXTURE_LAYERS
 0x88FF

	)

906 
	#GL_MIN_PROGRAM_TEXEL_OFFSET
 0x8904

	)

907 
	#GL_MAX_PROGRAM_TEXEL_OFFSET
 0x8905

	)

908 
	#GL_CLAMP_READ_COLOR
 0x891C

	)

909 
	#GL_FIXED_ONLY
 0x891D

	)

910 
	#GL_MAX_VARYING_COMPONENTS
 0x8B4B

	)

911 
	#GL_TEXTURE_1D_ARRAY
 0x8C18

	)

912 
	#GL_PROXY_TEXTURE_1D_ARRAY
 0x8C19

	)

913 
	#GL_TEXTURE_2D_ARRAY
 0x8C1A

	)

914 
	#GL_PROXY_TEXTURE_2D_ARRAY
 0x8C1B

	)

915 
	#GL_TEXTURE_BINDING_1D_ARRAY
 0x8C1C

	)

916 
	#GL_TEXTURE_BINDING_2D_ARRAY
 0x8C1D

	)

917 
	#GL_R11F_G11F_B10F
 0x8C3A

	)

918 
	#GL_UNSIGNED_INT_10F_11F_11F_REV
 0x8C3B

	)

919 
	#GL_RGB9_E5
 0x8C3D

	)

920 
	#GL_UNSIGNED_INT_5_9_9_9_REV
 0x8C3E

	)

921 
	#GL_TEXTURE_SHARED_SIZE
 0x8C3F

	)

922 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH
 0x8C76

	)

923 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE
 0x8C7F

	)

924 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS
 0x8C80

	)

925 
	#GL_TRANSFORM_FEEDBACK_VARYINGS
 0x8C83

	)

926 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START
 0x8C84

	)

927 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE
 0x8C85

	)

928 
	#GL_PRIMITIVES_GENERATED
 0x8C87

	)

929 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN
 0x8C88

	)

930 
	#GL_RASTERIZER_DISCARD
 0x8C89

	)

931 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS
 0x8C8A

	)

932 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS
 0x8C8B

	)

933 
	#GL_INTERLEAVED_ATTRIBS
 0x8C8C

	)

934 
	#GL_SEPARATE_ATTRIBS
 0x8C8D

	)

935 
	#GL_TRANSFORM_FEEDBACK_BUFFER
 0x8C8E

	)

936 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING
 0x8C8F

	)

937 
	#GL_RGBA32UI
 0x8D70

	)

938 
	#GL_RGB32UI
 0x8D71

	)

939 
	#GL_RGBA16UI
 0x8D76

	)

940 
	#GL_RGB16UI
 0x8D77

	)

941 
	#GL_RGBA8UI
 0x8D7C

	)

942 
	#GL_RGB8UI
 0x8D7D

	)

943 
	#GL_RGBA32I
 0x8D82

	)

944 
	#GL_RGB32I
 0x8D83

	)

945 
	#GL_RGBA16I
 0x8D88

	)

946 
	#GL_RGB16I
 0x8D89

	)

947 
	#GL_RGBA8I
 0x8D8E

	)

948 
	#GL_RGB8I
 0x8D8F

	)

949 
	#GL_RED_INTEGER
 0x8D94

	)

950 
	#GL_GREEN_INTEGER
 0x8D95

	)

951 
	#GL_BLUE_INTEGER
 0x8D96

	)

952 
	#GL_RGB_INTEGER
 0x8D98

	)

953 
	#GL_RGBA_INTEGER
 0x8D99

	)

954 
	#GL_BGR_INTEGER
 0x8D9A

	)

955 
	#GL_BGRA_INTEGER
 0x8D9B

	)

956 
	#GL_SAMPLER_1D_ARRAY
 0x8DC0

	)

957 
	#GL_SAMPLER_2D_ARRAY
 0x8DC1

	)

958 
	#GL_SAMPLER_1D_ARRAY_SHADOW
 0x8DC3

	)

959 
	#GL_SAMPLER_2D_ARRAY_SHADOW
 0x8DC4

	)

960 
	#GL_SAMPLER_CUBE_SHADOW
 0x8DC5

	)

961 
	#GL_UNSIGNED_INT_VEC2
 0x8DC6

	)

962 
	#GL_UNSIGNED_INT_VEC3
 0x8DC7

	)

963 
	#GL_UNSIGNED_INT_VEC4
 0x8DC8

	)

964 
	#GL_INT_SAMPLER_1D
 0x8DC9

	)

965 
	#GL_INT_SAMPLER_2D
 0x8DCA

	)

966 
	#GL_INT_SAMPLER_3D
 0x8DCB

	)

967 
	#GL_INT_SAMPLER_CUBE
 0x8DCC

	)

968 
	#GL_INT_SAMPLER_1D_ARRAY
 0x8DCE

	)

969 
	#GL_INT_SAMPLER_2D_ARRAY
 0x8DCF

	)

970 
	#GL_UNSIGNED_INT_SAMPLER_1D
 0x8DD1

	)

971 
	#GL_UNSIGNED_INT_SAMPLER_2D
 0x8DD2

	)

972 
	#GL_UNSIGNED_INT_SAMPLER_3D
 0x8DD3

	)

973 
	#GL_UNSIGNED_INT_SAMPLER_CUBE
 0x8DD4

	)

974 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY
 0x8DD6

	)

975 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY
 0x8DD7

	)

976 
	#GL_QUERY_WAIT
 0x8E13

	)

977 
	#GL_QUERY_NO_WAIT
 0x8E14

	)

978 
	#GL_QUERY_BY_REGION_WAIT
 0x8E15

	)

979 
	#GL_QUERY_BY_REGION_NO_WAIT
 0x8E16

	)

980 
	#GL_BUFFER_ACCESS_FLAGS
 0x911F

	)

981 
	#GL_BUFFER_MAP_LENGTH
 0x9120

	)

982 
	#GL_BUFFER_MAP_OFFSET
 0x9121

	)

983 
	#GL_DEPTH_COMPONENT32F
 0x8CAC

	)

984 
	#GL_DEPTH32F_STENCIL8
 0x8CAD

	)

985 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV
 0x8DAD

	)

986 
	#GL_INVALID_FRAMEBUFFER_OPERATION
 0x0506

	)

987 
	#GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING
 0x8210

	)

988 
	#GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE
 0x8211

	)

989 
	#GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE
 0x8212

	)

990 
	#GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE
 0x8213

	)

991 
	#GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE
 0x8214

	)

992 
	#GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE
 0x8215

	)

993 
	#GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE
 0x8216

	)

994 
	#GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE
 0x8217

	)

995 
	#GL_FRAMEBUFFER_DEFAULT
 0x8218

	)

996 
	#GL_FRAMEBUFFER_UNDEFINED
 0x8219

	)

997 
	#GL_DEPTH_STENCIL_ATTACHMENT
 0x821A

	)

998 
	#GL_MAX_RENDERBUFFER_SIZE
 0x84E8

	)

999 
	#GL_DEPTH_STENCIL
 0x84F9

	)

1000 
	#GL_UNSIGNED_INT_24_8
 0x84FA

	)

1001 
	#GL_DEPTH24_STENCIL8
 0x88F0

	)

1002 
	#GL_TEXTURE_STENCIL_SIZE
 0x88F1

	)

1003 
	#GL_TEXTURE_RED_TYPE
 0x8C10

	)

1004 
	#GL_TEXTURE_GREEN_TYPE
 0x8C11

	)

1005 
	#GL_TEXTURE_BLUE_TYPE
 0x8C12

	)

1006 
	#GL_TEXTURE_ALPHA_TYPE
 0x8C13

	)

1007 
	#GL_TEXTURE_DEPTH_TYPE
 0x8C16

	)

1008 
	#GL_UNSIGNED_NORMALIZED
 0x8C17

	)

1009 
	#GL_FRAMEBUFFER_BINDING
 0x8CA6

	)

1010 
	#GL_DRAW_FRAMEBUFFER_BINDING
 0x8CA6

	)

1011 
	#GL_RENDERBUFFER_BINDING
 0x8CA7

	)

1012 
	#GL_READ_FRAMEBUFFER
 0x8CA8

	)

1013 
	#GL_DRAW_FRAMEBUFFER
 0x8CA9

	)

1014 
	#GL_READ_FRAMEBUFFER_BINDING
 0x8CAA

	)

1015 
	#GL_RENDERBUFFER_SAMPLES
 0x8CAB

	)

1016 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
 0x8CD0

	)

1017 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME
 0x8CD1

	)

1018 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
 0x8CD2

	)

1019 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE
 0x8CD3

	)

1020 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER
 0x8CD4

	)

1021 
	#GL_FRAMEBUFFER_COMPLETE
 0x8CD5

	)

1022 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT
 0x8CD6

	)

1023 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT
 0x8CD7

	)

1024 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER
 0x8CDB

	)

1025 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER
 0x8CDC

	)

1026 
	#GL_FRAMEBUFFER_UNSUPPORTED
 0x8CDD

	)

1027 
	#GL_MAX_COLOR_ATTACHMENTS
 0x8CDF

	)

1028 
	#GL_COLOR_ATTACHMENT0
 0x8CE0

	)

1029 
	#GL_COLOR_ATTACHMENT1
 0x8CE1

	)

1030 
	#GL_COLOR_ATTACHMENT2
 0x8CE2

	)

1031 
	#GL_COLOR_ATTACHMENT3
 0x8CE3

	)

1032 
	#GL_COLOR_ATTACHMENT4
 0x8CE4

	)

1033 
	#GL_COLOR_ATTACHMENT5
 0x8CE5

	)

1034 
	#GL_COLOR_ATTACHMENT6
 0x8CE6

	)

1035 
	#GL_COLOR_ATTACHMENT7
 0x8CE7

	)

1036 
	#GL_COLOR_ATTACHMENT8
 0x8CE8

	)

1037 
	#GL_COLOR_ATTACHMENT9
 0x8CE9

	)

1038 
	#GL_COLOR_ATTACHMENT10
 0x8CEA

	)

1039 
	#GL_COLOR_ATTACHMENT11
 0x8CEB

	)

1040 
	#GL_COLOR_ATTACHMENT12
 0x8CEC

	)

1041 
	#GL_COLOR_ATTACHMENT13
 0x8CED

	)

1042 
	#GL_COLOR_ATTACHMENT14
 0x8CEE

	)

1043 
	#GL_COLOR_ATTACHMENT15
 0x8CEF

	)

1044 
	#GL_DEPTH_ATTACHMENT
 0x8D00

	)

1045 
	#GL_STENCIL_ATTACHMENT
 0x8D20

	)

1046 
	#GL_FRAMEBUFFER
 0x8D40

	)

1047 
	#GL_RENDERBUFFER
 0x8D41

	)

1048 
	#GL_RENDERBUFFER_WIDTH
 0x8D42

	)

1049 
	#GL_RENDERBUFFER_HEIGHT
 0x8D43

	)

1050 
	#GL_RENDERBUFFER_INTERNAL_FORMAT
 0x8D44

	)

1051 
	#GL_STENCIL_INDEX1
 0x8D46

	)

1052 
	#GL_STENCIL_INDEX4
 0x8D47

	)

1053 
	#GL_STENCIL_INDEX8
 0x8D48

	)

1054 
	#GL_STENCIL_INDEX16
 0x8D49

	)

1055 
	#GL_RENDERBUFFER_RED_SIZE
 0x8D50

	)

1056 
	#GL_RENDERBUFFER_GREEN_SIZE
 0x8D51

	)

1057 
	#GL_RENDERBUFFER_BLUE_SIZE
 0x8D52

	)

1058 
	#GL_RENDERBUFFER_ALPHA_SIZE
 0x8D53

	)

1059 
	#GL_RENDERBUFFER_DEPTH_SIZE
 0x8D54

	)

1060 
	#GL_RENDERBUFFER_STENCIL_SIZE
 0x8D55

	)

1061 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE
 0x8D56

	)

1062 
	#GL_MAX_SAMPLES
 0x8D57

	)

1063 
	#GL_INDEX
 0x8222

	)

1064 
	#GL_TEXTURE_LUMINANCE_TYPE
 0x8C14

	)

1065 
	#GL_TEXTURE_INTENSITY_TYPE
 0x8C15

	)

1066 
	#GL_FRAMEBUFFER_SRGB
 0x8DB9

	)

1067 
	#GL_HALF_FLOAT
 0x140B

	)

1068 
	#GL_MAP_READ_BIT
 0x0001

	)

1069 
	#GL_MAP_WRITE_BIT
 0x0002

	)

1070 
	#GL_MAP_INVALIDATE_RANGE_BIT
 0x0004

	)

1071 
	#GL_MAP_INVALIDATE_BUFFER_BIT
 0x0008

	)

1072 
	#GL_MAP_FLUSH_EXPLICIT_BIT
 0x0010

	)

1073 
	#GL_MAP_UNSYNCHRONIZED_BIT
 0x0020

	)

1074 
	#GL_COMPRESSED_RED_RGTC1
 0x8DBB

	)

1075 
	#GL_COMPRESSED_SIGNED_RED_RGTC1
 0x8DBC

	)

1076 
	#GL_COMPRESSED_RG_RGTC2
 0x8DBD

	)

1077 
	#GL_COMPRESSED_SIGNED_RG_RGTC2
 0x8DBE

	)

1078 
	#GL_RG
 0x8227

	)

1079 
	#GL_RG_INTEGER
 0x8228

	)

1080 
	#GL_R8
 0x8229

	)

1081 
	#GL_R16
 0x822A

	)

1082 
	#GL_RG8
 0x822B

	)

1083 
	#GL_RG16
 0x822C

	)

1084 
	#GL_R16F
 0x822D

	)

1085 
	#GL_R32F
 0x822E

	)

1086 
	#GL_RG16F
 0x822F

	)

1087 
	#GL_RG32F
 0x8230

	)

1088 
	#GL_R8I
 0x8231

	)

1089 
	#GL_R8UI
 0x8232

	)

1090 
	#GL_R16I
 0x8233

	)

1091 
	#GL_R16UI
 0x8234

	)

1092 
	#GL_R32I
 0x8235

	)

1093 
	#GL_R32UI
 0x8236

	)

1094 
	#GL_RG8I
 0x8237

	)

1095 
	#GL_RG8UI
 0x8238

	)

1096 
	#GL_RG16I
 0x8239

	)

1097 
	#GL_RG16UI
 0x823A

	)

1098 
	#GL_RG32I
 0x823B

	)

1099 
	#GL_RG32UI
 0x823C

	)

1100 
	#GL_VERTEX_ARRAY_BINDING
 0x85B5

	)

1101 
	#GL_CLAMP_VERTEX_COLOR
 0x891A

	)

1102 
	#GL_CLAMP_FRAGMENT_COLOR
 0x891B

	)

1103 
	#GL_ALPHA_INTEGER
 0x8D97

	)

1104 (
APIENTRYP
 
	tPFNGLCOLORMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

1105 (
APIENTRYP
 
	tPFNGLGETBOOLEANI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

1106 (
APIENTRYP
 
	tPFNGLGETINTEGERI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

1107 (
APIENTRYP
 
	tPFNGLENABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1108 (
APIENTRYP
 
	tPFNGLDISABLEIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1109 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1110 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

1111 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKPROC
) ();

1112 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

1113 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

1114 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

1115 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

1116 (
APIENTRYP
 
	tPFNGLCLAMPCOLORPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

1117 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

1118 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERPROC
) ();

1119 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

1120 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1121 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1122 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

1123 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

1124 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

1125 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

1126 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

1127 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

1128 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

1129 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

1130 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1131 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1132 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1133 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1134 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1135 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1136 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1137 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

1138 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

1139 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

1140 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

1141 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

1142 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

1143 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

1144 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1145 (
APIENTRYP
 
	tPFNGLUNIFORM1UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

1146 (
APIENTRYP
 
	tPFNGLUNIFORM2UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

1147 (
APIENTRYP
 
	tPFNGLUNIFORM3UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1148 (
APIENTRYP
 
	tPFNGLUNIFORM4UIPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1149 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1150 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1151 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1152 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1153 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

1154 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

1155 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1156 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

1157 (
APIENTRYP
 
	tPFNGLCLEARBUFFERIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° GLöà*
	tvÆue
);

1158 (
APIENTRYP
 
	tPFNGLCLEARBUFFERUIVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1159 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFVPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1160 (
APIENTRYP
 
	tPFNGLCLEARBUFFERFIPROC
Ë(
	tGLíum
 
	tbuf„r
, 
	tGLöt
 
	tdøwbuf„r
, 
	tGLÊﬂt
 
	tdïth
, GLöà
	t°ícû
);

1161 c⁄° 
	tGLubyã
 *(
	tAPIENTRYP
 
	tPFNGLGETSTRINGIPROC
Ë(
	tGLíum
 
	t«me
, 
	tGLuöt
 
	tödex
);

1162 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFERPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

1163 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

1164 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

1165 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

1166 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1167 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1168 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFERPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

1169 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

1170 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

1171 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

1172 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSPROC
Ë(
	tGLíum
 
	tèrgë
);

1173 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1174 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1175 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

1176 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

1177 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1178 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPPROC
Ë(
	tGLíum
 
	tèrgë
);

1179 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFERPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

1180 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

1181 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

1182 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

1183 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

1184 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1185 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

1186 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

1187 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYPROC
Ë(
	tGLuöt
 
	t¨øy
);

1188 #ifde‡
GL_GLEXT_PROTOTYPES


1189 
GLAPI
 
APIENTRY
 
glCﬁ‹Maski
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

1190 
GLAPI
 
APIENTRY
 
glGëBoﬁóni_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

1191 
GLAPI
 
APIENTRY
 
glGëI¡egîi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

1192 
GLAPI
 
APIENTRY
 
glE«bÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1193 
GLAPI
 
APIENTRY
 
glDißbÀi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1194 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdi
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1195 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdback
 (
GLíum
 
¥imôiveMode
);

1196 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdback
 ();

1197 
GLAPI
 
APIENTRY
 
glBödBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

1198 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

1199 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögs
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
v¨yögs
, 
GLíum
 
buf„rMode
);

1200 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yög
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

1201 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

1202 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídî
 (
GLuöt
 
id
, 
GLíum
 
mode
);

1203 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídî
 ();

1204 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

1205 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1206 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuiv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1207 
GLAPI
 
APIENTRY
 
glVîãxAâribI1i
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

1208 
GLAPI
 
APIENTRY
 
glVîãxAâribI2i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

1209 
GLAPI
 
APIENTRY
 
glVîãxAâribI3i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

1210 
GLAPI
 
APIENTRY
 
glVîãxAâribI4i
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

1211 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ui
 (
GLuöt
 
ödex
, GLuöà
x
);

1212 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

1213 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

1214 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ui
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

1215 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1216 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1217 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1218 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

1219 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1220 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1221 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1222 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiv
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

1223 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bv
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

1224 
GLAPI
 
APIENTRY
 
glVîãxAâribI4sv
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

1225 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubv
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

1226 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usv
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

1227 
GLAPI
 
APIENTRY
 
glGëUnif‹muiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

1228 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

1229 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1230 
GLAPI
 
APIENTRY
 
glUnif‹m1ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

1231 
GLAPI
 
APIENTRY
 
glUnif‹m2ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

1232 
GLAPI
 
APIENTRY
 
glUnif‹m3ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

1233 
GLAPI
 
APIENTRY
 
glUnif‹m4ui
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

1234 
GLAPI
 
APIENTRY
 
glUnif‹m1uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1235 
GLAPI
 
APIENTRY
 
glUnif‹m2uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1236 
GLAPI
 
APIENTRY
 
glUnif‹m3uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1237 
GLAPI
 
APIENTRY
 
glUnif‹m4uiv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

1238 
GLAPI
 
APIENTRY
 
glTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

1239 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

1240 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1241 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

1242 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„riv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° GLöà*
vÆue
);

1243 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„ruiv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLuöt
 *
vÆue
);

1244 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfv
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, c⁄° 
GLÊﬂt
 *
vÆue
);

1245 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rfi
 (
GLíum
 
buf„r
, 
GLöt
 
døwbuf„r
, 
GLÊﬂt
 
dïth
, GLöà
°ícû
);

1246 
GLAPI
 c⁄° 
GLubyã
 *
APIENTRY
 
glGëSåögi
 (
GLíum
 
«me
, 
GLuöt
 
ödex
);

1247 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„r
 (
GLuöt
 
ªndîbuf„r
);

1248 
GLAPI
 
APIENTRY
 
glBödRídîbuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

1249 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

1250 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

1251 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹age
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

1252 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1253 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„r
 (
GLuöt
 
‰amebuf„r
);

1254 
GLAPI
 
APIENTRY
 
glBödFømebuf„r
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

1255 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rs
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

1256 
GLAPI
 
APIENTRY
 
glGíFømebuf„rs
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

1257 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètus
 (GLíum 
èrgë
);

1258 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1259 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1260 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3D
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

1261 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„r
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

1262 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1263 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠
 (
GLíum
 
èrgë
);

1264 
GLAPI
 
APIENTRY
 
glBlôFømebuf„r
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

1265 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

1266 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayî
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

1267 
GLAPI
 *
APIENTRY
 
glM≠Buf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

1268 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™ge
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

1269 
GLAPI
 
APIENTRY
 
glBödVîãxAºay
 (
GLuöt
 
¨øy
);

1270 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºays
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

1271 
GLAPI
 
APIENTRY
 
glGíVîãxAºays
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

1272 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºay
 (
GLuöt
 
¨øy
);

1276 #i‚de‡
GL_VERSION_3_1


1277 
	#GL_VERSION_3_1
 1

	)

1278 
	#GL_SAMPLER_2D_RECT
 0x8B63

	)

1279 
	#GL_SAMPLER_2D_RECT_SHADOW
 0x8B64

	)

1280 
	#GL_SAMPLER_BUFFER
 0x8DC2

	)

1281 
	#GL_INT_SAMPLER_2D_RECT
 0x8DCD

	)

1282 
	#GL_INT_SAMPLER_BUFFER
 0x8DD0

	)

1283 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT
 0x8DD5

	)

1284 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER
 0x8DD8

	)

1285 
	#GL_TEXTURE_BUFFER
 0x8C2A

	)

1286 
	#GL_MAX_TEXTURE_BUFFER_SIZE
 0x8C2B

	)

1287 
	#GL_TEXTURE_BINDING_BUFFER
 0x8C2C

	)

1288 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING
 0x8C2D

	)

1289 
	#GL_TEXTURE_RECTANGLE
 0x84F5

	)

1290 
	#GL_TEXTURE_BINDING_RECTANGLE
 0x84F6

	)

1291 
	#GL_PROXY_TEXTURE_RECTANGLE
 0x84F7

	)

1292 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE
 0x84F8

	)

1293 
	#GL_R8_SNORM
 0x8F94

	)

1294 
	#GL_RG8_SNORM
 0x8F95

	)

1295 
	#GL_RGB8_SNORM
 0x8F96

	)

1296 
	#GL_RGBA8_SNORM
 0x8F97

	)

1297 
	#GL_R16_SNORM
 0x8F98

	)

1298 
	#GL_RG16_SNORM
 0x8F99

	)

1299 
	#GL_RGB16_SNORM
 0x8F9A

	)

1300 
	#GL_RGBA16_SNORM
 0x8F9B

	)

1301 
	#GL_SIGNED_NORMALIZED
 0x8F9C

	)

1302 
	#GL_PRIMITIVE_RESTART
 0x8F9D

	)

1303 
	#GL_PRIMITIVE_RESTART_INDEX
 0x8F9E

	)

1304 
	#GL_COPY_READ_BUFFER
 0x8F36

	)

1305 
	#GL_COPY_WRITE_BUFFER
 0x8F37

	)

1306 
	#GL_UNIFORM_BUFFER
 0x8A11

	)

1307 
	#GL_UNIFORM_BUFFER_BINDING
 0x8A28

	)

1308 
	#GL_UNIFORM_BUFFER_START
 0x8A29

	)

1309 
	#GL_UNIFORM_BUFFER_SIZE
 0x8A2A

	)

1310 
	#GL_MAX_VERTEX_UNIFORM_BLOCKS
 0x8A2B

	)

1311 
	#GL_MAX_FRAGMENT_UNIFORM_BLOCKS
 0x8A2D

	)

1312 
	#GL_MAX_COMBINED_UNIFORM_BLOCKS
 0x8A2E

	)

1313 
	#GL_MAX_UNIFORM_BUFFER_BINDINGS
 0x8A2F

	)

1314 
	#GL_MAX_UNIFORM_BLOCK_SIZE
 0x8A30

	)

1315 
	#GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS
 0x8A31

	)

1316 
	#GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS
 0x8A33

	)

1317 
	#GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT
 0x8A34

	)

1318 
	#GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH
 0x8A35

	)

1319 
	#GL_ACTIVE_UNIFORM_BLOCKS
 0x8A36

	)

1320 
	#GL_UNIFORM_TYPE
 0x8A37

	)

1321 
	#GL_UNIFORM_SIZE
 0x8A38

	)

1322 
	#GL_UNIFORM_NAME_LENGTH
 0x8A39

	)

1323 
	#GL_UNIFORM_BLOCK_INDEX
 0x8A3A

	)

1324 
	#GL_UNIFORM_OFFSET
 0x8A3B

	)

1325 
	#GL_UNIFORM_ARRAY_STRIDE
 0x8A3C

	)

1326 
	#GL_UNIFORM_MATRIX_STRIDE
 0x8A3D

	)

1327 
	#GL_UNIFORM_IS_ROW_MAJOR
 0x8A3E

	)

1328 
	#GL_UNIFORM_BLOCK_BINDING
 0x8A3F

	)

1329 
	#GL_UNIFORM_BLOCK_DATA_SIZE
 0x8A40

	)

1330 
	#GL_UNIFORM_BLOCK_NAME_LENGTH
 0x8A41

	)

1331 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS
 0x8A42

	)

1332 
	#GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES
 0x8A43

	)

1333 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER
 0x8A44

	)

1334 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER
 0x8A46

	)

1335 
	#GL_INVALID_INDEX
 0xFFFFFFFFu

	)

1336 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
);

1337 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
);

1338 (
APIENTRYP
 
	tPFNGLTEXBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

1339 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXPROC
Ë(
	tGLuöt
 
	tödex
);

1340 (
APIENTRYP
 
	tPFNGLCOPYBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tªadT¨gë
, GLíum 
	twrôeT¨gë
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

1341 (
APIENTRYP
 
	tPFNGLGETUNIFORMINDICESPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tunif‹mNames
, GLuöà*
	tunif‹mIndi˚s
);

1342 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMSIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tunif‹mCou¡
, c⁄° GLuöà*
	tunif‹mIndi˚s
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1343 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mName
);

1344 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBLOCKINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	tunif‹mBlockName
);

1345 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1346 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMBLOCKNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tunif‹mBlockName
);

1347 (
APIENTRYP
 
	tPFNGLUNIFORMBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tunif‹mBlockIndex
, GLuöà
	tunif‹mBlockBödög
);

1348 #ifde‡
GL_GLEXT_PROTOTYPES


1349 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚d
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
);

1350 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚d
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
);

1351 
GLAPI
 
APIENTRY
 
glTexBuf„r
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

1352 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndex
 (
GLuöt
 
ödex
);

1353 
GLAPI
 
APIENTRY
 
glC›yBuf„rSubD©a
 (
GLíum
 
ªadT¨gë
, GLíum 
wrôeT¨gë
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

1354 
GLAPI
 
APIENTRY
 
glGëUnif‹mIndi˚s
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° 
GLch¨
 *c⁄°*
unif‹mNames
, GLuöà*
unif‹mIndi˚s
);

1355 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹msiv
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
unif‹mCou¡
, c⁄° GLuöà*
unif‹mIndi˚s
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1356 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mName
);

1357 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëUnif‹mBlockIndex
 (GLuöà
¥ogøm
, c⁄° 
GLch¨
 *
unif‹mBlockName
);

1358 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockiv
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1359 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mBlockName
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
unif‹mBlockName
);

1360 
GLAPI
 
APIENTRY
 
glUnif‹mBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
unif‹mBlockIndex
, GLuöà
unif‹mBlockBödög
);

1364 #i‚de‡
GL_VERSION_3_2


1365 
	#GL_VERSION_3_2
 1

	)

1366 
__GLsync
 *
	tGLsync
;

1367 #i‚de‡
GLEXT_64_TYPES_DEFINED


1369 
	#GLEXT_64_TYPES_DEFINED


	)

1372 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

1373 
	~<öây≥s.h
>

1374 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

1375 
	~<öây≥s.h
>

1376 #i‡
deföed
(
__STDC__
)

1377 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

1378 
	töt64_t
;

1379 
	tuöt64_t
;

1381 
	töt64_t
;

1382 
	tuöt64_t
;

1385 #ñi‡
deföed
–
__VMS
 ) || deföed(
__sgi
)

1386 
	~<öây≥s.h
>

1387 #ñi‡
deföed
(
__SCO__
Ë|| deföed(
__USLC__
)

1388 
	~<°döt.h
>

1389 #ñi‡
deföed
(
__UNIXOS2__
Ë|| deföed(
__SOL64__
)

1390 
	töt32_t
;

1391 
	töt64_t
;

1392 
	tuöt64_t
;

1393 #ñi‡
deföed
(
_WIN32
Ë&& deföed(
__GNUC__
)

1394 
	~<°döt.h
>

1395 #ñi‡
deföed
(
_WIN32
)

1396 
__öt32
 
	töt32_t
;

1397 
__öt64
 
	töt64_t
;

1398 
	t__öt64
 
	tuöt64_t
;

1401 
	~<öây≥s.h
>

1404 
uöt64_t
 
	tGLuöt64
;

1405 
öt64_t
 
	tGLöt64
;

1406 
	#GL_CONTEXT_CORE_PROFILE_BIT
 0x00000001

	)

1407 
	#GL_CONTEXT_COMPATIBILITY_PROFILE_BIT
 0x00000002

	)

1408 
	#GL_LINES_ADJACENCY
 0x000A

	)

1409 
	#GL_LINE_STRIP_ADJACENCY
 0x000B

	)

1410 
	#GL_TRIANGLES_ADJACENCY
 0x000C

	)

1411 
	#GL_TRIANGLE_STRIP_ADJACENCY
 0x000D

	)

1412 
	#GL_PROGRAM_POINT_SIZE
 0x8642

	)

1413 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS
 0x8C29

	)

1414 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED
 0x8DA7

	)

1415 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS
 0x8DA8

	)

1416 
	#GL_GEOMETRY_SHADER
 0x8DD9

	)

1417 
	#GL_GEOMETRY_VERTICES_OUT
 0x8916

	)

1418 
	#GL_GEOMETRY_INPUT_TYPE
 0x8917

	)

1419 
	#GL_GEOMETRY_OUTPUT_TYPE
 0x8918

	)

1420 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS
 0x8DDF

	)

1421 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES
 0x8DE0

	)

1422 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS
 0x8DE1

	)

1423 
	#GL_MAX_VERTEX_OUTPUT_COMPONENTS
 0x9122

	)

1424 
	#GL_MAX_GEOMETRY_INPUT_COMPONENTS
 0x9123

	)

1425 
	#GL_MAX_GEOMETRY_OUTPUT_COMPONENTS
 0x9124

	)

1426 
	#GL_MAX_FRAGMENT_INPUT_COMPONENTS
 0x9125

	)

1427 
	#GL_CONTEXT_PROFILE_MASK
 0x9126

	)

1428 
	#GL_DEPTH_CLAMP
 0x864F

	)

1429 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION
 0x8E4C

	)

1430 
	#GL_FIRST_VERTEX_CONVENTION
 0x8E4D

	)

1431 
	#GL_LAST_VERTEX_CONVENTION
 0x8E4E

	)

1432 
	#GL_PROVOKING_VERTEX
 0x8E4F

	)

1433 
	#GL_TEXTURE_CUBE_MAP_SEAMLESS
 0x884F

	)

1434 
	#GL_MAX_SERVER_WAIT_TIMEOUT
 0x9111

	)

1435 
	#GL_OBJECT_TYPE
 0x9112

	)

1436 
	#GL_SYNC_CONDITION
 0x9113

	)

1437 
	#GL_SYNC_STATUS
 0x9114

	)

1438 
	#GL_SYNC_FLAGS
 0x9115

	)

1439 
	#GL_SYNC_FENCE
 0x9116

	)

1440 
	#GL_SYNC_GPU_COMMANDS_COMPLETE
 0x9117

	)

1441 
	#GL_UNSIGNALED
 0x9118

	)

1442 
	#GL_SIGNALED
 0x9119

	)

1443 
	#GL_ALREADY_SIGNALED
 0x911A

	)

1444 
	#GL_TIMEOUT_EXPIRED
 0x911B

	)

1445 
	#GL_CONDITION_SATISFIED
 0x911C

	)

1446 
	#GL_WAIT_FAILED
 0x911D

	)

1447 
	#GL_TIMEOUT_IGNORED
 0xFFFFFFFFFFFFFFFFuŒ

	)

1448 
	#GL_SYNC_FLUSH_COMMANDS_BIT
 0x00000001

	)

1449 
	#GL_SAMPLE_POSITION
 0x8E50

	)

1450 
	#GL_SAMPLE_MASK
 0x8E51

	)

1451 
	#GL_SAMPLE_MASK_VALUE
 0x8E52

	)

1452 
	#GL_MAX_SAMPLE_MASK_WORDS
 0x8E59

	)

1453 
	#GL_TEXTURE_2D_MULTISAMPLE
 0x9100

	)

1454 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE
 0x9101

	)

1455 
	#GL_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9102

	)

1456 
	#GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY
 0x9103

	)

1457 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE
 0x9104

	)

1458 
	#GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY
 0x9105

	)

1459 
	#GL_TEXTURE_SAMPLES
 0x9106

	)

1460 
	#GL_TEXTURE_FIXED_SAMPLE_LOCATIONS
 0x9107

	)

1461 
	#GL_SAMPLER_2D_MULTISAMPLE
 0x9108

	)

1462 
	#GL_INT_SAMPLER_2D_MULTISAMPLE
 0x9109

	)

1463 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE
 0x910A

	)

1464 
	#GL_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910B

	)

1465 
	#GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910C

	)

1466 
	#GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY
 0x910D

	)

1467 
	#GL_MAX_COLOR_TEXTURE_SAMPLES
 0x910E

	)

1468 
	#GL_MAX_DEPTH_TEXTURE_SAMPLES
 0x910F

	)

1469 
	#GL_MAX_INTEGER_SAMPLES
 0x9110

	)

1470 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1471 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, 
	tGLöt
 
	tba£vîãx
);

1472 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
);

1473 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSBASEVERTEXPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	tdøwcou¡
, c⁄° 
	tGLöt
 *
	tba£vîãx
);

1474 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXPROC
Ë(
	tGLíum
 
	tmode
);

1475 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLFENCESYNCPROC
Ë(
	tGLíum
 
	tc⁄dôi⁄
, 
	tGLbôfõld
 
	tÊags
);

1476 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSYNCPROC
Ë(
	tGLsync
 
	tsync
);

1477 (
APIENTRYP
 
	tPFNGLDELETESYNCPROC
Ë(
	tGLsync
 
	tsync
);

1478 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCLIENTWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1479 (
APIENTRYP
 
	tPFNGLWAITSYNCPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLbôfõld
 
	tÊags
, 
	tGLuöt64
 
	ttimeout
);

1480 (
APIENTRYP
 
	tPFNGLGETINTEGER64VPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	td©a
);

1481 (
APIENTRYP
 
	tPFNGLGETSYNCIVPROC
Ë(
	tGLsync
 
	tsync
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

1482 (
APIENTRYP
 
	tPFNGLGETINTEGER64I_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt64
 *
	td©a
);

1483 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1484 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

1485 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1486 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

1487 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

1488 (
APIENTRYP
 
	tPFNGLSAMPLEMASKIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

1489 #ifde‡
GL_GLEXT_PROTOTYPES


1490 
GLAPI
 
APIENTRY
 
glDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1491 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsBa£Vîãx
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, 
GLöt
 
ba£vîãx
);

1492 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£Vîãx
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
);

1493 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsBa£Vîãx
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
døwcou¡
, c⁄° 
GLöt
 *
ba£vîãx
);

1494 
GLAPI
 
APIENTRY
 
glProvokögVîãx
 (
GLíum
 
mode
);

1495 
GLAPI
 
GLsync
 
APIENTRY
 
glFí˚Sync
 (
GLíum
 
c⁄dôi⁄
, 
GLbôfõld
 
Êags
);

1496 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSync
 (
GLsync
 
sync
);

1497 
GLAPI
 
APIENTRY
 
glDñëeSync
 (
GLsync
 
sync
);

1498 
GLAPI
 
GLíum
 
APIENTRY
 
glClõ¡WaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1499 
GLAPI
 
APIENTRY
 
glWaôSync
 (
GLsync
 
sync
, 
GLbôfõld
 
Êags
, 
GLuöt64
 
timeout
);

1500 
GLAPI
 
APIENTRY
 
glGëI¡egî64v
 (
GLíum
 
≤ame
, 
GLöt64
 *
d©a
);

1501 
GLAPI
 
APIENTRY
 
glGëSynciv
 (
GLsync
 
sync
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

1502 
GLAPI
 
APIENTRY
 
glGëI¡egî64i_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt64
 *
d©a
);

1503 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîi64v
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt64
 *
∑øms
);

1504 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

1505 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1506 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

1507 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efv
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

1508 
GLAPI
 
APIENTRY
 
glSam∂eMaski
 (
GLuöt
 
ödex
, 
GLbôfõld
 
mask
);

1512 #i‚de‡
GL_VERSION_3_3


1513 
	#GL_VERSION_3_3
 1

	)

1514 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR
 0x88FE

	)

1515 
	#GL_SRC1_COLOR
 0x88F9

	)

1516 
	#GL_ONE_MINUS_SRC1_COLOR
 0x88FA

	)

1517 
	#GL_ONE_MINUS_SRC1_ALPHA
 0x88FB

	)

1518 
	#GL_MAX_DUAL_SOURCE_DRAW_BUFFERS
 0x88FC

	)

1519 
	#GL_ANY_SAMPLES_PASSED
 0x8C2F

	)

1520 
	#GL_SAMPLER_BINDING
 0x8919

	)

1521 
	#GL_RGB10_A2UI
 0x906F

	)

1522 
	#GL_TEXTURE_SWIZZLE_R
 0x8E42

	)

1523 
	#GL_TEXTURE_SWIZZLE_G
 0x8E43

	)

1524 
	#GL_TEXTURE_SWIZZLE_B
 0x8E44

	)

1525 
	#GL_TEXTURE_SWIZZLE_A
 0x8E45

	)

1526 
	#GL_TEXTURE_SWIZZLE_RGBA
 0x8E46

	)

1527 
	#GL_TIME_ELAPSED
 0x88BF

	)

1528 
	#GL_TIMESTAMP
 0x8E28

	)

1529 
	#GL_INT_2_10_10_10_REV
 0x8D9F

	)

1530 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONINDEXEDPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹Numbî
, GLuöà
	tödex
, c⁄° 
	tGLch¨
 *
	t«me
);

1531 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATAINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

1532 (
APIENTRYP
 
	tPFNGLGENSAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, 
	tGLuöt
 *
	tßm∂îs
);

1533 (
APIENTRYP
 
	tPFNGLDELETESAMPLERSPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tßm∂îs
);

1534 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISSAMPLERPROC
Ë(
	tGLuöt
 
	tßm∂î
);

1535 (
APIENTRYP
 
	tPFNGLBINDSAMPLERPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tßm∂î
);

1536 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

1537 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1538 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

1539 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

1540 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

1541 (
APIENTRYP
 
	tPFNGLSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, c⁄° GLuöà*
	t∑øm
);

1542 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1543 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1544 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERFVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

1545 (
APIENTRYP
 
	tPFNGLGETSAMPLERPARAMETERIUIVPROC
Ë(
	tGLuöt
 
	tßm∂î
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

1546 (
APIENTRYP
 
	tPFNGLQUERYCOUNTERPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tèrgë
);

1547 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

1548 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

1549 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

1550 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1551 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP1UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1552 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1553 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP2UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1554 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1555 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP3UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1556 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tvÆue
);

1557 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBP4UIVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, c⁄° GLuöà*
	tvÆue
);

1558 (
APIENTRYP
 
	tPFNGLVERTEXP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1559 (
APIENTRYP
 
	tPFNGLVERTEXP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1560 (
APIENTRYP
 
	tPFNGLVERTEXP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1561 (
APIENTRYP
 
	tPFNGLVERTEXP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1562 (
APIENTRYP
 
	tPFNGLVERTEXP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tvÆue
);

1563 (
APIENTRYP
 
	tPFNGLVERTEXP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tvÆue
);

1564 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1565 (
APIENTRYP
 
	tPFNGLTEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1566 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1567 (
APIENTRYP
 
	tPFNGLTEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1568 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1569 (
APIENTRYP
 
	tPFNGLTEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1570 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1571 (
APIENTRYP
 
	tPFNGLTEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1572 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1573 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP1UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1574 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1575 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP2UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1576 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1577 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP3UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1578 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1579 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDP4UIVPROC
Ë(
	tGLíum
 
	tãxtuª
, GLíum 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1580 (
APIENTRYP
 
	tPFNGLNORMALP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tco‹ds
);

1581 (
APIENTRYP
 
	tPFNGLNORMALP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tco‹ds
);

1582 (
APIENTRYP
 
	tPFNGLCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1583 (
APIENTRYP
 
	tPFNGLCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1584 (
APIENTRYP
 
	tPFNGLCOLORP4UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1585 (
APIENTRYP
 
	tPFNGLCOLORP4UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1586 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tcﬁ‹
);

1587 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORP3UIVPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLuöt
 *
	tcﬁ‹
);

1588 #ifde‡
GL_GLEXT_PROTOTYPES


1589 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄Indexed
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹Numbî
, GLuöà
ödex
, c⁄° 
GLch¨
 *
«me
);

1590 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aIndex
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

1591 
GLAPI
 
APIENTRY
 
glGíSam∂îs
 (
GLsizei
 
cou¡
, 
GLuöt
 *
ßm∂îs
);

1592 
GLAPI
 
APIENTRY
 
glDñëeSam∂îs
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ßm∂îs
);

1593 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsSam∂î
 (
GLuöt
 
ßm∂î
);

1594 
GLAPI
 
APIENTRY
 
glBödSam∂î
 (
GLuöt
 
unô
, GLuöà
ßm∂î
);

1595 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîi
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

1596 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1597 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîf
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

1598 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

1599 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

1600 
GLAPI
 
APIENTRY
 
glSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, c⁄° GLuöà*
∑øm
);

1601 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1602 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1603 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîfv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

1604 
GLAPI
 
APIENTRY
 
glGëSam∂îP¨amëîIuiv
 (
GLuöt
 
ßm∂î
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

1605 
GLAPI
 
APIENTRY
 
glQuîyCou¡î
 (
GLuöt
 
id
, 
GLíum
 
èrgë
);

1606 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

1607 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64v
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

1608 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

1609 
GLAPI
 
APIENTRY
 
glVîãxAâribP1ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1610 
GLAPI
 
APIENTRY
 
glVîãxAâribP1uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1611 
GLAPI
 
APIENTRY
 
glVîãxAâribP2ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1612 
GLAPI
 
APIENTRY
 
glVîãxAâribP2uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1613 
GLAPI
 
APIENTRY
 
glVîãxAâribP3ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1614 
GLAPI
 
APIENTRY
 
glVîãxAâribP3uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1615 
GLAPI
 
APIENTRY
 
glVîãxAâribP4ui
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
vÆue
);

1616 
GLAPI
 
APIENTRY
 
glVîãxAâribP4uiv
 (
GLuöt
 
ödex
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, c⁄° GLuöà*
vÆue
);

1617 
GLAPI
 
APIENTRY
 
glVîãxP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1618 
GLAPI
 
APIENTRY
 
glVîãxP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1619 
GLAPI
 
APIENTRY
 
glVîãxP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1620 
GLAPI
 
APIENTRY
 
glVîãxP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1621 
GLAPI
 
APIENTRY
 
glVîãxP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
vÆue
);

1622 
GLAPI
 
APIENTRY
 
glVîãxP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
vÆue
);

1623 
GLAPI
 
APIENTRY
 
glTexCo‹dP1ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1624 
GLAPI
 
APIENTRY
 
glTexCo‹dP1uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1625 
GLAPI
 
APIENTRY
 
glTexCo‹dP2ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1626 
GLAPI
 
APIENTRY
 
glTexCo‹dP2uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1627 
GLAPI
 
APIENTRY
 
glTexCo‹dP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1628 
GLAPI
 
APIENTRY
 
glTexCo‹dP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1629 
GLAPI
 
APIENTRY
 
glTexCo‹dP4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1630 
GLAPI
 
APIENTRY
 
glTexCo‹dP4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1631 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1632 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP1uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1633 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1634 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP2uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1635 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1636 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP3uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1637 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4ui
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, 
GLuöt
 
co‹ds
);

1638 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dP4uiv
 (
GLíum
 
ãxtuª
, GLíum 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1639 
GLAPI
 
APIENTRY
 
glN‹mÆP3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
co‹ds
);

1640 
GLAPI
 
APIENTRY
 
glN‹mÆP3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
co‹ds
);

1641 
GLAPI
 
APIENTRY
 
glCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1642 
GLAPI
 
APIENTRY
 
glCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1643 
GLAPI
 
APIENTRY
 
glCﬁ‹P4ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1644 
GLAPI
 
APIENTRY
 
glCﬁ‹P4uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1645 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3ui
 (
GLíum
 
ty≥
, 
GLuöt
 
cﬁ‹
);

1646 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹P3uiv
 (
GLíum
 
ty≥
, c⁄° 
GLuöt
 *
cﬁ‹
);

1650 #i‚de‡
GL_VERSION_4_0


1651 
	#GL_VERSION_4_0
 1

	)

1652 
	#GL_SAMPLE_SHADING
 0x8C36

	)

1653 
	#GL_MIN_SAMPLE_SHADING_VALUE
 0x8C37

	)

1654 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5E

	)

1655 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET
 0x8E5F

	)

1656 
	#GL_TEXTURE_CUBE_MAP_ARRAY
 0x9009

	)

1657 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY
 0x900A

	)

1658 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY
 0x900B

	)

1659 
	#GL_SAMPLER_CUBE_MAP_ARRAY
 0x900C

	)

1660 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW
 0x900D

	)

1661 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900E

	)

1662 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY
 0x900F

	)

1663 
	#GL_DRAW_INDIRECT_BUFFER
 0x8F3F

	)

1664 
	#GL_DRAW_INDIRECT_BUFFER_BINDING
 0x8F43

	)

1665 
	#GL_GEOMETRY_SHADER_INVOCATIONS
 0x887F

	)

1666 
	#GL_MAX_GEOMETRY_SHADER_INVOCATIONS
 0x8E5A

	)

1667 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5B

	)

1668 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET
 0x8E5C

	)

1669 
	#GL_FRAGMENT_INTERPOLATION_OFFSET_BITS
 0x8E5D

	)

1670 
	#GL_MAX_VERTEX_STREAMS
 0x8E71

	)

1671 
	#GL_DOUBLE_VEC2
 0x8FFC

	)

1672 
	#GL_DOUBLE_VEC3
 0x8FFD

	)

1673 
	#GL_DOUBLE_VEC4
 0x8FFE

	)

1674 
	#GL_DOUBLE_MAT2
 0x8F46

	)

1675 
	#GL_DOUBLE_MAT3
 0x8F47

	)

1676 
	#GL_DOUBLE_MAT4
 0x8F48

	)

1677 
	#GL_DOUBLE_MAT2x3
 0x8F49

	)

1678 
	#GL_DOUBLE_MAT2x4
 0x8F4A

	)

1679 
	#GL_DOUBLE_MAT3x2
 0x8F4B

	)

1680 
	#GL_DOUBLE_MAT3x4
 0x8F4C

	)

1681 
	#GL_DOUBLE_MAT4x2
 0x8F4D

	)

1682 
	#GL_DOUBLE_MAT4x3
 0x8F4E

	)

1683 
	#GL_ACTIVE_SUBROUTINES
 0x8DE5

	)

1684 
	#GL_ACTIVE_SUBROUTINE_UNIFORMS
 0x8DE6

	)

1685 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS
 0x8E47

	)

1686 
	#GL_ACTIVE_SUBROUTINE_MAX_LENGTH
 0x8E48

	)

1687 
	#GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH
 0x8E49

	)

1688 
	#GL_MAX_SUBROUTINES
 0x8DE7

	)

1689 
	#GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS
 0x8DE8

	)

1690 
	#GL_NUM_COMPATIBLE_SUBROUTINES
 0x8E4A

	)

1691 
	#GL_COMPATIBLE_SUBROUTINES
 0x8E4B

	)

1692 
	#GL_PATCHES
 0x000E

	)

1693 
	#GL_PATCH_VERTICES
 0x8E72

	)

1694 
	#GL_PATCH_DEFAULT_INNER_LEVEL
 0x8E73

	)

1695 
	#GL_PATCH_DEFAULT_OUTER_LEVEL
 0x8E74

	)

1696 
	#GL_TESS_CONTROL_OUTPUT_VERTICES
 0x8E75

	)

1697 
	#GL_TESS_GEN_MODE
 0x8E76

	)

1698 
	#GL_TESS_GEN_SPACING
 0x8E77

	)

1699 
	#GL_TESS_GEN_VERTEX_ORDER
 0x8E78

	)

1700 
	#GL_TESS_GEN_POINT_MODE
 0x8E79

	)

1701 
	#GL_ISOLINES
 0x8E7A

	)

1702 
	#GL_FRACTIONAL_ODD
 0x8E7B

	)

1703 
	#GL_FRACTIONAL_EVEN
 0x8E7C

	)

1704 
	#GL_MAX_PATCH_VERTICES
 0x8E7D

	)

1705 
	#GL_MAX_TESS_GEN_LEVEL
 0x8E7E

	)

1706 
	#GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E7F

	)

1707 
	#GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E80

	)

1708 
	#GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS
 0x8E81

	)

1709 
	#GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS
 0x8E82

	)

1710 
	#GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS
 0x8E83

	)

1711 
	#GL_MAX_TESS_PATCH_COMPONENTS
 0x8E84

	)

1712 
	#GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS
 0x8E85

	)

1713 
	#GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS
 0x8E86

	)

1714 
	#GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS
 0x8E89

	)

1715 
	#GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS
 0x8E8A

	)

1716 
	#GL_MAX_TESS_CONTROL_INPUT_COMPONENTS
 0x886C

	)

1717 
	#GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS
 0x886D

	)

1718 
	#GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS
 0x8E1E

	)

1719 
	#GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS
 0x8E1F

	)

1720 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER
 0x84F0

	)

1721 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x84F1

	)

1722 
	#GL_TESS_EVALUATION_SHADER
 0x8E87

	)

1723 
	#GL_TESS_CONTROL_SHADER
 0x8E88

	)

1724 
	#GL_TRANSFORM_FEEDBACK
 0x8E22

	)

1725 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED
 0x8E23

	)

1726 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE
 0x8E24

	)

1727 
	#GL_TRANSFORM_FEEDBACK_BINDING
 0x8E25

	)

1728 
	#GL_MAX_TRANSFORM_FEEDBACK_BUFFERS
 0x8E70

	)

1729 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

1730 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

1731 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

1732 (
APIENTRYP
 
	tPFNGLBLENDFUNCIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

1733 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

1734 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
);

1735 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
);

1736 (
APIENTRYP
 
	tPFNGLUNIFORM1DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

1737 (
APIENTRYP
 
	tPFNGLUNIFORM2DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1738 (
APIENTRYP
 
	tPFNGLUNIFORM3DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1739 (
APIENTRYP
 
	tPFNGLUNIFORM4DPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1740 (
APIENTRYP
 
	tPFNGLUNIFORM1DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1741 (
APIENTRYP
 
	tPFNGLUNIFORM2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1742 (
APIENTRYP
 
	tPFNGLUNIFORM3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1743 (
APIENTRYP
 
	tPFNGLUNIFORM4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1744 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1745 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1746 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1747 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1748 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1749 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1750 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3X4DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1751 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X2DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1752 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4X3DVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1753 (
APIENTRYP
 
	tPFNGLGETUNIFORMDVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 *
	t∑øms
);

1754 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEUNIFORMLOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1755 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETSUBROUTINEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, c⁄° 
	tGLch¨
 *
	t«me
);

1756 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1757 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1758 (
APIENTRYP
 
	tPFNGLGETACTIVESUBROUTINENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufsize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

1759 (
APIENTRYP
 
	tPFNGLUNIFORMSUBROUTINESUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

1760 (
APIENTRYP
 
	tPFNGLGETUNIFORMSUBROUTINEUIVPROC
Ë(
	tGLíum
 
	tshadîty≥
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 *
	t∑øms
);

1761 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTAGEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tshadîty≥
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆues
);

1762 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1763 (
APIENTRYP
 
	tPFNGLPATCHPARAMETERFVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆues
);

1764 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

1765 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

1766 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

1767 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKPROC
Ë(
	tGLuöt
 
	tid
);

1768 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKPROC
) ();

1769 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKPROC
) ();

1770 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

1771 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
);

1772 (
APIENTRYP
 
	tPFNGLBEGINQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tid
);

1773 (
APIENTRYP
 
	tPFNGLENDQUERYINDEXEDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

1774 (
APIENTRYP
 
	tPFNGLGETQUERYINDEXEDIVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1775 #ifde‡
GL_GLEXT_PROTOTYPES


1776 
GLAPI
 
APIENTRY
 
glMöSam∂eShadög
 (
GLÊﬂt
 
vÆue
);

1777 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄i
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

1778 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

1779 
GLAPI
 
APIENTRY
 
glBÀndFunci
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

1780 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©ei
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

1781 
GLAPI
 
APIENTRY
 
glDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
);

1782 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
);

1783 
GLAPI
 
APIENTRY
 
glUnif‹m1d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

1784 
GLAPI
 
APIENTRY
 
glUnif‹m2d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

1785 
GLAPI
 
APIENTRY
 
glUnif‹m3d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

1786 
GLAPI
 
APIENTRY
 
glUnif‹m4d
 (
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

1787 
GLAPI
 
APIENTRY
 
glUnif‹m1dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1788 
GLAPI
 
APIENTRY
 
glUnif‹m2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1789 
GLAPI
 
APIENTRY
 
glUnif‹m3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1790 
GLAPI
 
APIENTRY
 
glUnif‹m4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1791 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1792 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1793 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1794 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1795 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1796 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1797 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3x4dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1798 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x2dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1799 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4x3dv
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

1800 
GLAPI
 
APIENTRY
 
glGëUnif‹mdv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 *
∑øms
);

1801 
GLAPI
 
GLöt
 
APIENTRY
 
glGëSubroutöeUnif‹mLoˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1802 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëSubroutöeIndex
 (GLuöà
¥ogøm
, 
GLíum
 
shadîty≥
, c⁄° 
GLch¨
 *
«me
);

1803 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹miv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1804 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeUnif‹mName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1805 
GLAPI
 
APIENTRY
 
glGëA˘iveSubroutöeName
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLuöà
ödex
, 
GLsizei
 
bufsize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

1806 
GLAPI
 
APIENTRY
 
glUnif‹mSubroutöesuiv
 (
GLíum
 
shadîty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ödi˚s
);

1807 
GLAPI
 
APIENTRY
 
glGëUnif‹mSubroutöeuiv
 (
GLíum
 
shadîty≥
, 
GLöt
 
loˇti⁄
, 
GLuöt
 *
∑øms
);

1808 
GLAPI
 
APIENTRY
 
glGëProgømSègeiv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
shadîty≥
, GLíum 
≤ame
, 
GLöt
 *
vÆues
);

1809 
GLAPI
 
APIENTRY
 
glP©chP¨amëîi
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1810 
GLAPI
 
APIENTRY
 
glP©chP¨amëîfv
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆues
);

1811 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdback
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

1812 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacks
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

1813 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacks
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

1814 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdback
 (
GLuöt
 
id
);

1815 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdback
 ();

1816 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdback
 ();

1817 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdback
 (
GLíum
 
mode
, 
GLuöt
 
id
);

1818 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåóm
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
);

1819 
GLAPI
 
APIENTRY
 
glBegöQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
id
);

1820 
GLAPI
 
APIENTRY
 
glEndQuîyIndexed
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

1821 
GLAPI
 
APIENTRY
 
glGëQuîyIndexediv
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

1825 #i‚de‡
GL_VERSION_4_1


1826 
	#GL_VERSION_4_1
 1

	)

1827 
	#GL_FIXED
 0x140C

	)

1828 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE
 0x8B9A

	)

1829 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT
 0x8B9B

	)

1830 
	#GL_LOW_FLOAT
 0x8DF0

	)

1831 
	#GL_MEDIUM_FLOAT
 0x8DF1

	)

1832 
	#GL_HIGH_FLOAT
 0x8DF2

	)

1833 
	#GL_LOW_INT
 0x8DF3

	)

1834 
	#GL_MEDIUM_INT
 0x8DF4

	)

1835 
	#GL_HIGH_INT
 0x8DF5

	)

1836 
	#GL_SHADER_COMPILER
 0x8DFA

	)

1837 
	#GL_SHADER_BINARY_FORMATS
 0x8DF8

	)

1838 
	#GL_NUM_SHADER_BINARY_FORMATS
 0x8DF9

	)

1839 
	#GL_MAX_VERTEX_UNIFORM_VECTORS
 0x8DFB

	)

1840 
	#GL_MAX_VARYING_VECTORS
 0x8DFC

	)

1841 
	#GL_MAX_FRAGMENT_UNIFORM_VECTORS
 0x8DFD

	)

1842 
	#GL_RGB565
 0x8D62

	)

1843 
	#GL_PROGRAM_BINARY_RETRIEVABLE_HINT
 0x8257

	)

1844 
	#GL_PROGRAM_BINARY_LENGTH
 0x8741

	)

1845 
	#GL_NUM_PROGRAM_BINARY_FORMATS
 0x87FE

	)

1846 
	#GL_PROGRAM_BINARY_FORMATS
 0x87FF

	)

1847 
	#GL_VERTEX_SHADER_BIT
 0x00000001

	)

1848 
	#GL_FRAGMENT_SHADER_BIT
 0x00000002

	)

1849 
	#GL_GEOMETRY_SHADER_BIT
 0x00000004

	)

1850 
	#GL_TESS_CONTROL_SHADER_BIT
 0x00000008

	)

1851 
	#GL_TESS_EVALUATION_SHADER_BIT
 0x00000010

	)

1852 
	#GL_ALL_SHADER_BITS
 0xFFFFFFFF

	)

1853 
	#GL_PROGRAM_SEPARABLE
 0x8258

	)

1854 
	#GL_ACTIVE_PROGRAM
 0x8259

	)

1855 
	#GL_PROGRAM_PIPELINE_BINDING
 0x825A

	)

1856 
	#GL_MAX_VIEWPORTS
 0x825B

	)

1857 
	#GL_VIEWPORT_SUBPIXEL_BITS
 0x825C

	)

1858 
	#GL_VIEWPORT_BOUNDS_RANGE
 0x825D

	)

1859 
	#GL_LAYER_PROVOKING_VERTEX
 0x825E

	)

1860 
	#GL_VIEWPORT_INDEX_PROVOKING_VERTEX
 0x825F

	)

1861 
	#GL_UNDEFINED_VERTEX
 0x8260

	)

1862 (
APIENTRYP
 
	tPFNGLRELEASESHADERCOMPILERPROC
) ();

1863 (
APIENTRYP
 
	tPFNGLSHADERBINARYPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tshadîs
, 
	tGLíum
 
	tbö¨yf‹m©
, c⁄° *
	tbö¨y
, GLsizeò
	tÀngth
);

1864 (
APIENTRYP
 
	tPFNGLGETSHADERPRECISIONFORMATPROC
Ë(
	tGLíum
 
	tshadîty≥
, GLíum 
	t¥ecisi⁄ty≥
, 
	tGLöt
 *
	tønge
, GLöà*
	t¥ecisi⁄
);

1865 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFPROC
Ë(
	tGLÊﬂt
 
	tn
, GLÊﬂà
	tf
);

1866 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFPROC
Ë(
	tGLÊﬂt
 
	td
);

1867 (
APIENTRYP
 
	tPFNGLGETPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLíum
 *
	tbö¨yF‹m©
, *
	tbö¨y
);

1868 (
APIENTRYP
 
	tPFNGLPROGRAMBINARYPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tbö¨yF‹m©
, c⁄° *
	tbö¨y
, 
	tGLsizei
 
	tÀngth
);

1869 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

1870 (
APIENTRYP
 
	tPFNGLUSEPROGRAMSTAGESPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLbôfõld
 
	t°ages
, GLuöà
	t¥ogøm
);

1871 (
APIENTRYP
 
	tPFNGLACTIVESHADERPROGRAMPROC
Ë(
	tGLuöt
 
	tpùñöe
, GLuöà
	t¥ogøm
);

1872 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t°rögs
);

1873 (
APIENTRYP
 
	tPFNGLBINDPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1874 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tpùñöes
);

1875 (
APIENTRYP
 
	tPFNGLGENPROGRAMPIPELINESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tpùñöes
);

1876 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1877 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEIVPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

1878 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

1879 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1880 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

1881 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1882 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
);

1883 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1884 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

1885 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1886 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

1887 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1888 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

1889 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1890 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
);

1891 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1892 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

1893 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1894 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

1895 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1896 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

1897 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1898 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
);

1899 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1900 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

1901 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1902 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

1903 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

1904 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

1905 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1906 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tv0
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLdoubÀ 
	tv3
);

1907 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1908 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

1909 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

1910 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1911 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1912 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1913 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1914 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1915 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1916 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1917 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1918 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1919 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1920 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1921 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

1922 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1923 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1924 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1925 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1926 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1927 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

1928 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMPIPELINEPROC
Ë(
	tGLuöt
 
	tpùñöe
);

1929 (
APIENTRYP
 
	tPFNGLGETPROGRAMPIPELINEINFOLOGPROC
Ë(
	tGLuöt
 
	tpùñöe
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	töfoLog
);

1930 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

1931 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

1932 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

1933 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

1934 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1935 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1936 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1937 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1938 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTERPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

1939 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

1940 (
APIENTRYP
 
	tPFNGLVIEWPORTARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1941 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tw
, GLÊﬂà
	th
);

1942 (
APIENTRYP
 
	tPFNGLVIEWPORTINDEXEDFVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

1943 (
APIENTRYP
 
	tPFNGLSCISSORARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tv
);

1944 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tÀ·
, GLöà
	tbŸtom
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

1945 (
APIENTRYP
 
	tPFNGLSCISSORINDEXEDVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

1946 (
APIENTRYP
 
	tPFNGLDEPTHRANGEARRAYVPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

1947 (
APIENTRYP
 
	tPFNGLDEPTHRANGEINDEXEDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tn
, GLdoubÀ 
	tf
);

1948 (
APIENTRYP
 
	tPFNGLGETFLOATI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

1949 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

1950 #ifde‡
GL_GLEXT_PROTOTYPES


1951 
GLAPI
 
APIENTRY
 
glRñó£ShadîCompûî
 ();

1952 
GLAPI
 
APIENTRY
 
glShadîBö¨y
 (
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
shadîs
, 
GLíum
 
bö¨yf‹m©
, c⁄° *
bö¨y
, GLsizeò
Àngth
);

1953 
GLAPI
 
APIENTRY
 
glGëShadîPªcisi⁄F‹m©
 (
GLíum
 
shadîty≥
, GLíum 
¥ecisi⁄ty≥
, 
GLöt
 *
ønge
, GLöà*
¥ecisi⁄
);

1954 
GLAPI
 
APIENTRY
 
glDïthR™gef
 (
GLÊﬂt
 
n
, GLÊﬂà
f
);

1955 
GLAPI
 
APIENTRY
 
glCÀ¨Dïthf
 (
GLÊﬂt
 
d
);

1956 
GLAPI
 
APIENTRY
 
glGëProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLíum
 *
bö¨yF‹m©
, *
bö¨y
);

1957 
GLAPI
 
APIENTRY
 
glProgømBö¨y
 (
GLuöt
 
¥ogøm
, 
GLíum
 
bö¨yF‹m©
, c⁄° *
bö¨y
, 
GLsizei
 
Àngth
);

1958 
GLAPI
 
APIENTRY
 
glProgømP¨amëîi
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

1959 
GLAPI
 
APIENTRY
 
glU£ProgømSèges
 (
GLuöt
 
pùñöe
, 
GLbôfõld
 
°ages
, GLuöà
¥ogøm
);

1960 
GLAPI
 
APIENTRY
 
glA˘iveShadîProgøm
 (
GLuöt
 
pùñöe
, GLuöà
¥ogøm
);

1961 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømv
 (
GLíum
 
ty≥
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
°rögs
);

1962 
GLAPI
 
APIENTRY
 
glBödProgømPùñöe
 (
GLuöt
 
pùñöe
);

1963 
GLAPI
 
APIENTRY
 
glDñëeProgømPùñöes
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
pùñöes
);

1964 
GLAPI
 
APIENTRY
 
glGíProgømPùñöes
 (
GLsizei
 
n
, 
GLuöt
 *
pùñöes
);

1965 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømPùñöe
 (
GLuöt
 
pùñöe
);

1966 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeiv
 (
GLuöt
 
pùñöe
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

1967 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

1968 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1969 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

1970 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1971 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
);

1972 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1973 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

1974 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

1975 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

1976 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1977 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

1978 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1979 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
);

1980 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1981 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

1982 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

1983 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

1984 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1985 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

1986 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1987 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
);

1988 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1989 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

1990 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

1991 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

1992 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

1993 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4f
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

1994 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

1995 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4d
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
v0
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLdoubÀ 
v3
);

1996 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

1997 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

1998 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

1999 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2000 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2001 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2002 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2003 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2004 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2005 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2006 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2007 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2008 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2009 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2010 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

2011 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2012 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2013 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2014 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2015 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2016 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dv
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

2017 
GLAPI
 
APIENTRY
 
glVÆid©eProgømPùñöe
 (
GLuöt
 
pùñöe
);

2018 
GLAPI
 
APIENTRY
 
glGëProgømPùñöeInfoLog
 (
GLuöt
 
pùñöe
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
öfoLog
);

2019 
GLAPI
 
APIENTRY
 
glVîãxAâribL1d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

2020 
GLAPI
 
APIENTRY
 
glVîãxAâribL2d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

2021 
GLAPI
 
APIENTRY
 
glVîãxAâribL3d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

2022 
GLAPI
 
APIENTRY
 
glVîãxAâribL4d
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

2023 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2024 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2025 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2026 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dv
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

2027 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãr
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

2028 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdv
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

2029 
GLAPI
 
APIENTRY
 
glVõwp‹tAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

2030 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedf
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
w
, GLÊﬂà
h
);

2031 
GLAPI
 
APIENTRY
 
glVõwp‹tIndexedfv
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

2032 
GLAPI
 
APIENTRY
 
glSciss‹Aºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
v
);

2033 
GLAPI
 
APIENTRY
 
glSciss‹Indexed
 (
GLuöt
 
ödex
, 
GLöt
 
À·
, GLöà
bŸtom
, 
GLsizei
 
width
, GLsizeò
height
);

2034 
GLAPI
 
APIENTRY
 
glSciss‹Indexedv
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

2035 
GLAPI
 
APIENTRY
 
glDïthR™geAºayv
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

2036 
GLAPI
 
APIENTRY
 
glDïthR™geIndexed
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
n
, GLdoubÀ 
f
);

2037 
GLAPI
 
APIENTRY
 
glGëFlﬂti_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

2038 
GLAPI
 
APIENTRY
 
glGëDoubÀi_v
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

2042 #i‚de‡
GL_VERSION_4_2


2043 
	#GL_VERSION_4_2
 1

	)

2044 
	#GL_UNPACK_COMPRESSED_BLOCK_WIDTH
 0x9127

	)

2045 
	#GL_UNPACK_COMPRESSED_BLOCK_HEIGHT
 0x9128

	)

2046 
	#GL_UNPACK_COMPRESSED_BLOCK_DEPTH
 0x9129

	)

2047 
	#GL_UNPACK_COMPRESSED_BLOCK_SIZE
 0x912A

	)

2048 
	#GL_PACK_COMPRESSED_BLOCK_WIDTH
 0x912B

	)

2049 
	#GL_PACK_COMPRESSED_BLOCK_HEIGHT
 0x912C

	)

2050 
	#GL_PACK_COMPRESSED_BLOCK_DEPTH
 0x912D

	)

2051 
	#GL_PACK_COMPRESSED_BLOCK_SIZE
 0x912E

	)

2052 
	#GL_NUM_SAMPLE_COUNTS
 0x9380

	)

2053 
	#GL_MIN_MAP_BUFFER_ALIGNMENT
 0x90BC

	)

2054 
	#GL_ATOMIC_COUNTER_BUFFER
 0x92C0

	)

2055 
	#GL_ATOMIC_COUNTER_BUFFER_BINDING
 0x92C1

	)

2056 
	#GL_ATOMIC_COUNTER_BUFFER_START
 0x92C2

	)

2057 
	#GL_ATOMIC_COUNTER_BUFFER_SIZE
 0x92C3

	)

2058 
	#GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE
 0x92C4

	)

2059 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS
 0x92C5

	)

2060 
	#GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES
 0x92C6

	)

2061 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER
 0x92C7

	)

2062 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER
 0x92C8

	)

2063 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x92C9

	)

2064 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER
 0x92CA

	)

2065 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER
 0x92CB

	)

2066 
	#GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS
 0x92CC

	)

2067 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS
 0x92CD

	)

2068 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS
 0x92CE

	)

2069 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS
 0x92CF

	)

2070 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS
 0x92D0

	)

2071 
	#GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS
 0x92D1

	)

2072 
	#GL_MAX_VERTEX_ATOMIC_COUNTERS
 0x92D2

	)

2073 
	#GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS
 0x92D3

	)

2074 
	#GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS
 0x92D4

	)

2075 
	#GL_MAX_GEOMETRY_ATOMIC_COUNTERS
 0x92D5

	)

2076 
	#GL_MAX_FRAGMENT_ATOMIC_COUNTERS
 0x92D6

	)

2077 
	#GL_MAX_COMBINED_ATOMIC_COUNTERS
 0x92D7

	)

2078 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE
 0x92D8

	)

2079 
	#GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS
 0x92DC

	)

2080 
	#GL_ACTIVE_ATOMIC_COUNTER_BUFFERS
 0x92D9

	)

2081 
	#GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX
 0x92DA

	)

2082 
	#GL_UNSIGNED_INT_ATOMIC_COUNTER
 0x92DB

	)

2083 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT
 0x00000001

	)

2084 
	#GL_ELEMENT_ARRAY_BARRIER_BIT
 0x00000002

	)

2085 
	#GL_UNIFORM_BARRIER_BIT
 0x00000004

	)

2086 
	#GL_TEXTURE_FETCH_BARRIER_BIT
 0x00000008

	)

2087 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT
 0x00000020

	)

2088 
	#GL_COMMAND_BARRIER_BIT
 0x00000040

	)

2089 
	#GL_PIXEL_BUFFER_BARRIER_BIT
 0x00000080

	)

2090 
	#GL_TEXTURE_UPDATE_BARRIER_BIT
 0x00000100

	)

2091 
	#GL_BUFFER_UPDATE_BARRIER_BIT
 0x00000200

	)

2092 
	#GL_FRAMEBUFFER_BARRIER_BIT
 0x00000400

	)

2093 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT
 0x00000800

	)

2094 
	#GL_ATOMIC_COUNTER_BARRIER_BIT
 0x00001000

	)

2095 
	#GL_ALL_BARRIER_BITS
 0xFFFFFFFF

	)

2096 
	#GL_MAX_IMAGE_UNITS
 0x8F38

	)

2097 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS
 0x8F39

	)

2098 
	#GL_IMAGE_BINDING_NAME
 0x8F3A

	)

2099 
	#GL_IMAGE_BINDING_LEVEL
 0x8F3B

	)

2100 
	#GL_IMAGE_BINDING_LAYERED
 0x8F3C

	)

2101 
	#GL_IMAGE_BINDING_LAYER
 0x8F3D

	)

2102 
	#GL_IMAGE_BINDING_ACCESS
 0x8F3E

	)

2103 
	#GL_IMAGE_1D
 0x904C

	)

2104 
	#GL_IMAGE_2D
 0x904D

	)

2105 
	#GL_IMAGE_3D
 0x904E

	)

2106 
	#GL_IMAGE_2D_RECT
 0x904F

	)

2107 
	#GL_IMAGE_CUBE
 0x9050

	)

2108 
	#GL_IMAGE_BUFFER
 0x9051

	)

2109 
	#GL_IMAGE_1D_ARRAY
 0x9052

	)

2110 
	#GL_IMAGE_2D_ARRAY
 0x9053

	)

2111 
	#GL_IMAGE_CUBE_MAP_ARRAY
 0x9054

	)

2112 
	#GL_IMAGE_2D_MULTISAMPLE
 0x9055

	)

2113 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9056

	)

2114 
	#GL_INT_IMAGE_1D
 0x9057

	)

2115 
	#GL_INT_IMAGE_2D
 0x9058

	)

2116 
	#GL_INT_IMAGE_3D
 0x9059

	)

2117 
	#GL_INT_IMAGE_2D_RECT
 0x905A

	)

2118 
	#GL_INT_IMAGE_CUBE
 0x905B

	)

2119 
	#GL_INT_IMAGE_BUFFER
 0x905C

	)

2120 
	#GL_INT_IMAGE_1D_ARRAY
 0x905D

	)

2121 
	#GL_INT_IMAGE_2D_ARRAY
 0x905E

	)

2122 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY
 0x905F

	)

2123 
	#GL_INT_IMAGE_2D_MULTISAMPLE
 0x9060

	)

2124 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x9061

	)

2125 
	#GL_UNSIGNED_INT_IMAGE_1D
 0x9062

	)

2126 
	#GL_UNSIGNED_INT_IMAGE_2D
 0x9063

	)

2127 
	#GL_UNSIGNED_INT_IMAGE_3D
 0x9064

	)

2128 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT
 0x9065

	)

2129 
	#GL_UNSIGNED_INT_IMAGE_CUBE
 0x9066

	)

2130 
	#GL_UNSIGNED_INT_IMAGE_BUFFER
 0x9067

	)

2131 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY
 0x9068

	)

2132 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY
 0x9069

	)

2133 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY
 0x906A

	)

2134 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE
 0x906B

	)

2135 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY
 0x906C

	)

2136 
	#GL_MAX_IMAGE_SAMPLES
 0x906D

	)

2137 
	#GL_IMAGE_BINDING_FORMAT
 0x906E

	)

2138 
	#GL_IMAGE_FORMAT_COMPATIBILITY_TYPE
 0x90C7

	)

2139 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE
 0x90C8

	)

2140 
	#GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS
 0x90C9

	)

2141 
	#GL_MAX_VERTEX_IMAGE_UNIFORMS
 0x90CA

	)

2142 
	#GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS
 0x90CB

	)

2143 
	#GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS
 0x90CC

	)

2144 
	#GL_MAX_GEOMETRY_IMAGE_UNIFORMS
 0x90CD

	)

2145 
	#GL_MAX_FRAGMENT_IMAGE_UNIFORMS
 0x90CE

	)

2146 
	#GL_MAX_COMBINED_IMAGE_UNIFORMS
 0x90CF

	)

2147 
	#GL_COMPRESSED_RGBA_BPTC_UNORM
 0x8E8C

	)

2148 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM
 0x8E8D

	)

2149 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT
 0x8E8E

	)

2150 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT
 0x8E8F

	)

2151 
	#GL_TEXTURE_IMMUTABLE_FORMAT
 0x912F

	)

2152 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2153 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLuöt
 
	tba£ö°™˚
);

2154 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	tö°™˚cou¡
, 
	tGLöt
 
	tba£vîãx
, 
	tGLuöt
 
	tba£ö°™˚
);

2155 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	t∑øms
);

2156 (
APIENTRYP
 
	tPFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tbuf„rIndex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2157 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREPROC
Ë(
	tGLuöt
 
	tunô
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLíum 
	tf‹m©
);

2158 (
APIENTRYP
 
	tPFNGLMEMORYBARRIERPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

2159 (
APIENTRYP
 
	tPFNGLTEXSTORAGE1DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

2160 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

2161 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2162 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tö°™˚cou¡
);

2163 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
, GLuöà
	t°ªam
, 
	tGLsizei
 
	tö°™˚cou¡
);

2164 #ifde‡
GL_GLEXT_PROTOTYPES


2165 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2166 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLuöt
 
ba£ö°™˚
);

2167 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dBa£VîãxBa£In°™˚
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
ö°™˚cou¡
, 
GLöt
 
ba£vîãx
, 
GLuöt
 
ba£ö°™˚
);

2168 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©iv
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt
 *
∑øms
);

2169 
GLAPI
 
APIENTRY
 
glGëA˘iveAtomicCou¡îBuf„riv
 (
GLuöt
 
¥ogøm
, GLuöà
buf„rIndex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

2170 
GLAPI
 
APIENTRY
 
glBödImageTextuª
 (
GLuöt
 
unô
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLíum 
f‹m©
);

2171 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõr
 (
GLbôfõld
 
b¨rõrs
);

2172 
GLAPI
 
APIENTRY
 
glTexSt‹age1D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

2173 
GLAPI
 
APIENTRY
 
glTexSt‹age2D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

2174 
GLAPI
 
APIENTRY
 
glTexSt‹age3D
 (
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

2175 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, 
GLsizei
 
ö°™˚cou¡
);

2176 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackSåómIn°™˚d
 (
GLíum
 
mode
, 
GLuöt
 
id
, GLuöà
°ªam
, 
GLsizei
 
ö°™˚cou¡
);

2180 #i‚de‡
GL_VERSION_4_3


2181 
	#GL_VERSION_4_3
 1

	)

2182 (
APIENTRY
 *
	tGLDEBUGPROC
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

2183 
	#GL_NUM_SHADING_LANGUAGE_VERSIONS
 0x82E9

	)

2184 
	#GL_VERTEX_ATTRIB_ARRAY_LONG
 0x874E

	)

2185 
	#GL_COMPRESSED_RGB8_ETC2
 0x9274

	)

2186 
	#GL_COMPRESSED_SRGB8_ETC2
 0x9275

	)

2187 
	#GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9276

	)

2188 
	#GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2
 0x9277

	)

2189 
	#GL_COMPRESSED_RGBA8_ETC2_EAC
 0x9278

	)

2190 
	#GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC
 0x9279

	)

2191 
	#GL_COMPRESSED_R11_EAC
 0x9270

	)

2192 
	#GL_COMPRESSED_SIGNED_R11_EAC
 0x9271

	)

2193 
	#GL_COMPRESSED_RG11_EAC
 0x9272

	)

2194 
	#GL_COMPRESSED_SIGNED_RG11_EAC
 0x9273

	)

2195 
	#GL_PRIMITIVE_RESTART_FIXED_INDEX
 0x8D69

	)

2196 
	#GL_ANY_SAMPLES_PASSED_CONSERVATIVE
 0x8D6A

	)

2197 
	#GL_MAX_ELEMENT_INDEX
 0x8D6B

	)

2198 
	#GL_COMPUTE_SHADER
 0x91B9

	)

2199 
	#GL_MAX_COMPUTE_UNIFORM_BLOCKS
 0x91BB

	)

2200 
	#GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS
 0x91BC

	)

2201 
	#GL_MAX_COMPUTE_IMAGE_UNIFORMS
 0x91BD

	)

2202 
	#GL_MAX_COMPUTE_SHARED_MEMORY_SIZE
 0x8262

	)

2203 
	#GL_MAX_COMPUTE_UNIFORM_COMPONENTS
 0x8263

	)

2204 
	#GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS
 0x8264

	)

2205 
	#GL_MAX_COMPUTE_ATOMIC_COUNTERS
 0x8265

	)

2206 
	#GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS
 0x8266

	)

2207 
	#GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS
 0x90EB

	)

2208 
	#GL_MAX_COMPUTE_WORK_GROUP_COUNT
 0x91BE

	)

2209 
	#GL_MAX_COMPUTE_WORK_GROUP_SIZE
 0x91BF

	)

2210 
	#GL_COMPUTE_WORK_GROUP_SIZE
 0x8267

	)

2211 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER
 0x90EC

	)

2212 
	#GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER
 0x90ED

	)

2213 
	#GL_DISPATCH_INDIRECT_BUFFER
 0x90EE

	)

2214 
	#GL_DISPATCH_INDIRECT_BUFFER_BINDING
 0x90EF

	)

2215 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS
 0x8242

	)

2216 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH
 0x8243

	)

2217 
	#GL_DEBUG_CALLBACK_FUNCTION
 0x8244

	)

2218 
	#GL_DEBUG_CALLBACK_USER_PARAM
 0x8245

	)

2219 
	#GL_DEBUG_SOURCE_API
 0x8246

	)

2220 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM
 0x8247

	)

2221 
	#GL_DEBUG_SOURCE_SHADER_COMPILER
 0x8248

	)

2222 
	#GL_DEBUG_SOURCE_THIRD_PARTY
 0x8249

	)

2223 
	#GL_DEBUG_SOURCE_APPLICATION
 0x824A

	)

2224 
	#GL_DEBUG_SOURCE_OTHER
 0x824B

	)

2225 
	#GL_DEBUG_TYPE_ERROR
 0x824C

	)

2226 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR
 0x824D

	)

2227 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR
 0x824E

	)

2228 
	#GL_DEBUG_TYPE_PORTABILITY
 0x824F

	)

2229 
	#GL_DEBUG_TYPE_PERFORMANCE
 0x8250

	)

2230 
	#GL_DEBUG_TYPE_OTHER
 0x8251

	)

2231 
	#GL_MAX_DEBUG_MESSAGE_LENGTH
 0x9143

	)

2232 
	#GL_MAX_DEBUG_LOGGED_MESSAGES
 0x9144

	)

2233 
	#GL_DEBUG_LOGGED_MESSAGES
 0x9145

	)

2234 
	#GL_DEBUG_SEVERITY_HIGH
 0x9146

	)

2235 
	#GL_DEBUG_SEVERITY_MEDIUM
 0x9147

	)

2236 
	#GL_DEBUG_SEVERITY_LOW
 0x9148

	)

2237 
	#GL_DEBUG_TYPE_MARKER
 0x8268

	)

2238 
	#GL_DEBUG_TYPE_PUSH_GROUP
 0x8269

	)

2239 
	#GL_DEBUG_TYPE_POP_GROUP
 0x826A

	)

2240 
	#GL_DEBUG_SEVERITY_NOTIFICATION
 0x826B

	)

2241 
	#GL_MAX_DEBUG_GROUP_STACK_DEPTH
 0x826C

	)

2242 
	#GL_DEBUG_GROUP_STACK_DEPTH
 0x826D

	)

2243 
	#GL_BUFFER
 0x82E0

	)

2244 
	#GL_SHADER
 0x82E1

	)

2245 
	#GL_PROGRAM
 0x82E2

	)

2246 
	#GL_QUERY
 0x82E3

	)

2247 
	#GL_PROGRAM_PIPELINE
 0x82E4

	)

2248 
	#GL_SAMPLER
 0x82E6

	)

2249 
	#GL_MAX_LABEL_LENGTH
 0x82E8

	)

2250 
	#GL_DEBUG_OUTPUT
 0x92E0

	)

2251 
	#GL_CONTEXT_FLAG_DEBUG_BIT
 0x00000002

	)

2252 
	#GL_MAX_UNIFORM_LOCATIONS
 0x826E

	)

2253 
	#GL_FRAMEBUFFER_DEFAULT_WIDTH
 0x9310

	)

2254 
	#GL_FRAMEBUFFER_DEFAULT_HEIGHT
 0x9311

	)

2255 
	#GL_FRAMEBUFFER_DEFAULT_LAYERS
 0x9312

	)

2256 
	#GL_FRAMEBUFFER_DEFAULT_SAMPLES
 0x9313

	)

2257 
	#GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS
 0x9314

	)

2258 
	#GL_MAX_FRAMEBUFFER_WIDTH
 0x9315

	)

2259 
	#GL_MAX_FRAMEBUFFER_HEIGHT
 0x9316

	)

2260 
	#GL_MAX_FRAMEBUFFER_LAYERS
 0x9317

	)

2261 
	#GL_MAX_FRAMEBUFFER_SAMPLES
 0x9318

	)

2262 
	#GL_INTERNALFORMAT_SUPPORTED
 0x826F

	)

2263 
	#GL_INTERNALFORMAT_PREFERRED
 0x8270

	)

2264 
	#GL_INTERNALFORMAT_RED_SIZE
 0x8271

	)

2265 
	#GL_INTERNALFORMAT_GREEN_SIZE
 0x8272

	)

2266 
	#GL_INTERNALFORMAT_BLUE_SIZE
 0x8273

	)

2267 
	#GL_INTERNALFORMAT_ALPHA_SIZE
 0x8274

	)

2268 
	#GL_INTERNALFORMAT_DEPTH_SIZE
 0x8275

	)

2269 
	#GL_INTERNALFORMAT_STENCIL_SIZE
 0x8276

	)

2270 
	#GL_INTERNALFORMAT_SHARED_SIZE
 0x8277

	)

2271 
	#GL_INTERNALFORMAT_RED_TYPE
 0x8278

	)

2272 
	#GL_INTERNALFORMAT_GREEN_TYPE
 0x8279

	)

2273 
	#GL_INTERNALFORMAT_BLUE_TYPE
 0x827A

	)

2274 
	#GL_INTERNALFORMAT_ALPHA_TYPE
 0x827B

	)

2275 
	#GL_INTERNALFORMAT_DEPTH_TYPE
 0x827C

	)

2276 
	#GL_INTERNALFORMAT_STENCIL_TYPE
 0x827D

	)

2277 
	#GL_MAX_WIDTH
 0x827E

	)

2278 
	#GL_MAX_HEIGHT
 0x827F

	)

2279 
	#GL_MAX_DEPTH
 0x8280

	)

2280 
	#GL_MAX_LAYERS
 0x8281

	)

2281 
	#GL_MAX_COMBINED_DIMENSIONS
 0x8282

	)

2282 
	#GL_COLOR_COMPONENTS
 0x8283

	)

2283 
	#GL_DEPTH_COMPONENTS
 0x8284

	)

2284 
	#GL_STENCIL_COMPONENTS
 0x8285

	)

2285 
	#GL_COLOR_RENDERABLE
 0x8286

	)

2286 
	#GL_DEPTH_RENDERABLE
 0x8287

	)

2287 
	#GL_STENCIL_RENDERABLE
 0x8288

	)

2288 
	#GL_FRAMEBUFFER_RENDERABLE
 0x8289

	)

2289 
	#GL_FRAMEBUFFER_RENDERABLE_LAYERED
 0x828A

	)

2290 
	#GL_FRAMEBUFFER_BLEND
 0x828B

	)

2291 
	#GL_READ_PIXELS
 0x828C

	)

2292 
	#GL_READ_PIXELS_FORMAT
 0x828D

	)

2293 
	#GL_READ_PIXELS_TYPE
 0x828E

	)

2294 
	#GL_TEXTURE_IMAGE_FORMAT
 0x828F

	)

2295 
	#GL_TEXTURE_IMAGE_TYPE
 0x8290

	)

2296 
	#GL_GET_TEXTURE_IMAGE_FORMAT
 0x8291

	)

2297 
	#GL_GET_TEXTURE_IMAGE_TYPE
 0x8292

	)

2298 
	#GL_MIPMAP
 0x8293

	)

2299 
	#GL_MANUAL_GENERATE_MIPMAP
 0x8294

	)

2300 
	#GL_AUTO_GENERATE_MIPMAP
 0x8295

	)

2301 
	#GL_COLOR_ENCODING
 0x8296

	)

2302 
	#GL_SRGB_READ
 0x8297

	)

2303 
	#GL_SRGB_WRITE
 0x8298

	)

2304 
	#GL_FILTER
 0x829A

	)

2305 
	#GL_VERTEX_TEXTURE
 0x829B

	)

2306 
	#GL_TESS_CONTROL_TEXTURE
 0x829C

	)

2307 
	#GL_TESS_EVALUATION_TEXTURE
 0x829D

	)

2308 
	#GL_GEOMETRY_TEXTURE
 0x829E

	)

2309 
	#GL_FRAGMENT_TEXTURE
 0x829F

	)

2310 
	#GL_COMPUTE_TEXTURE
 0x82A0

	)

2311 
	#GL_TEXTURE_SHADOW
 0x82A1

	)

2312 
	#GL_TEXTURE_GATHER
 0x82A2

	)

2313 
	#GL_TEXTURE_GATHER_SHADOW
 0x82A3

	)

2314 
	#GL_SHADER_IMAGE_LOAD
 0x82A4

	)

2315 
	#GL_SHADER_IMAGE_STORE
 0x82A5

	)

2316 
	#GL_SHADER_IMAGE_ATOMIC
 0x82A6

	)

2317 
	#GL_IMAGE_TEXEL_SIZE
 0x82A7

	)

2318 
	#GL_IMAGE_COMPATIBILITY_CLASS
 0x82A8

	)

2319 
	#GL_IMAGE_PIXEL_FORMAT
 0x82A9

	)

2320 
	#GL_IMAGE_PIXEL_TYPE
 0x82AA

	)

2321 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST
 0x82AC

	)

2322 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST
 0x82AD

	)

2323 
	#GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE
 0x82AE

	)

2324 
	#GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE
 0x82AF

	)

2325 
	#GL_TEXTURE_COMPRESSED_BLOCK_WIDTH
 0x82B1

	)

2326 
	#GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT
 0x82B2

	)

2327 
	#GL_TEXTURE_COMPRESSED_BLOCK_SIZE
 0x82B3

	)

2328 
	#GL_CLEAR_BUFFER
 0x82B4

	)

2329 
	#GL_TEXTURE_VIEW
 0x82B5

	)

2330 
	#GL_VIEW_COMPATIBILITY_CLASS
 0x82B6

	)

2331 
	#GL_FULL_SUPPORT
 0x82B7

	)

2332 
	#GL_CAVEAT_SUPPORT
 0x82B8

	)

2333 
	#GL_IMAGE_CLASS_4_X_32
 0x82B9

	)

2334 
	#GL_IMAGE_CLASS_2_X_32
 0x82BA

	)

2335 
	#GL_IMAGE_CLASS_1_X_32
 0x82BB

	)

2336 
	#GL_IMAGE_CLASS_4_X_16
 0x82BC

	)

2337 
	#GL_IMAGE_CLASS_2_X_16
 0x82BD

	)

2338 
	#GL_IMAGE_CLASS_1_X_16
 0x82BE

	)

2339 
	#GL_IMAGE_CLASS_4_X_8
 0x82BF

	)

2340 
	#GL_IMAGE_CLASS_2_X_8
 0x82C0

	)

2341 
	#GL_IMAGE_CLASS_1_X_8
 0x82C1

	)

2342 
	#GL_IMAGE_CLASS_11_11_10
 0x82C2

	)

2343 
	#GL_IMAGE_CLASS_10_10_10_2
 0x82C3

	)

2344 
	#GL_VIEW_CLASS_128_BITS
 0x82C4

	)

2345 
	#GL_VIEW_CLASS_96_BITS
 0x82C5

	)

2346 
	#GL_VIEW_CLASS_64_BITS
 0x82C6

	)

2347 
	#GL_VIEW_CLASS_48_BITS
 0x82C7

	)

2348 
	#GL_VIEW_CLASS_32_BITS
 0x82C8

	)

2349 
	#GL_VIEW_CLASS_24_BITS
 0x82C9

	)

2350 
	#GL_VIEW_CLASS_16_BITS
 0x82CA

	)

2351 
	#GL_VIEW_CLASS_8_BITS
 0x82CB

	)

2352 
	#GL_VIEW_CLASS_S3TC_DXT1_RGB
 0x82CC

	)

2353 
	#GL_VIEW_CLASS_S3TC_DXT1_RGBA
 0x82CD

	)

2354 
	#GL_VIEW_CLASS_S3TC_DXT3_RGBA
 0x82CE

	)

2355 
	#GL_VIEW_CLASS_S3TC_DXT5_RGBA
 0x82CF

	)

2356 
	#GL_VIEW_CLASS_RGTC1_RED
 0x82D0

	)

2357 
	#GL_VIEW_CLASS_RGTC2_RG
 0x82D1

	)

2358 
	#GL_VIEW_CLASS_BPTC_UNORM
 0x82D2

	)

2359 
	#GL_VIEW_CLASS_BPTC_FLOAT
 0x82D3

	)

2360 
	#GL_UNIFORM
 0x92E1

	)

2361 
	#GL_UNIFORM_BLOCK
 0x92E2

	)

2362 
	#GL_PROGRAM_INPUT
 0x92E3

	)

2363 
	#GL_PROGRAM_OUTPUT
 0x92E4

	)

2364 
	#GL_BUFFER_VARIABLE
 0x92E5

	)

2365 
	#GL_SHADER_STORAGE_BLOCK
 0x92E6

	)

2366 
	#GL_VERTEX_SUBROUTINE
 0x92E8

	)

2367 
	#GL_TESS_CONTROL_SUBROUTINE
 0x92E9

	)

2368 
	#GL_TESS_EVALUATION_SUBROUTINE
 0x92EA

	)

2369 
	#GL_GEOMETRY_SUBROUTINE
 0x92EB

	)

2370 
	#GL_FRAGMENT_SUBROUTINE
 0x92EC

	)

2371 
	#GL_COMPUTE_SUBROUTINE
 0x92ED

	)

2372 
	#GL_VERTEX_SUBROUTINE_UNIFORM
 0x92EE

	)

2373 
	#GL_TESS_CONTROL_SUBROUTINE_UNIFORM
 0x92EF

	)

2374 
	#GL_TESS_EVALUATION_SUBROUTINE_UNIFORM
 0x92F0

	)

2375 
	#GL_GEOMETRY_SUBROUTINE_UNIFORM
 0x92F1

	)

2376 
	#GL_FRAGMENT_SUBROUTINE_UNIFORM
 0x92F2

	)

2377 
	#GL_COMPUTE_SUBROUTINE_UNIFORM
 0x92F3

	)

2378 
	#GL_TRANSFORM_FEEDBACK_VARYING
 0x92F4

	)

2379 
	#GL_ACTIVE_RESOURCES
 0x92F5

	)

2380 
	#GL_MAX_NAME_LENGTH
 0x92F6

	)

2381 
	#GL_MAX_NUM_ACTIVE_VARIABLES
 0x92F7

	)

2382 
	#GL_MAX_NUM_COMPATIBLE_SUBROUTINES
 0x92F8

	)

2383 
	#GL_NAME_LENGTH
 0x92F9

	)

2384 
	#GL_TYPE
 0x92FA

	)

2385 
	#GL_ARRAY_SIZE
 0x92FB

	)

2386 
	#GL_OFFSET
 0x92FC

	)

2387 
	#GL_BLOCK_INDEX
 0x92FD

	)

2388 
	#GL_ARRAY_STRIDE
 0x92FE

	)

2389 
	#GL_MATRIX_STRIDE
 0x92FF

	)

2390 
	#GL_IS_ROW_MAJOR
 0x9300

	)

2391 
	#GL_ATOMIC_COUNTER_BUFFER_INDEX
 0x9301

	)

2392 
	#GL_BUFFER_BINDING
 0x9302

	)

2393 
	#GL_BUFFER_DATA_SIZE
 0x9303

	)

2394 
	#GL_NUM_ACTIVE_VARIABLES
 0x9304

	)

2395 
	#GL_ACTIVE_VARIABLES
 0x9305

	)

2396 
	#GL_REFERENCED_BY_VERTEX_SHADER
 0x9306

	)

2397 
	#GL_REFERENCED_BY_TESS_CONTROL_SHADER
 0x9307

	)

2398 
	#GL_REFERENCED_BY_TESS_EVALUATION_SHADER
 0x9308

	)

2399 
	#GL_REFERENCED_BY_GEOMETRY_SHADER
 0x9309

	)

2400 
	#GL_REFERENCED_BY_FRAGMENT_SHADER
 0x930A

	)

2401 
	#GL_REFERENCED_BY_COMPUTE_SHADER
 0x930B

	)

2402 
	#GL_TOP_LEVEL_ARRAY_SIZE
 0x930C

	)

2403 
	#GL_TOP_LEVEL_ARRAY_STRIDE
 0x930D

	)

2404 
	#GL_LOCATION
 0x930E

	)

2405 
	#GL_LOCATION_INDEX
 0x930F

	)

2406 
	#GL_IS_PER_PATCH
 0x92E7

	)

2407 
	#GL_SHADER_STORAGE_BUFFER
 0x90D2

	)

2408 
	#GL_SHADER_STORAGE_BUFFER_BINDING
 0x90D3

	)

2409 
	#GL_SHADER_STORAGE_BUFFER_START
 0x90D4

	)

2410 
	#GL_SHADER_STORAGE_BUFFER_SIZE
 0x90D5

	)

2411 
	#GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS
 0x90D6

	)

2412 
	#GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS
 0x90D7

	)

2413 
	#GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS
 0x90D8

	)

2414 
	#GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS
 0x90D9

	)

2415 
	#GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS
 0x90DA

	)

2416 
	#GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS
 0x90DB

	)

2417 
	#GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS
 0x90DC

	)

2418 
	#GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS
 0x90DD

	)

2419 
	#GL_MAX_SHADER_STORAGE_BLOCK_SIZE
 0x90DE

	)

2420 
	#GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT
 0x90DF

	)

2421 
	#GL_SHADER_STORAGE_BARRIER_BIT
 0x00002000

	)

2422 
	#GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES
 0x8F39

	)

2423 
	#GL_DEPTH_STENCIL_TEXTURE_MODE
 0x90EA

	)

2424 
	#GL_TEXTURE_BUFFER_OFFSET
 0x919D

	)

2425 
	#GL_TEXTURE_BUFFER_SIZE
 0x919E

	)

2426 
	#GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT
 0x919F

	)

2427 
	#GL_TEXTURE_VIEW_MIN_LEVEL
 0x82DB

	)

2428 
	#GL_TEXTURE_VIEW_NUM_LEVELS
 0x82DC

	)

2429 
	#GL_TEXTURE_VIEW_MIN_LAYER
 0x82DD

	)

2430 
	#GL_TEXTURE_VIEW_NUM_LAYERS
 0x82DE

	)

2431 
	#GL_TEXTURE_IMMUTABLE_LEVELS
 0x82DF

	)

2432 
	#GL_VERTEX_ATTRIB_BINDING
 0x82D4

	)

2433 
	#GL_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D5

	)

2434 
	#GL_VERTEX_BINDING_DIVISOR
 0x82D6

	)

2435 
	#GL_VERTEX_BINDING_OFFSET
 0x82D7

	)

2436 
	#GL_VERTEX_BINDING_STRIDE
 0x82D8

	)

2437 
	#GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET
 0x82D9

	)

2438 
	#GL_MAX_VERTEX_ATTRIB_BINDINGS
 0x82DA

	)

2439 
	#GL_DISPLAY_LIST
 0x82E7

	)

2440 (
APIENTRYP
 
	tPFNGLCLEARBUFFERDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2441 (
APIENTRYP
 
	tPFNGLCLEARBUFFERSUBDATAPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2442 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
);

2443 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEINDIRECTPROC
Ë(
	tGLöçå
 
	tödúe˘
);

2444 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATAPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	t§cWidth
, GLsizeò
	t§cHeight
, GLsizeò
	t§cDïth
);

2445 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

2446 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2447 (
APIENTRYP
 
	tPFNGLGETINTERNALFORMATI64VPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLíum 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt64
 *
	t∑øms
);

2448 (
APIENTRYP
 
	tPFNGLINVALIDATETEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

2449 (
APIENTRYP
 
	tPFNGLINVALIDATETEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

2450 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERSUBDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

2451 (
APIENTRYP
 
	tPFNGLINVALIDATEBUFFERDATAPROC
Ë(
	tGLuöt
 
	tbuf„r
);

2452 (
APIENTRYP
 
	tPFNGLINVALIDATEFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
);

2453 (
APIENTRYP
 
	tPFNGLINVALIDATESUBFRAMEBUFFERPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumAâachmíts
, c⁄° GLíum *
	t©èchmíts
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
, GLsizeò
	theight
);

2454 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2455 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwcou¡
, GLsizeò
	t°ride
);

2456 (
APIENTRYP
 
	tPFNGLGETPROGRAMINTERFACEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2457 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2458 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCENAMEPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	t«me
);

2459 (
APIENTRYP
 
	tPFNGLGETPROGRAMRESOURCEIVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, GLuöà
	tödex
, 
	tGLsizei
 
	t¥›Cou¡
, c⁄° GLíum *
	t¥›s
, GLsizeò
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	t∑øms
);

2460 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2461 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t¥ogømI¡îÁ˚
, c⁄° 
	tGLch¨
 *
	t«me
);

2462 (
APIENTRYP
 
	tPFNGLSHADERSTORAGEBLOCKBINDINGPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	t°‹ageBlockIndex
, GLuöà
	t°‹ageBlockBödög
);

2463 (
APIENTRYP
 
	tPFNGLTEXBUFFERRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

2464 (
APIENTRYP
 
	tPFNGLTEXSTORAGE2DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2465 (
APIENTRYP
 
	tPFNGLTEXSTORAGE3DMULTISAMPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

2466 (
APIENTRYP
 
	tPFNGLTEXTUREVIEWPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	t‹igãxtuª
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tmöÀvñ
, GLuöà
	tnumÀvñs
, GLuöà
	tmöœyî
, GLuöà
	tnumœyîs
);

2467 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

2468 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

2469 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2470 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATPROC
Ë(
	tGLuöt
 
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

2471 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBBINDINGPROC
Ë(
	tGLuöt
 
	t©åibödex
, GLuöà
	tbödögödex
);

2472 (
APIENTRYP
 
	tPFNGLVERTEXBINDINGDIVISORPROC
Ë(
	tGLuöt
 
	tbödögödex
, GLuöà
	tdivis‹
);

2473 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

2474 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

2475 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKPROC
Ë(
	tGLDEBUGPROC
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

2476 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

2477 (
APIENTRYP
 
	tPFNGLPUSHDEBUGGROUPPROC
Ë(
	tGLíum
 
	tsour˚
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tmesßge
);

2478 (
APIENTRYP
 
	tPFNGLPOPDEBUGGROUPPROC
) ();

2479 (
APIENTRYP
 
	tPFNGLOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2480 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2481 (
APIENTRYP
 
	tPFNGLOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

2482 (
APIENTRYP
 
	tPFNGLGETOBJECTPTRLABELPROC
Ë(c⁄° *
	t±r
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

2483 #ifde‡
GL_GLEXT_PROTOTYPES


2484 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2485 
GLAPI
 
APIENTRY
 
glCÀ¨Buf„rSubD©a
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2486 
GLAPI
 
APIENTRY
 
glDi•©chCompuã
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
);

2487 
GLAPI
 
APIENTRY
 
glDi•©chCompuãIndúe˘
 (
GLöçå
 
ödúe˘
);

2488 
GLAPI
 
APIENTRY
 
glC›yImageSubD©a
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
§cWidth
, GLsizeò
§cHeight
, GLsizeò
§cDïth
);

2489 
GLAPI
 
APIENTRY
 
glFømebuf„rP¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

2490 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2491 
GLAPI
 
APIENTRY
 
glGëI¡î«lf‹m©i64v
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLíum 
≤ame
, 
GLsizei
 
bufSize
, 
GLöt64
 *
∑øms
);

2492 
GLAPI
 
APIENTRY
 
glInvÆid©eTexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

2493 
GLAPI
 
APIENTRY
 
glInvÆid©eTexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

2494 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rSubD©a
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

2495 
GLAPI
 
APIENTRY
 
glInvÆid©eBuf„rD©a
 (
GLuöt
 
buf„r
);

2496 
GLAPI
 
APIENTRY
 
glInvÆid©eFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
);

2497 
GLAPI
 
APIENTRY
 
glInvÆid©eSubFømebuf„r
 (
GLíum
 
èrgë
, 
GLsizei
 
numAâachmíts
, c⁄° GLíum *
©èchmíts
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
, GLsizeò
height
);

2498 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2499 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwcou¡
, GLsizeò
°ride
);

2500 
GLAPI
 
APIENTRY
 
glGëProgømI¡îÁ˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2501 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëProgømResour˚Index
 (GLuöà
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2502 
GLAPI
 
APIENTRY
 
glGëProgømResour˚Name
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
«me
);

2503 
GLAPI
 
APIENTRY
 
glGëProgømResour˚iv
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, GLuöà
ödex
, 
GLsizei
 
¥›Cou¡
, c⁄° GLíum *
¥›s
, GLsizeò
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
∑øms
);

2504 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2505 
GLAPI
 
GLöt
 
APIENTRY
 
glGëProgømResour˚Loˇti⁄Index
 (
GLuöt
 
¥ogøm
, 
GLíum
 
¥ogømI¡îÁ˚
, c⁄° 
GLch¨
 *
«me
);

2506 
GLAPI
 
APIENTRY
 
glShadîSt‹ageBlockBödög
 (
GLuöt
 
¥ogøm
, GLuöà
°‹ageBlockIndex
, GLuöà
°‹ageBlockBödög
);

2507 
GLAPI
 
APIENTRY
 
glTexBuf„rR™ge
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

2508 
GLAPI
 
APIENTRY
 
glTexSt‹age2DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2509 
GLAPI
 
APIENTRY
 
glTexSt‹age3DMu…ißm∂e
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

2510 
GLAPI
 
APIENTRY
 
glTextuªVõw
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
‹igãxtuª
, GLíum 
öã∫Æf‹m©
, GLuöà
möÀvñ
, GLuöà
numÀvñs
, GLuöà
möœyî
, GLuöà
numœyîs
);

2511 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„r
 (
GLuöt
 
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

2512 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

2513 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2514 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©
 (
GLuöt
 
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

2515 
GLAPI
 
APIENTRY
 
glVîãxAâribBödög
 (
GLuöt
 
©åibödex
, GLuöà
bödögödex
);

2516 
GLAPI
 
APIENTRY
 
glVîãxBödögDivis‹
 (
GLuöt
 
bödögödex
, GLuöà
divis‹
);

2517 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁ
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

2518 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£π
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

2519 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlback
 (
GLDEBUGPROC
 
ˇŒback
, c⁄° *
u£rP¨am
);

2520 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLog
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

2521 
GLAPI
 
APIENTRY
 
glPushDebugGroup
 (
GLíum
 
sour˚
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
mesßge
);

2522 
GLAPI
 
APIENTRY
 
glP›DebugGroup
 ();

2523 
GLAPI
 
APIENTRY
 
glObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2524 
GLAPI
 
APIENTRY
 
glGëObje˘Labñ
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2525 
GLAPI
 
APIENTRY
 
glObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

2526 
GLAPI
 
APIENTRY
 
glGëObje˘PåLabñ
 (c⁄° *
±r
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

2530 #i‚de‡
GL_VERSION_4_4


2531 
	#GL_VERSION_4_4
 1

	)

2532 
	#GL_MAX_VERTEX_ATTRIB_STRIDE
 0x82E5

	)

2533 
	#GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED
 0x8221

	)

2534 
	#GL_TEXTURE_BUFFER_BINDING
 0x8C2A

	)

2535 
	#GL_MAP_PERSISTENT_BIT
 0x0040

	)

2536 
	#GL_MAP_COHERENT_BIT
 0x0080

	)

2537 
	#GL_DYNAMIC_STORAGE_BIT
 0x0100

	)

2538 
	#GL_CLIENT_STORAGE_BIT
 0x0200

	)

2539 
	#GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT
 0x00004000

	)

2540 
	#GL_BUFFER_IMMUTABLE_STORAGE
 0x821F

	)

2541 
	#GL_BUFFER_STORAGE_FLAGS
 0x8220

	)

2542 
	#GL_CLEAR_TEXTURE
 0x9365

	)

2543 
	#GL_LOCATION_COMPONENT
 0x934A

	)

2544 
	#GL_TRANSFORM_FEEDBACK_BUFFER_INDEX
 0x934B

	)

2545 
	#GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE
 0x934C

	)

2546 
	#GL_QUERY_BUFFER
 0x9192

	)

2547 
	#GL_QUERY_BUFFER_BARRIER_BIT
 0x00008000

	)

2548 
	#GL_QUERY_BUFFER_BINDING
 0x9193

	)

2549 
	#GL_QUERY_RESULT_NO_WAIT
 0x9194

	)

2550 
	#GL_MIRROR_CLAMP_TO_EDGE
 0x8743

	)

2551 (
APIENTRYP
 
	tPFNGLBUFFERSTORAGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

2552 (
APIENTRYP
 
	tPFNGLCLEARTEXIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2553 (
APIENTRYP
 
	tPFNGLCLEARTEXSUBIMAGEPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

2554 (
APIENTRYP
 
	tPFNGLBINDBUFFERSBASEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
);

2555 (
APIENTRYP
 
	tPFNGLBINDBUFFERSRANGEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° 
	tGLsizeùå
 *
	tsizes
);

2556 (
APIENTRYP
 
	tPFNGLBINDTEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2557 (
APIENTRYP
 
	tPFNGLBINDSAMPLERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tßm∂îs
);

2558 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTURESPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tãxtuªs
);

2559 (
APIENTRYP
 
	tPFNGLBINDVERTEXBUFFERSPROC
Ë(
	tGLuöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tbuf„rs
, c⁄° 
	tGLöçå
 *
	toff£ts
, c⁄° GLsizeò*
	t°rides
);

2560 #ifde‡
GL_GLEXT_PROTOTYPES


2561 
GLAPI
 
APIENTRY
 
glBuf„rSt‹age
 (
GLíum
 
èrgë
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

2562 
GLAPI
 
APIENTRY
 
glCÀ¨TexImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2563 
GLAPI
 
APIENTRY
 
glCÀ¨TexSubImage
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

2564 
GLAPI
 
APIENTRY
 
glBödBuf„rsBa£
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
);

2565 
GLAPI
 
APIENTRY
 
glBödBuf„rsR™ge
 (
GLíum
 
èrgë
, 
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° 
GLsizeùå
 *
sizes
);

2566 
GLAPI
 
APIENTRY
 
glBödTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2567 
GLAPI
 
APIENTRY
 
glBödSam∂îs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ßm∂îs
);

2568 
GLAPI
 
APIENTRY
 
glBödImageTextuªs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
ãxtuªs
);

2569 
GLAPI
 
APIENTRY
 
glBödVîãxBuf„rs
 (
GLuöt
 
fú°
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
buf„rs
, c⁄° 
GLöçå
 *
off£ts
, c⁄° GLsizeò*
°rides
);

2573 #i‚de‡
GL_ARB_ES2_com∑tibûôy


2574 
	#GL_ARB_ES2_com∑tibûôy
 1

	)

2577 #i‚de‡
GL_ARB_ES3_com∑tibûôy


2578 
	#GL_ARB_ES3_com∑tibûôy
 1

	)

2581 #i‚de‡
GL_ARB_¨øys_of_¨øys


2582 
	#GL_ARB_¨øys_of_¨øys
 1

	)

2585 #i‚de‡
GL_ARB_ba£_ö°™˚


2586 
	#GL_ARB_ba£_ö°™˚
 1

	)

2589 #i‚de‡
GL_ARB_bödÀss_ãxtuª


2590 
	#GL_ARB_bödÀss_ãxtuª
 1

	)

2591 
uöt64_t
 
	tGLuöt64EXT
;

2592 
	#GL_UNSIGNED_INT64_ARB
 0x140F

	)

2593 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
);

2594 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

2595 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2596 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2597 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLEARBPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

2598 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

2599 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2600 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2601 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

2602 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

2603 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

2604 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2605 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTARBPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

2606 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64ARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

2607 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

2608 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

2609 #ifde‡
GL_GLEXT_PROTOTYPES


2610 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀARB
 (
GLuöt
 
ãxtuª
);

2611 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀARB
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

2612 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2613 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2614 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀARB
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

2615 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

2616 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítARB
 (
GLuöt64
 
h™dÀ
);

2617 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64ARB
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2618 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

2619 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64ARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

2620 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

2621 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2622 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítARB
 (
GLuöt64
 
h™dÀ
);

2623 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64ARB
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

2624 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vARB
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

2625 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

2629 #i‚de‡
GL_ARB_bÀnd_func_exãnded


2630 
	#GL_ARB_bÀnd_func_exãnded
 1

	)

2633 #i‚de‡
GL_ARB_buf„r_°‹age


2634 
	#GL_ARB_buf„r_°‹age
 1

	)

2637 #i‚de‡
GL_ARB_˛_evít


2638 
	#GL_ARB_˛_evít
 1

	)

2639 
_˛_c⁄ãxt
;

2640 
_˛_evít
;

2641 
	#GL_SYNC_CL_EVENT_ARB
 0x8240

	)

2642 
	#GL_SYNC_CL_EVENT_COMPLETE_ARB
 0x8241

	)

2643 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLCREATESYNCFROMCLEVENTARBPROC
Ë(
	t_˛_c⁄ãxt
 *
	tc⁄ãxt
, 
	t_˛_evít
 *
	tevít
, 
	tGLbôfõld
 
	tÊags
);

2644 #ifde‡
GL_GLEXT_PROTOTYPES


2645 
GLAPI
 
GLsync
 
APIENTRY
 
glCª©eSyncFromCLevítARB
 (
_˛_c⁄ãxt
 *
c⁄ãxt
, 
_˛_evít
 *
evít
, 
GLbôfõld
 
Êags
);

2649 #i‚de‡
GL_ARB_˛ór_buf„r_obje˘


2650 
	#GL_ARB_˛ór_buf„r_obje˘
 1

	)

2653 #i‚de‡
GL_ARB_˛ór_ãxtuª


2654 
	#GL_ARB_˛ór_ãxtuª
 1

	)

2657 #i‚de‡
GL_ARB_cﬁ‹_buf„r_Êﬂt


2658 
	#GL_ARB_cﬁ‹_buf„r_Êﬂt
 1

	)

2659 
	#GL_RGBA_FLOAT_MODE_ARB
 0x8820

	)

2660 
	#GL_CLAMP_VERTEX_COLOR_ARB
 0x891A

	)

2661 
	#GL_CLAMP_FRAGMENT_COLOR_ARB
 0x891B

	)

2662 
	#GL_CLAMP_READ_COLOR_ARB
 0x891C

	)

2663 
	#GL_FIXED_ONLY_ARB
 0x891D

	)

2664 (
APIENTRYP
 
	tPFNGLCLAMPCOLORARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t˛amp
);

2665 #ifde‡
GL_GLEXT_PROTOTYPES


2666 
GLAPI
 
APIENTRY
 
glCœmpCﬁ‹ARB
 (
GLíum
 
èrgë
, GLíum 
˛amp
);

2670 #i‚de‡
GL_ARB_com∑tibûôy


2671 
	#GL_ARB_com∑tibûôy
 1

	)

2674 #i‚de‡
GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age


2675 
	#GL_ARB_com¥es£d_ãxtuª_pixñ_°‹age
 1

	)

2678 #i‚de‡
GL_ARB_compuã_shadî


2679 
	#GL_ARB_compuã_shadî
 1

	)

2680 
	#GL_COMPUTE_SHADER_BIT
 0x00000020

	)

2683 #i‚de‡
GL_ARB_compuã_v¨übÀ_group_size


2684 
	#GL_ARB_compuã_v¨übÀ_group_size
 1

	)

2685 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB
 0x9344

	)

2686 
	#GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB
 0x90EB

	)

2687 
	#GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB
 0x9345

	)

2688 
	#GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB
 0x91BF

	)

2689 (
APIENTRYP
 
	tPFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC
Ë(
	tGLuöt
 
	tnum_groups_x
, GLuöà
	tnum_groups_y
, GLuöà
	tnum_groups_z
, GLuöà
	tgroup_size_x
, GLuöà
	tgroup_size_y
, GLuöà
	tgroup_size_z
);

2690 #ifde‡
GL_GLEXT_PROTOTYPES


2691 
GLAPI
 
APIENTRY
 
glDi•©chCompuãGroupSizeARB
 (
GLuöt
 
num_groups_x
, GLuöà
num_groups_y
, GLuöà
num_groups_z
, GLuöà
group_size_x
, GLuöà
group_size_y
, GLuöà
group_size_z
);

2695 #i‚de‡
GL_ARB_c⁄£rv©ive_dïth


2696 
	#GL_ARB_c⁄£rv©ive_dïth
 1

	)

2699 #i‚de‡
GL_ARB_c›y_buf„r


2700 
	#GL_ARB_c›y_buf„r
 1

	)

2701 
	#GL_COPY_READ_BUFFER_BINDING
 0x8F36

	)

2702 
	#GL_COPY_WRITE_BUFFER_BINDING
 0x8F37

	)

2705 #i‚de‡
GL_ARB_c›y_image


2706 
	#GL_ARB_c›y_image
 1

	)

2709 #i‚de‡
GL_ARB_debug_ouçut


2710 
	#GL_ARB_debug_ouçut
 1

	)

2711 (
APIENTRY
 *
	tGLDEBUGPROCARB
)(
	tGLíum
 
	tsour˚
,GLíum 
	tty≥
,
	tGLuöt
 
	tid
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,c⁄° *
	tu£rP¨am
);

2712 
	#GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB
 0x8242

	)

2713 
	#GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB
 0x8243

	)

2714 
	#GL_DEBUG_CALLBACK_FUNCTION_ARB
 0x8244

	)

2715 
	#GL_DEBUG_CALLBACK_USER_PARAM_ARB
 0x8245

	)

2716 
	#GL_DEBUG_SOURCE_API_ARB
 0x8246

	)

2717 
	#GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB
 0x8247

	)

2718 
	#GL_DEBUG_SOURCE_SHADER_COMPILER_ARB
 0x8248

	)

2719 
	#GL_DEBUG_SOURCE_THIRD_PARTY_ARB
 0x8249

	)

2720 
	#GL_DEBUG_SOURCE_APPLICATION_ARB
 0x824A

	)

2721 
	#GL_DEBUG_SOURCE_OTHER_ARB
 0x824B

	)

2722 
	#GL_DEBUG_TYPE_ERROR_ARB
 0x824C

	)

2723 
	#GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB
 0x824D

	)

2724 
	#GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB
 0x824E

	)

2725 
	#GL_DEBUG_TYPE_PORTABILITY_ARB
 0x824F

	)

2726 
	#GL_DEBUG_TYPE_PERFORMANCE_ARB
 0x8250

	)

2727 
	#GL_DEBUG_TYPE_OTHER_ARB
 0x8251

	)

2728 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_ARB
 0x9143

	)

2729 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_ARB
 0x9144

	)

2730 
	#GL_DEBUG_LOGGED_MESSAGES_ARB
 0x9145

	)

2731 
	#GL_DEBUG_SEVERITY_HIGH_ARB
 0x9146

	)

2732 
	#GL_DEBUG_SEVERITY_MEDIUM_ARB
 0x9147

	)

2733 
	#GL_DEBUG_SEVERITY_LOW_ARB
 0x9148

	)

2734 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECONTROLARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

2735 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTARBPROC
Ë(
	tGLíum
 
	tsour˚
, GLíum 
	tty≥
, 
	tGLuöt
 
	tid
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

2736 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKARBPROC
Ë(
	tGLDEBUGPROCARB
 
	tˇŒback
, c⁄° *
	tu£rP¨am
);

2737 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGARBPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufSize
, 
	tGLíum
 *
	tsour˚s
, GLíum *
	tty≥s
, GLuöà*
	tids
, GLíum *
	t£vîôõs
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßgeLog
);

2738 #ifde‡
GL_GLEXT_PROTOTYPES


2739 
GLAPI
 
APIENTRY
 
glDebugMesßgeC⁄åﬁARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

2740 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πARB
 (
GLíum
 
sour˚
, GLíum 
ty≥
, 
GLuöt
 
id
, GLíum 
£vîôy
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

2741 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackARB
 (
GLDEBUGPROCARB
 
ˇŒback
, c⁄° *
u£rP¨am
);

2742 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogARB
 (GLuöà
cou¡
, 
GLsizei
 
bufSize
, 
GLíum
 *
sour˚s
, GLíum *
ty≥s
, GLuöà*
ids
, GLíum *
£vîôõs
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßgeLog
);

2746 #i‚de‡
GL_ARB_dïth_buf„r_Êﬂt


2747 
	#GL_ARB_dïth_buf„r_Êﬂt
 1

	)

2750 #i‚de‡
GL_ARB_dïth_˛amp


2751 
	#GL_ARB_dïth_˛amp
 1

	)

2754 #i‚de‡
GL_ARB_dïth_ãxtuª


2755 
	#GL_ARB_dïth_ãxtuª
 1

	)

2756 
	#GL_DEPTH_COMPONENT16_ARB
 0x81A5

	)

2757 
	#GL_DEPTH_COMPONENT24_ARB
 0x81A6

	)

2758 
	#GL_DEPTH_COMPONENT32_ARB
 0x81A7

	)

2759 
	#GL_TEXTURE_DEPTH_SIZE_ARB
 0x884A

	)

2760 
	#GL_DEPTH_TEXTURE_MODE_ARB
 0x884B

	)

2763 #i‚de‡
GL_ARB_døw_buf„rs


2764 
	#GL_ARB_døw_buf„rs
 1

	)

2765 
	#GL_MAX_DRAW_BUFFERS_ARB
 0x8824

	)

2766 
	#GL_DRAW_BUFFER0_ARB
 0x8825

	)

2767 
	#GL_DRAW_BUFFER1_ARB
 0x8826

	)

2768 
	#GL_DRAW_BUFFER2_ARB
 0x8827

	)

2769 
	#GL_DRAW_BUFFER3_ARB
 0x8828

	)

2770 
	#GL_DRAW_BUFFER4_ARB
 0x8829

	)

2771 
	#GL_DRAW_BUFFER5_ARB
 0x882A

	)

2772 
	#GL_DRAW_BUFFER6_ARB
 0x882B

	)

2773 
	#GL_DRAW_BUFFER7_ARB
 0x882C

	)

2774 
	#GL_DRAW_BUFFER8_ARB
 0x882D

	)

2775 
	#GL_DRAW_BUFFER9_ARB
 0x882E

	)

2776 
	#GL_DRAW_BUFFER10_ARB
 0x882F

	)

2777 
	#GL_DRAW_BUFFER11_ARB
 0x8830

	)

2778 
	#GL_DRAW_BUFFER12_ARB
 0x8831

	)

2779 
	#GL_DRAW_BUFFER13_ARB
 0x8832

	)

2780 
	#GL_DRAW_BUFFER14_ARB
 0x8833

	)

2781 
	#GL_DRAW_BUFFER15_ARB
 0x8834

	)

2782 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

2783 #ifde‡
GL_GLEXT_PROTOTYPES


2784 
GLAPI
 
APIENTRY
 
glDøwBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

2788 #i‚de‡
GL_ARB_døw_buf„rs_bÀnd


2789 
	#GL_ARB_døw_buf„rs_bÀnd
 1

	)

2790 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

2791 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

2792 (
APIENTRYP
 
	tPFNGLBLENDFUNCIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

2793 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEIARBPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

2794 #ifde‡
GL_GLEXT_PROTOTYPES


2795 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄iARB
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

2796 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

2797 
GLAPI
 
APIENTRY
 
glBÀndFunciARB
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

2798 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eiARB
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

2802 #i‚de‡
GL_ARB_døw_ñemíts_ba£_vîãx


2803 
	#GL_ARB_døw_ñemíts_ba£_vîãx
 1

	)

2806 #i‚de‡
GL_ARB_døw_ödúe˘


2807 
	#GL_ARB_døw_ödúe˘
 1

	)

2810 #i‚de‡
GL_ARB_døw_ö°™˚d


2811 
	#GL_ARB_døw_ö°™˚d
 1

	)

2812 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

2813 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

2814 #ifde‡
GL_GLEXT_PROTOTYPES


2815 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dARB
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

2816 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dARB
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
);

2820 #i‚de‡
GL_ARB_íh™˚d_œyouts


2821 
	#GL_ARB_íh™˚d_œyouts
 1

	)

2824 #i‚de‡
GL_ARB_ex∂icô_©åib_loˇti⁄


2825 
	#GL_ARB_ex∂icô_©åib_loˇti⁄
 1

	)

2828 #i‚de‡
GL_ARB_ex∂icô_unif‹m_loˇti⁄


2829 
	#GL_ARB_ex∂icô_unif‹m_loˇti⁄
 1

	)

2832 #i‚de‡
GL_ARB_‰agmít_co‹d_c⁄víti⁄s


2833 
	#GL_ARB_‰agmít_co‹d_c⁄víti⁄s
 1

	)

2836 #i‚de‡
GL_ARB_‰agmít_œyî_võwp‹t


2837 
	#GL_ARB_‰agmít_œyî_võwp‹t
 1

	)

2840 #i‚de‡
GL_ARB_‰agmít_¥ogøm


2841 
	#GL_ARB_‰agmít_¥ogøm
 1

	)

2842 
	#GL_FRAGMENT_PROGRAM_ARB
 0x8804

	)

2843 
	#GL_PROGRAM_FORMAT_ASCII_ARB
 0x8875

	)

2844 
	#GL_PROGRAM_LENGTH_ARB
 0x8627

	)

2845 
	#GL_PROGRAM_FORMAT_ARB
 0x8876

	)

2846 
	#GL_PROGRAM_BINDING_ARB
 0x8677

	)

2847 
	#GL_PROGRAM_INSTRUCTIONS_ARB
 0x88A0

	)

2848 
	#GL_MAX_PROGRAM_INSTRUCTIONS_ARB
 0x88A1

	)

2849 
	#GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A2

	)

2850 
	#GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB
 0x88A3

	)

2851 
	#GL_PROGRAM_TEMPORARIES_ARB
 0x88A4

	)

2852 
	#GL_MAX_PROGRAM_TEMPORARIES_ARB
 0x88A5

	)

2853 
	#GL_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A6

	)

2854 
	#GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB
 0x88A7

	)

2855 
	#GL_PROGRAM_PARAMETERS_ARB
 0x88A8

	)

2856 
	#GL_MAX_PROGRAM_PARAMETERS_ARB
 0x88A9

	)

2857 
	#GL_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AA

	)

2858 
	#GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB
 0x88AB

	)

2859 
	#GL_PROGRAM_ATTRIBS_ARB
 0x88AC

	)

2860 
	#GL_MAX_PROGRAM_ATTRIBS_ARB
 0x88AD

	)

2861 
	#GL_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AE

	)

2862 
	#GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB
 0x88AF

	)

2863 
	#GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB
 0x88B4

	)

2864 
	#GL_MAX_PROGRAM_ENV_PARAMETERS_ARB
 0x88B5

	)

2865 
	#GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB
 0x88B6

	)

2866 
	#GL_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x8805

	)

2867 
	#GL_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x8806

	)

2868 
	#GL_PROGRAM_TEX_INDIRECTIONS_ARB
 0x8807

	)

2869 
	#GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x8808

	)

2870 
	#GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x8809

	)

2871 
	#GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x880A

	)

2872 
	#GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB
 0x880B

	)

2873 
	#GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB
 0x880C

	)

2874 
	#GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB
 0x880D

	)

2875 
	#GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB
 0x880E

	)

2876 
	#GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB
 0x880F

	)

2877 
	#GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB
 0x8810

	)

2878 
	#GL_PROGRAM_STRING_ARB
 0x8628

	)

2879 
	#GL_PROGRAM_ERROR_POSITION_ARB
 0x864B

	)

2880 
	#GL_CURRENT_MATRIX_ARB
 0x8641

	)

2881 
	#GL_TRANSPOSE_CURRENT_MATRIX_ARB
 0x88B7

	)

2882 
	#GL_CURRENT_MATRIX_STACK_DEPTH_ARB
 0x8640

	)

2883 
	#GL_MAX_PROGRAM_MATRICES_ARB
 0x862F

	)

2884 
	#GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB
 0x862E

	)

2885 
	#GL_MAX_TEXTURE_COORDS_ARB
 0x8871

	)

2886 
	#GL_MAX_TEXTURE_IMAGE_UNITS_ARB
 0x8872

	)

2887 
	#GL_PROGRAM_ERROR_STRING_ARB
 0x8874

	)

2888 
	#GL_MATRIX0_ARB
 0x88C0

	)

2889 
	#GL_MATRIX1_ARB
 0x88C1

	)

2890 
	#GL_MATRIX2_ARB
 0x88C2

	)

2891 
	#GL_MATRIX3_ARB
 0x88C3

	)

2892 
	#GL_MATRIX4_ARB
 0x88C4

	)

2893 
	#GL_MATRIX5_ARB
 0x88C5

	)

2894 
	#GL_MATRIX6_ARB
 0x88C6

	)

2895 
	#GL_MATRIX7_ARB
 0x88C7

	)

2896 
	#GL_MATRIX8_ARB
 0x88C8

	)

2897 
	#GL_MATRIX9_ARB
 0x88C9

	)

2898 
	#GL_MATRIX10_ARB
 0x88CA

	)

2899 
	#GL_MATRIX11_ARB
 0x88CB

	)

2900 
	#GL_MATRIX12_ARB
 0x88CC

	)

2901 
	#GL_MATRIX13_ARB
 0x88CD

	)

2902 
	#GL_MATRIX14_ARB
 0x88CE

	)

2903 
	#GL_MATRIX15_ARB
 0x88CF

	)

2904 
	#GL_MATRIX16_ARB
 0x88D0

	)

2905 
	#GL_MATRIX17_ARB
 0x88D1

	)

2906 
	#GL_MATRIX18_ARB
 0x88D2

	)

2907 
	#GL_MATRIX19_ARB
 0x88D3

	)

2908 
	#GL_MATRIX20_ARB
 0x88D4

	)

2909 
	#GL_MATRIX21_ARB
 0x88D5

	)

2910 
	#GL_MATRIX22_ARB
 0x88D6

	)

2911 
	#GL_MATRIX23_ARB
 0x88D7

	)

2912 
	#GL_MATRIX24_ARB
 0x88D8

	)

2913 
	#GL_MATRIX25_ARB
 0x88D9

	)

2914 
	#GL_MATRIX26_ARB
 0x88DA

	)

2915 
	#GL_MATRIX27_ARB
 0x88DB

	)

2916 
	#GL_MATRIX28_ARB
 0x88DC

	)

2917 
	#GL_MATRIX29_ARB
 0x88DD

	)

2918 
	#GL_MATRIX30_ARB
 0x88DE

	)

2919 
	#GL_MATRIX31_ARB
 0x88DF

	)

2920 (
APIENTRYP
 
	tPFNGLPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

2921 (
APIENTRYP
 
	tPFNGLBINDPROGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t¥ogøm
);

2922 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

2923 (
APIENTRYP
 
	tPFNGLGENPROGRAMSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

2924 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

2925 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

2926 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

2927 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

2928 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

2929 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

2930 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

2931 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETER4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

2932 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

2933 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

2934 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

2935 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

2936 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

2937 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, *
	t°rög
);

2938 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

2939 #ifde‡
GL_GLEXT_PROTOTYPES


2940 
GLAPI
 
APIENTRY
 
glProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° *
°rög
);

2941 
GLAPI
 
APIENTRY
 
glBödProgømARB
 (
GLíum
 
èrgë
, 
GLuöt
 
¥ogøm
);

2942 
GLAPI
 
APIENTRY
 
glDñëeProgømsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

2943 
GLAPI
 
APIENTRY
 
glGíProgømsARB
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

2944 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

2945 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

2946 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

2947 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

2948 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

2949 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4dvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

2950 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

2951 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëî4fvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

2952 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

2953 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

2954 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîdvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

2955 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîfvARB
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

2956 
GLAPI
 
APIENTRY
 
glGëProgømivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

2957 
GLAPI
 
APIENTRY
 
glGëProgømSåögARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, *
°rög
);

2958 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømARB
 (
GLuöt
 
¥ogøm
);

2962 #i‚de‡
GL_ARB_‰agmít_¥ogøm_shadow


2963 
	#GL_ARB_‰agmít_¥ogøm_shadow
 1

	)

2966 #i‚de‡
GL_ARB_‰agmít_shadî


2967 
	#GL_ARB_‰agmít_shadî
 1

	)

2968 
	#GL_FRAGMENT_SHADER_ARB
 0x8B30

	)

2969 
	#GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB
 0x8B49

	)

2970 
	#GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB
 0x8B8B

	)

2973 #i‚de‡
GL_ARB_‰amebuf„r_no_©èchmíts


2974 
	#GL_ARB_‰amebuf„r_no_©èchmíts
 1

	)

2977 #i‚de‡
GL_ARB_‰amebuf„r_obje˘


2978 
	#GL_ARB_‰amebuf„r_obje˘
 1

	)

2981 #i‚de‡
GL_ARB_‰amebuf„r_sRGB


2982 
	#GL_ARB_‰amebuf„r_sRGB
 1

	)

2985 #i‚de‡
GL_ARB_geomëry_shadî4


2986 
	#GL_ARB_geomëry_shadî4
 1

	)

2987 
	#GL_LINES_ADJACENCY_ARB
 0x000A

	)

2988 
	#GL_LINE_STRIP_ADJACENCY_ARB
 0x000B

	)

2989 
	#GL_TRIANGLES_ADJACENCY_ARB
 0x000C

	)

2990 
	#GL_TRIANGLE_STRIP_ADJACENCY_ARB
 0x000D

	)

2991 
	#GL_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

2992 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB
 0x8C29

	)

2993 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB
 0x8DA7

	)

2994 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB
 0x8DA8

	)

2995 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB
 0x8DA9

	)

2996 
	#GL_GEOMETRY_SHADER_ARB
 0x8DD9

	)

2997 
	#GL_GEOMETRY_VERTICES_OUT_ARB
 0x8DDA

	)

2998 
	#GL_GEOMETRY_INPUT_TYPE_ARB
 0x8DDB

	)

2999 
	#GL_GEOMETRY_OUTPUT_TYPE_ARB
 0x8DDC

	)

3000 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB
 0x8DDD

	)

3001 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_ARB
 0x8DDE

	)

3002 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB
 0x8DDF

	)

3003 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB
 0x8DE0

	)

3004 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB
 0x8DE1

	)

3005 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

3006 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

3007 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

3008 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

3009 #ifde‡
GL_GLEXT_PROTOTYPES


3010 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiARB
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

3011 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

3012 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

3013 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚ARB
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

3017 #i‚de‡
GL_ARB_gë_¥ogøm_bö¨y


3018 
	#GL_ARB_gë_¥ogøm_bö¨y
 1

	)

3021 #i‚de‡
GL_ARB_gpu_shadî5


3022 
	#GL_ARB_gpu_shadî5
 1

	)

3025 #i‚de‡
GL_ARB_gpu_shadî_Â64


3026 
	#GL_ARB_gpu_shadî_Â64
 1

	)

3029 #i‚de‡
GL_ARB_hÆf_Êﬂt_pixñ


3030 
	#GL_ARB_hÆf_Êﬂt_pixñ
 1

	)

3031 
	tGLhÆfARB
;

3032 
	#GL_HALF_FLOAT_ARB
 0x140B

	)

3035 #i‚de‡
GL_ARB_hÆf_Êﬂt_vîãx


3036 
	#GL_ARB_hÆf_Êﬂt_vîãx
 1

	)

3039 #i‚de‡
GL_ARB_imagög


3040 
	#GL_ARB_imagög
 1

	)

3041 
	#GL_BLEND_COLOR
 0x8005

	)

3042 
	#GL_BLEND_EQUATION
 0x8009

	)

3043 
	#GL_CONVOLUTION_1D
 0x8010

	)

3044 
	#GL_CONVOLUTION_2D
 0x8011

	)

3045 
	#GL_SEPARABLE_2D
 0x8012

	)

3046 
	#GL_CONVOLUTION_BORDER_MODE
 0x8013

	)

3047 
	#GL_CONVOLUTION_FILTER_SCALE
 0x8014

	)

3048 
	#GL_CONVOLUTION_FILTER_BIAS
 0x8015

	)

3049 
	#GL_REDUCE
 0x8016

	)

3050 
	#GL_CONVOLUTION_FORMAT
 0x8017

	)

3051 
	#GL_CONVOLUTION_WIDTH
 0x8018

	)

3052 
	#GL_CONVOLUTION_HEIGHT
 0x8019

	)

3053 
	#GL_MAX_CONVOLUTION_WIDTH
 0x801A

	)

3054 
	#GL_MAX_CONVOLUTION_HEIGHT
 0x801B

	)

3055 
	#GL_POST_CONVOLUTION_RED_SCALE
 0x801C

	)

3056 
	#GL_POST_CONVOLUTION_GREEN_SCALE
 0x801D

	)

3057 
	#GL_POST_CONVOLUTION_BLUE_SCALE
 0x801E

	)

3058 
	#GL_POST_CONVOLUTION_ALPHA_SCALE
 0x801F

	)

3059 
	#GL_POST_CONVOLUTION_RED_BIAS
 0x8020

	)

3060 
	#GL_POST_CONVOLUTION_GREEN_BIAS
 0x8021

	)

3061 
	#GL_POST_CONVOLUTION_BLUE_BIAS
 0x8022

	)

3062 
	#GL_POST_CONVOLUTION_ALPHA_BIAS
 0x8023

	)

3063 
	#GL_HISTOGRAM
 0x8024

	)

3064 
	#GL_PROXY_HISTOGRAM
 0x8025

	)

3065 
	#GL_HISTOGRAM_WIDTH
 0x8026

	)

3066 
	#GL_HISTOGRAM_FORMAT
 0x8027

	)

3067 
	#GL_HISTOGRAM_RED_SIZE
 0x8028

	)

3068 
	#GL_HISTOGRAM_GREEN_SIZE
 0x8029

	)

3069 
	#GL_HISTOGRAM_BLUE_SIZE
 0x802A

	)

3070 
	#GL_HISTOGRAM_ALPHA_SIZE
 0x802B

	)

3071 
	#GL_HISTOGRAM_LUMINANCE_SIZE
 0x802C

	)

3072 
	#GL_HISTOGRAM_SINK
 0x802D

	)

3073 
	#GL_MINMAX
 0x802E

	)

3074 
	#GL_MINMAX_FORMAT
 0x802F

	)

3075 
	#GL_MINMAX_SINK
 0x8030

	)

3076 
	#GL_TABLE_TOO_LARGE
 0x8031

	)

3077 
	#GL_COLOR_MATRIX
 0x80B1

	)

3078 
	#GL_COLOR_MATRIX_STACK_DEPTH
 0x80B2

	)

3079 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH
 0x80B3

	)

3080 
	#GL_POST_COLOR_MATRIX_RED_SCALE
 0x80B4

	)

3081 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE
 0x80B5

	)

3082 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE
 0x80B6

	)

3083 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE
 0x80B7

	)

3084 
	#GL_POST_COLOR_MATRIX_RED_BIAS
 0x80B8

	)

3085 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS
 0x80B9

	)

3086 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS
 0x80BA

	)

3087 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS
 0x80BB

	)

3088 
	#GL_COLOR_TABLE
 0x80D0

	)

3089 
	#GL_POST_CONVOLUTION_COLOR_TABLE
 0x80D1

	)

3090 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D2

	)

3091 
	#GL_PROXY_COLOR_TABLE
 0x80D3

	)

3092 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE
 0x80D4

	)

3093 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE
 0x80D5

	)

3094 
	#GL_COLOR_TABLE_SCALE
 0x80D6

	)

3095 
	#GL_COLOR_TABLE_BIAS
 0x80D7

	)

3096 
	#GL_COLOR_TABLE_FORMAT
 0x80D8

	)

3097 
	#GL_COLOR_TABLE_WIDTH
 0x80D9

	)

3098 
	#GL_COLOR_TABLE_RED_SIZE
 0x80DA

	)

3099 
	#GL_COLOR_TABLE_GREEN_SIZE
 0x80DB

	)

3100 
	#GL_COLOR_TABLE_BLUE_SIZE
 0x80DC

	)

3101 
	#GL_COLOR_TABLE_ALPHA_SIZE
 0x80DD

	)

3102 
	#GL_COLOR_TABLE_LUMINANCE_SIZE
 0x80DE

	)

3103 
	#GL_COLOR_TABLE_INTENSITY_SIZE
 0x80DF

	)

3104 
	#GL_CONSTANT_BORDER
 0x8151

	)

3105 
	#GL_REPLICATE_BORDER
 0x8153

	)

3106 
	#GL_CONVOLUTION_BORDER_COLOR
 0x8154

	)

3107 (
APIENTRYP
 
	tPFNGLCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

3108 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3109 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3110 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3111 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tèbÀ
);

3112 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3113 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3114 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

3115 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

3116 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

3117 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

3118 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

3119 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3120 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

3121 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

3122 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

3123 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

3124 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	timage
);

3125 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3126 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3127 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTERPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	trow
, *
	tcﬁumn
, *
	t•™
);

3128 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	trow
, c⁄° *
	tcﬁumn
);

3129 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

3130 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3131 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3132 (
APIENTRYP
 
	tPFNGLGETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

3133 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3134 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3135 (
APIENTRYP
 
	tPFNGLHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3136 (
APIENTRYP
 
	tPFNGLMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

3137 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMPROC
Ë(
	tGLíum
 
	tèrgë
);

3138 (
APIENTRYP
 
	tPFNGLRESETMINMAXPROC
Ë(
	tGLíum
 
	tèrgë
);

3139 #ifde‡
GL_GLEXT_PROTOTYPES


3140 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

3141 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3142 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

3143 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

3144 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀ
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
èbÀ
);

3145 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3146 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3147 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

3148 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀ
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

3149 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

3150 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

3151 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîf
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

3152 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3153 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîi
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

3154 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

3155 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

3156 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

3157 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄Fûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
image
);

3158 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3159 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3160 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãr
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
row
, *
cﬁumn
, *
•™
);

3161 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2D
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
row
, c⁄° *
cﬁumn
);

3162 
GLAPI
 
APIENTRY
 
glGëHi°ogøm
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

3163 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3164 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3165 
GLAPI
 
APIENTRY
 
glGëMömax
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

3166 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3167 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîiv
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3168 
GLAPI
 
APIENTRY
 
glHi°ogøm
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

3169 
GLAPI
 
APIENTRY
 
glMömax
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

3170 
GLAPI
 
APIENTRY
 
glRe£tHi°ogøm
 (
GLíum
 
èrgë
);

3171 
GLAPI
 
APIENTRY
 
glRe£tMömax
 (
GLíum
 
èrgë
);

3175 #i‚de‡
GL_ARB_ödúe˘_∑ømëîs


3176 
	#GL_ARB_ödúe˘_∑ømëîs
 1

	)

3177 
	#GL_PARAMETER_BUFFER_ARB
 0x80EE

	)

3178 
	#GL_PARAMETER_BUFFER_BINDING_ARB
 0x80EF

	)

3179 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3180 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, 
	tGLöçå
 
	tödúe˘
, GLöçå 
	tdøwcou¡
, 
	tGLsizei
 
	tmaxdøwcou¡
, GLsizeò
	t°ride
);

3181 #ifde‡
GL_GLEXT_PROTOTYPES


3182 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘Cou¡ARB
 (
GLíum
 
mode
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3183 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘Cou¡ARB
 (
GLíum
 
mode
, GLíum 
ty≥
, 
GLöçå
 
ödúe˘
, GLöçå 
døwcou¡
, 
GLsizei
 
maxdøwcou¡
, GLsizeò
°ride
);

3187 #i‚de‡
GL_ARB_ö°™˚d_¨øys


3188 
	#GL_ARB_ö°™˚d_¨øys
 1

	)

3189 
	#GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB
 0x88FE

	)

3190 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBDIVISORARBPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tdivis‹
);

3191 #ifde‡
GL_GLEXT_PROTOTYPES


3192 
GLAPI
 
APIENTRY
 
glVîãxAâribDivis‹ARB
 (
GLuöt
 
ödex
, GLuöà
divis‹
);

3196 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy


3197 
	#GL_ARB_öã∫Æf‹m©_quîy
 1

	)

3200 #i‚de‡
GL_ARB_öã∫Æf‹m©_quîy2


3201 
	#GL_ARB_öã∫Æf‹m©_quîy2
 1

	)

3202 
	#GL_SRGB_DECODE_ARB
 0x8299

	)

3205 #i‚de‡
GL_ARB_övÆid©e_subd©a


3206 
	#GL_ARB_övÆid©e_subd©a
 1

	)

3209 #i‚de‡
GL_ARB_m≠_buf„r_Æignmít


3210 
	#GL_ARB_m≠_buf„r_Æignmít
 1

	)

3213 #i‚de‡
GL_ARB_m≠_buf„r_ønge


3214 
	#GL_ARB_m≠_buf„r_ønge
 1

	)

3217 #i‚de‡
GL_ARB_m©rix_∑Àâe


3218 
	#GL_ARB_m©rix_∑Àâe
 1

	)

3219 
	#GL_MATRIX_PALETTE_ARB
 0x8840

	)

3220 
	#GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB
 0x8841

	)

3221 
	#GL_MAX_PALETTE_MATRICES_ARB
 0x8842

	)

3222 
	#GL_CURRENT_PALETTE_MATRIX_ARB
 0x8843

	)

3223 
	#GL_MATRIX_INDEX_ARRAY_ARB
 0x8844

	)

3224 
	#GL_CURRENT_MATRIX_INDEX_ARB
 0x8845

	)

3225 
	#GL_MATRIX_INDEX_ARRAY_SIZE_ARB
 0x8846

	)

3226 
	#GL_MATRIX_INDEX_ARRAY_TYPE_ARB
 0x8847

	)

3227 
	#GL_MATRIX_INDEX_ARRAY_STRIDE_ARB
 0x8848

	)

3228 
	#GL_MATRIX_INDEX_ARRAY_POINTER_ARB
 0x8849

	)

3229 (
APIENTRYP
 
	tPFNGLCURRENTPALETTEMATRIXARBPROC
Ë(
	tGLöt
 
	tödex
);

3230 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tödi˚s
);

3231 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tödi˚s
);

3232 (
APIENTRYP
 
	tPFNGLMATRIXINDEXUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tödi˚s
);

3233 (
APIENTRYP
 
	tPFNGLMATRIXINDEXPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

3234 #ifde‡
GL_GLEXT_PROTOTYPES


3235 
GLAPI
 
APIENTRY
 
glCuºítPÆëãM©rixARB
 (
GLöt
 
ödex
);

3236 
GLAPI
 
APIENTRY
 
glM©rixIndexubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
ödi˚s
);

3237 
GLAPI
 
APIENTRY
 
glM©rixIndexusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
ödi˚s
);

3238 
GLAPI
 
APIENTRY
 
glM©rixIndexuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
ödi˚s
);

3239 
GLAPI
 
APIENTRY
 
glM©rixIndexPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

3243 #i‚de‡
GL_ARB_mu…i_böd


3244 
	#GL_ARB_mu…i_böd
 1

	)

3247 #i‚de‡
GL_ARB_mu…i_døw_ödúe˘


3248 
	#GL_ARB_mu…i_døw_ödúe˘
 1

	)

3251 #i‚de‡
GL_ARB_mu…ißm∂e


3252 
	#GL_ARB_mu…ißm∂e
 1

	)

3253 
	#GL_MULTISAMPLE_ARB
 0x809D

	)

3254 
	#GL_SAMPLE_ALPHA_TO_COVERAGE_ARB
 0x809E

	)

3255 
	#GL_SAMPLE_ALPHA_TO_ONE_ARB
 0x809F

	)

3256 
	#GL_SAMPLE_COVERAGE_ARB
 0x80A0

	)

3257 
	#GL_SAMPLE_BUFFERS_ARB
 0x80A8

	)

3258 
	#GL_SAMPLES_ARB
 0x80A9

	)

3259 
	#GL_SAMPLE_COVERAGE_VALUE_ARB
 0x80AA

	)

3260 
	#GL_SAMPLE_COVERAGE_INVERT_ARB
 0x80AB

	)

3261 
	#GL_MULTISAMPLE_BIT_ARB
 0x20000000

	)

3262 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

3263 #ifde‡
GL_GLEXT_PROTOTYPES


3264 
GLAPI
 
APIENTRY
 
glSam∂eCovîageARB
 (
GLÊﬂt
 
vÆue
, 
GLboﬁón
 
övît
);

3268 #i‚de‡
GL_ARB_mu…ôextuª


3269 
	#GL_ARB_mu…ôextuª
 1

	)

3270 
	#GL_TEXTURE0_ARB
 0x84C0

	)

3271 
	#GL_TEXTURE1_ARB
 0x84C1

	)

3272 
	#GL_TEXTURE2_ARB
 0x84C2

	)

3273 
	#GL_TEXTURE3_ARB
 0x84C3

	)

3274 
	#GL_TEXTURE4_ARB
 0x84C4

	)

3275 
	#GL_TEXTURE5_ARB
 0x84C5

	)

3276 
	#GL_TEXTURE6_ARB
 0x84C6

	)

3277 
	#GL_TEXTURE7_ARB
 0x84C7

	)

3278 
	#GL_TEXTURE8_ARB
 0x84C8

	)

3279 
	#GL_TEXTURE9_ARB
 0x84C9

	)

3280 
	#GL_TEXTURE10_ARB
 0x84CA

	)

3281 
	#GL_TEXTURE11_ARB
 0x84CB

	)

3282 
	#GL_TEXTURE12_ARB
 0x84CC

	)

3283 
	#GL_TEXTURE13_ARB
 0x84CD

	)

3284 
	#GL_TEXTURE14_ARB
 0x84CE

	)

3285 
	#GL_TEXTURE15_ARB
 0x84CF

	)

3286 
	#GL_TEXTURE16_ARB
 0x84D0

	)

3287 
	#GL_TEXTURE17_ARB
 0x84D1

	)

3288 
	#GL_TEXTURE18_ARB
 0x84D2

	)

3289 
	#GL_TEXTURE19_ARB
 0x84D3

	)

3290 
	#GL_TEXTURE20_ARB
 0x84D4

	)

3291 
	#GL_TEXTURE21_ARB
 0x84D5

	)

3292 
	#GL_TEXTURE22_ARB
 0x84D6

	)

3293 
	#GL_TEXTURE23_ARB
 0x84D7

	)

3294 
	#GL_TEXTURE24_ARB
 0x84D8

	)

3295 
	#GL_TEXTURE25_ARB
 0x84D9

	)

3296 
	#GL_TEXTURE26_ARB
 0x84DA

	)

3297 
	#GL_TEXTURE27_ARB
 0x84DB

	)

3298 
	#GL_TEXTURE28_ARB
 0x84DC

	)

3299 
	#GL_TEXTURE29_ARB
 0x84DD

	)

3300 
	#GL_TEXTURE30_ARB
 0x84DE

	)

3301 
	#GL_TEXTURE31_ARB
 0x84DF

	)

3302 
	#GL_ACTIVE_TEXTURE_ARB
 0x84E0

	)

3303 
	#GL_CLIENT_ACTIVE_TEXTURE_ARB
 0x84E1

	)

3304 
	#GL_MAX_TEXTURE_UNITS_ARB
 0x84E2

	)

3305 (
APIENTRYP
 
	tPFNGLACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3306 (
APIENTRYP
 
	tPFNGLCLIENTACTIVETEXTUREARBPROC
Ë(
	tGLíum
 
	tãxtuª
);

3307 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
);

3308 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3309 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
);

3310 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3311 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
);

3312 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3313 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
);

3314 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3315 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
);

3316 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3317 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
);

3318 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3319 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
);

3320 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3321 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
);

3322 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3323 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
);

3324 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3325 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
);

3326 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3327 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
);

3328 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3329 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
);

3330 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3331 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	ts
, GLdoubÀ 
	tt
, GLdoubÀ 
	tr
, GLdoubÀ 
	tq
);

3332 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4DVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLdoubÀ
 *
	tv
);

3333 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tq
);

3334 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4FVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLÊﬂt
 *
	tv
);

3335 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	ts
, GLöà
	tt
, GLöà
	tr
, GLöà
	tq
);

3336 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4IVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLöt
 *
	tv
);

3337 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsh‹t
 
	ts
, GLsh‹à
	tt
, GLsh‹à
	tr
, GLsh‹à
	tq
);

3338 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4SVARBPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLsh‹t
 *
	tv
);

3339 #ifde‡
GL_GLEXT_PROTOTYPES


3340 
GLAPI
 
APIENTRY
 
glA˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

3341 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveTextuªARB
 (
GLíum
 
ãxtuª
);

3342 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
);

3343 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3344 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
);

3345 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3346 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
);

3347 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3348 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
);

3349 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3350 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
);

3351 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3352 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
);

3353 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3354 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
);

3355 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3356 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
);

3357 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3358 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
);

3359 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3360 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
);

3361 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3362 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
);

3363 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3364 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
);

3365 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3366 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dARB
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
s
, GLdoubÀ 
t
, GLdoubÀ 
r
, GLdoubÀ 
q
);

3367 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4dvARB
 (
GLíum
 
èrgë
, c⁄° 
GLdoubÀ
 *
v
);

3368 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fARB
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
q
);

3369 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4fvARB
 (
GLíum
 
èrgë
, c⁄° 
GLÊﬂt
 *
v
);

3370 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4iARB
 (
GLíum
 
èrgë
, 
GLöt
 
s
, GLöà
t
, GLöà
r
, GLöà
q
);

3371 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4ivARB
 (
GLíum
 
èrgë
, c⁄° 
GLöt
 *
v
);

3372 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4sARB
 (
GLíum
 
èrgë
, 
GLsh‹t
 
s
, GLsh‹à
t
, GLsh‹à
r
, GLsh‹à
q
);

3373 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4svARB
 (
GLíum
 
èrgë
, c⁄° 
GLsh‹t
 *
v
);

3377 #i‚de‡
GL_ARB_oc˛usi⁄_quîy


3378 
	#GL_ARB_oc˛usi⁄_quîy
 1

	)

3379 
	#GL_QUERY_COUNTER_BITS_ARB
 0x8864

	)

3380 
	#GL_CURRENT_QUERY_ARB
 0x8865

	)

3381 
	#GL_QUERY_RESULT_ARB
 0x8866

	)

3382 
	#GL_QUERY_RESULT_AVAILABLE_ARB
 0x8867

	)

3383 
	#GL_SAMPLES_PASSED_ARB
 0x8914

	)

3384 (
APIENTRYP
 
	tPFNGLGENQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

3385 (
APIENTRYP
 
	tPFNGLDELETEQUERIESARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

3386 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISQUERYARBPROC
Ë(
	tGLuöt
 
	tid
);

3387 (
APIENTRYP
 
	tPFNGLBEGINQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

3388 (
APIENTRYP
 
	tPFNGLENDQUERYARBPROC
Ë(
	tGLíum
 
	tèrgë
);

3389 (
APIENTRYP
 
	tPFNGLGETQUERYIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3390 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3391 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUIVARBPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

3392 #ifde‡
GL_GLEXT_PROTOTYPES


3393 
GLAPI
 
APIENTRY
 
glGíQuîõsARB
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

3394 
GLAPI
 
APIENTRY
 
glDñëeQuîõsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

3395 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsQuîyARB
 (
GLuöt
 
id
);

3396 
GLAPI
 
APIENTRY
 
glBegöQuîyARB
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

3397 
GLAPI
 
APIENTRY
 
glEndQuîyARB
 (
GLíum
 
èrgë
);

3398 
GLAPI
 
APIENTRY
 
glGëQuîyivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

3399 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

3400 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘uivARB
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

3404 #i‚de‡
GL_ARB_oc˛usi⁄_quîy2


3405 
	#GL_ARB_oc˛usi⁄_quîy2
 1

	)

3408 #i‚de‡
GL_ARB_pixñ_buf„r_obje˘


3409 
	#GL_ARB_pixñ_buf„r_obje˘
 1

	)

3410 
	#GL_PIXEL_PACK_BUFFER_ARB
 0x88EB

	)

3411 
	#GL_PIXEL_UNPACK_BUFFER_ARB
 0x88EC

	)

3412 
	#GL_PIXEL_PACK_BUFFER_BINDING_ARB
 0x88ED

	)

3413 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_ARB
 0x88EF

	)

3416 #i‚de‡
GL_ARB_poöt_∑ømëîs


3417 
	#GL_ARB_poöt_∑ømëîs
 1

	)

3418 
	#GL_POINT_SIZE_MIN_ARB
 0x8126

	)

3419 
	#GL_POINT_SIZE_MAX_ARB
 0x8127

	)

3420 
	#GL_POINT_FADE_THRESHOLD_SIZE_ARB
 0x8128

	)

3421 
	#GL_POINT_DISTANCE_ATTENUATION_ARB
 0x8129

	)

3422 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFARBPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

3423 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVARBPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

3424 #ifde‡
GL_GLEXT_PROTOTYPES


3425 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfARB
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

3426 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvARB
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

3430 #i‚de‡
GL_ARB_poöt_•rôe


3431 
	#GL_ARB_poöt_•rôe
 1

	)

3432 
	#GL_POINT_SPRITE_ARB
 0x8861

	)

3433 
	#GL_COORD_REPLACE_ARB
 0x8862

	)

3436 #i‚de‡
GL_ARB_¥ogøm_öãrÁ˚_quîy


3437 
	#GL_ARB_¥ogøm_öãrÁ˚_quîy
 1

	)

3440 #i‚de‡
GL_ARB_¥ovokög_vîãx


3441 
	#GL_ARB_¥ovokög_vîãx
 1

	)

3444 #i‚de‡
GL_ARB_quîy_buf„r_obje˘


3445 
	#GL_ARB_quîy_buf„r_obje˘
 1

	)

3448 #i‚de‡
GL_ARB_robu°_buf„r_ac˚ss_behavi‹


3449 
	#GL_ARB_robu°_buf„r_ac˚ss_behavi‹
 1

	)

3452 #i‚de‡
GL_ARB_robu°√ss


3453 
	#GL_ARB_robu°√ss
 1

	)

3454 
	#GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB
 0x00000004

	)

3455 
	#GL_LOSE_CONTEXT_ON_RESET_ARB
 0x8252

	)

3456 
	#GL_GUILTY_CONTEXT_RESET_ARB
 0x8253

	)

3457 
	#GL_INNOCENT_CONTEXT_RESET_ARB
 0x8254

	)

3458 
	#GL_UNKNOWN_CONTEXT_RESET_ARB
 0x8255

	)

3459 
	#GL_RESET_NOTIFICATION_STRATEGY_ARB
 0x8256

	)

3460 
	#GL_NO_RESET_NOTIFICATION_ARB
 0x8261

	)

3461 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLGETGRAPHICSRESETSTATUSARBPROC
) ();

3462 (
APIENTRYP
 
	tPFNGLGETNTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3463 (
APIENTRYP
 
	tPFNGLREADNPIXELSARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLíum
 
	tf‹m©
, GLíum 
	tty≥
, GLsizeò
	tbufSize
, *
	td©a
);

3464 (
APIENTRYP
 
	tPFNGLGETNCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, 
	tGLsizei
 
	tbufSize
, *
	timg
);

3465 (
APIENTRYP
 
	tPFNGLGETNUNIFORMFVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	t∑øms
);

3466 (
APIENTRYP
 
	tPFNGLGETNUNIFORMIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t∑øms
);

3467 (
APIENTRYP
 
	tPFNGLGETNUNIFORMUIVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, GLuöà*
	t∑øms
);

3468 (
APIENTRYP
 
	tPFNGLGETNUNIFORMDVARBPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	t∑øms
);

3469 (
APIENTRYP
 
	tPFNGLGETNMAPDVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLdoubÀ
 *
	tv
);

3470 (
APIENTRYP
 
	tPFNGLGETNMAPFVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tv
);

3471 (
APIENTRYP
 
	tPFNGLGETNMAPIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLsizei
 
	tbufSize
, 
	tGLöt
 *
	tv
);

3472 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPFVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLÊﬂt
 *
	tvÆues
);

3473 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUIVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLuöt
 *
	tvÆues
);

3474 (
APIENTRYP
 
	tPFNGLGETNPIXELMAPUSVARBPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLsizei
 
	tbufSize
, 
	tGLush‹t
 *
	tvÆues
);

3475 (
APIENTRYP
 
	tPFNGLGETNPOLYGONSTIPPLEARBPROC
Ë(
	tGLsizei
 
	tbufSize
, 
	tGLubyã
 *
	t∑âîn
);

3476 (
APIENTRYP
 
	tPFNGLGETNCOLORTABLEARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tèbÀ
);

3477 (
APIENTRYP
 
	tPFNGLGETNCONVOLUTIONFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	timage
);

3478 (
APIENTRYP
 
	tPFNGLGETNSEPARABLEFILTERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	trowBufSize
, *
	trow
, GLsizeò
	tcﬁumnBufSize
, *
	tcﬁumn
, *
	t•™
);

3479 (
APIENTRYP
 
	tPFNGLGETNHISTOGRAMARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

3480 (
APIENTRYP
 
	tPFNGLGETNMINMAXARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, 
	tGLsizei
 
	tbufSize
, *
	tvÆues
);

3481 #ifde‡
GL_GLEXT_PROTOTYPES


3482 
GLAPI
 
GLíum
 
APIENTRY
 
glGëGøphicsRe£tSètusARB
 ();

3483 
GLAPI
 
APIENTRY
 
glGënTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
img
);

3484 
GLAPI
 
APIENTRY
 
glRódnPixñsARB
 (
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, 
GLíum
 
f‹m©
, GLíum 
ty≥
, GLsizeò
bufSize
, *
d©a
);

3485 
GLAPI
 
APIENTRY
 
glGënCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
lod
, 
GLsizei
 
bufSize
, *
img
);

3486 
GLAPI
 
APIENTRY
 
glGënUnif‹mfvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
∑øms
);

3487 
GLAPI
 
APIENTRY
 
glGënUnif‹mivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLöà*
∑øms
);

3488 
GLAPI
 
APIENTRY
 
glGënUnif‹muivARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, GLuöà*
∑øms
);

3489 
GLAPI
 
APIENTRY
 
glGënUnif‹mdvARB
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
∑øms
);

3490 
GLAPI
 
APIENTRY
 
glGënM≠dvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLdoubÀ
 *
v
);

3491 
GLAPI
 
APIENTRY
 
glGënM≠fvARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
v
);

3492 
GLAPI
 
APIENTRY
 
glGënM≠ivARB
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLsizei
 
bufSize
, 
GLöt
 *
v
);

3493 
GLAPI
 
APIENTRY
 
glGënPixñM≠fvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLÊﬂt
 *
vÆues
);

3494 
GLAPI
 
APIENTRY
 
glGënPixñM≠uivARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLuöt
 *
vÆues
);

3495 
GLAPI
 
APIENTRY
 
glGënPixñM≠usvARB
 (
GLíum
 
m≠
, 
GLsizei
 
bufSize
, 
GLush‹t
 *
vÆues
);

3496 
GLAPI
 
APIENTRY
 
glGënPﬁyg⁄Stù∂eARB
 (
GLsizei
 
bufSize
, 
GLubyã
 *
∑âîn
);

3497 
GLAPI
 
APIENTRY
 
glGënCﬁ‹TabÀARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
èbÀ
);

3498 
GLAPI
 
APIENTRY
 
glGënC⁄vﬁuti⁄FûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
image
);

3499 
GLAPI
 
APIENTRY
 
glGënSï¨abÀFûãrARB
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
rowBufSize
, *
row
, GLsizeò
cﬁumnBufSize
, *
cﬁumn
, *
•™
);

3500 
GLAPI
 
APIENTRY
 
glGënHi°ogømARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

3501 
GLAPI
 
APIENTRY
 
glGënMömaxARB
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, 
GLsizei
 
bufSize
, *
vÆues
);

3505 #i‚de‡
GL_ARB_robu°√ss_isﬁ©i⁄


3506 
	#GL_ARB_robu°√ss_isﬁ©i⁄
 1

	)

3509 #i‚de‡
GL_ARB_ßm∂e_shadög


3510 
	#GL_ARB_ßm∂e_shadög
 1

	)

3511 
	#GL_SAMPLE_SHADING_ARB
 0x8C36

	)

3512 
	#GL_MIN_SAMPLE_SHADING_VALUE_ARB
 0x8C37

	)

3513 (
APIENTRYP
 
	tPFNGLMINSAMPLESHADINGARBPROC
Ë(
	tGLÊﬂt
 
	tvÆue
);

3514 #ifde‡
GL_GLEXT_PROTOTYPES


3515 
GLAPI
 
APIENTRY
 
glMöSam∂eShadögARB
 (
GLÊﬂt
 
vÆue
);

3519 #i‚de‡
GL_ARB_ßm∂î_obje˘s


3520 
	#GL_ARB_ßm∂î_obje˘s
 1

	)

3523 #i‚de‡
GL_ARB_£amÀss_cube_m≠


3524 
	#GL_ARB_£amÀss_cube_m≠
 1

	)

3527 #i‚de‡
GL_ARB_£amÀss_cubem≠_≥r_ãxtuª


3528 
	#GL_ARB_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

3531 #i‚de‡
GL_ARB_£∑øã_shadî_obje˘s


3532 
	#GL_ARB_£∑øã_shadî_obje˘s
 1

	)

3535 #i‚de‡
GL_ARB_shadî_©omic_cou¡îs


3536 
	#GL_ARB_shadî_©omic_cou¡îs
 1

	)

3539 #i‚de‡
GL_ARB_shadî_bô_ícodög


3540 
	#GL_ARB_shadî_bô_ícodög
 1

	)

3543 #i‚de‡
GL_ARB_shadî_døw_∑ømëîs


3544 
	#GL_ARB_shadî_døw_∑ømëîs
 1

	)

3547 #i‚de‡
GL_ARB_shadî_group_vŸe


3548 
	#GL_ARB_shadî_group_vŸe
 1

	)

3551 #i‚de‡
GL_ARB_shadî_image_lﬂd_°‹e


3552 
	#GL_ARB_shadî_image_lﬂd_°‹e
 1

	)

3555 #i‚de‡
GL_ARB_shadî_image_size


3556 
	#GL_ARB_shadî_image_size
 1

	)

3559 #i‚de‡
GL_ARB_shadî_obje˘s


3560 
	#GL_ARB_shadî_obje˘s
 1

	)

3561 #ifde‡
__APPLE__


3562 *
	tGLh™dÀARB
;

3564 
	tGLh™dÀARB
;

3566 
	tGLch¨ARB
;

3567 
	#GL_PROGRAM_OBJECT_ARB
 0x8B40

	)

3568 
	#GL_SHADER_OBJECT_ARB
 0x8B48

	)

3569 
	#GL_OBJECT_TYPE_ARB
 0x8B4E

	)

3570 
	#GL_OBJECT_SUBTYPE_ARB
 0x8B4F

	)

3571 
	#GL_FLOAT_VEC2_ARB
 0x8B50

	)

3572 
	#GL_FLOAT_VEC3_ARB
 0x8B51

	)

3573 
	#GL_FLOAT_VEC4_ARB
 0x8B52

	)

3574 
	#GL_INT_VEC2_ARB
 0x8B53

	)

3575 
	#GL_INT_VEC3_ARB
 0x8B54

	)

3576 
	#GL_INT_VEC4_ARB
 0x8B55

	)

3577 
	#GL_BOOL_ARB
 0x8B56

	)

3578 
	#GL_BOOL_VEC2_ARB
 0x8B57

	)

3579 
	#GL_BOOL_VEC3_ARB
 0x8B58

	)

3580 
	#GL_BOOL_VEC4_ARB
 0x8B59

	)

3581 
	#GL_FLOAT_MAT2_ARB
 0x8B5A

	)

3582 
	#GL_FLOAT_MAT3_ARB
 0x8B5B

	)

3583 
	#GL_FLOAT_MAT4_ARB
 0x8B5C

	)

3584 
	#GL_SAMPLER_1D_ARB
 0x8B5D

	)

3585 
	#GL_SAMPLER_2D_ARB
 0x8B5E

	)

3586 
	#GL_SAMPLER_3D_ARB
 0x8B5F

	)

3587 
	#GL_SAMPLER_CUBE_ARB
 0x8B60

	)

3588 
	#GL_SAMPLER_1D_SHADOW_ARB
 0x8B61

	)

3589 
	#GL_SAMPLER_2D_SHADOW_ARB
 0x8B62

	)

3590 
	#GL_SAMPLER_2D_RECT_ARB
 0x8B63

	)

3591 
	#GL_SAMPLER_2D_RECT_SHADOW_ARB
 0x8B64

	)

3592 
	#GL_OBJECT_DELETE_STATUS_ARB
 0x8B80

	)

3593 
	#GL_OBJECT_COMPILE_STATUS_ARB
 0x8B81

	)

3594 
	#GL_OBJECT_LINK_STATUS_ARB
 0x8B82

	)

3595 
	#GL_OBJECT_VALIDATE_STATUS_ARB
 0x8B83

	)

3596 
	#GL_OBJECT_INFO_LOG_LENGTH_ARB
 0x8B84

	)

3597 
	#GL_OBJECT_ATTACHED_OBJECTS_ARB
 0x8B85

	)

3598 
	#GL_OBJECT_ACTIVE_UNIFORMS_ARB
 0x8B86

	)

3599 
	#GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB
 0x8B87

	)

3600 
	#GL_OBJECT_SHADER_SOURCE_LENGTH_ARB
 0x8B88

	)

3601 (
APIENTRYP
 
	tPFNGLDELETEOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
);

3602 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLGETHANDLEARBPROC
Ë(
	tGLíum
 
	t≤ame
);

3603 (
APIENTRYP
 
	tPFNGLDETACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	t©èchedObj
);

3604 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADEROBJECTARBPROC
Ë(
	tGLíum
 
	tshadîTy≥
);

3605 (
APIENTRYP
 
	tPFNGLSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨ARB
 **
	t°rög
, c⁄° 
	tGLöt
 *
	tÀngth
);

3606 (
APIENTRYP
 
	tPFNGLCOMPILESHADERARBPROC
Ë(
	tGLh™dÀARB
 
	tshadîObj
);

3607 
GLh™dÀARB
 (
	tAPIENTRYP
 
	tPFNGLCREATEPROGRAMOBJECTARBPROC
) ();

3608 (
APIENTRYP
 
	tPFNGLATTACHOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, GLh™dÀARB 
	tobj
);

3609 (
APIENTRYP
 
	tPFNGLLINKPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

3610 (
APIENTRYP
 
	tPFNGLUSEPROGRAMOBJECTARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

3611 (
APIENTRYP
 
	tPFNGLVALIDATEPROGRAMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
);

3612 (
APIENTRYP
 
	tPFNGLUNIFORM1FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

3613 (
APIENTRYP
 
	tPFNGLUNIFORM2FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

3614 (
APIENTRYP
 
	tPFNGLUNIFORM3FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

3615 (
APIENTRYP
 
	tPFNGLUNIFORM4FARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

3616 (
APIENTRYP
 
	tPFNGLUNIFORM1IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

3617 (
APIENTRYP
 
	tPFNGLUNIFORM2IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

3618 (
APIENTRYP
 
	tPFNGLUNIFORM3IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

3619 (
APIENTRYP
 
	tPFNGLUNIFORM4IARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

3620 (
APIENTRYP
 
	tPFNGLUNIFORM1FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3621 (
APIENTRYP
 
	tPFNGLUNIFORM2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3622 (
APIENTRYP
 
	tPFNGLUNIFORM3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3623 (
APIENTRYP
 
	tPFNGLUNIFORM4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3624 (
APIENTRYP
 
	tPFNGLUNIFORM1IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3625 (
APIENTRYP
 
	tPFNGLUNIFORM2IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3626 (
APIENTRYP
 
	tPFNGLUNIFORM3IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3627 (
APIENTRYP
 
	tPFNGLUNIFORM4IVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

3628 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX2FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3629 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX3FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3630 (
APIENTRYP
 
	tPFNGLUNIFORMMATRIX4FVARBPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

3631 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERFVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

3632 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

3633 (
APIENTRYP
 
	tPFNGLGETINFOLOGARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	töfoLog
);

3634 (
APIENTRYP
 
	tPFNGLGETATTACHEDOBJECTSARBPROC
Ë(
	tGLh™dÀARB
 
	tc⁄èöîObj
, 
	tGLsizei
 
	tmaxCou¡
, GLsizeò*
	tcou¡
, GLh™dÀARB *
	tobj
);

3635 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

3636 (
APIENTRYP
 
	tPFNGLGETACTIVEUNIFORMARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

3637 (
APIENTRYP
 
	tPFNGLGETUNIFORMFVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 *
	t∑øms
);

3638 (
APIENTRYP
 
	tPFNGLGETUNIFORMIVARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLöt
 
	tloˇti⁄
, GLöà*
	t∑øms
);

3639 (
APIENTRYP
 
	tPFNGLGETSHADERSOURCEARBPROC
Ë(
	tGLh™dÀARB
 
	tobj
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLch¨ARB
 *
	tsour˚
);

3640 #ifde‡
GL_GLEXT_PROTOTYPES


3641 
GLAPI
 
APIENTRY
 
glDñëeObje˘ARB
 (
GLh™dÀARB
 
obj
);

3642 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glGëH™dÀARB
 (
GLíum
 
≤ame
);

3643 
GLAPI
 
APIENTRY
 
glDëachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
©èchedObj
);

3644 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eShadîObje˘ARB
 (
GLíum
 
shadîTy≥
);

3645 
GLAPI
 
APIENTRY
 
glShadîSour˚ARB
 (
GLh™dÀARB
 
shadîObj
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨ARB
 **
°rög
, c⁄° 
GLöt
 *
Àngth
);

3646 
GLAPI
 
APIENTRY
 
glCompûeShadîARB
 (
GLh™dÀARB
 
shadîObj
);

3647 
GLAPI
 
GLh™dÀARB
 
APIENTRY
 
glCª©eProgømObje˘ARB
 ();

3648 
GLAPI
 
APIENTRY
 
glAâachObje˘ARB
 (
GLh™dÀARB
 
c⁄èöîObj
, GLh™dÀARB 
obj
);

3649 
GLAPI
 
APIENTRY
 
glLökProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

3650 
GLAPI
 
APIENTRY
 
glU£ProgømObje˘ARB
 (
GLh™dÀARB
 
¥ogømObj
);

3651 
GLAPI
 
APIENTRY
 
glVÆid©eProgømARB
 (
GLh™dÀARB
 
¥ogømObj
);

3652 
GLAPI
 
APIENTRY
 
glUnif‹m1fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

3653 
GLAPI
 
APIENTRY
 
glUnif‹m2fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

3654 
GLAPI
 
APIENTRY
 
glUnif‹m3fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

3655 
GLAPI
 
APIENTRY
 
glUnif‹m4fARB
 (
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

3656 
GLAPI
 
APIENTRY
 
glUnif‹m1iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
);

3657 
GLAPI
 
APIENTRY
 
glUnif‹m2iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

3658 
GLAPI
 
APIENTRY
 
glUnif‹m3iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

3659 
GLAPI
 
APIENTRY
 
glUnif‹m4iARB
 (
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

3660 
GLAPI
 
APIENTRY
 
glUnif‹m1fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

3661 
GLAPI
 
APIENTRY
 
glUnif‹m2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

3662 
GLAPI
 
APIENTRY
 
glUnif‹m3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

3663 
GLAPI
 
APIENTRY
 
glUnif‹m4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

3664 
GLAPI
 
APIENTRY
 
glUnif‹m1ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

3665 
GLAPI
 
APIENTRY
 
glUnif‹m2ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

3666 
GLAPI
 
APIENTRY
 
glUnif‹m3ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

3667 
GLAPI
 
APIENTRY
 
glUnif‹m4ivARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

3668 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix2fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

3669 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix3fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

3670 
GLAPI
 
APIENTRY
 
glUnif‹mM©rix4fvARB
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

3671 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîfvARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

3672 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivARB
 (
GLh™dÀARB
 
obj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

3673 
GLAPI
 
APIENTRY
 
glGëInfoLogARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
öfoLog
);

3674 
GLAPI
 
APIENTRY
 
glGëAâachedObje˘sARB
 (
GLh™dÀARB
 
c⁄èöîObj
, 
GLsizei
 
maxCou¡
, GLsizeò*
cou¡
, GLh™dÀARB *
obj
);

3675 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

3676 
GLAPI
 
APIENTRY
 
glGëA˘iveUnif‹mARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

3677 
GLAPI
 
APIENTRY
 
glGëUnif‹mfvARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 *
∑øms
);

3678 
GLAPI
 
APIENTRY
 
glGëUnif‹mivARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLöt
 
loˇti⁄
, GLöà*
∑øms
);

3679 
GLAPI
 
APIENTRY
 
glGëShadîSour˚ARB
 (
GLh™dÀARB
 
obj
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLch¨ARB
 *
sour˚
);

3683 #i‚de‡
GL_ARB_shadî_¥ecisi⁄


3684 
	#GL_ARB_shadî_¥ecisi⁄
 1

	)

3687 #i‚de‡
GL_ARB_shadî_°ícû_exp‹t


3688 
	#GL_ARB_shadî_°ícû_exp‹t
 1

	)

3691 #i‚de‡
GL_ARB_shadî_°‹age_buf„r_obje˘


3692 
	#GL_ARB_shadî_°‹age_buf„r_obje˘
 1

	)

3695 #i‚de‡
GL_ARB_shadî_subroutöe


3696 
	#GL_ARB_shadî_subroutöe
 1

	)

3699 #i‚de‡
GL_ARB_shadî_ãxtuª_lod


3700 
	#GL_ARB_shadî_ãxtuª_lod
 1

	)

3703 #i‚de‡
GL_ARB_shadög_œnguage_100


3704 
	#GL_ARB_shadög_œnguage_100
 1

	)

3705 
	#GL_SHADING_LANGUAGE_VERSION_ARB
 0x8B8C

	)

3708 #i‚de‡
GL_ARB_shadög_œnguage_420∑ck


3709 
	#GL_ARB_shadög_œnguage_420∑ck
 1

	)

3712 #i‚de‡
GL_ARB_shadög_œnguage_ö˛ude


3713 
	#GL_ARB_shadög_œnguage_ö˛ude
 1

	)

3714 
	#GL_SHADER_INCLUDE_ARB
 0x8DAE

	)

3715 
	#GL_NAMED_STRING_LENGTH_ARB
 0x8DE9

	)

3716 
	#GL_NAMED_STRING_TYPE_ARB
 0x8DEA

	)

3717 (
APIENTRYP
 
	tPFNGLNAMEDSTRINGARBPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, GLöà
	t°rögÀn
, c⁄° GLch¨ *
	t°rög
);

3718 (
APIENTRYP
 
	tPFNGLDELETENAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

3719 (
APIENTRYP
 
	tPFNGLCOMPILESHADERINCLUDEARBPROC
Ë(
	tGLuöt
 
	tshadî
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	t∑th
, c⁄° 
	tGLöt
 *
	tÀngth
);

3720 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
);

3721 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLsizei
 
	tbufSize
, GLöà*
	t°rögÀn
, GLch¨ *
	t°rög
);

3722 (
APIENTRYP
 
	tPFNGLGETNAMEDSTRINGIVARBPROC
Ë(
	tGLöt
 
	t«mñí
, c⁄° 
	tGLch¨
 *
	t«me
, 
	tGLíum
 
	t≤ame
, GLöà*
	t∑øms
);

3723 #ifde‡
GL_GLEXT_PROTOTYPES


3724 
GLAPI
 
APIENTRY
 
glNamedSåögARB
 (
GLíum
 
ty≥
, 
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, GLöà
°rögÀn
, c⁄° GLch¨ *
°rög
);

3725 
GLAPI
 
APIENTRY
 
glDñëeNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

3726 
GLAPI
 
APIENTRY
 
glCompûeShadîIn˛udeARB
 (
GLuöt
 
shadî
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
∑th
, c⁄° 
GLöt
 *
Àngth
);

3727 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
);

3728 
GLAPI
 
APIENTRY
 
glGëNamedSåögARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLsizei
 
bufSize
, GLöà*
°rögÀn
, GLch¨ *
°rög
);

3729 
GLAPI
 
APIENTRY
 
glGëNamedSåögivARB
 (
GLöt
 
«mñí
, c⁄° 
GLch¨
 *
«me
, 
GLíum
 
≤ame
, GLöà*
∑øms
);

3733 #i‚de‡
GL_ARB_shadög_œnguage_∑ckög


3734 
	#GL_ARB_shadög_œnguage_∑ckög
 1

	)

3737 #i‚de‡
GL_ARB_shadow


3738 
	#GL_ARB_shadow
 1

	)

3739 
	#GL_TEXTURE_COMPARE_MODE_ARB
 0x884C

	)

3740 
	#GL_TEXTURE_COMPARE_FUNC_ARB
 0x884D

	)

3741 
	#GL_COMPARE_R_TO_TEXTURE_ARB
 0x884E

	)

3744 #i‚de‡
GL_ARB_shadow_ambõ¡


3745 
	#GL_ARB_shadow_ambõ¡
 1

	)

3746 
	#GL_TEXTURE_COMPARE_FAIL_VALUE_ARB
 0x80BF

	)

3749 #i‚de‡
GL_ARB_•¨£_ãxtuª


3750 
	#GL_ARB_•¨£_ãxtuª
 1

	)

3751 
	#GL_TEXTURE_SPARSE_ARB
 0x91A6

	)

3752 
	#GL_VIRTUAL_PAGE_SIZE_INDEX_ARB
 0x91A7

	)

3753 
	#GL_MIN_SPARSE_LEVEL_ARB
 0x919B

	)

3754 
	#GL_NUM_VIRTUAL_PAGE_SIZES_ARB
 0x91A8

	)

3755 
	#GL_VIRTUAL_PAGE_SIZE_X_ARB
 0x9195

	)

3756 
	#GL_VIRTUAL_PAGE_SIZE_Y_ARB
 0x9196

	)

3757 
	#GL_VIRTUAL_PAGE_SIZE_Z_ARB
 0x9197

	)

3758 
	#GL_MAX_SPARSE_TEXTURE_SIZE_ARB
 0x9198

	)

3759 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB
 0x9199

	)

3760 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB
 0x919A

	)

3761 
	#GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB
 0x91A9

	)

3762 (
APIENTRYP
 
	tPFNGLTEXPAGECOMMITMENTARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tªsidít
);

3763 #ifde‡
GL_GLEXT_PROTOTYPES


3764 
GLAPI
 
APIENTRY
 
glTexPageCommômítARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
ªsidít
);

3768 #i‚de‡
GL_ARB_°ícû_ãxturög


3769 
	#GL_ARB_°ícû_ãxturög
 1

	)

3772 #i‚de‡
GL_ARB_sync


3773 
	#GL_ARB_sync
 1

	)

3776 #i‚de‡
GL_ARB_ãs£Œ©i⁄_shadî


3777 
	#GL_ARB_ãs£Œ©i⁄_shadî
 1

	)

3780 #i‚de‡
GL_ARB_ãxtuª_b‹dî_˛amp


3781 
	#GL_ARB_ãxtuª_b‹dî_˛amp
 1

	)

3782 
	#GL_CLAMP_TO_BORDER_ARB
 0x812D

	)

3785 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘


3786 
	#GL_ARB_ãxtuª_buf„r_obje˘
 1

	)

3787 
	#GL_TEXTURE_BUFFER_ARB
 0x8C2A

	)

3788 
	#GL_MAX_TEXTURE_BUFFER_SIZE_ARB
 0x8C2B

	)

3789 
	#GL_TEXTURE_BINDING_BUFFER_ARB
 0x8C2C

	)

3790 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB
 0x8C2D

	)

3791 
	#GL_TEXTURE_BUFFER_FORMAT_ARB
 0x8C2E

	)

3792 (
APIENTRYP
 
	tPFNGLTEXBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

3793 #ifde‡
GL_GLEXT_PROTOTYPES


3794 
GLAPI
 
APIENTRY
 
glTexBuf„rARB
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

3798 #i‚de‡
GL_ARB_ãxtuª_buf„r_obje˘_rgb32


3799 
	#GL_ARB_ãxtuª_buf„r_obje˘_rgb32
 1

	)

3802 #i‚de‡
GL_ARB_ãxtuª_buf„r_ønge


3803 
	#GL_ARB_ãxtuª_buf„r_ønge
 1

	)

3806 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄


3807 
	#GL_ARB_ãxtuª_com¥essi⁄
 1

	)

3808 
	#GL_COMPRESSED_ALPHA_ARB
 0x84E9

	)

3809 
	#GL_COMPRESSED_LUMINANCE_ARB
 0x84EA

	)

3810 
	#GL_COMPRESSED_LUMINANCE_ALPHA_ARB
 0x84EB

	)

3811 
	#GL_COMPRESSED_INTENSITY_ARB
 0x84EC

	)

3812 
	#GL_COMPRESSED_RGB_ARB
 0x84ED

	)

3813 
	#GL_COMPRESSED_RGBA_ARB
 0x84EE

	)

3814 
	#GL_TEXTURE_COMPRESSION_HINT_ARB
 0x84EF

	)

3815 
	#GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB
 0x86A0

	)

3816 
	#GL_TEXTURE_COMPRESSED_ARB
 0x86A1

	)

3817 
	#GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A2

	)

3818 
	#GL_COMPRESSED_TEXTURE_FORMATS_ARB
 0x86A3

	)

3819 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

3820 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

3821 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

3822 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

3823 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

3824 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	td©a
);

3825 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXIMAGEARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, *
	timg
);

3826 #ifde‡
GL_GLEXT_PROTOTYPES


3827 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

3828 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

3829 
GLAPI
 
APIENTRY
 
glCom¥es£dTexImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
d©a
);

3830 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage3DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

3831 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage2DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

3832 
GLAPI
 
APIENTRY
 
glCom¥es£dTexSubImage1DARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
d©a
);

3833 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTexImageARB
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, *
img
);

3837 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_b±c


3838 
	#GL_ARB_ãxtuª_com¥essi⁄_b±c
 1

	)

3839 
	#GL_COMPRESSED_RGBA_BPTC_UNORM_ARB
 0x8E8C

	)

3840 
	#GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB
 0x8E8D

	)

3841 
	#GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB
 0x8E8E

	)

3842 
	#GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB
 0x8E8F

	)

3845 #i‚de‡
GL_ARB_ãxtuª_com¥essi⁄_rgtc


3846 
	#GL_ARB_ãxtuª_com¥essi⁄_rgtc
 1

	)

3849 #i‚de‡
GL_ARB_ãxtuª_cube_m≠


3850 
	#GL_ARB_ãxtuª_cube_m≠
 1

	)

3851 
	#GL_NORMAL_MAP_ARB
 0x8511

	)

3852 
	#GL_REFLECTION_MAP_ARB
 0x8512

	)

3853 
	#GL_TEXTURE_CUBE_MAP_ARB
 0x8513

	)

3854 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARB
 0x8514

	)

3855 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB
 0x8515

	)

3856 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB
 0x8516

	)

3857 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB
 0x8517

	)

3858 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB
 0x8518

	)

3859 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB
 0x8519

	)

3860 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB
 0x851A

	)

3861 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARB
 0x851B

	)

3862 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB
 0x851C

	)

3865 #i‚de‡
GL_ARB_ãxtuª_cube_m≠_¨øy


3866 
	#GL_ARB_ãxtuª_cube_m≠_¨øy
 1

	)

3867 
	#GL_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x9009

	)

3868 
	#GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB
 0x900A

	)

3869 
	#GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB
 0x900B

	)

3870 
	#GL_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900C

	)

3871 
	#GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB
 0x900D

	)

3872 
	#GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900E

	)

3873 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB
 0x900F

	)

3876 #i‚de‡
GL_ARB_ãxtuª_ív_add


3877 
	#GL_ARB_ãxtuª_ív_add
 1

	)

3880 #i‚de‡
GL_ARB_ãxtuª_ív_comböe


3881 
	#GL_ARB_ãxtuª_ív_comböe
 1

	)

3882 
	#GL_COMBINE_ARB
 0x8570

	)

3883 
	#GL_COMBINE_RGB_ARB
 0x8571

	)

3884 
	#GL_COMBINE_ALPHA_ARB
 0x8572

	)

3885 
	#GL_SOURCE0_RGB_ARB
 0x8580

	)

3886 
	#GL_SOURCE1_RGB_ARB
 0x8581

	)

3887 
	#GL_SOURCE2_RGB_ARB
 0x8582

	)

3888 
	#GL_SOURCE0_ALPHA_ARB
 0x8588

	)

3889 
	#GL_SOURCE1_ALPHA_ARB
 0x8589

	)

3890 
	#GL_SOURCE2_ALPHA_ARB
 0x858A

	)

3891 
	#GL_OPERAND0_RGB_ARB
 0x8590

	)

3892 
	#GL_OPERAND1_RGB_ARB
 0x8591

	)

3893 
	#GL_OPERAND2_RGB_ARB
 0x8592

	)

3894 
	#GL_OPERAND0_ALPHA_ARB
 0x8598

	)

3895 
	#GL_OPERAND1_ALPHA_ARB
 0x8599

	)

3896 
	#GL_OPERAND2_ALPHA_ARB
 0x859A

	)

3897 
	#GL_RGB_SCALE_ARB
 0x8573

	)

3898 
	#GL_ADD_SIGNED_ARB
 0x8574

	)

3899 
	#GL_INTERPOLATE_ARB
 0x8575

	)

3900 
	#GL_SUBTRACT_ARB
 0x84E7

	)

3901 
	#GL_CONSTANT_ARB
 0x8576

	)

3902 
	#GL_PRIMARY_COLOR_ARB
 0x8577

	)

3903 
	#GL_PREVIOUS_ARB
 0x8578

	)

3906 #i‚de‡
GL_ARB_ãxtuª_ív_¸ossb¨


3907 
	#GL_ARB_ãxtuª_ív_¸ossb¨
 1

	)

3910 #i‚de‡
GL_ARB_ãxtuª_ív_dŸ3


3911 
	#GL_ARB_ãxtuª_ív_dŸ3
 1

	)

3912 
	#GL_DOT3_RGB_ARB
 0x86AE

	)

3913 
	#GL_DOT3_RGBA_ARB
 0x86AF

	)

3916 #i‚de‡
GL_ARB_ãxtuª_Êﬂt


3917 
	#GL_ARB_ãxtuª_Êﬂt
 1

	)

3918 
	#GL_TEXTURE_RED_TYPE_ARB
 0x8C10

	)

3919 
	#GL_TEXTURE_GREEN_TYPE_ARB
 0x8C11

	)

3920 
	#GL_TEXTURE_BLUE_TYPE_ARB
 0x8C12

	)

3921 
	#GL_TEXTURE_ALPHA_TYPE_ARB
 0x8C13

	)

3922 
	#GL_TEXTURE_LUMINANCE_TYPE_ARB
 0x8C14

	)

3923 
	#GL_TEXTURE_INTENSITY_TYPE_ARB
 0x8C15

	)

3924 
	#GL_TEXTURE_DEPTH_TYPE_ARB
 0x8C16

	)

3925 
	#GL_UNSIGNED_NORMALIZED_ARB
 0x8C17

	)

3926 
	#GL_RGBA32F_ARB
 0x8814

	)

3927 
	#GL_RGB32F_ARB
 0x8815

	)

3928 
	#GL_ALPHA32F_ARB
 0x8816

	)

3929 
	#GL_INTENSITY32F_ARB
 0x8817

	)

3930 
	#GL_LUMINANCE32F_ARB
 0x8818

	)

3931 
	#GL_LUMINANCE_ALPHA32F_ARB
 0x8819

	)

3932 
	#GL_RGBA16F_ARB
 0x881A

	)

3933 
	#GL_RGB16F_ARB
 0x881B

	)

3934 
	#GL_ALPHA16F_ARB
 0x881C

	)

3935 
	#GL_INTENSITY16F_ARB
 0x881D

	)

3936 
	#GL_LUMINANCE16F_ARB
 0x881E

	)

3937 
	#GL_LUMINANCE_ALPHA16F_ARB
 0x881F

	)

3940 #i‚de‡
GL_ARB_ãxtuª_g©hî


3941 
	#GL_ARB_ãxtuª_g©hî
 1

	)

3942 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5E

	)

3943 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB
 0x8E5F

	)

3944 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB
 0x8F9F

	)

3947 #i‚de‡
GL_ARB_ãxtuª_múr‹_˛amp_to_edge


3948 
	#GL_ARB_ãxtuª_múr‹_˛amp_to_edge
 1

	)

3951 #i‚de‡
GL_ARB_ãxtuª_múr‹ed_ª≥©


3952 
	#GL_ARB_ãxtuª_múr‹ed_ª≥©
 1

	)

3953 
	#GL_MIRRORED_REPEAT_ARB
 0x8370

	)

3956 #i‚de‡
GL_ARB_ãxtuª_mu…ißm∂e


3957 
	#GL_ARB_ãxtuª_mu…ißm∂e
 1

	)

3960 #i‚de‡
GL_ARB_ãxtuª_n⁄_powî_of_two


3961 
	#GL_ARB_ãxtuª_n⁄_powî_of_two
 1

	)

3964 #i‚de‡
GL_ARB_ãxtuª_quîy_Àvñs


3965 
	#GL_ARB_ãxtuª_quîy_Àvñs
 1

	)

3968 #i‚de‡
GL_ARB_ãxtuª_quîy_lod


3969 
	#GL_ARB_ãxtuª_quîy_lod
 1

	)

3972 #i‚de‡
GL_ARB_ãxtuª_ª˘™gÀ


3973 
	#GL_ARB_ãxtuª_ª˘™gÀ
 1

	)

3974 
	#GL_TEXTURE_RECTANGLE_ARB
 0x84F5

	)

3975 
	#GL_TEXTURE_BINDING_RECTANGLE_ARB
 0x84F6

	)

3976 
	#GL_PROXY_TEXTURE_RECTANGLE_ARB
 0x84F7

	)

3977 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB
 0x84F8

	)

3980 #i‚de‡
GL_ARB_ãxtuª_rg


3981 
	#GL_ARB_ãxtuª_rg
 1

	)

3984 #i‚de‡
GL_ARB_ãxtuª_rgb10_a2ui


3985 
	#GL_ARB_ãxtuª_rgb10_a2ui
 1

	)

3988 #i‚de‡
GL_ARB_ãxtuª_°ícû8


3989 
	#GL_ARB_ãxtuª_°ícû8
 1

	)

3992 #i‚de‡
GL_ARB_ãxtuª_°‹age


3993 
	#GL_ARB_ãxtuª_°‹age
 1

	)

3996 #i‚de‡
GL_ARB_ãxtuª_°‹age_mu…ißm∂e


3997 
	#GL_ARB_ãxtuª_°‹age_mu…ißm∂e
 1

	)

4000 #i‚de‡
GL_ARB_ãxtuª_swizzÀ


4001 
	#GL_ARB_ãxtuª_swizzÀ
 1

	)

4004 #i‚de‡
GL_ARB_ãxtuª_võw


4005 
	#GL_ARB_ãxtuª_võw
 1

	)

4008 #i‚de‡
GL_ARB_timî_quîy


4009 
	#GL_ARB_timî_quîy
 1

	)

4012 #i‚de‡
GL_ARB_å™sf‹m_„edback2


4013 
	#GL_ARB_å™sf‹m_„edback2
 1

	)

4014 
	#GL_TRANSFORM_FEEDBACK_PAUSED
 0x8E23

	)

4015 
	#GL_TRANSFORM_FEEDBACK_ACTIVE
 0x8E24

	)

4018 #i‚de‡
GL_ARB_å™sf‹m_„edback3


4019 
	#GL_ARB_å™sf‹m_„edback3
 1

	)

4022 #i‚de‡
GL_ARB_å™sf‹m_„edback_ö°™˚d


4023 
	#GL_ARB_å™sf‹m_„edback_ö°™˚d
 1

	)

4026 #i‚de‡
GL_ARB_å™•o£_m©rix


4027 
	#GL_ARB_å™•o£_m©rix
 1

	)

4028 
	#GL_TRANSPOSE_MODELVIEW_MATRIX_ARB
 0x84E3

	)

4029 
	#GL_TRANSPOSE_PROJECTION_MATRIX_ARB
 0x84E4

	)

4030 
	#GL_TRANSPOSE_TEXTURE_MATRIX_ARB
 0x84E5

	)

4031 
	#GL_TRANSPOSE_COLOR_MATRIX_ARB
 0x84E6

	)

4032 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4033 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4034 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXFARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tm
);

4035 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXDARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tm
);

4036 #ifde‡
GL_GLEXT_PROTOTYPES


4037 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

4038 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

4039 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixfARB
 (c⁄° 
GLÊﬂt
 *
m
);

4040 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixdARB
 (c⁄° 
GLdoubÀ
 *
m
);

4044 #i‚de‡
GL_ARB_unif‹m_buf„r_obje˘


4045 
	#GL_ARB_unif‹m_buf„r_obje˘
 1

	)

4046 
	#GL_MAX_GEOMETRY_UNIFORM_BLOCKS
 0x8A2C

	)

4047 
	#GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS
 0x8A32

	)

4048 
	#GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER
 0x8A45

	)

4051 #i‚de‡
GL_ARB_vîãx_¨øy_bgø


4052 
	#GL_ARB_vîãx_¨øy_bgø
 1

	)

4055 #i‚de‡
GL_ARB_vîãx_¨øy_obje˘


4056 
	#GL_ARB_vîãx_¨øy_obje˘
 1

	)

4059 #i‚de‡
GL_ARB_vîãx_©åib_64bô


4060 
	#GL_ARB_vîãx_©åib_64bô
 1

	)

4063 #i‚de‡
GL_ARB_vîãx_©åib_bödög


4064 
	#GL_ARB_vîãx_©åib_bödög
 1

	)

4067 #i‚de‡
GL_ARB_vîãx_bÀnd


4068 
	#GL_ARB_vîãx_bÀnd
 1

	)

4069 
	#GL_MAX_VERTEX_UNITS_ARB
 0x86A4

	)

4070 
	#GL_ACTIVE_VERTEX_UNITS_ARB
 0x86A5

	)

4071 
	#GL_WEIGHT_SUM_UNITY_ARB
 0x86A6

	)

4072 
	#GL_VERTEX_BLEND_ARB
 0x86A7

	)

4073 
	#GL_CURRENT_WEIGHT_ARB
 0x86A8

	)

4074 
	#GL_WEIGHT_ARRAY_TYPE_ARB
 0x86A9

	)

4075 
	#GL_WEIGHT_ARRAY_STRIDE_ARB
 0x86AA

	)

4076 
	#GL_WEIGHT_ARRAY_SIZE_ARB
 0x86AB

	)

4077 
	#GL_WEIGHT_ARRAY_POINTER_ARB
 0x86AC

	)

4078 
	#GL_WEIGHT_ARRAY_ARB
 0x86AD

	)

4079 
	#GL_MODELVIEW0_ARB
 0x1700

	)

4080 
	#GL_MODELVIEW1_ARB
 0x850A

	)

4081 
	#GL_MODELVIEW2_ARB
 0x8722

	)

4082 
	#GL_MODELVIEW3_ARB
 0x8723

	)

4083 
	#GL_MODELVIEW4_ARB
 0x8724

	)

4084 
	#GL_MODELVIEW5_ARB
 0x8725

	)

4085 
	#GL_MODELVIEW6_ARB
 0x8726

	)

4086 
	#GL_MODELVIEW7_ARB
 0x8727

	)

4087 
	#GL_MODELVIEW8_ARB
 0x8728

	)

4088 
	#GL_MODELVIEW9_ARB
 0x8729

	)

4089 
	#GL_MODELVIEW10_ARB
 0x872A

	)

4090 
	#GL_MODELVIEW11_ARB
 0x872B

	)

4091 
	#GL_MODELVIEW12_ARB
 0x872C

	)

4092 
	#GL_MODELVIEW13_ARB
 0x872D

	)

4093 
	#GL_MODELVIEW14_ARB
 0x872E

	)

4094 
	#GL_MODELVIEW15_ARB
 0x872F

	)

4095 
	#GL_MODELVIEW16_ARB
 0x8730

	)

4096 
	#GL_MODELVIEW17_ARB
 0x8731

	)

4097 
	#GL_MODELVIEW18_ARB
 0x8732

	)

4098 
	#GL_MODELVIEW19_ARB
 0x8733

	)

4099 
	#GL_MODELVIEW20_ARB
 0x8734

	)

4100 
	#GL_MODELVIEW21_ARB
 0x8735

	)

4101 
	#GL_MODELVIEW22_ARB
 0x8736

	)

4102 
	#GL_MODELVIEW23_ARB
 0x8737

	)

4103 
	#GL_MODELVIEW24_ARB
 0x8738

	)

4104 
	#GL_MODELVIEW25_ARB
 0x8739

	)

4105 
	#GL_MODELVIEW26_ARB
 0x873A

	)

4106 
	#GL_MODELVIEW27_ARB
 0x873B

	)

4107 
	#GL_MODELVIEW28_ARB
 0x873C

	)

4108 
	#GL_MODELVIEW29_ARB
 0x873D

	)

4109 
	#GL_MODELVIEW30_ARB
 0x873E

	)

4110 
	#GL_MODELVIEW31_ARB
 0x873F

	)

4111 (
APIENTRYP
 
	tPFNGLWEIGHTBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLbyã
 *
	tweights
);

4112 (
APIENTRYP
 
	tPFNGLWEIGHTSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLsh‹t
 *
	tweights
);

4113 (
APIENTRYP
 
	tPFNGLWEIGHTIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° GLöà*
	tweights
);

4114 (
APIENTRYP
 
	tPFNGLWEIGHTFVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

4115 (
APIENTRYP
 
	tPFNGLWEIGHTDVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLdoubÀ
 *
	tweights
);

4116 (
APIENTRYP
 
	tPFNGLWEIGHTUBVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLubyã
 *
	tweights
);

4117 (
APIENTRYP
 
	tPFNGLWEIGHTUSVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLush‹t
 *
	tweights
);

4118 (
APIENTRYP
 
	tPFNGLWEIGHTUIVARBPROC
Ë(
	tGLöt
 
	tsize
, c⁄° 
	tGLuöt
 *
	tweights
);

4119 (
APIENTRYP
 
	tPFNGLWEIGHTPOINTERARBPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

4120 (
APIENTRYP
 
	tPFNGLVERTEXBLENDARBPROC
Ë(
	tGLöt
 
	tcou¡
);

4121 #ifde‡
GL_GLEXT_PROTOTYPES


4122 
GLAPI
 
APIENTRY
 
glWeightbvARB
 (
GLöt
 
size
, c⁄° 
GLbyã
 *
weights
);

4123 
GLAPI
 
APIENTRY
 
glWeightsvARB
 (
GLöt
 
size
, c⁄° 
GLsh‹t
 *
weights
);

4124 
GLAPI
 
APIENTRY
 
glWeightivARB
 (
GLöt
 
size
, c⁄° GLöà*
weights
);

4125 
GLAPI
 
APIENTRY
 
glWeightfvARB
 (
GLöt
 
size
, c⁄° 
GLÊﬂt
 *
weights
);

4126 
GLAPI
 
APIENTRY
 
glWeightdvARB
 (
GLöt
 
size
, c⁄° 
GLdoubÀ
 *
weights
);

4127 
GLAPI
 
APIENTRY
 
glWeightubvARB
 (
GLöt
 
size
, c⁄° 
GLubyã
 *
weights
);

4128 
GLAPI
 
APIENTRY
 
glWeightusvARB
 (
GLöt
 
size
, c⁄° 
GLush‹t
 *
weights
);

4129 
GLAPI
 
APIENTRY
 
glWeightuivARB
 (
GLöt
 
size
, c⁄° 
GLuöt
 *
weights
);

4130 
GLAPI
 
APIENTRY
 
glWeightPoöãrARB
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

4131 
GLAPI
 
APIENTRY
 
glVîãxBÀndARB
 (
GLöt
 
cou¡
);

4135 #i‚de‡
GL_ARB_vîãx_buf„r_obje˘


4136 
	#GL_ARB_vîãx_buf„r_obje˘
 1

	)

4137 
±rdiff_t
 
	tGLsizeùåARB
;

4138 
±rdiff_t
 
	tGLöçåARB
;

4139 
	#GL_BUFFER_SIZE_ARB
 0x8764

	)

4140 
	#GL_BUFFER_USAGE_ARB
 0x8765

	)

4141 
	#GL_ARRAY_BUFFER_ARB
 0x8892

	)

4142 
	#GL_ELEMENT_ARRAY_BUFFER_ARB
 0x8893

	)

4143 
	#GL_ARRAY_BUFFER_BINDING_ARB
 0x8894

	)

4144 
	#GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB
 0x8895

	)

4145 
	#GL_VERTEX_ARRAY_BUFFER_BINDING_ARB
 0x8896

	)

4146 
	#GL_NORMAL_ARRAY_BUFFER_BINDING_ARB
 0x8897

	)

4147 
	#GL_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x8898

	)

4148 
	#GL_INDEX_ARRAY_BUFFER_BINDING_ARB
 0x8899

	)

4149 
	#GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB
 0x889A

	)

4150 
	#GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB
 0x889B

	)

4151 
	#GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB
 0x889C

	)

4152 
	#GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB
 0x889D

	)

4153 
	#GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB
 0x889E

	)

4154 
	#GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB
 0x889F

	)

4155 
	#GL_READ_ONLY_ARB
 0x88B8

	)

4156 
	#GL_WRITE_ONLY_ARB
 0x88B9

	)

4157 
	#GL_READ_WRITE_ARB
 0x88BA

	)

4158 
	#GL_BUFFER_ACCESS_ARB
 0x88BB

	)

4159 
	#GL_BUFFER_MAPPED_ARB
 0x88BC

	)

4160 
	#GL_BUFFER_MAP_POINTER_ARB
 0x88BD

	)

4161 
	#GL_STREAM_DRAW_ARB
 0x88E0

	)

4162 
	#GL_STREAM_READ_ARB
 0x88E1

	)

4163 
	#GL_STREAM_COPY_ARB
 0x88E2

	)

4164 
	#GL_STATIC_DRAW_ARB
 0x88E4

	)

4165 
	#GL_STATIC_READ_ARB
 0x88E5

	)

4166 
	#GL_STATIC_COPY_ARB
 0x88E6

	)

4167 
	#GL_DYNAMIC_DRAW_ARB
 0x88E8

	)

4168 
	#GL_DYNAMIC_READ_ARB
 0x88E9

	)

4169 
	#GL_DYNAMIC_COPY_ARB
 0x88EA

	)

4170 (
APIENTRYP
 
	tPFNGLBINDBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbuf„r
);

4171 (
APIENTRYP
 
	tPFNGLDELETEBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tbuf„rs
);

4172 (
APIENTRYP
 
	tPFNGLGENBUFFERSARBPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tbuf„rs
);

4173 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERARBPROC
Ë(
	tGLuöt
 
	tbuf„r
);

4174 (
APIENTRYP
 
	tPFNGLBUFFERDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizeùåARB
 
	tsize
, c⁄° *
	td©a
, GLíum 
	tußge
);

4175 (
APIENTRYP
 
	tPFNGLBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, c⁄° *
	td©a
);

4176 (
APIENTRYP
 
	tPFNGLGETBUFFERSUBDATAARBPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçåARB
 
	toff£t
, 
	tGLsizeùåARB
 
	tsize
, *
	td©a
);

4177 *(
	tAPIENTRYP
 
	tPFNGLMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

4178 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPBUFFERARBPROC
Ë(
	tGLíum
 
	tèrgë
);

4179 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERIVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4180 (
APIENTRYP
 
	tPFNGLGETBUFFERPOINTERVARBPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

4181 #ifde‡
GL_GLEXT_PROTOTYPES


4182 
GLAPI
 
APIENTRY
 
glBödBuf„rARB
 (
GLíum
 
èrgë
, 
GLuöt
 
buf„r
);

4183 
GLAPI
 
APIENTRY
 
glDñëeBuf„rsARB
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
buf„rs
);

4184 
GLAPI
 
APIENTRY
 
glGíBuf„rsARB
 (
GLsizei
 
n
, 
GLuöt
 *
buf„rs
);

4185 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rARB
 (
GLuöt
 
buf„r
);

4186 
GLAPI
 
APIENTRY
 
glBuf„rD©aARB
 (
GLíum
 
èrgë
, 
GLsizeùåARB
 
size
, c⁄° *
d©a
, GLíum 
ußge
);

4187 
GLAPI
 
APIENTRY
 
glBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, c⁄° *
d©a
);

4188 
GLAPI
 
APIENTRY
 
glGëBuf„rSubD©aARB
 (
GLíum
 
èrgë
, 
GLöçåARB
 
off£t
, 
GLsizeùåARB
 
size
, *
d©a
);

4189 
GLAPI
 *
APIENTRY
 
glM≠Buf„rARB
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

4190 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠Buf„rARB
 (
GLíum
 
èrgë
);

4191 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîivARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

4192 
GLAPI
 
APIENTRY
 
glGëBuf„rPoöãrvARB
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

4196 #i‚de‡
GL_ARB_vîãx_¥ogøm


4197 
	#GL_ARB_vîãx_¥ogøm
 1

	)

4198 
	#GL_COLOR_SUM_ARB
 0x8458

	)

4199 
	#GL_VERTEX_PROGRAM_ARB
 0x8620

	)

4200 
	#GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB
 0x8622

	)

4201 
	#GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB
 0x8623

	)

4202 
	#GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB
 0x8624

	)

4203 
	#GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB
 0x8625

	)

4204 
	#GL_CURRENT_VERTEX_ATTRIB_ARB
 0x8626

	)

4205 
	#GL_VERTEX_PROGRAM_POINT_SIZE_ARB
 0x8642

	)

4206 
	#GL_VERTEX_PROGRAM_TWO_SIDE_ARB
 0x8643

	)

4207 
	#GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB
 0x8645

	)

4208 
	#GL_MAX_VERTEX_ATTRIBS_ARB
 0x8869

	)

4209 
	#GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB
 0x886A

	)

4210 
	#GL_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B0

	)

4211 
	#GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB
 0x88B1

	)

4212 
	#GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B2

	)

4213 
	#GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB
 0x88B3

	)

4214 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

4215 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4216 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

4217 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4218 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

4219 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4220 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4221 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4222 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4223 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4224 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4225 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4226 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4227 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4228 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4229 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4230 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4231 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4232 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4233 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4234 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4235 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

4236 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4237 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4238 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4NUSVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4239 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4BVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

4240 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

4241 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

4242 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

4243 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

4244 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4IVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

4245 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

4246 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

4247 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

4248 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UIVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

4249 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4USVARBPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

4250 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

4251 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4252 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBARRAYARBPROC
Ë(
	tGLuöt
 
	tödex
);

4253 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

4254 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

4255 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

4256 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVARBPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

4257 #ifde‡
GL_GLEXT_PROTOTYPES


4258 
GLAPI
 
APIENTRY
 
glVîãxAârib1dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

4259 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4260 
GLAPI
 
APIENTRY
 
glVîãxAârib1fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

4261 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4262 
GLAPI
 
APIENTRY
 
glVîãxAârib1sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

4263 
GLAPI
 
APIENTRY
 
glVîãxAârib1svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4264 
GLAPI
 
APIENTRY
 
glVîãxAârib2dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

4265 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4266 
GLAPI
 
APIENTRY
 
glVîãxAârib2fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

4267 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4268 
GLAPI
 
APIENTRY
 
glVîãxAârib2sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

4269 
GLAPI
 
APIENTRY
 
glVîãxAârib2svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4270 
GLAPI
 
APIENTRY
 
glVîãxAârib3dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

4271 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4272 
GLAPI
 
APIENTRY
 
glVîãxAârib3fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

4273 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4274 
GLAPI
 
APIENTRY
 
glVîãxAârib3sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

4275 
GLAPI
 
APIENTRY
 
glVîãxAârib3svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4276 
GLAPI
 
APIENTRY
 
glVîãxAârib4NbvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

4277 
GLAPI
 
APIENTRY
 
glVîãxAârib4NivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

4278 
GLAPI
 
APIENTRY
 
glVîãxAârib4NsvARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4279 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubARB
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

4280 
GLAPI
 
APIENTRY
 
glVîãxAârib4NubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

4281 
GLAPI
 
APIENTRY
 
glVîãxAârib4NuivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

4282 
GLAPI
 
APIENTRY
 
glVîãxAârib4NusvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

4283 
GLAPI
 
APIENTRY
 
glVîãxAârib4bvARB
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

4284 
GLAPI
 
APIENTRY
 
glVîãxAârib4dARB
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

4285 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvARB
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

4286 
GLAPI
 
APIENTRY
 
glVîãxAârib4fARB
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

4287 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvARB
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

4288 
GLAPI
 
APIENTRY
 
glVîãxAârib4ivARB
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

4289 
GLAPI
 
APIENTRY
 
glVîãxAârib4sARB
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

4290 
GLAPI
 
APIENTRY
 
glVîãxAârib4svARB
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

4291 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvARB
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

4292 
GLAPI
 
APIENTRY
 
glVîãxAârib4uivARB
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

4293 
GLAPI
 
APIENTRY
 
glVîãxAârib4usvARB
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

4294 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrARB
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

4295 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

4296 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAºayARB
 (
GLuöt
 
ödex
);

4297 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

4298 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

4299 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

4300 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvARB
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

4304 #i‚de‡
GL_ARB_vîãx_shadî


4305 
	#GL_ARB_vîãx_shadî
 1

	)

4306 
	#GL_VERTEX_SHADER_ARB
 0x8B31

	)

4307 
	#GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB
 0x8B4A

	)

4308 
	#GL_MAX_VARYING_FLOATS_ARB
 0x8B4B

	)

4309 
	#GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB
 0x8B4C

	)

4310 
	#GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB
 0x8B4D

	)

4311 
	#GL_OBJECT_ACTIVE_ATTRIBUTES_ARB
 0x8B89

	)

4312 
	#GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB
 0x8B8A

	)

4313 (
APIENTRYP
 
	tPFNGLBINDATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4314 (
APIENTRYP
 
	tPFNGLGETACTIVEATTRIBARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tmaxLígth
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨ARB
 *
	t«me
);

4315 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETATTRIBLOCATIONARBPROC
Ë(
	tGLh™dÀARB
 
	t¥ogømObj
, c⁄° 
	tGLch¨ARB
 *
	t«me
);

4316 #ifde‡
GL_GLEXT_PROTOTYPES


4317 
GLAPI
 
APIENTRY
 
glBödAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, c⁄° 
GLch¨ARB
 *
«me
);

4318 
GLAPI
 
APIENTRY
 
glGëA˘iveAâribARB
 (
GLh™dÀARB
 
¥ogømObj
, 
GLuöt
 
ödex
, 
GLsizei
 
maxLígth
, GLsizeò*
Àngth
, 
GLöt
 *
size
, 
GLíum
 *
ty≥
, 
GLch¨ARB
 *
«me
);

4319 
GLAPI
 
GLöt
 
APIENTRY
 
glGëAâribLoˇti⁄ARB
 (
GLh™dÀARB
 
¥ogømObj
, c⁄° 
GLch¨ARB
 *
«me
);

4323 #i‚de‡
GL_ARB_vîãx_ty≥_10f_11f_11f_ªv


4324 
	#GL_ARB_vîãx_ty≥_10f_11f_11f_ªv
 1

	)

4327 #i‚de‡
GL_ARB_vîãx_ty≥_2_10_10_10_ªv


4328 
	#GL_ARB_vîãx_ty≥_2_10_10_10_ªv
 1

	)

4331 #i‚de‡
GL_ARB_võwp‹t_¨øy


4332 
	#GL_ARB_võwp‹t_¨øy
 1

	)

4335 #i‚de‡
GL_ARB_wödow_pos


4336 
	#GL_ARB_wödow_pos
 1

	)

4337 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

4338 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4339 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

4340 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4341 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

4342 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4343 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

4344 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4345 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DARBPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

4346 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVARBPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

4347 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FARBPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

4348 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVARBPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

4349 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IARBPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

4350 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVARBPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

4351 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SARBPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

4352 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVARBPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

4353 #ifde‡
GL_GLEXT_PROTOTYPES


4354 
GLAPI
 
APIENTRY
 
glWödowPos2dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

4355 
GLAPI
 
APIENTRY
 
glWödowPos2dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

4356 
GLAPI
 
APIENTRY
 
glWödowPos2fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

4357 
GLAPI
 
APIENTRY
 
glWödowPos2fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

4358 
GLAPI
 
APIENTRY
 
glWödowPos2iARB
 (
GLöt
 
x
, GLöà
y
);

4359 
GLAPI
 
APIENTRY
 
glWödowPos2ivARB
 (c⁄° 
GLöt
 *
v
);

4360 
GLAPI
 
APIENTRY
 
glWödowPos2sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
);

4361 
GLAPI
 
APIENTRY
 
glWödowPos2svARB
 (c⁄° 
GLsh‹t
 *
v
);

4362 
GLAPI
 
APIENTRY
 
glWödowPos3dARB
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

4363 
GLAPI
 
APIENTRY
 
glWödowPos3dvARB
 (c⁄° 
GLdoubÀ
 *
v
);

4364 
GLAPI
 
APIENTRY
 
glWödowPos3fARB
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

4365 
GLAPI
 
APIENTRY
 
glWödowPos3fvARB
 (c⁄° 
GLÊﬂt
 *
v
);

4366 
GLAPI
 
APIENTRY
 
glWödowPos3iARB
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

4367 
GLAPI
 
APIENTRY
 
glWödowPos3ivARB
 (c⁄° 
GLöt
 *
v
);

4368 
GLAPI
 
APIENTRY
 
glWödowPos3sARB
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

4369 
GLAPI
 
APIENTRY
 
glWödowPos3svARB
 (c⁄° 
GLsh‹t
 *
v
);

4373 #i‚de‡
GL_KHR_debug


4374 
	#GL_KHR_debug
 1

	)

4377 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr


4378 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_hdr
 1

	)

4379 
	#GL_COMPRESSED_RGBA_ASTC_4x4_KHR
 0x93B0

	)

4380 
	#GL_COMPRESSED_RGBA_ASTC_5x4_KHR
 0x93B1

	)

4381 
	#GL_COMPRESSED_RGBA_ASTC_5x5_KHR
 0x93B2

	)

4382 
	#GL_COMPRESSED_RGBA_ASTC_6x5_KHR
 0x93B3

	)

4383 
	#GL_COMPRESSED_RGBA_ASTC_6x6_KHR
 0x93B4

	)

4384 
	#GL_COMPRESSED_RGBA_ASTC_8x5_KHR
 0x93B5

	)

4385 
	#GL_COMPRESSED_RGBA_ASTC_8x6_KHR
 0x93B6

	)

4386 
	#GL_COMPRESSED_RGBA_ASTC_8x8_KHR
 0x93B7

	)

4387 
	#GL_COMPRESSED_RGBA_ASTC_10x5_KHR
 0x93B8

	)

4388 
	#GL_COMPRESSED_RGBA_ASTC_10x6_KHR
 0x93B9

	)

4389 
	#GL_COMPRESSED_RGBA_ASTC_10x8_KHR
 0x93BA

	)

4390 
	#GL_COMPRESSED_RGBA_ASTC_10x10_KHR
 0x93BB

	)

4391 
	#GL_COMPRESSED_RGBA_ASTC_12x10_KHR
 0x93BC

	)

4392 
	#GL_COMPRESSED_RGBA_ASTC_12x12_KHR
 0x93BD

	)

4393 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR
 0x93D0

	)

4394 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR
 0x93D1

	)

4395 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR
 0x93D2

	)

4396 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR
 0x93D3

	)

4397 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR
 0x93D4

	)

4398 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR
 0x93D5

	)

4399 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR
 0x93D6

	)

4400 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR
 0x93D7

	)

4401 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR
 0x93D8

	)

4402 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR
 0x93D9

	)

4403 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR
 0x93DA

	)

4404 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR
 0x93DB

	)

4405 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR
 0x93DC

	)

4406 
	#GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR
 0x93DD

	)

4409 #i‚de‡
GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr


4410 
	#GL_KHR_ãxtuª_com¥essi⁄_a°c_ldr
 1

	)

4413 #i‚de‡
GL_OES_byã_co‹dö©es


4414 
	#GL_OES_byã_co‹dö©es
 1

	)

4415 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
);

4416 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4417 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
);

4418 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4419 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
);

4420 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4421 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4BOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
, GLbyã 
	tq
);

4422 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4BVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

4423 (
APIENTRYP
 
	tPFNGLTEXCOORD1BOESPROC
Ë(
	tGLbyã
 
	ts
);

4424 (
APIENTRYP
 
	tPFNGLTEXCOORD1BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4425 (
APIENTRYP
 
	tPFNGLTEXCOORD2BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
);

4426 (
APIENTRYP
 
	tPFNGLTEXCOORD2BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4427 (
APIENTRYP
 
	tPFNGLTEXCOORD3BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
);

4428 (
APIENTRYP
 
	tPFNGLTEXCOORD3BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4429 (
APIENTRYP
 
	tPFNGLTEXCOORD4BOESPROC
Ë(
	tGLbyã
 
	ts
, GLbyã 
	tt
, GLbyã 
	tr
, GLbyã 
	tq
);

4430 (
APIENTRYP
 
	tPFNGLTEXCOORD4BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4431 (
APIENTRYP
 
	tPFNGLVERTEX2BOESPROC
Ë(
	tGLbyã
 
	tx
);

4432 (
APIENTRYP
 
	tPFNGLVERTEX2BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4433 (
APIENTRYP
 
	tPFNGLVERTEX3BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
);

4434 (
APIENTRYP
 
	tPFNGLVERTEX3BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4435 (
APIENTRYP
 
	tPFNGLVERTEX4BOESPROC
Ë(
	tGLbyã
 
	tx
, GLbyã 
	ty
, GLbyã 
	tz
);

4436 (
APIENTRYP
 
	tPFNGLVERTEX4BVOESPROC
Ë(c⁄° 
	tGLbyã
 *
	tco‹ds
);

4437 #ifde‡
GL_GLEXT_PROTOTYPES


4438 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
);

4439 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

4440 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
);

4441 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

4442 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
);

4443 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

4444 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4bOES
 (
GLíum
 
ãxtuª
, 
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
, GLbyã 
q
);

4445 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4bvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLbyã
 *
co‹ds
);

4446 
GLAPI
 
APIENTRY
 
glTexCo‹d1bOES
 (
GLbyã
 
s
);

4447 
GLAPI
 
APIENTRY
 
glTexCo‹d1bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4448 
GLAPI
 
APIENTRY
 
glTexCo‹d2bOES
 (
GLbyã
 
s
, GLbyã 
t
);

4449 
GLAPI
 
APIENTRY
 
glTexCo‹d2bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4450 
GLAPI
 
APIENTRY
 
glTexCo‹d3bOES
 (
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
);

4451 
GLAPI
 
APIENTRY
 
glTexCo‹d3bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4452 
GLAPI
 
APIENTRY
 
glTexCo‹d4bOES
 (
GLbyã
 
s
, GLbyã 
t
, GLbyã 
r
, GLbyã 
q
);

4453 
GLAPI
 
APIENTRY
 
glTexCo‹d4bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4454 
GLAPI
 
APIENTRY
 
glVîãx2bOES
 (
GLbyã
 
x
);

4455 
GLAPI
 
APIENTRY
 
glVîãx2bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4456 
GLAPI
 
APIENTRY
 
glVîãx3bOES
 (
GLbyã
 
x
, GLbyã 
y
);

4457 
GLAPI
 
APIENTRY
 
glVîãx3bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4458 
GLAPI
 
APIENTRY
 
glVîãx4bOES
 (
GLbyã
 
x
, GLbyã 
y
, GLbyã 
z
);

4459 
GLAPI
 
APIENTRY
 
glVîãx4bvOES
 (c⁄° 
GLbyã
 *
co‹ds
);

4463 #i‚de‡
GL_OES_com¥es£d_∑Àâed_ãxtuª


4464 
	#GL_OES_com¥es£d_∑Àâed_ãxtuª
 1

	)

4465 
	#GL_PALETTE4_RGB8_OES
 0x8B90

	)

4466 
	#GL_PALETTE4_RGBA8_OES
 0x8B91

	)

4467 
	#GL_PALETTE4_R5_G6_B5_OES
 0x8B92

	)

4468 
	#GL_PALETTE4_RGBA4_OES
 0x8B93

	)

4469 
	#GL_PALETTE4_RGB5_A1_OES
 0x8B94

	)

4470 
	#GL_PALETTE8_RGB8_OES
 0x8B95

	)

4471 
	#GL_PALETTE8_RGBA8_OES
 0x8B96

	)

4472 
	#GL_PALETTE8_R5_G6_B5_OES
 0x8B97

	)

4473 
	#GL_PALETTE8_RGBA4_OES
 0x8B98

	)

4474 
	#GL_PALETTE8_RGB5_A1_OES
 0x8B99

	)

4477 #i‚de‡
GL_OES_fixed_poöt


4478 
	#GL_OES_fixed_poöt
 1

	)

4479 
GLöt
 
	tGLfixed
;

4480 
	#GL_FIXED_OES
 0x140C

	)

4481 (
APIENTRYP
 
	tPFNGLALPHAFUNCXOESPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLfixed
 
	tªf
);

4482 (
APIENTRYP
 
	tPFNGLCLEARCOLORXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

4483 (
APIENTRYP
 
	tPFNGLCLEARDEPTHXOESPROC
Ë(
	tGLfixed
 
	tdïth
);

4484 (
APIENTRYP
 
	tPFNGLCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLfixed
 *
	tequ©i⁄
);

4485 (
APIENTRYP
 
	tPFNGLCOLOR4XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

4486 (
APIENTRYP
 
	tPFNGLDEPTHRANGEXOESPROC
Ë(
	tGLfixed
 
	tn
, GLfixed 
	tf
);

4487 (
APIENTRYP
 
	tPFNGLFOGXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4488 (
APIENTRYP
 
	tPFNGLFOGXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

4489 (
APIENTRYP
 
	tPFNGLFRUSTUMXOESPROC
Ë(
	tGLfixed
 
	tl
, GLfixed 
	tr
, GLfixed 
	tb
, GLfixed 
	tt
, GLfixed 
	tn
, GLfixed 
	tf
);

4490 (
APIENTRYP
 
	tPFNGLGETCLIPPLANEXOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLfixed
 *
	tequ©i⁄
);

4491 (
APIENTRYP
 
	tPFNGLGETFIXEDVOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4492 (
APIENTRYP
 
	tPFNGLGETTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4493 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4494 (
APIENTRYP
 
	tPFNGLLIGHTMODELXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4495 (
APIENTRYP
 
	tPFNGLLIGHTMODELXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

4496 (
APIENTRYP
 
	tPFNGLLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4497 (
APIENTRYP
 
	tPFNGLLIGHTXVOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

4498 (
APIENTRYP
 
	tPFNGLLINEWIDTHXOESPROC
Ë(
	tGLfixed
 
	twidth
);

4499 (
APIENTRYP
 
	tPFNGLLOADMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

4500 (
APIENTRYP
 
	tPFNGLMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4501 (
APIENTRYP
 
	tPFNGLMATERIALXVOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øm
);

4502 (
APIENTRYP
 
	tPFNGLMULTMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

4503 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

4504 (
APIENTRYP
 
	tPFNGLNORMAL3XOESPROC
Ë(
	tGLfixed
 
	tnx
, GLfixed 
	tny
, GLfixed 
	tnz
);

4505 (
APIENTRYP
 
	tPFNGLORTHOXOESPROC
Ë(
	tGLfixed
 
	tl
, GLfixed 
	tr
, GLfixed 
	tb
, GLfixed 
	tt
, GLfixed 
	tn
, GLfixed 
	tf
);

4506 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERXVOESPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

4507 (
APIENTRYP
 
	tPFNGLPOINTSIZEXOESPROC
Ë(
	tGLfixed
 
	tsize
);

4508 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETXOESPROC
Ë(
	tGLfixed
 
	tÁ˘‹
, GLfixed 
	tunôs
);

4509 (
APIENTRYP
 
	tPFNGLROTATEXOESPROC
Ë(
	tGLfixed
 
	t™gÀ
, GLfixed 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

4510 (
APIENTRYP
 
	tPFNGLSAMPLECOVERAGEOESPROC
Ë(
	tGLfixed
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

4511 (
APIENTRYP
 
	tPFNGLSCALEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

4512 (
APIENTRYP
 
	tPFNGLTEXENVXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4513 (
APIENTRYP
 
	tPFNGLTEXENVXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

4514 (
APIENTRYP
 
	tPFNGLTEXPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4515 (
APIENTRYP
 
	tPFNGLTEXPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

4516 (
APIENTRYP
 
	tPFNGLTRANSLATEXOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

4517 (
APIENTRYP
 
	tPFNGLACCUMXOESPROC
Ë(
	tGLíum
 
	t›
, 
	tGLfixed
 
	tvÆue
);

4518 (
APIENTRYP
 
	tPFNGLBITMAPXOESPROC
Ë(
	tGLsizei
 
	twidth
, GLsizeò
	theight
, 
	tGLfixed
 
	tx‹ig
, GLfixed 
	ty‹ig
, GLfixed 
	txmove
, GLfixed 
	tymove
, c⁄° 
	tGLubyã
 *
	tbôm≠
);

4519 (
APIENTRYP
 
	tPFNGLBLENDCOLORXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

4520 (
APIENTRYP
 
	tPFNGLCLEARACCUMXOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
, GLfixed 
	tÆpha
);

4521 (
APIENTRYP
 
	tPFNGLCOLOR3XOESPROC
Ë(
	tGLfixed
 
	tªd
, GLfixed 
	tgªí
, GLfixed 
	tblue
);

4522 (
APIENTRYP
 
	tPFNGLCOLOR3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄íts
);

4523 (
APIENTRYP
 
	tPFNGLCOLOR4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄íts
);

4524 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERXOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4525 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

4526 (
APIENTRYP
 
	tPFNGLEVALCOORD1XOESPROC
Ë(
	tGLfixed
 
	tu
);

4527 (
APIENTRYP
 
	tPFNGLEVALCOORD1XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4528 (
APIENTRYP
 
	tPFNGLEVALCOORD2XOESPROC
Ë(
	tGLfixed
 
	tu
, GLfixed 
	tv
);

4529 (
APIENTRYP
 
	tPFNGLEVALCOORD2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4530 (
APIENTRYP
 
	tPFNGLFEEDBACKBUFFERXOESPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLíum
 
	tty≥
, c⁄° 
	tGLfixed
 *
	tbuf„r
);

4531 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4532 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4533 (
APIENTRYP
 
	tPFNGLGETLIGHTXOESPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4534 (
APIENTRYP
 
	tPFNGLGETMAPXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tquîy
, 
	tGLfixed
 *
	tv
);

4535 (
APIENTRYP
 
	tPFNGLGETMATERIALXOESPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4536 (
APIENTRYP
 
	tPFNGLGETPIXELMAPXVPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLöt
 
	tsize
, 
	tGLfixed
 *
	tvÆues
);

4537 (
APIENTRYP
 
	tPFNGLGETTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4538 (
APIENTRYP
 
	tPFNGLGETTEXLEVELPARAMETERXVOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLfixed
 *
	t∑øms
);

4539 (
APIENTRYP
 
	tPFNGLINDEXXOESPROC
Ë(
	tGLfixed
 
	tcomp⁄ít
);

4540 (
APIENTRYP
 
	tPFNGLINDEXXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tcomp⁄ít
);

4541 (
APIENTRYP
 
	tPFNGLLOADTRANSPOSEMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

4542 (
APIENTRYP
 
	tPFNGLMAP1XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, GLfixed 
	tpoöts
);

4543 (
APIENTRYP
 
	tPFNGLMAP2XOESPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLfixed 
	tv1
, GLfixed 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLfixed 
	tpoöts
);

4544 (
APIENTRYP
 
	tPFNGLMAPGRID1XOESPROC
Ë(
	tGLöt
 
	tn
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
);

4545 (
APIENTRYP
 
	tPFNGLMAPGRID2XOESPROC
Ë(
	tGLöt
 
	tn
, 
	tGLfixed
 
	tu1
, GLfixed 
	tu2
, GLfixed 
	tv1
, GLfixed 
	tv2
);

4546 (
APIENTRYP
 
	tPFNGLMULTTRANSPOSEMATRIXXOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tm
);

4547 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
);

4548 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

4549 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
);

4550 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

4551 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3XOESPROC
Ë(
	tGLíum
 
	tãxtuª
, 
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
);

4552 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

4553 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4XVOESPROC
Ë(
	tGLíum
 
	tãxtuª
, c⁄° 
	tGLfixed
 *
	tco‹ds
);

4554 (
APIENTRYP
 
	tPFNGLNORMAL3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4555 (
APIENTRYP
 
	tPFNGLPASSTHROUGHXOESPROC
Ë(
	tGLfixed
 
	ttokí
);

4556 (
APIENTRYP
 
	tPFNGLPIXELMAPXPROC
Ë(
	tGLíum
 
	tm≠
, 
	tGLöt
 
	tsize
, c⁄° 
	tGLfixed
 *
	tvÆues
);

4557 (
APIENTRYP
 
	tPFNGLPIXELSTOREXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4558 (
APIENTRYP
 
	tPFNGLPIXELTRANSFERXOESPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4559 (
APIENTRYP
 
	tPFNGLPIXELZOOMXOESPROC
Ë(
	tGLfixed
 
	txÁ˘‹
, GLfixed 
	tyÁ˘‹
);

4560 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESXOESPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGLfixed
 *
	t¥i‹ôõs
);

4561 (
APIENTRYP
 
	tPFNGLRASTERPOS2XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
);

4562 (
APIENTRYP
 
	tPFNGLRASTERPOS2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4563 (
APIENTRYP
 
	tPFNGLRASTERPOS3XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

4564 (
APIENTRYP
 
	tPFNGLRASTERPOS3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4565 (
APIENTRYP
 
	tPFNGLRASTERPOS4XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
, GLfixed 
	tw
);

4566 (
APIENTRYP
 
	tPFNGLRASTERPOS4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4567 (
APIENTRYP
 
	tPFNGLRECTXOESPROC
Ë(
	tGLfixed
 
	tx1
, GLfixed 
	ty1
, GLfixed 
	tx2
, GLfixed 
	ty2
);

4568 (
APIENTRYP
 
	tPFNGLRECTXVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tv1
, c⁄° GLfixed *
	tv2
);

4569 (
APIENTRYP
 
	tPFNGLTEXCOORD1XOESPROC
Ë(
	tGLfixed
 
	ts
);

4570 (
APIENTRYP
 
	tPFNGLTEXCOORD1XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4571 (
APIENTRYP
 
	tPFNGLTEXCOORD2XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
);

4572 (
APIENTRYP
 
	tPFNGLTEXCOORD2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4573 (
APIENTRYP
 
	tPFNGLTEXCOORD3XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
);

4574 (
APIENTRYP
 
	tPFNGLTEXCOORD3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4575 (
APIENTRYP
 
	tPFNGLTEXCOORD4XOESPROC
Ë(
	tGLfixed
 
	ts
, GLfixed 
	tt
, GLfixed 
	tr
, GLfixed 
	tq
);

4576 (
APIENTRYP
 
	tPFNGLTEXCOORD4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4577 (
APIENTRYP
 
	tPFNGLTEXGENXOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLfixed
 
	t∑øm
);

4578 (
APIENTRYP
 
	tPFNGLTEXGENXVOESPROC
Ë(
	tGLíum
 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLfixed
 *
	t∑øms
);

4579 (
APIENTRYP
 
	tPFNGLVERTEX2XOESPROC
Ë(
	tGLfixed
 
	tx
);

4580 (
APIENTRYP
 
	tPFNGLVERTEX2XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4581 (
APIENTRYP
 
	tPFNGLVERTEX3XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
);

4582 (
APIENTRYP
 
	tPFNGLVERTEX3XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4583 (
APIENTRYP
 
	tPFNGLVERTEX4XOESPROC
Ë(
	tGLfixed
 
	tx
, GLfixed 
	ty
, GLfixed 
	tz
);

4584 (
APIENTRYP
 
	tPFNGLVERTEX4XVOESPROC
Ë(c⁄° 
	tGLfixed
 *
	tco‹ds
);

4585 #ifde‡
GL_GLEXT_PROTOTYPES


4586 
GLAPI
 
APIENTRY
 
glAÕhaFuncxOES
 (
GLíum
 
func
, 
GLfixed
 
ªf
);

4587 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

4588 
GLAPI
 
APIENTRY
 
glCÀ¨DïthxOES
 (
GLfixed
 
dïth
);

4589 
GLAPI
 
APIENTRY
 
glClùPœ√xOES
 (
GLíum
 
∂™e
, c⁄° 
GLfixed
 *
equ©i⁄
);

4590 
GLAPI
 
APIENTRY
 
glCﬁ‹4xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

4591 
GLAPI
 
APIENTRY
 
glDïthR™gexOES
 (
GLfixed
 
n
, GLfixed 
f
);

4592 
GLAPI
 
APIENTRY
 
glFogxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

4593 
GLAPI
 
APIENTRY
 
glFogxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

4594 
GLAPI
 
APIENTRY
 
glFru°umxOES
 (
GLfixed
 
l
, GLfixed 
r
, GLfixed 
b
, GLfixed 
t
, GLfixed 
n
, GLfixed 
f
);

4595 
GLAPI
 
APIENTRY
 
glGëClùPœ√xOES
 (
GLíum
 
∂™e
, 
GLfixed
 *
equ©i⁄
);

4596 
GLAPI
 
APIENTRY
 
glGëFixedvOES
 (
GLíum
 
≤ame
, 
GLfixed
 *
∑øms
);

4597 
GLAPI
 
APIENTRY
 
glGëTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4598 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4599 
GLAPI
 
APIENTRY
 
glLightModñxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

4600 
GLAPI
 
APIENTRY
 
glLightModñxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

4601 
GLAPI
 
APIENTRY
 
glLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4602 
GLAPI
 
APIENTRY
 
glLightxvOES
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

4603 
GLAPI
 
APIENTRY
 
glLöeWidthxOES
 (
GLfixed
 
width
);

4604 
GLAPI
 
APIENTRY
 
glLﬂdM©rixxOES
 (c⁄° 
GLfixed
 *
m
);

4605 
GLAPI
 
APIENTRY
 
glM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4606 
GLAPI
 
APIENTRY
 
glM©îülxvOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øm
);

4607 
GLAPI
 
APIENTRY
 
glMu…M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

4608 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

4609 
GLAPI
 
APIENTRY
 
glN‹mÆ3xOES
 (
GLfixed
 
nx
, GLfixed 
ny
, GLfixed 
nz
);

4610 
GLAPI
 
APIENTRY
 
glOπhoxOES
 (
GLfixed
 
l
, GLfixed 
r
, GLfixed 
b
, GLfixed 
t
, GLfixed 
n
, GLfixed 
f
);

4611 
GLAPI
 
APIENTRY
 
glPoötP¨amëîxvOES
 (
GLíum
 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

4612 
GLAPI
 
APIENTRY
 
glPoötSizexOES
 (
GLfixed
 
size
);

4613 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£txOES
 (
GLfixed
 
Á˘‹
, GLfixed 
unôs
);

4614 
GLAPI
 
APIENTRY
 
glRŸ©exOES
 (
GLfixed
 
™gÀ
, GLfixed 
x
, GLfixed 
y
, GLfixed 
z
);

4615 
GLAPI
 
APIENTRY
 
glSam∂eCovîageOES
 (
GLfixed
 
vÆue
, 
GLboﬁón
 
övît
);

4616 
GLAPI
 
APIENTRY
 
glSˇÀxOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

4617 
GLAPI
 
APIENTRY
 
glTexEnvxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4618 
GLAPI
 
APIENTRY
 
glTexEnvxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

4619 
GLAPI
 
APIENTRY
 
glTexP¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4620 
GLAPI
 
APIENTRY
 
glTexP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

4621 
GLAPI
 
APIENTRY
 
glTøn¶©exOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

4622 
GLAPI
 
APIENTRY
 
glAccumxOES
 (
GLíum
 
›
, 
GLfixed
 
vÆue
);

4623 
GLAPI
 
APIENTRY
 
glBôm≠xOES
 (
GLsizei
 
width
, GLsizeò
height
, 
GLfixed
 
x‹ig
, GLfixed 
y‹ig
, GLfixed 
xmove
, GLfixed 
ymove
, c⁄° 
GLubyã
 *
bôm≠
);

4624 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

4625 
GLAPI
 
APIENTRY
 
glCÀ¨AccumxOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
, GLfixed 
Æpha
);

4626 
GLAPI
 
APIENTRY
 
glCﬁ‹3xOES
 (
GLfixed
 
ªd
, GLfixed 
gªí
, GLfixed 
blue
);

4627 
GLAPI
 
APIENTRY
 
glCﬁ‹3xvOES
 (c⁄° 
GLfixed
 *
comp⁄íts
);

4628 
GLAPI
 
APIENTRY
 
glCﬁ‹4xvOES
 (c⁄° 
GLfixed
 *
comp⁄íts
);

4629 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîxOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4630 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

4631 
GLAPI
 
APIENTRY
 
glEvÆCo‹d1xOES
 (
GLfixed
 
u
);

4632 
GLAPI
 
APIENTRY
 
glEvÆCo‹d1xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4633 
GLAPI
 
APIENTRY
 
glEvÆCo‹d2xOES
 (
GLfixed
 
u
, GLfixed 
v
);

4634 
GLAPI
 
APIENTRY
 
glEvÆCo‹d2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4635 
GLAPI
 
APIENTRY
 
glFìdbackBuf„rxOES
 (
GLsizei
 
n
, 
GLíum
 
ty≥
, c⁄° 
GLfixed
 *
buf„r
);

4636 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4637 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîxvOES
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4638 
GLAPI
 
APIENTRY
 
glGëLightxOES
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4639 
GLAPI
 
APIENTRY
 
glGëM≠xvOES
 (
GLíum
 
èrgë
, GLíum 
quîy
, 
GLfixed
 *
v
);

4640 
GLAPI
 
APIENTRY
 
glGëM©îülxOES
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4641 
GLAPI
 
APIENTRY
 
glGëPixñM≠xv
 (
GLíum
 
m≠
, 
GLöt
 
size
, 
GLfixed
 *
vÆues
);

4642 
GLAPI
 
APIENTRY
 
glGëTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4643 
GLAPI
 
APIENTRY
 
glGëTexLevñP¨amëîxvOES
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLfixed
 *
∑øms
);

4644 
GLAPI
 
APIENTRY
 
glIndexxOES
 (
GLfixed
 
comp⁄ít
);

4645 
GLAPI
 
APIENTRY
 
glIndexxvOES
 (c⁄° 
GLfixed
 *
comp⁄ít
);

4646 
GLAPI
 
APIENTRY
 
glLﬂdTøn•o£M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

4647 
GLAPI
 
APIENTRY
 
glM≠1xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
u1
, GLfixed 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, GLfixed 
poöts
);

4648 
GLAPI
 
APIENTRY
 
glM≠2xOES
 (
GLíum
 
èrgë
, 
GLfixed
 
u1
, GLfixed 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLfixed 
v1
, GLfixed 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLfixed 
poöts
);

4649 
GLAPI
 
APIENTRY
 
glM≠Grid1xOES
 (
GLöt
 
n
, 
GLfixed
 
u1
, GLfixed 
u2
);

4650 
GLAPI
 
APIENTRY
 
glM≠Grid2xOES
 (
GLöt
 
n
, 
GLfixed
 
u1
, GLfixed 
u2
, GLfixed 
v1
, GLfixed 
v2
);

4651 
GLAPI
 
APIENTRY
 
glMu…Tøn•o£M©rixxOES
 (c⁄° 
GLfixed
 *
m
);

4652 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
);

4653 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

4654 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
);

4655 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

4656 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3xOES
 (
GLíum
 
ãxtuª
, 
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
);

4657 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

4658 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4xvOES
 (
GLíum
 
ãxtuª
, c⁄° 
GLfixed
 *
co‹ds
);

4659 
GLAPI
 
APIENTRY
 
glN‹mÆ3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4660 
GLAPI
 
APIENTRY
 
glPassThroughxOES
 (
GLfixed
 
tokí
);

4661 
GLAPI
 
APIENTRY
 
glPixñM≠x
 (
GLíum
 
m≠
, 
GLöt
 
size
, c⁄° 
GLfixed
 *
vÆues
);

4662 
GLAPI
 
APIENTRY
 
glPixñSt‹ex
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

4663 
GLAPI
 
APIENTRY
 
glPixñTøns„rxOES
 (
GLíum
 
≤ame
, 
GLfixed
 
∑øm
);

4664 
GLAPI
 
APIENTRY
 
glPixñZoomxOES
 (
GLfixed
 
xÁ˘‹
, GLfixed 
yÁ˘‹
);

4665 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsxOES
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GLfixed
 *
¥i‹ôõs
);

4666 
GLAPI
 
APIENTRY
 
glRa°îPos2xOES
 (
GLfixed
 
x
, GLfixed 
y
);

4667 
GLAPI
 
APIENTRY
 
glRa°îPos2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4668 
GLAPI
 
APIENTRY
 
glRa°îPos3xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

4669 
GLAPI
 
APIENTRY
 
glRa°îPos3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4670 
GLAPI
 
APIENTRY
 
glRa°îPos4xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
, GLfixed 
w
);

4671 
GLAPI
 
APIENTRY
 
glRa°îPos4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4672 
GLAPI
 
APIENTRY
 
glRe˘xOES
 (
GLfixed
 
x1
, GLfixed 
y1
, GLfixed 
x2
, GLfixed 
y2
);

4673 
GLAPI
 
APIENTRY
 
glRe˘xvOES
 (c⁄° 
GLfixed
 *
v1
, c⁄° GLfixed *
v2
);

4674 
GLAPI
 
APIENTRY
 
glTexCo‹d1xOES
 (
GLfixed
 
s
);

4675 
GLAPI
 
APIENTRY
 
glTexCo‹d1xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4676 
GLAPI
 
APIENTRY
 
glTexCo‹d2xOES
 (
GLfixed
 
s
, GLfixed 
t
);

4677 
GLAPI
 
APIENTRY
 
glTexCo‹d2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4678 
GLAPI
 
APIENTRY
 
glTexCo‹d3xOES
 (
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
);

4679 
GLAPI
 
APIENTRY
 
glTexCo‹d3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4680 
GLAPI
 
APIENTRY
 
glTexCo‹d4xOES
 (
GLfixed
 
s
, GLfixed 
t
, GLfixed 
r
, GLfixed 
q
);

4681 
GLAPI
 
APIENTRY
 
glTexCo‹d4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4682 
GLAPI
 
APIENTRY
 
glTexGíxOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, 
GLfixed
 
∑øm
);

4683 
GLAPI
 
APIENTRY
 
glTexGíxvOES
 (
GLíum
 
co‹d
, GLíum 
≤ame
, c⁄° 
GLfixed
 *
∑øms
);

4684 
GLAPI
 
APIENTRY
 
glVîãx2xOES
 (
GLfixed
 
x
);

4685 
GLAPI
 
APIENTRY
 
glVîãx2xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4686 
GLAPI
 
APIENTRY
 
glVîãx3xOES
 (
GLfixed
 
x
, GLfixed 
y
);

4687 
GLAPI
 
APIENTRY
 
glVîãx3xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4688 
GLAPI
 
APIENTRY
 
glVîãx4xOES
 (
GLfixed
 
x
, GLfixed 
y
, GLfixed 
z
);

4689 
GLAPI
 
APIENTRY
 
glVîãx4xvOES
 (c⁄° 
GLfixed
 *
co‹ds
);

4693 #i‚de‡
GL_OES_quîy_m©rix


4694 
	#GL_OES_quîy_m©rix
 1

	)

4695 
GLbôfõld
 (
	tAPIENTRYP
 
	tPFNGLQUERYMATRIXXOESPROC
Ë(
	tGLfixed
 *
	tm™tisß
, 
	tGLöt
 *
	texp⁄ít
);

4696 #ifde‡
GL_GLEXT_PROTOTYPES


4697 
GLAPI
 
GLbôfõld
 
APIENTRY
 
glQuîyM©rixxOES
 (
GLfixed
 *
m™tisß
, 
GLöt
 *
exp⁄ít
);

4701 #i‚de‡
GL_OES_ªad_f‹m©


4702 
	#GL_OES_ªad_f‹m©
 1

	)

4703 
	#GL_IMPLEMENTATION_COLOR_READ_TYPE_OES
 0x8B9A

	)

4704 
	#GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES
 0x8B9B

	)

4707 #i‚de‡
GL_OES_sögÀ_¥ecisi⁄


4708 
	#GL_OES_sögÀ_¥ecisi⁄
 1

	)

4709 (
APIENTRYP
 
	tPFNGLCLEARDEPTHFOESPROC
Ë(
	tGL˛ampf
 
	tdïth
);

4710 (
APIENTRYP
 
	tPFNGLCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, c⁄° 
	tGLÊﬂt
 *
	tequ©i⁄
);

4711 (
APIENTRYP
 
	tPFNGLDEPTHRANGEFOESPROC
Ë(
	tGL˛ampf
 
	tn
, GL˛amp‡
	tf
);

4712 (
APIENTRYP
 
	tPFNGLFRUSTUMFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

4713 (
APIENTRYP
 
	tPFNGLGETCLIPPLANEFOESPROC
Ë(
	tGLíum
 
	t∂™e
, 
	tGLÊﬂt
 *
	tequ©i⁄
);

4714 (
APIENTRYP
 
	tPFNGLORTHOFOESPROC
Ë(
	tGLÊﬂt
 
	tl
, GLÊﬂà
	tr
, GLÊﬂà
	tb
, GLÊﬂà
	tt
, GLÊﬂà
	tn
, GLÊﬂà
	tf
);

4715 #ifde‡
GL_GLEXT_PROTOTYPES


4716 
GLAPI
 
APIENTRY
 
glCÀ¨DïthfOES
 (
GL˛ampf
 
dïth
);

4717 
GLAPI
 
APIENTRY
 
glClùPœ√fOES
 (
GLíum
 
∂™e
, c⁄° 
GLÊﬂt
 *
equ©i⁄
);

4718 
GLAPI
 
APIENTRY
 
glDïthR™gefOES
 (
GL˛ampf
 
n
, GL˛amp‡
f
);

4719 
GLAPI
 
APIENTRY
 
glFru°umfOES
 (
GLÊﬂt
 
l
, GLÊﬂà
r
, GLÊﬂà
b
, GLÊﬂà
t
, GLÊﬂà
n
, GLÊﬂà
f
);

4720 
GLAPI
 
APIENTRY
 
glGëClùPœ√fOES
 (
GLíum
 
∂™e
, 
GLÊﬂt
 *
equ©i⁄
);

4721 
GLAPI
 
APIENTRY
 
glOπhofOES
 (
GLÊﬂt
 
l
, GLÊﬂà
r
, GLÊﬂà
b
, GLÊﬂà
t
, GLÊﬂà
n
, GLÊﬂà
f
);

4725 #i‚de‡
GL_3DFX_mu…ißm∂e


4726 
	#GL_3DFX_mu…ißm∂e
 1

	)

4727 
	#GL_MULTISAMPLE_3DFX
 0x86B2

	)

4728 
	#GL_SAMPLE_BUFFERS_3DFX
 0x86B3

	)

4729 
	#GL_SAMPLES_3DFX
 0x86B4

	)

4730 
	#GL_MULTISAMPLE_BIT_3DFX
 0x20000000

	)

4733 #i‚de‡
GL_3DFX_tbuf„r


4734 
	#GL_3DFX_tbuf„r
 1

	)

4735 (
APIENTRYP
 
	tPFNGLTBUFFERMASK3DFXPROC
Ë(
	tGLuöt
 
	tmask
);

4736 #ifde‡
GL_GLEXT_PROTOTYPES


4737 
GLAPI
 
APIENTRY
 
glTbuf„rMask3DFX
 (
GLuöt
 
mask
);

4741 #i‚de‡
GL_3DFX_ãxtuª_com¥essi⁄_FXT1


4742 
	#GL_3DFX_ãxtuª_com¥essi⁄_FXT1
 1

	)

4743 
	#GL_COMPRESSED_RGB_FXT1_3DFX
 0x86B0

	)

4744 
	#GL_COMPRESSED_RGBA_FXT1_3DFX
 0x86B1

	)

4747 #i‚de‡
GL_AMD_bÀnd_mömax_Á˘‹


4748 
	#GL_AMD_bÀnd_mömax_Á˘‹
 1

	)

4749 
	#GL_FACTOR_MIN_AMD
 0x901C

	)

4750 
	#GL_FACTOR_MAX_AMD
 0x901D

	)

4753 #i‚de‡
GL_AMD_c⁄£rv©ive_dïth


4754 
	#GL_AMD_c⁄£rv©ive_dïth
 1

	)

4757 #i‚de‡
GL_AMD_debug_ouçut


4758 
	#GL_AMD_debug_ouçut
 1

	)

4759 (
APIENTRY
 *
	tGLDEBUGPROCAMD
)(
	tGLuöt
 
	tid
,
	tGLíum
 
	tˇãg‹y
,GLíum 
	t£vîôy
,
	tGLsizei
 
	tÀngth
,c⁄° 
	tGLch¨
 *
	tmesßge
,*
	tu£rP¨am
);

4760 
	#GL_MAX_DEBUG_MESSAGE_LENGTH_AMD
 0x9143

	)

4761 
	#GL_MAX_DEBUG_LOGGED_MESSAGES_AMD
 0x9144

	)

4762 
	#GL_DEBUG_LOGGED_MESSAGES_AMD
 0x9145

	)

4763 
	#GL_DEBUG_SEVERITY_HIGH_AMD
 0x9146

	)

4764 
	#GL_DEBUG_SEVERITY_MEDIUM_AMD
 0x9147

	)

4765 
	#GL_DEBUG_SEVERITY_LOW_AMD
 0x9148

	)

4766 
	#GL_DEBUG_CATEGORY_API_ERROR_AMD
 0x9149

	)

4767 
	#GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD
 0x914A

	)

4768 
	#GL_DEBUG_CATEGORY_DEPRECATION_AMD
 0x914B

	)

4769 
	#GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD
 0x914C

	)

4770 
	#GL_DEBUG_CATEGORY_PERFORMANCE_AMD
 0x914D

	)

4771 
	#GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD
 0x914E

	)

4772 
	#GL_DEBUG_CATEGORY_APPLICATION_AMD
 0x914F

	)

4773 
	#GL_DEBUG_CATEGORY_OTHER_AMD
 0x9150

	)

4774 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEENABLEAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tids
, 
	tGLboﬁón
 
	tíabÀd
);

4775 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGEINSERTAMDPROC
Ë(
	tGLíum
 
	tˇãg‹y
, GLíum 
	t£vîôy
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tbuf
);

4776 (
APIENTRYP
 
	tPFNGLDEBUGMESSAGECALLBACKAMDPROC
Ë(
	tGLDEBUGPROCAMD
 
	tˇŒback
, *
	tu£rP¨am
);

4777 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGETDEBUGMESSAGELOGAMDPROC
Ë(
	tGLuöt
 
	tcou¡
, 
	tGLsizei
 
	tbufsize
, 
	tGLíum
 *
	tˇãg‹õs
, GLuöà*
	t£vîôõs
, GLuöà*
	tids
, GLsizeò*
	tÀngths
, 
	tGLch¨
 *
	tmesßge
);

4778 #ifde‡
GL_GLEXT_PROTOTYPES


4779 
GLAPI
 
APIENTRY
 
glDebugMesßgeE«bÀAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
ids
, 
GLboﬁón
 
íabÀd
);

4780 
GLAPI
 
APIENTRY
 
glDebugMesßgeIn£πAMD
 (
GLíum
 
ˇãg‹y
, GLíum 
£vîôy
, 
GLuöt
 
id
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
buf
);

4781 
GLAPI
 
APIENTRY
 
glDebugMesßgeCÆlbackAMD
 (
GLDEBUGPROCAMD
 
ˇŒback
, *
u£rP¨am
);

4782 
GLAPI
 
GLuöt
 
APIENTRY
 
glGëDebugMesßgeLogAMD
 (GLuöà
cou¡
, 
GLsizei
 
bufsize
, 
GLíum
 *
ˇãg‹õs
, GLuöà*
£vîôõs
, GLuöà*
ids
, GLsizeò*
Àngths
, 
GLch¨
 *
mesßge
);

4786 #i‚de‡
GL_AMD_dïth_˛amp_£∑øã


4787 
	#GL_AMD_dïth_˛amp_£∑øã
 1

	)

4788 
	#GL_DEPTH_CLAMP_NEAR_AMD
 0x901E

	)

4789 
	#GL_DEPTH_CLAMP_FAR_AMD
 0x901F

	)

4792 #i‚de‡
GL_AMD_døw_buf„rs_bÀnd


4793 
	#GL_AMD_døw_buf„rs_bÀnd
 1

	)

4794 (
APIENTRYP
 
	tPFNGLBLENDFUNCINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§c
, GLíum 
	td°
);

4795 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	t§cRGB
, GLíum 
	td°RGB
, GLíum 
	t§cAÕha
, GLíum 
	td°AÕha
);

4796 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmode
);

4797 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC
Ë(
	tGLuöt
 
	tbuf
, 
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

4798 #ifde‡
GL_GLEXT_PROTOTYPES


4799 
GLAPI
 
APIENTRY
 
glBÀndFuncIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§c
, GLíum 
d°
);

4800 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
§cRGB
, GLíum 
d°RGB
, GLíum 
§cAÕha
, GLíum 
d°AÕha
);

4801 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄IndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
mode
);

4802 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eIndexedAMD
 (
GLuöt
 
buf
, 
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

4806 #i‚de‡
GL_AMD_öãæóved_ñemíts


4807 
	#GL_AMD_öãæóved_ñemíts
 1

	)

4808 
	#GL_VERTEX_ELEMENT_SWIZZLE_AMD
 0x91A4

	)

4809 
	#GL_VERTEX_ID_SWIZZLE_AMD
 0x91A5

	)

4810 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPARAMETERIAMDPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

4811 #ifde‡
GL_GLEXT_PROTOTYPES


4812 
GLAPI
 
APIENTRY
 
glVîãxAâribP¨amëîiAMD
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

4816 #i‚de‡
GL_AMD_mu…i_døw_ödúe˘


4817 
	#GL_AMD_mu…i_døw_ödúe˘
 1

	)

4818 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

4819 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	t¥imcou¡
, GLsizeò
	t°ride
);

4820 #ifde‡
GL_GLEXT_PROTOTYPES


4821 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘AMD
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

4822 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘AMD
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
¥imcou¡
, GLsizeò
°ride
);

4826 #i‚de‡
GL_AMD_«me_gí_dñëe


4827 
	#GL_AMD_«me_gí_dñëe
 1

	)

4828 
	#GL_DATA_BUFFER_AMD
 0x9151

	)

4829 
	#GL_PERFORMANCE_MONITOR_AMD
 0x9152

	)

4830 
	#GL_QUERY_OBJECT_AMD
 0x9153

	)

4831 
	#GL_VERTEX_ARRAY_OBJECT_AMD
 0x9154

	)

4832 
	#GL_SAMPLER_OBJECT_AMD
 0x9155

	)

4833 (
APIENTRYP
 
	tPFNGLGENNAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, GLuöà*
	t«mes
);

4834 (
APIENTRYP
 
	tPFNGLDELETENAMESAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	tnum
, c⁄° GLuöà*
	t«mes
);

4835 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEAMDPROC
Ë(
	tGLíum
 
	tidítifõr
, 
	tGLuöt
 
	t«me
);

4836 #ifde‡
GL_GLEXT_PROTOTYPES


4837 
GLAPI
 
APIENTRY
 
glGíNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, GLuöà*
«mes
);

4838 
GLAPI
 
APIENTRY
 
glDñëeNamesAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
num
, c⁄° GLuöà*
«mes
);

4839 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNameAMD
 (
GLíum
 
idítifõr
, 
GLuöt
 
«me
);

4843 #i‚de‡
GL_AMD_oc˛usi⁄_quîy_evít


4844 
	#GL_AMD_oc˛usi⁄_quîy_evít
 1

	)

4845 
	#GL_OCCLUSION_QUERY_EVENT_MASK_AMD
 0x874F

	)

4846 
	#GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD
 0x00000001

	)

4847 
	#GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD
 0x00000002

	)

4848 
	#GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD
 0x00000004

	)

4849 
	#GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD
 0x00000008

	)

4850 
	#GL_QUERY_ALL_EVENT_BITS_AMD
 0xFFFFFFFF

	)

4851 (
APIENTRYP
 
	tPFNGLQUERYOBJECTPARAMETERUIAMDPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, GLíum 
	t≤ame
, GLuöà
	t∑øm
);

4852 #ifde‡
GL_GLEXT_PROTOTYPES


4853 
GLAPI
 
APIENTRY
 
glQuîyObje˘P¨amëîuiAMD
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, GLíum 
≤ame
, GLuöà
∑øm
);

4857 #i‚de‡
GL_AMD_≥rf‹m™˚_m⁄ô‹


4858 
	#GL_AMD_≥rf‹m™˚_m⁄ô‹
 1

	)

4859 
	#GL_COUNTER_TYPE_AMD
 0x8BC0

	)

4860 
	#GL_COUNTER_RANGE_AMD
 0x8BC1

	)

4861 
	#GL_UNSIGNED_INT64_AMD
 0x8BC2

	)

4862 
	#GL_PERCENTAGE_AMD
 0x8BC3

	)

4863 
	#GL_PERFMON_RESULT_AVAILABLE_AMD
 0x8BC4

	)

4864 
	#GL_PERFMON_RESULT_SIZE_AMD
 0x8BC5

	)

4865 
	#GL_PERFMON_RESULT_AMD
 0x8BC6

	)

4866 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSAMDPROC
Ë(
	tGLöt
 *
	tnumGroups
, 
	tGLsizei
 
	tgroupsSize
, 
	tGLuöt
 *
	tgroups
);

4867 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLöt
 *
	tnumCou¡îs
, GLöà*
	tmaxA˘iveCou¡îs
, 
	tGLsizei
 
	tcou¡îSize
, GLuöà*
	tcou¡îs
);

4868 (
APIENTRYP
 
	tPFNGLGETPERFMONITORGROUPSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tgroupSåög
);

4869 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tcou¡îSåög
);

4870 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERINFOAMDPROC
Ë(
	tGLuöt
 
	tgroup
, GLuöà
	tcou¡î
, 
	tGLíum
 
	t≤ame
, *
	td©a
);

4871 (
APIENTRYP
 
	tPFNGLGENPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

4872 (
APIENTRYP
 
	tPFNGLDELETEPERFMONITORSAMDPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tm⁄ô‹s
);

4873 (
APIENTRYP
 
	tPFNGLSELECTPERFMONITORCOUNTERSAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLboﬁón
 
	tíabÀ
, GLuöà
	tgroup
, 
	tGLöt
 
	tnumCou¡îs
, GLuöà*
	tcou¡îLi°
);

4874 (
APIENTRYP
 
	tPFNGLBEGINPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

4875 (
APIENTRYP
 
	tPFNGLENDPERFMONITORAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
);

4876 (
APIENTRYP
 
	tPFNGLGETPERFMONITORCOUNTERDATAAMDPROC
Ë(
	tGLuöt
 
	tm⁄ô‹
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	td©aSize
, GLuöà*
	td©a
, 
	tGLöt
 *
	tbyãsWrôãn
);

4877 #ifde‡
GL_GLEXT_PROTOTYPES


4878 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupsAMD
 (
GLöt
 *
numGroups
, 
GLsizei
 
groupsSize
, 
GLuöt
 *
groups
);

4879 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
group
, 
GLöt
 *
numCou¡îs
, GLöà*
maxA˘iveCou¡îs
, 
GLsizei
 
cou¡îSize
, GLuöà*
cou¡îs
);

4880 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹GroupSåögAMD
 (
GLuöt
 
group
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
groupSåög
);

4881 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îSåögAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
cou¡îSåög
);

4882 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îInfoAMD
 (
GLuöt
 
group
, GLuöà
cou¡î
, 
GLíum
 
≤ame
, *
d©a
);

4883 
GLAPI
 
APIENTRY
 
glGíPîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

4884 
GLAPI
 
APIENTRY
 
glDñëePîfM⁄ô‹sAMD
 (
GLsizei
 
n
, 
GLuöt
 *
m⁄ô‹s
);

4885 
GLAPI
 
APIENTRY
 
glSñe˘PîfM⁄ô‹Cou¡îsAMD
 (
GLuöt
 
m⁄ô‹
, 
GLboﬁón
 
íabÀ
, GLuöà
group
, 
GLöt
 
numCou¡îs
, GLuöà*
cou¡îLi°
);

4886 
GLAPI
 
APIENTRY
 
glBegöPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

4887 
GLAPI
 
APIENTRY
 
glEndPîfM⁄ô‹AMD
 (
GLuöt
 
m⁄ô‹
);

4888 
GLAPI
 
APIENTRY
 
glGëPîfM⁄ô‹Cou¡îD©aAMD
 (
GLuöt
 
m⁄ô‹
, 
GLíum
 
≤ame
, 
GLsizei
 
d©aSize
, GLuöà*
d©a
, 
GLöt
 *
byãsWrôãn
);

4892 #i‚de‡
GL_AMD_pö√d_mem‹y


4893 
	#GL_AMD_pö√d_mem‹y
 1

	)

4894 
	#GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD
 0x9160

	)

4897 #i‚de‡
GL_AMD_quîy_buf„r_obje˘


4898 
	#GL_AMD_quîy_buf„r_obje˘
 1

	)

4899 
	#GL_QUERY_BUFFER_AMD
 0x9192

	)

4900 
	#GL_QUERY_BUFFER_BINDING_AMD
 0x9193

	)

4901 
	#GL_QUERY_RESULT_NO_WAIT_AMD
 0x9194

	)

4904 #i‚de‡
GL_AMD_ßm∂e_posôi⁄s


4905 
	#GL_AMD_ßm∂e_posôi⁄s
 1

	)

4906 
	#GL_SUBSAMPLE_DISTANCE_AMD
 0x883F

	)

4907 (
APIENTRYP
 
	tPFNGLSETMULTISAMPLEFVAMDPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tvÆ
);

4908 #ifde‡
GL_GLEXT_PROTOTYPES


4909 
GLAPI
 
APIENTRY
 
glSëMu…ißm∂efvAMD
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
vÆ
);

4913 #i‚de‡
GL_AMD_£amÀss_cubem≠_≥r_ãxtuª


4914 
	#GL_AMD_£amÀss_cubem≠_≥r_ãxtuª
 1

	)

4917 #i‚de‡
GL_AMD_shadî_©omic_cou¡î_›s


4918 
	#GL_AMD_shadî_©omic_cou¡î_›s
 1

	)

4921 #i‚de‡
GL_AMD_shadî_°ícû_exp‹t


4922 
	#GL_AMD_shadî_°ícû_exp‹t
 1

	)

4925 #i‚de‡
GL_AMD_shadî_åö¨y_mömax


4926 
	#GL_AMD_shadî_åö¨y_mömax
 1

	)

4929 #i‚de‡
GL_AMD_•¨£_ãxtuª


4930 
	#GL_AMD_•¨£_ãxtuª
 1

	)

4931 
	#GL_VIRTUAL_PAGE_SIZE_X_AMD
 0x9195

	)

4932 
	#GL_VIRTUAL_PAGE_SIZE_Y_AMD
 0x9196

	)

4933 
	#GL_VIRTUAL_PAGE_SIZE_Z_AMD
 0x9197

	)

4934 
	#GL_MAX_SPARSE_TEXTURE_SIZE_AMD
 0x9198

	)

4935 
	#GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD
 0x9199

	)

4936 
	#GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS
 0x919A

	)

4937 
	#GL_MIN_SPARSE_LEVEL_AMD
 0x919B

	)

4938 
	#GL_MIN_LOD_WARNING_AMD
 0x919C

	)

4939 
	#GL_TEXTURE_STORAGE_SPARSE_BIT_AMD
 0x00000001

	)

4940 (
APIENTRYP
 
	tPFNGLTEXSTORAGESPARSEAMDPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

4941 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGESPARSEAMDPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tœyîs
, 
	tGLbôfõld
 
	tÊags
);

4942 #ifde‡
GL_GLEXT_PROTOTYPES


4943 
GLAPI
 
APIENTRY
 
glTexSt‹ageS∑r£AMD
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

4944 
GLAPI
 
APIENTRY
 
glTextuªSt‹ageS∑r£AMD
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
œyîs
, 
GLbôfõld
 
Êags
);

4948 #i‚de‡
GL_AMD_°ícû_›î©i⁄_exãnded


4949 
	#GL_AMD_°ícû_›î©i⁄_exãnded
 1

	)

4950 
	#GL_SET_AMD
 0x874A

	)

4951 
	#GL_REPLACE_VALUE_AMD
 0x874B

	)

4952 
	#GL_STENCIL_OP_VALUE_AMD
 0x874C

	)

4953 
	#GL_STENCIL_BACK_OP_VALUE_AMD
 0x874D

	)

4954 (
APIENTRYP
 
	tPFNGLSTENCILOPVALUEAMDPROC
Ë(
	tGLíum
 
	tÁ˚
, 
	tGLuöt
 
	tvÆue
);

4955 #ifde‡
GL_GLEXT_PROTOTYPES


4956 
GLAPI
 
APIENTRY
 
glSãncûOpVÆueAMD
 (
GLíum
 
Á˚
, 
GLuöt
 
vÆue
);

4960 #i‚de‡
GL_AMD_ãxtuª_ãxtuª4


4961 
	#GL_AMD_ãxtuª_ãxtuª4
 1

	)

4964 #i‚de‡
GL_AMD_å™sf‹m_„edback3_löes_åüngÀs


4965 
	#GL_AMD_å™sf‹m_„edback3_löes_åüngÀs
 1

	)

4968 #i‚de‡
GL_AMD_vîãx_shadî_œyî


4969 
	#GL_AMD_vîãx_shadî_œyî
 1

	)

4972 #i‚de‡
GL_AMD_vîãx_shadî_ãs£Œ©‹


4973 
	#GL_AMD_vîãx_shadî_ãs£Œ©‹
 1

	)

4974 
	#GL_SAMPLER_BUFFER_AMD
 0x9001

	)

4975 
	#GL_INT_SAMPLER_BUFFER_AMD
 0x9002

	)

4976 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD
 0x9003

	)

4977 
	#GL_TESSELLATION_MODE_AMD
 0x9004

	)

4978 
	#GL_TESSELLATION_FACTOR_AMD
 0x9005

	)

4979 
	#GL_DISCRETE_AMD
 0x9006

	)

4980 
	#GL_CONTINUOUS_AMD
 0x9007

	)

4981 (
APIENTRYP
 
	tPFNGLTESSELLATIONFACTORAMDPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

4982 (
APIENTRYP
 
	tPFNGLTESSELLATIONMODEAMDPROC
Ë(
	tGLíum
 
	tmode
);

4983 #ifde‡
GL_GLEXT_PROTOTYPES


4984 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄Fa˘‹AMD
 (
GLÊﬂt
 
Á˘‹
);

4985 
GLAPI
 
APIENTRY
 
glTes£Œ©i⁄ModeAMD
 (
GLíum
 
mode
);

4989 #i‚de‡
GL_AMD_vîãx_shadî_võwp‹t_ödex


4990 
	#GL_AMD_vîãx_shadî_võwp‹t_ödex
 1

	)

4993 #i‚de‡
GL_APPLE_aux_dïth_°ícû


4994 
	#GL_APPLE_aux_dïth_°ícû
 1

	)

4995 
	#GL_AUX_DEPTH_STENCIL_APPLE
 0x8A14

	)

4998 #i‚de‡
GL_APPLE_˛õ¡_°‹age


4999 
	#GL_APPLE_˛õ¡_°‹age
 1

	)

5000 
	#GL_UNPACK_CLIENT_STORAGE_APPLE
 0x85B2

	)

5003 #i‚de‡
GL_APPLE_ñemít_¨øy


5004 
	#GL_APPLE_ñemít_¨øy
 1

	)

5005 
	#GL_ELEMENT_ARRAY_APPLE
 0x8A0C

	)

5006 
	#GL_ELEMENT_ARRAY_TYPE_APPLE
 0x8A0D

	)

5007 
	#GL_ELEMENT_ARRAY_POINTER_APPLE
 0x8A0E

	)

5008 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERAPPLEPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° *
	tpoöãr
);

5009 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5010 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5011 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5012 (
APIENTRYP
 
	tPFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

5013 #ifde‡
GL_GLEXT_PROTOTYPES


5014 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrAPPLE
 (
GLíum
 
ty≥
, c⁄° *
poöãr
);

5015 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5016 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5017 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítAºayAPPLE
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

5018 
GLAPI
 
APIENTRY
 
glMu…iDøwR™geEÀmítAºayAPPLE
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

5022 #i‚de‡
GL_APPLE_„n˚


5023 
	#GL_APPLE_„n˚
 1

	)

5024 
	#GL_DRAW_PIXELS_APPLE
 0x8A0A

	)

5025 
	#GL_FENCE_APPLE
 0x8A0B

	)

5026 (
APIENTRYP
 
	tPFNGLGENFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

5027 (
APIENTRYP
 
	tPFNGLDELETEFENCESAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

5028 (
APIENTRYP
 
	tPFNGLSETFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5029 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5030 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5031 (
APIENTRYP
 
	tPFNGLFINISHFENCEAPPLEPROC
Ë(
	tGLuöt
 
	t„n˚
);

5032 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLuöt
 
	t«me
);

5033 (
APIENTRYP
 
	tPFNGLFINISHOBJECTAPPLEPROC
Ë(
	tGLíum
 
	tobje˘
, 
	tGLöt
 
	t«me
);

5034 #ifde‡
GL_GLEXT_PROTOTYPES


5035 
GLAPI
 
APIENTRY
 
glGíFí˚sAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

5036 
GLAPI
 
APIENTRY
 
glDñëeFí˚sAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

5037 
GLAPI
 
APIENTRY
 
glSëFí˚APPLE
 (
GLuöt
 
„n˚
);

5038 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚APPLE
 (
GLuöt
 
„n˚
);

5039 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚APPLE
 (
GLuöt
 
„n˚
);

5040 
GLAPI
 
APIENTRY
 
glFöishFí˚APPLE
 (
GLuöt
 
„n˚
);

5041 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Obje˘APPLE
 (
GLíum
 
obje˘
, 
GLuöt
 
«me
);

5042 
GLAPI
 
APIENTRY
 
glFöishObje˘APPLE
 (
GLíum
 
obje˘
, 
GLöt
 
«me
);

5046 #i‚de‡
GL_APPLE_Êﬂt_pixñs


5047 
	#GL_APPLE_Êﬂt_pixñs
 1

	)

5048 
	#GL_HALF_APPLE
 0x140B

	)

5049 
	#GL_RGBA_FLOAT32_APPLE
 0x8814

	)

5050 
	#GL_RGB_FLOAT32_APPLE
 0x8815

	)

5051 
	#GL_ALPHA_FLOAT32_APPLE
 0x8816

	)

5052 
	#GL_INTENSITY_FLOAT32_APPLE
 0x8817

	)

5053 
	#GL_LUMINANCE_FLOAT32_APPLE
 0x8818

	)

5054 
	#GL_LUMINANCE_ALPHA_FLOAT32_APPLE
 0x8819

	)

5055 
	#GL_RGBA_FLOAT16_APPLE
 0x881A

	)

5056 
	#GL_RGB_FLOAT16_APPLE
 0x881B

	)

5057 
	#GL_ALPHA_FLOAT16_APPLE
 0x881C

	)

5058 
	#GL_INTENSITY_FLOAT16_APPLE
 0x881D

	)

5059 
	#GL_LUMINANCE_FLOAT16_APPLE
 0x881E

	)

5060 
	#GL_LUMINANCE_ALPHA_FLOAT16_APPLE
 0x881F

	)

5061 
	#GL_COLOR_FLOAT_APPLE
 0x8A0F

	)

5064 #i‚de‡
GL_APPLE_Êush_buf„r_ønge


5065 
	#GL_APPLE_Êush_buf„r_ønge
 1

	)

5066 
	#GL_BUFFER_SERIALIZED_MODIFY_APPLE
 0x8A12

	)

5067 
	#GL_BUFFER_FLUSHING_UNMAP_APPLE
 0x8A13

	)

5068 (
APIENTRYP
 
	tPFNGLBUFFERPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5069 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

5070 #ifde‡
GL_GLEXT_PROTOTYPES


5071 
GLAPI
 
APIENTRY
 
glBuf„rP¨amëîiAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

5072 
GLAPI
 
APIENTRY
 
glFlushM≠≥dBuf„rR™geAPPLE
 (
GLíum
 
èrgë
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

5076 #i‚de‡
GL_APPLE_obje˘_purgóbÀ


5077 
	#GL_APPLE_obje˘_purgóbÀ
 1

	)

5078 
	#GL_BUFFER_OBJECT_APPLE
 0x85B3

	)

5079 
	#GL_RELEASED_APPLE
 0x8A19

	)

5080 
	#GL_VOLATILE_APPLE
 0x8A1A

	)

5081 
	#GL_RETAINED_APPLE
 0x8A1B

	)

5082 
	#GL_UNDEFINED_APPLE
 0x8A1C

	)

5083 
	#GL_PURGEABLE_APPLE
 0x8A1D

	)

5084 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

5085 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLOBJECTUNPURGEABLEAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t›ti⁄
);

5086 (
APIENTRYP
 
	tPFNGLGETOBJECTPARAMETERIVAPPLEPROC
Ë(
	tGLíum
 
	tobje˘Ty≥
, 
	tGLuöt
 
	t«me
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5087 #ifde‡
GL_GLEXT_PROTOTYPES


5088 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘PurgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

5089 
GLAPI
 
GLíum
 
APIENTRY
 
glObje˘U≈urgóbÀAPPLE
 (GLíum 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
›ti⁄
);

5090 
GLAPI
 
APIENTRY
 
glGëObje˘P¨amëîivAPPLE
 (
GLíum
 
obje˘Ty≥
, 
GLuöt
 
«me
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

5094 #i‚de‡
GL_APPLE_rgb_422


5095 
	#GL_APPLE_rgb_422
 1

	)

5096 
	#GL_RGB_422_APPLE
 0x8A1F

	)

5097 
	#GL_UNSIGNED_SHORT_8_8_APPLE
 0x85BA

	)

5098 
	#GL_UNSIGNED_SHORT_8_8_REV_APPLE
 0x85BB

	)

5099 
	#GL_RGB_RAW_422_APPLE
 0x8A51

	)

5102 #i‚de‡
GL_APPLE_row_byãs


5103 
	#GL_APPLE_row_byãs
 1

	)

5104 
	#GL_PACK_ROW_BYTES_APPLE
 0x8A15

	)

5105 
	#GL_UNPACK_ROW_BYTES_APPLE
 0x8A16

	)

5108 #i‚de‡
GL_APPLE_•ecuœr_ve˘‹


5109 
	#GL_APPLE_•ecuœr_ve˘‹
 1

	)

5110 
	#GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE
 0x85B0

	)

5113 #i‚de‡
GL_APPLE_ãxtuª_ønge


5114 
	#GL_APPLE_ãxtuª_ønge
 1

	)

5115 
	#GL_TEXTURE_RANGE_LENGTH_APPLE
 0x85B7

	)

5116 
	#GL_TEXTURE_RANGE_POINTER_APPLE
 0x85B8

	)

5117 
	#GL_TEXTURE_STORAGE_HINT_APPLE
 0x85BC

	)

5118 
	#GL_STORAGE_PRIVATE_APPLE
 0x85BD

	)

5119 
	#GL_STORAGE_CACHED_APPLE
 0x85BE

	)

5120 
	#GL_STORAGE_SHARED_APPLE
 0x85BF

	)

5121 (
APIENTRYP
 
	tPFNGLTEXTURERANGEAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

5122 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERPOINTERVAPPLEPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, **
	t∑øms
);

5123 #ifde‡
GL_GLEXT_PROTOTYPES


5124 
GLAPI
 
APIENTRY
 
glTextuªR™geAPPLE
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° *
poöãr
);

5125 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîPoöãrvAPPLE
 (
GLíum
 
èrgë
, GLíum 
≤ame
, **
∑øms
);

5129 #i‚de‡
GL_APPLE_å™sf‹m_höt


5130 
	#GL_APPLE_å™sf‹m_höt
 1

	)

5131 
	#GL_TRANSFORM_HINT_APPLE
 0x85B1

	)

5134 #i‚de‡
GL_APPLE_vîãx_¨øy_obje˘


5135 
	#GL_APPLE_vîãx_¨øy_obje˘
 1

	)

5136 
	#GL_VERTEX_ARRAY_BINDING_APPLE
 0x85B5

	)

5137 (
APIENTRYP
 
	tPFNGLBINDVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

5138 (
APIENTRYP
 
	tPFNGLDELETEVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¨øys
);

5139 (
APIENTRYP
 
	tPFNGLGENVERTEXARRAYSAPPLEPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¨øys
);

5140 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXARRAYAPPLEPROC
Ë(
	tGLuöt
 
	t¨øy
);

5141 #ifde‡
GL_GLEXT_PROTOTYPES


5142 
GLAPI
 
APIENTRY
 
glBödVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

5143 
GLAPI
 
APIENTRY
 
glDñëeVîãxAºaysAPPLE
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¨øys
);

5144 
GLAPI
 
APIENTRY
 
glGíVîãxAºaysAPPLE
 (
GLsizei
 
n
, 
GLuöt
 *
¨øys
);

5145 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAºayAPPLE
 (
GLuöt
 
¨øy
);

5149 #i‚de‡
GL_APPLE_vîãx_¨øy_ønge


5150 
	#GL_APPLE_vîãx_¨øy_ønge
 1

	)

5151 
	#GL_VERTEX_ARRAY_RANGE_APPLE
 0x851D

	)

5152 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE
 0x851E

	)

5153 
	#GL_VERTEX_ARRAY_STORAGE_HINT_APPLE
 0x851F

	)

5154 
	#GL_VERTEX_ARRAY_RANGE_POINTER_APPLE
 0x8521

	)

5155 
	#GL_STORAGE_CLIENT_APPLE
 0x85B4

	)

5156 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, *
	tpoöãr
);

5157 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC
Ë(
	tGLsizei
 
	tÀngth
, *
	tpoöãr
);

5158 (
APIENTRYP
 
	tPFNGLVERTEXARRAYPARAMETERIAPPLEPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5159 #ifde‡
GL_GLEXT_PROTOTYPES


5160 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, *
poöãr
);

5161 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geAPPLE
 (
GLsizei
 
Àngth
, *
poöãr
);

5162 
GLAPI
 
APIENTRY
 
glVîãxAºayP¨amëîiAPPLE
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5166 #i‚de‡
GL_APPLE_vîãx_¥ogøm_evÆu©‹s


5167 
	#GL_APPLE_vîãx_¥ogøm_evÆu©‹s
 1

	)

5168 
	#GL_VERTEX_ATTRIB_MAP1_APPLE
 0x8A00

	)

5169 
	#GL_VERTEX_ATTRIB_MAP2_APPLE
 0x8A01

	)

5170 
	#GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE
 0x8A02

	)

5171 
	#GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE
 0x8A03

	)

5172 
	#GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE
 0x8A04

	)

5173 
	#GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE
 0x8A05

	)

5174 
	#GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE
 0x8A06

	)

5175 
	#GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE
 0x8A07

	)

5176 
	#GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE
 0x8A08

	)

5177 
	#GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE
 0x8A09

	)

5178 (
APIENTRYP
 
	tPFNGLENABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5179 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXATTRIBAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5180 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVERTEXATTRIBENABLEDAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
);

5181 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

5182 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB1FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	t°ride
, GLöà
	t‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

5183 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2DAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

5184 (
APIENTRYP
 
	tPFNGLMAPVERTEXATTRIB2FAPPLEPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tsize
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

5185 #ifde‡
GL_GLEXT_PROTOTYPES


5186 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5187 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAâribAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5188 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsVîãxAâribE«bÀdAPPLE
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
);

5189 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLdoubÀ *
poöts
);

5190 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib1fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
°ride
, GLöà
‹dî
, c⁄° GLÊﬂà*
poöts
);

5191 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2dAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLdoubÀ *
poöts
);

5192 
GLAPI
 
APIENTRY
 
glM≠VîãxAârib2fAPPLE
 (
GLuöt
 
ödex
, GLuöà
size
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, c⁄° GLÊﬂà*
poöts
);

5196 #i‚de‡
GL_APPLE_ycb¸_422


5197 
	#GL_APPLE_ycb¸_422
 1

	)

5198 
	#GL_YCBCR_422_APPLE
 0x85B9

	)

5201 #i‚de‡
GL_ATI_døw_buf„rs


5202 
	#GL_ATI_døw_buf„rs
 1

	)

5203 
	#GL_MAX_DRAW_BUFFERS_ATI
 0x8824

	)

5204 
	#GL_DRAW_BUFFER0_ATI
 0x8825

	)

5205 
	#GL_DRAW_BUFFER1_ATI
 0x8826

	)

5206 
	#GL_DRAW_BUFFER2_ATI
 0x8827

	)

5207 
	#GL_DRAW_BUFFER3_ATI
 0x8828

	)

5208 
	#GL_DRAW_BUFFER4_ATI
 0x8829

	)

5209 
	#GL_DRAW_BUFFER5_ATI
 0x882A

	)

5210 
	#GL_DRAW_BUFFER6_ATI
 0x882B

	)

5211 
	#GL_DRAW_BUFFER7_ATI
 0x882C

	)

5212 
	#GL_DRAW_BUFFER8_ATI
 0x882D

	)

5213 
	#GL_DRAW_BUFFER9_ATI
 0x882E

	)

5214 
	#GL_DRAW_BUFFER10_ATI
 0x882F

	)

5215 
	#GL_DRAW_BUFFER11_ATI
 0x8830

	)

5216 
	#GL_DRAW_BUFFER12_ATI
 0x8831

	)

5217 
	#GL_DRAW_BUFFER13_ATI
 0x8832

	)

5218 
	#GL_DRAW_BUFFER14_ATI
 0x8833

	)

5219 
	#GL_DRAW_BUFFER15_ATI
 0x8834

	)

5220 (
APIENTRYP
 
	tPFNGLDRAWBUFFERSATIPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

5221 #ifde‡
GL_GLEXT_PROTOTYPES


5222 
GLAPI
 
APIENTRY
 
glDøwBuf„rsATI
 (
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

5226 #i‚de‡
GL_ATI_ñemít_¨øy


5227 
	#GL_ATI_ñemít_¨øy
 1

	)

5228 
	#GL_ELEMENT_ARRAY_ATI
 0x8768

	)

5229 
	#GL_ELEMENT_ARRAY_TYPE_ATI
 0x8769

	)

5230 
	#GL_ELEMENT_ARRAY_POINTER_ATI
 0x876A

	)

5231 (
APIENTRYP
 
	tPFNGLELEMENTPOINTERATIPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° *
	tpoöãr
);

5232 (
APIENTRYP
 
	tPFNGLDRAWELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
);

5233 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTARRAYATIPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
);

5234 #ifde‡
GL_GLEXT_PROTOTYPES


5235 
GLAPI
 
APIENTRY
 
glEÀmítPoöãrATI
 (
GLíum
 
ty≥
, c⁄° *
poöãr
);

5236 
GLAPI
 
APIENTRY
 
glDøwEÀmítAºayATI
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
);

5237 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítAºayATI
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
);

5241 #i‚de‡
GL_ATI_ívm≠_bumpm≠


5242 
	#GL_ATI_ívm≠_bumpm≠
 1

	)

5243 
	#GL_BUMP_ROT_MATRIX_ATI
 0x8775

	)

5244 
	#GL_BUMP_ROT_MATRIX_SIZE_ATI
 0x8776

	)

5245 
	#GL_BUMP_NUM_TEX_UNITS_ATI
 0x8777

	)

5246 
	#GL_BUMP_TEX_UNITS_ATI
 0x8778

	)

5247 
	#GL_DUDV_ATI
 0x8779

	)

5248 
	#GL_DU8DV8_ATI
 0x877A

	)

5249 
	#GL_BUMP_ENVMAP_ATI
 0x877B

	)

5250 
	#GL_BUMP_TARGET_ATI
 0x877C

	)

5251 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øm
);

5252 (
APIENTRYP
 
	tPFNGLTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øm
);

5253 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERIVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

5254 (
APIENTRYP
 
	tPFNGLGETTEXBUMPPARAMETERFVATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øm
);

5255 #ifde‡
GL_GLEXT_PROTOTYPES


5256 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øm
);

5257 
GLAPI
 
APIENTRY
 
glTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øm
);

5258 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîivATI
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

5259 
GLAPI
 
APIENTRY
 
glGëTexBumpP¨amëîfvATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øm
);

5263 #i‚de‡
GL_ATI_‰agmít_shadî


5264 
	#GL_ATI_‰agmít_shadî
 1

	)

5265 
	#GL_FRAGMENT_SHADER_ATI
 0x8920

	)

5266 
	#GL_REG_0_ATI
 0x8921

	)

5267 
	#GL_REG_1_ATI
 0x8922

	)

5268 
	#GL_REG_2_ATI
 0x8923

	)

5269 
	#GL_REG_3_ATI
 0x8924

	)

5270 
	#GL_REG_4_ATI
 0x8925

	)

5271 
	#GL_REG_5_ATI
 0x8926

	)

5272 
	#GL_REG_6_ATI
 0x8927

	)

5273 
	#GL_REG_7_ATI
 0x8928

	)

5274 
	#GL_REG_8_ATI
 0x8929

	)

5275 
	#GL_REG_9_ATI
 0x892A

	)

5276 
	#GL_REG_10_ATI
 0x892B

	)

5277 
	#GL_REG_11_ATI
 0x892C

	)

5278 
	#GL_REG_12_ATI
 0x892D

	)

5279 
	#GL_REG_13_ATI
 0x892E

	)

5280 
	#GL_REG_14_ATI
 0x892F

	)

5281 
	#GL_REG_15_ATI
 0x8930

	)

5282 
	#GL_REG_16_ATI
 0x8931

	)

5283 
	#GL_REG_17_ATI
 0x8932

	)

5284 
	#GL_REG_18_ATI
 0x8933

	)

5285 
	#GL_REG_19_ATI
 0x8934

	)

5286 
	#GL_REG_20_ATI
 0x8935

	)

5287 
	#GL_REG_21_ATI
 0x8936

	)

5288 
	#GL_REG_22_ATI
 0x8937

	)

5289 
	#GL_REG_23_ATI
 0x8938

	)

5290 
	#GL_REG_24_ATI
 0x8939

	)

5291 
	#GL_REG_25_ATI
 0x893A

	)

5292 
	#GL_REG_26_ATI
 0x893B

	)

5293 
	#GL_REG_27_ATI
 0x893C

	)

5294 
	#GL_REG_28_ATI
 0x893D

	)

5295 
	#GL_REG_29_ATI
 0x893E

	)

5296 
	#GL_REG_30_ATI
 0x893F

	)

5297 
	#GL_REG_31_ATI
 0x8940

	)

5298 
	#GL_CON_0_ATI
 0x8941

	)

5299 
	#GL_CON_1_ATI
 0x8942

	)

5300 
	#GL_CON_2_ATI
 0x8943

	)

5301 
	#GL_CON_3_ATI
 0x8944

	)

5302 
	#GL_CON_4_ATI
 0x8945

	)

5303 
	#GL_CON_5_ATI
 0x8946

	)

5304 
	#GL_CON_6_ATI
 0x8947

	)

5305 
	#GL_CON_7_ATI
 0x8948

	)

5306 
	#GL_CON_8_ATI
 0x8949

	)

5307 
	#GL_CON_9_ATI
 0x894A

	)

5308 
	#GL_CON_10_ATI
 0x894B

	)

5309 
	#GL_CON_11_ATI
 0x894C

	)

5310 
	#GL_CON_12_ATI
 0x894D

	)

5311 
	#GL_CON_13_ATI
 0x894E

	)

5312 
	#GL_CON_14_ATI
 0x894F

	)

5313 
	#GL_CON_15_ATI
 0x8950

	)

5314 
	#GL_CON_16_ATI
 0x8951

	)

5315 
	#GL_CON_17_ATI
 0x8952

	)

5316 
	#GL_CON_18_ATI
 0x8953

	)

5317 
	#GL_CON_19_ATI
 0x8954

	)

5318 
	#GL_CON_20_ATI
 0x8955

	)

5319 
	#GL_CON_21_ATI
 0x8956

	)

5320 
	#GL_CON_22_ATI
 0x8957

	)

5321 
	#GL_CON_23_ATI
 0x8958

	)

5322 
	#GL_CON_24_ATI
 0x8959

	)

5323 
	#GL_CON_25_ATI
 0x895A

	)

5324 
	#GL_CON_26_ATI
 0x895B

	)

5325 
	#GL_CON_27_ATI
 0x895C

	)

5326 
	#GL_CON_28_ATI
 0x895D

	)

5327 
	#GL_CON_29_ATI
 0x895E

	)

5328 
	#GL_CON_30_ATI
 0x895F

	)

5329 
	#GL_CON_31_ATI
 0x8960

	)

5330 
	#GL_MOV_ATI
 0x8961

	)

5331 
	#GL_ADD_ATI
 0x8963

	)

5332 
	#GL_MUL_ATI
 0x8964

	)

5333 
	#GL_SUB_ATI
 0x8965

	)

5334 
	#GL_DOT3_ATI
 0x8966

	)

5335 
	#GL_DOT4_ATI
 0x8967

	)

5336 
	#GL_MAD_ATI
 0x8968

	)

5337 
	#GL_LERP_ATI
 0x8969

	)

5338 
	#GL_CND_ATI
 0x896A

	)

5339 
	#GL_CND0_ATI
 0x896B

	)

5340 
	#GL_DOT2_ADD_ATI
 0x896C

	)

5341 
	#GL_SECONDARY_INTERPOLATOR_ATI
 0x896D

	)

5342 
	#GL_NUM_FRAGMENT_REGISTERS_ATI
 0x896E

	)

5343 
	#GL_NUM_FRAGMENT_CONSTANTS_ATI
 0x896F

	)

5344 
	#GL_NUM_PASSES_ATI
 0x8970

	)

5345 
	#GL_NUM_INSTRUCTIONS_PER_PASS_ATI
 0x8971

	)

5346 
	#GL_NUM_INSTRUCTIONS_TOTAL_ATI
 0x8972

	)

5347 
	#GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI
 0x8973

	)

5348 
	#GL_NUM_LOOPBACK_COMPONENTS_ATI
 0x8974

	)

5349 
	#GL_COLOR_ALPHA_PAIRING_ATI
 0x8975

	)

5350 
	#GL_SWIZZLE_STR_ATI
 0x8976

	)

5351 
	#GL_SWIZZLE_STQ_ATI
 0x8977

	)

5352 
	#GL_SWIZZLE_STR_DR_ATI
 0x8978

	)

5353 
	#GL_SWIZZLE_STQ_DQ_ATI
 0x8979

	)

5354 
	#GL_SWIZZLE_STRQ_ATI
 0x897A

	)

5355 
	#GL_SWIZZLE_STRQ_DQ_ATI
 0x897B

	)

5356 
	#GL_RED_BIT_ATI
 0x00000001

	)

5357 
	#GL_GREEN_BIT_ATI
 0x00000002

	)

5358 
	#GL_BLUE_BIT_ATI
 0x00000004

	)

5359 
	#GL_2X_BIT_ATI
 0x00000001

	)

5360 
	#GL_4X_BIT_ATI
 0x00000002

	)

5361 
	#GL_8X_BIT_ATI
 0x00000004

	)

5362 
	#GL_HALF_BIT_ATI
 0x00000008

	)

5363 
	#GL_QUARTER_BIT_ATI
 0x00000010

	)

5364 
	#GL_EIGHTH_BIT_ATI
 0x00000020

	)

5365 
	#GL_SATURATE_BIT_ATI
 0x00000040

	)

5366 
	#GL_COMP_BIT_ATI
 0x00000002

	)

5367 
	#GL_NEGATE_BIT_ATI
 0x00000004

	)

5368 
	#GL_BIAS_BIT_ATI
 0x00000008

	)

5369 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENFRAGMENTSHADERSATIPROC
Ë(
	tGLuöt
 
	tønge
);

5370 (
APIENTRYP
 
	tPFNGLBINDFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

5371 (
APIENTRYP
 
	tPFNGLDELETEFRAGMENTSHADERATIPROC
Ë(
	tGLuöt
 
	tid
);

5372 (
APIENTRYP
 
	tPFNGLBEGINFRAGMENTSHADERATIPROC
) ();

5373 (
APIENTRYP
 
	tPFNGLENDFRAGMENTSHADERATIPROC
) ();

5374 (
APIENTRYP
 
	tPFNGLPASSTEXCOORDATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	tco‹d
, 
	tGLíum
 
	tswizzÀ
);

5375 (
APIENTRYP
 
	tPFNGLSAMPLEMAPATIPROC
Ë(
	tGLuöt
 
	td°
, GLuöà
	töãΩ
, 
	tGLíum
 
	tswizzÀ
);

5376 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

5377 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

5378 (
APIENTRYP
 
	tPFNGLCOLORFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mask
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

5379 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP1ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
);

5380 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP2ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
);

5381 (
APIENTRYP
 
	tPFNGLALPHAFRAGMENTOP3ATIPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	td°
, GLuöà
	td°Mod
, GLuöà
	t¨g1
, GLuöà
	t¨g1Rï
, GLuöà
	t¨g1Mod
, GLuöà
	t¨g2
, GLuöà
	t¨g2Rï
, GLuöà
	t¨g2Mod
, GLuöà
	t¨g3
, GLuöà
	t¨g3Rï
, GLuöà
	t¨g3Mod
);

5382 (
APIENTRYP
 
	tPFNGLSETFRAGMENTSHADERCONSTANTATIPROC
Ë(
	tGLuöt
 
	td°
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

5383 #ifde‡
GL_GLEXT_PROTOTYPES


5384 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíFøgmítShadîsATI
 (GLuöà
ønge
);

5385 
GLAPI
 
APIENTRY
 
glBödFøgmítShadîATI
 (
GLuöt
 
id
);

5386 
GLAPI
 
APIENTRY
 
glDñëeFøgmítShadîATI
 (
GLuöt
 
id
);

5387 
GLAPI
 
APIENTRY
 
glBegöFøgmítShadîATI
 ();

5388 
GLAPI
 
APIENTRY
 
glEndFøgmítShadîATI
 ();

5389 
GLAPI
 
APIENTRY
 
glPassTexCo‹dATI
 (
GLuöt
 
d°
, GLuöà
co‹d
, 
GLíum
 
swizzÀ
);

5390 
GLAPI
 
APIENTRY
 
glSam∂eM≠ATI
 (
GLuöt
 
d°
, GLuöà
öãΩ
, 
GLíum
 
swizzÀ
);

5391 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

5392 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

5393 
GLAPI
 
APIENTRY
 
glCﬁ‹FøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mask
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

5394 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp1ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
);

5395 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp2ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
);

5396 
GLAPI
 
APIENTRY
 
glAÕhaFøgmítOp3ATI
 (
GLíum
 
›
, 
GLuöt
 
d°
, GLuöà
d°Mod
, GLuöà
¨g1
, GLuöà
¨g1Rï
, GLuöà
¨g1Mod
, GLuöà
¨g2
, GLuöà
¨g2Rï
, GLuöà
¨g2Mod
, GLuöà
¨g3
, GLuöà
¨g3Rï
, GLuöà
¨g3Mod
);

5397 
GLAPI
 
APIENTRY
 
glSëFøgmítShadîC⁄°™tATI
 (
GLuöt
 
d°
, c⁄° 
GLÊﬂt
 *
vÆue
);

5401 #i‚de‡
GL_ATI_m≠_obje˘_buf„r


5402 
	#GL_ATI_m≠_obje˘_buf„r
 1

	)

5403 *(
	tAPIENTRYP
 
	tPFNGLMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5404 (
APIENTRYP
 
	tPFNGLUNMAPOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5405 #ifde‡
GL_GLEXT_PROTOTYPES


5406 
GLAPI
 *
APIENTRY
 
glM≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

5407 
GLAPI
 
APIENTRY
 
glUnm≠Obje˘Buf„rATI
 (
GLuöt
 
buf„r
);

5411 #i‚de‡
GL_ATI_memöfo


5412 
	#GL_ATI_memöfo
 1

	)

5413 
	#GL_VBO_FREE_MEMORY_ATI
 0x87FB

	)

5414 
	#GL_TEXTURE_FREE_MEMORY_ATI
 0x87FC

	)

5415 
	#GL_RENDERBUFFER_FREE_MEMORY_ATI
 0x87FD

	)

5418 #i‚de‡
GL_ATI_pixñ_f‹m©_Êﬂt


5419 
	#GL_ATI_pixñ_f‹m©_Êﬂt
 1

	)

5420 
	#GL_RGBA_FLOAT_MODE_ATI
 0x8820

	)

5421 
	#GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI
 0x8835

	)

5424 #i‚de‡
GL_ATI_≤_åüngÀs


5425 
	#GL_ATI_≤_åüngÀs
 1

	)

5426 
	#GL_PN_TRIANGLES_ATI
 0x87F0

	)

5427 
	#GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F1

	)

5428 
	#GL_PN_TRIANGLES_POINT_MODE_ATI
 0x87F2

	)

5429 
	#GL_PN_TRIANGLES_NORMAL_MODE_ATI
 0x87F3

	)

5430 
	#GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI
 0x87F4

	)

5431 
	#GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI
 0x87F5

	)

5432 
	#GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI
 0x87F6

	)

5433 
	#GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI
 0x87F7

	)

5434 
	#GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI
 0x87F8

	)

5435 (
APIENTRYP
 
	tPFNGLPNTRIANGLESIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5436 (
APIENTRYP
 
	tPFNGLPNTRIANGLESFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5437 #ifde‡
GL_GLEXT_PROTOTYPES


5438 
GLAPI
 
APIENTRY
 
glPNTrüngÀsiATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5439 
GLAPI
 
APIENTRY
 
glPNTrüngÀsfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

5443 #i‚de‡
GL_ATI_£∑øã_°ícû


5444 
	#GL_ATI_£∑øã_°ícû
 1

	)

5445 
	#GL_STENCIL_BACK_FUNC_ATI
 0x8800

	)

5446 
	#GL_STENCIL_BACK_FAIL_ATI
 0x8801

	)

5447 
	#GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI
 0x8802

	)

5448 
	#GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI
 0x8803

	)

5449 (
APIENTRYP
 
	tPFNGLSTENCILOPSEPARATEATIPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tsÁû
, GLíum 
	tdpÁû
, GLíum 
	tdµass
);

5450 (
APIENTRYP
 
	tPFNGLSTENCILFUNCSEPARATEATIPROC
Ë(
	tGLíum
 
	t‰⁄tfunc
, GLíum 
	tbackfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

5451 #ifde‡
GL_GLEXT_PROTOTYPES


5452 
GLAPI
 
APIENTRY
 
glSãncûOpSï¨©eATI
 (
GLíum
 
Á˚
, GLíum 
sÁû
, GLíum 
dpÁû
, GLíum 
dµass
);

5453 
GLAPI
 
APIENTRY
 
glSãncûFuncSï¨©eATI
 (
GLíum
 
‰⁄tfunc
, GLíum 
backfunc
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

5457 #i‚de‡
GL_ATI_ãxt_‰agmít_shadî


5458 
	#GL_ATI_ãxt_‰agmít_shadî
 1

	)

5459 
	#GL_TEXT_FRAGMENT_SHADER_ATI
 0x8200

	)

5462 #i‚de‡
GL_ATI_ãxtuª_ív_comböe3


5463 
	#GL_ATI_ãxtuª_ív_comböe3
 1

	)

5464 
	#GL_MODULATE_ADD_ATI
 0x8744

	)

5465 
	#GL_MODULATE_SIGNED_ADD_ATI
 0x8745

	)

5466 
	#GL_MODULATE_SUBTRACT_ATI
 0x8746

	)

5469 #i‚de‡
GL_ATI_ãxtuª_Êﬂt


5470 
	#GL_ATI_ãxtuª_Êﬂt
 1

	)

5471 
	#GL_RGBA_FLOAT32_ATI
 0x8814

	)

5472 
	#GL_RGB_FLOAT32_ATI
 0x8815

	)

5473 
	#GL_ALPHA_FLOAT32_ATI
 0x8816

	)

5474 
	#GL_INTENSITY_FLOAT32_ATI
 0x8817

	)

5475 
	#GL_LUMINANCE_FLOAT32_ATI
 0x8818

	)

5476 
	#GL_LUMINANCE_ALPHA_FLOAT32_ATI
 0x8819

	)

5477 
	#GL_RGBA_FLOAT16_ATI
 0x881A

	)

5478 
	#GL_RGB_FLOAT16_ATI
 0x881B

	)

5479 
	#GL_ALPHA_FLOAT16_ATI
 0x881C

	)

5480 
	#GL_INTENSITY_FLOAT16_ATI
 0x881D

	)

5481 
	#GL_LUMINANCE_FLOAT16_ATI
 0x881E

	)

5482 
	#GL_LUMINANCE_ALPHA_FLOAT16_ATI
 0x881F

	)

5485 #i‚de‡
GL_ATI_ãxtuª_múr‹_⁄˚


5486 
	#GL_ATI_ãxtuª_múr‹_⁄˚
 1

	)

5487 
	#GL_MIRROR_CLAMP_ATI
 0x8742

	)

5488 
	#GL_MIRROR_CLAMP_TO_EDGE_ATI
 0x8743

	)

5491 #i‚de‡
GL_ATI_vîãx_¨øy_obje˘


5492 
	#GL_ATI_vîãx_¨øy_obje˘
 1

	)

5493 
	#GL_STATIC_ATI
 0x8760

	)

5494 
	#GL_DYNAMIC_ATI
 0x8761

	)

5495 
	#GL_PRESERVE_ATI
 0x8762

	)

5496 
	#GL_DISCARD_ATI
 0x8763

	)

5497 
	#GL_OBJECT_BUFFER_SIZE_ATI
 0x8764

	)

5498 
	#GL_OBJECT_BUFFER_USAGE_ATI
 0x8765

	)

5499 
	#GL_ARRAY_OBJECT_BUFFER_ATI
 0x8766

	)

5500 
	#GL_ARRAY_OBJECT_OFFSET_ATI
 0x8767

	)

5501 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLNEWOBJECTBUFFERATIPROC
Ë(
	tGLsizei
 
	tsize
, c⁄° *
	tpoöãr
, 
	tGLíum
 
	tußge
);

5502 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5503 (
APIENTRYP
 
	tPFNGLUPDATEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
, 
	tGLsizei
 
	tsize
, c⁄° *
	tpoöãr
, 
	tGLíum
 
	t¥e£rve
);

5504 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERFVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5505 (
APIENTRYP
 
	tPFNGLGETOBJECTBUFFERIVATIPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5506 (
APIENTRYP
 
	tPFNGLFREEOBJECTBUFFERATIPROC
Ë(
	tGLuöt
 
	tbuf„r
);

5507 (
APIENTRYP
 
	tPFNGLARRAYOBJECTATIPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLuöt
 
	tbuf„r
, GLuöà
	toff£t
);

5508 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTFVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5509 (
APIENTRYP
 
	tPFNGLGETARRAYOBJECTIVATIPROC
Ë(
	tGLíum
 
	t¨øy
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5510 (
APIENTRYP
 
	tPFNGLVARIANTARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

5511 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5512 (
APIENTRYP
 
	tPFNGLGETVARIANTARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5513 #ifde‡
GL_GLEXT_PROTOTYPES


5514 
GLAPI
 
GLuöt
 
APIENTRY
 
glNewObje˘Buf„rATI
 (
GLsizei
 
size
, c⁄° *
poöãr
, 
GLíum
 
ußge
);

5515 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

5516 
GLAPI
 
APIENTRY
 
glUpd©eObje˘Buf„rATI
 (
GLuöt
 
buf„r
, GLuöà
off£t
, 
GLsizei
 
size
, c⁄° *
poöãr
, 
GLíum
 
¥e£rve
);

5517 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rfvATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

5518 
GLAPI
 
APIENTRY
 
glGëObje˘Buf„rivATI
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

5519 
GLAPI
 
APIENTRY
 
glFªeObje˘Buf„rATI
 (
GLuöt
 
buf„r
);

5520 
GLAPI
 
APIENTRY
 
glAºayObje˘ATI
 (
GLíum
 
¨øy
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLuöt
 
buf„r
, GLuöà
off£t
);

5521 
GLAPI
 
APIENTRY
 
glGëAºayObje˘fvATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

5522 
GLAPI
 
APIENTRY
 
glGëAºayObje˘ivATI
 (
GLíum
 
¨øy
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

5523 
GLAPI
 
APIENTRY
 
glV¨ü¡AºayObje˘ATI
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

5524 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘fvATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

5525 
GLAPI
 
APIENTRY
 
glGëV¨ü¡AºayObje˘ivATI
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

5529 #i‚de‡
GL_ATI_vîãx_©åib_¨øy_obje˘


5530 
	#GL_ATI_vîãx_©åib_¨øy_obje˘
 1

	)

5531 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBARRAYOBJECTATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, GLuöà
	tbuf„r
, GLuöà
	toff£t
);

5532 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5533 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5534 #ifde‡
GL_GLEXT_PROTOTYPES


5535 
GLAPI
 
APIENTRY
 
glVîãxAâribAºayObje˘ATI
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, GLuöà
buf„r
, GLuöà
off£t
);

5536 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘fvATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

5537 
GLAPI
 
APIENTRY
 
glGëVîãxAâribAºayObje˘ivATI
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

5541 #i‚de‡
GL_ATI_vîãx_°ªams


5542 
	#GL_ATI_vîãx_°ªams
 1

	)

5543 
	#GL_MAX_VERTEX_STREAMS_ATI
 0x876B

	)

5544 
	#GL_VERTEX_STREAM0_ATI
 0x876C

	)

5545 
	#GL_VERTEX_STREAM1_ATI
 0x876D

	)

5546 
	#GL_VERTEX_STREAM2_ATI
 0x876E

	)

5547 
	#GL_VERTEX_STREAM3_ATI
 0x876F

	)

5548 
	#GL_VERTEX_STREAM4_ATI
 0x8770

	)

5549 
	#GL_VERTEX_STREAM5_ATI
 0x8771

	)

5550 
	#GL_VERTEX_STREAM6_ATI
 0x8772

	)

5551 
	#GL_VERTEX_STREAM7_ATI
 0x8773

	)

5552 
	#GL_VERTEX_SOURCE_ATI
 0x8774

	)

5553 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
);

5554 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

5555 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
);

5556 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

5557 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
);

5558 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

5559 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
);

5560 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM1DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

5561 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

5562 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

5563 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
);

5564 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

5565 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

5566 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

5567 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

5568 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM2DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

5569 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

5570 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

5571 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

5572 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

5573 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5574 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

5575 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5576 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

5577 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

5578 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

5579 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

5580 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

5581 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

5582 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

5583 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

5584 (
APIENTRYP
 
	tPFNGLVERTEXSTREAM4DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

5585 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLbyã
 
	tnx
, GLbyã 
	tny
, GLbyã 
	tnz
);

5586 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3BVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLbyã
 *
	tco‹ds
);

5587 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLsh‹t
 
	tnx
, GLsh‹à
	tny
, GLsh‹à
	tnz
);

5588 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3SVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLsh‹t
 *
	tco‹ds
);

5589 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLöt
 
	tnx
, GLöà
	tny
, GLöà
	tnz
);

5590 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3IVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLöt
 *
	tco‹ds
);

5591 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
);

5592 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3FVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLÊﬂt
 *
	tco‹ds
);

5593 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DATIPROC
Ë(
	tGLíum
 
	t°ªam
, 
	tGLdoubÀ
 
	tnx
, GLdoubÀ 
	tny
, GLdoubÀ 
	tnz
);

5594 (
APIENTRYP
 
	tPFNGLNORMALSTREAM3DVATIPROC
Ë(
	tGLíum
 
	t°ªam
, c⁄° 
	tGLdoubÀ
 *
	tco‹ds
);

5595 (
APIENTRYP
 
	tPFNGLCLIENTACTIVEVERTEXSTREAMATIPROC
Ë(
	tGLíum
 
	t°ªam
);

5596 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVIATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5597 (
APIENTRYP
 
	tPFNGLVERTEXBLENDENVFATIPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5598 #ifde‡
GL_GLEXT_PROTOTYPES


5599 
GLAPI
 
APIENTRY
 
glVîãxSåóm1sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
);

5600 
GLAPI
 
APIENTRY
 
glVîãxSåóm1svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

5601 
GLAPI
 
APIENTRY
 
glVîãxSåóm1iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
);

5602 
GLAPI
 
APIENTRY
 
glVîãxSåóm1ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

5603 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
);

5604 
GLAPI
 
APIENTRY
 
glVîãxSåóm1fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

5605 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
);

5606 
GLAPI
 
APIENTRY
 
glVîãxSåóm1dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

5607 
GLAPI
 
APIENTRY
 
glVîãxSåóm2sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
);

5608 
GLAPI
 
APIENTRY
 
glVîãxSåóm2svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

5609 
GLAPI
 
APIENTRY
 
glVîãxSåóm2iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
);

5610 
GLAPI
 
APIENTRY
 
glVîãxSåóm2ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

5611 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

5612 
GLAPI
 
APIENTRY
 
glVîãxSåóm2fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

5613 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

5614 
GLAPI
 
APIENTRY
 
glVîãxSåóm2dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

5615 
GLAPI
 
APIENTRY
 
glVîãxSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

5616 
GLAPI
 
APIENTRY
 
glVîãxSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

5617 
GLAPI
 
APIENTRY
 
glVîãxSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

5618 
GLAPI
 
APIENTRY
 
glVîãxSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

5619 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

5620 
GLAPI
 
APIENTRY
 
glVîãxSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

5621 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

5622 
GLAPI
 
APIENTRY
 
glVîãxSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

5623 
GLAPI
 
APIENTRY
 
glVîãxSåóm4sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

5624 
GLAPI
 
APIENTRY
 
glVîãxSåóm4svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

5625 
GLAPI
 
APIENTRY
 
glVîãxSåóm4iATI
 (
GLíum
 
°ªam
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

5626 
GLAPI
 
APIENTRY
 
glVîãxSåóm4ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

5627 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

5628 
GLAPI
 
APIENTRY
 
glVîãxSåóm4fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

5629 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

5630 
GLAPI
 
APIENTRY
 
glVîãxSåóm4dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

5631 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bATI
 (
GLíum
 
°ªam
, 
GLbyã
 
nx
, GLbyã 
ny
, GLbyã 
nz
);

5632 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3bvATI
 (
GLíum
 
°ªam
, c⁄° 
GLbyã
 *
co‹ds
);

5633 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3sATI
 (
GLíum
 
°ªam
, 
GLsh‹t
 
nx
, GLsh‹à
ny
, GLsh‹à
nz
);

5634 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3svATI
 (
GLíum
 
°ªam
, c⁄° 
GLsh‹t
 *
co‹ds
);

5635 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3iATI
 (
GLíum
 
°ªam
, 
GLöt
 
nx
, GLöà
ny
, GLöà
nz
);

5636 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3ivATI
 (
GLíum
 
°ªam
, c⁄° 
GLöt
 *
co‹ds
);

5637 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fATI
 (
GLíum
 
°ªam
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
);

5638 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3fvATI
 (
GLíum
 
°ªam
, c⁄° 
GLÊﬂt
 *
co‹ds
);

5639 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dATI
 (
GLíum
 
°ªam
, 
GLdoubÀ
 
nx
, GLdoubÀ 
ny
, GLdoubÀ 
nz
);

5640 
GLAPI
 
APIENTRY
 
glN‹mÆSåóm3dvATI
 (
GLíum
 
°ªam
, c⁄° 
GLdoubÀ
 *
co‹ds
);

5641 
GLAPI
 
APIENTRY
 
glClõ¡A˘iveVîãxSåómATI
 (
GLíum
 
°ªam
);

5642 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnviATI
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

5643 
GLAPI
 
APIENTRY
 
glVîãxBÀndEnvfATI
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

5647 #i‚de‡
GL_EXT_422_pixñs


5648 
	#GL_EXT_422_pixñs
 1

	)

5649 
	#GL_422_EXT
 0x80CC

	)

5650 
	#GL_422_REV_EXT
 0x80CD

	)

5651 
	#GL_422_AVERAGE_EXT
 0x80CE

	)

5652 
	#GL_422_REV_AVERAGE_EXT
 0x80CF

	)

5655 #i‚de‡
GL_EXT_abgr


5656 
	#GL_EXT_abgr
 1

	)

5657 
	#GL_ABGR_EXT
 0x8000

	)

5660 #i‚de‡
GL_EXT_bgø


5661 
	#GL_EXT_bgø
 1

	)

5662 
	#GL_BGR_EXT
 0x80E0

	)

5663 
	#GL_BGRA_EXT
 0x80E1

	)

5666 #i‚de‡
GL_EXT_bödabÀ_unif‹m


5667 
	#GL_EXT_bödabÀ_unif‹m
 1

	)

5668 
	#GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT
 0x8DE2

	)

5669 
	#GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT
 0x8DE3

	)

5670 
	#GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT
 0x8DE4

	)

5671 
	#GL_MAX_BINDABLE_UNIFORM_SIZE_EXT
 0x8DED

	)

5672 
	#GL_UNIFORM_BUFFER_EXT
 0x8DEE

	)

5673 
	#GL_UNIFORM_BUFFER_BINDING_EXT
 0x8DEF

	)

5674 (
APIENTRYP
 
	tPFNGLUNIFORMBUFFEREXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tbuf„r
);

5675 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMBUFFERSIZEEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

5676 
GLöçå
 (
	tAPIENTRYP
 
	tPFNGLGETUNIFORMOFFSETEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
);

5677 #ifde‡
GL_GLEXT_PROTOTYPES


5678 
GLAPI
 
APIENTRY
 
glUnif‹mBuf„rEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
buf„r
);

5679 
GLAPI
 
GLöt
 
APIENTRY
 
glGëUnif‹mBuf„rSizeEXT
 (
GLuöt
 
¥ogøm
, GLöà
loˇti⁄
);

5680 
GLAPI
 
GLöçå
 
APIENTRY
 
glGëUnif‹mOff£tEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
);

5684 #i‚de‡
GL_EXT_bÀnd_cﬁ‹


5685 
	#GL_EXT_bÀnd_cﬁ‹
 1

	)

5686 
	#GL_CONSTANT_COLOR_EXT
 0x8001

	)

5687 
	#GL_ONE_MINUS_CONSTANT_COLOR_EXT
 0x8002

	)

5688 
	#GL_CONSTANT_ALPHA_EXT
 0x8003

	)

5689 
	#GL_ONE_MINUS_CONSTANT_ALPHA_EXT
 0x8004

	)

5690 
	#GL_BLEND_COLOR_EXT
 0x8005

	)

5691 (
APIENTRYP
 
	tPFNGLBLENDCOLOREXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
, GLÊﬂà
	tÆpha
);

5692 #ifde‡
GL_GLEXT_PROTOTYPES


5693 
GLAPI
 
APIENTRY
 
glBÀndCﬁ‹EXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
, GLÊﬂà
Æpha
);

5697 #i‚de‡
GL_EXT_bÀnd_equ©i⁄_£∑øã


5698 
	#GL_EXT_bÀnd_equ©i⁄_£∑øã
 1

	)

5699 
	#GL_BLEND_EQUATION_RGB_EXT
 0x8009

	)

5700 
	#GL_BLEND_EQUATION_ALPHA_EXT
 0x883D

	)

5701 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONSEPARATEEXTPROC
Ë(
	tGLíum
 
	tmodeRGB
, GLíum 
	tmodeAÕha
);

5702 #ifde‡
GL_GLEXT_PROTOTYPES


5703 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄Sï¨©eEXT
 (
GLíum
 
modeRGB
, GLíum 
modeAÕha
);

5707 #i‚de‡
GL_EXT_bÀnd_func_£∑øã


5708 
	#GL_EXT_bÀnd_func_£∑øã
 1

	)

5709 
	#GL_BLEND_DST_RGB_EXT
 0x80C8

	)

5710 
	#GL_BLEND_SRC_RGB_EXT
 0x80C9

	)

5711 
	#GL_BLEND_DST_ALPHA_EXT
 0x80CA

	)

5712 
	#GL_BLEND_SRC_ALPHA_EXT
 0x80CB

	)

5713 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEEXTPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

5714 #ifde‡
GL_GLEXT_PROTOTYPES


5715 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eEXT
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

5719 #i‚de‡
GL_EXT_bÀnd_logic_›


5720 
	#GL_EXT_bÀnd_logic_›
 1

	)

5723 #i‚de‡
GL_EXT_bÀnd_mömax


5724 
	#GL_EXT_bÀnd_mömax
 1

	)

5725 
	#GL_MIN_EXT
 0x8007

	)

5726 
	#GL_MAX_EXT
 0x8008

	)

5727 
	#GL_FUNC_ADD_EXT
 0x8006

	)

5728 
	#GL_BLEND_EQUATION_EXT
 0x8009

	)

5729 (
APIENTRYP
 
	tPFNGLBLENDEQUATIONEXTPROC
Ë(
	tGLíum
 
	tmode
);

5730 #ifde‡
GL_GLEXT_PROTOTYPES


5731 
GLAPI
 
APIENTRY
 
glBÀndEqu©i⁄EXT
 (
GLíum
 
mode
);

5735 #i‚de‡
GL_EXT_bÀnd_subåa˘


5736 
	#GL_EXT_bÀnd_subåa˘
 1

	)

5737 
	#GL_FUNC_SUBTRACT_EXT
 0x800A

	)

5738 
	#GL_FUNC_REVERSE_SUBTRACT_EXT
 0x800B

	)

5741 #i‚de‡
GL_EXT_˛ù_vﬁume_höt


5742 
	#GL_EXT_˛ù_vﬁume_höt
 1

	)

5743 
	#GL_CLIP_VOLUME_CLIPPING_HINT_EXT
 0x80F0

	)

5746 #i‚de‡
GL_EXT_cmyka


5747 
	#GL_EXT_cmyka
 1

	)

5748 
	#GL_CMYK_EXT
 0x800C

	)

5749 
	#GL_CMYKA_EXT
 0x800D

	)

5750 
	#GL_PACK_CMYK_HINT_EXT
 0x800E

	)

5751 
	#GL_UNPACK_CMYK_HINT_EXT
 0x800F

	)

5754 #i‚de‡
GL_EXT_cﬁ‹_subèbÀ


5755 
	#GL_EXT_cﬁ‹_subèbÀ
 1

	)

5756 (
APIENTRYP
 
	tPFNGLCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, GLsizeò
	tcou¡
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

5757 (
APIENTRYP
 
	tPFNGLCOPYCOLORSUBTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	t°¨t
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLsizeò
	twidth
);

5758 #ifde‡
GL_GLEXT_PROTOTYPES


5759 
GLAPI
 
APIENTRY
 
glCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, GLsizeò
cou¡
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

5760 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹SubTabÀEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
°¨t
, 
GLöt
 
x
, GLöà
y
, GLsizeò
width
);

5764 #i‚de‡
GL_EXT_compûed_vîãx_¨øy


5765 
	#GL_EXT_compûed_vîãx_¨øy
 1

	)

5766 
	#GL_ARRAY_ELEMENT_LOCK_FIRST_EXT
 0x81A8

	)

5767 
	#GL_ARRAY_ELEMENT_LOCK_COUNT_EXT
 0x81A9

	)

5768 (
APIENTRYP
 
	tPFNGLLOCKARRAYSEXTPROC
Ë(
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

5769 (
APIENTRYP
 
	tPFNGLUNLOCKARRAYSEXTPROC
) ();

5770 #ifde‡
GL_GLEXT_PROTOTYPES


5771 
GLAPI
 
APIENTRY
 
glLockAºaysEXT
 (
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

5772 
GLAPI
 
APIENTRY
 
glU∆ockAºaysEXT
 ();

5776 #i‚de‡
GL_EXT_c⁄vﬁuti⁄


5777 
	#GL_EXT_c⁄vﬁuti⁄
 1

	)

5778 
	#GL_CONVOLUTION_1D_EXT
 0x8010

	)

5779 
	#GL_CONVOLUTION_2D_EXT
 0x8011

	)

5780 
	#GL_SEPARABLE_2D_EXT
 0x8012

	)

5781 
	#GL_CONVOLUTION_BORDER_MODE_EXT
 0x8013

	)

5782 
	#GL_CONVOLUTION_FILTER_SCALE_EXT
 0x8014

	)

5783 
	#GL_CONVOLUTION_FILTER_BIAS_EXT
 0x8015

	)

5784 
	#GL_REDUCE_EXT
 0x8016

	)

5785 
	#GL_CONVOLUTION_FORMAT_EXT
 0x8017

	)

5786 
	#GL_CONVOLUTION_WIDTH_EXT
 0x8018

	)

5787 
	#GL_CONVOLUTION_HEIGHT_EXT
 0x8019

	)

5788 
	#GL_MAX_CONVOLUTION_WIDTH_EXT
 0x801A

	)

5789 
	#GL_MAX_CONVOLUTION_HEIGHT_EXT
 0x801B

	)

5790 
	#GL_POST_CONVOLUTION_RED_SCALE_EXT
 0x801C

	)

5791 
	#GL_POST_CONVOLUTION_GREEN_SCALE_EXT
 0x801D

	)

5792 
	#GL_POST_CONVOLUTION_BLUE_SCALE_EXT
 0x801E

	)

5793 
	#GL_POST_CONVOLUTION_ALPHA_SCALE_EXT
 0x801F

	)

5794 
	#GL_POST_CONVOLUTION_RED_BIAS_EXT
 0x8020

	)

5795 
	#GL_POST_CONVOLUTION_GREEN_BIAS_EXT
 0x8021

	)

5796 
	#GL_POST_CONVOLUTION_BLUE_BIAS_EXT
 0x8022

	)

5797 
	#GL_POST_CONVOLUTION_ALPHA_BIAS_EXT
 0x8023

	)

5798 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

5799 (
APIENTRYP
 
	tPFNGLCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	timage
);

5800 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øms
);

5801 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5802 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øms
);

5803 (
APIENTRYP
 
	tPFNGLCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5804 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

5805 (
APIENTRYP
 
	tPFNGLCOPYCONVOLUTIONFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

5806 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	timage
);

5807 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5808 (
APIENTRYP
 
	tPFNGLGETCONVOLUTIONPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5809 (
APIENTRYP
 
	tPFNGLGETSEPARABLEFILTEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	trow
, *
	tcﬁumn
, *
	t•™
);

5810 (
APIENTRYP
 
	tPFNGLSEPARABLEFILTER2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	trow
, c⁄° *
	tcﬁumn
);

5811 #ifde‡
GL_GLEXT_PROTOTYPES


5812 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

5813 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
image
);

5814 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øms
);

5815 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

5816 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øms
);

5817 
GLAPI
 
APIENTRY
 
glC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

5818 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr1DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

5819 
GLAPI
 
APIENTRY
 
glC›yC⁄vﬁuti⁄Fûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

5820 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄FûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
image
);

5821 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

5822 
GLAPI
 
APIENTRY
 
glGëC⁄vﬁuti⁄P¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

5823 
GLAPI
 
APIENTRY
 
glGëSï¨abÀFûãrEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
row
, *
cﬁumn
, *
•™
);

5824 
GLAPI
 
APIENTRY
 
glSï¨abÀFûãr2DEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
row
, c⁄° *
cﬁumn
);

5828 #i‚de‡
GL_EXT_co‹dö©e_‰ame


5829 
	#GL_EXT_co‹dö©e_‰ame
 1

	)

5830 
	#GL_TANGENT_ARRAY_EXT
 0x8439

	)

5831 
	#GL_BINORMAL_ARRAY_EXT
 0x843A

	)

5832 
	#GL_CURRENT_TANGENT_EXT
 0x843B

	)

5833 
	#GL_CURRENT_BINORMAL_EXT
 0x843C

	)

5834 
	#GL_TANGENT_ARRAY_TYPE_EXT
 0x843E

	)

5835 
	#GL_TANGENT_ARRAY_STRIDE_EXT
 0x843F

	)

5836 
	#GL_BINORMAL_ARRAY_TYPE_EXT
 0x8440

	)

5837 
	#GL_BINORMAL_ARRAY_STRIDE_EXT
 0x8441

	)

5838 
	#GL_TANGENT_ARRAY_POINTER_EXT
 0x8442

	)

5839 
	#GL_BINORMAL_ARRAY_POINTER_EXT
 0x8443

	)

5840 
	#GL_MAP1_TANGENT_EXT
 0x8444

	)

5841 
	#GL_MAP2_TANGENT_EXT
 0x8445

	)

5842 
	#GL_MAP1_BINORMAL_EXT
 0x8446

	)

5843 
	#GL_MAP2_BINORMAL_EXT
 0x8447

	)

5844 (
APIENTRYP
 
	tPFNGLTANGENT3BEXTPROC
Ë(
	tGLbyã
 
	ttx
, GLbyã 
	tty
, GLbyã 
	ttz
);

5845 (
APIENTRYP
 
	tPFNGLTANGENT3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5846 (
APIENTRYP
 
	tPFNGLTANGENT3DEXTPROC
Ë(
	tGLdoubÀ
 
	ttx
, GLdoubÀ 
	tty
, GLdoubÀ 
	ttz
);

5847 (
APIENTRYP
 
	tPFNGLTANGENT3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5848 (
APIENTRYP
 
	tPFNGLTANGENT3FEXTPROC
Ë(
	tGLÊﬂt
 
	ttx
, GLÊﬂà
	tty
, GLÊﬂà
	ttz
);

5849 (
APIENTRYP
 
	tPFNGLTANGENT3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5850 (
APIENTRYP
 
	tPFNGLTANGENT3IEXTPROC
Ë(
	tGLöt
 
	ttx
, GLöà
	tty
, GLöà
	ttz
);

5851 (
APIENTRYP
 
	tPFNGLTANGENT3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5852 (
APIENTRYP
 
	tPFNGLTANGENT3SEXTPROC
Ë(
	tGLsh‹t
 
	ttx
, GLsh‹à
	tty
, GLsh‹à
	ttz
);

5853 (
APIENTRYP
 
	tPFNGLTANGENT3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5854 (
APIENTRYP
 
	tPFNGLBINORMAL3BEXTPROC
Ë(
	tGLbyã
 
	tbx
, GLbyã 
	tby
, GLbyã 
	tbz
);

5855 (
APIENTRYP
 
	tPFNGLBINORMAL3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

5856 (
APIENTRYP
 
	tPFNGLBINORMAL3DEXTPROC
Ë(
	tGLdoubÀ
 
	tbx
, GLdoubÀ 
	tby
, GLdoubÀ 
	tbz
);

5857 (
APIENTRYP
 
	tPFNGLBINORMAL3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

5858 (
APIENTRYP
 
	tPFNGLBINORMAL3FEXTPROC
Ë(
	tGLÊﬂt
 
	tbx
, GLÊﬂà
	tby
, GLÊﬂà
	tbz
);

5859 (
APIENTRYP
 
	tPFNGLBINORMAL3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

5860 (
APIENTRYP
 
	tPFNGLBINORMAL3IEXTPROC
Ë(
	tGLöt
 
	tbx
, GLöà
	tby
, GLöà
	tbz
);

5861 (
APIENTRYP
 
	tPFNGLBINORMAL3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

5862 (
APIENTRYP
 
	tPFNGLBINORMAL3SEXTPROC
Ë(
	tGLsh‹t
 
	tbx
, GLsh‹à
	tby
, GLsh‹à
	tbz
);

5863 (
APIENTRYP
 
	tPFNGLBINORMAL3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

5864 (
APIENTRYP
 
	tPFNGLTANGENTPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

5865 (
APIENTRYP
 
	tPFNGLBINORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

5866 #ifde‡
GL_GLEXT_PROTOTYPES


5867 
GLAPI
 
APIENTRY
 
glT™gít3bEXT
 (
GLbyã
 
tx
, GLbyã 
ty
, GLbyã 
tz
);

5868 
GLAPI
 
APIENTRY
 
glT™gít3bvEXT
 (c⁄° 
GLbyã
 *
v
);

5869 
GLAPI
 
APIENTRY
 
glT™gít3dEXT
 (
GLdoubÀ
 
tx
, GLdoubÀ 
ty
, GLdoubÀ 
tz
);

5870 
GLAPI
 
APIENTRY
 
glT™gít3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

5871 
GLAPI
 
APIENTRY
 
glT™gít3fEXT
 (
GLÊﬂt
 
tx
, GLÊﬂà
ty
, GLÊﬂà
tz
);

5872 
GLAPI
 
APIENTRY
 
glT™gít3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

5873 
GLAPI
 
APIENTRY
 
glT™gít3iEXT
 (
GLöt
 
tx
, GLöà
ty
, GLöà
tz
);

5874 
GLAPI
 
APIENTRY
 
glT™gít3ivEXT
 (c⁄° 
GLöt
 *
v
);

5875 
GLAPI
 
APIENTRY
 
glT™gít3sEXT
 (
GLsh‹t
 
tx
, GLsh‹à
ty
, GLsh‹à
tz
);

5876 
GLAPI
 
APIENTRY
 
glT™gít3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

5877 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bEXT
 (
GLbyã
 
bx
, GLbyã 
by
, GLbyã 
bz
);

5878 
GLAPI
 
APIENTRY
 
glBö‹mÆ3bvEXT
 (c⁄° 
GLbyã
 *
v
);

5879 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dEXT
 (
GLdoubÀ
 
bx
, GLdoubÀ 
by
, GLdoubÀ 
bz
);

5880 
GLAPI
 
APIENTRY
 
glBö‹mÆ3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

5881 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fEXT
 (
GLÊﬂt
 
bx
, GLÊﬂà
by
, GLÊﬂà
bz
);

5882 
GLAPI
 
APIENTRY
 
glBö‹mÆ3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

5883 
GLAPI
 
APIENTRY
 
glBö‹mÆ3iEXT
 (
GLöt
 
bx
, GLöà
by
, GLöà
bz
);

5884 
GLAPI
 
APIENTRY
 
glBö‹mÆ3ivEXT
 (c⁄° 
GLöt
 *
v
);

5885 
GLAPI
 
APIENTRY
 
glBö‹mÆ3sEXT
 (
GLsh‹t
 
bx
, GLsh‹à
by
, GLsh‹à
bz
);

5886 
GLAPI
 
APIENTRY
 
glBö‹mÆ3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

5887 
GLAPI
 
APIENTRY
 
glT™gítPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

5888 
GLAPI
 
APIENTRY
 
glBö‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

5892 #i‚de‡
GL_EXT_c›y_ãxtuª


5893 
	#GL_EXT_c›y_ãxtuª
 1

	)

5894 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

5895 (
APIENTRYP
 
	tPFNGLCOPYTEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

5896 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

5897 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

5898 (
APIENTRYP
 
	tPFNGLCOPYTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

5899 #ifde‡
GL_GLEXT_PROTOTYPES


5900 
GLAPI
 
APIENTRY
 
glC›yTexImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

5901 
GLAPI
 
APIENTRY
 
glC›yTexImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

5902 
GLAPI
 
APIENTRY
 
glC›yTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

5903 
GLAPI
 
APIENTRY
 
glC›yTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

5904 
GLAPI
 
APIENTRY
 
glC›yTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

5908 #i‚de‡
GL_EXT_cuŒ_vîãx


5909 
	#GL_EXT_cuŒ_vîãx
 1

	)

5910 
	#GL_CULL_VERTEX_EXT
 0x81AA

	)

5911 
	#GL_CULL_VERTEX_EYE_POSITION_EXT
 0x81AB

	)

5912 
	#GL_CULL_VERTEX_OBJECT_POSITION_EXT
 0x81AC

	)

5913 (
APIENTRYP
 
	tPFNGLCULLPARAMETERDVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

5914 (
APIENTRYP
 
	tPFNGLCULLPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5915 #ifde‡
GL_GLEXT_PROTOTYPES


5916 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîdvEXT
 (
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

5917 
GLAPI
 
APIENTRY
 
glCuŒP¨amëîfvEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

5921 #i‚de‡
GL_EXT_debug_œbñ


5922 
	#GL_EXT_debug_œbñ
 1

	)

5923 
	#GL_PROGRAM_PIPELINE_OBJECT_EXT
 0x8A4F

	)

5924 
	#GL_PROGRAM_OBJECT_EXT
 0x8B40

	)

5925 
	#GL_SHADER_OBJECT_EXT
 0x8B48

	)

5926 
	#GL_BUFFER_OBJECT_EXT
 0x9151

	)

5927 
	#GL_QUERY_OBJECT_EXT
 0x9153

	)

5928 
	#GL_VERTEX_ARRAY_OBJECT_EXT
 0x9154

	)

5929 (
APIENTRYP
 
	tPFNGLLABELOBJECTEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tœbñ
);

5930 (
APIENTRYP
 
	tPFNGLGETOBJECTLABELEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	tobje˘
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLch¨
 *
	tœbñ
);

5931 #ifde‡
GL_GLEXT_PROTOTYPES


5932 
GLAPI
 
APIENTRY
 
glLabñObje˘EXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
œbñ
);

5933 
GLAPI
 
APIENTRY
 
glGëObje˘LabñEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
obje˘
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLch¨
 *
œbñ
);

5937 #i‚de‡
GL_EXT_debug_m¨kî


5938 
	#GL_EXT_debug_m¨kî
 1

	)

5939 (
APIENTRYP
 
	tPFNGLINSERTEVENTMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

5940 (
APIENTRYP
 
	tPFNGLPUSHGROUPMARKEREXTPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° 
	tGLch¨
 *
	tm¨kî
);

5941 (
APIENTRYP
 
	tPFNGLPOPGROUPMARKEREXTPROC
) ();

5942 #ifde‡
GL_GLEXT_PROTOTYPES


5943 
GLAPI
 
APIENTRY
 
glIn£πEvítM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

5944 
GLAPI
 
APIENTRY
 
glPushGroupM¨kîEXT
 (
GLsizei
 
Àngth
, c⁄° 
GLch¨
 *
m¨kî
);

5945 
GLAPI
 
APIENTRY
 
glP›GroupM¨kîEXT
 ();

5949 #i‚de‡
GL_EXT_dïth_bounds_ã°


5950 
	#GL_EXT_dïth_bounds_ã°
 1

	)

5951 
	#GL_DEPTH_BOUNDS_TEST_EXT
 0x8890

	)

5952 
	#GL_DEPTH_BOUNDS_EXT
 0x8891

	)

5953 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSEXTPROC
Ë(
	tGL˛ampd
 
	tzmö
, GL˛ampd 
	tzmax
);

5954 #ifde‡
GL_GLEXT_PROTOTYPES


5955 
GLAPI
 
APIENTRY
 
glDïthBoundsEXT
 (
GL˛ampd
 
zmö
, GL˛ampd 
zmax
);

5959 #i‚de‡
GL_EXT_dúe˘_°©e_ac˚ss


5960 
	#GL_EXT_dúe˘_°©e_ac˚ss
 1

	)

5961 
	#GL_PROGRAM_MATRIX_EXT
 0x8E2D

	)

5962 
	#GL_TRANSPOSE_PROGRAM_MATRIX_EXT
 0x8E2E

	)

5963 
	#GL_PROGRAM_MATRIX_STACK_DEPTH_EXT
 0x8E2F

	)

5964 (
APIENTRYP
 
	tPFNGLMATRIXLOADFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

5965 (
APIENTRYP
 
	tPFNGLMATRIXLOADDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

5966 (
APIENTRYP
 
	tPFNGLMATRIXMULTFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

5967 (
APIENTRYP
 
	tPFNGLMATRIXMULTDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

5968 (
APIENTRYP
 
	tPFNGLMATRIXLOADIDENTITYEXTPROC
Ë(
	tGLíum
 
	tmode
);

5969 (
APIENTRYP
 
	tPFNGLMATRIXROTATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	t™gÀ
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5970 (
APIENTRYP
 
	tPFNGLMATRIXROTATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	t™gÀ
, GLdoubÀ 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5971 (
APIENTRYP
 
	tPFNGLMATRIXSCALEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5972 (
APIENTRYP
 
	tPFNGLMATRIXSCALEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5973 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEFEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

5974 (
APIENTRYP
 
	tPFNGLMATRIXTRANSLATEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

5975 (
APIENTRYP
 
	tPFNGLMATRIXFRUSTUMEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

5976 (
APIENTRYP
 
	tPFNGLMATRIXORTHOEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLdoubÀ
 
	tÀ·
, GLdoubÀ 
	tright
, GLdoubÀ 
	tbŸtom
, GLdoubÀ 
	tt›
, GLdoubÀ 
	tzNór
, GLdoubÀ 
	tzF¨
);

5977 (
APIENTRYP
 
	tPFNGLMATRIXPOPEXTPROC
Ë(
	tGLíum
 
	tmode
);

5978 (
APIENTRYP
 
	tPFNGLMATRIXPUSHEXTPROC
Ë(
	tGLíum
 
	tmode
);

5979 (
APIENTRYP
 
	tPFNGLCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

5980 (
APIENTRYP
 
	tPFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC
Ë(
	tGLbôfõld
 
	tmask
);

5981 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

5982 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

5983 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

5984 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

5985 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

5986 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

5987 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

5988 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

5989 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

5990 (
APIENTRYP
 
	tPFNGLCOPYTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

5991 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

5992 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

5993 (
APIENTRYP
 
	tPFNGLGETTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

5994 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5995 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

5996 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

5997 (
APIENTRYP
 
	tPFNGLGETTEXTURELEVELPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

5998 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

5999 (
APIENTRYP
 
	tPFNGLTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6000 (
APIENTRYP
 
	tPFNGLCOPYTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6001 (
APIENTRYP
 
	tPFNGLBINDMULTITEXTUREEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

6002 (
APIENTRYP
 
	tPFNGLMULTITEXCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6003 (
APIENTRYP
 
	tPFNGLMULTITEXENVFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6004 (
APIENTRYP
 
	tPFNGLMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6005 (
APIENTRYP
 
	tPFNGLMULTITEXENVIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6006 (
APIENTRYP
 
	tPFNGLMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6007 (
APIENTRYP
 
	tPFNGLMULTITEXGENDEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 
	t∑øm
);

6008 (
APIENTRYP
 
	tPFNGLMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

6009 (
APIENTRYP
 
	tPFNGLMULTITEXGENFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6010 (
APIENTRYP
 
	tPFNGLMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6011 (
APIENTRYP
 
	tPFNGLMULTITEXGENIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6012 (
APIENTRYP
 
	tPFNGLMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6013 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6014 (
APIENTRYP
 
	tPFNGLGETMULTITEXENVIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6015 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENDVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

6016 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6017 (
APIENTRYP
 
	tPFNGLGETMULTITEXGENIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tco‹d
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6018 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6019 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6020 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6021 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6022 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6023 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6024 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6025 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6026 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
);

6027 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
);

6028 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

6029 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6030 (
APIENTRYP
 
	tPFNGLGETMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tpixñs
);

6031 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6032 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6033 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6034 (
APIENTRYP
 
	tPFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	t≤ame
, GLöà*
	t∑øms
);

6035 (
APIENTRYP
 
	tPFNGLMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6036 (
APIENTRYP
 
	tPFNGLMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

6037 (
APIENTRYP
 
	tPFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6038 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6039 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEINDEXEDEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6040 (
APIENTRYP
 
	tPFNGLGETFLOATINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	td©a
);

6041 (
APIENTRYP
 
	tPFNGLGETDOUBLEINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	td©a
);

6042 (
APIENTRYP
 
	tPFNGLGETPOINTERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, **
	td©a
);

6043 (
APIENTRYP
 
	tPFNGLENABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6044 (
APIENTRYP
 
	tPFNGLDISABLEINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6045 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISENABLEDINDEXEDEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
);

6046 (
APIENTRYP
 
	tPFNGLGETINTEGERINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	td©a
);

6047 (
APIENTRYP
 
	tPFNGLGETBOOLEANINDEXEDVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 *
	td©a
);

6048 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6049 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6050 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6051 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6052 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6053 (
APIENTRYP
 
	tPFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6054 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlod
, *
	timg
);

6055 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6056 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6057 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLöà
	tb‹dî
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6058 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6059 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6060 (
APIENTRYP
 
	tPFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLsizeò
	timageSize
, c⁄° *
	tbôs
);

6061 (
APIENTRYP
 
	tPFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLöt
 
	tlod
, *
	timg
);

6062 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6063 (
APIENTRYP
 
	tPFNGLMATRIXLOADTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6064 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEFEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLÊﬂt
 *
	tm
);

6065 (
APIENTRYP
 
	tPFNGLMATRIXMULTTRANSPOSEDEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLdoubÀ
 *
	tm
);

6066 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLíum
 
	tußge
);

6067 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
);

6068 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

6069 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLUNMAPNAMEDBUFFEREXTPROC
Ë(
	tGLuöt
 
	tbuf„r
);

6070 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6071 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, **
	t∑øms
);

6072 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
, *
	td©a
);

6073 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
);

6074 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
);

6075 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
);

6076 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLÊﬂt
 
	tv0
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLÊﬂà
	tv3
);

6077 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
);

6078 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
);

6079 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
);

6080 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLöà
	tv0
, GLöà
	tv1
, GLöà
	tv2
, GLöà
	tv3
);

6081 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6082 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6083 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6084 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6085 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6086 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6087 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6088 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLöà*
	tvÆue
);

6089 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6090 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6091 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6092 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6093 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6094 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6095 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6096 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6097 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

6098 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
);

6099 (
APIENTRYP
 
	tPFNGLMULTITEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

6100 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6101 (
APIENTRYP
 
	tPFNGLTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° GLuöà*
	t∑øms
);

6102 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6103 (
APIENTRYP
 
	tPFNGLGETTEXTUREPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, GLuöà*
	t∑øms
);

6104 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6105 (
APIENTRYP
 
	tPFNGLMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

6106 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6107 (
APIENTRYP
 
	tPFNGLGETMULTITEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

6108 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
);

6109 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
);

6110 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

6111 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

6112 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6113 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6114 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6115 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	tvÆue
);

6116 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6117 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

6118 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

6119 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

6120 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

6121 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° GLuöà*
	t∑øms
);

6122 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

6123 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLöt
 *
	t∑øms
);

6124 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, GLuöà*
	t∑øms
);

6125 (
APIENTRYP
 
	tPFNGLENABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6126 (
APIENTRYP
 
	tPFNGLDISABLECLIENTSTATEIEXTPROC
Ë(
	tGLíum
 
	t¨øy
, 
	tGLuöt
 
	tödex
);

6127 (
APIENTRYP
 
	tPFNGLGETFLOATI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

6128 (
APIENTRYP
 
	tPFNGLGETDOUBLEI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

6129 (
APIENTRYP
 
	tPFNGLGETPOINTERI_VEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, **
	t∑øms
);

6130 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, 
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

6131 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6132 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

6133 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

6134 (
APIENTRYP
 
	tPFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6135 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLdoubÀ
 *
	t∑øms
);

6136 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLuöà
	tödex
, 
	tGLÊﬂt
 *
	t∑øms
);

6137 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6138 (
APIENTRYP
 
	tPFNGLGETNAMEDPROGRAMSTRINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, *
	t°rög
);

6139 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6140 (
APIENTRYP
 
	tPFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6141 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tßm∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6142 (
APIENTRYP
 
	tPFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLíum
 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6143 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tèrgë
);

6144 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6145 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6146 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tãxèrgë
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

6147 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, GLuöà
	tªndîbuf„r
);

6148 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6149 (
APIENTRYP
 
	tPFNGLGENERATETEXTUREMIPMAPEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
);

6150 (
APIENTRYP
 
	tPFNGLGENERATEMULTITEXMIPMAPEXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
);

6151 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

6152 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLíum
 *
	tbufs
);

6153 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERREADBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	tmode
);

6154 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6155 (
APIENTRYP
 
	tPFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tªadBuf„r
, GLuöà
	twrôeBuf„r
, 
	tGLöçå
 
	tªadOff£t
, GLöçå 
	twrôeOff£t
, 
	tGLsizeùå
 
	tsize
);

6156 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6157 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

6158 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t©èchmít
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

6159 (
APIENTRYP
 
	tPFNGLTEXTURERENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLuöà
	tªndîbuf„r
);

6160 (
APIENTRYP
 
	tPFNGLMULTITEXRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tãxunô
, GLíum 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

6161 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6162 (
APIENTRYP
 
	tPFNGLVERTEXARRAYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6163 (
APIENTRYP
 
	tPFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6164 (
APIENTRYP
 
	tPFNGLVERTEXARRAYINDEXOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6165 (
APIENTRYP
 
	tPFNGLVERTEXARRAYNORMALOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6166 (
APIENTRYP
 
	tPFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6167 (
APIENTRYP
 
	tPFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tãxunô
, 
	tGLöt
 
	tsize
, GLíum 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6168 (
APIENTRYP
 
	tPFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6169 (
APIENTRYP
 
	tPFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6170 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6171 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6172 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

6173 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t¨øy
);

6174 (
APIENTRYP
 
	tPFNGLENABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

6175 (
APIENTRYP
 
	tPFNGLDISABLEVERTEXARRAYATTRIBEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
);

6176 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6177 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, 
	tGLíum
 
	t≤ame
, **
	t∑øm
);

6178 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYINTEGERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øm
);

6179 (
APIENTRYP
 
	tPFNGLGETVERTEXARRAYPOINTERI_VEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, 
	tGLíum
 
	t≤ame
, **
	t∑øm
);

6180 *(
	tAPIENTRYP
 
	tPFNGLMAPNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
, 
	tGLbôfõld
 
	tac˚ss
);

6181 (
APIENTRYP
 
	tPFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tÀngth
);

6182 (
APIENTRYP
 
	tPFNGLNAMEDBUFFERSTORAGEEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLsizeùå
 
	tsize
, c⁄° *
	td©a
, 
	tGLbôfõld
 
	tÊags
);

6183 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6184 (
APIENTRYP
 
	tPFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	töã∫Æf‹m©
, 
	tGLsizeùå
 
	toff£t
, GLsizeùå 
	tsize
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	td©a
);

6185 (
APIENTRYP
 
	tPFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6186 (
APIENTRYP
 
	tPFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6187 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
);

6188 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

6189 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

6190 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

6191 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6192 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6193 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6194 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6195 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6196 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6197 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6198 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6199 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6200 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6201 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6202 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6203 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, 
	tGLboﬁón
 
	tå™•o£
, c⁄° 
	tGLdoubÀ
 *
	tvÆue
);

6204 (
APIENTRYP
 
	tPFNGLTEXTUREBUFFERRANGEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

6205 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE1DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
);

6206 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6207 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀvñs
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

6208 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6209 (
APIENTRYP
 
	tPFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedßm∂ñoˇti⁄s
);

6210 (
APIENTRYP
 
	tPFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizei
 
	t°ride
);

6211 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, GLuöà
	tªœtiveoff£t
);

6212 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6213 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLuöà
	tªœtiveoff£t
);

6214 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	t©åibödex
, GLuöà
	tbödögödex
);

6215 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbödögödex
, GLuöà
	tdivis‹
);

6216 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tbuf„r
, GLuöà
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, 
	tGLöçå
 
	toff£t
);

6217 (
APIENTRYP
 
	tPFNGLTEXTUREPAGECOMMITMENTEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tªsidít
);

6218 (
APIENTRYP
 
	tPFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC
Ë(
	tGLuöt
 
	tvaobj
, GLuöà
	tödex
, GLuöà
	tdivis‹
);

6219 #ifde‡
GL_GLEXT_PROTOTYPES


6220 
GLAPI
 
APIENTRY
 
glM©rixLﬂdfEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6221 
GLAPI
 
APIENTRY
 
glM©rixLﬂddEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6222 
GLAPI
 
APIENTRY
 
glM©rixMu…fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6223 
GLAPI
 
APIENTRY
 
glM©rixMu…dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6224 
GLAPI
 
APIENTRY
 
glM©rixLﬂdIdítôyEXT
 (
GLíum
 
mode
);

6225 
GLAPI
 
APIENTRY
 
glM©rixRŸ©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
™gÀ
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6226 
GLAPI
 
APIENTRY
 
glM©rixRŸ©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
™gÀ
, GLdoubÀ 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6227 
GLAPI
 
APIENTRY
 
glM©rixSˇÀfEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6228 
GLAPI
 
APIENTRY
 
glM©rixSˇÀdEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6229 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©efEXT
 (
GLíum
 
mode
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

6230 
GLAPI
 
APIENTRY
 
glM©rixTøn¶©edEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6231 
GLAPI
 
APIENTRY
 
glM©rixFru°umEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

6232 
GLAPI
 
APIENTRY
 
glM©rixOπhoEXT
 (
GLíum
 
mode
, 
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

6233 
GLAPI
 
APIENTRY
 
glM©rixP›EXT
 (
GLíum
 
mode
);

6234 
GLAPI
 
APIENTRY
 
glM©rixPushEXT
 (
GLíum
 
mode
);

6235 
GLAPI
 
APIENTRY
 
glClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

6236 
GLAPI
 
APIENTRY
 
glPushClõ¡AâribDeÁu…EXT
 (
GLbôfõld
 
mask
);

6237 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6238 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6239 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîiEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6240 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6241 
GLAPI
 
APIENTRY
 
glTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6242 
GLAPI
 
APIENTRY
 
glTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6243 
GLAPI
 
APIENTRY
 
glTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6244 
GLAPI
 
APIENTRY
 
glTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6245 
GLAPI
 
APIENTRY
 
glC›yTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6246 
GLAPI
 
APIENTRY
 
glC›yTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6247 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6248 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6249 
GLAPI
 
APIENTRY
 
glGëTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

6250 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6251 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6252 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîfvEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6253 
GLAPI
 
APIENTRY
 
glGëTextuªLevñP¨amëîivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

6254 
GLAPI
 
APIENTRY
 
glTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6255 
GLAPI
 
APIENTRY
 
glTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6256 
GLAPI
 
APIENTRY
 
glC›yTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6257 
GLAPI
 
APIENTRY
 
glBödMu…iTextuªEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ãxtuª
);

6258 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹dPoöãrEXT
 (
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6259 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6260 
GLAPI
 
APIENTRY
 
glMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6261 
GLAPI
 
APIENTRY
 
glMu…iTexEnviEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6262 
GLAPI
 
APIENTRY
 
glMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6263 
GLAPI
 
APIENTRY
 
glMu…iTexGídEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 
∑øm
);

6264 
GLAPI
 
APIENTRY
 
glMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

6265 
GLAPI
 
APIENTRY
 
glMu…iTexGífEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6266 
GLAPI
 
APIENTRY
 
glMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6267 
GLAPI
 
APIENTRY
 
glMu…iTexGíiEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6268 
GLAPI
 
APIENTRY
 
glMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6269 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6270 
GLAPI
 
APIENTRY
 
glGëMu…iTexEnvivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6271 
GLAPI
 
APIENTRY
 
glGëMu…iTexGídvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

6272 
GLAPI
 
APIENTRY
 
glGëMu…iTexGífvEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6273 
GLAPI
 
APIENTRY
 
glGëMu…iTexGíivEXT
 (
GLíum
 
ãxunô
, GLíum 
co‹d
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6274 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîiEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6275 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6276 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6277 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6278 
GLAPI
 
APIENTRY
 
glMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6279 
GLAPI
 
APIENTRY
 
glMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6280 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6281 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6282 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLöà
b‹dî
);

6283 
GLAPI
 
APIENTRY
 
glC›yMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
);

6284 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
);

6285 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6286 
GLAPI
 
APIENTRY
 
glGëMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
f‹m©
, GLíum 
ty≥
, *
pixñs
);

6287 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6288 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6289 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîfvEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6290 
GLAPI
 
APIENTRY
 
glGëMu…iTexLevñP¨amëîivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
≤ame
, GLöà*
∑øms
);

6291 
GLAPI
 
APIENTRY
 
glMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6292 
GLAPI
 
APIENTRY
 
glMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

6293 
GLAPI
 
APIENTRY
 
glC›yMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
x
, GLöà
y
, 
GLsizei
 
width
, GLsizeò
height
);

6294 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6295 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãIndexedEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6296 
GLAPI
 
APIENTRY
 
glGëFlﬂtIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
d©a
);

6297 
GLAPI
 
APIENTRY
 
glGëDoubÀIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
d©a
);

6298 
GLAPI
 
APIENTRY
 
glGëPoöãrIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, **
d©a
);

6299 
GLAPI
 
APIENTRY
 
glE«bÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6300 
GLAPI
 
APIENTRY
 
glDißbÀIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6301 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsE«bÀdIndexedEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
);

6302 
GLAPI
 
APIENTRY
 
glGëI¡egîIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
d©a
);

6303 
GLAPI
 
APIENTRY
 
glGëBoﬁónIndexedvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLboﬁón
 *
d©a
);

6304 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6305 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6306 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6307 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6308 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6309 
GLAPI
 
APIENTRY
 
glCom¥es£dTextuªSubImage1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6310 
GLAPI
 
APIENTRY
 
glGëCom¥es£dTextuªImageEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLöt
 
lod
, *
img
);

6311 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6312 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6313 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLöà
b‹dî
, GLsizeò
imageSize
, c⁄° *
bôs
);

6314 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage3DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6315 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage2DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6316 
GLAPI
 
APIENTRY
 
glCom¥es£dMu…iTexSubImage1DEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLsizeò
imageSize
, c⁄° *
bôs
);

6317 
GLAPI
 
APIENTRY
 
glGëCom¥es£dMu…iTexImageEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLöt
 
lod
, *
img
);

6318 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6319 
GLAPI
 
APIENTRY
 
glM©rixLﬂdTøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6320 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£fEXT
 (
GLíum
 
mode
, c⁄° 
GLÊﬂt
 *
m
);

6321 
GLAPI
 
APIENTRY
 
glM©rixMu…Tøn•o£dEXT
 (
GLíum
 
mode
, c⁄° 
GLdoubÀ
 *
m
);

6322 
GLAPI
 
APIENTRY
 
glNamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLíum
 
ußge
);

6323 
GLAPI
 
APIENTRY
 
glNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, c⁄° *
d©a
);

6324 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

6325 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glUnm≠NamedBuf„rEXT
 (
GLuöt
 
buf„r
);

6326 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîivEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6327 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rPoöãrvEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, **
∑øms
);

6328 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
, *
d©a
);

6329 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
);

6330 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
);

6331 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
);

6332 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLÊﬂt
 
v0
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLÊﬂà
v3
);

6333 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
);

6334 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
);

6335 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
);

6336 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4iEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLöà
v0
, GLöà
v1
, GLöà
v2
, GLöà
v3
);

6337 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6338 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6339 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6340 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
vÆue
);

6341 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6342 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6343 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6344 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLöà*
vÆue
);

6345 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6346 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6347 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6348 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6349 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6350 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6351 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6352 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6353 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3fvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLÊﬂt
 *
vÆue
);

6354 
GLAPI
 
APIENTRY
 
glTextuªBuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
);

6355 
GLAPI
 
APIENTRY
 
glMu…iTexBuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

6356 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6357 
GLAPI
 
APIENTRY
 
glTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° GLuöà*
∑øms
);

6358 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6359 
GLAPI
 
APIENTRY
 
glGëTextuªP¨amëîIuivEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
≤ame
, GLuöà*
∑øms
);

6360 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6361 
GLAPI
 
APIENTRY
 
glMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

6362 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6363 
GLAPI
 
APIENTRY
 
glGëMu…iTexP¨amëîIuivEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

6364 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
);

6365 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
);

6366 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
);

6367 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

6368 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

6369 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

6370 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

6371 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
vÆue
);

6372 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîs4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

6373 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4iEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

6374 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLöt
 *
∑øms
);

6375 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4ivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

6376 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

6377 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° GLuöà*
∑øms
);

6378 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëîsI4uivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

6379 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLöt
 *
∑øms
);

6380 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîIuivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, GLuöà*
∑øms
);

6381 
GLAPI
 
APIENTRY
 
glE«bÀClõ¡SèãiEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6382 
GLAPI
 
APIENTRY
 
glDißbÀClõ¡SèãiEXT
 (
GLíum
 
¨øy
, 
GLuöt
 
ödex
);

6383 
GLAPI
 
APIENTRY
 
glGëFlﬂti_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
∑øms
);

6384 
GLAPI
 
APIENTRY
 
glGëDoubÀi_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLdoubÀ
 *
∑øms
);

6385 
GLAPI
 
APIENTRY
 
glGëPoöãri_vEXT
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, **
∑øms
);

6386 
GLAPI
 
APIENTRY
 
glNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
f‹m©
, 
GLsizei
 
Àn
, c⁄° *
°rög
);

6387 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

6388 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLdoubÀ
 *
∑øms
);

6389 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

6390 
GLAPI
 
APIENTRY
 
glNamedProgømLoˇlP¨amëî4fvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, c⁄° 
GLÊﬂt
 *
∑øms
);

6391 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîdvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLdoubÀ
 *
∑øms
);

6392 
GLAPI
 
APIENTRY
 
glGëNamedProgømLoˇlP¨amëîfvEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLuöà
ödex
, 
GLÊﬂt
 *
∑øms
);

6393 
GLAPI
 
APIENTRY
 
glGëNamedProgømivEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6394 
GLAPI
 
APIENTRY
 
glGëNamedProgømSåögEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
èrgë
, GLíum 
≤ame
, *
°rög
);

6395 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

6396 
GLAPI
 
APIENTRY
 
glGëNamedRídîbuf„rP¨amëîivEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6397 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
ßm∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

6398 
GLAPI
 
APIENTRY
 
glNamedRídîbuf„rSt‹ageMu…ißm∂eCovîageEXT
 (
GLuöt
 
ªndîbuf„r
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLíum
 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

6399 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckNamedFømebuf„rSètusEXT
 (
GLuöt
 
‰amebuf„r
, GLíum 
èrgë
);

6400 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª1DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

6401 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª2DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

6402 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuª3DEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ãxèrgë
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

6403 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rRídîbuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, GLuöà
ªndîbuf„r
);

6404 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rAâachmítP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6405 
GLAPI
 
APIENTRY
 
glGíî©eTextuªMùm≠EXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
);

6406 
GLAPI
 
APIENTRY
 
glGíî©eMu…iTexMùm≠EXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
);

6407 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

6408 
GLAPI
 
APIENTRY
 
glFømebuf„rDøwBuf„rsEXT
 (
GLuöt
 
‰amebuf„r
, 
GLsizei
 
n
, c⁄° 
GLíum
 *
bufs
);

6409 
GLAPI
 
APIENTRY
 
glFømebuf„rRódBuf„rEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
mode
);

6410 
GLAPI
 
APIENTRY
 
glGëFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6411 
GLAPI
 
APIENTRY
 
glNamedC›yBuf„rSubD©aEXT
 (
GLuöt
 
ªadBuf„r
, GLuöà
wrôeBuf„r
, 
GLöçå
 
ªadOff£t
, GLöçå 
wrôeOff£t
, 
GLsizeùå
 
size
);

6412 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
);

6413 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªLayîEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

6414 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rTextuªFa˚EXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
©èchmít
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

6415 
GLAPI
 
APIENTRY
 
glTextuªRídîbuf„rEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLuöà
ªndîbuf„r
);

6416 
GLAPI
 
APIENTRY
 
glMu…iTexRídîbuf„rEXT
 (
GLíum
 
ãxunô
, GLíum 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

6417 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6418 
GLAPI
 
APIENTRY
 
glVîãxAºayCﬁ‹Off£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6419 
GLAPI
 
APIENTRY
 
glVîãxAºayEdgeFœgOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6420 
GLAPI
 
APIENTRY
 
glVîãxAºayIndexOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6421 
GLAPI
 
APIENTRY
 
glVîãxAºayN‹mÆOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6422 
GLAPI
 
APIENTRY
 
glVîãxAºayTexCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6423 
GLAPI
 
APIENTRY
 
glVîãxAºayMu…iTexCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ãxunô
, 
GLöt
 
size
, GLíum 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6424 
GLAPI
 
APIENTRY
 
glVîãxAºayFogCo‹dOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6425 
GLAPI
 
APIENTRY
 
glVîãxAºaySec⁄d¨yCﬁ‹Off£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6426 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6427 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6428 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
¨øy
);

6429 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
¨øy
);

6430 
GLAPI
 
APIENTRY
 
glE«bÀVîãxAºayAâribEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

6431 
GLAPI
 
APIENTRY
 
glDißbÀVîãxAºayAâribEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
);

6432 
GLAPI
 
APIENTRY
 
glGëVîãxAºayI¡egîvEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

6433 
GLAPI
 
APIENTRY
 
glGëVîãxAºayPoöãrvEXT
 (
GLuöt
 
vaobj
, 
GLíum
 
≤ame
, **
∑øm
);

6434 
GLAPI
 
APIENTRY
 
glGëVîãxAºayI¡egîi_vEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øm
);

6435 
GLAPI
 
APIENTRY
 
glGëVîãxAºayPoöãri_vEXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, 
GLíum
 
≤ame
, **
∑øm
);

6436 
GLAPI
 *
APIENTRY
 
glM≠NamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
, 
GLbôfõld
 
ac˚ss
);

6437 
GLAPI
 
APIENTRY
 
glFlushM≠≥dNamedBuf„rR™geEXT
 (
GLuöt
 
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
Àngth
);

6438 
GLAPI
 
APIENTRY
 
glNamedBuf„rSt‹ageEXT
 (
GLuöt
 
buf„r
, 
GLsizeùå
 
size
, c⁄° *
d©a
, 
GLbôfõld
 
Êags
);

6439 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

6440 
GLAPI
 
APIENTRY
 
glCÀ¨NamedBuf„rSubD©aEXT
 (
GLuöt
 
buf„r
, 
GLíum
 
öã∫Æf‹m©
, 
GLsizeùå
 
off£t
, GLsizeùå 
size
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

6441 
GLAPI
 
APIENTRY
 
glNamedFømebuf„rP¨amëîiEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

6442 
GLAPI
 
APIENTRY
 
glGëNamedFømebuf„rP¨amëîivEXT
 (
GLuöt
 
‰amebuf„r
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

6443 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
);

6444 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

6445 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

6446 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

6447 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

6448 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

6449 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

6450 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
vÆue
);

6451 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6452 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6453 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6454 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6455 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix2x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6456 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6457 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix3x4dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6458 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x2dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6459 
GLAPI
 
APIENTRY
 
glProgømUnif‹mM©rix4x3dvEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, 
GLboﬁón
 
å™•o£
, c⁄° 
GLdoubÀ
 *
vÆue
);

6460 
GLAPI
 
APIENTRY
 
glTextuªBuf„rR™geEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

6461 
GLAPI
 
APIENTRY
 
glTextuªSt‹age1DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
);

6462 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

6463 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
Àvñs
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
);

6464 
GLAPI
 
APIENTRY
 
glTextuªSt‹age2DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

6465 
GLAPI
 
APIENTRY
 
glTextuªSt‹age3DMu…ißm∂eEXT
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedßm∂ñoˇti⁄s
);

6466 
GLAPI
 
APIENTRY
 
glVîãxAºayBödVîãxBuf„rEXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizei
 
°ride
);

6467 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, GLuöà
ªœtiveoff£t
);

6468 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribIF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

6469 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLF‹m©EXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, GLuöà
ªœtiveoff£t
);

6470 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribBödögEXT
 (
GLuöt
 
vaobj
, GLuöà
©åibödex
, GLuöà
bödögödex
);

6471 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxBödögDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
bödögödex
, GLuöà
divis‹
);

6472 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribLOff£tEXT
 (
GLuöt
 
vaobj
, GLuöà
buf„r
, GLuöà
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, 
GLöçå
 
off£t
);

6473 
GLAPI
 
APIENTRY
 
glTextuªPageCommômítEXT
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
ªsidít
);

6474 
GLAPI
 
APIENTRY
 
glVîãxAºayVîãxAâribDivis‹EXT
 (
GLuöt
 
vaobj
, GLuöà
ödex
, GLuöà
divis‹
);

6478 #i‚de‡
GL_EXT_døw_buf„rs2


6479 
	#GL_EXT_døw_buf„rs2
 1

	)

6480 (
APIENTRYP
 
	tPFNGLCOLORMASKINDEXEDEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLboﬁón
 
	tr
, GLboﬁó¿
	tg
, GLboﬁó¿
	tb
, GLboﬁó¿
	ta
);

6481 #ifde‡
GL_GLEXT_PROTOTYPES


6482 
GLAPI
 
APIENTRY
 
glCﬁ‹MaskIndexedEXT
 (
GLuöt
 
ödex
, 
GLboﬁón
 
r
, GLboﬁó¿
g
, GLboﬁó¿
b
, GLboﬁó¿
a
);

6486 #i‚de‡
GL_EXT_døw_ö°™˚d


6487 
	#GL_EXT_døw_ö°™˚d
 1

	)

6488 (
APIENTRYP
 
	tPFNGLDRAWARRAYSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	t°¨t
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	t¥imcou¡
);

6489 (
APIENTRYP
 
	tPFNGLDRAWELEMENTSINSTANCEDEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
, GLsizeò
	t¥imcou¡
);

6490 #ifde‡
GL_GLEXT_PROTOTYPES


6491 
GLAPI
 
APIENTRY
 
glDøwAºaysIn°™˚dEXT
 (
GLíum
 
mode
, 
GLöt
 
°¨t
, 
GLsizei
 
cou¡
, GLsizeò
¥imcou¡
);

6492 
GLAPI
 
APIENTRY
 
glDøwEÀmítsIn°™˚dEXT
 (
GLíum
 
mode
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
, GLsizeò
¥imcou¡
);

6496 #i‚de‡
GL_EXT_døw_ønge_ñemíts


6497 
	#GL_EXT_døw_ønge_ñemíts
 1

	)

6498 
	#GL_MAX_ELEMENTS_VERTICES_EXT
 0x80E8

	)

6499 
	#GL_MAX_ELEMENTS_INDICES_EXT
 0x80E9

	)

6500 (
APIENTRYP
 
	tPFNGLDRAWRANGEELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	t°¨t
, GLuöà
	tíd
, 
	tGLsizei
 
	tcou¡
, GLíum 
	tty≥
, c⁄° *
	tödi˚s
);

6501 #ifde‡
GL_GLEXT_PROTOTYPES


6502 
GLAPI
 
APIENTRY
 
glDøwR™geEÀmítsEXT
 (
GLíum
 
mode
, 
GLuöt
 
°¨t
, GLuöà
íd
, 
GLsizei
 
cou¡
, GLíum 
ty≥
, c⁄° *
ödi˚s
);

6506 #i‚de‡
GL_EXT_fog_co‹d


6507 
	#GL_EXT_fog_co‹d
 1

	)

6508 
	#GL_FOG_COORDINATE_SOURCE_EXT
 0x8450

	)

6509 
	#GL_FOG_COORDINATE_EXT
 0x8451

	)

6510 
	#GL_FRAGMENT_DEPTH_EXT
 0x8452

	)

6511 
	#GL_CURRENT_FOG_COORDINATE_EXT
 0x8453

	)

6512 
	#GL_FOG_COORDINATE_ARRAY_TYPE_EXT
 0x8454

	)

6513 
	#GL_FOG_COORDINATE_ARRAY_STRIDE_EXT
 0x8455

	)

6514 
	#GL_FOG_COORDINATE_ARRAY_POINTER_EXT
 0x8456

	)

6515 
	#GL_FOG_COORDINATE_ARRAY_EXT
 0x8457

	)

6516 (
APIENTRYP
 
	tPFNGLFOGCOORDFEXTPROC
Ë(
	tGLÊﬂt
 
	tco‹d
);

6517 (
APIENTRYP
 
	tPFNGLFOGCOORDFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tco‹d
);

6518 (
APIENTRYP
 
	tPFNGLFOGCOORDDEXTPROC
Ë(
	tGLdoubÀ
 
	tco‹d
);

6519 (
APIENTRYP
 
	tPFNGLFOGCOORDDVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tco‹d
);

6520 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

6521 #ifde‡
GL_GLEXT_PROTOTYPES


6522 
GLAPI
 
APIENTRY
 
glFogCo‹dfEXT
 (
GLÊﬂt
 
co‹d
);

6523 
GLAPI
 
APIENTRY
 
glFogCo‹dfvEXT
 (c⁄° 
GLÊﬂt
 *
co‹d
);

6524 
GLAPI
 
APIENTRY
 
glFogCo‹ddEXT
 (
GLdoubÀ
 
co‹d
);

6525 
GLAPI
 
APIENTRY
 
glFogCo‹ddvEXT
 (c⁄° 
GLdoubÀ
 *
co‹d
);

6526 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

6530 #i‚de‡
GL_EXT_‰amebuf„r_blô


6531 
	#GL_EXT_‰amebuf„r_blô
 1

	)

6532 
	#GL_READ_FRAMEBUFFER_EXT
 0x8CA8

	)

6533 
	#GL_DRAW_FRAMEBUFFER_EXT
 0x8CA9

	)

6534 
	#GL_DRAW_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

6535 
	#GL_READ_FRAMEBUFFER_BINDING_EXT
 0x8CAA

	)

6536 (
APIENTRYP
 
	tPFNGLBLITFRAMEBUFFEREXTPROC
Ë(
	tGLöt
 
	t§cX0
, GLöà
	t§cY0
, GLöà
	t§cX1
, GLöà
	t§cY1
, GLöà
	td°X0
, GLöà
	td°Y0
, GLöà
	td°X1
, GLöà
	td°Y1
, 
	tGLbôfõld
 
	tmask
, 
	tGLíum
 
	tfûãr
);

6537 #ifde‡
GL_GLEXT_PROTOTYPES


6538 
GLAPI
 
APIENTRY
 
glBlôFømebuf„rEXT
 (
GLöt
 
§cX0
, GLöà
§cY0
, GLöà
§cX1
, GLöà
§cY1
, GLöà
d°X0
, GLöà
d°Y0
, GLöà
d°X1
, GLöà
d°Y1
, 
GLbôfõld
 
mask
, 
GLíum
 
fûãr
);

6542 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e


6543 
	#GL_EXT_‰amebuf„r_mu…ißm∂e
 1

	)

6544 
	#GL_RENDERBUFFER_SAMPLES_EXT
 0x8CAB

	)

6545 
	#GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT
 0x8D56

	)

6546 
	#GL_MAX_SAMPLES_EXT
 0x8D57

	)

6547 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

6548 #ifde‡
GL_GLEXT_PROTOTYPES


6549 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

6553 #i‚de‡
GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd


6554 
	#GL_EXT_‰amebuf„r_mu…ißm∂e_blô_sˇÀd
 1

	)

6555 
	#GL_SCALED_RESOLVE_FASTEST_EXT
 0x90BA

	)

6556 
	#GL_SCALED_RESOLVE_NICEST_EXT
 0x90BB

	)

6559 #i‚de‡
GL_EXT_‰amebuf„r_obje˘


6560 
	#GL_EXT_‰amebuf„r_obje˘
 1

	)

6561 
	#GL_INVALID_FRAMEBUFFER_OPERATION_EXT
 0x0506

	)

6562 
	#GL_MAX_RENDERBUFFER_SIZE_EXT
 0x84E8

	)

6563 
	#GL_FRAMEBUFFER_BINDING_EXT
 0x8CA6

	)

6564 
	#GL_RENDERBUFFER_BINDING_EXT
 0x8CA7

	)

6565 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT
 0x8CD0

	)

6566 
	#GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT
 0x8CD1

	)

6567 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT
 0x8CD2

	)

6568 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT
 0x8CD3

	)

6569 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT
 0x8CD4

	)

6570 
	#GL_FRAMEBUFFER_COMPLETE_EXT
 0x8CD5

	)

6571 
	#GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT
 0x8CD6

	)

6572 
	#GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT
 0x8CD7

	)

6573 
	#GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT
 0x8CD9

	)

6574 
	#GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT
 0x8CDA

	)

6575 
	#GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT
 0x8CDB

	)

6576 
	#GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT
 0x8CDC

	)

6577 
	#GL_FRAMEBUFFER_UNSUPPORTED_EXT
 0x8CDD

	)

6578 
	#GL_MAX_COLOR_ATTACHMENTS_EXT
 0x8CDF

	)

6579 
	#GL_COLOR_ATTACHMENT0_EXT
 0x8CE0

	)

6580 
	#GL_COLOR_ATTACHMENT1_EXT
 0x8CE1

	)

6581 
	#GL_COLOR_ATTACHMENT2_EXT
 0x8CE2

	)

6582 
	#GL_COLOR_ATTACHMENT3_EXT
 0x8CE3

	)

6583 
	#GL_COLOR_ATTACHMENT4_EXT
 0x8CE4

	)

6584 
	#GL_COLOR_ATTACHMENT5_EXT
 0x8CE5

	)

6585 
	#GL_COLOR_ATTACHMENT6_EXT
 0x8CE6

	)

6586 
	#GL_COLOR_ATTACHMENT7_EXT
 0x8CE7

	)

6587 
	#GL_COLOR_ATTACHMENT8_EXT
 0x8CE8

	)

6588 
	#GL_COLOR_ATTACHMENT9_EXT
 0x8CE9

	)

6589 
	#GL_COLOR_ATTACHMENT10_EXT
 0x8CEA

	)

6590 
	#GL_COLOR_ATTACHMENT11_EXT
 0x8CEB

	)

6591 
	#GL_COLOR_ATTACHMENT12_EXT
 0x8CEC

	)

6592 
	#GL_COLOR_ATTACHMENT13_EXT
 0x8CED

	)

6593 
	#GL_COLOR_ATTACHMENT14_EXT
 0x8CEE

	)

6594 
	#GL_COLOR_ATTACHMENT15_EXT
 0x8CEF

	)

6595 
	#GL_DEPTH_ATTACHMENT_EXT
 0x8D00

	)

6596 
	#GL_STENCIL_ATTACHMENT_EXT
 0x8D20

	)

6597 
	#GL_FRAMEBUFFER_EXT
 0x8D40

	)

6598 
	#GL_RENDERBUFFER_EXT
 0x8D41

	)

6599 
	#GL_RENDERBUFFER_WIDTH_EXT
 0x8D42

	)

6600 
	#GL_RENDERBUFFER_HEIGHT_EXT
 0x8D43

	)

6601 
	#GL_RENDERBUFFER_INTERNAL_FORMAT_EXT
 0x8D44

	)

6602 
	#GL_STENCIL_INDEX1_EXT
 0x8D46

	)

6603 
	#GL_STENCIL_INDEX4_EXT
 0x8D47

	)

6604 
	#GL_STENCIL_INDEX8_EXT
 0x8D48

	)

6605 
	#GL_STENCIL_INDEX16_EXT
 0x8D49

	)

6606 
	#GL_RENDERBUFFER_RED_SIZE_EXT
 0x8D50

	)

6607 
	#GL_RENDERBUFFER_GREEN_SIZE_EXT
 0x8D51

	)

6608 
	#GL_RENDERBUFFER_BLUE_SIZE_EXT
 0x8D52

	)

6609 
	#GL_RENDERBUFFER_ALPHA_SIZE_EXT
 0x8D53

	)

6610 
	#GL_RENDERBUFFER_DEPTH_SIZE_EXT
 0x8D54

	)

6611 
	#GL_RENDERBUFFER_STENCIL_SIZE_EXT
 0x8D55

	)

6612 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISRENDERBUFFEREXTPROC
Ë(
	tGLuöt
 
	tªndîbuf„r
);

6613 (
APIENTRYP
 
	tPFNGLBINDRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

6614 (
APIENTRYP
 
	tPFNGLDELETERENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tªndîbuf„rs
);

6615 (
APIENTRYP
 
	tPFNGLGENRENDERBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tªndîbuf„rs
);

6616 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
);

6617 (
APIENTRYP
 
	tPFNGLGETRENDERBUFFERPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6618 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFRAMEBUFFEREXTPROC
Ë(
	tGLuöt
 
	t‰amebuf„r
);

6619 (
APIENTRYP
 
	tPFNGLBINDFRAMEBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	t‰amebuf„r
);

6620 (
APIENTRYP
 
	tPFNGLDELETEFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t‰amebuf„rs
);

6621 (
APIENTRYP
 
	tPFNGLGENFRAMEBUFFERSEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t‰amebuf„rs
);

6622 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLCHECKFRAMEBUFFERSTATUSEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6623 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6624 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

6625 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tãxèrgë
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tzoff£t
);

6626 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERRENDERBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	tªndîbuf„π¨gë
, 
	tGLuöt
 
	tªndîbuf„r
);

6627 (
APIENTRYP
 
	tPFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6628 (
APIENTRYP
 
	tPFNGLGENERATEMIPMAPEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6629 #ifde‡
GL_GLEXT_PROTOTYPES


6630 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsRídîbuf„rEXT
 (
GLuöt
 
ªndîbuf„r
);

6631 
GLAPI
 
APIENTRY
 
glBödRídîbuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

6632 
GLAPI
 
APIENTRY
 
glDñëeRídîbuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ªndîbuf„rs
);

6633 
GLAPI
 
APIENTRY
 
glGíRídîbuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ªndîbuf„rs
);

6634 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
);

6635 
GLAPI
 
APIENTRY
 
glGëRídîbuf„rP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6636 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFømebuf„rEXT
 (
GLuöt
 
‰amebuf„r
);

6637 
GLAPI
 
APIENTRY
 
glBödFømebuf„rEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
‰amebuf„r
);

6638 
GLAPI
 
APIENTRY
 
glDñëeFømebuf„rsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
‰amebuf„rs
);

6639 
GLAPI
 
APIENTRY
 
glGíFømebuf„rsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
‰amebuf„rs
);

6640 
GLAPI
 
GLíum
 
APIENTRY
 
glCheckFømebuf„rSètusEXT
 (GLíum 
èrgë
);

6641 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª1DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

6642 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª2DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

6643 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuª3DEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ãxèrgë
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
zoff£t
);

6644 
GLAPI
 
APIENTRY
 
glFømebuf„rRídîbuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
ªndîbuf„π¨gë
, 
GLuöt
 
ªndîbuf„r
);

6645 
GLAPI
 
APIENTRY
 
glGëFømebuf„rAâachmítP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6646 
GLAPI
 
APIENTRY
 
glGíî©eMùm≠EXT
 (
GLíum
 
èrgë
);

6650 #i‚de‡
GL_EXT_‰amebuf„r_sRGB


6651 
	#GL_EXT_‰amebuf„r_sRGB
 1

	)

6652 
	#GL_FRAMEBUFFER_SRGB_EXT
 0x8DB9

	)

6653 
	#GL_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x8DBA

	)

6656 #i‚de‡
GL_EXT_geomëry_shadî4


6657 
	#GL_EXT_geomëry_shadî4
 1

	)

6658 
	#GL_GEOMETRY_SHADER_EXT
 0x8DD9

	)

6659 
	#GL_GEOMETRY_VERTICES_OUT_EXT
 0x8DDA

	)

6660 
	#GL_GEOMETRY_INPUT_TYPE_EXT
 0x8DDB

	)

6661 
	#GL_GEOMETRY_OUTPUT_TYPE_EXT
 0x8DDC

	)

6662 
	#GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT
 0x8C29

	)

6663 
	#GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT
 0x8DDD

	)

6664 
	#GL_MAX_VERTEX_VARYING_COMPONENTS_EXT
 0x8DDE

	)

6665 
	#GL_MAX_VARYING_COMPONENTS_EXT
 0x8B4B

	)

6666 
	#GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT
 0x8DDF

	)

6667 
	#GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT
 0x8DE0

	)

6668 
	#GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT
 0x8DE1

	)

6669 
	#GL_LINES_ADJACENCY_EXT
 0x000A

	)

6670 
	#GL_LINE_STRIP_ADJACENCY_EXT
 0x000B

	)

6671 
	#GL_TRIANGLES_ADJACENCY_EXT
 0x000C

	)

6672 
	#GL_TRIANGLE_STRIP_ADJACENCY_EXT
 0x000D

	)

6673 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT
 0x8DA8

	)

6674 
	#GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT
 0x8DA9

	)

6675 
	#GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT
 0x8DA7

	)

6676 
	#GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT
 0x8CD4

	)

6677 
	#GL_PROGRAM_POINT_SIZE_EXT
 0x8642

	)

6678 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERIEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

6679 #ifde‡
GL_GLEXT_PROTOTYPES


6680 
GLAPI
 
APIENTRY
 
glProgømP¨amëîiEXT
 (
GLuöt
 
¥ogøm
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

6684 #i‚de‡
GL_EXT_gpu_¥ogøm_∑ømëîs


6685 
	#GL_EXT_gpu_¥ogøm_∑ømëîs
 1

	)

6686 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6687 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6688 #ifde‡
GL_GLEXT_PROTOTYPES


6689 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

6690 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîs4fvEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

6694 #i‚de‡
GL_EXT_gpu_shadî4


6695 
	#GL_EXT_gpu_shadî4
 1

	)

6696 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT
 0x88FD

	)

6697 
	#GL_SAMPLER_1D_ARRAY_EXT
 0x8DC0

	)

6698 
	#GL_SAMPLER_2D_ARRAY_EXT
 0x8DC1

	)

6699 
	#GL_SAMPLER_BUFFER_EXT
 0x8DC2

	)

6700 
	#GL_SAMPLER_1D_ARRAY_SHADOW_EXT
 0x8DC3

	)

6701 
	#GL_SAMPLER_2D_ARRAY_SHADOW_EXT
 0x8DC4

	)

6702 
	#GL_SAMPLER_CUBE_SHADOW_EXT
 0x8DC5

	)

6703 
	#GL_UNSIGNED_INT_VEC2_EXT
 0x8DC6

	)

6704 
	#GL_UNSIGNED_INT_VEC3_EXT
 0x8DC7

	)

6705 
	#GL_UNSIGNED_INT_VEC4_EXT
 0x8DC8

	)

6706 
	#GL_INT_SAMPLER_1D_EXT
 0x8DC9

	)

6707 
	#GL_INT_SAMPLER_2D_EXT
 0x8DCA

	)

6708 
	#GL_INT_SAMPLER_3D_EXT
 0x8DCB

	)

6709 
	#GL_INT_SAMPLER_CUBE_EXT
 0x8DCC

	)

6710 
	#GL_INT_SAMPLER_2D_RECT_EXT
 0x8DCD

	)

6711 
	#GL_INT_SAMPLER_1D_ARRAY_EXT
 0x8DCE

	)

6712 
	#GL_INT_SAMPLER_2D_ARRAY_EXT
 0x8DCF

	)

6713 
	#GL_INT_SAMPLER_BUFFER_EXT
 0x8DD0

	)

6714 
	#GL_UNSIGNED_INT_SAMPLER_1D_EXT
 0x8DD1

	)

6715 
	#GL_UNSIGNED_INT_SAMPLER_2D_EXT
 0x8DD2

	)

6716 
	#GL_UNSIGNED_INT_SAMPLER_3D_EXT
 0x8DD3

	)

6717 
	#GL_UNSIGNED_INT_SAMPLER_CUBE_EXT
 0x8DD4

	)

6718 
	#GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT
 0x8DD5

	)

6719 
	#GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT
 0x8DD6

	)

6720 
	#GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT
 0x8DD7

	)

6721 
	#GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT
 0x8DD8

	)

6722 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_EXT
 0x8904

	)

6723 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_EXT
 0x8905

	)

6724 (
APIENTRYP
 
	tPFNGLGETUNIFORMUIVEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, GLuöà*
	t∑øms
);

6725 (
APIENTRYP
 
	tPFNGLBINDFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tcﬁ‹
, c⁄° 
	tGLch¨
 *
	t«me
);

6726 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETFRAGDATALOCATIONEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

6727 (
APIENTRYP
 
	tPFNGLUNIFORM1UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
);

6728 (
APIENTRYP
 
	tPFNGLUNIFORM2UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
);

6729 (
APIENTRYP
 
	tPFNGLUNIFORM3UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
);

6730 (
APIENTRYP
 
	tPFNGLUNIFORM4UIEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt
 
	tv0
, GLuöà
	tv1
, GLuöà
	tv2
, GLuöà
	tv3
);

6731 (
APIENTRYP
 
	tPFNGLUNIFORM1UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6732 (
APIENTRYP
 
	tPFNGLUNIFORM2UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6733 (
APIENTRYP
 
	tPFNGLUNIFORM3UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6734 (
APIENTRYP
 
	tPFNGLUNIFORM4UIVEXTPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	tvÆue
);

6735 #ifde‡
GL_GLEXT_PROTOTYPES


6736 
GLAPI
 
APIENTRY
 
glGëUnif‹muivEXT
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, GLuöà*
∑øms
);

6737 
GLAPI
 
APIENTRY
 
glBödFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, GLuöà
cﬁ‹
, c⁄° 
GLch¨
 *
«me
);

6738 
GLAPI
 
GLöt
 
APIENTRY
 
glGëFøgD©aLoˇti⁄EXT
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

6739 
GLAPI
 
APIENTRY
 
glUnif‹m1uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
);

6740 
GLAPI
 
APIENTRY
 
glUnif‹m2uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
);

6741 
GLAPI
 
APIENTRY
 
glUnif‹m3uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
);

6742 
GLAPI
 
APIENTRY
 
glUnif‹m4uiEXT
 (
GLöt
 
loˇti⁄
, 
GLuöt
 
v0
, GLuöà
v1
, GLuöà
v2
, GLuöà
v3
);

6743 
GLAPI
 
APIENTRY
 
glUnif‹m1uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6744 
GLAPI
 
APIENTRY
 
glUnif‹m2uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6745 
GLAPI
 
APIENTRY
 
glUnif‹m3uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6746 
GLAPI
 
APIENTRY
 
glUnif‹m4uivEXT
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
vÆue
);

6750 #i‚de‡
GL_EXT_hi°ogøm


6751 
	#GL_EXT_hi°ogøm
 1

	)

6752 
	#GL_HISTOGRAM_EXT
 0x8024

	)

6753 
	#GL_PROXY_HISTOGRAM_EXT
 0x8025

	)

6754 
	#GL_HISTOGRAM_WIDTH_EXT
 0x8026

	)

6755 
	#GL_HISTOGRAM_FORMAT_EXT
 0x8027

	)

6756 
	#GL_HISTOGRAM_RED_SIZE_EXT
 0x8028

	)

6757 
	#GL_HISTOGRAM_GREEN_SIZE_EXT
 0x8029

	)

6758 
	#GL_HISTOGRAM_BLUE_SIZE_EXT
 0x802A

	)

6759 
	#GL_HISTOGRAM_ALPHA_SIZE_EXT
 0x802B

	)

6760 
	#GL_HISTOGRAM_LUMINANCE_SIZE_EXT
 0x802C

	)

6761 
	#GL_HISTOGRAM_SINK_EXT
 0x802D

	)

6762 
	#GL_MINMAX_EXT
 0x802E

	)

6763 
	#GL_MINMAX_FORMAT_EXT
 0x802F

	)

6764 
	#GL_MINMAX_SINK_EXT
 0x8030

	)

6765 
	#GL_TABLE_TOO_LARGE_EXT
 0x8031

	)

6766 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

6767 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6768 (
APIENTRYP
 
	tPFNGLGETHISTOGRAMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6769 (
APIENTRYP
 
	tPFNGLGETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLboﬁón
 
	tª£t
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tvÆues
);

6770 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6771 (
APIENTRYP
 
	tPFNGLGETMINMAXPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6772 (
APIENTRYP
 
	tPFNGLHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	twidth
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

6773 (
APIENTRYP
 
	tPFNGLMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLboﬁón
 
	tsök
);

6774 (
APIENTRYP
 
	tPFNGLRESETHISTOGRAMEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6775 (
APIENTRYP
 
	tPFNGLRESETMINMAXEXTPROC
Ë(
	tGLíum
 
	tèrgë
);

6776 #ifde‡
GL_GLEXT_PROTOTYPES


6777 
GLAPI
 
APIENTRY
 
glGëHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

6778 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6779 
GLAPI
 
APIENTRY
 
glGëHi°ogømP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6780 
GLAPI
 
APIENTRY
 
glGëMömaxEXT
 (
GLíum
 
èrgë
, 
GLboﬁón
 
ª£t
, GLíum 
f‹m©
, GLíum 
ty≥
, *
vÆues
);

6781 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6782 
GLAPI
 
APIENTRY
 
glGëMömaxP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6783 
GLAPI
 
APIENTRY
 
glHi°ogømEXT
 (
GLíum
 
èrgë
, 
GLsizei
 
width
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

6784 
GLAPI
 
APIENTRY
 
glMömaxEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLboﬁón
 
sök
);

6785 
GLAPI
 
APIENTRY
 
glRe£tHi°ogømEXT
 (
GLíum
 
èrgë
);

6786 
GLAPI
 
APIENTRY
 
glRe£tMömaxEXT
 (
GLíum
 
èrgë
);

6790 #i‚de‡
GL_EXT_ödex_¨øy_f‹m©s


6791 
	#GL_EXT_ödex_¨øy_f‹m©s
 1

	)

6792 
	#GL_IUI_V2F_EXT
 0x81AD

	)

6793 
	#GL_IUI_V3F_EXT
 0x81AE

	)

6794 
	#GL_IUI_N3F_V2F_EXT
 0x81AF

	)

6795 
	#GL_IUI_N3F_V3F_EXT
 0x81B0

	)

6796 
	#GL_T2F_IUI_V2F_EXT
 0x81B1

	)

6797 
	#GL_T2F_IUI_V3F_EXT
 0x81B2

	)

6798 
	#GL_T2F_IUI_N3F_V2F_EXT
 0x81B3

	)

6799 
	#GL_T2F_IUI_N3F_V3F_EXT
 0x81B4

	)

6802 #i‚de‡
GL_EXT_ödex_func


6803 
	#GL_EXT_ödex_func
 1

	)

6804 
	#GL_INDEX_TEST_EXT
 0x81B5

	)

6805 
	#GL_INDEX_TEST_FUNC_EXT
 0x81B6

	)

6806 
	#GL_INDEX_TEST_REF_EXT
 0x81B7

	)

6807 (
APIENTRYP
 
	tPFNGLINDEXFUNCEXTPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGL˛ampf
 
	tªf
);

6808 #ifde‡
GL_GLEXT_PROTOTYPES


6809 
GLAPI
 
APIENTRY
 
glIndexFuncEXT
 (
GLíum
 
func
, 
GL˛ampf
 
ªf
);

6813 #i‚de‡
GL_EXT_ödex_m©îül


6814 
	#GL_EXT_ödex_m©îül
 1

	)

6815 
	#GL_INDEX_MATERIAL_EXT
 0x81B8

	)

6816 
	#GL_INDEX_MATERIAL_PARAMETER_EXT
 0x81B9

	)

6817 
	#GL_INDEX_MATERIAL_FACE_EXT
 0x81BA

	)

6818 (
APIENTRYP
 
	tPFNGLINDEXMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

6819 #ifde‡
GL_GLEXT_PROTOTYPES


6820 
GLAPI
 
APIENTRY
 
glIndexM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

6824 #i‚de‡
GL_EXT_ödex_ãxtuª


6825 
	#GL_EXT_ödex_ãxtuª
 1

	)

6828 #i‚de‡
GL_EXT_light_ãxtuª


6829 
	#GL_EXT_light_ãxtuª
 1

	)

6830 
	#GL_FRAGMENT_MATERIAL_EXT
 0x8349

	)

6831 
	#GL_FRAGMENT_NORMAL_EXT
 0x834A

	)

6832 
	#GL_FRAGMENT_COLOR_EXT
 0x834C

	)

6833 
	#GL_ATTENUATION_EXT
 0x834D

	)

6834 
	#GL_SHADOW_ATTENUATION_EXT
 0x834E

	)

6835 
	#GL_TEXTURE_APPLICATION_MODE_EXT
 0x834F

	)

6836 
	#GL_TEXTURE_LIGHT_EXT
 0x8350

	)

6837 
	#GL_TEXTURE_MATERIAL_FACE_EXT
 0x8351

	)

6838 
	#GL_TEXTURE_MATERIAL_PARAMETER_EXT
 0x8352

	)

6839 (
APIENTRYP
 
	tPFNGLAPPLYTEXTUREEXTPROC
Ë(
	tGLíum
 
	tmode
);

6840 (
APIENTRYP
 
	tPFNGLTEXTURELIGHTEXTPROC
Ë(
	tGLíum
 
	t≤ame
);

6841 (
APIENTRYP
 
	tPFNGLTEXTUREMATERIALEXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

6842 #ifde‡
GL_GLEXT_PROTOTYPES


6843 
GLAPI
 
APIENTRY
 
glAµlyTextuªEXT
 (
GLíum
 
mode
);

6844 
GLAPI
 
APIENTRY
 
glTextuªLightEXT
 (
GLíum
 
≤ame
);

6845 
GLAPI
 
APIENTRY
 
glTextuªM©îülEXT
 (
GLíum
 
Á˚
, GLíum 
mode
);

6849 #i‚de‡
GL_EXT_misc_©åibuã


6850 
	#GL_EXT_misc_©åibuã
 1

	)

6853 #i‚de‡
GL_EXT_mu…i_døw_¨øys


6854 
	#GL_EXT_mu…i_døw_¨øys
 1

	)

6855 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
);

6856 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSEXTPROC
Ë(
	tGLíum
 
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	t¥imcou¡
);

6857 #ifde‡
GL_GLEXT_PROTOTYPES


6858 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysEXT
 (
GLíum
 
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
);

6859 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsEXT
 (
GLíum
 
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
¥imcou¡
);

6863 #i‚de‡
GL_EXT_mu…ißm∂e


6864 
	#GL_EXT_mu…ißm∂e
 1

	)

6865 
	#GL_MULTISAMPLE_EXT
 0x809D

	)

6866 
	#GL_SAMPLE_ALPHA_TO_MASK_EXT
 0x809E

	)

6867 
	#GL_SAMPLE_ALPHA_TO_ONE_EXT
 0x809F

	)

6868 
	#GL_SAMPLE_MASK_EXT
 0x80A0

	)

6869 
	#GL_1PASS_EXT
 0x80A1

	)

6870 
	#GL_2PASS_0_EXT
 0x80A2

	)

6871 
	#GL_2PASS_1_EXT
 0x80A3

	)

6872 
	#GL_4PASS_0_EXT
 0x80A4

	)

6873 
	#GL_4PASS_1_EXT
 0x80A5

	)

6874 
	#GL_4PASS_2_EXT
 0x80A6

	)

6875 
	#GL_4PASS_3_EXT
 0x80A7

	)

6876 
	#GL_SAMPLE_BUFFERS_EXT
 0x80A8

	)

6877 
	#GL_SAMPLES_EXT
 0x80A9

	)

6878 
	#GL_SAMPLE_MASK_VALUE_EXT
 0x80AA

	)

6879 
	#GL_SAMPLE_MASK_INVERT_EXT
 0x80AB

	)

6880 
	#GL_SAMPLE_PATTERN_EXT
 0x80AC

	)

6881 
	#GL_MULTISAMPLE_BIT_EXT
 0x20000000

	)

6882 (
APIENTRYP
 
	tPFNGLSAMPLEMASKEXTPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

6883 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNEXTPROC
Ë(
	tGLíum
 
	t∑âîn
);

6884 #ifde‡
GL_GLEXT_PROTOTYPES


6885 
GLAPI
 
APIENTRY
 
glSam∂eMaskEXT
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

6886 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫EXT
 (
GLíum
 
∑âîn
);

6890 #i‚de‡
GL_EXT_∑cked_dïth_°ícû


6891 
	#GL_EXT_∑cked_dïth_°ícû
 1

	)

6892 
	#GL_DEPTH_STENCIL_EXT
 0x84F9

	)

6893 
	#GL_UNSIGNED_INT_24_8_EXT
 0x84FA

	)

6894 
	#GL_DEPTH24_STENCIL8_EXT
 0x88F0

	)

6895 
	#GL_TEXTURE_STENCIL_SIZE_EXT
 0x88F1

	)

6898 #i‚de‡
GL_EXT_∑cked_Êﬂt


6899 
	#GL_EXT_∑cked_Êﬂt
 1

	)

6900 
	#GL_R11F_G11F_B10F_EXT
 0x8C3A

	)

6901 
	#GL_UNSIGNED_INT_10F_11F_11F_REV_EXT
 0x8C3B

	)

6902 
	#GL_RGBA_SIGNED_COMPONENTS_EXT
 0x8C3C

	)

6905 #i‚de‡
GL_EXT_∑cked_pixñs


6906 
	#GL_EXT_∑cked_pixñs
 1

	)

6907 
	#GL_UNSIGNED_BYTE_3_3_2_EXT
 0x8032

	)

6908 
	#GL_UNSIGNED_SHORT_4_4_4_4_EXT
 0x8033

	)

6909 
	#GL_UNSIGNED_SHORT_5_5_5_1_EXT
 0x8034

	)

6910 
	#GL_UNSIGNED_INT_8_8_8_8_EXT
 0x8035

	)

6911 
	#GL_UNSIGNED_INT_10_10_10_2_EXT
 0x8036

	)

6914 #i‚de‡
GL_EXT_∑Àâed_ãxtuª


6915 
	#GL_EXT_∑Àâed_ãxtuª
 1

	)

6916 
	#GL_COLOR_INDEX1_EXT
 0x80E2

	)

6917 
	#GL_COLOR_INDEX2_EXT
 0x80E3

	)

6918 
	#GL_COLOR_INDEX4_EXT
 0x80E4

	)

6919 
	#GL_COLOR_INDEX8_EXT
 0x80E5

	)

6920 
	#GL_COLOR_INDEX12_EXT
 0x80E6

	)

6921 
	#GL_COLOR_INDEX16_EXT
 0x80E7

	)

6922 
	#GL_TEXTURE_INDEX_SIZE_EXT
 0x80ED

	)

6923 (
APIENTRYP
 
	tPFNGLCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫ÆF‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

6924 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	td©a
);

6925 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6926 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6927 #ifde‡
GL_GLEXT_PROTOTYPES


6928 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

6929 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀEXT
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
d©a
);

6930 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6931 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6935 #i‚de‡
GL_EXT_pixñ_buf„r_obje˘


6936 
	#GL_EXT_pixñ_buf„r_obje˘
 1

	)

6937 
	#GL_PIXEL_PACK_BUFFER_EXT
 0x88EB

	)

6938 
	#GL_PIXEL_UNPACK_BUFFER_EXT
 0x88EC

	)

6939 
	#GL_PIXEL_PACK_BUFFER_BINDING_EXT
 0x88ED

	)

6940 
	#GL_PIXEL_UNPACK_BUFFER_BINDING_EXT
 0x88EF

	)

6943 #i‚de‡
GL_EXT_pixñ_å™sf‹m


6944 
	#GL_EXT_pixñ_å™sf‹m
 1

	)

6945 
	#GL_PIXEL_TRANSFORM_2D_EXT
 0x8330

	)

6946 
	#GL_PIXEL_MAG_FILTER_EXT
 0x8331

	)

6947 
	#GL_PIXEL_MIN_FILTER_EXT
 0x8332

	)

6948 
	#GL_PIXEL_CUBIC_WEIGHT_EXT
 0x8333

	)

6949 
	#GL_CUBIC_EXT
 0x8334

	)

6950 
	#GL_AVERAGE_EXT
 0x8335

	)

6951 
	#GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8336

	)

6952 
	#GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT
 0x8337

	)

6953 
	#GL_PIXEL_TRANSFORM_2D_MATRIX_EXT
 0x8338

	)

6954 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

6955 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6956 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

6957 (
APIENTRYP
 
	tPFNGLPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6958 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

6959 (
APIENTRYP
 
	tPFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

6960 #ifde‡
GL_GLEXT_PROTOTYPES


6961 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîiEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

6962 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

6963 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

6964 
GLAPI
 
APIENTRY
 
glPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6965 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

6966 
GLAPI
 
APIENTRY
 
glGëPixñTønsf‹mP¨amëîfvEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

6970 #i‚de‡
GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ


6971 
	#GL_EXT_pixñ_å™sf‹m_cﬁ‹_èbÀ
 1

	)

6974 #i‚de‡
GL_EXT_poöt_∑ømëîs


6975 
	#GL_EXT_poöt_∑ømëîs
 1

	)

6976 
	#GL_POINT_SIZE_MIN_EXT
 0x8126

	)

6977 
	#GL_POINT_SIZE_MAX_EXT
 0x8127

	)

6978 
	#GL_POINT_FADE_THRESHOLD_SIZE_EXT
 0x8128

	)

6979 
	#GL_DISTANCE_ATTENUATION_EXT
 0x8129

	)

6980 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFEXTPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

6981 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

6982 #ifde‡
GL_GLEXT_PROTOTYPES


6983 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfEXT
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

6984 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvEXT
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

6988 #i‚de‡
GL_EXT_pﬁyg⁄_off£t


6989 
	#GL_EXT_pﬁyg⁄_off£t
 1

	)

6990 
	#GL_POLYGON_OFFSET_EXT
 0x8037

	)

6991 
	#GL_POLYGON_OFFSET_FACTOR_EXT
 0x8038

	)

6992 
	#GL_POLYGON_OFFSET_BIAS_EXT
 0x8039

	)

6993 (
APIENTRYP
 
	tPFNGLPOLYGONOFFSETEXTPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tbüs
);

6994 #ifde‡
GL_GLEXT_PROTOTYPES


6995 
GLAPI
 
APIENTRY
 
glPﬁyg⁄Off£tEXT
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
büs
);

6999 #i‚de‡
GL_EXT_¥ovokög_vîãx


7000 
	#GL_EXT_¥ovokög_vîãx
 1

	)

7001 
	#GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT
 0x8E4C

	)

7002 
	#GL_FIRST_VERTEX_CONVENTION_EXT
 0x8E4D

	)

7003 
	#GL_LAST_VERTEX_CONVENTION_EXT
 0x8E4E

	)

7004 
	#GL_PROVOKING_VERTEX_EXT
 0x8E4F

	)

7005 (
APIENTRYP
 
	tPFNGLPROVOKINGVERTEXEXTPROC
Ë(
	tGLíum
 
	tmode
);

7006 #ifde‡
GL_GLEXT_PROTOTYPES


7007 
GLAPI
 
APIENTRY
 
glProvokögVîãxEXT
 (
GLíum
 
mode
);

7011 #i‚de‡
GL_EXT_ªsˇÀ_n‹mÆ


7012 
	#GL_EXT_ªsˇÀ_n‹mÆ
 1

	)

7013 
	#GL_RESCALE_NORMAL_EXT
 0x803A

	)

7016 #i‚de‡
GL_EXT_£c⁄d¨y_cﬁ‹


7017 
	#GL_EXT_£c⁄d¨y_cﬁ‹
 1

	)

7018 
	#GL_COLOR_SUM_EXT
 0x8458

	)

7019 
	#GL_CURRENT_SECONDARY_COLOR_EXT
 0x8459

	)

7020 
	#GL_SECONDARY_COLOR_ARRAY_SIZE_EXT
 0x845A

	)

7021 
	#GL_SECONDARY_COLOR_ARRAY_TYPE_EXT
 0x845B

	)

7022 
	#GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT
 0x845C

	)

7023 
	#GL_SECONDARY_COLOR_ARRAY_POINTER_EXT
 0x845D

	)

7024 
	#GL_SECONDARY_COLOR_ARRAY_EXT
 0x845E

	)

7025 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BEXTPROC
Ë(
	tGLbyã
 
	tªd
, GLbyã 
	tgªí
, GLbyã 
	tblue
);

7026 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3BVEXTPROC
Ë(c⁄° 
	tGLbyã
 *
	tv
);

7027 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DEXTPROC
Ë(
	tGLdoubÀ
 
	tªd
, GLdoubÀ 
	tgªí
, GLdoubÀ 
	tblue
);

7028 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3DVEXTPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

7029 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FEXTPROC
Ë(
	tGLÊﬂt
 
	tªd
, GLÊﬂà
	tgªí
, GLÊﬂà
	tblue
);

7030 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3FVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

7031 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
);

7032 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3IVEXTPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

7033 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SEXTPROC
Ë(
	tGLsh‹t
 
	tªd
, GLsh‹à
	tgªí
, GLsh‹à
	tblue
);

7034 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3SVEXTPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

7035 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBEXTPROC
Ë(
	tGLubyã
 
	tªd
, GLubyã 
	tgªí
, GLubyã 
	tblue
);

7036 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UBVEXTPROC
Ë(c⁄° 
	tGLubyã
 *
	tv
);

7037 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
);

7038 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3UIVEXTPROC
Ë(c⁄° 
	tGLuöt
 *
	tv
);

7039 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USEXTPROC
Ë(
	tGLush‹t
 
	tªd
, GLush‹à
	tgªí
, GLush‹à
	tblue
);

7040 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3USVEXTPROC
Ë(c⁄° 
	tGLush‹t
 *
	tv
);

7041 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

7042 #ifde‡
GL_GLEXT_PROTOTYPES


7043 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bEXT
 (
GLbyã
 
ªd
, GLbyã 
gªí
, GLbyã 
blue
);

7044 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3bvEXT
 (c⁄° 
GLbyã
 *
v
);

7045 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dEXT
 (
GLdoubÀ
 
ªd
, GLdoubÀ 
gªí
, GLdoubÀ 
blue
);

7046 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3dvEXT
 (c⁄° 
GLdoubÀ
 *
v
);

7047 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fEXT
 (
GLÊﬂt
 
ªd
, GLÊﬂà
gªí
, GLÊﬂà
blue
);

7048 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3fvEXT
 (c⁄° 
GLÊﬂt
 *
v
);

7049 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3iEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
);

7050 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ivEXT
 (c⁄° 
GLöt
 *
v
);

7051 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3sEXT
 (
GLsh‹t
 
ªd
, GLsh‹à
gªí
, GLsh‹à
blue
);

7052 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3svEXT
 (c⁄° 
GLsh‹t
 *
v
);

7053 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubEXT
 (
GLubyã
 
ªd
, GLubyã 
gªí
, GLubyã 
blue
);

7054 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3ubvEXT
 (c⁄° 
GLubyã
 *
v
);

7055 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
);

7056 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3uivEXT
 (c⁄° 
GLuöt
 *
v
);

7057 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usEXT
 (
GLush‹t
 
ªd
, GLush‹à
gªí
, GLush‹à
blue
);

7058 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3usvEXT
 (c⁄° 
GLush‹t
 *
v
);

7059 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

7063 #i‚de‡
GL_EXT_£∑øã_shadî_obje˘s


7064 
	#GL_EXT_£∑øã_shadî_obje˘s
 1

	)

7065 
	#GL_ACTIVE_PROGRAM_EXT
 0x8B8D

	)

7066 (
APIENTRYP
 
	tPFNGLUSESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLuöt
 
	t¥ogøm
);

7067 (
APIENTRYP
 
	tPFNGLACTIVEPROGRAMEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
);

7068 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLCREATESHADERPROGRAMEXTPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° 
	tGLch¨
 *
	t°rög
);

7069 #ifde‡
GL_GLEXT_PROTOTYPES


7070 
GLAPI
 
APIENTRY
 
glU£ShadîProgømEXT
 (
GLíum
 
ty≥
, 
GLuöt
 
¥ogøm
);

7071 
GLAPI
 
APIENTRY
 
glA˘iveProgømEXT
 (
GLuöt
 
¥ogøm
);

7072 
GLAPI
 
GLuöt
 
APIENTRY
 
glCª©eShadîProgømEXT
 (
GLíum
 
ty≥
, c⁄° 
GLch¨
 *
°rög
);

7076 #i‚de‡
GL_EXT_£∑øã_•ecuœr_cﬁ‹


7077 
	#GL_EXT_£∑øã_•ecuœr_cﬁ‹
 1

	)

7078 
	#GL_LIGHT_MODEL_COLOR_CONTROL_EXT
 0x81F8

	)

7079 
	#GL_SINGLE_COLOR_EXT
 0x81F9

	)

7080 
	#GL_SEPARATE_SPECULAR_COLOR_EXT
 0x81FA

	)

7083 #i‚de‡
GL_EXT_shadî_image_lﬂd_°‹e


7084 
	#GL_EXT_shadî_image_lﬂd_°‹e
 1

	)

7085 
	#GL_MAX_IMAGE_UNITS_EXT
 0x8F38

	)

7086 
	#GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT
 0x8F39

	)

7087 
	#GL_IMAGE_BINDING_NAME_EXT
 0x8F3A

	)

7088 
	#GL_IMAGE_BINDING_LEVEL_EXT
 0x8F3B

	)

7089 
	#GL_IMAGE_BINDING_LAYERED_EXT
 0x8F3C

	)

7090 
	#GL_IMAGE_BINDING_LAYER_EXT
 0x8F3D

	)

7091 
	#GL_IMAGE_BINDING_ACCESS_EXT
 0x8F3E

	)

7092 
	#GL_IMAGE_1D_EXT
 0x904C

	)

7093 
	#GL_IMAGE_2D_EXT
 0x904D

	)

7094 
	#GL_IMAGE_3D_EXT
 0x904E

	)

7095 
	#GL_IMAGE_2D_RECT_EXT
 0x904F

	)

7096 
	#GL_IMAGE_CUBE_EXT
 0x9050

	)

7097 
	#GL_IMAGE_BUFFER_EXT
 0x9051

	)

7098 
	#GL_IMAGE_1D_ARRAY_EXT
 0x9052

	)

7099 
	#GL_IMAGE_2D_ARRAY_EXT
 0x9053

	)

7100 
	#GL_IMAGE_CUBE_MAP_ARRAY_EXT
 0x9054

	)

7101 
	#GL_IMAGE_2D_MULTISAMPLE_EXT
 0x9055

	)

7102 
	#GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9056

	)

7103 
	#GL_INT_IMAGE_1D_EXT
 0x9057

	)

7104 
	#GL_INT_IMAGE_2D_EXT
 0x9058

	)

7105 
	#GL_INT_IMAGE_3D_EXT
 0x9059

	)

7106 
	#GL_INT_IMAGE_2D_RECT_EXT
 0x905A

	)

7107 
	#GL_INT_IMAGE_CUBE_EXT
 0x905B

	)

7108 
	#GL_INT_IMAGE_BUFFER_EXT
 0x905C

	)

7109 
	#GL_INT_IMAGE_1D_ARRAY_EXT
 0x905D

	)

7110 
	#GL_INT_IMAGE_2D_ARRAY_EXT
 0x905E

	)

7111 
	#GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x905F

	)

7112 
	#GL_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x9060

	)

7113 
	#GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x9061

	)

7114 
	#GL_UNSIGNED_INT_IMAGE_1D_EXT
 0x9062

	)

7115 
	#GL_UNSIGNED_INT_IMAGE_2D_EXT
 0x9063

	)

7116 
	#GL_UNSIGNED_INT_IMAGE_3D_EXT
 0x9064

	)

7117 
	#GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT
 0x9065

	)

7118 
	#GL_UNSIGNED_INT_IMAGE_CUBE_EXT
 0x9066

	)

7119 
	#GL_UNSIGNED_INT_IMAGE_BUFFER_EXT
 0x9067

	)

7120 
	#GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT
 0x9068

	)

7121 
	#GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT
 0x9069

	)

7122 
	#GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT
 0x906A

	)

7123 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT
 0x906B

	)

7124 
	#GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT
 0x906C

	)

7125 
	#GL_MAX_IMAGE_SAMPLES_EXT
 0x906D

	)

7126 
	#GL_IMAGE_BINDING_FORMAT_EXT
 0x906E

	)

7127 
	#GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT
 0x00000001

	)

7128 
	#GL_ELEMENT_ARRAY_BARRIER_BIT_EXT
 0x00000002

	)

7129 
	#GL_UNIFORM_BARRIER_BIT_EXT
 0x00000004

	)

7130 
	#GL_TEXTURE_FETCH_BARRIER_BIT_EXT
 0x00000008

	)

7131 
	#GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT
 0x00000020

	)

7132 
	#GL_COMMAND_BARRIER_BIT_EXT
 0x00000040

	)

7133 
	#GL_PIXEL_BUFFER_BARRIER_BIT_EXT
 0x00000080

	)

7134 
	#GL_TEXTURE_UPDATE_BARRIER_BIT_EXT
 0x00000100

	)

7135 
	#GL_BUFFER_UPDATE_BARRIER_BIT_EXT
 0x00000200

	)

7136 
	#GL_FRAMEBUFFER_BARRIER_BIT_EXT
 0x00000400

	)

7137 
	#GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT
 0x00000800

	)

7138 
	#GL_ATOMIC_COUNTER_BARRIER_BIT_EXT
 0x00001000

	)

7139 
	#GL_ALL_BARRIER_BITS_EXT
 0xFFFFFFFF

	)

7140 (
APIENTRYP
 
	tPFNGLBINDIMAGETEXTUREEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tac˚ss
, GLöà
	tf‹m©
);

7141 (
APIENTRYP
 
	tPFNGLMEMORYBARRIEREXTPROC
Ë(
	tGLbôfõld
 
	tb¨rõrs
);

7142 #ifde‡
GL_GLEXT_PROTOTYPES


7143 
GLAPI
 
APIENTRY
 
glBödImageTextuªEXT
 (
GLuöt
 
ödex
, GLuöà
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
ac˚ss
, GLöà
f‹m©
);

7144 
GLAPI
 
APIENTRY
 
glMem‹yB¨rõrEXT
 (
GLbôfõld
 
b¨rõrs
);

7148 #i‚de‡
GL_EXT_shadî_öãgî_mix


7149 
	#GL_EXT_shadî_öãgî_mix
 1

	)

7152 #i‚de‡
GL_EXT_shadow_funcs


7153 
	#GL_EXT_shadow_funcs
 1

	)

7156 #i‚de‡
GL_EXT_sh¨ed_ãxtuª_∑Àâe


7157 
	#GL_EXT_sh¨ed_ãxtuª_∑Àâe
 1

	)

7158 
	#GL_SHARED_TEXTURE_PALETTE_EXT
 0x81FB

	)

7161 #i‚de‡
GL_EXT_°ícû_˛ór_èg


7162 
	#GL_EXT_°ícû_˛ór_èg
 1

	)

7163 
	#GL_STENCIL_TAG_BITS_EXT
 0x88F2

	)

7164 
	#GL_STENCIL_CLEAR_TAG_VALUE_EXT
 0x88F3

	)

7165 (
APIENTRYP
 
	tPFNGLSTENCILCLEARTAGEXTPROC
Ë(
	tGLsizei
 
	t°ícûTagBôs
, 
	tGLuöt
 
	t°ícûCÀ¨Tag
);

7166 #ifde‡
GL_GLEXT_PROTOTYPES


7167 
GLAPI
 
APIENTRY
 
glSãncûCÀ¨TagEXT
 (
GLsizei
 
°ícûTagBôs
, 
GLuöt
 
°ícûCÀ¨Tag
);

7171 #i‚de‡
GL_EXT_°ícû_two_side


7172 
	#GL_EXT_°ícû_two_side
 1

	)

7173 
	#GL_STENCIL_TEST_TWO_SIDE_EXT
 0x8910

	)

7174 
	#GL_ACTIVE_STENCIL_FACE_EXT
 0x8911

	)

7175 (
APIENTRYP
 
	tPFNGLACTIVESTENCILFACEEXTPROC
Ë(
	tGLíum
 
	tÁ˚
);

7176 #ifde‡
GL_GLEXT_PROTOTYPES


7177 
GLAPI
 
APIENTRY
 
glA˘iveSãncûFa˚EXT
 (
GLíum
 
Á˚
);

7181 #i‚de‡
GL_EXT_°ícû_wøp


7182 
	#GL_EXT_°ícû_wøp
 1

	)

7183 
	#GL_INCR_WRAP_EXT
 0x8507

	)

7184 
	#GL_DECR_WRAP_EXT
 0x8508

	)

7187 #i‚de‡
GL_EXT_subãxtuª


7188 
	#GL_EXT_subãxtuª
 1

	)

7189 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE1DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7190 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE2DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7191 #ifde‡
GL_GLEXT_PROTOTYPES


7192 
GLAPI
 
APIENTRY
 
glTexSubImage1DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7193 
GLAPI
 
APIENTRY
 
glTexSubImage2DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7197 #i‚de‡
GL_EXT_ãxtuª


7198 
	#GL_EXT_ãxtuª
 1

	)

7199 
	#GL_ALPHA4_EXT
 0x803B

	)

7200 
	#GL_ALPHA8_EXT
 0x803C

	)

7201 
	#GL_ALPHA12_EXT
 0x803D

	)

7202 
	#GL_ALPHA16_EXT
 0x803E

	)

7203 
	#GL_LUMINANCE4_EXT
 0x803F

	)

7204 
	#GL_LUMINANCE8_EXT
 0x8040

	)

7205 
	#GL_LUMINANCE12_EXT
 0x8041

	)

7206 
	#GL_LUMINANCE16_EXT
 0x8042

	)

7207 
	#GL_LUMINANCE4_ALPHA4_EXT
 0x8043

	)

7208 
	#GL_LUMINANCE6_ALPHA2_EXT
 0x8044

	)

7209 
	#GL_LUMINANCE8_ALPHA8_EXT
 0x8045

	)

7210 
	#GL_LUMINANCE12_ALPHA4_EXT
 0x8046

	)

7211 
	#GL_LUMINANCE12_ALPHA12_EXT
 0x8047

	)

7212 
	#GL_LUMINANCE16_ALPHA16_EXT
 0x8048

	)

7213 
	#GL_INTENSITY_EXT
 0x8049

	)

7214 
	#GL_INTENSITY4_EXT
 0x804A

	)

7215 
	#GL_INTENSITY8_EXT
 0x804B

	)

7216 
	#GL_INTENSITY12_EXT
 0x804C

	)

7217 
	#GL_INTENSITY16_EXT
 0x804D

	)

7218 
	#GL_RGB2_EXT
 0x804E

	)

7219 
	#GL_RGB4_EXT
 0x804F

	)

7220 
	#GL_RGB5_EXT
 0x8050

	)

7221 
	#GL_RGB8_EXT
 0x8051

	)

7222 
	#GL_RGB10_EXT
 0x8052

	)

7223 
	#GL_RGB12_EXT
 0x8053

	)

7224 
	#GL_RGB16_EXT
 0x8054

	)

7225 
	#GL_RGBA2_EXT
 0x8055

	)

7226 
	#GL_RGBA4_EXT
 0x8056

	)

7227 
	#GL_RGB5_A1_EXT
 0x8057

	)

7228 
	#GL_RGBA8_EXT
 0x8058

	)

7229 
	#GL_RGB10_A2_EXT
 0x8059

	)

7230 
	#GL_RGBA12_EXT
 0x805A

	)

7231 
	#GL_RGBA16_EXT
 0x805B

	)

7232 
	#GL_TEXTURE_RED_SIZE_EXT
 0x805C

	)

7233 
	#GL_TEXTURE_GREEN_SIZE_EXT
 0x805D

	)

7234 
	#GL_TEXTURE_BLUE_SIZE_EXT
 0x805E

	)

7235 
	#GL_TEXTURE_ALPHA_SIZE_EXT
 0x805F

	)

7236 
	#GL_TEXTURE_LUMINANCE_SIZE_EXT
 0x8060

	)

7237 
	#GL_TEXTURE_INTENSITY_SIZE_EXT
 0x8061

	)

7238 
	#GL_REPLACE_EXT
 0x8062

	)

7239 
	#GL_PROXY_TEXTURE_1D_EXT
 0x8063

	)

7240 
	#GL_PROXY_TEXTURE_2D_EXT
 0x8064

	)

7241 
	#GL_TEXTURE_TOO_LARGE_EXT
 0x8065

	)

7244 #i‚de‡
GL_EXT_ãxtuª3D


7245 
	#GL_EXT_ãxtuª3D
 1

	)

7246 
	#GL_PACK_SKIP_IMAGES_EXT
 0x806B

	)

7247 
	#GL_PACK_IMAGE_HEIGHT_EXT
 0x806C

	)

7248 
	#GL_UNPACK_SKIP_IMAGES_EXT
 0x806D

	)

7249 
	#GL_UNPACK_IMAGE_HEIGHT_EXT
 0x806E

	)

7250 
	#GL_TEXTURE_3D_EXT
 0x806F

	)

7251 
	#GL_PROXY_TEXTURE_3D_EXT
 0x8070

	)

7252 
	#GL_TEXTURE_DEPTH_EXT
 0x8071

	)

7253 
	#GL_TEXTURE_WRAP_R_EXT
 0x8072

	)

7254 
	#GL_MAX_3D_TEXTURE_SIZE_EXT
 0x8073

	)

7255 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7256 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE3DEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

7257 #ifde‡
GL_GLEXT_PROTOTYPES


7258 
GLAPI
 
APIENTRY
 
glTexImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7259 
GLAPI
 
APIENTRY
 
glTexSubImage3DEXT
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

7263 #i‚de‡
GL_EXT_ãxtuª_¨øy


7264 
	#GL_EXT_ãxtuª_¨øy
 1

	)

7265 
	#GL_TEXTURE_1D_ARRAY_EXT
 0x8C18

	)

7266 
	#GL_PROXY_TEXTURE_1D_ARRAY_EXT
 0x8C19

	)

7267 
	#GL_TEXTURE_2D_ARRAY_EXT
 0x8C1A

	)

7268 
	#GL_PROXY_TEXTURE_2D_ARRAY_EXT
 0x8C1B

	)

7269 
	#GL_TEXTURE_BINDING_1D_ARRAY_EXT
 0x8C1C

	)

7270 
	#GL_TEXTURE_BINDING_2D_ARRAY_EXT
 0x8C1D

	)

7271 
	#GL_MAX_ARRAY_TEXTURE_LAYERS_EXT
 0x88FF

	)

7272 
	#GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT
 0x884E

	)

7275 #i‚de‡
GL_EXT_ãxtuª_buf„r_obje˘


7276 
	#GL_EXT_ãxtuª_buf„r_obje˘
 1

	)

7277 
	#GL_TEXTURE_BUFFER_EXT
 0x8C2A

	)

7278 
	#GL_MAX_TEXTURE_BUFFER_SIZE_EXT
 0x8C2B

	)

7279 
	#GL_TEXTURE_BINDING_BUFFER_EXT
 0x8C2C

	)

7280 
	#GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT
 0x8C2D

	)

7281 
	#GL_TEXTURE_BUFFER_FORMAT_EXT
 0x8C2E

	)

7282 (
APIENTRYP
 
	tPFNGLTEXBUFFEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLuöt
 
	tbuf„r
);

7283 #ifde‡
GL_GLEXT_PROTOTYPES


7284 
GLAPI
 
APIENTRY
 
glTexBuf„rEXT
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLuöt
 
buf„r
);

7288 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_œtc


7289 
	#GL_EXT_ãxtuª_com¥essi⁄_œtc
 1

	)

7290 
	#GL_COMPRESSED_LUMINANCE_LATC1_EXT
 0x8C70

	)

7291 
	#GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT
 0x8C71

	)

7292 
	#GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C72

	)

7293 
	#GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT
 0x8C73

	)

7296 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_rgtc


7297 
	#GL_EXT_ãxtuª_com¥essi⁄_rgtc
 1

	)

7298 
	#GL_COMPRESSED_RED_RGTC1_EXT
 0x8DBB

	)

7299 
	#GL_COMPRESSED_SIGNED_RED_RGTC1_EXT
 0x8DBC

	)

7300 
	#GL_COMPRESSED_RED_GREEN_RGTC2_EXT
 0x8DBD

	)

7301 
	#GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT
 0x8DBE

	)

7304 #i‚de‡
GL_EXT_ãxtuª_com¥essi⁄_s3tc


7305 
	#GL_EXT_ãxtuª_com¥essi⁄_s3tc
 1

	)

7306 
	#GL_COMPRESSED_RGB_S3TC_DXT1_EXT
 0x83F0

	)

7307 
	#GL_COMPRESSED_RGBA_S3TC_DXT1_EXT
 0x83F1

	)

7308 
	#GL_COMPRESSED_RGBA_S3TC_DXT3_EXT
 0x83F2

	)

7309 
	#GL_COMPRESSED_RGBA_S3TC_DXT5_EXT
 0x83F3

	)

7312 #i‚de‡
GL_EXT_ãxtuª_cube_m≠


7313 
	#GL_EXT_ãxtuª_cube_m≠
 1

	)

7314 
	#GL_NORMAL_MAP_EXT
 0x8511

	)

7315 
	#GL_REFLECTION_MAP_EXT
 0x8512

	)

7316 
	#GL_TEXTURE_CUBE_MAP_EXT
 0x8513

	)

7317 
	#GL_TEXTURE_BINDING_CUBE_MAP_EXT
 0x8514

	)

7318 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT
 0x8515

	)

7319 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT
 0x8516

	)

7320 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT
 0x8517

	)

7321 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT
 0x8518

	)

7322 
	#GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT
 0x8519

	)

7323 
	#GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT
 0x851A

	)

7324 
	#GL_PROXY_TEXTURE_CUBE_MAP_EXT
 0x851B

	)

7325 
	#GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT
 0x851C

	)

7328 #i‚de‡
GL_EXT_ãxtuª_ív_add


7329 
	#GL_EXT_ãxtuª_ív_add
 1

	)

7332 #i‚de‡
GL_EXT_ãxtuª_ív_comböe


7333 
	#GL_EXT_ãxtuª_ív_comböe
 1

	)

7334 
	#GL_COMBINE_EXT
 0x8570

	)

7335 
	#GL_COMBINE_RGB_EXT
 0x8571

	)

7336 
	#GL_COMBINE_ALPHA_EXT
 0x8572

	)

7337 
	#GL_RGB_SCALE_EXT
 0x8573

	)

7338 
	#GL_ADD_SIGNED_EXT
 0x8574

	)

7339 
	#GL_INTERPOLATE_EXT
 0x8575

	)

7340 
	#GL_CONSTANT_EXT
 0x8576

	)

7341 
	#GL_PRIMARY_COLOR_EXT
 0x8577

	)

7342 
	#GL_PREVIOUS_EXT
 0x8578

	)

7343 
	#GL_SOURCE0_RGB_EXT
 0x8580

	)

7344 
	#GL_SOURCE1_RGB_EXT
 0x8581

	)

7345 
	#GL_SOURCE2_RGB_EXT
 0x8582

	)

7346 
	#GL_SOURCE0_ALPHA_EXT
 0x8588

	)

7347 
	#GL_SOURCE1_ALPHA_EXT
 0x8589

	)

7348 
	#GL_SOURCE2_ALPHA_EXT
 0x858A

	)

7349 
	#GL_OPERAND0_RGB_EXT
 0x8590

	)

7350 
	#GL_OPERAND1_RGB_EXT
 0x8591

	)

7351 
	#GL_OPERAND2_RGB_EXT
 0x8592

	)

7352 
	#GL_OPERAND0_ALPHA_EXT
 0x8598

	)

7353 
	#GL_OPERAND1_ALPHA_EXT
 0x8599

	)

7354 
	#GL_OPERAND2_ALPHA_EXT
 0x859A

	)

7357 #i‚de‡
GL_EXT_ãxtuª_ív_dŸ3


7358 
	#GL_EXT_ãxtuª_ív_dŸ3
 1

	)

7359 
	#GL_DOT3_RGB_EXT
 0x8740

	)

7360 
	#GL_DOT3_RGBA_EXT
 0x8741

	)

7363 #i‚de‡
GL_EXT_ãxtuª_fûãr_™isŸr›ic


7364 
	#GL_EXT_ãxtuª_fûãr_™isŸr›ic
 1

	)

7365 
	#GL_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FE

	)

7366 
	#GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT
 0x84FF

	)

7369 #i‚de‡
GL_EXT_ãxtuª_öãgî


7370 
	#GL_EXT_ãxtuª_öãgî
 1

	)

7371 
	#GL_RGBA32UI_EXT
 0x8D70

	)

7372 
	#GL_RGB32UI_EXT
 0x8D71

	)

7373 
	#GL_ALPHA32UI_EXT
 0x8D72

	)

7374 
	#GL_INTENSITY32UI_EXT
 0x8D73

	)

7375 
	#GL_LUMINANCE32UI_EXT
 0x8D74

	)

7376 
	#GL_LUMINANCE_ALPHA32UI_EXT
 0x8D75

	)

7377 
	#GL_RGBA16UI_EXT
 0x8D76

	)

7378 
	#GL_RGB16UI_EXT
 0x8D77

	)

7379 
	#GL_ALPHA16UI_EXT
 0x8D78

	)

7380 
	#GL_INTENSITY16UI_EXT
 0x8D79

	)

7381 
	#GL_LUMINANCE16UI_EXT
 0x8D7A

	)

7382 
	#GL_LUMINANCE_ALPHA16UI_EXT
 0x8D7B

	)

7383 
	#GL_RGBA8UI_EXT
 0x8D7C

	)

7384 
	#GL_RGB8UI_EXT
 0x8D7D

	)

7385 
	#GL_ALPHA8UI_EXT
 0x8D7E

	)

7386 
	#GL_INTENSITY8UI_EXT
 0x8D7F

	)

7387 
	#GL_LUMINANCE8UI_EXT
 0x8D80

	)

7388 
	#GL_LUMINANCE_ALPHA8UI_EXT
 0x8D81

	)

7389 
	#GL_RGBA32I_EXT
 0x8D82

	)

7390 
	#GL_RGB32I_EXT
 0x8D83

	)

7391 
	#GL_ALPHA32I_EXT
 0x8D84

	)

7392 
	#GL_INTENSITY32I_EXT
 0x8D85

	)

7393 
	#GL_LUMINANCE32I_EXT
 0x8D86

	)

7394 
	#GL_LUMINANCE_ALPHA32I_EXT
 0x8D87

	)

7395 
	#GL_RGBA16I_EXT
 0x8D88

	)

7396 
	#GL_RGB16I_EXT
 0x8D89

	)

7397 
	#GL_ALPHA16I_EXT
 0x8D8A

	)

7398 
	#GL_INTENSITY16I_EXT
 0x8D8B

	)

7399 
	#GL_LUMINANCE16I_EXT
 0x8D8C

	)

7400 
	#GL_LUMINANCE_ALPHA16I_EXT
 0x8D8D

	)

7401 
	#GL_RGBA8I_EXT
 0x8D8E

	)

7402 
	#GL_RGB8I_EXT
 0x8D8F

	)

7403 
	#GL_ALPHA8I_EXT
 0x8D90

	)

7404 
	#GL_INTENSITY8I_EXT
 0x8D91

	)

7405 
	#GL_LUMINANCE8I_EXT
 0x8D92

	)

7406 
	#GL_LUMINANCE_ALPHA8I_EXT
 0x8D93

	)

7407 
	#GL_RED_INTEGER_EXT
 0x8D94

	)

7408 
	#GL_GREEN_INTEGER_EXT
 0x8D95

	)

7409 
	#GL_BLUE_INTEGER_EXT
 0x8D96

	)

7410 
	#GL_ALPHA_INTEGER_EXT
 0x8D97

	)

7411 
	#GL_RGB_INTEGER_EXT
 0x8D98

	)

7412 
	#GL_RGBA_INTEGER_EXT
 0x8D99

	)

7413 
	#GL_BGR_INTEGER_EXT
 0x8D9A

	)

7414 
	#GL_BGRA_INTEGER_EXT
 0x8D9B

	)

7415 
	#GL_LUMINANCE_INTEGER_EXT
 0x8D9C

	)

7416 
	#GL_LUMINANCE_ALPHA_INTEGER_EXT
 0x8D9D

	)

7417 
	#GL_RGBA_INTEGER_MODE_EXT
 0x8D9E

	)

7418 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

7419 (
APIENTRYP
 
	tPFNGLTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLuöt
 *
	t∑øms
);

7420 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7421 (
APIENTRYP
 
	tPFNGLGETTEXPARAMETERIUIVEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt
 *
	t∑øms
);

7422 (
APIENTRYP
 
	tPFNGLCLEARCOLORIIEXTPROC
Ë(
	tGLöt
 
	tªd
, GLöà
	tgªí
, GLöà
	tblue
, GLöà
	tÆpha
);

7423 (
APIENTRYP
 
	tPFNGLCLEARCOLORIUIEXTPROC
Ë(
	tGLuöt
 
	tªd
, GLuöà
	tgªí
, GLuöà
	tblue
, GLuöà
	tÆpha
);

7424 #ifde‡
GL_GLEXT_PROTOTYPES


7425 
GLAPI
 
APIENTRY
 
glTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7426 
GLAPI
 
APIENTRY
 
glTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLuöt
 *
∑øms
);

7427 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7428 
GLAPI
 
APIENTRY
 
glGëTexP¨amëîIuivEXT
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt
 *
∑øms
);

7429 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IiEXT
 (
GLöt
 
ªd
, GLöà
gªí
, GLöà
blue
, GLöà
Æpha
);

7430 
GLAPI
 
APIENTRY
 
glCÀ¨Cﬁ‹IuiEXT
 (
GLuöt
 
ªd
, GLuöà
gªí
, GLuöà
blue
, GLuöà
Æpha
);

7434 #i‚de‡
GL_EXT_ãxtuª_lod_büs


7435 
	#GL_EXT_ãxtuª_lod_büs
 1

	)

7436 
	#GL_MAX_TEXTURE_LOD_BIAS_EXT
 0x84FD

	)

7437 
	#GL_TEXTURE_FILTER_CONTROL_EXT
 0x8500

	)

7438 
	#GL_TEXTURE_LOD_BIAS_EXT
 0x8501

	)

7441 #i‚de‡
GL_EXT_ãxtuª_múr‹_˛amp


7442 
	#GL_EXT_ãxtuª_múr‹_˛amp
 1

	)

7443 
	#GL_MIRROR_CLAMP_EXT
 0x8742

	)

7444 
	#GL_MIRROR_CLAMP_TO_EDGE_EXT
 0x8743

	)

7445 
	#GL_MIRROR_CLAMP_TO_BORDER_EXT
 0x8912

	)

7448 #i‚de‡
GL_EXT_ãxtuª_obje˘


7449 
	#GL_EXT_ãxtuª_obje˘
 1

	)

7450 
	#GL_TEXTURE_PRIORITY_EXT
 0x8066

	)

7451 
	#GL_TEXTURE_RESIDENT_EXT
 0x8067

	)

7452 
	#GL_TEXTURE_1D_BINDING_EXT
 0x8068

	)

7453 
	#GL_TEXTURE_2D_BINDING_EXT
 0x8069

	)

7454 
	#GL_TEXTURE_3D_BINDING_EXT
 0x806A

	)

7455 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLARETEXTURESRESIDENTEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, 
	tGLboﬁón
 *
	tªsidí˚s
);

7456 (
APIENTRYP
 
	tPFNGLBINDTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tãxtuª
);

7457 (
APIENTRYP
 
	tPFNGLDELETETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
);

7458 (
APIENTRYP
 
	tPFNGLGENTEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tãxtuªs
);

7459 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREEXTPROC
Ë(
	tGLuöt
 
	tãxtuª
);

7460 (
APIENTRYP
 
	tPFNGLPRIORITIZETEXTURESEXTPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tãxtuªs
, c⁄° 
	tGL˛ampf
 *
	t¥i‹ôõs
);

7461 #ifde‡
GL_GLEXT_PROTOTYPES


7462 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªTextuªsResidítEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, GLboﬁó¿*
ªsidí˚s
);

7463 
GLAPI
 
APIENTRY
 
glBödTextuªEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ãxtuª
);

7464 
GLAPI
 
APIENTRY
 
glDñëeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
);

7465 
GLAPI
 
APIENTRY
 
glGíTextuªsEXT
 (
GLsizei
 
n
, 
GLuöt
 *
ãxtuªs
);

7466 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªEXT
 (
GLuöt
 
ãxtuª
);

7467 
GLAPI
 
APIENTRY
 
glPri‹ôizeTextuªsEXT
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ãxtuªs
, c⁄° 
GL˛ampf
 *
¥i‹ôõs
);

7471 #i‚de‡
GL_EXT_ãxtuª_≥πurb_n‹mÆ


7472 
	#GL_EXT_ãxtuª_≥πurb_n‹mÆ
 1

	)

7473 
	#GL_PERTURB_EXT
 0x85AE

	)

7474 
	#GL_TEXTURE_NORMAL_EXT
 0x85AF

	)

7475 (
APIENTRYP
 
	tPFNGLTEXTURENORMALEXTPROC
Ë(
	tGLíum
 
	tmode
);

7476 #ifde‡
GL_GLEXT_PROTOTYPES


7477 
GLAPI
 
APIENTRY
 
glTextuªN‹mÆEXT
 (
GLíum
 
mode
);

7481 #i‚de‡
GL_EXT_ãxtuª_sRGB


7482 
	#GL_EXT_ãxtuª_sRGB
 1

	)

7483 
	#GL_SRGB_EXT
 0x8C40

	)

7484 
	#GL_SRGB8_EXT
 0x8C41

	)

7485 
	#GL_SRGB_ALPHA_EXT
 0x8C42

	)

7486 
	#GL_SRGB8_ALPHA8_EXT
 0x8C43

	)

7487 
	#GL_SLUMINANCE_ALPHA_EXT
 0x8C44

	)

7488 
	#GL_SLUMINANCE8_ALPHA8_EXT
 0x8C45

	)

7489 
	#GL_SLUMINANCE_EXT
 0x8C46

	)

7490 
	#GL_SLUMINANCE8_EXT
 0x8C47

	)

7491 
	#GL_COMPRESSED_SRGB_EXT
 0x8C48

	)

7492 
	#GL_COMPRESSED_SRGB_ALPHA_EXT
 0x8C49

	)

7493 
	#GL_COMPRESSED_SLUMINANCE_EXT
 0x8C4A

	)

7494 
	#GL_COMPRESSED_SLUMINANCE_ALPHA_EXT
 0x8C4B

	)

7495 
	#GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
 0x8C4C

	)

7496 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
 0x8C4D

	)

7497 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
 0x8C4E

	)

7498 
	#GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
 0x8C4F

	)

7501 #i‚de‡
GL_EXT_ãxtuª_sRGB_decode


7502 
	#GL_EXT_ãxtuª_sRGB_decode
 1

	)

7503 
	#GL_TEXTURE_SRGB_DECODE_EXT
 0x8A48

	)

7504 
	#GL_DECODE_EXT
 0x8A49

	)

7505 
	#GL_SKIP_DECODE_EXT
 0x8A4A

	)

7508 #i‚de‡
GL_EXT_ãxtuª_sh¨ed_exp⁄ít


7509 
	#GL_EXT_ãxtuª_sh¨ed_exp⁄ít
 1

	)

7510 
	#GL_RGB9_E5_EXT
 0x8C3D

	)

7511 
	#GL_UNSIGNED_INT_5_9_9_9_REV_EXT
 0x8C3E

	)

7512 
	#GL_TEXTURE_SHARED_SIZE_EXT
 0x8C3F

	)

7515 #i‚de‡
GL_EXT_ãxtuª_¢‹m


7516 
	#GL_EXT_ãxtuª_¢‹m
 1

	)

7517 
	#GL_ALPHA_SNORM
 0x9010

	)

7518 
	#GL_LUMINANCE_SNORM
 0x9011

	)

7519 
	#GL_LUMINANCE_ALPHA_SNORM
 0x9012

	)

7520 
	#GL_INTENSITY_SNORM
 0x9013

	)

7521 
	#GL_ALPHA8_SNORM
 0x9014

	)

7522 
	#GL_LUMINANCE8_SNORM
 0x9015

	)

7523 
	#GL_LUMINANCE8_ALPHA8_SNORM
 0x9016

	)

7524 
	#GL_INTENSITY8_SNORM
 0x9017

	)

7525 
	#GL_ALPHA16_SNORM
 0x9018

	)

7526 
	#GL_LUMINANCE16_SNORM
 0x9019

	)

7527 
	#GL_LUMINANCE16_ALPHA16_SNORM
 0x901A

	)

7528 
	#GL_INTENSITY16_SNORM
 0x901B

	)

7529 
	#GL_RED_SNORM
 0x8F90

	)

7530 
	#GL_RG_SNORM
 0x8F91

	)

7531 
	#GL_RGB_SNORM
 0x8F92

	)

7532 
	#GL_RGBA_SNORM
 0x8F93

	)

7535 #i‚de‡
GL_EXT_ãxtuª_swizzÀ


7536 
	#GL_EXT_ãxtuª_swizzÀ
 1

	)

7537 
	#GL_TEXTURE_SWIZZLE_R_EXT
 0x8E42

	)

7538 
	#GL_TEXTURE_SWIZZLE_G_EXT
 0x8E43

	)

7539 
	#GL_TEXTURE_SWIZZLE_B_EXT
 0x8E44

	)

7540 
	#GL_TEXTURE_SWIZZLE_A_EXT
 0x8E45

	)

7541 
	#GL_TEXTURE_SWIZZLE_RGBA_EXT
 0x8E46

	)

7544 #i‚de‡
GL_EXT_timî_quîy


7545 
	#GL_EXT_timî_quîy
 1

	)

7546 
	#GL_TIME_ELAPSED_EXT
 0x88BF

	)

7547 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64
 *
	t∑øms
);

7548 (
APIENTRYP
 
	tPFNGLGETQUERYOBJECTUI64VEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64
 *
	t∑øms
);

7549 #ifde‡
GL_GLEXT_PROTOTYPES


7550 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘i64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt64
 *
∑øms
);

7551 
GLAPI
 
APIENTRY
 
glGëQuîyObje˘ui64vEXT
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLuöt64
 *
∑øms
);

7555 #i‚de‡
GL_EXT_å™sf‹m_„edback


7556 
	#GL_EXT_å™sf‹m_„edback
 1

	)

7557 
	#GL_TRANSFORM_FEEDBACK_BUFFER_EXT
 0x8C8E

	)

7558 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT
 0x8C84

	)

7559 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT
 0x8C85

	)

7560 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT
 0x8C8F

	)

7561 
	#GL_INTERLEAVED_ATTRIBS_EXT
 0x8C8C

	)

7562 
	#GL_SEPARATE_ATTRIBS_EXT
 0x8C8D

	)

7563 
	#GL_PRIMITIVES_GENERATED_EXT
 0x8C87

	)

7564 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT
 0x8C88

	)

7565 
	#GL_RASTERIZER_DISCARD_EXT
 0x8C89

	)

7566 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT
 0x8C8A

	)

7567 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT
 0x8C8B

	)

7568 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT
 0x8C80

	)

7569 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_EXT
 0x8C83

	)

7570 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT
 0x8C7F

	)

7571 
	#GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT
 0x8C76

	)

7572 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKEXTPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

7573 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKEXTPROC
) ();

7574 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

7575 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

7576 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

7577 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLch¨
 *c⁄°*
	tv¨yögs
, 
	tGLíum
 
	tbuf„rMode
);

7578 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

7579 #ifde‡
GL_GLEXT_PROTOTYPES


7580 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackEXT
 (
GLíum
 
¥imôiveMode
);

7581 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackEXT
 ();

7582 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

7583 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tEXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

7584 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£EXT
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

7585 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsEXT
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLch¨
 *c⁄°*
v¨yögs
, 
GLíum
 
buf„rMode
);

7586 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögEXT
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

7590 #i‚de‡
GL_EXT_vîãx_¨øy


7591 
	#GL_EXT_vîãx_¨øy
 1

	)

7592 
	#GL_VERTEX_ARRAY_EXT
 0x8074

	)

7593 
	#GL_NORMAL_ARRAY_EXT
 0x8075

	)

7594 
	#GL_COLOR_ARRAY_EXT
 0x8076

	)

7595 
	#GL_INDEX_ARRAY_EXT
 0x8077

	)

7596 
	#GL_TEXTURE_COORD_ARRAY_EXT
 0x8078

	)

7597 
	#GL_EDGE_FLAG_ARRAY_EXT
 0x8079

	)

7598 
	#GL_VERTEX_ARRAY_SIZE_EXT
 0x807A

	)

7599 
	#GL_VERTEX_ARRAY_TYPE_EXT
 0x807B

	)

7600 
	#GL_VERTEX_ARRAY_STRIDE_EXT
 0x807C

	)

7601 
	#GL_VERTEX_ARRAY_COUNT_EXT
 0x807D

	)

7602 
	#GL_NORMAL_ARRAY_TYPE_EXT
 0x807E

	)

7603 
	#GL_NORMAL_ARRAY_STRIDE_EXT
 0x807F

	)

7604 
	#GL_NORMAL_ARRAY_COUNT_EXT
 0x8080

	)

7605 
	#GL_COLOR_ARRAY_SIZE_EXT
 0x8081

	)

7606 
	#GL_COLOR_ARRAY_TYPE_EXT
 0x8082

	)

7607 
	#GL_COLOR_ARRAY_STRIDE_EXT
 0x8083

	)

7608 
	#GL_COLOR_ARRAY_COUNT_EXT
 0x8084

	)

7609 
	#GL_INDEX_ARRAY_TYPE_EXT
 0x8085

	)

7610 
	#GL_INDEX_ARRAY_STRIDE_EXT
 0x8086

	)

7611 
	#GL_INDEX_ARRAY_COUNT_EXT
 0x8087

	)

7612 
	#GL_TEXTURE_COORD_ARRAY_SIZE_EXT
 0x8088

	)

7613 
	#GL_TEXTURE_COORD_ARRAY_TYPE_EXT
 0x8089

	)

7614 
	#GL_TEXTURE_COORD_ARRAY_STRIDE_EXT
 0x808A

	)

7615 
	#GL_TEXTURE_COORD_ARRAY_COUNT_EXT
 0x808B

	)

7616 
	#GL_EDGE_FLAG_ARRAY_STRIDE_EXT
 0x808C

	)

7617 
	#GL_EDGE_FLAG_ARRAY_COUNT_EXT
 0x808D

	)

7618 
	#GL_VERTEX_ARRAY_POINTER_EXT
 0x808E

	)

7619 
	#GL_NORMAL_ARRAY_POINTER_EXT
 0x808F

	)

7620 
	#GL_COLOR_ARRAY_POINTER_EXT
 0x8090

	)

7621 
	#GL_INDEX_ARRAY_POINTER_EXT
 0x8091

	)

7622 
	#GL_TEXTURE_COORD_ARRAY_POINTER_EXT
 0x8092

	)

7623 
	#GL_EDGE_FLAG_ARRAY_POINTER_EXT
 0x8093

	)

7624 (
APIENTRYP
 
	tPFNGLARRAYELEMENTEXTPROC
Ë(
	tGLöt
 
	ti
);

7625 (
APIENTRYP
 
	tPFNGLCOLORPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

7626 (
APIENTRYP
 
	tPFNGLDRAWARRAYSEXTPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
);

7627 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTEREXTPROC
Ë(
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° 
	tGLboﬁón
 *
	tpoöãr
);

7628 (
APIENTRYP
 
	tPFNGLGETPOINTERVEXTPROC
Ë(
	tGLíum
 
	t≤ame
, **
	t∑øms
);

7629 (
APIENTRYP
 
	tPFNGLINDEXPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

7630 (
APIENTRYP
 
	tPFNGLNORMALPOINTEREXTPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

7631 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

7632 (
APIENTRYP
 
	tPFNGLVERTEXPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, GLsizeò
	tcou¡
, c⁄° *
	tpoöãr
);

7633 #ifde‡
GL_GLEXT_PROTOTYPES


7634 
GLAPI
 
APIENTRY
 
glAºayEÀmítEXT
 (
GLöt
 
i
);

7635 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

7636 
GLAPI
 
APIENTRY
 
glDøwAºaysEXT
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
);

7637 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrEXT
 (
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° 
GLboﬁón
 *
poöãr
);

7638 
GLAPI
 
APIENTRY
 
glGëPoöãrvEXT
 (
GLíum
 
≤ame
, **
∑øms
);

7639 
GLAPI
 
APIENTRY
 
glIndexPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

7640 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrEXT
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

7641 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

7642 
GLAPI
 
APIENTRY
 
glVîãxPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, GLsizeò
cou¡
, c⁄° *
poöãr
);

7646 #i‚de‡
GL_EXT_vîãx_¨øy_bgø


7647 
	#GL_EXT_vîãx_¨øy_bgø
 1

	)

7650 #i‚de‡
GL_EXT_vîãx_©åib_64bô


7651 
	#GL_EXT_vîãx_©åib_64bô
 1

	)

7652 
	#GL_DOUBLE_VEC2_EXT
 0x8FFC

	)

7653 
	#GL_DOUBLE_VEC3_EXT
 0x8FFD

	)

7654 
	#GL_DOUBLE_VEC4_EXT
 0x8FFE

	)

7655 
	#GL_DOUBLE_MAT2_EXT
 0x8F46

	)

7656 
	#GL_DOUBLE_MAT3_EXT
 0x8F47

	)

7657 
	#GL_DOUBLE_MAT4_EXT
 0x8F48

	)

7658 
	#GL_DOUBLE_MAT2x3_EXT
 0x8F49

	)

7659 
	#GL_DOUBLE_MAT2x4_EXT
 0x8F4A

	)

7660 
	#GL_DOUBLE_MAT3x2_EXT
 0x8F4B

	)

7661 
	#GL_DOUBLE_MAT3x4_EXT
 0x8F4C

	)

7662 
	#GL_DOUBLE_MAT4x2_EXT
 0x8F4D

	)

7663 
	#GL_DOUBLE_MAT4x3_EXT
 0x8F4E

	)

7664 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

7665 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

7666 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

7667 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

7668 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7669 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7670 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7671 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4DVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

7672 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

7673 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLDVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

7674 #ifde‡
GL_GLEXT_PROTOTYPES


7675 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

7676 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

7677 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

7678 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dEXT
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

7679 
GLAPI
 
APIENTRY
 
glVîãxAâribL1dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7680 
GLAPI
 
APIENTRY
 
glVîãxAâribL2dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7681 
GLAPI
 
APIENTRY
 
glVîãxAâribL3dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7682 
GLAPI
 
APIENTRY
 
glVîãxAâribL4dvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

7683 
GLAPI
 
APIENTRY
 
glVîãxAâribLPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

7684 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLdvEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

7688 #i‚de‡
GL_EXT_vîãx_shadî


7689 
	#GL_EXT_vîãx_shadî
 1

	)

7690 
	#GL_VERTEX_SHADER_EXT
 0x8780

	)

7691 
	#GL_VERTEX_SHADER_BINDING_EXT
 0x8781

	)

7692 
	#GL_OP_INDEX_EXT
 0x8782

	)

7693 
	#GL_OP_NEGATE_EXT
 0x8783

	)

7694 
	#GL_OP_DOT3_EXT
 0x8784

	)

7695 
	#GL_OP_DOT4_EXT
 0x8785

	)

7696 
	#GL_OP_MUL_EXT
 0x8786

	)

7697 
	#GL_OP_ADD_EXT
 0x8787

	)

7698 
	#GL_OP_MADD_EXT
 0x8788

	)

7699 
	#GL_OP_FRAC_EXT
 0x8789

	)

7700 
	#GL_OP_MAX_EXT
 0x878A

	)

7701 
	#GL_OP_MIN_EXT
 0x878B

	)

7702 
	#GL_OP_SET_GE_EXT
 0x878C

	)

7703 
	#GL_OP_SET_LT_EXT
 0x878D

	)

7704 
	#GL_OP_CLAMP_EXT
 0x878E

	)

7705 
	#GL_OP_FLOOR_EXT
 0x878F

	)

7706 
	#GL_OP_ROUND_EXT
 0x8790

	)

7707 
	#GL_OP_EXP_BASE_2_EXT
 0x8791

	)

7708 
	#GL_OP_LOG_BASE_2_EXT
 0x8792

	)

7709 
	#GL_OP_POWER_EXT
 0x8793

	)

7710 
	#GL_OP_RECIP_EXT
 0x8794

	)

7711 
	#GL_OP_RECIP_SQRT_EXT
 0x8795

	)

7712 
	#GL_OP_SUB_EXT
 0x8796

	)

7713 
	#GL_OP_CROSS_PRODUCT_EXT
 0x8797

	)

7714 
	#GL_OP_MULTIPLY_MATRIX_EXT
 0x8798

	)

7715 
	#GL_OP_MOV_EXT
 0x8799

	)

7716 
	#GL_OUTPUT_VERTEX_EXT
 0x879A

	)

7717 
	#GL_OUTPUT_COLOR0_EXT
 0x879B

	)

7718 
	#GL_OUTPUT_COLOR1_EXT
 0x879C

	)

7719 
	#GL_OUTPUT_TEXTURE_COORD0_EXT
 0x879D

	)

7720 
	#GL_OUTPUT_TEXTURE_COORD1_EXT
 0x879E

	)

7721 
	#GL_OUTPUT_TEXTURE_COORD2_EXT
 0x879F

	)

7722 
	#GL_OUTPUT_TEXTURE_COORD3_EXT
 0x87A0

	)

7723 
	#GL_OUTPUT_TEXTURE_COORD4_EXT
 0x87A1

	)

7724 
	#GL_OUTPUT_TEXTURE_COORD5_EXT
 0x87A2

	)

7725 
	#GL_OUTPUT_TEXTURE_COORD6_EXT
 0x87A3

	)

7726 
	#GL_OUTPUT_TEXTURE_COORD7_EXT
 0x87A4

	)

7727 
	#GL_OUTPUT_TEXTURE_COORD8_EXT
 0x87A5

	)

7728 
	#GL_OUTPUT_TEXTURE_COORD9_EXT
 0x87A6

	)

7729 
	#GL_OUTPUT_TEXTURE_COORD10_EXT
 0x87A7

	)

7730 
	#GL_OUTPUT_TEXTURE_COORD11_EXT
 0x87A8

	)

7731 
	#GL_OUTPUT_TEXTURE_COORD12_EXT
 0x87A9

	)

7732 
	#GL_OUTPUT_TEXTURE_COORD13_EXT
 0x87AA

	)

7733 
	#GL_OUTPUT_TEXTURE_COORD14_EXT
 0x87AB

	)

7734 
	#GL_OUTPUT_TEXTURE_COORD15_EXT
 0x87AC

	)

7735 
	#GL_OUTPUT_TEXTURE_COORD16_EXT
 0x87AD

	)

7736 
	#GL_OUTPUT_TEXTURE_COORD17_EXT
 0x87AE

	)

7737 
	#GL_OUTPUT_TEXTURE_COORD18_EXT
 0x87AF

	)

7738 
	#GL_OUTPUT_TEXTURE_COORD19_EXT
 0x87B0

	)

7739 
	#GL_OUTPUT_TEXTURE_COORD20_EXT
 0x87B1

	)

7740 
	#GL_OUTPUT_TEXTURE_COORD21_EXT
 0x87B2

	)

7741 
	#GL_OUTPUT_TEXTURE_COORD22_EXT
 0x87B3

	)

7742 
	#GL_OUTPUT_TEXTURE_COORD23_EXT
 0x87B4

	)

7743 
	#GL_OUTPUT_TEXTURE_COORD24_EXT
 0x87B5

	)

7744 
	#GL_OUTPUT_TEXTURE_COORD25_EXT
 0x87B6

	)

7745 
	#GL_OUTPUT_TEXTURE_COORD26_EXT
 0x87B7

	)

7746 
	#GL_OUTPUT_TEXTURE_COORD27_EXT
 0x87B8

	)

7747 
	#GL_OUTPUT_TEXTURE_COORD28_EXT
 0x87B9

	)

7748 
	#GL_OUTPUT_TEXTURE_COORD29_EXT
 0x87BA

	)

7749 
	#GL_OUTPUT_TEXTURE_COORD30_EXT
 0x87BB

	)

7750 
	#GL_OUTPUT_TEXTURE_COORD31_EXT
 0x87BC

	)

7751 
	#GL_OUTPUT_FOG_EXT
 0x87BD

	)

7752 
	#GL_SCALAR_EXT
 0x87BE

	)

7753 
	#GL_VECTOR_EXT
 0x87BF

	)

7754 
	#GL_MATRIX_EXT
 0x87C0

	)

7755 
	#GL_VARIANT_EXT
 0x87C1

	)

7756 
	#GL_INVARIANT_EXT
 0x87C2

	)

7757 
	#GL_LOCAL_CONSTANT_EXT
 0x87C3

	)

7758 
	#GL_LOCAL_EXT
 0x87C4

	)

7759 
	#GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87C5

	)

7760 
	#GL_MAX_VERTEX_SHADER_VARIANTS_EXT
 0x87C6

	)

7761 
	#GL_MAX_VERTEX_SHADER_INVARIANTS_EXT
 0x87C7

	)

7762 
	#GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87C8

	)

7763 
	#GL_MAX_VERTEX_SHADER_LOCALS_EXT
 0x87C9

	)

7764 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CA

	)

7765 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT
 0x87CB

	)

7766 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87CC

	)

7767 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT
 0x87CD

	)

7768 
	#GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT
 0x87CE

	)

7769 
	#GL_VERTEX_SHADER_INSTRUCTIONS_EXT
 0x87CF

	)

7770 
	#GL_VERTEX_SHADER_VARIANTS_EXT
 0x87D0

	)

7771 
	#GL_VERTEX_SHADER_INVARIANTS_EXT
 0x87D1

	)

7772 
	#GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT
 0x87D2

	)

7773 
	#GL_VERTEX_SHADER_LOCALS_EXT
 0x87D3

	)

7774 
	#GL_VERTEX_SHADER_OPTIMIZED_EXT
 0x87D4

	)

7775 
	#GL_X_EXT
 0x87D5

	)

7776 
	#GL_Y_EXT
 0x87D6

	)

7777 
	#GL_Z_EXT
 0x87D7

	)

7778 
	#GL_W_EXT
 0x87D8

	)

7779 
	#GL_NEGATIVE_X_EXT
 0x87D9

	)

7780 
	#GL_NEGATIVE_Y_EXT
 0x87DA

	)

7781 
	#GL_NEGATIVE_Z_EXT
 0x87DB

	)

7782 
	#GL_NEGATIVE_W_EXT
 0x87DC

	)

7783 
	#GL_ZERO_EXT
 0x87DD

	)

7784 
	#GL_ONE_EXT
 0x87DE

	)

7785 
	#GL_NEGATIVE_ONE_EXT
 0x87DF

	)

7786 
	#GL_NORMALIZED_RANGE_EXT
 0x87E0

	)

7787 
	#GL_FULL_RANGE_EXT
 0x87E1

	)

7788 
	#GL_CURRENT_VERTEX_EXT
 0x87E2

	)

7789 
	#GL_MVP_MATRIX_EXT
 0x87E3

	)

7790 
	#GL_VARIANT_VALUE_EXT
 0x87E4

	)

7791 
	#GL_VARIANT_DATATYPE_EXT
 0x87E5

	)

7792 
	#GL_VARIANT_ARRAY_STRIDE_EXT
 0x87E6

	)

7793 
	#GL_VARIANT_ARRAY_TYPE_EXT
 0x87E7

	)

7794 
	#GL_VARIANT_ARRAY_EXT
 0x87E8

	)

7795 
	#GL_VARIANT_ARRAY_POINTER_EXT
 0x87E9

	)

7796 
	#GL_INVARIANT_VALUE_EXT
 0x87EA

	)

7797 
	#GL_INVARIANT_DATATYPE_EXT
 0x87EB

	)

7798 
	#GL_LOCAL_CONSTANT_VALUE_EXT
 0x87EC

	)

7799 
	#GL_LOCAL_CONSTANT_DATATYPE_EXT
 0x87ED

	)

7800 (
APIENTRYP
 
	tPFNGLBEGINVERTEXSHADEREXTPROC
) ();

7801 (
APIENTRYP
 
	tPFNGLENDVERTEXSHADEREXTPROC
) ();

7802 (
APIENTRYP
 
	tPFNGLBINDVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

7803 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENVERTEXSHADERSEXTPROC
Ë(
	tGLuöt
 
	tønge
);

7804 (
APIENTRYP
 
	tPFNGLDELETEVERTEXSHADEREXTPROC
Ë(
	tGLuöt
 
	tid
);

7805 (
APIENTRYP
 
	tPFNGLSHADEROP1EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
);

7806 (
APIENTRYP
 
	tPFNGLSHADEROP2EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
);

7807 (
APIENTRYP
 
	tPFNGLSHADEROP3EXTPROC
Ë(
	tGLíum
 
	t›
, 
	tGLuöt
 
	tªs
, GLuöà
	t¨g1
, GLuöà
	t¨g2
, GLuöà
	t¨g3
);

7808 (
APIENTRYP
 
	tPFNGLSWIZZLEEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

7809 (
APIENTRYP
 
	tPFNGLWRITEMASKEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	tö
, 
	tGLíum
 
	toutX
, GLíum 
	toutY
, GLíum 
	toutZ
, GLíum 
	toutW
);

7810 (
APIENTRYP
 
	tPFNGLINSERTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

7811 (
APIENTRYP
 
	tPFNGLEXTRACTCOMPONENTEXTPROC
Ë(
	tGLuöt
 
	tªs
, GLuöà
	t§c
, GLuöà
	tnum
);

7812 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENSYMBOLSEXTPROC
Ë(
	tGLíum
 
	td©©y≥
, GLíum 
	t°‹agëy≥
, GLíum 
	tønge
, 
	tGLuöt
 
	tcomp⁄íts
);

7813 (
APIENTRYP
 
	tPFNGLSETINVARIANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° *
	taddr
);

7814 (
APIENTRYP
 
	tPFNGLSETLOCALCONSTANTEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, c⁄° *
	taddr
);

7815 (
APIENTRYP
 
	tPFNGLVARIANTBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLbyã
 *
	taddr
);

7816 (
APIENTRYP
 
	tPFNGLVARIANTSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLsh‹t
 *
	taddr
);

7817 (
APIENTRYP
 
	tPFNGLVARIANTIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLöt
 *
	taddr
);

7818 (
APIENTRYP
 
	tPFNGLVARIANTFVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	taddr
);

7819 (
APIENTRYP
 
	tPFNGLVARIANTDVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLdoubÀ
 *
	taddr
);

7820 (
APIENTRYP
 
	tPFNGLVARIANTUBVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLubyã
 *
	taddr
);

7821 (
APIENTRYP
 
	tPFNGLVARIANTUSVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° 
	tGLush‹t
 *
	taddr
);

7822 (
APIENTRYP
 
	tPFNGLVARIANTUIVEXTPROC
Ë(
	tGLuöt
 
	tid
, c⁄° GLuöà*
	taddr
);

7823 (
APIENTRYP
 
	tPFNGLVARIANTPOINTEREXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tty≥
, GLuöà
	t°ride
, c⁄° *
	taddr
);

7824 (
APIENTRYP
 
	tPFNGLENABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

7825 (
APIENTRYP
 
	tPFNGLDISABLEVARIANTCLIENTSTATEEXTPROC
Ë(
	tGLuöt
 
	tid
);

7826 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDLIGHTPARAMETEREXTPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	tvÆue
);

7827 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDMATERIALPARAMETEREXTPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tvÆue
);

7828 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXGENPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tco‹d
, GLíum 
	tvÆue
);

7829 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDTEXTUREUNITPARAMETEREXTPROC
Ë(
	tGLíum
 
	tunô
, GLíum 
	tvÆue
);

7830 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLBINDPARAMETEREXTPROC
Ë(
	tGLíum
 
	tvÆue
);

7831 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISVARIANTENABLEDEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tˇp
);

7832 (
APIENTRYP
 
	tPFNGLGETVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

7833 (
APIENTRYP
 
	tPFNGLGETVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

7834 (
APIENTRYP
 
	tPFNGLGETVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

7835 (
APIENTRYP
 
	tPFNGLGETVARIANTPOINTERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, **
	td©a
);

7836 (
APIENTRYP
 
	tPFNGLGETINVARIANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

7837 (
APIENTRYP
 
	tPFNGLGETINVARIANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

7838 (
APIENTRYP
 
	tPFNGLGETINVARIANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

7839 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTBOOLEANVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLboﬁón
 *
	td©a
);

7840 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTINTEGERVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLöt
 *
	td©a
);

7841 (
APIENTRYP
 
	tPFNGLGETLOCALCONSTANTFLOATVEXTPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tvÆue
, 
	tGLÊﬂt
 *
	td©a
);

7842 #ifde‡
GL_GLEXT_PROTOTYPES


7843 
GLAPI
 
APIENTRY
 
glBegöVîãxShadîEXT
 ();

7844 
GLAPI
 
APIENTRY
 
glEndVîãxShadîEXT
 ();

7845 
GLAPI
 
APIENTRY
 
glBödVîãxShadîEXT
 (
GLuöt
 
id
);

7846 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíVîãxShadîsEXT
 (GLuöà
ønge
);

7847 
GLAPI
 
APIENTRY
 
glDñëeVîãxShadîEXT
 (
GLuöt
 
id
);

7848 
GLAPI
 
APIENTRY
 
glShadîOp1EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
);

7849 
GLAPI
 
APIENTRY
 
glShadîOp2EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
);

7850 
GLAPI
 
APIENTRY
 
glShadîOp3EXT
 (
GLíum
 
›
, 
GLuöt
 
ªs
, GLuöà
¨g1
, GLuöà
¨g2
, GLuöà
¨g3
);

7851 
GLAPI
 
APIENTRY
 
glSwizzÀEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

7852 
GLAPI
 
APIENTRY
 
glWrôeMaskEXT
 (
GLuöt
 
ªs
, GLuöà
ö
, 
GLíum
 
outX
, GLíum 
outY
, GLíum 
outZ
, GLíum 
outW
);

7853 
GLAPI
 
APIENTRY
 
glIn£πComp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

7854 
GLAPI
 
APIENTRY
 
glExåa˘Comp⁄ítEXT
 (
GLuöt
 
ªs
, GLuöà
§c
, GLuöà
num
);

7855 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíSymbﬁsEXT
 (
GLíum
 
d©©y≥
, GLíum 
°‹agëy≥
, GLíum 
ønge
, GLuöà
comp⁄íts
);

7856 
GLAPI
 
APIENTRY
 
glSëInv¨ü¡EXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° *
addr
);

7857 
GLAPI
 
APIENTRY
 
glSëLoˇlC⁄°™tEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, c⁄° *
addr
);

7858 
GLAPI
 
APIENTRY
 
glV¨ü¡bvEXT
 (
GLuöt
 
id
, c⁄° 
GLbyã
 *
addr
);

7859 
GLAPI
 
APIENTRY
 
glV¨ü¡svEXT
 (
GLuöt
 
id
, c⁄° 
GLsh‹t
 *
addr
);

7860 
GLAPI
 
APIENTRY
 
glV¨ü¡ivEXT
 (
GLuöt
 
id
, c⁄° 
GLöt
 *
addr
);

7861 
GLAPI
 
APIENTRY
 
glV¨ü¡fvEXT
 (
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
addr
);

7862 
GLAPI
 
APIENTRY
 
glV¨ü¡dvEXT
 (
GLuöt
 
id
, c⁄° 
GLdoubÀ
 *
addr
);

7863 
GLAPI
 
APIENTRY
 
glV¨ü¡ubvEXT
 (
GLuöt
 
id
, c⁄° 
GLubyã
 *
addr
);

7864 
GLAPI
 
APIENTRY
 
glV¨ü¡usvEXT
 (
GLuöt
 
id
, c⁄° 
GLush‹t
 *
addr
);

7865 
GLAPI
 
APIENTRY
 
glV¨ü¡uivEXT
 (
GLuöt
 
id
, c⁄° GLuöà*
addr
);

7866 
GLAPI
 
APIENTRY
 
glV¨ü¡PoöãrEXT
 (
GLuöt
 
id
, 
GLíum
 
ty≥
, GLuöà
°ride
, c⁄° *
addr
);

7867 
GLAPI
 
APIENTRY
 
glE«bÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

7868 
GLAPI
 
APIENTRY
 
glDißbÀV¨ü¡Clõ¡SèãEXT
 (
GLuöt
 
id
);

7869 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödLightP¨amëîEXT
 (
GLíum
 
light
, GLíum 
vÆue
);

7870 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödM©îülP¨amëîEXT
 (
GLíum
 
Á˚
, GLíum 
vÆue
);

7871 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTexGíP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
co‹d
, GLíum 
vÆue
);

7872 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödTextuªUnôP¨amëîEXT
 (
GLíum
 
unô
, GLíum 
vÆue
);

7873 
GLAPI
 
GLuöt
 
APIENTRY
 
glBödP¨amëîEXT
 (
GLíum
 
vÆue
);

7874 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsV¨ü¡E«bÀdEXT
 (
GLuöt
 
id
, 
GLíum
 
ˇp
);

7875 
GLAPI
 
APIENTRY
 
glGëV¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

7876 
GLAPI
 
APIENTRY
 
glGëV¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

7877 
GLAPI
 
APIENTRY
 
glGëV¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

7878 
GLAPI
 
APIENTRY
 
glGëV¨ü¡PoöãrvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, **
d©a
);

7879 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡BoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

7880 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡I¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

7881 
GLAPI
 
APIENTRY
 
glGëInv¨ü¡FlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

7882 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tBoﬁónvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLboﬁón
 *
d©a
);

7883 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tI¡egîvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLöt
 *
d©a
);

7884 
GLAPI
 
APIENTRY
 
glGëLoˇlC⁄°™tFlﬂtvEXT
 (
GLuöt
 
id
, 
GLíum
 
vÆue
, 
GLÊﬂt
 *
d©a
);

7888 #i‚de‡
GL_EXT_vîãx_weightög


7889 
	#GL_EXT_vîãx_weightög
 1

	)

7890 
	#GL_MODELVIEW0_STACK_DEPTH_EXT
 0x0BA3

	)

7891 
	#GL_MODELVIEW1_STACK_DEPTH_EXT
 0x8502

	)

7892 
	#GL_MODELVIEW0_MATRIX_EXT
 0x0BA6

	)

7893 
	#GL_MODELVIEW1_MATRIX_EXT
 0x8506

	)

7894 
	#GL_VERTEX_WEIGHTING_EXT
 0x8509

	)

7895 
	#GL_MODELVIEW0_EXT
 0x1700

	)

7896 
	#GL_MODELVIEW1_EXT
 0x850A

	)

7897 
	#GL_CURRENT_VERTEX_WEIGHT_EXT
 0x850B

	)

7898 
	#GL_VERTEX_WEIGHT_ARRAY_EXT
 0x850C

	)

7899 
	#GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT
 0x850D

	)

7900 
	#GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT
 0x850E

	)

7901 
	#GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT
 0x850F

	)

7902 
	#GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT
 0x8510

	)

7903 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFEXTPROC
Ë(
	tGLÊﬂt
 
	tweight
);

7904 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTFVEXTPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tweight
);

7905 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTPOINTEREXTPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

7906 #ifde‡
GL_GLEXT_PROTOTYPES


7907 
GLAPI
 
APIENTRY
 
glVîãxWeightfEXT
 (
GLÊﬂt
 
weight
);

7908 
GLAPI
 
APIENTRY
 
glVîãxWeightfvEXT
 (c⁄° 
GLÊﬂt
 *
weight
);

7909 
GLAPI
 
APIENTRY
 
glVîãxWeightPoöãrEXT
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

7913 #i‚de‡
GL_EXT_x11_sync_obje˘


7914 
	#GL_EXT_x11_sync_obje˘
 1

	)

7915 
	#GL_SYNC_X11_FENCE_EXT
 0x90E1

	)

7916 
GLsync
 (
	tAPIENTRYP
 
	tPFNGLIMPORTSYNCEXTPROC
Ë(
	tGLíum
 
	texã∫Æ_sync_ty≥
, 
	tGLöçå
 
	texã∫Æ_sync
, 
	tGLbôfõld
 
	tÊags
);

7917 #ifde‡
GL_GLEXT_PROTOTYPES


7918 
GLAPI
 
GLsync
 
APIENTRY
 
glImp‹tSyncEXT
 (
GLíum
 
exã∫Æ_sync_ty≥
, 
GLöçå
 
exã∫Æ_sync
, 
GLbôfõld
 
Êags
);

7922 #i‚de‡
GL_GREMEDY_‰ame_ãrmö©‹


7923 
	#GL_GREMEDY_‰ame_ãrmö©‹
 1

	)

7924 (
APIENTRYP
 
	tPFNGLFRAMETERMINATORGREMEDYPROC
) ();

7925 #ifde‡
GL_GLEXT_PROTOTYPES


7926 
GLAPI
 
APIENTRY
 
glFømeTîmö©‹GREMEDY
 ();

7930 #i‚de‡
GL_GREMEDY_°rög_m¨kî


7931 
	#GL_GREMEDY_°rög_m¨kî
 1

	)

7932 (
APIENTRYP
 
	tPFNGLSTRINGMARKERGREMEDYPROC
Ë(
	tGLsizei
 
	tÀn
, c⁄° *
	t°rög
);

7933 #ifde‡
GL_GLEXT_PROTOTYPES


7934 
GLAPI
 
APIENTRY
 
glSåögM¨kîGREMEDY
 (
GLsizei
 
Àn
, c⁄° *
°rög
);

7938 #i‚de‡
GL_HP_c⁄vﬁuti⁄_b‹dî_modes


7939 
	#GL_HP_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

7940 
	#GL_IGNORE_BORDER_HP
 0x8150

	)

7941 
	#GL_CONSTANT_BORDER_HP
 0x8151

	)

7942 
	#GL_REPLICATE_BORDER_HP
 0x8153

	)

7943 
	#GL_CONVOLUTION_BORDER_COLOR_HP
 0x8154

	)

7946 #i‚de‡
GL_HP_image_å™sf‹m


7947 
	#GL_HP_image_å™sf‹m
 1

	)

7948 
	#GL_IMAGE_SCALE_X_HP
 0x8155

	)

7949 
	#GL_IMAGE_SCALE_Y_HP
 0x8156

	)

7950 
	#GL_IMAGE_TRANSLATE_X_HP
 0x8157

	)

7951 
	#GL_IMAGE_TRANSLATE_Y_HP
 0x8158

	)

7952 
	#GL_IMAGE_ROTATE_ANGLE_HP
 0x8159

	)

7953 
	#GL_IMAGE_ROTATE_ORIGIN_X_HP
 0x815A

	)

7954 
	#GL_IMAGE_ROTATE_ORIGIN_Y_HP
 0x815B

	)

7955 
	#GL_IMAGE_MAG_FILTER_HP
 0x815C

	)

7956 
	#GL_IMAGE_MIN_FILTER_HP
 0x815D

	)

7957 
	#GL_IMAGE_CUBIC_WEIGHT_HP
 0x815E

	)

7958 
	#GL_CUBIC_HP
 0x815F

	)

7959 
	#GL_AVERAGE_HP
 0x8160

	)

7960 
	#GL_IMAGE_TRANSFORM_2D_HP
 0x8161

	)

7961 
	#GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8162

	)

7962 
	#GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP
 0x8163

	)

7963 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

7964 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

7965 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

7966 (
APIENTRYP
 
	tPFNGLIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

7967 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

7968 (
APIENTRYP
 
	tPFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

7969 #ifde‡
GL_GLEXT_PROTOTYPES


7970 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîiHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

7971 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

7972 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

7973 
GLAPI
 
APIENTRY
 
glImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

7974 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîivHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

7975 
GLAPI
 
APIENTRY
 
glGëImageTønsf‹mP¨amëîfvHP
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

7979 #i‚de‡
GL_HP_oc˛usi⁄_ã°


7980 
	#GL_HP_oc˛usi⁄_ã°
 1

	)

7981 
	#GL_OCCLUSION_TEST_HP
 0x8165

	)

7982 
	#GL_OCCLUSION_TEST_RESULT_HP
 0x8166

	)

7985 #i‚de‡
GL_HP_ãxtuª_lightög


7986 
	#GL_HP_ãxtuª_lightög
 1

	)

7987 
	#GL_TEXTURE_LIGHTING_MODE_HP
 0x8167

	)

7988 
	#GL_TEXTURE_POST_SPECULAR_HP
 0x8168

	)

7989 
	#GL_TEXTURE_PRE_SPECULAR_HP
 0x8169

	)

7992 #i‚de‡
GL_IBM_cuŒ_vîãx


7993 
	#GL_IBM_cuŒ_vîãx
 1

	)

7994 
	#GL_CULL_VERTEX_IBM
 103050

	)

7997 #i‚de‡
GL_IBM_mu…imode_døw_¨øys


7998 
	#GL_IBM_mu…imode_døw_¨øys
 1

	)

7999 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWARRAYSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLöt
 *
	tfú°
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLsizeò
	t¥imcou¡
, GLöà
	tmode°ride
);

8000 (
APIENTRYP
 
	tPFNGLMULTIMODEDRAWELEMENTSIBMPROC
Ë(c⁄° 
	tGLíum
 *
	tmode
, c⁄° 
	tGLsizei
 *
	tcou¡
, GLíum 
	tty≥
, c⁄° *c⁄°*
	tödi˚s
, GLsizeò
	t¥imcou¡
, 
	tGLöt
 
	tmode°ride
);

8001 #ifde‡
GL_GLEXT_PROTOTYPES


8002 
GLAPI
 
APIENTRY
 
glMu…iModeDøwAºaysIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLöt
 *
fú°
, c⁄° 
GLsizei
 *
cou¡
, GLsizeò
¥imcou¡
, GLöà
mode°ride
);

8003 
GLAPI
 
APIENTRY
 
glMu…iModeDøwEÀmítsIBM
 (c⁄° 
GLíum
 *
mode
, c⁄° 
GLsizei
 *
cou¡
, GLíum 
ty≥
, c⁄° *c⁄°*
ödi˚s
, GLsizeò
¥imcou¡
, 
GLöt
 
mode°ride
);

8007 #i‚de‡
GL_IBM_ø°îpos_˛ù


8008 
	#GL_IBM_ø°îpos_˛ù
 1

	)

8009 
	#GL_RASTER_POSITION_UNCLIPPED_IBM
 0x19262

	)

8012 #i‚de‡
GL_IBM_°©ic_d©a


8013 
	#GL_IBM_°©ic_d©a
 1

	)

8014 
	#GL_ALL_STATIC_DATA_IBM
 103060

	)

8015 
	#GL_STATIC_VERTEX_ARRAY_IBM
 103061

	)

8016 (
APIENTRYP
 
	tPFNGLFLUSHSTATICDATAIBMPROC
Ë(
	tGLíum
 
	tèrgë
);

8017 #ifde‡
GL_GLEXT_PROTOTYPES


8018 
GLAPI
 
APIENTRY
 
glFlushSèticD©aIBM
 (
GLíum
 
èrgë
);

8022 #i‚de‡
GL_IBM_ãxtuª_múr‹ed_ª≥©


8023 
	#GL_IBM_ãxtuª_múr‹ed_ª≥©
 1

	)

8024 
	#GL_MIRRORED_REPEAT_IBM
 0x8370

	)

8027 #i‚de‡
GL_IBM_vîãx_¨øy_li°s


8028 
	#GL_IBM_vîãx_¨øy_li°s
 1

	)

8029 
	#GL_VERTEX_ARRAY_LIST_IBM
 103070

	)

8030 
	#GL_NORMAL_ARRAY_LIST_IBM
 103071

	)

8031 
	#GL_COLOR_ARRAY_LIST_IBM
 103072

	)

8032 
	#GL_INDEX_ARRAY_LIST_IBM
 103073

	)

8033 
	#GL_TEXTURE_COORD_ARRAY_LIST_IBM
 103074

	)

8034 
	#GL_EDGE_FLAG_ARRAY_LIST_IBM
 103075

	)

8035 
	#GL_FOG_COORDINATE_ARRAY_LIST_IBM
 103076

	)

8036 
	#GL_SECONDARY_COLOR_ARRAY_LIST_IBM
 103077

	)

8037 
	#GL_VERTEX_ARRAY_LIST_STRIDE_IBM
 103080

	)

8038 
	#GL_NORMAL_ARRAY_LIST_STRIDE_IBM
 103081

	)

8039 
	#GL_COLOR_ARRAY_LIST_STRIDE_IBM
 103082

	)

8040 
	#GL_INDEX_ARRAY_LIST_STRIDE_IBM
 103083

	)

8041 
	#GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM
 103084

	)

8042 
	#GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM
 103085

	)

8043 
	#GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM
 103086

	)

8044 
	#GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM
 103087

	)

8045 (
APIENTRYP
 
	tPFNGLCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8046 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8047 (
APIENTRYP
 
	tPFNGLEDGEFLAGPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	t°ride
, c⁄° 
	tGLboﬁón
 **
	tpoöãr
, GLöà
	t±r°ride
);

8048 (
APIENTRYP
 
	tPFNGLFOGCOORDPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8049 (
APIENTRYP
 
	tPFNGLINDEXPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8050 (
APIENTRYP
 
	tPFNGLNORMALPOINTERLISTIBMPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLöt
 
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8051 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8052 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERLISTIBMPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, GLöà
	t°ride
, c⁄° **
	tpoöãr
, GLöà
	t±r°ride
);

8053 #ifde‡
GL_GLEXT_PROTOTYPES


8054 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8055 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹PoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8056 
GLAPI
 
APIENTRY
 
glEdgeFœgPoöãrLi°IBM
 (
GLöt
 
°ride
, c⁄° 
GLboﬁón
 **
poöãr
, GLöà
±r°ride
);

8057 
GLAPI
 
APIENTRY
 
glFogCo‹dPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8058 
GLAPI
 
APIENTRY
 
glIndexPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8059 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrLi°IBM
 (
GLíum
 
ty≥
, 
GLöt
 
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8060 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8061 
GLAPI
 
APIENTRY
 
glVîãxPoöãrLi°IBM
 (
GLöt
 
size
, 
GLíum
 
ty≥
, GLöà
°ride
, c⁄° **
poöãr
, GLöà
±r°ride
);

8065 #i‚de‡
GL_INGR_bÀnd_func_£∑øã


8066 
	#GL_INGR_bÀnd_func_£∑øã
 1

	)

8067 (
APIENTRYP
 
	tPFNGLBLENDFUNCSEPARATEINGRPROC
Ë(
	tGLíum
 
	tsÁ˘‹RGB
, GLíum 
	tdÁ˘‹RGB
, GLíum 
	tsÁ˘‹AÕha
, GLíum 
	tdÁ˘‹AÕha
);

8068 #ifde‡
GL_GLEXT_PROTOTYPES


8069 
GLAPI
 
APIENTRY
 
glBÀndFuncSï¨©eINGR
 (
GLíum
 
sÁ˘‹RGB
, GLíum 
dÁ˘‹RGB
, GLíum 
sÁ˘‹AÕha
, GLíum 
dÁ˘‹AÕha
);

8073 #i‚de‡
GL_INGR_cﬁ‹_˛amp


8074 
	#GL_INGR_cﬁ‹_˛amp
 1

	)

8075 
	#GL_RED_MIN_CLAMP_INGR
 0x8560

	)

8076 
	#GL_GREEN_MIN_CLAMP_INGR
 0x8561

	)

8077 
	#GL_BLUE_MIN_CLAMP_INGR
 0x8562

	)

8078 
	#GL_ALPHA_MIN_CLAMP_INGR
 0x8563

	)

8079 
	#GL_RED_MAX_CLAMP_INGR
 0x8564

	)

8080 
	#GL_GREEN_MAX_CLAMP_INGR
 0x8565

	)

8081 
	#GL_BLUE_MAX_CLAMP_INGR
 0x8566

	)

8082 
	#GL_ALPHA_MAX_CLAMP_INGR
 0x8567

	)

8085 #i‚de‡
GL_INGR_öãæa˚_ªad


8086 
	#GL_INGR_öãæa˚_ªad
 1

	)

8087 
	#GL_INTERLACE_READ_INGR
 0x8568

	)

8090 #i‚de‡
GL_INTEL_‰agmít_shadî_‹dîög


8091 
	#GL_INTEL_‰agmít_shadî_‹dîög
 1

	)

8094 #i‚de‡
GL_INTEL_m≠_ãxtuª


8095 
	#GL_INTEL_m≠_ãxtuª
 1

	)

8096 
	#GL_TEXTURE_MEMORY_LAYOUT_INTEL
 0x83FF

	)

8097 
	#GL_LAYOUT_DEFAULT_INTEL
 0

	)

8098 
	#GL_LAYOUT_LINEAR_INTEL
 1

	)

8099 
	#GL_LAYOUT_LINEAR_CPU_CACHED_INTEL
 2

	)

8100 (
APIENTRYP
 
	tPFNGLSYNCTEXTUREINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
);

8101 (
APIENTRYP
 
	tPFNGLUNMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8102 *(
	tAPIENTRYP
 
	tPFNGLMAPTEXTURE2DINTELPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLbôfõld
 
	tac˚ss
, GLöà*
	t°ride
, 
	tGLíum
 *
	tœyout
);

8103 #ifde‡
GL_GLEXT_PROTOTYPES


8104 
GLAPI
 
APIENTRY
 
glSyncTextuªINTEL
 (
GLuöt
 
ãxtuª
);

8105 
GLAPI
 
APIENTRY
 
glUnm≠Textuª2DINTEL
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

8106 
GLAPI
 *
APIENTRY
 
glM≠Textuª2DINTEL
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLbôfõld
 
ac˚ss
, GLöà*
°ride
, 
GLíum
 *
œyout
);

8110 #i‚de‡
GL_INTEL_∑øŒñ_¨øys


8111 
	#GL_INTEL_∑øŒñ_¨øys
 1

	)

8112 
	#GL_PARALLEL_ARRAYS_INTEL
 0x83F4

	)

8113 
	#GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F5

	)

8114 
	#GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F6

	)

8115 
	#GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F7

	)

8116 
	#GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL
 0x83F8

	)

8117 (
APIENTRYP
 
	tPFNGLVERTEXPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8118 (
APIENTRYP
 
	tPFNGLNORMALPOINTERVINTELPROC
Ë(
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8119 (
APIENTRYP
 
	tPFNGLCOLORPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8120 (
APIENTRYP
 
	tPFNGLTEXCOORDPOINTERVINTELPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, c⁄° **
	tpoöãr
);

8121 #ifde‡
GL_GLEXT_PROTOTYPES


8122 
GLAPI
 
APIENTRY
 
glVîãxPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8123 
GLAPI
 
APIENTRY
 
glN‹mÆPoöãrvINTEL
 (
GLíum
 
ty≥
, c⁄° **
poöãr
);

8124 
GLAPI
 
APIENTRY
 
glCﬁ‹PoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8125 
GLAPI
 
APIENTRY
 
glTexCo‹dPoöãrvINTEL
 (
GLöt
 
size
, 
GLíum
 
ty≥
, c⁄° **
poöãr
);

8129 #i‚de‡
GL_MESAX_ãxtuª_°ack


8130 
	#GL_MESAX_ãxtuª_°ack
 1

	)

8131 
	#GL_TEXTURE_1D_STACK_MESAX
 0x8759

	)

8132 
	#GL_TEXTURE_2D_STACK_MESAX
 0x875A

	)

8133 
	#GL_PROXY_TEXTURE_1D_STACK_MESAX
 0x875B

	)

8134 
	#GL_PROXY_TEXTURE_2D_STACK_MESAX
 0x875C

	)

8135 
	#GL_TEXTURE_1D_STACK_BINDING_MESAX
 0x875D

	)

8136 
	#GL_TEXTURE_2D_STACK_BINDING_MESAX
 0x875E

	)

8139 #i‚de‡
GL_MESA_∑ck_övît


8140 
	#GL_MESA_∑ck_övît
 1

	)

8141 
	#GL_PACK_INVERT_MESA
 0x8758

	)

8144 #i‚de‡
GL_MESA_ªsize_buf„rs


8145 
	#GL_MESA_ªsize_buf„rs
 1

	)

8146 (
APIENTRYP
 
	tPFNGLRESIZEBUFFERSMESAPROC
) ();

8147 #ifde‡
GL_GLEXT_PROTOTYPES


8148 
GLAPI
 
APIENTRY
 
glResizeBuf„rsMESA
 ();

8152 #i‚de‡
GL_MESA_wödow_pos


8153 
	#GL_MESA_wödow_pos
 1

	)

8154 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

8155 (
APIENTRYP
 
	tPFNGLWINDOWPOS2DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8156 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

8157 (
APIENTRYP
 
	tPFNGLWINDOWPOS2FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8158 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
);

8159 (
APIENTRYP
 
	tPFNGLWINDOWPOS2IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8160 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

8161 (
APIENTRYP
 
	tPFNGLWINDOWPOS2SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8162 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

8163 (
APIENTRYP
 
	tPFNGLWINDOWPOS3DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8164 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

8165 (
APIENTRYP
 
	tPFNGLWINDOWPOS3FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8166 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

8167 (
APIENTRYP
 
	tPFNGLWINDOWPOS3IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8168 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

8169 (
APIENTRYP
 
	tPFNGLWINDOWPOS3SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8170 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DMESAPROC
Ë(
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8171 (
APIENTRYP
 
	tPFNGLWINDOWPOS4DVMESAPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tv
);

8172 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FMESAPROC
Ë(
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

8173 (
APIENTRYP
 
	tPFNGLWINDOWPOS4FVMESAPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tv
);

8174 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IMESAPROC
Ë(
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8175 (
APIENTRYP
 
	tPFNGLWINDOWPOS4IVMESAPROC
Ë(c⁄° 
	tGLöt
 *
	tv
);

8176 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SMESAPROC
Ë(
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

8177 (
APIENTRYP
 
	tPFNGLWINDOWPOS4SVMESAPROC
Ë(c⁄° 
	tGLsh‹t
 *
	tv
);

8178 #ifde‡
GL_GLEXT_PROTOTYPES


8179 
GLAPI
 
APIENTRY
 
glWödowPos2dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
);

8180 
GLAPI
 
APIENTRY
 
glWödowPos2dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8181 
GLAPI
 
APIENTRY
 
glWödowPos2fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
);

8182 
GLAPI
 
APIENTRY
 
glWödowPos2fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8183 
GLAPI
 
APIENTRY
 
glWödowPos2iMESA
 (
GLöt
 
x
, GLöà
y
);

8184 
GLAPI
 
APIENTRY
 
glWödowPos2ivMESA
 (c⁄° 
GLöt
 *
v
);

8185 
GLAPI
 
APIENTRY
 
glWödowPos2sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
);

8186 
GLAPI
 
APIENTRY
 
glWödowPos2svMESA
 (c⁄° 
GLsh‹t
 *
v
);

8187 
GLAPI
 
APIENTRY
 
glWödowPos3dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

8188 
GLAPI
 
APIENTRY
 
glWödowPos3dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8189 
GLAPI
 
APIENTRY
 
glWödowPos3fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

8190 
GLAPI
 
APIENTRY
 
glWödowPos3fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8191 
GLAPI
 
APIENTRY
 
glWödowPos3iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
);

8192 
GLAPI
 
APIENTRY
 
glWödowPos3ivMESA
 (c⁄° 
GLöt
 *
v
);

8193 
GLAPI
 
APIENTRY
 
glWödowPos3sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

8194 
GLAPI
 
APIENTRY
 
glWödowPos3svMESA
 (c⁄° 
GLsh‹t
 *
v
);

8195 
GLAPI
 
APIENTRY
 
glWödowPos4dMESA
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8196 
GLAPI
 
APIENTRY
 
glWödowPos4dvMESA
 (c⁄° 
GLdoubÀ
 *
v
);

8197 
GLAPI
 
APIENTRY
 
glWödowPos4fMESA
 (
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

8198 
GLAPI
 
APIENTRY
 
glWödowPos4fvMESA
 (c⁄° 
GLÊﬂt
 *
v
);

8199 
GLAPI
 
APIENTRY
 
glWödowPos4iMESA
 (
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

8200 
GLAPI
 
APIENTRY
 
glWödowPos4ivMESA
 (c⁄° 
GLöt
 *
v
);

8201 
GLAPI
 
APIENTRY
 
glWödowPos4sMESA
 (
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

8202 
GLAPI
 
APIENTRY
 
glWödowPos4svMESA
 (c⁄° 
GLsh‹t
 *
v
);

8206 #i‚de‡
GL_MESA_ycb¸_ãxtuª


8207 
	#GL_MESA_ycb¸_ãxtuª
 1

	)

8208 
	#GL_UNSIGNED_SHORT_8_8_MESA
 0x85BA

	)

8209 
	#GL_UNSIGNED_SHORT_8_8_REV_MESA
 0x85BB

	)

8210 
	#GL_YCBCR_MESA
 0x8757

	)

8213 #i‚de‡
GL_NVX_c⁄dôi⁄Æ_ªndî


8214 
	#GL_NVX_c⁄dôi⁄Æ_ªndî
 1

	)

8215 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVXPROC
Ë(
	tGLuöt
 
	tid
);

8216 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVXPROC
) ();

8217 #ifde‡
GL_GLEXT_PROTOTYPES


8218 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNVX
 (
GLuöt
 
id
);

8219 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNVX
 ();

8223 #i‚de‡
GL_NV_bödÀss_mu…i_døw_ödúe˘


8224 
	#GL_NV_bödÀss_mu…i_døw_ödúe˘
 1

	)

8225 (
APIENTRYP
 
	tPFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

8226 (
APIENTRYP
 
	tPFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC
Ë(
	tGLíum
 
	tmode
, GLíum 
	tty≥
, c⁄° *
	tödúe˘
, 
	tGLsizei
 
	tdøwCou¡
, GLsizeò
	t°ride
, 
	tGLöt
 
	tvîãxBuf„rCou¡
);

8227 #ifde‡
GL_GLEXT_PROTOTYPES


8228 
GLAPI
 
APIENTRY
 
glMu…iDøwAºaysIndúe˘BödÀssNV
 (
GLíum
 
mode
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

8229 
GLAPI
 
APIENTRY
 
glMu…iDøwEÀmítsIndúe˘BödÀssNV
 (
GLíum
 
mode
, GLíum 
ty≥
, c⁄° *
ödúe˘
, 
GLsizei
 
døwCou¡
, GLsizeò
°ride
, 
GLöt
 
vîãxBuf„rCou¡
);

8233 #i‚de‡
GL_NV_bödÀss_ãxtuª


8234 
	#GL_NV_bödÀss_ãxtuª
 1

	)

8235 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTUREHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
);

8236 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETTEXTURESAMPLERHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
);

8237 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

8238 (
APIENTRYP
 
	tPFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

8239 
GLuöt64
 (
	tAPIENTRYP
 
	tPFNGLGETIMAGEHANDLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, 
	tGLboﬁón
 
	tœyîed
, GLöà
	tœyî
, 
	tGLíum
 
	tf‹m©
);

8240 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
, 
	tGLíum
 
	tac˚ss
);

8241 (
APIENTRYP
 
	tPFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

8242 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

8243 (
APIENTRYP
 
	tPFNGLUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆue
);

8244 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64
 
	tvÆue
);

8245 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64
 *
	tvÆues
);

8246 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTEXTUREHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

8247 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISIMAGEHANDLERESIDENTNVPROC
Ë(
	tGLuöt64
 
	th™dÀ
);

8248 #ifde‡
GL_GLEXT_PROTOTYPES


8249 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªH™dÀNV
 (
GLuöt
 
ãxtuª
);

8250 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëTextuªSam∂îH™dÀNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
);

8251 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

8252 
GLAPI
 
APIENTRY
 
glMakeTextuªH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

8253 
GLAPI
 
GLuöt64
 
APIENTRY
 
glGëImageH™dÀNV
 (
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, 
GLboﬁón
 
œyîed
, GLöà
œyî
, 
GLíum
 
f‹m©
);

8254 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
, 
GLíum
 
ac˚ss
);

8255 
GLAPI
 
APIENTRY
 
glMakeImageH™dÀN⁄ResidítNV
 (
GLuöt64
 
h™dÀ
);

8256 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

8257 
GLAPI
 
APIENTRY
 
glUnif‹mH™dÀui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆue
);

8258 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64
 
vÆue
);

8259 
GLAPI
 
APIENTRY
 
glProgømUnif‹mH™dÀui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64
 *
vÆues
);

8260 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTextuªH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

8261 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsImageH™dÀResidítNV
 (
GLuöt64
 
h™dÀ
);

8265 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d


8266 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d
 1

	)

8267 
	#GL_BLEND_OVERLAP_NV
 0x9281

	)

8268 
	#GL_BLEND_PREMULTIPLIED_SRC_NV
 0x9280

	)

8269 
	#GL_BLUE_NV
 0x1905

	)

8270 
	#GL_COLORBURN_NV
 0x929A

	)

8271 
	#GL_COLORDODGE_NV
 0x9299

	)

8272 
	#GL_CONJOINT_NV
 0x9284

	)

8273 
	#GL_CONTRAST_NV
 0x92A1

	)

8274 
	#GL_DARKEN_NV
 0x9297

	)

8275 
	#GL_DIFFERENCE_NV
 0x929E

	)

8276 
	#GL_DISJOINT_NV
 0x9283

	)

8277 
	#GL_DST_ATOP_NV
 0x928F

	)

8278 
	#GL_DST_IN_NV
 0x928B

	)

8279 
	#GL_DST_NV
 0x9287

	)

8280 
	#GL_DST_OUT_NV
 0x928D

	)

8281 
	#GL_DST_OVER_NV
 0x9289

	)

8282 
	#GL_EXCLUSION_NV
 0x92A0

	)

8283 
	#GL_GREEN_NV
 0x1904

	)

8284 
	#GL_HARDLIGHT_NV
 0x929B

	)

8285 
	#GL_HARDMIX_NV
 0x92A9

	)

8286 
	#GL_HSL_COLOR_NV
 0x92AF

	)

8287 
	#GL_HSL_HUE_NV
 0x92AD

	)

8288 
	#GL_HSL_LUMINOSITY_NV
 0x92B0

	)

8289 
	#GL_HSL_SATURATION_NV
 0x92AE

	)

8290 
	#GL_INVERT_OVG_NV
 0x92B4

	)

8291 
	#GL_INVERT_RGB_NV
 0x92A3

	)

8292 
	#GL_LIGHTEN_NV
 0x9298

	)

8293 
	#GL_LINEARBURN_NV
 0x92A5

	)

8294 
	#GL_LINEARDODGE_NV
 0x92A4

	)

8295 
	#GL_LINEARLIGHT_NV
 0x92A7

	)

8296 
	#GL_MINUS_CLAMPED_NV
 0x92B3

	)

8297 
	#GL_MINUS_NV
 0x929F

	)

8298 
	#GL_MULTIPLY_NV
 0x9294

	)

8299 
	#GL_OVERLAY_NV
 0x9296

	)

8300 
	#GL_PINLIGHT_NV
 0x92A8

	)

8301 
	#GL_PLUS_CLAMPED_ALPHA_NV
 0x92B2

	)

8302 
	#GL_PLUS_CLAMPED_NV
 0x92B1

	)

8303 
	#GL_PLUS_DARKER_NV
 0x9292

	)

8304 
	#GL_PLUS_NV
 0x9291

	)

8305 
	#GL_RED_NV
 0x1903

	)

8306 
	#GL_SCREEN_NV
 0x9295

	)

8307 
	#GL_SOFTLIGHT_NV
 0x929C

	)

8308 
	#GL_SRC_ATOP_NV
 0x928E

	)

8309 
	#GL_SRC_IN_NV
 0x928A

	)

8310 
	#GL_SRC_NV
 0x9286

	)

8311 
	#GL_SRC_OUT_NV
 0x928C

	)

8312 
	#GL_SRC_OVER_NV
 0x9288

	)

8313 
	#GL_UNCORRELATED_NV
 0x9282

	)

8314 
	#GL_VIVIDLIGHT_NV
 0x92A6

	)

8315 
	#GL_XOR_NV
 0x1506

	)

8316 (
APIENTRYP
 
	tPFNGLBLENDPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

8317 (
APIENTRYP
 
	tPFNGLBLENDBARRIERNVPROC
) ();

8318 #ifde‡
GL_GLEXT_PROTOTYPES


8319 
GLAPI
 
APIENTRY
 
glBÀndP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

8320 
GLAPI
 
APIENTRY
 
glBÀndB¨rõrNV
 ();

8324 #i‚de‡
GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít


8325 
	#GL_NV_bÀnd_equ©i⁄_adv™˚d_cohîít
 1

	)

8326 
	#GL_BLEND_ADVANCED_COHERENT_NV
 0x9285

	)

8329 #i‚de‡
GL_NV_bÀnd_squ¨e


8330 
	#GL_NV_bÀnd_squ¨e
 1

	)

8333 #i‚de‡
GL_NV_compuã_¥ogøm5


8334 
	#GL_NV_compuã_¥ogøm5
 1

	)

8335 
	#GL_COMPUTE_PROGRAM_NV
 0x90FB

	)

8336 
	#GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV
 0x90FC

	)

8339 #i‚de‡
GL_NV_c⁄dôi⁄Æ_ªndî


8340 
	#GL_NV_c⁄dôi⁄Æ_ªndî
 1

	)

8341 
	#GL_QUERY_WAIT_NV
 0x8E13

	)

8342 
	#GL_QUERY_NO_WAIT_NV
 0x8E14

	)

8343 
	#GL_QUERY_BY_REGION_WAIT_NV
 0x8E15

	)

8344 
	#GL_QUERY_BY_REGION_NO_WAIT_NV
 0x8E16

	)

8345 (
APIENTRYP
 
	tPFNGLBEGINCONDITIONALRENDERNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	tmode
);

8346 (
APIENTRYP
 
	tPFNGLENDCONDITIONALRENDERNVPROC
) ();

8347 #ifde‡
GL_GLEXT_PROTOTYPES


8348 
GLAPI
 
APIENTRY
 
glBegöC⁄dôi⁄ÆRídîNV
 (
GLuöt
 
id
, 
GLíum
 
mode
);

8349 
GLAPI
 
APIENTRY
 
glEndC⁄dôi⁄ÆRídîNV
 ();

8353 #i‚de‡
GL_NV_c›y_dïth_to_cﬁ‹


8354 
	#GL_NV_c›y_dïth_to_cﬁ‹
 1

	)

8355 
	#GL_DEPTH_STENCIL_TO_RGBA_NV
 0x886E

	)

8356 
	#GL_DEPTH_STENCIL_TO_BGRA_NV
 0x886F

	)

8359 #i‚de‡
GL_NV_c›y_image


8360 
	#GL_NV_c›y_image
 1

	)

8361 (
APIENTRYP
 
	tPFNGLCOPYIMAGESUBDATANVPROC
Ë(
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

8362 #ifde‡
GL_GLEXT_PROTOTYPES


8363 
GLAPI
 
APIENTRY
 
glC›yImageSubD©aNV
 (
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

8367 #i‚de‡
GL_NV_dìp_ãxtuª3D


8368 
	#GL_NV_dìp_ãxtuª3D
 1

	)

8369 
	#GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV
 0x90D0

	)

8370 
	#GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV
 0x90D1

	)

8373 #i‚de‡
GL_NV_dïth_buf„r_Êﬂt


8374 
	#GL_NV_dïth_buf„r_Êﬂt
 1

	)

8375 
	#GL_DEPTH_COMPONENT32F_NV
 0x8DAB

	)

8376 
	#GL_DEPTH32F_STENCIL8_NV
 0x8DAC

	)

8377 
	#GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV
 0x8DAD

	)

8378 
	#GL_DEPTH_BUFFER_FLOAT_MODE_NV
 0x8DAF

	)

8379 (
APIENTRYP
 
	tPFNGLDEPTHRANGEDNVPROC
Ë(
	tGLdoubÀ
 
	tzNór
, GLdoubÀ 
	tzF¨
);

8380 (
APIENTRYP
 
	tPFNGLCLEARDEPTHDNVPROC
Ë(
	tGLdoubÀ
 
	tdïth
);

8381 (
APIENTRYP
 
	tPFNGLDEPTHBOUNDSDNVPROC
Ë(
	tGLdoubÀ
 
	tzmö
, GLdoubÀ 
	tzmax
);

8382 #ifde‡
GL_GLEXT_PROTOTYPES


8383 
GLAPI
 
APIENTRY
 
glDïthR™gedNV
 (
GLdoubÀ
 
zNór
, GLdoubÀ 
zF¨
);

8384 
GLAPI
 
APIENTRY
 
glCÀ¨DïthdNV
 (
GLdoubÀ
 
dïth
);

8385 
GLAPI
 
APIENTRY
 
glDïthBoundsdNV
 (
GLdoubÀ
 
zmö
, GLdoubÀ 
zmax
);

8389 #i‚de‡
GL_NV_dïth_˛amp


8390 
	#GL_NV_dïth_˛amp
 1

	)

8391 
	#GL_DEPTH_CLAMP_NV
 0x864F

	)

8394 #i‚de‡
GL_NV_døw_ãxtuª


8395 
	#GL_NV_døw_ãxtuª
 1

	)

8396 (
APIENTRYP
 
	tPFNGLDRAWTEXTURENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, GLuöà
	tßm∂î
, 
	tGLÊﬂt
 
	tx0
, GLÊﬂà
	ty0
, GLÊﬂà
	tx1
, GLÊﬂà
	ty1
, GLÊﬂà
	tz
, GLÊﬂà
	ts0
, GLÊﬂà
	tt0
, GLÊﬂà
	ts1
, GLÊﬂà
	tt1
);

8397 #ifde‡
GL_GLEXT_PROTOTYPES


8398 
GLAPI
 
APIENTRY
 
glDøwTextuªNV
 (
GLuöt
 
ãxtuª
, GLuöà
ßm∂î
, 
GLÊﬂt
 
x0
, GLÊﬂà
y0
, GLÊﬂà
x1
, GLÊﬂà
y1
, GLÊﬂà
z
, GLÊﬂà
s0
, GLÊﬂà
t0
, GLÊﬂà
s1
, GLÊﬂà
t1
);

8402 #i‚de‡
GL_NV_evÆu©‹s


8403 
	#GL_NV_evÆu©‹s
 1

	)

8404 
	#GL_EVAL_2D_NV
 0x86C0

	)

8405 
	#GL_EVAL_TRIANGULAR_2D_NV
 0x86C1

	)

8406 
	#GL_MAP_TESSELLATION_NV
 0x86C2

	)

8407 
	#GL_MAP_ATTRIB_U_ORDER_NV
 0x86C3

	)

8408 
	#GL_MAP_ATTRIB_V_ORDER_NV
 0x86C4

	)

8409 
	#GL_EVAL_FRACTIONAL_TESSELLATION_NV
 0x86C5

	)

8410 
	#GL_EVAL_VERTEX_ATTRIB0_NV
 0x86C6

	)

8411 
	#GL_EVAL_VERTEX_ATTRIB1_NV
 0x86C7

	)

8412 
	#GL_EVAL_VERTEX_ATTRIB2_NV
 0x86C8

	)

8413 
	#GL_EVAL_VERTEX_ATTRIB3_NV
 0x86C9

	)

8414 
	#GL_EVAL_VERTEX_ATTRIB4_NV
 0x86CA

	)

8415 
	#GL_EVAL_VERTEX_ATTRIB5_NV
 0x86CB

	)

8416 
	#GL_EVAL_VERTEX_ATTRIB6_NV
 0x86CC

	)

8417 
	#GL_EVAL_VERTEX_ATTRIB7_NV
 0x86CD

	)

8418 
	#GL_EVAL_VERTEX_ATTRIB8_NV
 0x86CE

	)

8419 
	#GL_EVAL_VERTEX_ATTRIB9_NV
 0x86CF

	)

8420 
	#GL_EVAL_VERTEX_ATTRIB10_NV
 0x86D0

	)

8421 
	#GL_EVAL_VERTEX_ATTRIB11_NV
 0x86D1

	)

8422 
	#GL_EVAL_VERTEX_ATTRIB12_NV
 0x86D2

	)

8423 
	#GL_EVAL_VERTEX_ATTRIB13_NV
 0x86D3

	)

8424 
	#GL_EVAL_VERTEX_ATTRIB14_NV
 0x86D4

	)

8425 
	#GL_EVAL_VERTEX_ATTRIB15_NV
 0x86D5

	)

8426 
	#GL_MAX_MAP_TESSELLATION_NV
 0x86D6

	)

8427 
	#GL_MAX_RATIONAL_EVAL_ORDER_NV
 0x86D7

	)

8428 (
APIENTRYP
 
	tPFNGLMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLöt
 
	tu‹dî
, GLöà
	tv‹dî
, 
	tGLboﬁón
 
	t∑cked
, c⁄° *
	tpoöts
);

8429 (
APIENTRYP
 
	tPFNGLMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

8430 (
APIENTRYP
 
	tPFNGLMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8431 (
APIENTRYP
 
	tPFNGLGETMAPCONTROLPOINTSNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	tty≥
, 
	tGLsizei
 
	tu°ride
, GLsizeò
	tv°ride
, 
	tGLboﬁón
 
	t∑cked
, *
	tpoöts
);

8432 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8433 (
APIENTRYP
 
	tPFNGLGETMAPPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8434 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8435 (
APIENTRYP
 
	tPFNGLGETMAPATTRIBPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

8436 (
APIENTRYP
 
	tPFNGLEVALMAPSNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tmode
);

8437 #ifde‡
GL_GLEXT_PROTOTYPES


8438 
GLAPI
 
APIENTRY
 
glM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLöt
 
u‹dî
, GLöà
v‹dî
, 
GLboﬁón
 
∑cked
, c⁄° *
poöts
);

8439 
GLAPI
 
APIENTRY
 
glM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

8440 
GLAPI
 
APIENTRY
 
glM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

8441 
GLAPI
 
APIENTRY
 
glGëM≠C⁄åﬁPoötsNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
ty≥
, 
GLsizei
 
u°ride
, GLsizeò
v°ride
, 
GLboﬁón
 
∑cked
, *
poöts
);

8442 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîivNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8443 
GLAPI
 
APIENTRY
 
glGëM≠P¨amëîfvNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8444 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

8445 
GLAPI
 
APIENTRY
 
glGëM≠AâribP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

8446 
GLAPI
 
APIENTRY
 
glEvÆM≠sNV
 (
GLíum
 
èrgë
, GLíum 
mode
);

8450 #i‚de‡
GL_NV_ex∂icô_mu…ißm∂e


8451 
	#GL_NV_ex∂icô_mu…ißm∂e
 1

	)

8452 
	#GL_SAMPLE_POSITION_NV
 0x8E50

	)

8453 
	#GL_SAMPLE_MASK_NV
 0x8E51

	)

8454 
	#GL_SAMPLE_MASK_VALUE_NV
 0x8E52

	)

8455 
	#GL_TEXTURE_BINDING_RENDERBUFFER_NV
 0x8E53

	)

8456 
	#GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV
 0x8E54

	)

8457 
	#GL_TEXTURE_RENDERBUFFER_NV
 0x8E55

	)

8458 
	#GL_SAMPLER_RENDERBUFFER_NV
 0x8E56

	)

8459 
	#GL_INT_SAMPLER_RENDERBUFFER_NV
 0x8E57

	)

8460 
	#GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV
 0x8E58

	)

8461 
	#GL_MAX_SAMPLE_MASK_WORDS_NV
 0x8E59

	)

8462 (
APIENTRYP
 
	tPFNGLGETMULTISAMPLEFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 *
	tvÆ
);

8463 (
APIENTRYP
 
	tPFNGLSAMPLEMASKINDEXEDNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLbôfõld
 
	tmask
);

8464 (
APIENTRYP
 
	tPFNGLTEXRENDERBUFFERNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tªndîbuf„r
);

8465 #ifde‡
GL_GLEXT_PROTOTYPES


8466 
GLAPI
 
APIENTRY
 
glGëMu…ißm∂efvNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLÊﬂt
 *
vÆ
);

8467 
GLAPI
 
APIENTRY
 
glSam∂eMaskIndexedNV
 (
GLuöt
 
ödex
, 
GLbôfõld
 
mask
);

8468 
GLAPI
 
APIENTRY
 
glTexRídîbuf„rNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ªndîbuf„r
);

8472 #i‚de‡
GL_NV_„n˚


8473 
	#GL_NV_„n˚
 1

	)

8474 
	#GL_ALL_COMPLETED_NV
 0x84F2

	)

8475 
	#GL_FENCE_STATUS_NV
 0x84F3

	)

8476 
	#GL_FENCE_CONDITION_NV
 0x84F4

	)

8477 (
APIENTRYP
 
	tPFNGLDELETEFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t„n˚s
);

8478 (
APIENTRYP
 
	tPFNGLGENFENCESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t„n˚s
);

8479 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

8480 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLTESTFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

8481 (
APIENTRYP
 
	tPFNGLGETFENCEIVNVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8482 (
APIENTRYP
 
	tPFNGLFINISHFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
);

8483 (
APIENTRYP
 
	tPFNGLSETFENCENVPROC
Ë(
	tGLuöt
 
	t„n˚
, 
	tGLíum
 
	tc⁄dôi⁄
);

8484 #ifde‡
GL_GLEXT_PROTOTYPES


8485 
GLAPI
 
APIENTRY
 
glDñëeFí˚sNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
„n˚s
);

8486 
GLAPI
 
APIENTRY
 
glGíFí˚sNV
 (
GLsizei
 
n
, 
GLuöt
 *
„n˚s
);

8487 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsFí˚NV
 (
GLuöt
 
„n˚
);

8488 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glTe°Fí˚NV
 (
GLuöt
 
„n˚
);

8489 
GLAPI
 
APIENTRY
 
glGëFí˚ivNV
 (
GLuöt
 
„n˚
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8490 
GLAPI
 
APIENTRY
 
glFöishFí˚NV
 (
GLuöt
 
„n˚
);

8491 
GLAPI
 
APIENTRY
 
glSëFí˚NV
 (
GLuöt
 
„n˚
, 
GLíum
 
c⁄dôi⁄
);

8495 #i‚de‡
GL_NV_Êﬂt_buf„r


8496 
	#GL_NV_Êﬂt_buf„r
 1

	)

8497 
	#GL_FLOAT_R_NV
 0x8880

	)

8498 
	#GL_FLOAT_RG_NV
 0x8881

	)

8499 
	#GL_FLOAT_RGB_NV
 0x8882

	)

8500 
	#GL_FLOAT_RGBA_NV
 0x8883

	)

8501 
	#GL_FLOAT_R16_NV
 0x8884

	)

8502 
	#GL_FLOAT_R32_NV
 0x8885

	)

8503 
	#GL_FLOAT_RG16_NV
 0x8886

	)

8504 
	#GL_FLOAT_RG32_NV
 0x8887

	)

8505 
	#GL_FLOAT_RGB16_NV
 0x8888

	)

8506 
	#GL_FLOAT_RGB32_NV
 0x8889

	)

8507 
	#GL_FLOAT_RGBA16_NV
 0x888A

	)

8508 
	#GL_FLOAT_RGBA32_NV
 0x888B

	)

8509 
	#GL_TEXTURE_FLOAT_COMPONENTS_NV
 0x888C

	)

8510 
	#GL_FLOAT_CLEAR_COLOR_VALUE_NV
 0x888D

	)

8511 
	#GL_FLOAT_RGBA_MODE_NV
 0x888E

	)

8514 #i‚de‡
GL_NV_fog_di°™˚


8515 
	#GL_NV_fog_di°™˚
 1

	)

8516 
	#GL_FOG_DISTANCE_MODE_NV
 0x855A

	)

8517 
	#GL_EYE_RADIAL_NV
 0x855B

	)

8518 
	#GL_EYE_PLANE_ABSOLUTE_NV
 0x855C

	)

8521 #i‚de‡
GL_NV_‰agmít_¥ogøm


8522 
	#GL_NV_‰agmít_¥ogøm
 1

	)

8523 
	#GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV
 0x8868

	)

8524 
	#GL_FRAGMENT_PROGRAM_NV
 0x8870

	)

8525 
	#GL_MAX_TEXTURE_COORDS_NV
 0x8871

	)

8526 
	#GL_MAX_TEXTURE_IMAGE_UNITS_NV
 0x8872

	)

8527 
	#GL_FRAGMENT_PROGRAM_BINDING_NV
 0x8873

	)

8528 
	#GL_PROGRAM_ERROR_STRING_NV
 0x8874

	)

8529 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

8530 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4FVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLÊﬂt
 *
	tv
);

8531 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

8532 (
APIENTRYP
 
	tPFNGLPROGRAMNAMEDPARAMETER4DVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, c⁄° 
	tGLdoubÀ
 *
	tv
);

8533 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLÊﬂt
 *
	t∑øms
);

8534 (
APIENTRYP
 
	tPFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t«me
, 
	tGLdoubÀ
 *
	t∑øms
);

8535 #ifde‡
GL_GLEXT_PROTOTYPES


8536 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

8537 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4fvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLÊﬂt
 *
v
);

8538 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

8539 
GLAPI
 
APIENTRY
 
glProgømNamedP¨amëî4dvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, c⁄° 
GLdoubÀ
 *
v
);

8540 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîfvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLÊﬂt
 *
∑øms
);

8541 
GLAPI
 
APIENTRY
 
glGëProgømNamedP¨amëîdvNV
 (
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
«me
, 
GLdoubÀ
 *
∑øms
);

8545 #i‚de‡
GL_NV_‰agmít_¥ogøm2


8546 
	#GL_NV_‰agmít_¥ogøm2
 1

	)

8547 
	#GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV
 0x88F4

	)

8548 
	#GL_MAX_PROGRAM_CALL_DEPTH_NV
 0x88F5

	)

8549 
	#GL_MAX_PROGRAM_IF_DEPTH_NV
 0x88F6

	)

8550 
	#GL_MAX_PROGRAM_LOOP_DEPTH_NV
 0x88F7

	)

8551 
	#GL_MAX_PROGRAM_LOOP_COUNT_NV
 0x88F8

	)

8554 #i‚de‡
GL_NV_‰agmít_¥ogøm4


8555 
	#GL_NV_‰agmít_¥ogøm4
 1

	)

8558 #i‚de‡
GL_NV_‰agmít_¥ogøm_›ti⁄


8559 
	#GL_NV_‰agmít_¥ogøm_›ti⁄
 1

	)

8562 #i‚de‡
GL_NV_‰amebuf„r_mu…ißm∂e_covîage


8563 
	#GL_NV_‰amebuf„r_mu…ißm∂e_covîage
 1

	)

8564 
	#GL_RENDERBUFFER_COVERAGE_SAMPLES_NV
 0x8CAB

	)

8565 
	#GL_RENDERBUFFER_COLOR_SAMPLES_NV
 0x8E10

	)

8566 
	#GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E11

	)

8567 
	#GL_MULTISAMPLE_COVERAGE_MODES_NV
 0x8E12

	)

8568 (
APIENTRYP
 
	tPFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, GLíum 
	töã∫Æf‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
);

8569 #ifde‡
GL_GLEXT_PROTOTYPES


8570 
GLAPI
 
APIENTRY
 
glRídîbuf„rSt‹ageMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, GLíum 
öã∫Æf‹m©
, GLsizeò
width
, GLsizeò
height
);

8574 #i‚de‡
GL_NV_geomëry_¥ogøm4


8575 
	#GL_NV_geomëry_¥ogøm4
 1

	)

8576 
	#GL_GEOMETRY_PROGRAM_NV
 0x8C26

	)

8577 
	#GL_MAX_PROGRAM_OUTPUT_VERTICES_NV
 0x8C27

	)

8578 
	#GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV
 0x8C28

	)

8579 (
APIENTRYP
 
	tPFNGLPROGRAMVERTEXLIMITNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tlimô
);

8580 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
);

8581 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTURELAYEREXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLöà
	tœyî
);

8582 (
APIENTRYP
 
	tPFNGLFRAMEBUFFERTEXTUREFACEEXTPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t©èchmít
, 
	tGLuöt
 
	tãxtuª
, 
	tGLöt
 
	tÀvñ
, GLíum 
	tÁ˚
);

8583 #ifde‡
GL_GLEXT_PROTOTYPES


8584 
GLAPI
 
APIENTRY
 
glProgømVîãxLimôNV
 (
GLíum
 
èrgë
, 
GLöt
 
limô
);

8585 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
);

8586 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªLayîEXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLöà
œyî
);

8587 
GLAPI
 
APIENTRY
 
glFømebuf„rTextuªFa˚EXT
 (
GLíum
 
èrgë
, GLíum 
©èchmít
, 
GLuöt
 
ãxtuª
, 
GLöt
 
Àvñ
, GLíum 
Á˚
);

8591 #i‚de‡
GL_NV_geomëry_shadî4


8592 
	#GL_NV_geomëry_shadî4
 1

	)

8595 #i‚de‡
GL_NV_gpu_¥ogøm4


8596 
	#GL_NV_gpu_¥ogøm4
 1

	)

8597 
	#GL_MIN_PROGRAM_TEXEL_OFFSET_NV
 0x8904

	)

8598 
	#GL_MAX_PROGRAM_TEXEL_OFFSET_NV
 0x8905

	)

8599 
	#GL_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8906

	)

8600 
	#GL_PROGRAM_RESULT_COMPONENTS_NV
 0x8907

	)

8601 
	#GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV
 0x8908

	)

8602 
	#GL_MAX_PROGRAM_RESULT_COMPONENTS_NV
 0x8909

	)

8603 
	#GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV
 0x8DA5

	)

8604 
	#GL_MAX_PROGRAM_GENERIC_RESULTS_NV
 0x8DA6

	)

8605 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8606 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

8607 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

8608 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

8609 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

8610 (
APIENTRYP
 
	tPFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

8611 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4INVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

8612 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	t∑øms
);

8613 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4IVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

8614 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UINVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

8615 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	t∑øms
);

8616 (
APIENTRYP
 
	tPFNGLPROGRAMENVPARAMETERSI4UIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

8617 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

8618 (
APIENTRYP
 
	tPFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

8619 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLöt
 *
	t∑øms
);

8620 (
APIENTRYP
 
	tPFNGLGETPROGRAMENVPARAMETERIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øms
);

8621 #ifde‡
GL_GLEXT_PROTOTYPES


8622 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

8623 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

8624 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

8625 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

8626 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

8627 
GLAPI
 
APIENTRY
 
glProgømLoˇlP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

8628 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4iNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

8629 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLöt
 *
∑øms
);

8630 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4ivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

8631 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uiNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

8632 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° GLuöà*
∑øms
);

8633 
GLAPI
 
APIENTRY
 
glProgømEnvP¨amëîsI4uivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

8634 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

8635 
GLAPI
 
APIENTRY
 
glGëProgømLoˇlP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

8636 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLöt
 *
∑øms
);

8637 
GLAPI
 
APIENTRY
 
glGëProgømEnvP¨amëîIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øms
);

8641 #i‚de‡
GL_NV_gpu_¥ogøm5


8642 
	#GL_NV_gpu_¥ogøm5
 1

	)

8643 
	#GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV
 0x8E5A

	)

8644 
	#GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5B

	)

8645 
	#GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV
 0x8E5C

	)

8646 
	#GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV
 0x8E5D

	)

8647 
	#GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5E

	)

8648 
	#GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV
 0x8E5F

	)

8649 
	#GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV
 0x8F44

	)

8650 
	#GL_MAX_PROGRAM_SUBROUTINE_NUM_NV
 0x8F45

	)

8651 (
APIENTRYP
 
	tPFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt
 *
	t∑øms
);

8652 (
APIENTRYP
 
	tPFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà*
	t∑øm
);

8653 #ifde‡
GL_GLEXT_PROTOTYPES


8654 
GLAPI
 
APIENTRY
 
glProgømSubroutöeP¨amëîsuivNV
 (
GLíum
 
èrgë
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt
 *
∑øms
);

8655 
GLAPI
 
APIENTRY
 
glGëProgømSubroutöeP¨amëîuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà*
∑øm
);

8659 #i‚de‡
GL_NV_gpu_¥ogøm5_mem_exãnded


8660 
	#GL_NV_gpu_¥ogøm5_mem_exãnded
 1

	)

8663 #i‚de‡
GL_NV_gpu_shadî5


8664 
	#GL_NV_gpu_shadî5
 1

	)

8665 
öt64_t
 
	tGLöt64EXT
;

8666 
	#GL_INT64_NV
 0x140E

	)

8667 
	#GL_UNSIGNED_INT64_NV
 0x140F

	)

8668 
	#GL_INT8_NV
 0x8FE0

	)

8669 
	#GL_INT8_VEC2_NV
 0x8FE1

	)

8670 
	#GL_INT8_VEC3_NV
 0x8FE2

	)

8671 
	#GL_INT8_VEC4_NV
 0x8FE3

	)

8672 
	#GL_INT16_NV
 0x8FE4

	)

8673 
	#GL_INT16_VEC2_NV
 0x8FE5

	)

8674 
	#GL_INT16_VEC3_NV
 0x8FE6

	)

8675 
	#GL_INT16_VEC4_NV
 0x8FE7

	)

8676 
	#GL_INT64_VEC2_NV
 0x8FE9

	)

8677 
	#GL_INT64_VEC3_NV
 0x8FEA

	)

8678 
	#GL_INT64_VEC4_NV
 0x8FEB

	)

8679 
	#GL_UNSIGNED_INT8_NV
 0x8FEC

	)

8680 
	#GL_UNSIGNED_INT8_VEC2_NV
 0x8FED

	)

8681 
	#GL_UNSIGNED_INT8_VEC3_NV
 0x8FEE

	)

8682 
	#GL_UNSIGNED_INT8_VEC4_NV
 0x8FEF

	)

8683 
	#GL_UNSIGNED_INT16_NV
 0x8FF0

	)

8684 
	#GL_UNSIGNED_INT16_VEC2_NV
 0x8FF1

	)

8685 
	#GL_UNSIGNED_INT16_VEC3_NV
 0x8FF2

	)

8686 
	#GL_UNSIGNED_INT16_VEC4_NV
 0x8FF3

	)

8687 
	#GL_UNSIGNED_INT64_VEC2_NV
 0x8FF5

	)

8688 
	#GL_UNSIGNED_INT64_VEC3_NV
 0x8FF6

	)

8689 
	#GL_UNSIGNED_INT64_VEC4_NV
 0x8FF7

	)

8690 
	#GL_FLOAT16_NV
 0x8FF8

	)

8691 
	#GL_FLOAT16_VEC2_NV
 0x8FF9

	)

8692 
	#GL_FLOAT16_VEC3_NV
 0x8FFA

	)

8693 
	#GL_FLOAT16_VEC4_NV
 0x8FFB

	)

8694 (
APIENTRYP
 
	tPFNGLUNIFORM1I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

8695 (
APIENTRYP
 
	tPFNGLUNIFORM2I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

8696 (
APIENTRYP
 
	tPFNGLUNIFORM3I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

8697 (
APIENTRYP
 
	tPFNGLUNIFORM4I64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

8698 (
APIENTRYP
 
	tPFNGLUNIFORM1I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

8699 (
APIENTRYP
 
	tPFNGLUNIFORM2I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

8700 (
APIENTRYP
 
	tPFNGLUNIFORM3I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

8701 (
APIENTRYP
 
	tPFNGLUNIFORM4I64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

8702 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

8703 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

8704 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

8705 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

8706 (
APIENTRYP
 
	tPFNGLUNIFORM1UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

8707 (
APIENTRYP
 
	tPFNGLUNIFORM2UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

8708 (
APIENTRYP
 
	tPFNGLUNIFORM3UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

8709 (
APIENTRYP
 
	tPFNGLUNIFORM4UI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

8710 (
APIENTRYP
 
	tPFNGLGETUNIFORMI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 *
	t∑øms
);

8711 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
);

8712 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

8713 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

8714 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

8715 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

8716 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

8717 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

8718 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4I64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt64EXT
 *
	tvÆue
);

8719 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
);

8720 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

8721 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

8722 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

8723 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM1UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

8724 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM2UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

8725 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM3UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

8726 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORM4UI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

8727 #ifde‡
GL_GLEXT_PROTOTYPES


8728 
GLAPI
 
APIENTRY
 
glUnif‹m1i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

8729 
GLAPI
 
APIENTRY
 
glUnif‹m2i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

8730 
GLAPI
 
APIENTRY
 
glUnif‹m3i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

8731 
GLAPI
 
APIENTRY
 
glUnif‹m4i64NV
 (
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

8732 
GLAPI
 
APIENTRY
 
glUnif‹m1i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

8733 
GLAPI
 
APIENTRY
 
glUnif‹m2i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

8734 
GLAPI
 
APIENTRY
 
glUnif‹m3i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

8735 
GLAPI
 
APIENTRY
 
glUnif‹m4i64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

8736 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

8737 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

8738 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

8739 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

8740 
GLAPI
 
APIENTRY
 
glUnif‹m1ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

8741 
GLAPI
 
APIENTRY
 
glUnif‹m2ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

8742 
GLAPI
 
APIENTRY
 
glUnif‹m3ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

8743 
GLAPI
 
APIENTRY
 
glUnif‹m4ui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

8744 
GLAPI
 
APIENTRY
 
glGëUnif‹mi64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 *
∑øms
);

8745 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
);

8746 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

8747 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

8748 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

8749 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

8750 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

8751 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

8752 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4i64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLöt64EXT
 *
vÆue
);

8753 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
);

8754 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

8755 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

8756 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

8757 
GLAPI
 
APIENTRY
 
glProgømUnif‹m1ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

8758 
GLAPI
 
APIENTRY
 
glProgømUnif‹m2ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

8759 
GLAPI
 
APIENTRY
 
glProgømUnif‹m3ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

8760 
GLAPI
 
APIENTRY
 
glProgømUnif‹m4ui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

8764 #i‚de‡
GL_NV_hÆf_Êﬂt


8765 
	#GL_NV_hÆf_Êﬂt
 1

	)

8766 
	tGLhÆfNV
;

8767 
	#GL_HALF_FLOAT_NV
 0x140B

	)

8768 (
APIENTRYP
 
	tPFNGLVERTEX2HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

8769 (
APIENTRYP
 
	tPFNGLVERTEX2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8770 (
APIENTRYP
 
	tPFNGLVERTEX3HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

8771 (
APIENTRYP
 
	tPFNGLVERTEX3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8772 (
APIENTRYP
 
	tPFNGLVERTEX4HNVPROC
Ë(
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

8773 (
APIENTRYP
 
	tPFNGLVERTEX4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8774 (
APIENTRYP
 
	tPFNGLNORMAL3HNVPROC
Ë(
	tGLhÆfNV
 
	tnx
, GLhÆfNV 
	tny
, GLhÆfNV 
	tnz
);

8775 (
APIENTRYP
 
	tPFNGLNORMAL3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8776 (
APIENTRYP
 
	tPFNGLCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

8777 (
APIENTRYP
 
	tPFNGLCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8778 (
APIENTRYP
 
	tPFNGLCOLOR4HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
, GLhÆfNV 
	tÆpha
);

8779 (
APIENTRYP
 
	tPFNGLCOLOR4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8780 (
APIENTRYP
 
	tPFNGLTEXCOORD1HNVPROC
Ë(
	tGLhÆfNV
 
	ts
);

8781 (
APIENTRYP
 
	tPFNGLTEXCOORD1HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8782 (
APIENTRYP
 
	tPFNGLTEXCOORD2HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

8783 (
APIENTRYP
 
	tPFNGLTEXCOORD2HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8784 (
APIENTRYP
 
	tPFNGLTEXCOORD3HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

8785 (
APIENTRYP
 
	tPFNGLTEXCOORD3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8786 (
APIENTRYP
 
	tPFNGLTEXCOORD4HNVPROC
Ë(
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

8787 (
APIENTRYP
 
	tPFNGLTEXCOORD4HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8788 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
);

8789 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD1HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8790 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
);

8791 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD2HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8792 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
);

8793 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD3HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8794 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLhÆfNV
 
	ts
, GLhÆfNV 
	tt
, GLhÆfNV 
	tr
, GLhÆfNV 
	tq
);

8795 (
APIENTRYP
 
	tPFNGLMULTITEXCOORD4HVNVPROC
Ë(
	tGLíum
 
	tèrgë
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8796 (
APIENTRYP
 
	tPFNGLFOGCOORDHNVPROC
Ë(
	tGLhÆfNV
 
	tfog
);

8797 (
APIENTRYP
 
	tPFNGLFOGCOORDHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tfog
);

8798 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HNVPROC
Ë(
	tGLhÆfNV
 
	tªd
, GLhÆfNV 
	tgªí
, GLhÆfNV 
	tblue
);

8799 (
APIENTRYP
 
	tPFNGLSECONDARYCOLOR3HVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tv
);

8800 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHNVPROC
Ë(
	tGLhÆfNV
 
	tweight
);

8801 (
APIENTRYP
 
	tPFNGLVERTEXWEIGHTHVNVPROC
Ë(c⁄° 
	tGLhÆfNV
 *
	tweight
);

8802 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
);

8803 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8804 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
);

8805 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8806 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
);

8807 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8808 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLhÆfNV
 
	tx
, GLhÆfNV 
	ty
, GLhÆfNV 
	tz
, GLhÆfNV 
	tw
);

8809 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8810 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8811 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8812 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8813 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4HVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLhÆfNV
 *
	tv
);

8814 #ifde‡
GL_GLEXT_PROTOTYPES


8815 
GLAPI
 
APIENTRY
 
glVîãx2hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
);

8816 
GLAPI
 
APIENTRY
 
glVîãx2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8817 
GLAPI
 
APIENTRY
 
glVîãx3hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

8818 
GLAPI
 
APIENTRY
 
glVîãx3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8819 
GLAPI
 
APIENTRY
 
glVîãx4hNV
 (
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

8820 
GLAPI
 
APIENTRY
 
glVîãx4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8821 
GLAPI
 
APIENTRY
 
glN‹mÆ3hNV
 (
GLhÆfNV
 
nx
, GLhÆfNV 
ny
, GLhÆfNV 
nz
);

8822 
GLAPI
 
APIENTRY
 
glN‹mÆ3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8823 
GLAPI
 
APIENTRY
 
glCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

8824 
GLAPI
 
APIENTRY
 
glCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8825 
GLAPI
 
APIENTRY
 
glCﬁ‹4hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
, GLhÆfNV 
Æpha
);

8826 
GLAPI
 
APIENTRY
 
glCﬁ‹4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8827 
GLAPI
 
APIENTRY
 
glTexCo‹d1hNV
 (
GLhÆfNV
 
s
);

8828 
GLAPI
 
APIENTRY
 
glTexCo‹d1hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8829 
GLAPI
 
APIENTRY
 
glTexCo‹d2hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
);

8830 
GLAPI
 
APIENTRY
 
glTexCo‹d2hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8831 
GLAPI
 
APIENTRY
 
glTexCo‹d3hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

8832 
GLAPI
 
APIENTRY
 
glTexCo‹d3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8833 
GLAPI
 
APIENTRY
 
glTexCo‹d4hNV
 (
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

8834 
GLAPI
 
APIENTRY
 
glTexCo‹d4hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8835 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
);

8836 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d1hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

8837 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
);

8838 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d2hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

8839 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
);

8840 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d3hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

8841 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hNV
 (
GLíum
 
èrgë
, 
GLhÆfNV
 
s
, GLhÆfNV 
t
, GLhÆfNV 
r
, GLhÆfNV 
q
);

8842 
GLAPI
 
APIENTRY
 
glMu…iTexCo‹d4hvNV
 (
GLíum
 
èrgë
, c⁄° 
GLhÆfNV
 *
v
);

8843 
GLAPI
 
APIENTRY
 
glFogCo‹dhNV
 (
GLhÆfNV
 
fog
);

8844 
GLAPI
 
APIENTRY
 
glFogCo‹dhvNV
 (c⁄° 
GLhÆfNV
 *
fog
);

8845 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hNV
 (
GLhÆfNV
 
ªd
, GLhÆfNV 
gªí
, GLhÆfNV 
blue
);

8846 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹3hvNV
 (c⁄° 
GLhÆfNV
 *
v
);

8847 
GLAPI
 
APIENTRY
 
glVîãxWeighthNV
 (
GLhÆfNV
 
weight
);

8848 
GLAPI
 
APIENTRY
 
glVîãxWeighthvNV
 (c⁄° 
GLhÆfNV
 *
weight
);

8849 
GLAPI
 
APIENTRY
 
glVîãxAârib1hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
);

8850 
GLAPI
 
APIENTRY
 
glVîãxAârib1hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

8851 
GLAPI
 
APIENTRY
 
glVîãxAârib2hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
);

8852 
GLAPI
 
APIENTRY
 
glVîãxAârib2hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

8853 
GLAPI
 
APIENTRY
 
glVîãxAârib3hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
);

8854 
GLAPI
 
APIENTRY
 
glVîãxAârib3hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

8855 
GLAPI
 
APIENTRY
 
glVîãxAârib4hNV
 (
GLuöt
 
ödex
, 
GLhÆfNV
 
x
, GLhÆfNV 
y
, GLhÆfNV 
z
, GLhÆfNV 
w
);

8856 
GLAPI
 
APIENTRY
 
glVîãxAârib4hvNV
 (
GLuöt
 
ödex
, c⁄° 
GLhÆfNV
 *
v
);

8857 
GLAPI
 
APIENTRY
 
glVîãxAâribs1hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

8858 
GLAPI
 
APIENTRY
 
glVîãxAâribs2hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

8859 
GLAPI
 
APIENTRY
 
glVîãxAâribs3hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

8860 
GLAPI
 
APIENTRY
 
glVîãxAâribs4hvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
n
, c⁄° 
GLhÆfNV
 *
v
);

8864 #i‚de‡
GL_NV_light_max_exp⁄ít


8865 
	#GL_NV_light_max_exp⁄ít
 1

	)

8866 
	#GL_MAX_SHININESS_NV
 0x8504

	)

8867 
	#GL_MAX_SPOT_EXPONENT_NV
 0x8505

	)

8870 #i‚de‡
GL_NV_mu…ißm∂e_covîage


8871 
	#GL_NV_mu…ißm∂e_covîage
 1

	)

8872 
	#GL_COLOR_SAMPLES_NV
 0x8E20

	)

8875 #i‚de‡
GL_NV_mu…ißm∂e_fûãr_höt


8876 
	#GL_NV_mu…ißm∂e_fûãr_höt
 1

	)

8877 
	#GL_MULTISAMPLE_FILTER_HINT_NV
 0x8534

	)

8880 #i‚de‡
GL_NV_oc˛usi⁄_quîy


8881 
	#GL_NV_oc˛usi⁄_quîy
 1

	)

8882 
	#GL_PIXEL_COUNTER_BITS_NV
 0x8864

	)

8883 
	#GL_CURRENT_OCCLUSION_QUERY_ID_NV
 0x8865

	)

8884 
	#GL_PIXEL_COUNT_NV
 0x8866

	)

8885 
	#GL_PIXEL_COUNT_AVAILABLE_NV
 0x8867

	)

8886 (
APIENTRYP
 
	tPFNGLGENOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

8887 (
APIENTRYP
 
	tPFNGLDELETEOCCLUSIONQUERIESNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

8888 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

8889 (
APIENTRYP
 
	tPFNGLBEGINOCCLUSIONQUERYNVPROC
Ë(
	tGLuöt
 
	tid
);

8890 (
APIENTRYP
 
	tPFNGLENDOCCLUSIONQUERYNVPROC
) ();

8891 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

8892 (
APIENTRYP
 
	tPFNGLGETOCCLUSIONQUERYUIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

8893 #ifde‡
GL_GLEXT_PROTOTYPES


8894 
GLAPI
 
APIENTRY
 
glGíOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

8895 
GLAPI
 
APIENTRY
 
glDñëeOc˛usi⁄QuîõsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

8896 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

8897 
GLAPI
 
APIENTRY
 
glBegöOc˛usi⁄QuîyNV
 (
GLuöt
 
id
);

8898 
GLAPI
 
APIENTRY
 
glEndOc˛usi⁄QuîyNV
 ();

8899 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

8900 
GLAPI
 
APIENTRY
 
glGëOc˛usi⁄QuîyuivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

8904 #i‚de‡
GL_NV_∑cked_dïth_°ícû


8905 
	#GL_NV_∑cked_dïth_°ícû
 1

	)

8906 
	#GL_DEPTH_STENCIL_NV
 0x84F9

	)

8907 
	#GL_UNSIGNED_INT_24_8_NV
 0x84FA

	)

8910 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘


8911 
	#GL_NV_∑ømëî_buf„r_obje˘
 1

	)

8912 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV
 0x8DA0

	)

8913 
	#GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV
 0x8DA1

	)

8914 
	#GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA2

	)

8915 
	#GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA3

	)

8916 
	#GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV
 0x8DA4

	)

8917 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

8918 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t∑øms
);

8919 (
APIENTRYP
 
	tPFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tbödögIndex
, GLuöà
	tw‹dIndex
, 
	tGLsizei
 
	tcou¡
, c⁄° GLuöà*
	t∑øms
);

8920 #ifde‡
GL_GLEXT_PROTOTYPES


8921 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
∑øms
);

8922 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
∑øms
);

8923 
GLAPI
 
APIENTRY
 
glProgømBuf„rP¨amëîsIuivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
bödögIndex
, GLuöà
w‹dIndex
, 
GLsizei
 
cou¡
, c⁄° GLuöà*
∑øms
);

8927 #i‚de‡
GL_NV_∑ømëî_buf„r_obje˘2


8928 
	#GL_NV_∑ømëî_buf„r_obje˘2
 1

	)

8931 #i‚de‡
GL_NV_∑th_ªndîög


8932 
	#GL_NV_∑th_ªndîög
 1

	)

8933 
	#GL_PATH_FORMAT_SVG_NV
 0x9070

	)

8934 
	#GL_PATH_FORMAT_PS_NV
 0x9071

	)

8935 
	#GL_STANDARD_FONT_NAME_NV
 0x9072

	)

8936 
	#GL_SYSTEM_FONT_NAME_NV
 0x9073

	)

8937 
	#GL_FILE_NAME_NV
 0x9074

	)

8938 
	#GL_PATH_STROKE_WIDTH_NV
 0x9075

	)

8939 
	#GL_PATH_END_CAPS_NV
 0x9076

	)

8940 
	#GL_PATH_INITIAL_END_CAP_NV
 0x9077

	)

8941 
	#GL_PATH_TERMINAL_END_CAP_NV
 0x9078

	)

8942 
	#GL_PATH_JOIN_STYLE_NV
 0x9079

	)

8943 
	#GL_PATH_MITER_LIMIT_NV
 0x907A

	)

8944 
	#GL_PATH_DASH_CAPS_NV
 0x907B

	)

8945 
	#GL_PATH_INITIAL_DASH_CAP_NV
 0x907C

	)

8946 
	#GL_PATH_TERMINAL_DASH_CAP_NV
 0x907D

	)

8947 
	#GL_PATH_DASH_OFFSET_NV
 0x907E

	)

8948 
	#GL_PATH_CLIENT_LENGTH_NV
 0x907F

	)

8949 
	#GL_PATH_FILL_MODE_NV
 0x9080

	)

8950 
	#GL_PATH_FILL_MASK_NV
 0x9081

	)

8951 
	#GL_PATH_FILL_COVER_MODE_NV
 0x9082

	)

8952 
	#GL_PATH_STROKE_COVER_MODE_NV
 0x9083

	)

8953 
	#GL_PATH_STROKE_MASK_NV
 0x9084

	)

8954 
	#GL_COUNT_UP_NV
 0x9088

	)

8955 
	#GL_COUNT_DOWN_NV
 0x9089

	)

8956 
	#GL_PATH_OBJECT_BOUNDING_BOX_NV
 0x908A

	)

8957 
	#GL_CONVEX_HULL_NV
 0x908B

	)

8958 
	#GL_BOUNDING_BOX_NV
 0x908D

	)

8959 
	#GL_TRANSLATE_X_NV
 0x908E

	)

8960 
	#GL_TRANSLATE_Y_NV
 0x908F

	)

8961 
	#GL_TRANSLATE_2D_NV
 0x9090

	)

8962 
	#GL_TRANSLATE_3D_NV
 0x9091

	)

8963 
	#GL_AFFINE_2D_NV
 0x9092

	)

8964 
	#GL_AFFINE_3D_NV
 0x9094

	)

8965 
	#GL_TRANSPOSE_AFFINE_2D_NV
 0x9096

	)

8966 
	#GL_TRANSPOSE_AFFINE_3D_NV
 0x9098

	)

8967 
	#GL_UTF8_NV
 0x909A

	)

8968 
	#GL_UTF16_NV
 0x909B

	)

8969 
	#GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV
 0x909C

	)

8970 
	#GL_PATH_COMMAND_COUNT_NV
 0x909D

	)

8971 
	#GL_PATH_COORD_COUNT_NV
 0x909E

	)

8972 
	#GL_PATH_DASH_ARRAY_COUNT_NV
 0x909F

	)

8973 
	#GL_PATH_COMPUTED_LENGTH_NV
 0x90A0

	)

8974 
	#GL_PATH_FILL_BOUNDING_BOX_NV
 0x90A1

	)

8975 
	#GL_PATH_STROKE_BOUNDING_BOX_NV
 0x90A2

	)

8976 
	#GL_SQUARE_NV
 0x90A3

	)

8977 
	#GL_ROUND_NV
 0x90A4

	)

8978 
	#GL_TRIANGULAR_NV
 0x90A5

	)

8979 
	#GL_BEVEL_NV
 0x90A6

	)

8980 
	#GL_MITER_REVERT_NV
 0x90A7

	)

8981 
	#GL_MITER_TRUNCATE_NV
 0x90A8

	)

8982 
	#GL_SKIP_MISSING_GLYPH_NV
 0x90A9

	)

8983 
	#GL_USE_MISSING_GLYPH_NV
 0x90AA

	)

8984 
	#GL_PATH_ERROR_POSITION_NV
 0x90AB

	)

8985 
	#GL_PATH_FOG_GEN_MODE_NV
 0x90AC

	)

8986 
	#GL_ACCUM_ADJACENT_PAIRS_NV
 0x90AD

	)

8987 
	#GL_ADJACENT_PAIRS_NV
 0x90AE

	)

8988 
	#GL_FIRST_TO_REST_NV
 0x90AF

	)

8989 
	#GL_PATH_GEN_MODE_NV
 0x90B0

	)

8990 
	#GL_PATH_GEN_COEFF_NV
 0x90B1

	)

8991 
	#GL_PATH_GEN_COLOR_FORMAT_NV
 0x90B2

	)

8992 
	#GL_PATH_GEN_COMPONENTS_NV
 0x90B3

	)

8993 
	#GL_PATH_STENCIL_FUNC_NV
 0x90B7

	)

8994 
	#GL_PATH_STENCIL_REF_NV
 0x90B8

	)

8995 
	#GL_PATH_STENCIL_VALUE_MASK_NV
 0x90B9

	)

8996 
	#GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV
 0x90BD

	)

8997 
	#GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV
 0x90BE

	)

8998 
	#GL_PATH_COVER_DEPTH_FUNC_NV
 0x90BF

	)

8999 
	#GL_PATH_DASH_OFFSET_RESET_NV
 0x90B4

	)

9000 
	#GL_MOVE_TO_RESETS_NV
 0x90B5

	)

9001 
	#GL_MOVE_TO_CONTINUES_NV
 0x90B6

	)

9002 
	#GL_CLOSE_PATH_NV
 0x00

	)

9003 
	#GL_MOVE_TO_NV
 0x02

	)

9004 
	#GL_RELATIVE_MOVE_TO_NV
 0x03

	)

9005 
	#GL_LINE_TO_NV
 0x04

	)

9006 
	#GL_RELATIVE_LINE_TO_NV
 0x05

	)

9007 
	#GL_HORIZONTAL_LINE_TO_NV
 0x06

	)

9008 
	#GL_RELATIVE_HORIZONTAL_LINE_TO_NV
 0x07

	)

9009 
	#GL_VERTICAL_LINE_TO_NV
 0x08

	)

9010 
	#GL_RELATIVE_VERTICAL_LINE_TO_NV
 0x09

	)

9011 
	#GL_QUADRATIC_CURVE_TO_NV
 0x0A

	)

9012 
	#GL_RELATIVE_QUADRATIC_CURVE_TO_NV
 0x0B

	)

9013 
	#GL_CUBIC_CURVE_TO_NV
 0x0C

	)

9014 
	#GL_RELATIVE_CUBIC_CURVE_TO_NV
 0x0D

	)

9015 
	#GL_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0E

	)

9016 
	#GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV
 0x0F

	)

9017 
	#GL_SMOOTH_CUBIC_CURVE_TO_NV
 0x10

	)

9018 
	#GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV
 0x11

	)

9019 
	#GL_SMALL_CCW_ARC_TO_NV
 0x12

	)

9020 
	#GL_RELATIVE_SMALL_CCW_ARC_TO_NV
 0x13

	)

9021 
	#GL_SMALL_CW_ARC_TO_NV
 0x14

	)

9022 
	#GL_RELATIVE_SMALL_CW_ARC_TO_NV
 0x15

	)

9023 
	#GL_LARGE_CCW_ARC_TO_NV
 0x16

	)

9024 
	#GL_RELATIVE_LARGE_CCW_ARC_TO_NV
 0x17

	)

9025 
	#GL_LARGE_CW_ARC_TO_NV
 0x18

	)

9026 
	#GL_RELATIVE_LARGE_CW_ARC_TO_NV
 0x19

	)

9027 
	#GL_RESTART_PATH_NV
 0xF0

	)

9028 
	#GL_DUP_FIRST_CUBIC_CURVE_TO_NV
 0xF2

	)

9029 
	#GL_DUP_LAST_CUBIC_CURVE_TO_NV
 0xF4

	)

9030 
	#GL_RECT_NV
 0xF6

	)

9031 
	#GL_CIRCULAR_CCW_ARC_TO_NV
 0xF8

	)

9032 
	#GL_CIRCULAR_CW_ARC_TO_NV
 0xFA

	)

9033 
	#GL_CIRCULAR_TANGENT_ARC_TO_NV
 0xFC

	)

9034 
	#GL_ARC_TO_NV
 0xFE

	)

9035 
	#GL_RELATIVE_ARC_TO_NV
 0xFF

	)

9036 
	#GL_BOLD_BIT_NV
 0x01

	)

9037 
	#GL_ITALIC_BIT_NV
 0x02

	)

9038 
	#GL_GLYPH_WIDTH_BIT_NV
 0x01

	)

9039 
	#GL_GLYPH_HEIGHT_BIT_NV
 0x02

	)

9040 
	#GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV
 0x04

	)

9041 
	#GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV
 0x08

	)

9042 
	#GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV
 0x10

	)

9043 
	#GL_GLYPH_VERTICAL_BEARING_X_BIT_NV
 0x20

	)

9044 
	#GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV
 0x40

	)

9045 
	#GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV
 0x80

	)

9046 
	#GL_GLYPH_HAS_KERNING_BIT_NV
 0x100

	)

9047 
	#GL_FONT_X_MIN_BOUNDS_BIT_NV
 0x00010000

	)

9048 
	#GL_FONT_Y_MIN_BOUNDS_BIT_NV
 0x00020000

	)

9049 
	#GL_FONT_X_MAX_BOUNDS_BIT_NV
 0x00040000

	)

9050 
	#GL_FONT_Y_MAX_BOUNDS_BIT_NV
 0x00080000

	)

9051 
	#GL_FONT_UNITS_PER_EM_BIT_NV
 0x00100000

	)

9052 
	#GL_FONT_ASCENDER_BIT_NV
 0x00200000

	)

9053 
	#GL_FONT_DESCENDER_BIT_NV
 0x00400000

	)

9054 
	#GL_FONT_HEIGHT_BIT_NV
 0x00800000

	)

9055 
	#GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV
 0x01000000

	)

9056 
	#GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV
 0x02000000

	)

9057 
	#GL_FONT_UNDERLINE_POSITION_BIT_NV
 0x04000000

	)

9058 
	#GL_FONT_UNDERLINE_THICKNESS_BIT_NV
 0x08000000

	)

9059 
	#GL_FONT_HAS_KERNING_BIT_NV
 0x10000000

	)

9060 
	#GL_PRIMARY_COLOR_NV
 0x852C

	)

9061 
	#GL_SECONDARY_COLOR_NV
 0x852D

	)

9062 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENPATHSNVPROC
Ë(
	tGLsizei
 
	tønge
);

9063 (
APIENTRYP
 
	tPFNGLDELETEPATHSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tønge
);

9064 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
);

9065 (
APIENTRYP
 
	tPFNGLPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9066 (
APIENTRYP
 
	tPFNGLPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9067 (
APIENTRYP
 
	tPFNGLPATHSUBCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tcomm™dSèπ
, GLsizeò
	tcomm™dsToDñëe
, GLsizeò
	tnumComm™ds
, c⁄° 
	tGLubyã
 *
	tcomm™ds
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9068 (
APIENTRYP
 
	tPFNGLPATHSUBCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tco‹dSèπ
, GLsizeò
	tnumCo‹ds
, 
	tGLíum
 
	tco‹dTy≥
, c⁄° *
	tco‹ds
);

9069 (
APIENTRYP
 
	tPFNGLPATHSTRINGNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tf‹m©
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	t∑thSåög
);

9070 (
APIENTRYP
 
	tPFNGLPATHGLYPHSNVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	tty≥
, c⁄° *
	tch¨codes
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9071 (
APIENTRYP
 
	tPFNGLPATHGLYPHRANGENVPROC
Ë(
	tGLuöt
 
	tfú°P©hName
, 
	tGLíum
 
	tf⁄tT¨gë
, c⁄° *
	tf⁄tName
, 
	tGLbôfõld
 
	tf⁄tStyÀ
, GLuöà
	tfú°Glyph
, 
	tGLsizei
 
	tnumGlyphs
, GLíum 
	th™dÀMissögGlyphs
, GLuöà
	t∑thP¨amëîTem∂©e
, 
	tGLÊﬂt
 
	temSˇÀ
);

9072 (
APIENTRYP
 
	tPFNGLWEIGHTPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, 
	tGLsizei
 
	tnumP©hs
, c⁄° GLuöà*
	t∑ths
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

9073 (
APIENTRYP
 
	tPFNGLCOPYPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
);

9074 (
APIENTRYP
 
	tPFNGLINTERPOLATEPATHSNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t∑thA
, GLuöà
	t∑thB
, 
	tGLÊﬂt
 
	tweight
);

9075 (
APIENTRYP
 
	tPFNGLTRANSFORMPATHNVPROC
Ë(
	tGLuöt
 
	tªsu…P©h
, GLuöà
	t§cP©h
, 
	tGLíum
 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9076 (
APIENTRYP
 
	tPFNGLPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	tvÆue
);

9077 (
APIENTRYP
 
	tPFNGLPATHPARAMETERINVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	tvÆue
);

9078 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	tvÆue
);

9079 (
APIENTRYP
 
	tPFNGLPATHPARAMETERFNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	tvÆue
);

9080 (
APIENTRYP
 
	tPFNGLPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	tdashCou¡
, c⁄° 
	tGLÊﬂt
 *
	tdashAºay
);

9081 (
APIENTRYP
 
	tPFNGLPATHSTENCILFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
, 
	tGLöt
 
	tªf
, 
	tGLuöt
 
	tmask
);

9082 (
APIENTRYP
 
	tPFNGLPATHSTENCILDEPTHOFFSETNVPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
, GLÊﬂà
	tunôs
);

9083 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tfûlMode
, GLuöà
	tmask
);

9084 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
);

9085 (
APIENTRYP
 
	tPFNGLSTENCILFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tfûlMode
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9086 (
APIENTRYP
 
	tPFNGLSTENCILSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLöt
 
	tª„ªn˚
, GLuöà
	tmask
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9087 (
APIENTRYP
 
	tPFNGLPATHCOVERDEPTHFUNCNVPROC
Ë(
	tGLíum
 
	tfunc
);

9088 (
APIENTRYP
 
	tPFNGLPATHCOLORGENNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	tgíMode
, GLíum 
	tcﬁ‹F‹m©
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

9089 (
APIENTRYP
 
	tPFNGLPATHTEXGENNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	tgíMode
, 
	tGLöt
 
	tcomp⁄íts
, c⁄° 
	tGLÊﬂt
 *
	tc€ffs
);

9090 (
APIENTRYP
 
	tPFNGLPATHFOGGENNVPROC
Ë(
	tGLíum
 
	tgíMode
);

9091 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

9092 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	tcovîMode
);

9093 (
APIENTRYP
 
	tPFNGLCOVERFILLPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9094 (
APIENTRYP
 
	tPFNGLCOVERSTROKEPATHINSTANCEDNVPROC
Ë(
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLíum 
	tcovîMode
, GLíum 
	tå™sf‹mTy≥
, c⁄° 
	tGLÊﬂt
 *
	tå™sf‹mVÆues
);

9095 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

9096 (
APIENTRYP
 
	tPFNGLGETPATHPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

9097 (
APIENTRYP
 
	tPFNGLGETPATHCOMMANDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLubyã
 *
	tcomm™ds
);

9098 (
APIENTRYP
 
	tPFNGLGETPATHCOORDSNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tco‹ds
);

9099 (
APIENTRYP
 
	tPFNGLGETPATHDASHARRAYNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 *
	tdashAºay
);

9100 (
APIENTRYP
 
	tPFNGLGETPATHMETRICSNVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLsizei
 
	tnumP©hs
, 
	tGLíum
 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

9101 (
APIENTRYP
 
	tPFNGLGETPATHMETRICRANGENVPROC
Ë(
	tGLbôfõld
 
	tmëricQuîyMask
, 
	tGLuöt
 
	tfú°P©hName
, 
	tGLsizei
 
	tnumP©hs
, GLsizeò
	t°ride
, 
	tGLÊﬂt
 *
	tmërics
);

9102 (
APIENTRYP
 
	tPFNGLGETPATHSPACINGNVPROC
Ë(
	tGLíum
 
	t∑thLi°Mode
, 
	tGLsizei
 
	tnumP©hs
, GLíum 
	t∑thNameTy≥
, c⁄° *
	t∑ths
, 
	tGLuöt
 
	t∑thBa£
, 
	tGLÊﬂt
 
	tadv™˚SˇÀ
, GLÊﬂà
	tkînögSˇÀ
, GLíum 
	tå™sf‹mTy≥
, GLÊﬂà*
	tªtu∫edS∑cög
);

9103 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENIVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

9104 (
APIENTRYP
 
	tPFNGLGETPATHCOLORGENFVNVPROC
Ë(
	tGLíum
 
	tcﬁ‹
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

9105 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENIVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	tvÆue
);

9106 (
APIENTRYP
 
	tPFNGLGETPATHTEXGENFVNVPROC
Ë(
	tGLíum
 
	tãxCo‹dSë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	tvÆue
);

9107 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINFILLPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, GLuöà
	tmask
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

9108 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPOINTINSTROKEPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

9109 
GLÊﬂt
 (
	tAPIENTRYP
 
	tPFNGLGETPATHLENGTHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
);

9110 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLPOINTALONGPATHNVPROC
Ë(
	tGLuöt
 
	t∑th
, 
	tGLsizei
 
	t°¨tSegmít
, GLsizeò
	tnumSegmíts
, 
	tGLÊﬂt
 
	tdi°™˚
, GLÊﬂà*
	tx
, GLÊﬂà*
	ty
, GLÊﬂà*
	tèngítX
, GLÊﬂà*
	tèngítY
);

9111 #ifde‡
GL_GLEXT_PROTOTYPES


9112 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíP©hsNV
 (
GLsizei
 
ønge
);

9113 
GLAPI
 
APIENTRY
 
glDñëeP©hsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
ønge
);

9114 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsP©hNV
 (
GLuöt
 
∑th
);

9115 
GLAPI
 
APIENTRY
 
glP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

9116 
GLAPI
 
APIENTRY
 
glP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

9117 
GLAPI
 
APIENTRY
 
glP©hSubComm™dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
comm™dSèπ
, GLsizeò
comm™dsToDñëe
, GLsizeò
numComm™ds
, c⁄° 
GLubyã
 *
comm™ds
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

9118 
GLAPI
 
APIENTRY
 
glP©hSubCo‹dsNV
 (
GLuöt
 
∑th
, 
GLsizei
 
co‹dSèπ
, GLsizeò
numCo‹ds
, 
GLíum
 
co‹dTy≥
, c⁄° *
co‹ds
);

9119 
GLAPI
 
APIENTRY
 
glP©hSåögNV
 (
GLuöt
 
∑th
, 
GLíum
 
f‹m©
, 
GLsizei
 
Àngth
, c⁄° *
∑thSåög
);

9120 
GLAPI
 
APIENTRY
 
glP©hGlyphsNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, 
GLsizei
 
numGlyphs
, GLíum 
ty≥
, c⁄° *
ch¨codes
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

9121 
GLAPI
 
APIENTRY
 
glP©hGlyphR™geNV
 (
GLuöt
 
fú°P©hName
, 
GLíum
 
f⁄tT¨gë
, c⁄° *
f⁄tName
, 
GLbôfõld
 
f⁄tStyÀ
, GLuöà
fú°Glyph
, 
GLsizei
 
numGlyphs
, GLíum 
h™dÀMissögGlyphs
, GLuöà
∑thP¨amëîTem∂©e
, 
GLÊﬂt
 
emSˇÀ
);

9122 
GLAPI
 
APIENTRY
 
glWeightP©hsNV
 (
GLuöt
 
ªsu…P©h
, 
GLsizei
 
numP©hs
, c⁄° GLuöà*
∑ths
, c⁄° 
GLÊﬂt
 *
weights
);

9123 
GLAPI
 
APIENTRY
 
glC›yP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
);

9124 
GLAPI
 
APIENTRY
 
glI¡îpﬁ©eP©hsNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
∑thA
, GLuöà
∑thB
, 
GLÊﬂt
 
weight
);

9125 
GLAPI
 
APIENTRY
 
glTønsf‹mP©hNV
 (
GLuöt
 
ªsu…P©h
, GLuöà
§cP©h
, 
GLíum
 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

9126 
GLAPI
 
APIENTRY
 
glP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
vÆue
);

9127 
GLAPI
 
APIENTRY
 
glP©hP¨amëîiNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 
vÆue
);

9128 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
vÆue
);

9129 
GLAPI
 
APIENTRY
 
glP©hP¨amëîfNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
vÆue
);

9130 
GLAPI
 
APIENTRY
 
glP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLsizei
 
dashCou¡
, c⁄° 
GLÊﬂt
 *
dashAºay
);

9131 
GLAPI
 
APIENTRY
 
glP©hSãncûFuncNV
 (
GLíum
 
func
, 
GLöt
 
ªf
, 
GLuöt
 
mask
);

9132 
GLAPI
 
APIENTRY
 
glP©hSãncûDïthOff£tNV
 (
GLÊﬂt
 
Á˘‹
, GLÊﬂà
unôs
);

9133 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
fûlMode
, GLuöà
mask
);

9134 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
);

9135 
GLAPI
 
APIENTRY
 
glSãncûFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
fûlMode
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

9136 
GLAPI
 
APIENTRY
 
glSãncûSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLöt
 
ª„ªn˚
, GLuöà
mask
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

9137 
GLAPI
 
APIENTRY
 
glP©hCovîDïthFuncNV
 (
GLíum
 
func
);

9138 
GLAPI
 
APIENTRY
 
glP©hCﬁ‹GíNV
 (
GLíum
 
cﬁ‹
, GLíum 
gíMode
, GLíum 
cﬁ‹F‹m©
, c⁄° 
GLÊﬂt
 *
c€ffs
);

9139 
GLAPI
 
APIENTRY
 
glP©hTexGíNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
gíMode
, 
GLöt
 
comp⁄íts
, c⁄° 
GLÊﬂt
 *
c€ffs
);

9140 
GLAPI
 
APIENTRY
 
glP©hFogGíNV
 (
GLíum
 
gíMode
);

9141 
GLAPI
 
APIENTRY
 
glCovîFûlP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

9142 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLíum
 
covîMode
);

9143 
GLAPI
 
APIENTRY
 
glCovîFûlP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

9144 
GLAPI
 
APIENTRY
 
glCovîSåokeP©hIn°™˚dNV
 (
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLíum 
covîMode
, GLíum 
å™sf‹mTy≥
, c⁄° 
GLÊﬂt
 *
å™sf‹mVÆues
);

9145 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîivNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLöt
 *
vÆue
);

9146 
GLAPI
 
APIENTRY
 
glGëP©hP¨amëîfvNV
 (
GLuöt
 
∑th
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
vÆue
);

9147 
GLAPI
 
APIENTRY
 
glGëP©hComm™dsNV
 (
GLuöt
 
∑th
, 
GLubyã
 *
comm™ds
);

9148 
GLAPI
 
APIENTRY
 
glGëP©hCo‹dsNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
co‹ds
);

9149 
GLAPI
 
APIENTRY
 
glGëP©hDashAºayNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 *
dashAºay
);

9150 
GLAPI
 
APIENTRY
 
glGëP©hMëricsNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLsizei
 
numP©hs
, 
GLíum
 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

9151 
GLAPI
 
APIENTRY
 
glGëP©hMëricR™geNV
 (
GLbôfõld
 
mëricQuîyMask
, 
GLuöt
 
fú°P©hName
, 
GLsizei
 
numP©hs
, GLsizeò
°ride
, 
GLÊﬂt
 *
mërics
);

9152 
GLAPI
 
APIENTRY
 
glGëP©hS∑cögNV
 (
GLíum
 
∑thLi°Mode
, 
GLsizei
 
numP©hs
, GLíum 
∑thNameTy≥
, c⁄° *
∑ths
, 
GLuöt
 
∑thBa£
, 
GLÊﬂt
 
adv™˚SˇÀ
, GLÊﬂà
kînögSˇÀ
, GLíum 
å™sf‹mTy≥
, GLÊﬂà*
ªtu∫edS∑cög
);

9153 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GíivNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

9154 
GLAPI
 
APIENTRY
 
glGëP©hCﬁ‹GífvNV
 (
GLíum
 
cﬁ‹
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

9155 
GLAPI
 
APIENTRY
 
glGëP©hTexGíivNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLöt
 *
vÆue
);

9156 
GLAPI
 
APIENTRY
 
glGëP©hTexGífvNV
 (
GLíum
 
ãxCo‹dSë
, GLíum 
≤ame
, 
GLÊﬂt
 *
vÆue
);

9157 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInFûlP©hNV
 (
GLuöt
 
∑th
, GLuöà
mask
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

9158 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsPoötInSåokeP©hNV
 (
GLuöt
 
∑th
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

9159 
GLAPI
 
GLÊﬂt
 
APIENTRY
 
glGëP©hLígthNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
);

9160 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glPoötAl⁄gP©hNV
 (
GLuöt
 
∑th
, 
GLsizei
 
°¨tSegmít
, GLsizeò
numSegmíts
, 
GLÊﬂt
 
di°™˚
, GLÊﬂà*
x
, GLÊﬂà*
y
, GLÊﬂà*
èngítX
, GLÊﬂà*
èngítY
);

9164 #i‚de‡
GL_NV_pixñ_d©a_ønge


9165 
	#GL_NV_pixñ_d©a_ønge
 1

	)

9166 
	#GL_WRITE_PIXEL_DATA_RANGE_NV
 0x8878

	)

9167 
	#GL_READ_PIXEL_DATA_RANGE_NV
 0x8879

	)

9168 
	#GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV
 0x887A

	)

9169 
	#GL_READ_PIXEL_DATA_RANGE_LENGTH_NV
 0x887B

	)

9170 
	#GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV
 0x887C

	)

9171 
	#GL_READ_PIXEL_DATA_RANGE_POINTER_NV
 0x887D

	)

9172 (
APIENTRYP
 
	tPFNGLPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

9173 (
APIENTRYP
 
	tPFNGLFLUSHPIXELDATARANGENVPROC
Ë(
	tGLíum
 
	tèrgë
);

9174 #ifde‡
GL_GLEXT_PROTOTYPES


9175 
GLAPI
 
APIENTRY
 
glPixñD©aR™geNV
 (
GLíum
 
èrgë
, 
GLsizei
 
Àngth
, c⁄° *
poöãr
);

9176 
GLAPI
 
APIENTRY
 
glFlushPixñD©aR™geNV
 (
GLíum
 
èrgë
);

9180 #i‚de‡
GL_NV_poöt_•rôe


9181 
	#GL_NV_poöt_•rôe
 1

	)

9182 
	#GL_POINT_SPRITE_NV
 0x8861

	)

9183 
	#GL_COORD_REPLACE_NV
 0x8862

	)

9184 
	#GL_POINT_SPRITE_R_MODE_NV
 0x8863

	)

9185 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9186 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9187 #ifde‡
GL_GLEXT_PROTOTYPES


9188 
GLAPI
 
APIENTRY
 
glPoötP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9189 
GLAPI
 
APIENTRY
 
glPoötP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9193 #i‚de‡
GL_NV_¥e£¡_video


9194 
	#GL_NV_¥e£¡_video
 1

	)

9195 
	#GL_FRAME_NV
 0x8E26

	)

9196 
	#GL_FIELDS_NV
 0x8E27

	)

9197 
	#GL_CURRENT_TIME_NV
 0x8E28

	)

9198 
	#GL_NUM_FILL_STREAMS_NV
 0x8E29

	)

9199 
	#GL_PRESENT_TIME_NV
 0x8E2A

	)

9200 
	#GL_PRESENT_DURATION_NV
 0x8E2B

	)

9201 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEKEYEDNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLuöà
	tkey0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLuöà
	tkey1
);

9202 (
APIENTRYP
 
	tPFNGLPRESENTFRAMEDUALFILLNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLuöt64EXT
 
	tmöPª£¡Time
, GLuöà
	tbegöPª£¡TimeId
, GLuöà
	t¥e£¡Duøti⁄Id
, 
	tGLíum
 
	tty≥
, GLíum 
	tèrgë0
, GLuöà
	tfûl0
, GLíum 
	tèrgë1
, GLuöà
	tfûl1
, GLíum 
	tèrgë2
, GLuöà
	tfûl2
, GLíum 
	tèrgë3
, GLuöà
	tfûl3
);

9203 (
APIENTRYP
 
	tPFNGLGETVIDEOIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9204 (
APIENTRYP
 
	tPFNGLGETVIDEOUIVNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

9205 (
APIENTRYP
 
	tPFNGLGETVIDEOI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

9206 (
APIENTRYP
 
	tPFNGLGETVIDEOUI64VNVPROC
Ë(
	tGLuöt
 
	tvideo_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

9207 #ifde‡
GL_GLEXT_PROTOTYPES


9208 
GLAPI
 
APIENTRY
 
glPª£¡FømeKeyedNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLuöà
key0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLuöà
key1
);

9209 
GLAPI
 
APIENTRY
 
glPª£¡FømeDuÆFûlNV
 (
GLuöt
 
video_¶Ÿ
, 
GLuöt64EXT
 
möPª£¡Time
, GLuöà
begöPª£¡TimeId
, GLuöà
¥e£¡Duøti⁄Id
, 
GLíum
 
ty≥
, GLíum 
èrgë0
, GLuöà
fûl0
, GLíum 
èrgë1
, GLuöà
fûl1
, GLíum 
èrgë2
, GLuöà
fûl2
, GLíum 
èrgë3
, GLuöà
fûl3
);

9210 
GLAPI
 
APIENTRY
 
glGëVideoivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9211 
GLAPI
 
APIENTRY
 
glGëVideouivNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

9212 
GLAPI
 
APIENTRY
 
glGëVideoi64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

9213 
GLAPI
 
APIENTRY
 
glGëVideoui64vNV
 (
GLuöt
 
video_¶Ÿ
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

9217 #i‚de‡
GL_NV_¥imôive_ª°¨t


9218 
	#GL_NV_¥imôive_ª°¨t
 1

	)

9219 
	#GL_PRIMITIVE_RESTART_NV
 0x8558

	)

9220 
	#GL_PRIMITIVE_RESTART_INDEX_NV
 0x8559

	)

9221 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTNVPROC
) ();

9222 (
APIENTRYP
 
	tPFNGLPRIMITIVERESTARTINDEXNVPROC
Ë(
	tGLuöt
 
	tödex
);

9223 #ifde‡
GL_GLEXT_PROTOTYPES


9224 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tNV
 ();

9225 
GLAPI
 
APIENTRY
 
glPrimôiveRe°¨tIndexNV
 (
GLuöt
 
ödex
);

9229 #i‚de‡
GL_NV_ªgi°î_comböîs


9230 
	#GL_NV_ªgi°î_comböîs
 1

	)

9231 
	#GL_REGISTER_COMBINERS_NV
 0x8522

	)

9232 
	#GL_VARIABLE_A_NV
 0x8523

	)

9233 
	#GL_VARIABLE_B_NV
 0x8524

	)

9234 
	#GL_VARIABLE_C_NV
 0x8525

	)

9235 
	#GL_VARIABLE_D_NV
 0x8526

	)

9236 
	#GL_VARIABLE_E_NV
 0x8527

	)

9237 
	#GL_VARIABLE_F_NV
 0x8528

	)

9238 
	#GL_VARIABLE_G_NV
 0x8529

	)

9239 
	#GL_CONSTANT_COLOR0_NV
 0x852A

	)

9240 
	#GL_CONSTANT_COLOR1_NV
 0x852B

	)

9241 
	#GL_SPARE0_NV
 0x852E

	)

9242 
	#GL_SPARE1_NV
 0x852F

	)

9243 
	#GL_DISCARD_NV
 0x8530

	)

9244 
	#GL_E_TIMES_F_NV
 0x8531

	)

9245 
	#GL_SPARE0_PLUS_SECONDARY_COLOR_NV
 0x8532

	)

9246 
	#GL_UNSIGNED_IDENTITY_NV
 0x8536

	)

9247 
	#GL_UNSIGNED_INVERT_NV
 0x8537

	)

9248 
	#GL_EXPAND_NORMAL_NV
 0x8538

	)

9249 
	#GL_EXPAND_NEGATE_NV
 0x8539

	)

9250 
	#GL_HALF_BIAS_NORMAL_NV
 0x853A

	)

9251 
	#GL_HALF_BIAS_NEGATE_NV
 0x853B

	)

9252 
	#GL_SIGNED_IDENTITY_NV
 0x853C

	)

9253 
	#GL_SIGNED_NEGATE_NV
 0x853D

	)

9254 
	#GL_SCALE_BY_TWO_NV
 0x853E

	)

9255 
	#GL_SCALE_BY_FOUR_NV
 0x853F

	)

9256 
	#GL_SCALE_BY_ONE_HALF_NV
 0x8540

	)

9257 
	#GL_BIAS_BY_NEGATIVE_ONE_HALF_NV
 0x8541

	)

9258 
	#GL_COMBINER_INPUT_NV
 0x8542

	)

9259 
	#GL_COMBINER_MAPPING_NV
 0x8543

	)

9260 
	#GL_COMBINER_COMPONENT_USAGE_NV
 0x8544

	)

9261 
	#GL_COMBINER_AB_DOT_PRODUCT_NV
 0x8545

	)

9262 
	#GL_COMBINER_CD_DOT_PRODUCT_NV
 0x8546

	)

9263 
	#GL_COMBINER_MUX_SUM_NV
 0x8547

	)

9264 
	#GL_COMBINER_SCALE_NV
 0x8548

	)

9265 
	#GL_COMBINER_BIAS_NV
 0x8549

	)

9266 
	#GL_COMBINER_AB_OUTPUT_NV
 0x854A

	)

9267 
	#GL_COMBINER_CD_OUTPUT_NV
 0x854B

	)

9268 
	#GL_COMBINER_SUM_OUTPUT_NV
 0x854C

	)

9269 
	#GL_MAX_GENERAL_COMBINERS_NV
 0x854D

	)

9270 
	#GL_NUM_GENERAL_COMBINERS_NV
 0x854E

	)

9271 
	#GL_COLOR_SUM_CLAMP_NV
 0x854F

	)

9272 
	#GL_COMBINER0_NV
 0x8550

	)

9273 
	#GL_COMBINER1_NV
 0x8551

	)

9274 
	#GL_COMBINER2_NV
 0x8552

	)

9275 
	#GL_COMBINER3_NV
 0x8553

	)

9276 
	#GL_COMBINER4_NV
 0x8554

	)

9277 
	#GL_COMBINER5_NV
 0x8555

	)

9278 
	#GL_COMBINER6_NV
 0x8556

	)

9279 
	#GL_COMBINER7_NV
 0x8557

	)

9280 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9281 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERFNVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

9282 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

9283 (
APIENTRYP
 
	tPFNGLCOMBINERPARAMETERINVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

9284 (
APIENTRYP
 
	tPFNGLCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

9285 (
APIENTRYP
 
	tPFNGLCOMBINEROUTPUTNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tabOuçut
, GLíum 
	tcdOuçut
, GLíum 
	tsumOuçut
, GLíum 
	tsˇÀ
, GLíum 
	tbüs
, 
	tGLboﬁón
 
	tabDŸProdu˘
, GLboﬁó¿
	tcdDŸProdu˘
, GLboﬁó¿
	tmuxSum
);

9286 (
APIENTRYP
 
	tPFNGLFINALCOMBINERINPUTNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	töput
, GLíum 
	tm≠pög
, GLíum 
	tcomp⁄ítUßge
);

9287 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9288 (
APIENTRYP
 
	tPFNGLGETCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9289 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9290 (
APIENTRYP
 
	tPFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	tp‹ti⁄
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9291 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9292 (
APIENTRYP
 
	tPFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC
Ë(
	tGLíum
 
	tv¨übÀ
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9293 #ifde‡
GL_GLEXT_PROTOTYPES


9294 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfvNV
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9295 
GLAPI
 
APIENTRY
 
glComböîP¨amëîfNV
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

9296 
GLAPI
 
APIENTRY
 
glComböîP¨amëîivNV
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

9297 
GLAPI
 
APIENTRY
 
glComböîP¨amëîiNV
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

9298 
GLAPI
 
APIENTRY
 
glComböîI≈utNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

9299 
GLAPI
 
APIENTRY
 
glComböîOuçutNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
abOuçut
, GLíum 
cdOuçut
, GLíum 
sumOuçut
, GLíum 
sˇÀ
, GLíum 
büs
, 
GLboﬁón
 
abDŸProdu˘
, GLboﬁó¿
cdDŸProdu˘
, GLboﬁó¿
muxSum
);

9300 
GLAPI
 
APIENTRY
 
glFöÆComböîI≈utNV
 (
GLíum
 
v¨übÀ
, GLíum 
öput
, GLíum 
m≠pög
, GLíum 
comp⁄ítUßge
);

9301 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9302 
GLAPI
 
APIENTRY
 
glGëComböîI≈utP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9303 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9304 
GLAPI
 
APIENTRY
 
glGëComböîOuçutP¨amëîivNV
 (
GLíum
 
°age
, GLíum 
p‹ti⁄
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9305 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîfvNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9306 
GLAPI
 
APIENTRY
 
glGëFöÆComböîI≈utP¨amëîivNV
 (
GLíum
 
v¨übÀ
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9310 #i‚de‡
GL_NV_ªgi°î_comböîs2


9311 
	#GL_NV_ªgi°î_comböîs2
 1

	)

9312 
	#GL_PER_STAGE_CONSTANTS_NV
 0x8535

	)

9313 (
APIENTRYP
 
	tPFNGLCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9314 (
APIENTRYP
 
	tPFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC
Ë(
	tGLíum
 
	t°age
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9315 #ifde‡
GL_GLEXT_PROTOTYPES


9316 
GLAPI
 
APIENTRY
 
glComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

9317 
GLAPI
 
APIENTRY
 
glGëComböîSègeP¨amëîfvNV
 (
GLíum
 
°age
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9321 #i‚de‡
GL_NV_shadî_©omic_cou¡îs


9322 
	#GL_NV_shadî_©omic_cou¡îs
 1

	)

9325 #i‚de‡
GL_NV_shadî_©omic_Êﬂt


9326 
	#GL_NV_shadî_©omic_Êﬂt
 1

	)

9329 #i‚de‡
GL_NV_shadî_buf„r_lﬂd


9330 
	#GL_NV_shadî_buf„r_lﬂd
 1

	)

9331 
	#GL_BUFFER_GPU_ADDRESS_NV
 0x8F1D

	)

9332 
	#GL_GPU_ADDRESS_NV
 0x8F34

	)

9333 
	#GL_MAX_SHADER_BUFFER_ADDRESS_NV
 0x8F35

	)

9334 (
APIENTRYP
 
	tPFNGLMAKEBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tac˚ss
);

9335 (
APIENTRYP
 
	tPFNGLMAKEBUFFERNONRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

9336 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISBUFFERRESIDENTNVPROC
Ë(
	tGLíum
 
	tèrgë
);

9337 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	tac˚ss
);

9338 (
APIENTRYP
 
	tPFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

9339 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISNAMEDBUFFERRESIDENTNVPROC
Ë(
	tGLuöt
 
	tbuf„r
);

9340 (
APIENTRYP
 
	tPFNGLGETBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

9341 (
APIENTRYP
 
	tPFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC
Ë(
	tGLuöt
 
	tbuf„r
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

9342 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt64EXT
 *
	tªsu…
);

9343 (
APIENTRYP
 
	tPFNGLUNIFORMUI64NVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

9344 (
APIENTRYP
 
	tPFNGLUNIFORMUI64VNVPROC
Ë(
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

9345 (
APIENTRYP
 
	tPFNGLGETUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 *
	t∑øms
);

9346 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64NVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLuöt64EXT
 
	tvÆue
);

9347 (
APIENTRYP
 
	tPFNGLPROGRAMUNIFORMUI64VNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLöt
 
	tloˇti⁄
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLuöt64EXT
 *
	tvÆue
);

9348 #ifde‡
GL_GLEXT_PROTOTYPES


9349 
GLAPI
 
APIENTRY
 
glMakeBuf„rResidítNV
 (
GLíum
 
èrgë
, GLíum 
ac˚ss
);

9350 
GLAPI
 
APIENTRY
 
glMakeBuf„rN⁄ResidítNV
 (
GLíum
 
èrgë
);

9351 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsBuf„rResidítNV
 (
GLíum
 
èrgë
);

9352 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
, 
GLíum
 
ac˚ss
);

9353 
GLAPI
 
APIENTRY
 
glMakeNamedBuf„rN⁄ResidítNV
 (
GLuöt
 
buf„r
);

9354 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsNamedBuf„rResidítNV
 (
GLuöt
 
buf„r
);

9355 
GLAPI
 
APIENTRY
 
glGëBuf„rP¨amëîui64vNV
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

9356 
GLAPI
 
APIENTRY
 
glGëNamedBuf„rP¨amëîui64vNV
 (
GLuöt
 
buf„r
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

9357 
GLAPI
 
APIENTRY
 
glGëI¡egîui64vNV
 (
GLíum
 
vÆue
, 
GLuöt64EXT
 *
ªsu…
);

9358 
GLAPI
 
APIENTRY
 
glUnif‹mui64NV
 (
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

9359 
GLAPI
 
APIENTRY
 
glUnif‹mui64vNV
 (
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

9360 
GLAPI
 
APIENTRY
 
glGëUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 *
∑øms
);

9361 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64NV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLuöt64EXT
 
vÆue
);

9362 
GLAPI
 
APIENTRY
 
glProgømUnif‹mui64vNV
 (
GLuöt
 
¥ogøm
, 
GLöt
 
loˇti⁄
, 
GLsizei
 
cou¡
, c⁄° 
GLuöt64EXT
 *
vÆue
);

9366 #i‚de‡
GL_NV_shadî_buf„r_°‹e


9367 
	#GL_NV_shadî_buf„r_°‹e
 1

	)

9368 
	#GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV
 0x00000010

	)

9371 #i‚de‡
GL_NV_shadî_°‹age_buf„r_obje˘


9372 
	#GL_NV_shadî_°‹age_buf„r_obje˘
 1

	)

9375 #i‚de‡
GL_NV_ãs£Œ©i⁄_¥ogøm5


9376 
	#GL_NV_ãs£Œ©i⁄_¥ogøm5
 1

	)

9377 
	#GL_MAX_PROGRAM_PATCH_ATTRIBS_NV
 0x86D8

	)

9378 
	#GL_TESS_CONTROL_PROGRAM_NV
 0x891E

	)

9379 
	#GL_TESS_EVALUATION_PROGRAM_NV
 0x891F

	)

9380 
	#GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV
 0x8C74

	)

9381 
	#GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV
 0x8C75

	)

9384 #i‚de‡
GL_NV_ãxgí_emboss


9385 
	#GL_NV_ãxgí_emboss
 1

	)

9386 
	#GL_EMBOSS_LIGHT_NV
 0x855D

	)

9387 
	#GL_EMBOSS_CONSTANT_NV
 0x855E

	)

9388 
	#GL_EMBOSS_MAP_NV
 0x855F

	)

9391 #i‚de‡
GL_NV_ãxgí_ªÊe˘i⁄


9392 
	#GL_NV_ãxgí_ªÊe˘i⁄
 1

	)

9393 
	#GL_NORMAL_MAP_NV
 0x8511

	)

9394 
	#GL_REFLECTION_MAP_NV
 0x8512

	)

9397 #i‚de‡
GL_NV_ãxtuª_b¨rõr


9398 
	#GL_NV_ãxtuª_b¨rõr
 1

	)

9399 (
APIENTRYP
 
	tPFNGLTEXTUREBARRIERNVPROC
) ();

9400 #ifde‡
GL_GLEXT_PROTOTYPES


9401 
GLAPI
 
APIENTRY
 
glTextuªB¨rõrNV
 ();

9405 #i‚de‡
GL_NV_ãxtuª_com¥essi⁄_vtc


9406 
	#GL_NV_ãxtuª_com¥essi⁄_vtc
 1

	)

9409 #i‚de‡
GL_NV_ãxtuª_ív_comböe4


9410 
	#GL_NV_ãxtuª_ív_comböe4
 1

	)

9411 
	#GL_COMBINE4_NV
 0x8503

	)

9412 
	#GL_SOURCE3_RGB_NV
 0x8583

	)

9413 
	#GL_SOURCE3_ALPHA_NV
 0x858B

	)

9414 
	#GL_OPERAND3_RGB_NV
 0x8593

	)

9415 
	#GL_OPERAND3_ALPHA_NV
 0x859B

	)

9418 #i‚de‡
GL_NV_ãxtuª_ex∑nd_n‹mÆ


9419 
	#GL_NV_ãxtuª_ex∑nd_n‹mÆ
 1

	)

9420 
	#GL_TEXTURE_UNSIGNED_REMAP_MODE_NV
 0x888F

	)

9423 #i‚de‡
GL_NV_ãxtuª_mu…ißm∂e


9424 
	#GL_NV_ãxtuª_mu…ißm∂e
 1

	)

9425 
	#GL_TEXTURE_COVERAGE_SAMPLES_NV
 0x9045

	)

9426 
	#GL_TEXTURE_COLOR_SAMPLES_NV
 0x9046

	)

9427 (
APIENTRYP
 
	tPFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

9428 (
APIENTRYP
 
	tPFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

9429 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

9430 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tßm∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

9431 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

9432 (
APIENTRYP
 
	tPFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC
Ë(
	tGLuöt
 
	tãxtuª
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tcovîageSam∂es
, GLsizeò
	tcﬁ‹Sam∂es
, 
	tGLöt
 
	töã∫ÆF‹m©
, GLsizeò
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, 
	tGLboﬁón
 
	tfixedSam∂eLoˇti⁄s
);

9433 #ifde‡
GL_GLEXT_PROTOTYPES


9434 
GLAPI
 
APIENTRY
 
glTexImage2DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

9435 
GLAPI
 
APIENTRY
 
glTexImage3DMu…ißm∂eCovîageNV
 (
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

9436 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

9437 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
ßm∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

9438 
GLAPI
 
APIENTRY
 
glTextuªImage2DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

9439 
GLAPI
 
APIENTRY
 
glTextuªImage3DMu…ißm∂eCovîageNV
 (
GLuöt
 
ãxtuª
, 
GLíum
 
èrgë
, 
GLsizei
 
covîageSam∂es
, GLsizeò
cﬁ‹Sam∂es
, 
GLöt
 
öã∫ÆF‹m©
, GLsizeò
width
, GLsizeò
height
, GLsizeò
dïth
, 
GLboﬁón
 
fixedSam∂eLoˇti⁄s
);

9443 #i‚de‡
GL_NV_ãxtuª_ª˘™gÀ


9444 
	#GL_NV_ãxtuª_ª˘™gÀ
 1

	)

9445 
	#GL_TEXTURE_RECTANGLE_NV
 0x84F5

	)

9446 
	#GL_TEXTURE_BINDING_RECTANGLE_NV
 0x84F6

	)

9447 
	#GL_PROXY_TEXTURE_RECTANGLE_NV
 0x84F7

	)

9448 
	#GL_MAX_RECTANGLE_TEXTURE_SIZE_NV
 0x84F8

	)

9451 #i‚de‡
GL_NV_ãxtuª_shadî


9452 
	#GL_NV_ãxtuª_shadî
 1

	)

9453 
	#GL_OFFSET_TEXTURE_RECTANGLE_NV
 0x864C

	)

9454 
	#GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV
 0x864D

	)

9455 
	#GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV
 0x864E

	)

9456 
	#GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV
 0x86D9

	)

9457 
	#GL_UNSIGNED_INT_S8_S8_8_8_NV
 0x86DA

	)

9458 
	#GL_UNSIGNED_INT_8_8_S8_S8_REV_NV
 0x86DB

	)

9459 
	#GL_DSDT_MAG_INTENSITY_NV
 0x86DC

	)

9460 
	#GL_SHADER_CONSISTENT_NV
 0x86DD

	)

9461 
	#GL_TEXTURE_SHADER_NV
 0x86DE

	)

9462 
	#GL_SHADER_OPERATION_NV
 0x86DF

	)

9463 
	#GL_CULL_MODES_NV
 0x86E0

	)

9464 
	#GL_OFFSET_TEXTURE_MATRIX_NV
 0x86E1

	)

9465 
	#GL_OFFSET_TEXTURE_SCALE_NV
 0x86E2

	)

9466 
	#GL_OFFSET_TEXTURE_BIAS_NV
 0x86E3

	)

9467 
	#GL_OFFSET_TEXTURE_2D_MATRIX_NV
 0x86E1

	)

9468 
	#GL_OFFSET_TEXTURE_2D_SCALE_NV
 0x86E2

	)

9469 
	#GL_OFFSET_TEXTURE_2D_BIAS_NV
 0x86E3

	)

9470 
	#GL_PREVIOUS_TEXTURE_INPUT_NV
 0x86E4

	)

9471 
	#GL_CONST_EYE_NV
 0x86E5

	)

9472 
	#GL_PASS_THROUGH_NV
 0x86E6

	)

9473 
	#GL_CULL_FRAGMENT_NV
 0x86E7

	)

9474 
	#GL_OFFSET_TEXTURE_2D_NV
 0x86E8

	)

9475 
	#GL_DEPENDENT_AR_TEXTURE_2D_NV
 0x86E9

	)

9476 
	#GL_DEPENDENT_GB_TEXTURE_2D_NV
 0x86EA

	)

9477 
	#GL_DOT_PRODUCT_NV
 0x86EC

	)

9478 
	#GL_DOT_PRODUCT_DEPTH_REPLACE_NV
 0x86ED

	)

9479 
	#GL_DOT_PRODUCT_TEXTURE_2D_NV
 0x86EE

	)

9480 
	#GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV
 0x86F0

	)

9481 
	#GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV
 0x86F1

	)

9482 
	#GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV
 0x86F2

	)

9483 
	#GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV
 0x86F3

	)

9484 
	#GL_HILO_NV
 0x86F4

	)

9485 
	#GL_DSDT_NV
 0x86F5

	)

9486 
	#GL_DSDT_MAG_NV
 0x86F6

	)

9487 
	#GL_DSDT_MAG_VIB_NV
 0x86F7

	)

9488 
	#GL_HILO16_NV
 0x86F8

	)

9489 
	#GL_SIGNED_HILO_NV
 0x86F9

	)

9490 
	#GL_SIGNED_HILO16_NV
 0x86FA

	)

9491 
	#GL_SIGNED_RGBA_NV
 0x86FB

	)

9492 
	#GL_SIGNED_RGBA8_NV
 0x86FC

	)

9493 
	#GL_SIGNED_RGB_NV
 0x86FE

	)

9494 
	#GL_SIGNED_RGB8_NV
 0x86FF

	)

9495 
	#GL_SIGNED_LUMINANCE_NV
 0x8701

	)

9496 
	#GL_SIGNED_LUMINANCE8_NV
 0x8702

	)

9497 
	#GL_SIGNED_LUMINANCE_ALPHA_NV
 0x8703

	)

9498 
	#GL_SIGNED_LUMINANCE8_ALPHA8_NV
 0x8704

	)

9499 
	#GL_SIGNED_ALPHA_NV
 0x8705

	)

9500 
	#GL_SIGNED_ALPHA8_NV
 0x8706

	)

9501 
	#GL_SIGNED_INTENSITY_NV
 0x8707

	)

9502 
	#GL_SIGNED_INTENSITY8_NV
 0x8708

	)

9503 
	#GL_DSDT8_NV
 0x8709

	)

9504 
	#GL_DSDT8_MAG8_NV
 0x870A

	)

9505 
	#GL_DSDT8_MAG8_INTENSITY8_NV
 0x870B

	)

9506 
	#GL_SIGNED_RGB_UNSIGNED_ALPHA_NV
 0x870C

	)

9507 
	#GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV
 0x870D

	)

9508 
	#GL_HI_SCALE_NV
 0x870E

	)

9509 
	#GL_LO_SCALE_NV
 0x870F

	)

9510 
	#GL_DS_SCALE_NV
 0x8710

	)

9511 
	#GL_DT_SCALE_NV
 0x8711

	)

9512 
	#GL_MAGNITUDE_SCALE_NV
 0x8712

	)

9513 
	#GL_VIBRANCE_SCALE_NV
 0x8713

	)

9514 
	#GL_HI_BIAS_NV
 0x8714

	)

9515 
	#GL_LO_BIAS_NV
 0x8715

	)

9516 
	#GL_DS_BIAS_NV
 0x8716

	)

9517 
	#GL_DT_BIAS_NV
 0x8717

	)

9518 
	#GL_MAGNITUDE_BIAS_NV
 0x8718

	)

9519 
	#GL_VIBRANCE_BIAS_NV
 0x8719

	)

9520 
	#GL_TEXTURE_BORDER_VALUES_NV
 0x871A

	)

9521 
	#GL_TEXTURE_HI_SIZE_NV
 0x871B

	)

9522 
	#GL_TEXTURE_LO_SIZE_NV
 0x871C

	)

9523 
	#GL_TEXTURE_DS_SIZE_NV
 0x871D

	)

9524 
	#GL_TEXTURE_DT_SIZE_NV
 0x871E

	)

9525 
	#GL_TEXTURE_MAG_SIZE_NV
 0x871F

	)

9528 #i‚de‡
GL_NV_ãxtuª_shadî2


9529 
	#GL_NV_ãxtuª_shadî2
 1

	)

9530 
	#GL_DOT_PRODUCT_TEXTURE_3D_NV
 0x86EF

	)

9533 #i‚de‡
GL_NV_ãxtuª_shadî3


9534 
	#GL_NV_ãxtuª_shadî3
 1

	)

9535 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV
 0x8850

	)

9536 
	#GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV
 0x8851

	)

9537 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8852

	)

9538 
	#GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV
 0x8853

	)

9539 
	#GL_OFFSET_HILO_TEXTURE_2D_NV
 0x8854

	)

9540 
	#GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV
 0x8855

	)

9541 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV
 0x8856

	)

9542 
	#GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV
 0x8857

	)

9543 
	#GL_DEPENDENT_HILO_TEXTURE_2D_NV
 0x8858

	)

9544 
	#GL_DEPENDENT_RGB_TEXTURE_3D_NV
 0x8859

	)

9545 
	#GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV
 0x885A

	)

9546 
	#GL_DOT_PRODUCT_PASS_THROUGH_NV
 0x885B

	)

9547 
	#GL_DOT_PRODUCT_TEXTURE_1D_NV
 0x885C

	)

9548 
	#GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV
 0x885D

	)

9549 
	#GL_HILO8_NV
 0x885E

	)

9550 
	#GL_SIGNED_HILO8_NV
 0x885F

	)

9551 
	#GL_FORCE_BLUE_TO_ONE_NV
 0x8860

	)

9554 #i‚de‡
GL_NV_å™sf‹m_„edback


9555 
	#GL_NV_å™sf‹m_„edback
 1

	)

9556 
	#GL_BACK_PRIMARY_COLOR_NV
 0x8C77

	)

9557 
	#GL_BACK_SECONDARY_COLOR_NV
 0x8C78

	)

9558 
	#GL_TEXTURE_COORD_NV
 0x8C79

	)

9559 
	#GL_CLIP_DISTANCE_NV
 0x8C7A

	)

9560 
	#GL_VERTEX_ID_NV
 0x8C7B

	)

9561 
	#GL_PRIMITIVE_ID_NV
 0x8C7C

	)

9562 
	#GL_GENERIC_ATTRIB_NV
 0x8C7D

	)

9563 
	#GL_TRANSFORM_FEEDBACK_ATTRIBS_NV
 0x8C7E

	)

9564 
	#GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV
 0x8C7F

	)

9565 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV
 0x8C80

	)

9566 
	#GL_ACTIVE_VARYINGS_NV
 0x8C81

	)

9567 
	#GL_ACTIVE_VARYING_MAX_LENGTH_NV
 0x8C82

	)

9568 
	#GL_TRANSFORM_FEEDBACK_VARYINGS_NV
 0x8C83

	)

9569 
	#GL_TRANSFORM_FEEDBACK_BUFFER_START_NV
 0x8C84

	)

9570 
	#GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV
 0x8C85

	)

9571 
	#GL_TRANSFORM_FEEDBACK_RECORD_NV
 0x8C86

	)

9572 
	#GL_PRIMITIVES_GENERATED_NV
 0x8C87

	)

9573 
	#GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV
 0x8C88

	)

9574 
	#GL_RASTERIZER_DISCARD_NV
 0x8C89

	)

9575 
	#GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV
 0x8C8A

	)

9576 
	#GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV
 0x8C8B

	)

9577 
	#GL_INTERLEAVED_ATTRIBS_NV
 0x8C8C

	)

9578 
	#GL_SEPARATE_ATTRIBS_NV
 0x8C8D

	)

9579 
	#GL_TRANSFORM_FEEDBACK_BUFFER_NV
 0x8C8E

	)

9580 
	#GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV
 0x8C8F

	)

9581 
	#GL_LAYER_NV
 0x8DAA

	)

9582 
	#GL_NEXT_BUFFER_NV
 -2

	)

9583 
	#GL_SKIP_COMPONENTS4_NV
 -3

	)

9584 
	#GL_SKIP_COMPONENTS3_NV
 -4

	)

9585 
	#GL_SKIP_COMPONENTS2_NV
 -5

	)

9586 
	#GL_SKIP_COMPONENTS1_NV
 -6

	)

9587 (
APIENTRYP
 
	tPFNGLBEGINTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	t¥imôiveMode
);

9588 (
APIENTRYP
 
	tPFNGLENDTRANSFORMFEEDBACKNVPROC
) ();

9589 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKATTRIBSNVPROC
Ë(
	tGLuöt
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, 
	tGLíum
 
	tbuf„rMode
);

9590 (
APIENTRYP
 
	tPFNGLBINDBUFFERRANGENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
, 
	tGLsizeùå
 
	tsize
);

9591 (
APIENTRYP
 
	tPFNGLBINDBUFFEROFFSETNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
, 
	tGLöçå
 
	toff£t
);

9592 (
APIENTRYP
 
	tPFNGLBINDBUFFERBASENVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLuöà
	tbuf„r
);

9593 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKVARYINGSNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	tloˇti⁄s
, 
	tGLíum
 
	tbuf„rMode
);

9594 (
APIENTRYP
 
	tPFNGLACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

9595 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETVARYINGLOCATIONNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, c⁄° 
	tGLch¨
 *
	t«me
);

9596 (
APIENTRYP
 
	tPFNGLGETACTIVEVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, GLsizeò*
	tsize
, 
	tGLíum
 *
	tty≥
, 
	tGLch¨
 *
	t«me
);

9597 (
APIENTRYP
 
	tPFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC
Ë(
	tGLuöt
 
	t¥ogøm
, GLuöà
	tödex
, 
	tGLöt
 *
	tloˇti⁄
);

9598 (
APIENTRYP
 
	tPFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC
Ë(
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLöt
 *
	t©åibs
, GLsizeò
	tnbuf„rs
, c⁄° GLöà*
	tbuf°ªams
, 
	tGLíum
 
	tbuf„rMode
);

9599 #ifde‡
GL_GLEXT_PROTOTYPES


9600 
GLAPI
 
APIENTRY
 
glBegöTønsf‹mFìdbackNV
 (
GLíum
 
¥imôiveMode
);

9601 
GLAPI
 
APIENTRY
 
glEndTønsf‹mFìdbackNV
 ();

9602 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackAâribsNV
 (
GLuöt
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, 
GLíum
 
buf„rMode
);

9603 
GLAPI
 
APIENTRY
 
glBödBuf„rR™geNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
, 
GLsizeùå
 
size
);

9604 
GLAPI
 
APIENTRY
 
glBödBuf„rOff£tNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
, 
GLöçå
 
off£t
);

9605 
GLAPI
 
APIENTRY
 
glBödBuf„rBa£NV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLuöà
buf„r
);

9606 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackV¨yögsNV
 (
GLuöt
 
¥ogøm
, 
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
loˇti⁄s
, 
GLíum
 
buf„rMode
);

9607 
GLAPI
 
APIENTRY
 
glA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

9608 
GLAPI
 
GLöt
 
APIENTRY
 
glGëV¨yögLoˇti⁄NV
 (
GLuöt
 
¥ogøm
, c⁄° 
GLch¨
 *
«me
);

9609 
GLAPI
 
APIENTRY
 
glGëA˘iveV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, GLsizeò*
size
, 
GLíum
 *
ty≥
, 
GLch¨
 *
«me
);

9610 
GLAPI
 
APIENTRY
 
glGëTønsf‹mFìdbackV¨yögNV
 (
GLuöt
 
¥ogøm
, GLuöà
ödex
, 
GLöt
 *
loˇti⁄
);

9611 
GLAPI
 
APIENTRY
 
glTønsf‹mFìdbackSåómAâribsNV
 (
GLsizei
 
cou¡
, c⁄° 
GLöt
 *
©åibs
, GLsizeò
nbuf„rs
, c⁄° GLöà*
buf°ªams
, 
GLíum
 
buf„rMode
);

9615 #i‚de‡
GL_NV_å™sf‹m_„edback2


9616 
	#GL_NV_å™sf‹m_„edback2
 1

	)

9617 
	#GL_TRANSFORM_FEEDBACK_NV
 0x8E22

	)

9618 
	#GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV
 0x8E23

	)

9619 
	#GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV
 0x8E24

	)

9620 
	#GL_TRANSFORM_FEEDBACK_BINDING_NV
 0x8E25

	)

9621 (
APIENTRYP
 
	tPFNGLBINDTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

9622 (
APIENTRYP
 
	tPFNGLDELETETRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	tids
);

9623 (
APIENTRYP
 
	tPFNGLGENTRANSFORMFEEDBACKSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	tids
);

9624 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISTRANSFORMFEEDBACKNVPROC
Ë(
	tGLuöt
 
	tid
);

9625 (
APIENTRYP
 
	tPFNGLPAUSETRANSFORMFEEDBACKNVPROC
) ();

9626 (
APIENTRYP
 
	tPFNGLRESUMETRANSFORMFEEDBACKNVPROC
) ();

9627 (
APIENTRYP
 
	tPFNGLDRAWTRANSFORMFEEDBACKNVPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLuöt
 
	tid
);

9628 #ifde‡
GL_GLEXT_PROTOTYPES


9629 
GLAPI
 
APIENTRY
 
glBödTønsf‹mFìdbackNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

9630 
GLAPI
 
APIENTRY
 
glDñëeTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
ids
);

9631 
GLAPI
 
APIENTRY
 
glGíTønsf‹mFìdbacksNV
 (
GLsizei
 
n
, 
GLuöt
 *
ids
);

9632 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsTønsf‹mFìdbackNV
 (
GLuöt
 
id
);

9633 
GLAPI
 
APIENTRY
 
glPau£Tønsf‹mFìdbackNV
 ();

9634 
GLAPI
 
APIENTRY
 
glResumeTønsf‹mFìdbackNV
 ();

9635 
GLAPI
 
APIENTRY
 
glDøwTønsf‹mFìdbackNV
 (
GLíum
 
mode
, 
GLuöt
 
id
);

9639 #i‚de‡
GL_NV_vd∑u_öãr›


9640 
	#GL_NV_vd∑u_öãr›
 1

	)

9641 
GLöçå
 
	tGLvd∑uSurÁ˚NV
;

9642 
	#GL_SURFACE_STATE_NV
 0x86EB

	)

9643 
	#GL_SURFACE_REGISTERED_NV
 0x86FD

	)

9644 
	#GL_SURFACE_MAPPED_NV
 0x8700

	)

9645 
	#GL_WRITE_DISCARD_NV
 0x88BE

	)

9646 (
APIENTRYP
 
	tPFNGLVDPAUINITNVPROC
Ë(c⁄° *
	tvdpDevi˚
, c⁄° *
	tgëProcAddªss
);

9647 (
APIENTRYP
 
	tPFNGLVDPAUFININVPROC
) ();

9648 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTERVIDEOSURFACENVPROC
Ë(c⁄° *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

9649 
GLvd∑uSurÁ˚NV
 (
	tAPIENTRYP
 
	tPFNGLVDPAUREGISTEROUTPUTSURFACENVPROC
Ë(c⁄° *
	tvdpSurÁ˚
, 
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tnumTextuªNames
, c⁄° 
	tGLuöt
 *
	tãxtuªNames
);

9650 (
APIENTRYP
 
	tPFNGLVDPAUISSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

9651 (
APIENTRYP
 
	tPFNGLVDPAUUNREGISTERSURFACENVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
);

9652 (
APIENTRYP
 
	tPFNGLVDPAUGETSURFACEIVNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	t≤ame
, 
	tGLsizei
 
	tbufSize
, GLsizeò*
	tÀngth
, 
	tGLöt
 *
	tvÆues
);

9653 (
APIENTRYP
 
	tPFNGLVDPAUSURFACEACCESSNVPROC
Ë(
	tGLvd∑uSurÁ˚NV
 
	tsurÁ˚
, 
	tGLíum
 
	tac˚ss
);

9654 (
APIENTRYP
 
	tPFNGLVDPAUMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚s
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

9655 (
APIENTRYP
 
	tPFNGLVDPAUUNMAPSURFACESNVPROC
Ë(
	tGLsizei
 
	tnumSurÁ˚
, c⁄° 
	tGLvd∑uSurÁ˚NV
 *
	tsurÁ˚s
);

9656 #ifde‡
GL_GLEXT_PROTOTYPES


9657 
GLAPI
 
APIENTRY
 
glVDPAUInôNV
 (c⁄° *
vdpDevi˚
, c⁄° *
gëProcAddªss
);

9658 
GLAPI
 
APIENTRY
 
glVDPAUFöiNV
 ();

9659 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îVideoSurÁ˚NV
 (c⁄° *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

9660 
GLAPI
 
GLvd∑uSurÁ˚NV
 
APIENTRY
 
glVDPAURegi°îOuçutSurÁ˚NV
 (c⁄° *
vdpSurÁ˚
, 
GLíum
 
èrgë
, 
GLsizei
 
numTextuªNames
, c⁄° 
GLuöt
 *
ãxtuªNames
);

9661 
GLAPI
 
APIENTRY
 
glVDPAUIsSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

9662 
GLAPI
 
APIENTRY
 
glVDPAUUƒegi°îSurÁ˚NV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
);

9663 
GLAPI
 
APIENTRY
 
glVDPAUGëSurÁ˚ivNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
≤ame
, 
GLsizei
 
bufSize
, GLsizeò*
Àngth
, 
GLöt
 *
vÆues
);

9664 
GLAPI
 
APIENTRY
 
glVDPAUSurÁ˚Ac˚ssNV
 (
GLvd∑uSurÁ˚NV
 
surÁ˚
, 
GLíum
 
ac˚ss
);

9665 
GLAPI
 
APIENTRY
 
glVDPAUM≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚s
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

9666 
GLAPI
 
APIENTRY
 
glVDPAUUnm≠SurÁ˚sNV
 (
GLsizei
 
numSurÁ˚
, c⁄° 
GLvd∑uSurÁ˚NV
 *
surÁ˚s
);

9670 #i‚de‡
GL_NV_vîãx_¨øy_ønge


9671 
	#GL_NV_vîãx_¨øy_ønge
 1

	)

9672 
	#GL_VERTEX_ARRAY_RANGE_NV
 0x851D

	)

9673 
	#GL_VERTEX_ARRAY_RANGE_LENGTH_NV
 0x851E

	)

9674 
	#GL_VERTEX_ARRAY_RANGE_VALID_NV
 0x851F

	)

9675 
	#GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV
 0x8520

	)

9676 
	#GL_VERTEX_ARRAY_RANGE_POINTER_NV
 0x8521

	)

9677 (
APIENTRYP
 
	tPFNGLFLUSHVERTEXARRAYRANGENVPROC
) ();

9678 (
APIENTRYP
 
	tPFNGLVERTEXARRAYRANGENVPROC
Ë(
	tGLsizei
 
	tÀngth
, c⁄° *
	tpoöãr
);

9679 #ifde‡
GL_GLEXT_PROTOTYPES


9680 
GLAPI
 
APIENTRY
 
glFlushVîãxAºayR™geNV
 ();

9681 
GLAPI
 
APIENTRY
 
glVîãxAºayR™geNV
 (
GLsizei
 
Àngth
, c⁄° *
poöãr
);

9685 #i‚de‡
GL_NV_vîãx_¨øy_ønge2


9686 
	#GL_NV_vîãx_¨øy_ønge2
 1

	)

9687 
	#GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV
 0x8533

	)

9690 #i‚de‡
GL_NV_vîãx_©åib_öãgî_64bô


9691 
	#GL_NV_vîãx_©åib_öãgî_64bô
 1

	)

9692 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
);

9693 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
);

9694 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
);

9695 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt64EXT
 
	tx
, GLöt64EXT 
	ty
, GLöt64EXT 
	tz
, GLöt64EXT 
	tw
);

9696 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

9697 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

9698 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

9699 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4I64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt64EXT
 *
	tv
);

9700 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
);

9701 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
);

9702 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
);

9703 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64NVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	tx
, GLuöt64EXT 
	ty
, GLuöt64EXT 
	tz
, GLuöt64EXT 
	tw
);

9704 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL1UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

9705 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL2UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

9706 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL3UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

9707 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBL4UI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLuöt64EXT
 *
	tv
);

9708 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt64EXT
 *
	t∑øms
);

9709 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBLUI64VNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLuöt64EXT
 *
	t∑øms
);

9710 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBLFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9711 #ifde‡
GL_GLEXT_PROTOTYPES


9712 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
);

9713 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
);

9714 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
);

9715 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64NV
 (
GLuöt
 
ödex
, 
GLöt64EXT
 
x
, GLöt64EXT 
y
, GLöt64EXT 
z
, GLöt64EXT 
w
);

9716 
GLAPI
 
APIENTRY
 
glVîãxAâribL1i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

9717 
GLAPI
 
APIENTRY
 
glVîãxAâribL2i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

9718 
GLAPI
 
APIENTRY
 
glVîãxAâribL3i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

9719 
GLAPI
 
APIENTRY
 
glVîãxAâribL4i64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLöt64EXT
 *
v
);

9720 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
);

9721 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
);

9722 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
);

9723 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64NV
 (
GLuöt
 
ödex
, 
GLuöt64EXT
 
x
, GLuöt64EXT 
y
, GLuöt64EXT 
z
, GLuöt64EXT 
w
);

9724 
GLAPI
 
APIENTRY
 
glVîãxAâribL1ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

9725 
GLAPI
 
APIENTRY
 
glVîãxAâribL2ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

9726 
GLAPI
 
APIENTRY
 
glVîãxAâribL3ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

9727 
GLAPI
 
APIENTRY
 
glVîãxAâribL4ui64vNV
 (
GLuöt
 
ödex
, c⁄° 
GLuöt64EXT
 *
v
);

9728 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLi64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt64EXT
 *
∑øms
);

9729 
GLAPI
 
APIENTRY
 
glGëVîãxAâribLui64vNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLuöt64EXT
 *
∑øms
);

9730 
GLAPI
 
APIENTRY
 
glVîãxAâribLF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9734 #i‚de‡
GL_NV_vîãx_buf„r_unifõd_mem‹y


9735 
	#GL_NV_vîãx_buf„r_unifõd_mem‹y
 1

	)

9736 
	#GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV
 0x8F1E

	)

9737 
	#GL_ELEMENT_ARRAY_UNIFIED_NV
 0x8F1F

	)

9738 
	#GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV
 0x8F20

	)

9739 
	#GL_VERTEX_ARRAY_ADDRESS_NV
 0x8F21

	)

9740 
	#GL_NORMAL_ARRAY_ADDRESS_NV
 0x8F22

	)

9741 
	#GL_COLOR_ARRAY_ADDRESS_NV
 0x8F23

	)

9742 
	#GL_INDEX_ARRAY_ADDRESS_NV
 0x8F24

	)

9743 
	#GL_TEXTURE_COORD_ARRAY_ADDRESS_NV
 0x8F25

	)

9744 
	#GL_EDGE_FLAG_ARRAY_ADDRESS_NV
 0x8F26

	)

9745 
	#GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV
 0x8F27

	)

9746 
	#GL_FOG_COORD_ARRAY_ADDRESS_NV
 0x8F28

	)

9747 
	#GL_ELEMENT_ARRAY_ADDRESS_NV
 0x8F29

	)

9748 
	#GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV
 0x8F2A

	)

9749 
	#GL_VERTEX_ARRAY_LENGTH_NV
 0x8F2B

	)

9750 
	#GL_NORMAL_ARRAY_LENGTH_NV
 0x8F2C

	)

9751 
	#GL_COLOR_ARRAY_LENGTH_NV
 0x8F2D

	)

9752 
	#GL_INDEX_ARRAY_LENGTH_NV
 0x8F2E

	)

9753 
	#GL_TEXTURE_COORD_ARRAY_LENGTH_NV
 0x8F2F

	)

9754 
	#GL_EDGE_FLAG_ARRAY_LENGTH_NV
 0x8F30

	)

9755 
	#GL_SECONDARY_COLOR_ARRAY_LENGTH_NV
 0x8F31

	)

9756 
	#GL_FOG_COORD_ARRAY_LENGTH_NV
 0x8F32

	)

9757 
	#GL_ELEMENT_ARRAY_LENGTH_NV
 0x8F33

	)

9758 
	#GL_DRAW_INDIRECT_UNIFIED_NV
 0x8F40

	)

9759 
	#GL_DRAW_INDIRECT_ADDRESS_NV
 0x8F41

	)

9760 
	#GL_DRAW_INDIRECT_LENGTH_NV
 0x8F42

	)

9761 (
APIENTRYP
 
	tPFNGLBUFFERADDRESSRANGENVPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 
	taddªss
, 
	tGLsizeùå
 
	tÀngth
);

9762 (
APIENTRYP
 
	tPFNGLVERTEXFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9763 (
APIENTRYP
 
	tPFNGLNORMALFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9764 (
APIENTRYP
 
	tPFNGLCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9765 (
APIENTRYP
 
	tPFNGLINDEXFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9766 (
APIENTRYP
 
	tPFNGLTEXCOORDFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9767 (
APIENTRYP
 
	tPFNGLEDGEFLAGFORMATNVPROC
Ë(
	tGLsizei
 
	t°ride
);

9768 (
APIENTRYP
 
	tPFNGLSECONDARYCOLORFORMATNVPROC
Ë(
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9769 (
APIENTRYP
 
	tPFNGLFOGCOORDFORMATNVPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9770 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLboﬁón
 
	tn‹mÆized
, 
	tGLsizei
 
	t°ride
);

9771 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIFORMATNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
);

9772 (
APIENTRYP
 
	tPFNGLGETINTEGERUI64I_VNVPROC
Ë(
	tGLíum
 
	tvÆue
, 
	tGLuöt
 
	tödex
, 
	tGLuöt64EXT
 *
	tªsu…
);

9773 #ifde‡
GL_GLEXT_PROTOTYPES


9774 
GLAPI
 
APIENTRY
 
glBuf„rAddªssR™geNV
 (
GLíum
 
≤ame
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 
addªss
, 
GLsizeùå
 
Àngth
);

9775 
GLAPI
 
APIENTRY
 
glVîãxF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9776 
GLAPI
 
APIENTRY
 
glN‹mÆF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9777 
GLAPI
 
APIENTRY
 
glCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9778 
GLAPI
 
APIENTRY
 
glIndexF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9779 
GLAPI
 
APIENTRY
 
glTexCo‹dF‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9780 
GLAPI
 
APIENTRY
 
glEdgeFœgF‹m©NV
 (
GLsizei
 
°ride
);

9781 
GLAPI
 
APIENTRY
 
glSec⁄d¨yCﬁ‹F‹m©NV
 (
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9782 
GLAPI
 
APIENTRY
 
glFogCo‹dF‹m©NV
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9783 
GLAPI
 
APIENTRY
 
glVîãxAâribF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLboﬁón
 
n‹mÆized
, 
GLsizei
 
°ride
);

9784 
GLAPI
 
APIENTRY
 
glVîãxAâribIF‹m©NV
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
);

9785 
GLAPI
 
APIENTRY
 
glGëI¡egîui64i_vNV
 (
GLíum
 
vÆue
, 
GLuöt
 
ödex
, 
GLuöt64EXT
 *
ªsu…
);

9789 #i‚de‡
GL_NV_vîãx_¥ogøm


9790 
	#GL_NV_vîãx_¥ogøm
 1

	)

9791 
	#GL_VERTEX_PROGRAM_NV
 0x8620

	)

9792 
	#GL_VERTEX_STATE_PROGRAM_NV
 0x8621

	)

9793 
	#GL_ATTRIB_ARRAY_SIZE_NV
 0x8623

	)

9794 
	#GL_ATTRIB_ARRAY_STRIDE_NV
 0x8624

	)

9795 
	#GL_ATTRIB_ARRAY_TYPE_NV
 0x8625

	)

9796 
	#GL_CURRENT_ATTRIB_NV
 0x8626

	)

9797 
	#GL_PROGRAM_LENGTH_NV
 0x8627

	)

9798 
	#GL_PROGRAM_STRING_NV
 0x8628

	)

9799 
	#GL_MODELVIEW_PROJECTION_NV
 0x8629

	)

9800 
	#GL_IDENTITY_NV
 0x862A

	)

9801 
	#GL_INVERSE_NV
 0x862B

	)

9802 
	#GL_TRANSPOSE_NV
 0x862C

	)

9803 
	#GL_INVERSE_TRANSPOSE_NV
 0x862D

	)

9804 
	#GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV
 0x862E

	)

9805 
	#GL_MAX_TRACK_MATRICES_NV
 0x862F

	)

9806 
	#GL_MATRIX0_NV
 0x8630

	)

9807 
	#GL_MATRIX1_NV
 0x8631

	)

9808 
	#GL_MATRIX2_NV
 0x8632

	)

9809 
	#GL_MATRIX3_NV
 0x8633

	)

9810 
	#GL_MATRIX4_NV
 0x8634

	)

9811 
	#GL_MATRIX5_NV
 0x8635

	)

9812 
	#GL_MATRIX6_NV
 0x8636

	)

9813 
	#GL_MATRIX7_NV
 0x8637

	)

9814 
	#GL_CURRENT_MATRIX_STACK_DEPTH_NV
 0x8640

	)

9815 
	#GL_CURRENT_MATRIX_NV
 0x8641

	)

9816 
	#GL_VERTEX_PROGRAM_POINT_SIZE_NV
 0x8642

	)

9817 
	#GL_VERTEX_PROGRAM_TWO_SIDE_NV
 0x8643

	)

9818 
	#GL_PROGRAM_PARAMETER_NV
 0x8644

	)

9819 
	#GL_ATTRIB_ARRAY_POINTER_NV
 0x8645

	)

9820 
	#GL_PROGRAM_TARGET_NV
 0x8646

	)

9821 
	#GL_PROGRAM_RESIDENT_NV
 0x8647

	)

9822 
	#GL_TRACK_MATRIX_NV
 0x8648

	)

9823 
	#GL_TRACK_MATRIX_TRANSFORM_NV
 0x8649

	)

9824 
	#GL_VERTEX_PROGRAM_BINDING_NV
 0x864A

	)

9825 
	#GL_PROGRAM_ERROR_POSITION_NV
 0x864B

	)

9826 
	#GL_VERTEX_ATTRIB_ARRAY0_NV
 0x8650

	)

9827 
	#GL_VERTEX_ATTRIB_ARRAY1_NV
 0x8651

	)

9828 
	#GL_VERTEX_ATTRIB_ARRAY2_NV
 0x8652

	)

9829 
	#GL_VERTEX_ATTRIB_ARRAY3_NV
 0x8653

	)

9830 
	#GL_VERTEX_ATTRIB_ARRAY4_NV
 0x8654

	)

9831 
	#GL_VERTEX_ATTRIB_ARRAY5_NV
 0x8655

	)

9832 
	#GL_VERTEX_ATTRIB_ARRAY6_NV
 0x8656

	)

9833 
	#GL_VERTEX_ATTRIB_ARRAY7_NV
 0x8657

	)

9834 
	#GL_VERTEX_ATTRIB_ARRAY8_NV
 0x8658

	)

9835 
	#GL_VERTEX_ATTRIB_ARRAY9_NV
 0x8659

	)

9836 
	#GL_VERTEX_ATTRIB_ARRAY10_NV
 0x865A

	)

9837 
	#GL_VERTEX_ATTRIB_ARRAY11_NV
 0x865B

	)

9838 
	#GL_VERTEX_ATTRIB_ARRAY12_NV
 0x865C

	)

9839 
	#GL_VERTEX_ATTRIB_ARRAY13_NV
 0x865D

	)

9840 
	#GL_VERTEX_ATTRIB_ARRAY14_NV
 0x865E

	)

9841 
	#GL_VERTEX_ATTRIB_ARRAY15_NV
 0x865F

	)

9842 
	#GL_MAP1_VERTEX_ATTRIB0_4_NV
 0x8660

	)

9843 
	#GL_MAP1_VERTEX_ATTRIB1_4_NV
 0x8661

	)

9844 
	#GL_MAP1_VERTEX_ATTRIB2_4_NV
 0x8662

	)

9845 
	#GL_MAP1_VERTEX_ATTRIB3_4_NV
 0x8663

	)

9846 
	#GL_MAP1_VERTEX_ATTRIB4_4_NV
 0x8664

	)

9847 
	#GL_MAP1_VERTEX_ATTRIB5_4_NV
 0x8665

	)

9848 
	#GL_MAP1_VERTEX_ATTRIB6_4_NV
 0x8666

	)

9849 
	#GL_MAP1_VERTEX_ATTRIB7_4_NV
 0x8667

	)

9850 
	#GL_MAP1_VERTEX_ATTRIB8_4_NV
 0x8668

	)

9851 
	#GL_MAP1_VERTEX_ATTRIB9_4_NV
 0x8669

	)

9852 
	#GL_MAP1_VERTEX_ATTRIB10_4_NV
 0x866A

	)

9853 
	#GL_MAP1_VERTEX_ATTRIB11_4_NV
 0x866B

	)

9854 
	#GL_MAP1_VERTEX_ATTRIB12_4_NV
 0x866C

	)

9855 
	#GL_MAP1_VERTEX_ATTRIB13_4_NV
 0x866D

	)

9856 
	#GL_MAP1_VERTEX_ATTRIB14_4_NV
 0x866E

	)

9857 
	#GL_MAP1_VERTEX_ATTRIB15_4_NV
 0x866F

	)

9858 
	#GL_MAP2_VERTEX_ATTRIB0_4_NV
 0x8670

	)

9859 
	#GL_MAP2_VERTEX_ATTRIB1_4_NV
 0x8671

	)

9860 
	#GL_MAP2_VERTEX_ATTRIB2_4_NV
 0x8672

	)

9861 
	#GL_MAP2_VERTEX_ATTRIB3_4_NV
 0x8673

	)

9862 
	#GL_MAP2_VERTEX_ATTRIB4_4_NV
 0x8674

	)

9863 
	#GL_MAP2_VERTEX_ATTRIB5_4_NV
 0x8675

	)

9864 
	#GL_MAP2_VERTEX_ATTRIB6_4_NV
 0x8676

	)

9865 
	#GL_MAP2_VERTEX_ATTRIB7_4_NV
 0x8677

	)

9866 
	#GL_MAP2_VERTEX_ATTRIB8_4_NV
 0x8678

	)

9867 
	#GL_MAP2_VERTEX_ATTRIB9_4_NV
 0x8679

	)

9868 
	#GL_MAP2_VERTEX_ATTRIB10_4_NV
 0x867A

	)

9869 
	#GL_MAP2_VERTEX_ATTRIB11_4_NV
 0x867B

	)

9870 
	#GL_MAP2_VERTEX_ATTRIB12_4_NV
 0x867C

	)

9871 
	#GL_MAP2_VERTEX_ATTRIB13_4_NV
 0x867D

	)

9872 
	#GL_MAP2_VERTEX_ATTRIB14_4_NV
 0x867E

	)

9873 
	#GL_MAP2_VERTEX_ATTRIB15_4_NV
 0x867F

	)

9874 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLAREPROGRAMSRESIDENTNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
, 
	tGLboﬁón
 *
	tªsidí˚s
);

9875 (
APIENTRYP
 
	tPFNGLBINDPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
);

9876 (
APIENTRYP
 
	tPFNGLDELETEPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

9877 (
APIENTRYP
 
	tPFNGLEXECUTEPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

9878 (
APIENTRYP
 
	tPFNGLGENPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, 
	tGLuöt
 *
	t¥ogøms
);

9879 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERDVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

9880 (
APIENTRYP
 
	tPFNGLGETPROGRAMPARAMETERFVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9881 (
APIENTRYP
 
	tPFNGLGETPROGRAMIVNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9882 (
APIENTRYP
 
	tPFNGLGETPROGRAMSTRINGNVPROC
Ë(
	tGLuöt
 
	tid
, 
	tGLíum
 
	t≤ame
, 
	tGLubyã
 *
	t¥ogøm
);

9883 (
APIENTRYP
 
	tPFNGLGETTRACKMATRIXIVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9884 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBDVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

9885 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBFVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

9886 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

9887 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBPOINTERVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, **
	tpoöãr
);

9888 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISPROGRAMNVPROC
Ë(
	tGLuöt
 
	tid
);

9889 (
APIENTRYP
 
	tPFNGLLOADPROGRAMNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tid
, 
	tGLsizei
 
	tÀn
, c⁄° 
	tGLubyã
 *
	t¥ogøm
);

9890 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

9891 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9892 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9893 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETER4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9894 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4DVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9895 (
APIENTRYP
 
	tPFNGLPROGRAMPARAMETERS4FVNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9896 (
APIENTRYP
 
	tPFNGLREQUESTRESIDENTPROGRAMSNVPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLuöt
 *
	t¥ogøms
);

9897 (
APIENTRYP
 
	tPFNGLTRACKMATRIXNVPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLuöt
 
	taddªss
, GLíum 
	tm©rix
, GLíum 
	tå™sf‹m
);

9898 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBPOINTERNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tfsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

9899 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
);

9900 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9901 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
);

9902 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9903 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
);

9904 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

9905 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
);

9906 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9907 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

9908 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9909 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
);

9910 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

9911 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
);

9912 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9913 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

9914 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9915 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
);

9916 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

9917 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLdoubÀ
 
	tx
, GLdoubÀ 
	ty
, GLdoubÀ 
	tz
, GLdoubÀ 
	tw
);

9918 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9919 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

9920 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9921 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsh‹t
 
	tx
, GLsh‹à
	ty
, GLsh‹à
	tz
, GLsh‹à
	tw
);

9922 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

9923 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLubyã
 
	tx
, GLubyã 
	ty
, GLubyã 
	tz
, GLubyã 
	tw
);

9924 (
APIENTRYP
 
	tPFNGLVERTEXATTRIB4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

9925 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9926 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9927 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS1SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

9928 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9929 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9930 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS2SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

9931 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9932 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9933 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS3SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

9934 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4DVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLdoubÀ
 *
	tv
);

9935 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4FVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLÊﬂt
 *
	tv
);

9936 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4SVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLsh‹t
 *
	tv
);

9937 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBS4UBVNVPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLsizei
 
	tcou¡
, c⁄° 
	tGLubyã
 *
	tv
);

9938 #ifde‡
GL_GLEXT_PROTOTYPES


9939 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glAªProgømsResidítNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
, GLboﬁó¿*
ªsidí˚s
);

9940 
GLAPI
 
APIENTRY
 
glBödProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
);

9941 
GLAPI
 
APIENTRY
 
glDñëeProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

9942 
GLAPI
 
APIENTRY
 
glExecuãProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, c⁄° 
GLÊﬂt
 *
∑øms
);

9943 
GLAPI
 
APIENTRY
 
glGíProgømsNV
 (
GLsizei
 
n
, 
GLuöt
 *
¥ogøms
);

9944 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîdvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLdoubÀ
 *
∑øms
);

9945 
GLAPI
 
APIENTRY
 
glGëProgømP¨amëîfvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9946 
GLAPI
 
APIENTRY
 
glGëProgømivNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9947 
GLAPI
 
APIENTRY
 
glGëProgømSåögNV
 (
GLuöt
 
id
, 
GLíum
 
≤ame
, 
GLubyã
 *
¥ogøm
);

9948 
GLAPI
 
APIENTRY
 
glGëTøckM©rixivNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

9949 
GLAPI
 
APIENTRY
 
glGëVîãxAâribdvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

9950 
GLAPI
 
APIENTRY
 
glGëVîãxAâribfvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

9951 
GLAPI
 
APIENTRY
 
glGëVîãxAâribivNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

9952 
GLAPI
 
APIENTRY
 
glGëVîãxAâribPoöãrvNV
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, **
poöãr
);

9953 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsProgømNV
 (
GLuöt
 
id
);

9954 
GLAPI
 
APIENTRY
 
glLﬂdProgømNV
 (
GLíum
 
èrgë
, 
GLuöt
 
id
, 
GLsizei
 
Àn
, c⁄° 
GLubyã
 *
¥ogøm
);

9955 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

9956 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

9957 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9958 
GLAPI
 
APIENTRY
 
glProgømP¨amëî4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

9959 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4dvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

9960 
GLAPI
 
APIENTRY
 
glProgømP¨amëîs4fvNV
 (
GLíum
 
èrgë
, 
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

9961 
GLAPI
 
APIENTRY
 
glReque°ResidítProgømsNV
 (
GLsizei
 
n
, c⁄° 
GLuöt
 *
¥ogøms
);

9962 
GLAPI
 
APIENTRY
 
glTøckM©rixNV
 (
GLíum
 
èrgë
, 
GLuöt
 
addªss
, GLíum 
m©rix
, GLíum 
å™sf‹m
);

9963 
GLAPI
 
APIENTRY
 
glVîãxAâribPoöãrNV
 (
GLuöt
 
ödex
, 
GLöt
 
fsize
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

9964 
GLAPI
 
APIENTRY
 
glVîãxAârib1dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
);

9965 
GLAPI
 
APIENTRY
 
glVîãxAârib1dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

9966 
GLAPI
 
APIENTRY
 
glVîãxAârib1fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
);

9967 
GLAPI
 
APIENTRY
 
glVîãxAârib1fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

9968 
GLAPI
 
APIENTRY
 
glVîãxAârib1sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
);

9969 
GLAPI
 
APIENTRY
 
glVîãxAârib1svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

9970 
GLAPI
 
APIENTRY
 
glVîãxAârib2dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
);

9971 
GLAPI
 
APIENTRY
 
glVîãxAârib2dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

9972 
GLAPI
 
APIENTRY
 
glVîãxAârib2fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

9973 
GLAPI
 
APIENTRY
 
glVîãxAârib2fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

9974 
GLAPI
 
APIENTRY
 
glVîãxAârib2sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
);

9975 
GLAPI
 
APIENTRY
 
glVîãxAârib2svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

9976 
GLAPI
 
APIENTRY
 
glVîãxAârib3dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
);

9977 
GLAPI
 
APIENTRY
 
glVîãxAârib3dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

9978 
GLAPI
 
APIENTRY
 
glVîãxAârib3fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

9979 
GLAPI
 
APIENTRY
 
glVîãxAârib3fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

9980 
GLAPI
 
APIENTRY
 
glVîãxAârib3sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
);

9981 
GLAPI
 
APIENTRY
 
glVîãxAârib3svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

9982 
GLAPI
 
APIENTRY
 
glVîãxAârib4dNV
 (
GLuöt
 
ödex
, 
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
z
, GLdoubÀ 
w
);

9983 
GLAPI
 
APIENTRY
 
glVîãxAârib4dvNV
 (
GLuöt
 
ödex
, c⁄° 
GLdoubÀ
 *
v
);

9984 
GLAPI
 
APIENTRY
 
glVîãxAârib4fNV
 (
GLuöt
 
ödex
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

9985 
GLAPI
 
APIENTRY
 
glVîãxAârib4fvNV
 (
GLuöt
 
ödex
, c⁄° 
GLÊﬂt
 *
v
);

9986 
GLAPI
 
APIENTRY
 
glVîãxAârib4sNV
 (
GLuöt
 
ödex
, 
GLsh‹t
 
x
, GLsh‹à
y
, GLsh‹à
z
, GLsh‹à
w
);

9987 
GLAPI
 
APIENTRY
 
glVîãxAârib4svNV
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

9988 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubNV
 (
GLuöt
 
ödex
, 
GLubyã
 
x
, GLubyã 
y
, GLubyã 
z
, GLubyã 
w
);

9989 
GLAPI
 
APIENTRY
 
glVîãxAârib4ubvNV
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

9990 
GLAPI
 
APIENTRY
 
glVîãxAâribs1dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

9991 
GLAPI
 
APIENTRY
 
glVîãxAâribs1fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

9992 
GLAPI
 
APIENTRY
 
glVîãxAâribs1svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

9993 
GLAPI
 
APIENTRY
 
glVîãxAâribs2dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

9994 
GLAPI
 
APIENTRY
 
glVîãxAâribs2fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

9995 
GLAPI
 
APIENTRY
 
glVîãxAâribs2svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

9996 
GLAPI
 
APIENTRY
 
glVîãxAâribs3dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

9997 
GLAPI
 
APIENTRY
 
glVîãxAâribs3fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

9998 
GLAPI
 
APIENTRY
 
glVîãxAâribs3svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

9999 
GLAPI
 
APIENTRY
 
glVîãxAâribs4dvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLdoubÀ
 *
v
);

10000 
GLAPI
 
APIENTRY
 
glVîãxAâribs4fvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLÊﬂt
 *
v
);

10001 
GLAPI
 
APIENTRY
 
glVîãxAâribs4svNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLsh‹t
 *
v
);

10002 
GLAPI
 
APIENTRY
 
glVîãxAâribs4ubvNV
 (
GLuöt
 
ödex
, 
GLsizei
 
cou¡
, c⁄° 
GLubyã
 *
v
);

10006 #i‚de‡
GL_NV_vîãx_¥ogøm1_1


10007 
	#GL_NV_vîãx_¥ogøm1_1
 1

	)

10010 #i‚de‡
GL_NV_vîãx_¥ogøm2


10011 
	#GL_NV_vîãx_¥ogøm2
 1

	)

10014 #i‚de‡
GL_NV_vîãx_¥ogøm2_›ti⁄


10015 
	#GL_NV_vîãx_¥ogøm2_›ti⁄
 1

	)

10018 #i‚de‡
GL_NV_vîãx_¥ogøm3


10019 
	#GL_NV_vîãx_¥ogøm3
 1

	)

10022 #i‚de‡
GL_NV_vîãx_¥ogøm4


10023 
	#GL_NV_vîãx_¥ogøm4
 1

	)

10024 
	#GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV
 0x88FD

	)

10025 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
);

10026 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
);

10027 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
);

10028 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tx
, GLöà
	ty
, GLöà
	tz
, GLöà
	tw
);

10029 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
);

10030 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
);

10031 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
);

10032 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIEXTPROC
Ë(
	tGLuöt
 
	tödex
, GLuöà
	tx
, GLuöà
	ty
, GLuöà
	tz
, GLuöà
	tw
);

10033 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

10034 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

10035 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

10036 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4IVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLöt
 *
	tv
);

10037 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI1UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

10038 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI2UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

10039 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI3UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

10040 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° GLuöà*
	tv
);

10041 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4BVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLbyã
 *
	tv
);

10042 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4SVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLsh‹t
 *
	tv
);

10043 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4UBVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLubyã
 *
	tv
);

10044 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBI4USVEXTPROC
Ë(
	tGLuöt
 
	tödex
, c⁄° 
	tGLush‹t
 *
	tv
);

10045 (
APIENTRYP
 
	tPFNGLVERTEXATTRIBIPOINTEREXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLöt
 
	tsize
, 
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° *
	tpoöãr
);

10046 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10047 (
APIENTRYP
 
	tPFNGLGETVERTEXATTRIBIUIVEXTPROC
Ë(
	tGLuöt
 
	tödex
, 
	tGLíum
 
	t≤ame
, GLuöà*
	t∑øms
);

10048 #ifde‡
GL_GLEXT_PROTOTYPES


10049 
GLAPI
 
APIENTRY
 
glVîãxAâribI1iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
);

10050 
GLAPI
 
APIENTRY
 
glVîãxAâribI2iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
);

10051 
GLAPI
 
APIENTRY
 
glVîãxAâribI3iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
);

10052 
GLAPI
 
APIENTRY
 
glVîãxAâribI4iEXT
 (
GLuöt
 
ödex
, 
GLöt
 
x
, GLöà
y
, GLöà
z
, GLöà
w
);

10053 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
);

10054 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
);

10055 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
);

10056 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uiEXT
 (
GLuöt
 
ödex
, GLuöà
x
, GLuöà
y
, GLuöà
z
, GLuöà
w
);

10057 
GLAPI
 
APIENTRY
 
glVîãxAâribI1ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

10058 
GLAPI
 
APIENTRY
 
glVîãxAâribI2ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

10059 
GLAPI
 
APIENTRY
 
glVîãxAâribI3ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

10060 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ivEXT
 (
GLuöt
 
ödex
, c⁄° 
GLöt
 *
v
);

10061 
GLAPI
 
APIENTRY
 
glVîãxAâribI1uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

10062 
GLAPI
 
APIENTRY
 
glVîãxAâribI2uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

10063 
GLAPI
 
APIENTRY
 
glVîãxAâribI3uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

10064 
GLAPI
 
APIENTRY
 
glVîãxAâribI4uivEXT
 (
GLuöt
 
ödex
, c⁄° GLuöà*
v
);

10065 
GLAPI
 
APIENTRY
 
glVîãxAâribI4bvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLbyã
 *
v
);

10066 
GLAPI
 
APIENTRY
 
glVîãxAâribI4svEXT
 (
GLuöt
 
ödex
, c⁄° 
GLsh‹t
 *
v
);

10067 
GLAPI
 
APIENTRY
 
glVîãxAâribI4ubvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLubyã
 *
v
);

10068 
GLAPI
 
APIENTRY
 
glVîãxAâribI4usvEXT
 (
GLuöt
 
ödex
, c⁄° 
GLush‹t
 *
v
);

10069 
GLAPI
 
APIENTRY
 
glVîãxAâribIPoöãrEXT
 (
GLuöt
 
ödex
, 
GLöt
 
size
, 
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° *
poöãr
);

10070 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10071 
GLAPI
 
APIENTRY
 
glGëVîãxAâribIuivEXT
 (
GLuöt
 
ödex
, 
GLíum
 
≤ame
, GLuöà*
∑øms
);

10075 #i‚de‡
GL_NV_video_ˇ±uª


10076 
	#GL_NV_video_ˇ±uª
 1

	)

10077 
	#GL_VIDEO_BUFFER_NV
 0x9020

	)

10078 
	#GL_VIDEO_BUFFER_BINDING_NV
 0x9021

	)

10079 
	#GL_FIELD_UPPER_NV
 0x9022

	)

10080 
	#GL_FIELD_LOWER_NV
 0x9023

	)

10081 
	#GL_NUM_VIDEO_CAPTURE_STREAMS_NV
 0x9024

	)

10082 
	#GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV
 0x9025

	)

10083 
	#GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV
 0x9026

	)

10084 
	#GL_LAST_VIDEO_CAPTURE_STATUS_NV
 0x9027

	)

10085 
	#GL_VIDEO_BUFFER_PITCH_NV
 0x9028

	)

10086 
	#GL_VIDEO_COLOR_CONVERSION_MATRIX_NV
 0x9029

	)

10087 
	#GL_VIDEO_COLOR_CONVERSION_MAX_NV
 0x902A

	)

10088 
	#GL_VIDEO_COLOR_CONVERSION_MIN_NV
 0x902B

	)

10089 
	#GL_VIDEO_COLOR_CONVERSION_OFFSET_NV
 0x902C

	)

10090 
	#GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV
 0x902D

	)

10091 
	#GL_PARTIAL_SUCCESS_NV
 0x902E

	)

10092 
	#GL_SUCCESS_NV
 0x902F

	)

10093 
	#GL_FAILURE_NV
 0x9030

	)

10094 
	#GL_YCBYCR8_422_NV
 0x9031

	)

10095 
	#GL_YCBAYCR8A_4224_NV
 0x9032

	)

10096 
	#GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV
 0x9033

	)

10097 
	#GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV
 0x9034

	)

10098 
	#GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV
 0x9035

	)

10099 
	#GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV
 0x9036

	)

10100 
	#GL_Z4Y12Z4CB12Z4CR12_444_NV
 0x9037

	)

10101 
	#GL_VIDEO_CAPTURE_FRAME_WIDTH_NV
 0x9038

	)

10102 
	#GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV
 0x9039

	)

10103 
	#GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV
 0x903A

	)

10104 
	#GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV
 0x903B

	)

10105 
	#GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV
 0x903C

	)

10106 (
APIENTRYP
 
	tPFNGLBEGINVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

10107 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, 
	tGLöçåARB
 
	toff£t
);

10108 (
APIENTRYP
 
	tPFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t‰ame_ªgi⁄
, GLíum 
	tèrgë
, GLuöà
	tãxtuª
);

10109 (
APIENTRYP
 
	tPFNGLENDVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
);

10110 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTUREIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10111 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10112 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10113 (
APIENTRYP
 
	tPFNGLGETVIDEOCAPTURESTREAMDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, 
	tGLdoubÀ
 *
	t∑øms
);

10114 
GLíum
 (
	tAPIENTRYP
 
	tPFNGLVIDEOCAPTURENVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà*
	t£quí˚_num
, 
	tGLuöt64EXT
 *
	tˇ±uª_time
);

10115 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10116 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10117 (
APIENTRYP
 
	tPFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC
Ë(
	tGLuöt
 
	tvideo_ˇ±uª_¶Ÿ
, GLuöà
	t°ªam
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLdoubÀ
 *
	t∑øms
);

10118 #ifde‡
GL_GLEXT_PROTOTYPES


10119 
GLAPI
 
APIENTRY
 
glBegöVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

10120 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómBuf„rNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, 
GLöçåARB
 
off£t
);

10121 
GLAPI
 
APIENTRY
 
glBödVideoC≠tuªSåómTextuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
‰ame_ªgi⁄
, GLíum 
èrgë
, GLuöà
ãxtuª
);

10122 
GLAPI
 
APIENTRY
 
glEndVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
);

10123 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10124 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10125 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10126 
GLAPI
 
APIENTRY
 
glGëVideoC≠tuªSåómdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, 
GLdoubÀ
 *
∑øms
);

10127 
GLAPI
 
GLíum
 
APIENTRY
 
glVideoC≠tuªNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà*
£quí˚_num
, 
GLuöt64EXT
 *
ˇ±uª_time
);

10128 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîivNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10129 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîfvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10130 
GLAPI
 
APIENTRY
 
glVideoC≠tuªSåómP¨amëîdvNV
 (
GLuöt
 
video_ˇ±uª_¶Ÿ
, GLuöà
°ªam
, 
GLíum
 
≤ame
, c⁄° 
GLdoubÀ
 *
∑øms
);

10134 #i‚de‡
GL_OML_öãæa˚


10135 
	#GL_OML_öãæa˚
 1

	)

10136 
	#GL_INTERLACE_OML
 0x8980

	)

10137 
	#GL_INTERLACE_READ_OML
 0x8981

	)

10140 #i‚de‡
GL_OML_ªßm∂e


10141 
	#GL_OML_ªßm∂e
 1

	)

10142 
	#GL_PACK_RESAMPLE_OML
 0x8984

	)

10143 
	#GL_UNPACK_RESAMPLE_OML
 0x8985

	)

10144 
	#GL_RESAMPLE_REPLICATE_OML
 0x8986

	)

10145 
	#GL_RESAMPLE_ZERO_FILL_OML
 0x8987

	)

10146 
	#GL_RESAMPLE_AVERAGE_OML
 0x8988

	)

10147 
	#GL_RESAMPLE_DECIMATE_OML
 0x8989

	)

10150 #i‚de‡
GL_OML_subßm∂e


10151 
	#GL_OML_subßm∂e
 1

	)

10152 
	#GL_FORMAT_SUBSAMPLE_24_24_OML
 0x8982

	)

10153 
	#GL_FORMAT_SUBSAMPLE_244_244_OML
 0x8983

	)

10156 #i‚de‡
GL_PGI_misc_höts


10157 
	#GL_PGI_misc_höts
 1

	)

10158 
	#GL_PREFER_DOUBLEBUFFER_HINT_PGI
 0x1A1F8

	)

10159 
	#GL_CONSERVE_MEMORY_HINT_PGI
 0x1A1FD

	)

10160 
	#GL_RECLAIM_MEMORY_HINT_PGI
 0x1A1FE

	)

10161 
	#GL_NATIVE_GRAPHICS_HANDLE_PGI
 0x1A202

	)

10162 
	#GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI
 0x1A203

	)

10163 
	#GL_NATIVE_GRAPHICS_END_HINT_PGI
 0x1A204

	)

10164 
	#GL_ALWAYS_FAST_HINT_PGI
 0x1A20C

	)

10165 
	#GL_ALWAYS_SOFT_HINT_PGI
 0x1A20D

	)

10166 
	#GL_ALLOW_DRAW_OBJ_HINT_PGI
 0x1A20E

	)

10167 
	#GL_ALLOW_DRAW_WIN_HINT_PGI
 0x1A20F

	)

10168 
	#GL_ALLOW_DRAW_FRG_HINT_PGI
 0x1A210

	)

10169 
	#GL_ALLOW_DRAW_MEM_HINT_PGI
 0x1A211

	)

10170 
	#GL_STRICT_DEPTHFUNC_HINT_PGI
 0x1A216

	)

10171 
	#GL_STRICT_LIGHTING_HINT_PGI
 0x1A217

	)

10172 
	#GL_STRICT_SCISSOR_HINT_PGI
 0x1A218

	)

10173 
	#GL_FULL_STIPPLE_HINT_PGI
 0x1A219

	)

10174 
	#GL_CLIP_NEAR_HINT_PGI
 0x1A220

	)

10175 
	#GL_CLIP_FAR_HINT_PGI
 0x1A221

	)

10176 
	#GL_WIDE_LINE_HINT_PGI
 0x1A222

	)

10177 
	#GL_BACK_NORMALS_HINT_PGI
 0x1A223

	)

10178 (
APIENTRYP
 
	tPFNGLHINTPGIPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tmode
);

10179 #ifde‡
GL_GLEXT_PROTOTYPES


10180 
GLAPI
 
APIENTRY
 
glHötPGI
 (
GLíum
 
èrgë
, 
GLöt
 
mode
);

10184 #i‚de‡
GL_PGI_vîãx_höts


10185 
	#GL_PGI_vîãx_höts
 1

	)

10186 
	#GL_VERTEX_DATA_HINT_PGI
 0x1A22A

	)

10187 
	#GL_VERTEX_CONSISTENT_HINT_PGI
 0x1A22B

	)

10188 
	#GL_MATERIAL_SIDE_HINT_PGI
 0x1A22C

	)

10189 
	#GL_MAX_VERTEX_HINT_PGI
 0x1A22D

	)

10190 
	#GL_COLOR3_BIT_PGI
 0x00010000

	)

10191 
	#GL_COLOR4_BIT_PGI
 0x00020000

	)

10192 
	#GL_EDGEFLAG_BIT_PGI
 0x00040000

	)

10193 
	#GL_INDEX_BIT_PGI
 0x00080000

	)

10194 
	#GL_MAT_AMBIENT_BIT_PGI
 0x00100000

	)

10195 
	#GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI
 0x00200000

	)

10196 
	#GL_MAT_DIFFUSE_BIT_PGI
 0x00400000

	)

10197 
	#GL_MAT_EMISSION_BIT_PGI
 0x00800000

	)

10198 
	#GL_MAT_COLOR_INDEXES_BIT_PGI
 0x01000000

	)

10199 
	#GL_MAT_SHININESS_BIT_PGI
 0x02000000

	)

10200 
	#GL_MAT_SPECULAR_BIT_PGI
 0x04000000

	)

10201 
	#GL_NORMAL_BIT_PGI
 0x08000000

	)

10202 
	#GL_TEXCOORD1_BIT_PGI
 0x10000000

	)

10203 
	#GL_TEXCOORD2_BIT_PGI
 0x20000000

	)

10204 
	#GL_TEXCOORD3_BIT_PGI
 0x40000000

	)

10205 
	#GL_TEXCOORD4_BIT_PGI
 0x80000000

	)

10206 
	#GL_VERTEX23_BIT_PGI
 0x00000004

	)

10207 
	#GL_VERTEX4_BIT_PGI
 0x00000008

	)

10210 #i‚de‡
GL_REND_s¸ìn_co‹dö©es


10211 
	#GL_REND_s¸ìn_co‹dö©es
 1

	)

10212 
	#GL_SCREEN_COORDINATES_REND
 0x8490

	)

10213 
	#GL_INVERTED_SCREEN_W_REND
 0x8491

	)

10216 #i‚de‡
GL_S3_s3tc


10217 
	#GL_S3_s3tc
 1

	)

10218 
	#GL_RGB_S3TC
 0x83A0

	)

10219 
	#GL_RGB4_S3TC
 0x83A1

	)

10220 
	#GL_RGBA_S3TC
 0x83A2

	)

10221 
	#GL_RGBA4_S3TC
 0x83A3

	)

10222 
	#GL_RGBA_DXT5_S3TC
 0x83A4

	)

10223 
	#GL_RGBA4_DXT5_S3TC
 0x83A5

	)

10226 #i‚de‡
GL_SGIS_dëaû_ãxtuª


10227 
	#GL_SGIS_dëaû_ãxtuª
 1

	)

10228 
	#GL_DETAIL_TEXTURE_2D_SGIS
 0x8095

	)

10229 
	#GL_DETAIL_TEXTURE_2D_BINDING_SGIS
 0x8096

	)

10230 
	#GL_LINEAR_DETAIL_SGIS
 0x8097

	)

10231 
	#GL_LINEAR_DETAIL_ALPHA_SGIS
 0x8098

	)

10232 
	#GL_LINEAR_DETAIL_COLOR_SGIS
 0x8099

	)

10233 
	#GL_DETAIL_TEXTURE_LEVEL_SGIS
 0x809A

	)

10234 
	#GL_DETAIL_TEXTURE_MODE_SGIS
 0x809B

	)

10235 
	#GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS
 0x809C

	)

10236 (
APIENTRYP
 
	tPFNGLDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

10237 (
APIENTRYP
 
	tPFNGLGETDETAILTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

10238 #ifde‡
GL_GLEXT_PROTOTYPES


10239 
GLAPI
 
APIENTRY
 
glDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

10240 
GLAPI
 
APIENTRY
 
glGëDëaûTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

10244 #i‚de‡
GL_SGIS_fog_fun˘i⁄


10245 
	#GL_SGIS_fog_fun˘i⁄
 1

	)

10246 
	#GL_FOG_FUNC_SGIS
 0x812A

	)

10247 
	#GL_FOG_FUNC_POINTS_SGIS
 0x812B

	)

10248 
	#GL_MAX_FOG_FUNC_POINTS_SGIS
 0x812C

	)

10249 (
APIENTRYP
 
	tPFNGLFOGFUNCSGISPROC
Ë(
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

10250 (
APIENTRYP
 
	tPFNGLGETFOGFUNCSGISPROC
Ë(
	tGLÊﬂt
 *
	tpoöts
);

10251 #ifde‡
GL_GLEXT_PROTOTYPES


10252 
GLAPI
 
APIENTRY
 
glFogFuncSGIS
 (
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

10253 
GLAPI
 
APIENTRY
 
glGëFogFuncSGIS
 (
GLÊﬂt
 *
poöts
);

10257 #i‚de‡
GL_SGIS_gíî©e_mùm≠


10258 
	#GL_SGIS_gíî©e_mùm≠
 1

	)

10259 
	#GL_GENERATE_MIPMAP_SGIS
 0x8191

	)

10260 
	#GL_GENERATE_MIPMAP_HINT_SGIS
 0x8192

	)

10263 #i‚de‡
GL_SGIS_mu…ißm∂e


10264 
	#GL_SGIS_mu…ißm∂e
 1

	)

10265 
	#GL_MULTISAMPLE_SGIS
 0x809D

	)

10266 
	#GL_SAMPLE_ALPHA_TO_MASK_SGIS
 0x809E

	)

10267 
	#GL_SAMPLE_ALPHA_TO_ONE_SGIS
 0x809F

	)

10268 
	#GL_SAMPLE_MASK_SGIS
 0x80A0

	)

10269 
	#GL_1PASS_SGIS
 0x80A1

	)

10270 
	#GL_2PASS_0_SGIS
 0x80A2

	)

10271 
	#GL_2PASS_1_SGIS
 0x80A3

	)

10272 
	#GL_4PASS_0_SGIS
 0x80A4

	)

10273 
	#GL_4PASS_1_SGIS
 0x80A5

	)

10274 
	#GL_4PASS_2_SGIS
 0x80A6

	)

10275 
	#GL_4PASS_3_SGIS
 0x80A7

	)

10276 
	#GL_SAMPLE_BUFFERS_SGIS
 0x80A8

	)

10277 
	#GL_SAMPLES_SGIS
 0x80A9

	)

10278 
	#GL_SAMPLE_MASK_VALUE_SGIS
 0x80AA

	)

10279 
	#GL_SAMPLE_MASK_INVERT_SGIS
 0x80AB

	)

10280 
	#GL_SAMPLE_PATTERN_SGIS
 0x80AC

	)

10281 (
APIENTRYP
 
	tPFNGLSAMPLEMASKSGISPROC
Ë(
	tGL˛ampf
 
	tvÆue
, 
	tGLboﬁón
 
	tövît
);

10282 (
APIENTRYP
 
	tPFNGLSAMPLEPATTERNSGISPROC
Ë(
	tGLíum
 
	t∑âîn
);

10283 #ifde‡
GL_GLEXT_PROTOTYPES


10284 
GLAPI
 
APIENTRY
 
glSam∂eMaskSGIS
 (
GL˛ampf
 
vÆue
, 
GLboﬁón
 
övît
);

10285 
GLAPI
 
APIENTRY
 
glSam∂eP©ã∫SGIS
 (
GLíum
 
∑âîn
);

10289 #i‚de‡
GL_SGIS_pixñ_ãxtuª


10290 
	#GL_SGIS_pixñ_ãxtuª
 1

	)

10291 
	#GL_PIXEL_TEXTURE_SGIS
 0x8353

	)

10292 
	#GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS
 0x8354

	)

10293 
	#GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS
 0x8355

	)

10294 
	#GL_PIXEL_GROUP_COLOR_SGIS
 0x8356

	)

10295 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERISGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10296 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10297 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10298 (
APIENTRYP
 
	tPFNGLPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10299 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERIVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10300 (
APIENTRYP
 
	tPFNGLGETPIXELTEXGENPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10301 #ifde‡
GL_GLEXT_PROTOTYPES


10302 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîiSGIS
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10303 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10304 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10305 
GLAPI
 
APIENTRY
 
glPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10306 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîivSGIS
 (
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10307 
GLAPI
 
APIENTRY
 
glGëPixñTexGíP¨amëîfvSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10311 #i‚de‡
GL_SGIS_poöt_löe_ãxgí


10312 
	#GL_SGIS_poöt_löe_ãxgí
 1

	)

10313 
	#GL_EYE_DISTANCE_TO_POINT_SGIS
 0x81F0

	)

10314 
	#GL_OBJECT_DISTANCE_TO_POINT_SGIS
 0x81F1

	)

10315 
	#GL_EYE_DISTANCE_TO_LINE_SGIS
 0x81F2

	)

10316 
	#GL_OBJECT_DISTANCE_TO_LINE_SGIS
 0x81F3

	)

10317 
	#GL_EYE_POINT_SGIS
 0x81F4

	)

10318 
	#GL_OBJECT_POINT_SGIS
 0x81F5

	)

10319 
	#GL_EYE_LINE_SGIS
 0x81F6

	)

10320 
	#GL_OBJECT_LINE_SGIS
 0x81F7

	)

10323 #i‚de‡
GL_SGIS_poöt_∑ømëîs


10324 
	#GL_SGIS_poöt_∑ømëîs
 1

	)

10325 
	#GL_POINT_SIZE_MIN_SGIS
 0x8126

	)

10326 
	#GL_POINT_SIZE_MAX_SGIS
 0x8127

	)

10327 
	#GL_POINT_FADE_THRESHOLD_SIZE_SGIS
 0x8128

	)

10328 
	#GL_DISTANCE_ATTENUATION_SGIS
 0x8129

	)

10329 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFSGISPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10330 (
APIENTRYP
 
	tPFNGLPOINTPARAMETERFVSGISPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10331 #ifde‡
GL_GLEXT_PROTOTYPES


10332 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfSGIS
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10333 
GLAPI
 
APIENTRY
 
glPoötP¨amëîfvSGIS
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10337 #i‚de‡
GL_SGIS_sh¨≥n_ãxtuª


10338 
	#GL_SGIS_sh¨≥n_ãxtuª
 1

	)

10339 
	#GL_LINEAR_SHARPEN_SGIS
 0x80AD

	)

10340 
	#GL_LINEAR_SHARPEN_ALPHA_SGIS
 0x80AE

	)

10341 
	#GL_LINEAR_SHARPEN_COLOR_SGIS
 0x80AF

	)

10342 
	#GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS
 0x80B0

	)

10343 (
APIENTRYP
 
	tPFNGLSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tpoöts
);

10344 (
APIENTRYP
 
	tPFNGLGETSHARPENTEXFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 *
	tpoöts
);

10345 #ifde‡
GL_GLEXT_PROTOTYPES


10346 
GLAPI
 
APIENTRY
 
glSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
poöts
);

10347 
GLAPI
 
APIENTRY
 
glGëSh¨≥nTexFuncSGIS
 (
GLíum
 
èrgë
, 
GLÊﬂt
 *
poöts
);

10351 #i‚de‡
GL_SGIS_ãxtuª4D


10352 
	#GL_SGIS_ãxtuª4D
 1

	)

10353 
	#GL_PACK_SKIP_VOLUMES_SGIS
 0x8130

	)

10354 
	#GL_PACK_IMAGE_DEPTH_SGIS
 0x8131

	)

10355 
	#GL_UNPACK_SKIP_VOLUMES_SGIS
 0x8132

	)

10356 
	#GL_UNPACK_IMAGE_DEPTH_SGIS
 0x8133

	)

10357 
	#GL_TEXTURE_4D_SGIS
 0x8134

	)

10358 
	#GL_PROXY_TEXTURE_4D_SGIS
 0x8135

	)

10359 
	#GL_TEXTURE_4DSIZE_SGIS
 0x8136

	)

10360 
	#GL_TEXTURE_WRAP_Q_SGIS
 0x8137

	)

10361 
	#GL_MAX_4D_TEXTURE_SIZE_SGIS
 0x8138

	)

10362 
	#GL_TEXTURE_4D_BINDING_SGIS
 0x814F

	)

10363 (
APIENTRYP
 
	tPFNGLTEXIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLöà
	tb‹dî
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

10364 (
APIENTRYP
 
	tPFNGLTEXSUBIMAGE4DSGISPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLöt
 
	tÀvñ
, GLöà
	txoff£t
, GLöà
	tyoff£t
, GLöà
	tzoff£t
, GLöà
	twoff£t
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
, GLsizeò
	tsize4d
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tpixñs
);

10365 #ifde‡
GL_GLEXT_PROTOTYPES


10366 
GLAPI
 
APIENTRY
 
glTexImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLöà
b‹dî
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

10367 
GLAPI
 
APIENTRY
 
glTexSubImage4DSGIS
 (
GLíum
 
èrgë
, 
GLöt
 
Àvñ
, GLöà
xoff£t
, GLöà
yoff£t
, GLöà
zoff£t
, GLöà
woff£t
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLsizeò
size4d
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
pixñs
);

10371 #i‚de‡
GL_SGIS_ãxtuª_b‹dî_˛amp


10372 
	#GL_SGIS_ãxtuª_b‹dî_˛amp
 1

	)

10373 
	#GL_CLAMP_TO_BORDER_SGIS
 0x812D

	)

10376 #i‚de‡
GL_SGIS_ãxtuª_cﬁ‹_mask


10377 
	#GL_SGIS_ãxtuª_cﬁ‹_mask
 1

	)

10378 
	#GL_TEXTURE_COLOR_WRITEMASK_SGIS
 0x81EF

	)

10379 (
APIENTRYP
 
	tPFNGLTEXTURECOLORMASKSGISPROC
Ë(
	tGLboﬁón
 
	tªd
, GLboﬁó¿
	tgªí
, GLboﬁó¿
	tblue
, GLboﬁó¿
	tÆpha
);

10380 #ifde‡
GL_GLEXT_PROTOTYPES


10381 
GLAPI
 
APIENTRY
 
glTextuªCﬁ‹MaskSGIS
 (
GLboﬁón
 
ªd
, GLboﬁó¿
gªí
, GLboﬁó¿
blue
, GLboﬁó¿
Æpha
);

10385 #i‚de‡
GL_SGIS_ãxtuª_edge_˛amp


10386 
	#GL_SGIS_ãxtuª_edge_˛amp
 1

	)

10387 
	#GL_CLAMP_TO_EDGE_SGIS
 0x812F

	)

10390 #i‚de‡
GL_SGIS_ãxtuª_fûãr4


10391 
	#GL_SGIS_ãxtuª_fûãr4
 1

	)

10392 
	#GL_FILTER4_SGIS
 0x8146

	)

10393 
	#GL_TEXTURE_FILTER4_SIZE_SGIS
 0x8147

	)

10394 (
APIENTRYP
 
	tPFNGLGETTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLÊﬂt
 *
	tweights
);

10395 (
APIENTRYP
 
	tPFNGLTEXFILTERFUNCSGISPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tfûãr
, 
	tGLsizei
 
	tn
, c⁄° 
	tGLÊﬂt
 *
	tweights
);

10396 #ifde‡
GL_GLEXT_PROTOTYPES


10397 
GLAPI
 
APIENTRY
 
glGëTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLÊﬂt
 *
weights
);

10398 
GLAPI
 
APIENTRY
 
glTexFûãrFuncSGIS
 (
GLíum
 
èrgë
, GLíum 
fûãr
, 
GLsizei
 
n
, c⁄° 
GLÊﬂt
 *
weights
);

10402 #i‚de‡
GL_SGIS_ãxtuª_lod


10403 
	#GL_SGIS_ãxtuª_lod
 1

	)

10404 
	#GL_TEXTURE_MIN_LOD_SGIS
 0x813A

	)

10405 
	#GL_TEXTURE_MAX_LOD_SGIS
 0x813B

	)

10406 
	#GL_TEXTURE_BASE_LEVEL_SGIS
 0x813C

	)

10407 
	#GL_TEXTURE_MAX_LEVEL_SGIS
 0x813D

	)

10410 #i‚de‡
GL_SGIS_ãxtuª_£À˘


10411 
	#GL_SGIS_ãxtuª_£À˘
 1

	)

10412 
	#GL_DUAL_ALPHA4_SGIS
 0x8110

	)

10413 
	#GL_DUAL_ALPHA8_SGIS
 0x8111

	)

10414 
	#GL_DUAL_ALPHA12_SGIS
 0x8112

	)

10415 
	#GL_DUAL_ALPHA16_SGIS
 0x8113

	)

10416 
	#GL_DUAL_LUMINANCE4_SGIS
 0x8114

	)

10417 
	#GL_DUAL_LUMINANCE8_SGIS
 0x8115

	)

10418 
	#GL_DUAL_LUMINANCE12_SGIS
 0x8116

	)

10419 
	#GL_DUAL_LUMINANCE16_SGIS
 0x8117

	)

10420 
	#GL_DUAL_INTENSITY4_SGIS
 0x8118

	)

10421 
	#GL_DUAL_INTENSITY8_SGIS
 0x8119

	)

10422 
	#GL_DUAL_INTENSITY12_SGIS
 0x811A

	)

10423 
	#GL_DUAL_INTENSITY16_SGIS
 0x811B

	)

10424 
	#GL_DUAL_LUMINANCE_ALPHA4_SGIS
 0x811C

	)

10425 
	#GL_DUAL_LUMINANCE_ALPHA8_SGIS
 0x811D

	)

10426 
	#GL_QUAD_ALPHA4_SGIS
 0x811E

	)

10427 
	#GL_QUAD_ALPHA8_SGIS
 0x811F

	)

10428 
	#GL_QUAD_LUMINANCE4_SGIS
 0x8120

	)

10429 
	#GL_QUAD_LUMINANCE8_SGIS
 0x8121

	)

10430 
	#GL_QUAD_INTENSITY4_SGIS
 0x8122

	)

10431 
	#GL_QUAD_INTENSITY8_SGIS
 0x8123

	)

10432 
	#GL_DUAL_TEXTURE_SELECT_SGIS
 0x8124

	)

10433 
	#GL_QUAD_TEXTURE_SELECT_SGIS
 0x8125

	)

10436 #i‚de‡
GL_SGIX_async


10437 
	#GL_SGIX_async
 1

	)

10438 
	#GL_ASYNC_MARKER_SGIX
 0x8329

	)

10439 (
APIENTRYP
 
	tPFNGLASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

10440 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLFINISHASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

10441 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLASYNCSGIXPROC
Ë(
	tGLuöt
 *
	tm¨kîp
);

10442 
GLuöt
 (
	tAPIENTRYP
 
	tPFNGLGENASYNCMARKERSSGIXPROC
Ë(
	tGLsizei
 
	tønge
);

10443 (
APIENTRYP
 
	tPFNGLDELETEASYNCMARKERSSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
, 
	tGLsizei
 
	tønge
);

10444 
GLboﬁón
 (
	tAPIENTRYP
 
	tPFNGLISASYNCMARKERSGIXPROC
Ë(
	tGLuöt
 
	tm¨kî
);

10445 #ifde‡
GL_GLEXT_PROTOTYPES


10446 
GLAPI
 
APIENTRY
 
glAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

10447 
GLAPI
 
GLöt
 
APIENTRY
 
glFöishAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

10448 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlAsyncSGIX
 (
GLuöt
 *
m¨kîp
);

10449 
GLAPI
 
GLuöt
 
APIENTRY
 
glGíAsyncM¨kîsSGIX
 (
GLsizei
 
ønge
);

10450 
GLAPI
 
APIENTRY
 
glDñëeAsyncM¨kîsSGIX
 (
GLuöt
 
m¨kî
, 
GLsizei
 
ønge
);

10451 
GLAPI
 
GLboﬁón
 
APIENTRY
 
glIsAsyncM¨kîSGIX
 (
GLuöt
 
m¨kî
);

10455 #i‚de‡
GL_SGIX_async_hi°ogøm


10456 
	#GL_SGIX_async_hi°ogøm
 1

	)

10457 
	#GL_ASYNC_HISTOGRAM_SGIX
 0x832C

	)

10458 
	#GL_MAX_ASYNC_HISTOGRAM_SGIX
 0x832D

	)

10461 #i‚de‡
GL_SGIX_async_pixñ


10462 
	#GL_SGIX_async_pixñ
 1

	)

10463 
	#GL_ASYNC_TEX_IMAGE_SGIX
 0x835C

	)

10464 
	#GL_ASYNC_DRAW_PIXELS_SGIX
 0x835D

	)

10465 
	#GL_ASYNC_READ_PIXELS_SGIX
 0x835E

	)

10466 
	#GL_MAX_ASYNC_TEX_IMAGE_SGIX
 0x835F

	)

10467 
	#GL_MAX_ASYNC_DRAW_PIXELS_SGIX
 0x8360

	)

10468 
	#GL_MAX_ASYNC_READ_PIXELS_SGIX
 0x8361

	)

10471 #i‚de‡
GL_SGIX_bÀnd_Æpha_mömax


10472 
	#GL_SGIX_bÀnd_Æpha_mömax
 1

	)

10473 
	#GL_ALPHA_MIN_SGIX
 0x8320

	)

10474 
	#GL_ALPHA_MAX_SGIX
 0x8321

	)

10477 #i‚de‡
GL_SGIX_ˇŒigøphic_‰agmít


10478 
	#GL_SGIX_ˇŒigøphic_‰agmít
 1

	)

10479 
	#GL_CALLIGRAPHIC_FRAGMENT_SGIX
 0x8183

	)

10482 #i‚de‡
GL_SGIX_˛ùm≠


10483 
	#GL_SGIX_˛ùm≠
 1

	)

10484 
	#GL_LINEAR_CLIPMAP_LINEAR_SGIX
 0x8170

	)

10485 
	#GL_TEXTURE_CLIPMAP_CENTER_SGIX
 0x8171

	)

10486 
	#GL_TEXTURE_CLIPMAP_FRAME_SGIX
 0x8172

	)

10487 
	#GL_TEXTURE_CLIPMAP_OFFSET_SGIX
 0x8173

	)

10488 
	#GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8174

	)

10489 
	#GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX
 0x8175

	)

10490 
	#GL_TEXTURE_CLIPMAP_DEPTH_SGIX
 0x8176

	)

10491 
	#GL_MAX_CLIPMAP_DEPTH_SGIX
 0x8177

	)

10492 
	#GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX
 0x8178

	)

10493 
	#GL_NEAREST_CLIPMAP_NEAREST_SGIX
 0x844D

	)

10494 
	#GL_NEAREST_CLIPMAP_LINEAR_SGIX
 0x844E

	)

10495 
	#GL_LINEAR_CLIPMAP_NEAREST_SGIX
 0x844F

	)

10498 #i‚de‡
GL_SGIX_c⁄vﬁuti⁄_accuøcy


10499 
	#GL_SGIX_c⁄vﬁuti⁄_accuøcy
 1

	)

10500 
	#GL_CONVOLUTION_HINT_SGIX
 0x8316

	)

10503 #i‚de‡
GL_SGIX_dïth_∑ss_ö°rumít


10504 
	#GL_SGIX_dïth_∑ss_ö°rumít
 1

	)

10507 #i‚de‡
GL_SGIX_dïth_ãxtuª


10508 
	#GL_SGIX_dïth_ãxtuª
 1

	)

10509 
	#GL_DEPTH_COMPONENT16_SGIX
 0x81A5

	)

10510 
	#GL_DEPTH_COMPONENT24_SGIX
 0x81A6

	)

10511 
	#GL_DEPTH_COMPONENT32_SGIX
 0x81A7

	)

10514 #i‚de‡
GL_SGIX_Êush_ø°î


10515 
	#GL_SGIX_Êush_ø°î
 1

	)

10516 (
APIENTRYP
 
	tPFNGLFLUSHRASTERSGIXPROC
) ();

10517 #ifde‡
GL_GLEXT_PROTOTYPES


10518 
GLAPI
 
APIENTRY
 
glFlushRa°îSGIX
 ();

10522 #i‚de‡
GL_SGIX_fog_off£t


10523 
	#GL_SGIX_fog_off£t
 1

	)

10524 
	#GL_FOG_OFFSET_SGIX
 0x8198

	)

10525 
	#GL_FOG_OFFSET_VALUE_SGIX
 0x8199

	)

10528 #i‚de‡
GL_SGIX_‰agmít_lightög


10529 
	#GL_SGIX_‰agmít_lightög
 1

	)

10530 
	#GL_FRAGMENT_LIGHTING_SGIX
 0x8400

	)

10531 
	#GL_FRAGMENT_COLOR_MATERIAL_SGIX
 0x8401

	)

10532 
	#GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX
 0x8402

	)

10533 
	#GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX
 0x8403

	)

10534 
	#GL_MAX_FRAGMENT_LIGHTS_SGIX
 0x8404

	)

10535 
	#GL_MAX_ACTIVE_LIGHTS_SGIX
 0x8405

	)

10536 
	#GL_CURRENT_RASTER_NORMAL_SGIX
 0x8406

	)

10537 
	#GL_LIGHT_ENV_MODE_SGIX
 0x8407

	)

10538 
	#GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX
 0x8408

	)

10539 
	#GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX
 0x8409

	)

10540 
	#GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX
 0x840A

	)

10541 
	#GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX
 0x840B

	)

10542 
	#GL_FRAGMENT_LIGHT0_SGIX
 0x840C

	)

10543 
	#GL_FRAGMENT_LIGHT1_SGIX
 0x840D

	)

10544 
	#GL_FRAGMENT_LIGHT2_SGIX
 0x840E

	)

10545 
	#GL_FRAGMENT_LIGHT3_SGIX
 0x840F

	)

10546 
	#GL_FRAGMENT_LIGHT4_SGIX
 0x8410

	)

10547 
	#GL_FRAGMENT_LIGHT5_SGIX
 0x8411

	)

10548 
	#GL_FRAGMENT_LIGHT6_SGIX
 0x8412

	)

10549 
	#GL_FRAGMENT_LIGHT7_SGIX
 0x8413

	)

10550 (
APIENTRYP
 
	tPFNGLFRAGMENTCOLORMATERIALSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	tmode
);

10551 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10552 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10553 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTISGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10554 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10555 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10556 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10557 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10558 (
APIENTRYP
 
	tPFNGLFRAGMENTLIGHTMODELIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10559 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10560 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10561 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALISGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10562 (
APIENTRYP
 
	tPFNGLFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10563 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTFVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10564 (
APIENTRYP
 
	tPFNGLGETFRAGMENTLIGHTIVSGIXPROC
Ë(
	tGLíum
 
	tlight
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10565 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALFVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10566 (
APIENTRYP
 
	tPFNGLGETFRAGMENTMATERIALIVSGIXPROC
Ë(
	tGLíum
 
	tÁ˚
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10567 (
APIENTRYP
 
	tPFNGLLIGHTENVISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10568 #ifde‡
GL_GLEXT_PROTOTYPES


10569 
GLAPI
 
APIENTRY
 
glFøgmítCﬁ‹M©îülSGIX
 (
GLíum
 
Á˚
, GLíum 
mode
);

10570 
GLAPI
 
APIENTRY
 
glFøgmítLightfSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

10571 
GLAPI
 
APIENTRY
 
glFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10572 
GLAPI
 
APIENTRY
 
glFøgmítLightiSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

10573 
GLAPI
 
APIENTRY
 
glFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10574 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10575 
GLAPI
 
APIENTRY
 
glFøgmítLightModñfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10576 
GLAPI
 
APIENTRY
 
glFøgmítLightModñiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10577 
GLAPI
 
APIENTRY
 
glFøgmítLightModñivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10578 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 
∑øm
);

10579 
GLAPI
 
APIENTRY
 
glFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10580 
GLAPI
 
APIENTRY
 
glFøgmítM©îüliSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 
∑øm
);

10581 
GLAPI
 
APIENTRY
 
glFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10582 
GLAPI
 
APIENTRY
 
glGëFøgmítLightfvSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10583 
GLAPI
 
APIENTRY
 
glGëFøgmítLightivSGIX
 (
GLíum
 
light
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10584 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülfvSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10585 
GLAPI
 
APIENTRY
 
glGëFøgmítM©îülivSGIX
 (
GLíum
 
Á˚
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10586 
GLAPI
 
APIENTRY
 
glLightEnviSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10590 #i‚de‡
GL_SGIX_‰amezoom


10591 
	#GL_SGIX_‰amezoom
 1

	)

10592 
	#GL_FRAMEZOOM_SGIX
 0x818B

	)

10593 
	#GL_FRAMEZOOM_FACTOR_SGIX
 0x818C

	)

10594 
	#GL_MAX_FRAMEZOOM_FACTOR_SGIX
 0x818D

	)

10595 (
APIENTRYP
 
	tPFNGLFRAMEZOOMSGIXPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

10596 #ifde‡
GL_GLEXT_PROTOTYPES


10597 
GLAPI
 
APIENTRY
 
glFømeZoomSGIX
 (
GLöt
 
Á˘‹
);

10601 #i‚de‡
GL_SGIX_igloo_öãrÁ˚


10602 
	#GL_SGIX_igloo_öãrÁ˚
 1

	)

10603 (
APIENTRYP
 
	tPFNGLIGLOOINTERFACESGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° *
	t∑øms
);

10604 #ifde‡
GL_GLEXT_PROTOTYPES


10605 
GLAPI
 
APIENTRY
 
glIglooI¡îÁ˚SGIX
 (
GLíum
 
≤ame
, c⁄° *
∑øms
);

10609 #i‚de‡
GL_SGIX_ö°rumíts


10610 
	#GL_SGIX_ö°rumíts
 1

	)

10611 
	#GL_INSTRUMENT_BUFFER_POINTER_SGIX
 0x8180

	)

10612 
	#GL_INSTRUMENT_MEASUREMENTS_SGIX
 0x8181

	)

10613 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLGETINSTRUMENTSSGIXPROC
) ();

10614 (
APIENTRYP
 
	tPFNGLINSTRUMENTSBUFFERSGIXPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLöt
 *
	tbuf„r
);

10615 
GLöt
 (
	tAPIENTRYP
 
	tPFNGLPOLLINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 *
	tm¨kî_p
);

10616 (
APIENTRYP
 
	tPFNGLREADINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

10617 (
APIENTRYP
 
	tPFNGLSTARTINSTRUMENTSSGIXPROC
) ();

10618 (
APIENTRYP
 
	tPFNGLSTOPINSTRUMENTSSGIXPROC
Ë(
	tGLöt
 
	tm¨kî
);

10619 #ifde‡
GL_GLEXT_PROTOTYPES


10620 
GLAPI
 
GLöt
 
APIENTRY
 
glGëIn°rumítsSGIX
 ();

10621 
GLAPI
 
APIENTRY
 
glIn°rumítsBuf„rSGIX
 (
GLsizei
 
size
, 
GLöt
 *
buf„r
);

10622 
GLAPI
 
GLöt
 
APIENTRY
 
glPﬁlIn°rumítsSGIX
 (GLöà*
m¨kî_p
);

10623 
GLAPI
 
APIENTRY
 
glRódIn°rumítsSGIX
 (
GLöt
 
m¨kî
);

10624 
GLAPI
 
APIENTRY
 
glSèπIn°rumítsSGIX
 ();

10625 
GLAPI
 
APIENTRY
 
glSt›In°rumítsSGIX
 (
GLöt
 
m¨kî
);

10629 #i‚de‡
GL_SGIX_öãæa˚


10630 
	#GL_SGIX_öãæa˚
 1

	)

10631 
	#GL_INTERLACE_SGIX
 0x8094

	)

10634 #i‚de‡
GL_SGIX_ú_ö°rumít1


10635 
	#GL_SGIX_ú_ö°rumít1
 1

	)

10636 
	#GL_IR_INSTRUMENT1_SGIX
 0x817F

	)

10639 #i‚de‡
GL_SGIX_li°_¥i‹ôy


10640 
	#GL_SGIX_li°_¥i‹ôy
 1

	)

10641 
	#GL_LIST_PRIORITY_SGIX
 0x8182

	)

10642 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10643 (
APIENTRYP
 
	tPFNGLGETLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10644 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10645 (
APIENTRYP
 
	tPFNGLLISTPARAMETERFVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10646 (
APIENTRYP
 
	tPFNGLLISTPARAMETERISGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10647 (
APIENTRYP
 
	tPFNGLLISTPARAMETERIVSGIXPROC
Ë(
	tGLuöt
 
	tli°
, 
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10648 #ifde‡
GL_GLEXT_PROTOTYPES


10649 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10650 
GLAPI
 
APIENTRY
 
glGëLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 *
∑øms
);

10651 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10652 
GLAPI
 
APIENTRY
 
glLi°P¨amëîfvSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10653 
GLAPI
 
APIENTRY
 
glLi°P¨amëîiSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10654 
GLAPI
 
APIENTRY
 
glLi°P¨amëîivSGIX
 (
GLuöt
 
li°
, 
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10658 #i‚de‡
GL_SGIX_pixñ_ãxtuª


10659 
	#GL_SGIX_pixñ_ãxtuª
 1

	)

10660 
	#GL_PIXEL_TEX_GEN_SGIX
 0x8139

	)

10661 
	#GL_PIXEL_TEX_GEN_MODE_SGIX
 0x832B

	)

10662 (
APIENTRYP
 
	tPFNGLPIXELTEXGENSGIXPROC
Ë(
	tGLíum
 
	tmode
);

10663 #ifde‡
GL_GLEXT_PROTOTYPES


10664 
GLAPI
 
APIENTRY
 
glPixñTexGíSGIX
 (
GLíum
 
mode
);

10668 #i‚de‡
GL_SGIX_pixñ_tûes


10669 
	#GL_SGIX_pixñ_tûes
 1

	)

10670 
	#GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX
 0x813E

	)

10671 
	#GL_PIXEL_TILE_CACHE_INCREMENT_SGIX
 0x813F

	)

10672 
	#GL_PIXEL_TILE_WIDTH_SGIX
 0x8140

	)

10673 
	#GL_PIXEL_TILE_HEIGHT_SGIX
 0x8141

	)

10674 
	#GL_PIXEL_TILE_GRID_WIDTH_SGIX
 0x8142

	)

10675 
	#GL_PIXEL_TILE_GRID_HEIGHT_SGIX
 0x8143

	)

10676 
	#GL_PIXEL_TILE_GRID_DEPTH_SGIX
 0x8144

	)

10677 
	#GL_PIXEL_TILE_CACHE_SIZE_SGIX
 0x8145

	)

10680 #i‚de‡
GL_SGIX_pﬁynomül_ffd


10681 
	#GL_SGIX_pﬁynomül_ffd
 1

	)

10682 
	#GL_TEXTURE_DEFORMATION_BIT_SGIX
 0x00000001

	)

10683 
	#GL_GEOMETRY_DEFORMATION_BIT_SGIX
 0x00000002

	)

10684 
	#GL_GEOMETRY_DEFORMATION_SGIX
 0x8194

	)

10685 
	#GL_TEXTURE_DEFORMATION_SGIX
 0x8195

	)

10686 
	#GL_DEFORMATIONS_MASK_SGIX
 0x8196

	)

10687 
	#GL_MAX_DEFORMATION_ORDER_SGIX
 0x8197

	)

10688 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3DSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLdoubÀ
 
	tu1
, GLdoubÀ 
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLdoubÀ 
	tv1
, GLdoubÀ 
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLdoubÀ 
	tw1
, GLdoubÀ 
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLdoubÀ *
	tpoöts
);

10689 (
APIENTRYP
 
	tPFNGLDEFORMATIONMAP3FSGIXPROC
Ë(
	tGLíum
 
	tèrgë
, 
	tGLÊﬂt
 
	tu1
, GLÊﬂà
	tu2
, 
	tGLöt
 
	tu°ride
, GLöà
	tu‹dî
, GLÊﬂà
	tv1
, GLÊﬂà
	tv2
, GLöà
	tv°ride
, GLöà
	tv‹dî
, GLÊﬂà
	tw1
, GLÊﬂà
	tw2
, GLöà
	tw°ride
, GLöà
	tw‹dî
, c⁄° GLÊﬂà*
	tpoöts
);

10690 (
APIENTRYP
 
	tPFNGLDEFORMSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

10691 (
APIENTRYP
 
	tPFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC
Ë(
	tGLbôfõld
 
	tmask
);

10692 #ifde‡
GL_GLEXT_PROTOTYPES


10693 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3dSGIX
 (
GLíum
 
èrgë
, 
GLdoubÀ
 
u1
, GLdoubÀ 
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLdoubÀ 
v1
, GLdoubÀ 
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLdoubÀ 
w1
, GLdoubÀ 
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLdoubÀ *
poöts
);

10694 
GLAPI
 
APIENTRY
 
glDef‹m©i⁄M≠3fSGIX
 (
GLíum
 
èrgë
, 
GLÊﬂt
 
u1
, GLÊﬂà
u2
, 
GLöt
 
u°ride
, GLöà
u‹dî
, GLÊﬂà
v1
, GLÊﬂà
v2
, GLöà
v°ride
, GLöà
v‹dî
, GLÊﬂà
w1
, GLÊﬂà
w2
, GLöà
w°ride
, GLöà
w‹dî
, c⁄° GLÊﬂà*
poöts
);

10695 
GLAPI
 
APIENTRY
 
glDef‹mSGIX
 (
GLbôfõld
 
mask
);

10696 
GLAPI
 
APIENTRY
 
glLﬂdIdítôyDef‹m©i⁄M≠SGIX
 (
GLbôfõld
 
mask
);

10700 #i‚de‡
GL_SGIX_ª„ªn˚_∂™e


10701 
	#GL_SGIX_ª„ªn˚_∂™e
 1

	)

10702 
	#GL_REFERENCE_PLANE_SGIX
 0x817D

	)

10703 
	#GL_REFERENCE_PLANE_EQUATION_SGIX
 0x817E

	)

10704 (
APIENTRYP
 
	tPFNGLREFERENCEPLANESGIXPROC
Ë(c⁄° 
	tGLdoubÀ
 *
	tequ©i⁄
);

10705 #ifde‡
GL_GLEXT_PROTOTYPES


10706 
GLAPI
 
APIENTRY
 
glRe„ªn˚Pœ√SGIX
 (c⁄° 
GLdoubÀ
 *
equ©i⁄
);

10710 #i‚de‡
GL_SGIX_ªßm∂e


10711 
	#GL_SGIX_ªßm∂e
 1

	)

10712 
	#GL_PACK_RESAMPLE_SGIX
 0x842C

	)

10713 
	#GL_UNPACK_RESAMPLE_SGIX
 0x842D

	)

10714 
	#GL_RESAMPLE_REPLICATE_SGIX
 0x842E

	)

10715 
	#GL_RESAMPLE_ZERO_FILL_SGIX
 0x842F

	)

10716 
	#GL_RESAMPLE_DECIMATE_SGIX
 0x8430

	)

10719 #i‚de‡
GL_SGIX_sˇÀbüs_höt


10720 
	#GL_SGIX_sˇÀbüs_höt
 1

	)

10721 
	#GL_SCALEBIAS_HINT_SGIX
 0x8322

	)

10724 #i‚de‡
GL_SGIX_shadow


10725 
	#GL_SGIX_shadow
 1

	)

10726 
	#GL_TEXTURE_COMPARE_SGIX
 0x819A

	)

10727 
	#GL_TEXTURE_COMPARE_OPERATOR_SGIX
 0x819B

	)

10728 
	#GL_TEXTURE_LEQUAL_R_SGIX
 0x819C

	)

10729 
	#GL_TEXTURE_GEQUAL_R_SGIX
 0x819D

	)

10732 #i‚de‡
GL_SGIX_shadow_ambõ¡


10733 
	#GL_SGIX_shadow_ambõ¡
 1

	)

10734 
	#GL_SHADOW_AMBIENT_SGIX
 0x80BF

	)

10737 #i‚de‡
GL_SGIX_•rôe


10738 
	#GL_SGIX_•rôe
 1

	)

10739 
	#GL_SPRITE_SGIX
 0x8148

	)

10740 
	#GL_SPRITE_MODE_SGIX
 0x8149

	)

10741 
	#GL_SPRITE_AXIS_SGIX
 0x814A

	)

10742 
	#GL_SPRITE_TRANSLATION_SGIX
 0x814B

	)

10743 
	#GL_SPRITE_AXIAL_SGIX
 0x814C

	)

10744 
	#GL_SPRITE_OBJECT_ALIGNED_SGIX
 0x814D

	)

10745 
	#GL_SPRITE_EYE_ALIGNED_SGIX
 0x814E

	)

10746 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLÊﬂt
 
	t∑øm
);

10747 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERFVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10748 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERISGIXPROC
Ë(
	tGLíum
 
	t≤ame
, 
	tGLöt
 
	t∑øm
);

10749 (
APIENTRYP
 
	tPFNGLSPRITEPARAMETERIVSGIXPROC
Ë(
	tGLíum
 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10750 #ifde‡
GL_GLEXT_PROTOTYPES


10751 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfSGIX
 (
GLíum
 
≤ame
, 
GLÊﬂt
 
∑øm
);

10752 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîfvSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10753 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîiSGIX
 (
GLíum
 
≤ame
, 
GLöt
 
∑øm
);

10754 
GLAPI
 
APIENTRY
 
glS¥ôeP¨amëîivSGIX
 (
GLíum
 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10758 #i‚de‡
GL_SGIX_subßm∂e


10759 
	#GL_SGIX_subßm∂e
 1

	)

10760 
	#GL_PACK_SUBSAMPLE_RATE_SGIX
 0x85A0

	)

10761 
	#GL_UNPACK_SUBSAMPLE_RATE_SGIX
 0x85A1

	)

10762 
	#GL_PIXEL_SUBSAMPLE_4444_SGIX
 0x85A2

	)

10763 
	#GL_PIXEL_SUBSAMPLE_2424_SGIX
 0x85A3

	)

10764 
	#GL_PIXEL_SUBSAMPLE_4242_SGIX
 0x85A4

	)

10767 #i‚de‡
GL_SGIX_èg_ßm∂e_buf„r


10768 
	#GL_SGIX_èg_ßm∂e_buf„r
 1

	)

10769 (
APIENTRYP
 
	tPFNGLTAGSAMPLEBUFFERSGIXPROC
) ();

10770 #ifde‡
GL_GLEXT_PROTOTYPES


10771 
GLAPI
 
APIENTRY
 
glTagSam∂eBuf„rSGIX
 ();

10775 #i‚de‡
GL_SGIX_ãxtuª_add_ív


10776 
	#GL_SGIX_ãxtuª_add_ív
 1

	)

10777 
	#GL_TEXTURE_ENV_BIAS_SGIX
 0x80BE

	)

10780 #i‚de‡
GL_SGIX_ãxtuª_co‹dö©e_˛amp


10781 
	#GL_SGIX_ãxtuª_co‹dö©e_˛amp
 1

	)

10782 
	#GL_TEXTURE_MAX_CLAMP_S_SGIX
 0x8369

	)

10783 
	#GL_TEXTURE_MAX_CLAMP_T_SGIX
 0x836A

	)

10784 
	#GL_TEXTURE_MAX_CLAMP_R_SGIX
 0x836B

	)

10787 #i‚de‡
GL_SGIX_ãxtuª_lod_büs


10788 
	#GL_SGIX_ãxtuª_lod_büs
 1

	)

10789 
	#GL_TEXTURE_LOD_BIAS_S_SGIX
 0x818E

	)

10790 
	#GL_TEXTURE_LOD_BIAS_T_SGIX
 0x818F

	)

10791 
	#GL_TEXTURE_LOD_BIAS_R_SGIX
 0x8190

	)

10794 #i‚de‡
GL_SGIX_ãxtuª_mu…i_buf„r


10795 
	#GL_SGIX_ãxtuª_mu…i_buf„r
 1

	)

10796 
	#GL_TEXTURE_MULTI_BUFFER_HINT_SGIX
 0x812E

	)

10799 #i‚de‡
GL_SGIX_ãxtuª_sˇÀ_büs


10800 
	#GL_SGIX_ãxtuª_sˇÀ_büs
 1

	)

10801 
	#GL_POST_TEXTURE_FILTER_BIAS_SGIX
 0x8179

	)

10802 
	#GL_POST_TEXTURE_FILTER_SCALE_SGIX
 0x817A

	)

10803 
	#GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX
 0x817B

	)

10804 
	#GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX
 0x817C

	)

10807 #i‚de‡
GL_SGIX_vîãx_¥e˛ù


10808 
	#GL_SGIX_vîãx_¥e˛ù
 1

	)

10809 
	#GL_VERTEX_PRECLIP_SGIX
 0x83EE

	)

10810 
	#GL_VERTEX_PRECLIP_HINT_SGIX
 0x83EF

	)

10813 #i‚de‡
GL_SGIX_y¸cb


10814 
	#GL_SGIX_y¸cb
 1

	)

10815 
	#GL_YCRCB_422_SGIX
 0x81BB

	)

10816 
	#GL_YCRCB_444_SGIX
 0x81BC

	)

10819 #i‚de‡
GL_SGIX_y¸cb_subßm∂e


10820 
	#GL_SGIX_y¸cb_subßm∂e
 1

	)

10823 #i‚de‡
GL_SGIX_y¸cba


10824 
	#GL_SGIX_y¸cba
 1

	)

10825 
	#GL_YCRCB_SGIX
 0x8318

	)

10826 
	#GL_YCRCBA_SGIX
 0x8319

	)

10829 #i‚de‡
GL_SGI_cﬁ‹_m©rix


10830 
	#GL_SGI_cﬁ‹_m©rix
 1

	)

10831 
	#GL_COLOR_MATRIX_SGI
 0x80B1

	)

10832 
	#GL_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B2

	)

10833 
	#GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI
 0x80B3

	)

10834 
	#GL_POST_COLOR_MATRIX_RED_SCALE_SGI
 0x80B4

	)

10835 
	#GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI
 0x80B5

	)

10836 
	#GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI
 0x80B6

	)

10837 
	#GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI
 0x80B7

	)

10838 
	#GL_POST_COLOR_MATRIX_RED_BIAS_SGI
 0x80B8

	)

10839 
	#GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI
 0x80B9

	)

10840 
	#GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI
 0x80BA

	)

10841 
	#GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI
 0x80BB

	)

10844 #i‚de‡
GL_SGI_cﬁ‹_èbÀ


10845 
	#GL_SGI_cﬁ‹_èbÀ
 1

	)

10846 
	#GL_COLOR_TABLE_SGI
 0x80D0

	)

10847 
	#GL_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D1

	)

10848 
	#GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D2

	)

10849 
	#GL_PROXY_COLOR_TABLE_SGI
 0x80D3

	)

10850 
	#GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI
 0x80D4

	)

10851 
	#GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI
 0x80D5

	)

10852 
	#GL_COLOR_TABLE_SCALE_SGI
 0x80D6

	)

10853 
	#GL_COLOR_TABLE_BIAS_SGI
 0x80D7

	)

10854 
	#GL_COLOR_TABLE_FORMAT_SGI
 0x80D8

	)

10855 
	#GL_COLOR_TABLE_WIDTH_SGI
 0x80D9

	)

10856 
	#GL_COLOR_TABLE_RED_SIZE_SGI
 0x80DA

	)

10857 
	#GL_COLOR_TABLE_GREEN_SIZE_SGI
 0x80DB

	)

10858 
	#GL_COLOR_TABLE_BLUE_SIZE_SGI
 0x80DC

	)

10859 
	#GL_COLOR_TABLE_ALPHA_SIZE_SGI
 0x80DD

	)

10860 
	#GL_COLOR_TABLE_LUMINANCE_SIZE_SGI
 0x80DE

	)

10861 
	#GL_COLOR_TABLE_INTENSITY_SIZE_SGI
 0x80DF

	)

10862 (
APIENTRYP
 
	tPFNGLCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLsizei
 
	twidth
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, c⁄° *
	tèbÀ
);

10863 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLÊﬂt
 *
	t∑øms
);

10864 (
APIENTRYP
 
	tPFNGLCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, c⁄° 
	tGLöt
 *
	t∑øms
);

10865 (
APIENTRYP
 
	tPFNGLCOPYCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	töã∫Æf‹m©
, 
	tGLöt
 
	tx
, GLöà
	ty
, 
	tGLsizei
 
	twidth
);

10866 (
APIENTRYP
 
	tPFNGLGETCOLORTABLESGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	tf‹m©
, GLíum 
	tty≥
, *
	tèbÀ
);

10867 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERFVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLÊﬂt
 *
	t∑øms
);

10868 (
APIENTRYP
 
	tPFNGLGETCOLORTABLEPARAMETERIVSGIPROC
Ë(
	tGLíum
 
	tèrgë
, GLíum 
	t≤ame
, 
	tGLöt
 *
	t∑øms
);

10869 #ifde‡
GL_GLEXT_PROTOTYPES


10870 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
èbÀ
);

10871 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLÊﬂt
 *
∑øms
);

10872 
GLAPI
 
APIENTRY
 
glCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, c⁄° 
GLöt
 *
∑øms
);

10873 
GLAPI
 
APIENTRY
 
glC›yCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
öã∫Æf‹m©
, 
GLöt
 
x
, GLöà
y
, 
GLsizei
 
width
);

10874 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀSGI
 (
GLíum
 
èrgë
, GLíum 
f‹m©
, GLíum 
ty≥
, *
èbÀ
);

10875 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîfvSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLÊﬂt
 *
∑øms
);

10876 
GLAPI
 
APIENTRY
 
glGëCﬁ‹TabÀP¨amëîivSGI
 (
GLíum
 
èrgë
, GLíum 
≤ame
, 
GLöt
 *
∑øms
);

10880 #i‚de‡
GL_SGI_ãxtuª_cﬁ‹_èbÀ


10881 
	#GL_SGI_ãxtuª_cﬁ‹_èbÀ
 1

	)

10882 
	#GL_TEXTURE_COLOR_TABLE_SGI
 0x80BC

	)

10883 
	#GL_PROXY_TEXTURE_COLOR_TABLE_SGI
 0x80BD

	)

10886 #i‚de‡
GL_SUNX_c⁄°™t_d©a


10887 
	#GL_SUNX_c⁄°™t_d©a
 1

	)

10888 
	#GL_UNPACK_CONSTANT_DATA_SUNX
 0x81D5

	)

10889 
	#GL_TEXTURE_CONSTANT_DATA_SUNX
 0x81D6

	)

10890 (
APIENTRYP
 
	tPFNGLFINISHTEXTURESUNXPROC
) ();

10891 #ifde‡
GL_GLEXT_PROTOTYPES


10892 
GLAPI
 
APIENTRY
 
glFöishTextuªSUNX
 ();

10896 #i‚de‡
GL_SUN_c⁄vﬁuti⁄_b‹dî_modes


10897 
	#GL_SUN_c⁄vﬁuti⁄_b‹dî_modes
 1

	)

10898 
	#GL_WRAP_BORDER_SUN
 0x81D4

	)

10901 #i‚de‡
GL_SUN_globÆ_Æpha


10902 
	#GL_SUN_globÆ_Æpha
 1

	)

10903 
	#GL_GLOBAL_ALPHA_SUN
 0x81D9

	)

10904 
	#GL_GLOBAL_ALPHA_FACTOR_SUN
 0x81DA

	)

10905 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORBSUNPROC
Ë(
	tGLbyã
 
	tÁ˘‹
);

10906 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORSSUNPROC
Ë(
	tGLsh‹t
 
	tÁ˘‹
);

10907 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORISUNPROC
Ë(
	tGLöt
 
	tÁ˘‹
);

10908 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORFSUNPROC
Ë(
	tGLÊﬂt
 
	tÁ˘‹
);

10909 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORDSUNPROC
Ë(
	tGLdoubÀ
 
	tÁ˘‹
);

10910 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUBSUNPROC
Ë(
	tGLubyã
 
	tÁ˘‹
);

10911 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUSSUNPROC
Ë(
	tGLush‹t
 
	tÁ˘‹
);

10912 (
APIENTRYP
 
	tPFNGLGLOBALALPHAFACTORUISUNPROC
Ë(
	tGLuöt
 
	tÁ˘‹
);

10913 #ifde‡
GL_GLEXT_PROTOTYPES


10914 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹bSUN
 (
GLbyã
 
Á˘‹
);

10915 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹sSUN
 (
GLsh‹t
 
Á˘‹
);

10916 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹iSUN
 (
GLöt
 
Á˘‹
);

10917 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹fSUN
 (
GLÊﬂt
 
Á˘‹
);

10918 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹dSUN
 (
GLdoubÀ
 
Á˘‹
);

10919 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹ubSUN
 (
GLubyã
 
Á˘‹
);

10920 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹usSUN
 (
GLush‹t
 
Á˘‹
);

10921 
GLAPI
 
APIENTRY
 
glGlobÆAÕhaFa˘‹uiSUN
 (
GLuöt
 
Á˘‹
);

10925 #i‚de‡
GL_SUN_mesh_¨øy


10926 
	#GL_SUN_mesh_¨øy
 1

	)

10927 
	#GL_QUAD_MESH_SUN
 0x8614

	)

10928 
	#GL_TRIANGLE_MESH_SUN
 0x8615

	)

10929 (
APIENTRYP
 
	tPFNGLDRAWMESHARRAYSSUNPROC
Ë(
	tGLíum
 
	tmode
, 
	tGLöt
 
	tfú°
, 
	tGLsizei
 
	tcou¡
, GLsizeò
	twidth
);

10930 #ifde‡
GL_GLEXT_PROTOTYPES


10931 
GLAPI
 
APIENTRY
 
glDøwMeshAºaysSUN
 (
GLíum
 
mode
, 
GLöt
 
fú°
, 
GLsizei
 
cou¡
, GLsizeò
width
);

10935 #i‚de‡
GL_SUN_¶i˚_accum


10936 
	#GL_SUN_¶i˚_accum
 1

	)

10937 
	#GL_SLICE_ACCUM_SUN
 0x85CC

	)

10940 #i‚de‡
GL_SUN_åüngÀ_li°


10941 
	#GL_SUN_åüngÀ_li°
 1

	)

10942 
	#GL_RESTART_SUN
 0x0001

	)

10943 
	#GL_REPLACE_MIDDLE_SUN
 0x0002

	)

10944 
	#GL_REPLACE_OLDEST_SUN
 0x0003

	)

10945 
	#GL_TRIANGLE_LIST_SUN
 0x81D7

	)

10946 
	#GL_REPLACEMENT_CODE_SUN
 0x81D8

	)

10947 
	#GL_REPLACEMENT_CODE_ARRAY_SUN
 0x85C0

	)

10948 
	#GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN
 0x85C1

	)

10949 
	#GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN
 0x85C2

	)

10950 
	#GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN
 0x85C3

	)

10951 
	#GL_R1UI_V3F_SUN
 0x85C4

	)

10952 
	#GL_R1UI_C4UB_V3F_SUN
 0x85C5

	)

10953 
	#GL_R1UI_C3F_V3F_SUN
 0x85C6

	)

10954 
	#GL_R1UI_N3F_V3F_SUN
 0x85C7

	)

10955 
	#GL_R1UI_C4F_N3F_V3F_SUN
 0x85C8

	)

10956 
	#GL_R1UI_T2F_V3F_SUN
 0x85C9

	)

10957 
	#GL_R1UI_T2F_N3F_V3F_SUN
 0x85CA

	)

10958 
	#GL_R1UI_T2F_C4F_N3F_V3F_SUN
 0x85CB

	)

10959 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUISUNPROC
Ë(
	tGLuöt
 
	tcode
);

10960 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSSUNPROC
Ë(
	tGLush‹t
 
	tcode
);

10961 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBSUNPROC
Ë(
	tGLubyã
 
	tcode
);

10962 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	tcode
);

10963 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUSVSUNPROC
Ë(c⁄° 
	tGLush‹t
 *
	tcode
);

10964 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUBVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tcode
);

10965 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEPOINTERSUNPROC
Ë(
	tGLíum
 
	tty≥
, 
	tGLsizei
 
	t°ride
, c⁄° **
	tpoöãr
);

10966 #ifde‡
GL_GLEXT_PROTOTYPES


10967 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiSUN
 (
GLuöt
 
code
);

10968 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusSUN
 (
GLush‹t
 
code
);

10969 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubSUN
 (
GLubyã
 
code
);

10970 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuivSUN
 (c⁄° 
GLuöt
 *
code
);

10971 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeusvSUN
 (c⁄° 
GLush‹t
 *
code
);

10972 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeubvSUN
 (c⁄° 
GLubyã
 *
code
);

10973 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodePoöãrSUN
 (
GLíum
 
ty≥
, 
GLsizei
 
°ride
, c⁄° **
poöãr
);

10977 #i‚de‡
GL_SUN_vîãx


10978 
	#GL_SUN_vîãx
 1

	)

10979 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
);

10980 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX2FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10981 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10982 (
APIENTRYP
 
	tPFNGLCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

10983 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10984 (
APIENTRYP
 
	tPFNGLCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

10985 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10986 (
APIENTRYP
 
	tPFNGLNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

10987 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10988 (
APIENTRYP
 
	tPFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

10989 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10990 (
APIENTRYP
 
	tPFNGLTEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

10991 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

10992 (
APIENTRYP
 
	tPFNGLTEXCOORD4FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

10993 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10994 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

10995 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10996 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tv
);

10997 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

10998 (
APIENTRYP
 
	tPFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

10999 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11000 (
APIENTRYP
 
	tPFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11001 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC
Ë(
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tp
, GLÊﬂà
	tq
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
, GLÊﬂà
	tw
);

11002 (
APIENTRYP
 
	tPFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC
Ë(c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11003 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11004 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

11005 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLubyã
 
	tr
, GLubyã 
	tg
, GLubyã 
	tb
, GLubyã 
	ta
, 
	tGLÊﬂt
 
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11006 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLubyã
 *
	tc
, c⁄° 
	tGLÊﬂt
 *
	tv
);

11007 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11008 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tv
);

11009 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11010 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tn
, c⁄° GLÊﬂà*
	tv
);

11011 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11012 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11013 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11014 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tv
);

11015 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11016 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11017 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC
Ë(
	tGLuöt
 
	trc
, 
	tGLÊﬂt
 
	ts
, GLÊﬂà
	tt
, GLÊﬂà
	tr
, GLÊﬂà
	tg
, GLÊﬂà
	tb
, GLÊﬂà
	ta
, GLÊﬂà
	tnx
, GLÊﬂà
	tny
, GLÊﬂà
	tnz
, GLÊﬂà
	tx
, GLÊﬂà
	ty
, GLÊﬂà
	tz
);

11018 (
APIENTRYP
 
	tPFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC
Ë(c⁄° 
	tGLuöt
 *
	trc
, c⁄° 
	tGLÊﬂt
 *
	ttc
, c⁄° GLÊﬂà*
	tc
, c⁄° GLÊﬂà*
	tn
, c⁄° GLÊﬂà*
	tv
);

11019 #ifde‡
GL_GLEXT_PROTOTYPES


11020 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
);

11021 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx2fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

11022 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fSUN
 (
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11023 
GLAPI
 
APIENTRY
 
glCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

11024 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11025 
GLAPI
 
APIENTRY
 
glCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

11026 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11027 
GLAPI
 
APIENTRY
 
glN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

11028 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11029 
GLAPI
 
APIENTRY
 
glCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11030 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11031 
GLAPI
 
APIENTRY
 
glTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

11032 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

11033 
GLAPI
 
APIENTRY
 
glTexCo‹d4fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

11034 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11035 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° 
GLubyã
 *
c
, c⁄° GLÊﬂà*
v
);

11036 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11037 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
v
);

11038 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11039 
GLAPI
 
APIENTRY
 
glTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11040 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11041 
GLAPI
 
APIENTRY
 
glTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11042 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fSUN
 (
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
p
, GLÊﬂà
q
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
, GLÊﬂà
w
);

11043 
GLAPI
 
APIENTRY
 
glTexCo‹d4fCﬁ‹4fN‹mÆ3fVîãx4fvSUN
 (c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11044 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11045 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
v
);

11046 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fSUN
 (
GLuöt
 
rc
, 
GLubyã
 
r
, GLubyã 
g
, GLubyã 
b
, GLubyã 
a
, 
GLÊﬂt
 
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11047 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4ubVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLubyã
 *
c
, c⁄° 
GLÊﬂt
 *
v
);

11048 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11049 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
v
);

11050 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11051 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
n
, c⁄° GLÊﬂà*
v
);

11052 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11053 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11054 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11055 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
v
);

11056 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11057 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11058 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fSUN
 (
GLuöt
 
rc
, 
GLÊﬂt
 
s
, GLÊﬂà
t
, GLÊﬂà
r
, GLÊﬂà
g
, GLÊﬂà
b
, GLÊﬂà
a
, GLÊﬂà
nx
, GLÊﬂà
ny
, GLÊﬂà
nz
, GLÊﬂà
x
, GLÊﬂà
y
, GLÊﬂà
z
);

11059 
GLAPI
 
APIENTRY
 
glRïœ˚mítCodeuiTexCo‹d2fCﬁ‹4fN‹mÆ3fVîãx3fvSUN
 (c⁄° 
GLuöt
 *
rc
, c⁄° 
GLÊﬂt
 *
tc
, c⁄° GLÊﬂà*
c
, c⁄° GLÊﬂà*
n
, c⁄° GLÊﬂà*
v
);

11063 #i‚de‡
GL_WIN_ph⁄g_shadög


11064 
	#GL_WIN_ph⁄g_shadög
 1

	)

11065 
	#GL_PHONG_WIN
 0x80EA

	)

11066 
	#GL_PHONG_HINT_WIN
 0x80EB

	)

11069 #i‚de‡
GL_WIN_•ecuœr_fog


11070 
	#GL_WIN_•ecuœr_fog
 1

	)

11071 
	#GL_FOG_SPECULAR_TEXTURE_WIN
 0x80EC

	)

11074 #ifde‡
__˝lu•lus


	@/usr/include/GL/glu.h

31 #i‚de‡
__glu_h__


32 
	#__glu_h__


	)

34 #i‡
deföed
(
USE_MGL_NAMESPACE
)

35 
	~"glu_m™gÀ.h
"

38 
	~<GL/gl.h
>

40 #i‚de‡
GLAPIENTRY


41 #i‡
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)

42 
	#GLAPIENTRY
 
__°dˇŒ


	)

44 
	#GLAPIENTRY


	)

48 #i‚de‡
GLAPIENTRYP


49 
	#GLAPIENTRYP
 
GLAPIENTRY
 *

	)

52 #i‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
BUILD_GLU32
)

53 #unde‡
GLAPI


54 
	#GLAPI
 
	`__de˛•ec
(
dŒexp‹t
)

	)

55 #ñi‡(
deföed
(
_MSC_VER
Ë|| deföed(
__MINGW32__
)Ë&& deföed(
_DLL
)

57 #unde‡
GLAPI


58 
	#GLAPI
 
	`__de˛•ec
(
dŒimp‹t
)

	)

59 #ñi‡!
deföed
(
GLAPI
)

61 
	#GLAPI
 

	)

64 #ifde‡
__˝lu•lus


71 
	#GLU_EXT_obje˘_•a˚_ãss
 1

	)

72 
	#GLU_EXT_nurbs_ãs£Œ©‹
 1

	)

75 
	#GLU_FALSE
 0

	)

76 
	#GLU_TRUE
 1

	)

79 
	#GLU_VERSION_1_1
 1

	)

80 
	#GLU_VERSION_1_2
 1

	)

81 
	#GLU_VERSION_1_3
 1

	)

84 
	#GLU_VERSION
 100800

	)

85 
	#GLU_EXTENSIONS
 100801

	)

88 
	#GLU_INVALID_ENUM
 100900

	)

89 
	#GLU_INVALID_VALUE
 100901

	)

90 
	#GLU_OUT_OF_MEMORY
 100902

	)

91 
	#GLU_INCOMPATIBLE_GL_VERSION
 100903

	)

92 
	#GLU_INVALID_OPERATION
 100904

	)

96 
	#GLU_OUTLINE_POLYGON
 100240

	)

97 
	#GLU_OUTLINE_PATCH
 100241

	)

100 
	#GLU_NURBS_ERROR
 100103

	)

101 
	#GLU_ERROR
 100103

	)

102 
	#GLU_NURBS_BEGIN
 100164

	)

103 
	#GLU_NURBS_BEGIN_EXT
 100164

	)

104 
	#GLU_NURBS_VERTEX
 100165

	)

105 
	#GLU_NURBS_VERTEX_EXT
 100165

	)

106 
	#GLU_NURBS_NORMAL
 100166

	)

107 
	#GLU_NURBS_NORMAL_EXT
 100166

	)

108 
	#GLU_NURBS_COLOR
 100167

	)

109 
	#GLU_NURBS_COLOR_EXT
 100167

	)

110 
	#GLU_NURBS_TEXTURE_COORD
 100168

	)

111 
	#GLU_NURBS_TEX_COORD_EXT
 100168

	)

112 
	#GLU_NURBS_END
 100169

	)

113 
	#GLU_NURBS_END_EXT
 100169

	)

114 
	#GLU_NURBS_BEGIN_DATA
 100170

	)

115 
	#GLU_NURBS_BEGIN_DATA_EXT
 100170

	)

116 
	#GLU_NURBS_VERTEX_DATA
 100171

	)

117 
	#GLU_NURBS_VERTEX_DATA_EXT
 100171

	)

118 
	#GLU_NURBS_NORMAL_DATA
 100172

	)

119 
	#GLU_NURBS_NORMAL_DATA_EXT
 100172

	)

120 
	#GLU_NURBS_COLOR_DATA
 100173

	)

121 
	#GLU_NURBS_COLOR_DATA_EXT
 100173

	)

122 
	#GLU_NURBS_TEXTURE_COORD_DATA
 100174

	)

123 
	#GLU_NURBS_TEX_COORD_DATA_EXT
 100174

	)

124 
	#GLU_NURBS_END_DATA
 100175

	)

125 
	#GLU_NURBS_END_DATA_EXT
 100175

	)

128 
	#GLU_NURBS_ERROR1
 100251

	)

129 
	#GLU_NURBS_ERROR2
 100252

	)

130 
	#GLU_NURBS_ERROR3
 100253

	)

131 
	#GLU_NURBS_ERROR4
 100254

	)

132 
	#GLU_NURBS_ERROR5
 100255

	)

133 
	#GLU_NURBS_ERROR6
 100256

	)

134 
	#GLU_NURBS_ERROR7
 100257

	)

135 
	#GLU_NURBS_ERROR8
 100258

	)

136 
	#GLU_NURBS_ERROR9
 100259

	)

137 
	#GLU_NURBS_ERROR10
 100260

	)

138 
	#GLU_NURBS_ERROR11
 100261

	)

139 
	#GLU_NURBS_ERROR12
 100262

	)

140 
	#GLU_NURBS_ERROR13
 100263

	)

141 
	#GLU_NURBS_ERROR14
 100264

	)

142 
	#GLU_NURBS_ERROR15
 100265

	)

143 
	#GLU_NURBS_ERROR16
 100266

	)

144 
	#GLU_NURBS_ERROR17
 100267

	)

145 
	#GLU_NURBS_ERROR18
 100268

	)

146 
	#GLU_NURBS_ERROR19
 100269

	)

147 
	#GLU_NURBS_ERROR20
 100270

	)

148 
	#GLU_NURBS_ERROR21
 100271

	)

149 
	#GLU_NURBS_ERROR22
 100272

	)

150 
	#GLU_NURBS_ERROR23
 100273

	)

151 
	#GLU_NURBS_ERROR24
 100274

	)

152 
	#GLU_NURBS_ERROR25
 100275

	)

153 
	#GLU_NURBS_ERROR26
 100276

	)

154 
	#GLU_NURBS_ERROR27
 100277

	)

155 
	#GLU_NURBS_ERROR28
 100278

	)

156 
	#GLU_NURBS_ERROR29
 100279

	)

157 
	#GLU_NURBS_ERROR30
 100280

	)

158 
	#GLU_NURBS_ERROR31
 100281

	)

159 
	#GLU_NURBS_ERROR32
 100282

	)

160 
	#GLU_NURBS_ERROR33
 100283

	)

161 
	#GLU_NURBS_ERROR34
 100284

	)

162 
	#GLU_NURBS_ERROR35
 100285

	)

163 
	#GLU_NURBS_ERROR36
 100286

	)

164 
	#GLU_NURBS_ERROR37
 100287

	)

167 
	#GLU_AUTO_LOAD_MATRIX
 100200

	)

168 
	#GLU_CULLING
 100201

	)

169 
	#GLU_SAMPLING_TOLERANCE
 100203

	)

170 
	#GLU_DISPLAY_MODE
 100204

	)

171 
	#GLU_PARAMETRIC_TOLERANCE
 100202

	)

172 
	#GLU_SAMPLING_METHOD
 100205

	)

173 
	#GLU_U_STEP
 100206

	)

174 
	#GLU_V_STEP
 100207

	)

175 
	#GLU_NURBS_MODE
 100160

	)

176 
	#GLU_NURBS_MODE_EXT
 100160

	)

177 
	#GLU_NURBS_TESSELLATOR
 100161

	)

178 
	#GLU_NURBS_TESSELLATOR_EXT
 100161

	)

179 
	#GLU_NURBS_RENDERER
 100162

	)

180 
	#GLU_NURBS_RENDERER_EXT
 100162

	)

183 
	#GLU_OBJECT_PARAMETRIC_ERROR
 100208

	)

184 
	#GLU_OBJECT_PARAMETRIC_ERROR_EXT
 100208

	)

185 
	#GLU_OBJECT_PATH_LENGTH
 100209

	)

186 
	#GLU_OBJECT_PATH_LENGTH_EXT
 100209

	)

187 
	#GLU_PATH_LENGTH
 100215

	)

188 
	#GLU_PARAMETRIC_ERROR
 100216

	)

189 
	#GLU_DOMAIN_DISTANCE
 100217

	)

192 
	#GLU_MAP1_TRIM_2
 100210

	)

193 
	#GLU_MAP1_TRIM_3
 100211

	)

196 
	#GLU_POINT
 100010

	)

197 
	#GLU_LINE
 100011

	)

198 
	#GLU_FILL
 100012

	)

199 
	#GLU_SILHOUETTE
 100013

	)

205 
	#GLU_SMOOTH
 100000

	)

206 
	#GLU_FLAT
 100001

	)

207 
	#GLU_NONE
 100002

	)

210 
	#GLU_OUTSIDE
 100020

	)

211 
	#GLU_INSIDE
 100021

	)

214 
	#GLU_TESS_BEGIN
 100100

	)

215 
	#GLU_BEGIN
 100100

	)

216 
	#GLU_TESS_VERTEX
 100101

	)

217 
	#GLU_VERTEX
 100101

	)

218 
	#GLU_TESS_END
 100102

	)

219 
	#GLU_END
 100102

	)

220 
	#GLU_TESS_ERROR
 100103

	)

221 
	#GLU_TESS_EDGE_FLAG
 100104

	)

222 
	#GLU_EDGE_FLAG
 100104

	)

223 
	#GLU_TESS_COMBINE
 100105

	)

224 
	#GLU_TESS_BEGIN_DATA
 100106

	)

225 
	#GLU_TESS_VERTEX_DATA
 100107

	)

226 
	#GLU_TESS_END_DATA
 100108

	)

227 
	#GLU_TESS_ERROR_DATA
 100109

	)

228 
	#GLU_TESS_EDGE_FLAG_DATA
 100110

	)

229 
	#GLU_TESS_COMBINE_DATA
 100111

	)

232 
	#GLU_CW
 100120

	)

233 
	#GLU_CCW
 100121

	)

234 
	#GLU_INTERIOR
 100122

	)

235 
	#GLU_EXTERIOR
 100123

	)

236 
	#GLU_UNKNOWN
 100124

	)

239 
	#GLU_TESS_WINDING_RULE
 100140

	)

240 
	#GLU_TESS_BOUNDARY_ONLY
 100141

	)

241 
	#GLU_TESS_TOLERANCE
 100142

	)

244 
	#GLU_TESS_ERROR1
 100151

	)

245 
	#GLU_TESS_ERROR2
 100152

	)

246 
	#GLU_TESS_ERROR3
 100153

	)

247 
	#GLU_TESS_ERROR4
 100154

	)

248 
	#GLU_TESS_ERROR5
 100155

	)

249 
	#GLU_TESS_ERROR6
 100156

	)

250 
	#GLU_TESS_ERROR7
 100157

	)

251 
	#GLU_TESS_ERROR8
 100158

	)

252 
	#GLU_TESS_MISSING_BEGIN_POLYGON
 100151

	)

253 
	#GLU_TESS_MISSING_BEGIN_CONTOUR
 100152

	)

254 
	#GLU_TESS_MISSING_END_POLYGON
 100153

	)

255 
	#GLU_TESS_MISSING_END_CONTOUR
 100154

	)

256 
	#GLU_TESS_COORD_TOO_LARGE
 100155

	)

257 
	#GLU_TESS_NEED_COMBINE_CALLBACK
 100156

	)

260 
	#GLU_TESS_WINDING_ODD
 100130

	)

261 
	#GLU_TESS_WINDING_NONZERO
 100131

	)

262 
	#GLU_TESS_WINDING_POSITIVE
 100132

	)

263 
	#GLU_TESS_WINDING_NEGATIVE
 100133

	)

264 
	#GLU_TESS_WINDING_ABS_GEQ_TWO
 100134

	)

269 #ifde‡
__˝lu•lus


270 
˛ass
 
GLUnurbs
;

271 
˛ass
 
GLUquadric
;

272 
˛ass
 
GLUãs£œt‹
;

274 
GLUnurbs
 
	tGLUnurbs
;

275 
GLUquadric
 
	tGLUquadric
;

276 
GLUãs£œt‹
 
	tGLUãs£œt‹
;

279 
GLUnurbs
 
	tGLUnurbsObj
;

280 
GLUquadric
 
	tGLUquadricObj
;

281 
GLUãs£œt‹
 
	tGLUãs£œt‹Obj
;

282 
GLUãs£œt‹
 
	tGLUåünguœt‹Obj
;

284 
	#GLU_TESS_MAX_COORD
 1.0e150

	)

287 (
GLAPIENTRYP
 
	t_GLUfun˝å
)();

289 
GLAPI
 
GLAPIENTRY
 
gluBegöCurve
 (
GLUnurbs
* 
nurb
);

290 
GLAPI
 
GLAPIENTRY
 
gluBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

291 
GLAPI
 
GLAPIENTRY
 
gluBegöSurÁ˚
 (
GLUnurbs
* 
nurb
);

292 
GLAPI
 
GLAPIENTRY
 
gluBegöTrim
 (
GLUnurbs
* 
nurb
);

293 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

294 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd1DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

295 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

296 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd2DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

297 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠Levñs
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, GLöà
Àvñ
, GLöà
ba£
, GLöà
max
, c⁄° *
d©a
);

298 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluBuûd3DMùm≠s
 (
GLíum
 
èrgë
, GLöà
öã∫ÆF‹m©
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
, GLíum 
f‹m©
, GLíum 
ty≥
, c⁄° *
d©a
);

299 
GLAPI
 
GLboﬁón
 
GLAPIENTRY
 
gluCheckExãnsi⁄
 (c⁄° 
GLubyã
 *
extName
, c⁄° GLubyã *
extSåög
);

300 
GLAPI
 
GLAPIENTRY
 
gluCylödî
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ba£
, GLdoubÀ 
t›
, GLdoubÀ 
height
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

301 
GLAPI
 
GLAPIENTRY
 
gluDñëeNurbsRídîî
 (
GLUnurbs
* 
nurb
);

302 
GLAPI
 
GLAPIENTRY
 
gluDñëeQuadric
 (
GLUquadric
* 
quad
);

303 
GLAPI
 
GLAPIENTRY
 
gluDñëeTess
 (
GLUãs£œt‹
* 
ãss
);

304 
GLAPI
 
GLAPIENTRY
 
gluDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
);

305 
GLAPI
 
GLAPIENTRY
 
gluEndCurve
 (
GLUnurbs
* 
nurb
);

306 
GLAPI
 
GLAPIENTRY
 
gluEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

307 
GLAPI
 
GLAPIENTRY
 
gluEndSurÁ˚
 (
GLUnurbs
* 
nurb
);

308 
GLAPI
 
GLAPIENTRY
 
gluEndTrim
 (
GLUnurbs
* 
nurb
);

309 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluEº‹Såög
 (
GLíum
 
îr‹
);

310 
GLAPI
 
GLAPIENTRY
 
gluGëNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
* 
d©a
);

311 
GLAPI
 c⁄° 
GLubyã
 * 
GLAPIENTRY
 
gluGëSåög
 (
GLíum
 
«me
);

312 
GLAPI
 
GLAPIENTRY
 
gluGëTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
* 
d©a
);

313 
GLAPI
 
GLAPIENTRY
 
gluLﬂdSam∂ögM©ri˚s
 (
GLUnurbs
* 
nurb
, c⁄° 
GLÊﬂt
 *
modñ
, c⁄° GLÊﬂà*
≥r•e˘ive
, c⁄° 
GLöt
 *
võw
);

314 
GLAPI
 
GLAPIENTRY
 
gluLookAt
 (
GLdoubÀ
 
eyeX
, GLdoubÀ 
eyeY
, GLdoubÀ 
eyeZ
, GLdoubÀ 
˚¡îX
, GLdoubÀ 
˚¡îY
, GLdoubÀ 
˚¡îZ
, GLdoubÀ 
upX
, GLdoubÀ 
upY
, GLdoubÀ 
upZ
);

315 
GLAPI
 
GLUnurbs
* 
GLAPIENTRY
 
gluNewNurbsRídîî
 ();

316 
GLAPI
 
GLUquadric
* 
GLAPIENTRY
 
gluNewQuadric
 ();

317 
GLAPI
 
GLUãs£œt‹
* 
GLAPIENTRY
 
gluNewTess
 ();

318 
GLAPI
 
GLAPIENTRY
 
gluNextC⁄tour
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
ty≥
);

319 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlback
 (
GLUnurbs
* 
nurb
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

320 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©a
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

321 
GLAPI
 
GLAPIENTRY
 
gluNurbsCÆlbackD©aEXT
 (
GLUnurbs
* 
nurb
, 
GLvoid
* 
u£rD©a
);

322 
GLAPI
 
GLAPIENTRY
 
gluNurbsCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
knŸCou¡
, 
GLÊﬂt
 *
knŸs
, GLöà
°ride
, GLÊﬂà*
c⁄åﬁ
, GLöà
‹dî
, 
GLíum
 
ty≥
);

323 
GLAPI
 
GLAPIENTRY
 
gluNurbsPr›îty
 (
GLUnurbs
* 
nurb
, 
GLíum
 
¥›îty
, 
GLÊﬂt
 
vÆue
);

324 
GLAPI
 
GLAPIENTRY
 
gluNurbsSurÁ˚
 (
GLUnurbs
* 
nurb
, 
GLöt
 
sKnŸCou¡
, 
GLÊﬂt
* 
sKnŸs
, GLöà
tKnŸCou¡
, GLÊﬂt* 
tKnŸs
, GLöà
sSåide
, GLöà
tSåide
, GLÊﬂt* 
c⁄åﬁ
, GLöà
sOrdî
, GLöà
tOrdî
, 
GLíum
 
ty≥
);

325 
GLAPI
 
GLAPIENTRY
 
gluOπho2D
 (
GLdoubÀ
 
À·
, GLdoubÀ 
right
, GLdoubÀ 
bŸtom
, GLdoubÀ 
t›
);

326 
GLAPI
 
GLAPIENTRY
 
gluP¨tülDisk
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ö√r
, GLdoubÀ 
ouãr
, 
GLöt
 
¶i˚s
, GLöà
lo›s
, GLdoubÀ 
°¨t
, GLdoubÀ 
swìp
);

327 
GLAPI
 
GLAPIENTRY
 
gluPî•e˘ive
 (
GLdoubÀ
 
fovy
, GLdoubÀ 
a•e˘
, GLdoubÀ 
zNór
, GLdoubÀ 
zF¨
);

328 
GLAPI
 
GLAPIENTRY
 
gluPickM©rix
 (
GLdoubÀ
 
x
, GLdoubÀ 
y
, GLdoubÀ 
dñX
, GLdoubÀ 
dñY
, 
GLöt
 *
võwp‹t
);

329 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluProje˘
 (
GLdoubÀ
 
objX
, GLdoubÀ 
objY
, GLdoubÀ 
objZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
wöX
, GLdoubÀ* 
wöY
, GLdoubÀ* 
wöZ
);

330 
GLAPI
 
GLAPIENTRY
 
gluPwlCurve
 (
GLUnurbs
* 
nurb
, 
GLöt
 
cou¡
, 
GLÊﬂt
* 
d©a
, GLöà
°ride
, 
GLíum
 
ty≥
);

331 
GLAPI
 
GLAPIENTRY
 
gluQuadricCÆlback
 (
GLUquadric
* 
quad
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

332 
GLAPI
 
GLAPIENTRY
 
gluQuadricDøwStyÀ
 (
GLUquadric
* 
quad
, 
GLíum
 
døw
);

333 
GLAPI
 
GLAPIENTRY
 
gluQuadricN‹mÆs
 (
GLUquadric
* 
quad
, 
GLíum
 
n‹mÆ
);

334 
GLAPI
 
GLAPIENTRY
 
gluQuadricOrõ¡©i⁄
 (
GLUquadric
* 
quad
, 
GLíum
 
‹õ¡©i⁄
);

335 
GLAPI
 
GLAPIENTRY
 
gluQuadricTextuª
 (
GLUquadric
* 
quad
, 
GLboﬁón
 
ãxtuª
);

336 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluSˇÀImage
 (
GLíum
 
f‹m©
, 
GLsizei
 
wIn
, GLsizeò
hIn
, GLíum 
ty≥In
, c⁄° *
d©aIn
, GLsizeò
wOut
, GLsizeò
hOut
, GLíum 
ty≥Out
, 
GLvoid
* 
d©aOut
);

337 
GLAPI
 
GLAPIENTRY
 
gluSphîe
 (
GLUquadric
* 
quad
, 
GLdoubÀ
 
ødius
, 
GLöt
 
¶i˚s
, GLöà
°acks
);

338 
GLAPI
 
GLAPIENTRY
 
gluTessBegöC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

339 
GLAPI
 
GLAPIENTRY
 
gluTessBegöPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
, 
GLvoid
* 
d©a
);

340 
GLAPI
 
GLAPIENTRY
 
gluTessCÆlback
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
_GLUfun˝å
 
CÆlBackFunc
);

341 
GLAPI
 
GLAPIENTRY
 
gluTessEndC⁄tour
 (
GLUãs£œt‹
* 
ãss
);

342 
GLAPI
 
GLAPIENTRY
 
gluTessEndPﬁyg⁄
 (
GLUãs£œt‹
* 
ãss
);

343 
GLAPI
 
GLAPIENTRY
 
gluTessN‹mÆ
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 
vÆueX
, GLdoubÀ 
vÆueY
, GLdoubÀ 
vÆueZ
);

344 
GLAPI
 
GLAPIENTRY
 
gluTessPr›îty
 (
GLUãs£œt‹
* 
ãss
, 
GLíum
 
which
, 
GLdoubÀ
 
d©a
);

345 
GLAPI
 
GLAPIENTRY
 
gluTessVîãx
 (
GLUãs£œt‹
* 
ãss
, 
GLdoubÀ
 *
loˇti⁄
, 
GLvoid
* 
d©a
);

346 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
);

347 
GLAPI
 
GLöt
 
GLAPIENTRY
 
gluUnProje˘4
 (
GLdoubÀ
 
wöX
, GLdoubÀ 
wöY
, GLdoubÀ 
wöZ
, GLdoubÀ 
˛ùW
, c⁄° GLdoubÀ *
modñ
, c⁄° GLdoubÀ *
¥oj
, c⁄° GLöà*
võw
, GLdoubÀ 
√¨VÆ
, GLdoubÀ 
ÁrVÆ
, GLdoubÀ* 
objX
, GLdoubÀ* 
objY
, GLdoubÀ* 
objZ
, GLdoubÀ* 
objW
);

349 #ifde‡
__˝lu•lus


	@/usr/include/GL/glut.h

1 #i‚de‡ 
__GLUT_H__


2 
	#__GLUT_H__


	)

17 
	~"‰ìglut_°d.h
"

	@/usr/include/GL/glx.h

26 #i‚de‡
GLX_H


27 
	#GLX_H


	)

30 
	~<X11/Xlib.h
>

31 
	~<X11/Xutû.h
>

32 
	~<GL/gl.h
>

35 #i‡
deföed
(
USE_MGL_NAMESPACE
)

36 
	~"glx_m™gÀ.h
"

40 #ifde‡
__˝lu•lus


45 
	#GLX_VERSION_1_1
 1

	)

46 
	#GLX_VERSION_1_2
 1

	)

47 
	#GLX_VERSION_1_3
 1

	)

48 
	#GLX_VERSION_1_4
 1

	)

50 
	#GLX_EXTENSION_NAME
 "GLX"

	)

57 
	#GLX_USE_GL
 1

	)

58 
	#GLX_BUFFER_SIZE
 2

	)

59 
	#GLX_LEVEL
 3

	)

60 
	#GLX_RGBA
 4

	)

61 
	#GLX_DOUBLEBUFFER
 5

	)

62 
	#GLX_STEREO
 6

	)

63 
	#GLX_AUX_BUFFERS
 7

	)

64 
	#GLX_RED_SIZE
 8

	)

65 
	#GLX_GREEN_SIZE
 9

	)

66 
	#GLX_BLUE_SIZE
 10

	)

67 
	#GLX_ALPHA_SIZE
 11

	)

68 
	#GLX_DEPTH_SIZE
 12

	)

69 
	#GLX_STENCIL_SIZE
 13

	)

70 
	#GLX_ACCUM_RED_SIZE
 14

	)

71 
	#GLX_ACCUM_GREEN_SIZE
 15

	)

72 
	#GLX_ACCUM_BLUE_SIZE
 16

	)

73 
	#GLX_ACCUM_ALPHA_SIZE
 17

	)

79 
	#GLX_BAD_SCREEN
 1

	)

80 
	#GLX_BAD_ATTRIBUTE
 2

	)

81 
	#GLX_NO_EXTENSION
 3

	)

82 
	#GLX_BAD_VISUAL
 4

	)

83 
	#GLX_BAD_CONTEXT
 5

	)

84 
	#GLX_BAD_VALUE
 6

	)

85 
	#GLX_BAD_ENUM
 7

	)

91 
	#GLX_VENDOR
 1

	)

92 
	#GLX_VERSION
 2

	)

93 
	#GLX_EXTENSIONS
 3

	)

99 
	#GLX_CONFIG_CAVEAT
 0x20

	)

100 
	#GLX_DONT_CARE
 0xFFFFFFFF

	)

101 
	#GLX_X_VISUAL_TYPE
 0x22

	)

102 
	#GLX_TRANSPARENT_TYPE
 0x23

	)

103 
	#GLX_TRANSPARENT_INDEX_VALUE
 0x24

	)

104 
	#GLX_TRANSPARENT_RED_VALUE
 0x25

	)

105 
	#GLX_TRANSPARENT_GREEN_VALUE
 0x26

	)

106 
	#GLX_TRANSPARENT_BLUE_VALUE
 0x27

	)

107 
	#GLX_TRANSPARENT_ALPHA_VALUE
 0x28

	)

108 
	#GLX_WINDOW_BIT
 0x00000001

	)

109 
	#GLX_PIXMAP_BIT
 0x00000002

	)

110 
	#GLX_PBUFFER_BIT
 0x00000004

	)

111 
	#GLX_AUX_BUFFERS_BIT
 0x00000010

	)

112 
	#GLX_FRONT_LEFT_BUFFER_BIT
 0x00000001

	)

113 
	#GLX_FRONT_RIGHT_BUFFER_BIT
 0x00000002

	)

114 
	#GLX_BACK_LEFT_BUFFER_BIT
 0x00000004

	)

115 
	#GLX_BACK_RIGHT_BUFFER_BIT
 0x00000008

	)

116 
	#GLX_DEPTH_BUFFER_BIT
 0x00000020

	)

117 
	#GLX_STENCIL_BUFFER_BIT
 0x00000040

	)

118 
	#GLX_ACCUM_BUFFER_BIT
 0x00000080

	)

119 
	#GLX_NONE
 0x8000

	)

120 
	#GLX_SLOW_CONFIG
 0x8001

	)

121 
	#GLX_TRUE_COLOR
 0x8002

	)

122 
	#GLX_DIRECT_COLOR
 0x8003

	)

123 
	#GLX_PSEUDO_COLOR
 0x8004

	)

124 
	#GLX_STATIC_COLOR
 0x8005

	)

125 
	#GLX_GRAY_SCALE
 0x8006

	)

126 
	#GLX_STATIC_GRAY
 0x8007

	)

127 
	#GLX_TRANSPARENT_RGB
 0x8008

	)

128 
	#GLX_TRANSPARENT_INDEX
 0x8009

	)

129 
	#GLX_VISUAL_ID
 0x800B

	)

130 
	#GLX_SCREEN
 0x800C

	)

131 
	#GLX_NON_CONFORMANT_CONFIG
 0x800D

	)

132 
	#GLX_DRAWABLE_TYPE
 0x8010

	)

133 
	#GLX_RENDER_TYPE
 0x8011

	)

134 
	#GLX_X_RENDERABLE
 0x8012

	)

135 
	#GLX_FBCONFIG_ID
 0x8013

	)

136 
	#GLX_RGBA_TYPE
 0x8014

	)

137 
	#GLX_COLOR_INDEX_TYPE
 0x8015

	)

138 
	#GLX_MAX_PBUFFER_WIDTH
 0x8016

	)

139 
	#GLX_MAX_PBUFFER_HEIGHT
 0x8017

	)

140 
	#GLX_MAX_PBUFFER_PIXELS
 0x8018

	)

141 
	#GLX_PRESERVED_CONTENTS
 0x801B

	)

142 
	#GLX_LARGEST_PBUFFER
 0x801C

	)

143 
	#GLX_WIDTH
 0x801D

	)

144 
	#GLX_HEIGHT
 0x801E

	)

145 
	#GLX_EVENT_MASK
 0x801F

	)

146 
	#GLX_DAMAGED
 0x8020

	)

147 
	#GLX_SAVED
 0x8021

	)

148 
	#GLX_WINDOW
 0x8022

	)

149 
	#GLX_PBUFFER
 0x8023

	)

150 
	#GLX_PBUFFER_HEIGHT
 0x8040

	)

151 
	#GLX_PBUFFER_WIDTH
 0x8041

	)

152 
	#GLX_RGBA_BIT
 0x00000001

	)

153 
	#GLX_COLOR_INDEX_BIT
 0x00000002

	)

154 
	#GLX_PBUFFER_CLOBBER_MASK
 0x08000000

	)

160 
	#GLX_SAMPLE_BUFFERS
 0x186a0

	)

161 
	#GLX_SAMPLES
 0x186a1

	)

165 
__GLXc⁄ãxtRec
 *
	tGLXC⁄ãxt
;

166 
XID
 
	tGLXPixm≠
;

167 
XID
 
	tGLXDøwabÀ
;

169 
__GLXFBC⁄figRec
 *
	tGLXFBC⁄fig
;

170 
XID
 
	tGLXFBC⁄figID
;

171 
XID
 
	tGLXC⁄ãxtID
;

172 
XID
 
	tGLXWödow
;

173 
XID
 
	tGLXPbuf„r
;

182 
	#GLX_Pbuf„rClobbî
 0

	)

183 
	#GLX_Buf„rSw≠Com∂ëe
 1

	)

185 
	#__GLX_NUMBER_EVENTS
 17

	)

187 
XVisuÆInfo
* 
glXChoo£VisuÆ
–
Di•œy
 *
dpy
, 
s¸ìn
,

188 *
©åibLi°
 );

190 
GLXC⁄ãxt
 
glXCª©eC⁄ãxt
–
Di•œy
 *
dpy
, 
XVisuÆInfo
 *
vis
,

191 
GLXC⁄ãxt
 
sh¨eLi°
, 
Boﬁ
 
dúe˘
 );

193 
glXDe°royC⁄ãxt
–
Di•œy
 *
dpy
, 
GLXC⁄ãxt
 
˘x
 );

195 
Boﬁ
 
glXMakeCuºít
–
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
,

196 
GLXC⁄ãxt
 
˘x
);

198 
glXC›yC⁄ãxt
–
Di•œy
 *
dpy
, 
GLXC⁄ãxt
 
§c
, GLXC⁄ãxà
d°
,

199 
mask
 );

201 
glXSw≠Buf„rs
–
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
 );

203 
GLXPixm≠
 
glXCª©eGLXPixm≠
–
Di•œy
 *
dpy
, 
XVisuÆInfo
 *
visuÆ
,

204 
Pixm≠
 
pixm≠
 );

206 
glXDe°royGLXPixm≠
–
Di•œy
 *
dpy
, 
GLXPixm≠
 
pixm≠
 );

208 
Boﬁ
 
glXQuîyExãnsi⁄
–
Di•œy
 *
dpy
, *
îr‹b
, *
evít
 );

210 
Boﬁ
 
glXQuîyVîsi⁄
–
Di•œy
 *
dpy
, *
maj
, *
mö
 );

212 
Boﬁ
 
glXIsDúe˘
–
Di•œy
 *
dpy
, 
GLXC⁄ãxt
 
˘x
 );

214 
glXGëC⁄fig
–
Di•œy
 *
dpy
, 
XVisuÆInfo
 *
visuÆ
,

215 
©åib
, *
vÆue
 );

217 
GLXC⁄ãxt
 
glXGëCuºítC⁄ãxt
( );

219 
GLXDøwabÀ
 
glXGëCuºítDøwabÀ
( );

221 
glXWaôGL
( );

223 
glXWaôX
( );

225 
glXU£XF⁄t
–
F⁄t
 
f⁄t
, 
fú°
, 
cou¡
, 
li°
 );

230 c⁄° *
glXQuîyExãnsi⁄sSåög
–
Di•œy
 *
dpy
, 
s¸ìn
 );

232 c⁄° *
glXQuîySîvîSåög
–
Di•œy
 *
dpy
, 
s¸ìn
, 
«me
 );

234 c⁄° *
glXGëClõ¡Såög
–
Di•œy
 *
dpy
, 
«me
 );

238 
Di•œy
 *
glXGëCuºítDi•œy
( );

242 
GLXFBC⁄fig
 *
glXChoo£FBC⁄fig
–
Di•œy
 *
dpy
, 
s¸ìn
,

243 c⁄° *
©åibLi°
, *
nôems
 );

245 
glXGëFBC⁄figAârib
–
Di•œy
 *
dpy
, 
GLXFBC⁄fig
 
c⁄fig
,

246 
©åibuã
, *
vÆue
 );

248 
GLXFBC⁄fig
 *
glXGëFBC⁄figs
–
Di•œy
 *
dpy
, 
s¸ìn
,

249 *
√Àmíts
 );

251 
XVisuÆInfo
 *
glXGëVisuÆFromFBC⁄fig
–
Di•œy
 *
dpy
,

252 
GLXFBC⁄fig
 
c⁄fig
 );

254 
GLXWödow
 
glXCª©eWödow
–
Di•œy
 *
dpy
, 
GLXFBC⁄fig
 
c⁄fig
,

255 
Wödow
 
wö
, c⁄° *
©åibLi°
 );

257 
glXDe°royWödow
–
Di•œy
 *
dpy
, 
GLXWödow
 
wödow
 );

259 
GLXPixm≠
 
glXCª©ePixm≠
–
Di•œy
 *
dpy
, 
GLXFBC⁄fig
 
c⁄fig
,

260 
Pixm≠
 
pixm≠
, c⁄° *
©åibLi°
 );

262 
glXDe°royPixm≠
–
Di•œy
 *
dpy
, 
GLXPixm≠
 
pixm≠
 );

264 
GLXPbuf„r
 
glXCª©ePbuf„r
–
Di•œy
 *
dpy
, 
GLXFBC⁄fig
 
c⁄fig
,

265 c⁄° *
©åibLi°
 );

267 
glXDe°royPbuf„r
–
Di•œy
 *
dpy
, 
GLXPbuf„r
 
pbuf
 );

269 
glXQuîyDøwabÀ
–
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døw
, 
©åibuã
,

270 *
vÆue
 );

272 
GLXC⁄ãxt
 
glXCª©eNewC⁄ãxt
–
Di•œy
 *
dpy
, 
GLXFBC⁄fig
 
c⁄fig
,

273 
ªndîTy≥
, 
GLXC⁄ãxt
 
sh¨eLi°
,

274 
Boﬁ
 
dúe˘
 );

276 
Boﬁ
 
glXMakeC⁄ãxtCuºít
–
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døw
,

277 
GLXDøwabÀ
 
ªad
, 
GLXC⁄ãxt
 
˘x
 );

279 
GLXDøwabÀ
 
glXGëCuºítRódDøwabÀ
( );

281 
glXQuîyC⁄ãxt
–
Di•œy
 *
dpy
, 
GLXC⁄ãxt
 
˘x
, 
©åibuã
,

282 *
vÆue
 );

284 
glXSñe˘Evít
–
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
,

285 
mask
 );

287 
glXGëSñe˘edEvít
–
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
,

288 *
mask
 );

291 
	gGLXFBC⁄fig
 * (* 
	tPFNGLXGETFBCONFIGSPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, *
	t√Àmíts
);

292 
	gGLXFBC⁄fig
 * (* 
	tPFNGLXCHOOSEFBCONFIGPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, c⁄° *
	t©åib_li°
, *
	t√Àmíts
);

293 (* 
	gPFNGLXGETFBCONFIGATTRIBPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄fig
 
	tc⁄fig
, 
	t©åibuã
, *
	tvÆue
);

294 
	gXVisuÆInfo
 * (* 
	tPFNGLXGETVISUALFROMFBCONFIGPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄fig
 
	tc⁄fig
);

295 
GLXWödow
 (* 
	tPFNGLXCREATEWINDOWPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄fig
 
	tc⁄fig
, 
	tWödow
 
	twö
, c⁄° *
	t©åib_li°
);

296 (* 
	gPFNGLXDESTROYWINDOWPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXWödow
 
	twö
);

297 
GLXPixm≠
 (* 
	tPFNGLXCREATEPIXMAPPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄fig
 
	tc⁄fig
, 
	tPixm≠
 
	tpixm≠
, c⁄° *
	t©åib_li°
);

298 (* 
	gPFNGLXDESTROYPIXMAPPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXPixm≠
 
	tpixm≠
);

299 
GLXPbuf„r
 (* 
	tPFNGLXCREATEPBUFFERPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄fig
 
	tc⁄fig
, c⁄° *
	t©åib_li°
);

300 (* 
	gPFNGLXDESTROYPBUFFERPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXPbuf„r
 
	tpbuf
);

301 (* 
	gPFNGLXQUERYDRAWABLEPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøw
, 
	t©åibuã
, *
	tvÆue
);

302 
GLXC⁄ãxt
 (* 
	tPFNGLXCREATENEWCONTEXTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄fig
 
	tc⁄fig
, 
	tªndî_ty≥
, 
	tGLXC⁄ãxt
 
	tsh¨e_li°
, 
	tBoﬁ
 
	tdúe˘
);

303 
Boﬁ
 (* 
	tPFNGLXMAKECONTEXTCURRENTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøw
, GLXDøwabÀ 
	tªad
, 
	tGLXC⁄ãxt
 
	t˘x
);

304 
GLXDøwabÀ
 (* 
	tPFNGLXGETCURRENTREADDRAWABLEPROC
) ();

305 
	gDi•œy
 * (* 
	tPFNGLXGETCURRENTDISPLAYPROC
) ();

306 (* 
	gPFNGLXQUERYCONTEXTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXC⁄ãxt
 
	t˘x
, 
	t©åibuã
, *
	tvÆue
);

307 (* 
	gPFNGLXSELECTEVENTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøw
, 
	tevít_mask
);

308 (* 
	gPFNGLXGETSELECTEDEVENTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøw
, *
	tevít_mask
);

314 #i‚de‡
GLX_ARB_gë_¥oc_addªss


315 
	#GLX_ARB_gë_¥oc_addªss
 1

	)

317 (*
	g__GLXextFuncPå
)();

318 
__GLXextFuncPå
 
glXGëProcAddªssARB
 (c⁄° 
GLubyã
 *);

325 (*
glXGëProcAddªss
(c⁄° 
GLubyã
 *
¥o˙ame
))( );

328 
__GLXextFuncPå
 (* 
	tPFNGLXGETPROCADDRESSPROC
Ë(c⁄° 
	tGLubyã
 *
	t¥ocName
);

331 #i‚de‡
GLX_GLXEXT_LEGACY


333 
	~<GL/glxext.h
>

346 #i‚de‡
GLX_NV_vîãx_¨øy_ønge


347 
	#GLX_NV_vîãx_¨øy_ønge


	)

349 *
glXAŒoˇãMem‹yNV
(
GLsizei
 
size
, 
GLÊﬂt
 
ªad‰eq
, GLÊﬂà
wrôe‰eq
, GLÊﬂà
¥i‹ôy
);

350 
glXFªeMem‹yNV
(
GLvoid
 *
poöãr
);

351 * ( * 
	tPFNGLXALLOCATEMEMORYNVPROC
Ë(
	tGLsizei
 
	tsize
, 
	tGLÊﬂt
 
	tªad‰eq
, GLÊﬂà
	twrôe‰eq
, GLÊﬂà
	t¥i‹ôy
);

352 –* 
	gPFNGLXFREEMEMORYNVPROC
Ë(
	tGLvoid
 *
	tpoöãr
);

361 #i‚de‡
GLX_ARB_ªndî_ãxtuª


362 
	#GLX_ARB_ªndî_ãxtuª
 1

	)

364 
Boﬁ
 
glXBödTexImageARB
(
Di•œy
 *
dpy
, 
GLXPbuf„r
 
pbuf„r
, 
buf„r
);

365 
Boﬁ
 
glXRñó£TexImageARB
(
Di•œy
 *
dpy
, 
GLXPbuf„r
 
pbuf„r
, 
buf„r
);

366 
Boﬁ
 
glXDøwabÀAâribARB
(
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døw
, c⁄° *
©åibLi°
);

374 #i‚de‡
GLX_NV_Êﬂt_buf„r


375 
	#GLX_NV_Êﬂt_buf„r
 1

	)

377 
	#GLX_FLOAT_COMPONENTS_NV
 0x20B0

	)

386 #i‚de‡
GLX_MESA_sw≠_‰ame_ußge


387 
	#GLX_MESA_sw≠_‰ame_ußge
 1

	)

389 
glXGëFømeUßgeMESA
(
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, *
ußge
);

390 
glXBegöFømeTøckögMESA
(
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
);

391 
glXEndFømeTøckögMESA
(
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
);

392 
glXQuîyFømeTøckögMESA
(
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
öt64_t
 *
sw≠Cou¡
, i¡64_à*
mis£dFømes
, *
œ°Mis£dUßge
);

394 (*
	gPFNGLXGETFRAMEUSAGEMESAPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, *
	tußge
);

395 (*
	gPFNGLXBEGINFRAMETRACKINGMESAPROC
)(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
);

396 (*
	gPFNGLXENDFRAMETRACKINGMESAPROC
)(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
);

397 (*
	gPFNGLXQUERYFRAMETRACKINGMESAPROC
)(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	töt64_t
 *
	tsw≠Cou¡
, i¡64_à*
	tmis£dFømes
, *
	tœ°Mis£dUßge
);

406 #i‚de‡
GLX_MESA_sw≠_c⁄åﬁ


407 
	#GLX_MESA_sw≠_c⁄åﬁ
 1

	)

409 
glXSw≠I¡îvÆMESA
(
öãrvÆ
);

410 
glXGëSw≠I¡îvÆMESA
();

412 (*
	gPFNGLXSWAPINTERVALMESAPROC
)(
	töãrvÆ
);

413 (*
	gPFNGLXGETSWAPINTERVALMESAPROC
)();

423 #i‚de‡
GLX_EXT_ãxtuª_‰om_pixm≠


424 
	#GLX_EXT_ãxtuª_‰om_pixm≠
 1

	)

426 
	#GLX_BIND_TO_TEXTURE_RGB_EXT
 0x20D0

	)

427 
	#GLX_BIND_TO_TEXTURE_RGBA_EXT
 0x20D1

	)

428 
	#GLX_BIND_TO_MIPMAP_TEXTURE_EXT
 0x20D2

	)

429 
	#GLX_BIND_TO_TEXTURE_TARGETS_EXT
 0x20D3

	)

430 
	#GLX_Y_INVERTED_EXT
 0x20D4

	)

432 
	#GLX_TEXTURE_FORMAT_EXT
 0x20D5

	)

433 
	#GLX_TEXTURE_TARGET_EXT
 0x20D6

	)

434 
	#GLX_MIPMAP_TEXTURE_EXT
 0x20D7

	)

436 
	#GLX_TEXTURE_FORMAT_NONE_EXT
 0x20D8

	)

437 
	#GLX_TEXTURE_FORMAT_RGB_EXT
 0x20D9

	)

438 
	#GLX_TEXTURE_FORMAT_RGBA_EXT
 0x20DA

	)

440 
	#GLX_TEXTURE_1D_BIT_EXT
 0x00000001

	)

441 
	#GLX_TEXTURE_2D_BIT_EXT
 0x00000002

	)

442 
	#GLX_TEXTURE_RECTANGLE_BIT_EXT
 0x00000004

	)

444 
	#GLX_TEXTURE_1D_EXT
 0x20DB

	)

445 
	#GLX_TEXTURE_2D_EXT
 0x20DC

	)

446 
	#GLX_TEXTURE_RECTANGLE_EXT
 0x20DD

	)

448 
	#GLX_FRONT_LEFT_EXT
 0x20DE

	)

449 
	#GLX_FRONT_RIGHT_EXT
 0x20DF

	)

450 
	#GLX_BACK_LEFT_EXT
 0x20E0

	)

451 
	#GLX_BACK_RIGHT_EXT
 0x20E1

	)

452 
	#GLX_FRONT_EXT
 
GLX_FRONT_LEFT_EXT


	)

453 
	#GLX_BACK_EXT
 
GLX_BACK_LEFT_EXT


	)

454 
	#GLX_AUX0_EXT
 0x20E2

	)

455 
	#GLX_AUX1_EXT
 0x20E3

	)

456 
	#GLX_AUX2_EXT
 0x20E4

	)

457 
	#GLX_AUX3_EXT
 0x20E5

	)

458 
	#GLX_AUX4_EXT
 0x20E6

	)

459 
	#GLX_AUX5_EXT
 0x20E7

	)

460 
	#GLX_AUX6_EXT
 0x20E8

	)

461 
	#GLX_AUX7_EXT
 0x20E9

	)

462 
	#GLX_AUX8_EXT
 0x20EA

	)

463 
	#GLX_AUX9_EXT
 0x20EB

	)

465 
glXBödTexImageEXT
(
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
buf„r
, c⁄° *
©åib_li°
);

466 
glXRñó£TexImageEXT
(
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
buf„r
);

471 #i‚de‡
GLX_MESA_quîy_ªndîî


472 
	#GLX_MESA_quîy_ªndîî
 1

	)

474 
	#GLX_RENDERER_VENDOR_ID_MESA
 0x8183

	)

475 
	#GLX_RENDERER_DEVICE_ID_MESA
 0x8184

	)

476 
	#GLX_RENDERER_VERSION_MESA
 0x8185

	)

477 
	#GLX_RENDERER_ACCELERATED_MESA
 0x8186

	)

478 
	#GLX_RENDERER_VIDEO_MEMORY_MESA
 0x8187

	)

479 
	#GLX_RENDERER_UNIFIED_MEMORY_ARCHITECTURE_MESA
 0x8188

	)

480 
	#GLX_RENDERER_PREFERRED_PROFILE_MESA
 0x8189

	)

481 
	#GLX_RENDERER_OPENGL_CORE_PROFILE_VERSION_MESA
 0x818A

	)

482 
	#GLX_RENDERER_OPENGL_COMPATIBILITY_PROFILE_VERSION_MESA
 0x818B

	)

483 
	#GLX_RENDERER_OPENGL_ES_PROFILE_VERSION_MESA
 0x818C

	)

484 
	#GLX_RENDERER_OPENGL_ES2_PROFILE_VERSION_MESA
 0x818D

	)

485 
	#GLX_RENDERER_ID_MESA
 0x818E

	)

487 
Boﬁ
 
glXQuîyRídîîI¡egîMESA
(
Di•œy
 *
dpy
, 
s¸ìn
, 
ªndîî
, 
©åibuã
, *
vÆue
);

488 
Boﬁ
 
glXQuîyCuºítRídîîI¡egîMESA
(
©åibuã
, *
vÆue
);

489 c⁄° *
glXQuîyRídîîSåögMESA
(
Di•œy
 *
dpy
, 
s¸ìn
, 
ªndîî
, 
©åibuã
);

490 c⁄° *
glXQuîyCuºítRídîîSåögMESA
(
©åibuã
);

492 
Boﬁ
 (*
	tPFNGLXQUERYRENDERERINTEGERMESAPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, 
	tªndîî
, 
	t©åibuã
, *
	tvÆue
);

493 
Boﬁ
 (*
	tPFNGLXQUERYCURRENTRENDERERINTEGERMESAPROC
Ë(
	t©åibuã
, *
	tvÆue
);

494 c⁄° *(*
	tPFNGLXQUERYRENDERERSTRINGMESAPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, 
	tªndîî
, 
	t©åibuã
);

495 c⁄° *(*
	tPFNGLXQUERYCURRENTRENDERERSTRINGMESAPROC
Ë(
	t©åibuã
);

503 
	gevít_ty≥
;

504 
	gdøw_ty≥
;

505 
	g£rül
;

506 
Boﬁ
 
	g£nd_evít
;

507 
Di•œy
 *
	gdi•œy
;

508 
GLXDøwabÀ
 
	gdøwabÀ
;

509 
	gbuf„r_mask
;

510 
	gaux_buf„r
;

511 
	gx
, 
	gy
;

512 
	gwidth
, 
	gheight
;

513 
	gcou¡
;

514 } 
	tGLXPbuf„rClobbîEvít
;

517 
	gty≥
;

518 
	g£rül
;

519 
Boﬁ
 
	g£nd_evít
;

520 
Di•œy
 *
	gdi•œy
;

521 
GLXDøwabÀ
 
	gdøwabÀ
;

522 
	gevít_ty≥
;

523 
öt64_t
 
	gu°
;

524 
öt64_t
 
	gmsc
;

525 
öt64_t
 
	gsbc
;

526 } 
	tGLXBuf„rSw≠Com∂ëe
;

528 
	u__GLXEvít
 {

529 
GLXPbuf„rClobbîEvít
 
	gglxpbuf„r˛obbî
;

530 
GLXBuf„rSw≠Com∂ëe
 
	gglxbuf„rsw≠com∂ëe
;

531 
	g∑d
[24];

532 } 
	tGLXEvít
;

534 #ifde‡
__˝lu•lus


	@/usr/include/SDL/SDL.h

27 #i‚de‡
_SDL_H


28 
	#_SDL_H


	)

30 
	~"SDL_maö.h
"

31 
	~"SDL_°döc.h
"

32 
	~"SDL_audio.h
"

33 
	~"SDL_cdrom.h
"

34 
	~"SDL_˝uöfo.h
"

35 
	~"SDL_ídün.h
"

36 
	~"SDL_îr‹.h
"

37 
	~"SDL_evíts.h
"

38 
	~"SDL_lﬂdso.h
"

39 
	~"SDL_muãx.h
"

40 
	~"SDL_rw›s.h
"

41 
	~"SDL_thªad.h
"

42 
	~"SDL_timî.h
"

43 
	~"SDL_video.h
"

44 
	~"SDL_vîsi⁄.h
"

46 
	~"begö_code.h
"

48 #ifde‡
__˝lu•lus


61 
	#SDL_INIT_TIMER
 0x00000001

	)

62 
	#SDL_INIT_AUDIO
 0x00000010

	)

63 
	#SDL_INIT_VIDEO
 0x00000020

	)

64 
	#SDL_INIT_CDROM
 0x00000100

	)

65 
	#SDL_INIT_JOYSTICK
 0x00000200

	)

66 
	#SDL_INIT_NOPARACHUTE
 0x00100000

	)

67 
	#SDL_INIT_EVENTTHREAD
 0x01000000

	)

68 
	#SDL_INIT_EVERYTHING
 0x0000FFFF

	)

76 
DECLSPEC
 
SDLCALL
 
SDL_Inô
(
Uöt32
 
Êags
);

79 
DECLSPEC
 
SDLCALL
 
SDL_InôSubSy°em
(
Uöt32
 
Êags
);

82 
DECLSPEC
 
SDLCALL
 
SDL_QuôSubSy°em
(
Uöt32
 
Êags
);

88 
DECLSPEC
 
Uöt32
 
SDLCALL
 
SDL_WasInô
(Uöt32 
Êags
);

93 
DECLSPEC
 
SDLCALL
 
SDL_Quô
();

96 #ifde‡
__˝lu•lus


99 
	~"˛o£_code.h
"

	@/usr/include/X11/Xlib.h

33 #i‚de‡
_X11_XLIB_H_


34 
	#_X11_XLIB_H_


	)

36 
	#XlibS≥cifiˇti⁄Rñó£
 6

	)

38 
	~<sys/ty≥s.h
>

40 #i‡
deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

41 
	~<°döt.h
>

44 
	~<X11/X.h
>

47 
	~<X11/Xfun˝rŸo.h
>

48 
	~<X11/Xosdefs.h
>

50 #i‚de‡
X_WCHAR


51 
	~<°ddef.h
>

53 #ifde‡
__UNIXOS2__


54 
	~<°dlib.h
>

57 
	twch¨_t
;

61 #i‡
deföed
(
ISC
Ë&& deföed(
USE_XMBTOWC
)

62 
	#w˘omb
(
a
,
b
Ë
	`_Xw˘omb
◊,b)

	)

63 
	#mbÀn
(
a
,
b
Ë
	`_XmbÀn
◊,b)

	)

64 #i‚de‡
USE_XWCHAR_STRING


65 
	#mbtowc
(
a
,
b
,
c
Ë
	`_Xmbtowc
◊,b,c)

	)

70 
_XmbÀn
(

71 #ifde‡
ISC


72 c⁄° *
°r
,

73 
size_t
 
Àn


75 *
°r
,

76 
Àn


82 
	#X_HAVE_UTF8_STRING
 1

	)

87 #ifde‡
__˛™g__


88 #¥agm®
˛™g
 
dügno°ic
 
push


89 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

92 *
	tXPoöãr
;

94 
	#Boﬁ
 

	)

95 
	#Sètus
 

	)

96 
	#True
 1

	)

97 
	#FÆ£
 0

	)

99 
	#QueuedAÃódy
 0

	)

100 
	#QueuedA·îRódög
 1

	)

101 
	#QueuedA·îFlush
 2

	)

103 
	#C⁄√˘i⁄Numbî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
fd
)

	)

104 
	#RoŸWödow
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ
)

	)

105 
	#DeÁu…S¸ìn
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
deÁu…_s¸ìn
)

	)

106 
	#DeÁu…RoŸWödow
(
dpy
Ë(
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))->
roŸ
)

	)

107 
	#DeÁu…VisuÆ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_visuÆ
)

	)

108 
	#DeÁu…GC
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
deÁu…_gc
)

	)

109 
	#BœckPixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
bœck_pixñ
)

	)

110 
	#WhôePixñ
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
whôe_pixñ
)

	)

111 
	#AŒPœ√s
 (()~0L)

	)

112 
	#QLígth
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
qÀn
)

	)

113 
	#Di•œyWidth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
width
)

	)

114 
	#Di•œyHeight
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
height
)

	)

115 
	#Di•œyWidthMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mwidth
)

	)

116 
	#Di•œyHeightMM
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
mheight
)

	)

117 
	#Di•œyPœ√s
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

118 
	#Di•œyCñls
(
dpy
, 
s¸
Ë(
	`DeÁu…VisuÆ
(dpy,s¸)->
m≠_íåõs
)

	)

119 
	#S¸ìnCou¡
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ns¸ìns
)

	)

120 
	#SîvîVíd‹
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
víd‹
)

	)

121 
	#PrŸocﬁVîsi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_maj‹_vîsi⁄
)

	)

122 
	#PrŸocﬁRevisi⁄
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
¥Ÿo_mö‹_vîsi⁄
)

	)

123 
	#Víd‹Rñó£
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªÀa£
)

	)

124 
	#Di•œySåög
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
di•œy_«me
)

	)

125 
	#DeÁu…Dïth
(
dpy
, 
s¸
Ë(
	`S¸ìnOfDi•œy
(dpy,s¸)->
roŸ_dïth
)

	)

126 
	#DeÁu…Cﬁ‹m≠
(
dpy
, 
s¸
)(
	`S¸ìnOfDi•œy
(dpy,s¸)->
cm≠
)

	)

127 
	#Bôm≠Unô
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_unô
)

	)

128 
	#Bôm≠BôOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_bô_‹dî
)

	)

129 
	#Bôm≠Pad
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
bôm≠_∑d
)

	)

130 
	#ImageByãOrdî
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
byã_‹dî
)

	)

131 
	#NextReque°
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
ªque°
 + 1)

	)

132 
	#La°KnownReque°Pro˚s£d
(
dpy
Ë(((
_XPrivDi•œy
)dpy)->
œ°_ªque°_ªad
)

	)

135 
	#S¸ìnOfDi•œy
(
dpy
, 
s¸
)(&((
_XPrivDi•œy
)dpy)->
s¸ìns
[s¸])

	)

136 
	#DeÁu…S¸ìnOfDi•œy
(
dpy
Ë
	`S¸ìnOfDi•œy
(dpy,
	`DeÁu…S¸ìn
(dpy))

	)

137 
	#Di•œyOfS¸ìn
(
s
Ë((s)->
di•œy
)

	)

138 
	#RoŸWödowOfS¸ìn
(
s
Ë((s)->
roŸ
)

	)

139 
	#BœckPixñOfS¸ìn
(
s
Ë((s)->
bœck_pixñ
)

	)

140 
	#WhôePixñOfS¸ìn
(
s
Ë((s)->
whôe_pixñ
)

	)

141 
	#DeÁu…Cﬁ‹m≠OfS¸ìn
(
s
)((s)->
cm≠
)

	)

142 
	#DeÁu…DïthOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

143 
	#DeÁu…GCOfS¸ìn
(
s
Ë((s)->
deÁu…_gc
)

	)

144 
	#DeÁu…VisuÆOfS¸ìn
(
s
)((s)->
roŸ_visuÆ
)

	)

145 
	#WidthOfS¸ìn
(
s
Ë((s)->
width
)

	)

146 
	#HeightOfS¸ìn
(
s
Ë((s)->
height
)

	)

147 
	#WidthMMOfS¸ìn
(
s
Ë((s)->
mwidth
)

	)

148 
	#HeightMMOfS¸ìn
(
s
Ë((s)->
mheight
)

	)

149 
	#Pœ√sOfS¸ìn
(
s
Ë((s)->
roŸ_dïth
)

	)

150 
	#CñlsOfS¸ìn
(
s
Ë(
	`DeÁu…VisuÆOfS¸ìn
((s))->
m≠_íåõs
)

	)

151 
	#MöCm≠sOfS¸ìn
(
s
Ë((s)->
mö_m≠s
)

	)

152 
	#MaxCm≠sOfS¸ìn
(
s
Ë((s)->
max_m≠s
)

	)

153 
	#D€sSaveUndîs
(
s
Ë((s)->
ßve_undîs
)

	)

154 
	#D€sBackögSt‹e
(
s
Ë((s)->
backög_°‹e
)

	)

155 
	#EvítMaskOfS¸ìn
(
s
Ë((s)->
roŸ_öput_mask
)

	)

160 
	s_XExtD©a
 {

161 
	mnumbî
;

162 
_XExtD©a
 *
	m√xt
;

163 (*
	m‰ì_¥iv©e
)(

164 
_XExtD©a
 *
	mexãnsi⁄


166 
XPoöãr
 
	m¥iv©e_d©a
;

167 } 
	tXExtD©a
;

173 
	mexãnsi⁄
;

174 
	mmaj‹_›code
;

175 
	mfú°_evít
;

176 
	mfú°_îr‹
;

177 } 
	tXExtCodes
;

184 
	mdïth
;

185 
	mbôs_≥r_pixñ
;

186 
	msˇ∆öe_∑d
;

187 } 
	tXPixm≠F‹m©VÆues
;

194 
	mfun˘i⁄
;

195 
	m∂™e_mask
;

196 
	mf‹eground
;

197 
	mbackground
;

198 
	mlöe_width
;

199 
	mlöe_°yÀ
;

200 
	mˇp_°yÀ
;

202 
	mjoö_°yÀ
;

203 
	mfûl_°yÀ
;

205 
	mfûl_ruÀ
;

206 
	m¨c_mode
;

207 
Pixm≠
 
	mtûe
;

208 
Pixm≠
 
	m°ù∂e
;

209 
	mts_x_‹igö
;

210 
	mts_y_‹igö
;

211 
F⁄t
 
	mf⁄t
;

212 
	msubwödow_mode
;

213 
Boﬁ
 
	mgøphics_exposuªs
;

214 
	m˛ù_x_‹igö
;

215 
	m˛ù_y_‹igö
;

216 
Pixm≠
 
	m˛ù_mask
;

217 
	mdash_off£t
;

218 
	mdashes
;

219 } 
	tXGCVÆues
;

226 
	g_XGC


227 #ifde‡
	tXLIB_ILLEGAL_ACCESS


229 
XExtD©a
 *
	gext_d©a
;

230 
GC⁄ãxt
 
	ggid
;

234 *
	tGC
;

240 
XExtD©a
 *
	mext_d©a
;

241 
VisuÆID
 
	mvisuÆid
;

242 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

243 
	mc_˛ass
;

245 
	m˛ass
;

247 
	mªd_mask
, 
	mgªí_mask
, 
	mblue_mask
;

248 
	mbôs_≥r_rgb
;

249 
	mm≠_íåõs
;

250 } 
	tVisuÆ
;

256 
	mdïth
;

257 
	mnvisuÆs
;

258 
VisuÆ
 *
	mvisuÆs
;

259 } 
	tDïth
;

267 
	g_XDi•œy
;

270 
XExtD©a
 *
	mext_d©a
;

271 
_XDi•œy
 *
	mdi•œy
;

272 
Wödow
 
	mroŸ
;

273 
	mwidth
, 
	mheight
;

274 
	mmwidth
, 
	mmheight
;

275 
	mndïths
;

276 
Dïth
 *
	mdïths
;

277 
	mroŸ_dïth
;

278 
VisuÆ
 *
	mroŸ_visuÆ
;

279 
GC
 
	mdeÁu…_gc
;

280 
Cﬁ‹m≠
 
	mcm≠
;

281 
	mwhôe_pixñ
;

282 
	mbœck_pixñ
;

283 
	mmax_m≠s
, 
	mmö_m≠s
;

284 
	mbackög_°‹e
;

285 
Boﬁ
 
	mßve_undîs
;

286 
	mroŸ_öput_mask
;

287 } 
	tS¸ìn
;

293 
XExtD©a
 *
	mext_d©a
;

294 
	mdïth
;

295 
	mbôs_≥r_pixñ
;

296 
	msˇ∆öe_∑d
;

297 } 
	tS¸ìnF‹m©
;

303 
Pixm≠
 
	mbackground_pixm≠
;

304 
	mbackground_pixñ
;

305 
Pixm≠
 
	mb‹dî_pixm≠
;

306 
	mb‹dî_pixñ
;

307 
	mbô_gøvôy
;

308 
	mwö_gøvôy
;

309 
	mbackög_°‹e
;

310 
	mbackög_∂™es
;

311 
	mbackög_pixñ
;

312 
Boﬁ
 
	mßve_undî
;

313 
	mevít_mask
;

314 
	mdo_nŸ_¥›ag©e_mask
;

315 
Boﬁ
 
	movîride_ªdúe˘
;

316 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

317 
Curs‹
 
	mcurs‹
;

318 } 
	tXSëWödowAâribuãs
;

321 
	mx
, 
	my
;

322 
	mwidth
, 
	mheight
;

323 
	mb‹dî_width
;

324 
	mdïth
;

325 
VisuÆ
 *
	mvisuÆ
;

326 
Wödow
 
	mroŸ
;

327 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

328 
	mc_˛ass
;

330 
	m˛ass
;

332 
	mbô_gøvôy
;

333 
	mwö_gøvôy
;

334 
	mbackög_°‹e
;

335 
	mbackög_∂™es
;

336 
	mbackög_pixñ
;

337 
Boﬁ
 
	mßve_undî
;

338 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

339 
Boﬁ
 
	mm≠_ö°ÆÀd
;

340 
	mm≠_°©e
;

341 
	mÆl_evít_masks
;

342 
	myour_evít_mask
;

343 
	mdo_nŸ_¥›ag©e_mask
;

344 
Boﬁ
 
	movîride_ªdúe˘
;

345 
S¸ìn
 *
	ms¸ìn
;

346 } 
	tXWödowAâribuãs
;

354 
	mÁmûy
;

355 
	mÀngth
;

356 *
	maddªss
;

357 } 
	tXHo°Addªss
;

363 
	mty≥Àngth
;

364 
	mvÆuñígth
;

365 *
	mty≥
;

366 *
	mvÆue
;

367 } 
	tXSîvîI¡î¥ëedAddªss
;

372 
	s_XImage
 {

373 
	mwidth
, 
	mheight
;

374 
	mxoff£t
;

375 
	mf‹m©
;

376 *
	md©a
;

377 
	mbyã_‹dî
;

378 
	mbôm≠_unô
;

379 
	mbôm≠_bô_‹dî
;

380 
	mbôm≠_∑d
;

381 
	mdïth
;

382 
	mbyãs_≥r_löe
;

383 
	mbôs_≥r_pixñ
;

384 
	mªd_mask
;

385 
	mgªí_mask
;

386 
	mblue_mask
;

387 
XPoöãr
 
	mobd©a
;

388 
	sfuncs
 {

389 
	m_XImage
 *(*
	m¸óã_image
)(

390 
	m_XDi•œy
* ,

391 
	mVisuÆ
* ,

400 (*
	mde°roy_image
Ë(
	m_XImage
 *);

401 (*
	mgë_pixñ
Ë(
	m_XImage
 *, , );

402 (*
	mput_pixñ
Ë(
	m_XImage
 *, , , );

403 
	m_XImage
 *(*
	msub_image
)(_XImage *, , , , );

404 (*
	madd_pixñ
Ë(
	m_XImage
 *, );

405 } 
	mf
;

406 } 
	tXImage
;

412 
	mx
, 
	my
;

413 
	mwidth
, 
	mheight
;

414 
	mb‹dî_width
;

415 
Wödow
 
	msiblög
;

416 
	m°ack_mode
;

417 } 
	tXWödowCh™ges
;

423 
	mpixñ
;

424 
	mªd
, 
	mgªí
, 
	mblue
;

425 
	mÊags
;

426 
	m∑d
;

427 } 
	tXCﬁ‹
;

435 
	mx1
, 
	my1
, 
	mx2
, 
	my2
;

436 } 
	tXSegmít
;

439 
	mx
, 
	my
;

440 } 
	tXPoöt
;

443 
	mx
, 
	my
;

444 
	mwidth
, 
	mheight
;

445 } 
	tXRe˘™gÀ
;

448 
	mx
, 
	my
;

449 
	mwidth
, 
	mheight
;

450 
	m™gÀ1
, 
	m™gÀ2
;

451 } 
	tXArc
;

457 
	mkey_˛ick_≥r˚¡
;

458 
	mbñl_≥r˚¡
;

459 
	mbñl_pôch
;

460 
	mbñl_duøti⁄
;

461 
	mÀd
;

462 
	mÀd_mode
;

463 
	mkey
;

464 
	mauto_ª≥©_mode
;

465 } 
	tXKeybﬂrdC⁄åﬁ
;

470 
	mkey_˛ick_≥r˚¡
;

471 
	mbñl_≥r˚¡
;

472 
	mbñl_pôch
, 
	mbñl_duøti⁄
;

473 
	mÀd_mask
;

474 
	mglobÆ_auto_ª≥©
;

475 
	mauto_ª≥©s
[32];

476 } 
	tXKeybﬂrdSèã
;

481 
Time
 
	mtime
;

482 
	mx
, 
	my
;

483 } 
	tXTimeCo‹d
;

488 
	mmax_key≥rmod
;

489 
KeyCode
 *
	mmodifõrm≠
;

490 } 
	tXModifõrKeym≠
;

498 #i‚de‡
XLIB_ILLEGAL_ACCESS


499 
_XDi•œy
 
	tDi•œy
;

502 
	g_XPriv©e
;

503 
	g_XrmHashBuckëRec
;

506 #ifde‡
XLIB_ILLEGAL_ACCESS


507 
	t_XDi•œy


510 
XExtD©a
 *
	gext_d©a
;

511 
_XPriv©e
 *
	g¥iv©e1
;

512 
	gfd
;

513 
	g¥iv©e2
;

514 
	g¥Ÿo_maj‹_vîsi⁄
;

515 
	g¥Ÿo_mö‹_vîsi⁄
;

516 *
	gvíd‹
;

517 
XID
 
	g¥iv©e3
;

518 
XID
 
	g¥iv©e4
;

519 
XID
 
	g¥iv©e5
;

520 
	g¥iv©e6
;

521 
XID
 (*
ªsour˚_Æloc
)(

522 
	g_XDi•œy
*

524 
	gbyã_‹dî
;

525 
	gbôm≠_unô
;

526 
	gbôm≠_∑d
;

527 
	gbôm≠_bô_‹dî
;

528 
	gnf‹m©s
;

529 
S¸ìnF‹m©
 *
	gpixm≠_f‹m©
;

530 
	g¥iv©e8
;

531 
	gªÀa£
;

532 
_XPriv©e
 *
	g¥iv©e9
, *
	g¥iv©e10
;

533 
	gqÀn
;

534 
	gœ°_ªque°_ªad
;

535 
	gªque°
;

536 
XPoöãr
 
	g¥iv©e11
;

537 
XPoöãr
 
	g¥iv©e12
;

538 
XPoöãr
 
	g¥iv©e13
;

539 
XPoöãr
 
	g¥iv©e14
;

540 
	gmax_ªque°_size
;

541 
_XrmHashBuckëRec
 *
	gdb
;

542 (*
	g¥iv©e15
)(

543 
	g_XDi•œy
*

545 *
	gdi•œy_«me
;

546 
	gdeÁu…_s¸ìn
;

547 
	gns¸ìns
;

548 
S¸ìn
 *
	gs¸ìns
;

549 
	gmŸi⁄_buf„r
;

550 
	g¥iv©e16
;

551 
	gmö_keycode
;

552 
	gmax_keycode
;

553 
XPoöãr
 
	g¥iv©e17
;

554 
XPoöãr
 
	g¥iv©e18
;

555 
	g¥iv©e19
;

556 *
	gxdeÁu…s
;

559 #ifde‡
	tXLIB_ILLEGAL_ACCESS


560 
	tDi•œy
,

562 *
	t_XPrivDi•œy
;

564 #unde‡
_XEVENT_


565 #i‚de‡
_XEVENT_


570 
	mty≥
;

571 
	m£rül
;

572 
Boﬁ
 
	m£nd_evít
;

573 
Di•œy
 *
	mdi•œy
;

574 
Wödow
 
	mwödow
;

575 
Wödow
 
	mroŸ
;

576 
Wödow
 
	msubwödow
;

577 
Time
 
	mtime
;

578 
	mx
, 
	my
;

579 
	mx_roŸ
, 
	my_roŸ
;

580 
	m°©e
;

581 
	mkeycode
;

582 
Boﬁ
 
	mßme_s¸ìn
;

583 } 
	tXKeyEvít
;

584 
XKeyEvít
 
	tXKeyPªs£dEvít
;

585 
XKeyEvít
 
	tXKeyRñó£dEvít
;

588 
	mty≥
;

589 
	m£rül
;

590 
Boﬁ
 
	m£nd_evít
;

591 
Di•œy
 *
	mdi•œy
;

592 
Wödow
 
	mwödow
;

593 
Wödow
 
	mroŸ
;

594 
Wödow
 
	msubwödow
;

595 
Time
 
	mtime
;

596 
	mx
, 
	my
;

597 
	mx_roŸ
, 
	my_roŸ
;

598 
	m°©e
;

599 
	mbuâ⁄
;

600 
Boﬁ
 
	mßme_s¸ìn
;

601 } 
	tXBuâ⁄Evít
;

602 
XBuâ⁄Evít
 
	tXBuâ⁄Pªs£dEvít
;

603 
XBuâ⁄Evít
 
	tXBuâ⁄Rñó£dEvít
;

606 
	mty≥
;

607 
	m£rül
;

608 
Boﬁ
 
	m£nd_evít
;

609 
Di•œy
 *
	mdi•œy
;

610 
Wödow
 
	mwödow
;

611 
Wödow
 
	mroŸ
;

612 
Wödow
 
	msubwödow
;

613 
Time
 
	mtime
;

614 
	mx
, 
	my
;

615 
	mx_roŸ
, 
	my_roŸ
;

616 
	m°©e
;

617 
	mis_höt
;

618 
Boﬁ
 
	mßme_s¸ìn
;

619 } 
	tXMŸi⁄Evít
;

620 
XMŸi⁄Evít
 
	tXPoöãrMovedEvít
;

623 
	mty≥
;

624 
	m£rül
;

625 
Boﬁ
 
	m£nd_evít
;

626 
Di•œy
 *
	mdi•œy
;

627 
Wödow
 
	mwödow
;

628 
Wödow
 
	mroŸ
;

629 
Wödow
 
	msubwödow
;

630 
Time
 
	mtime
;

631 
	mx
, 
	my
;

632 
	mx_roŸ
, 
	my_roŸ
;

633 
	mmode
;

634 
	mdëaû
;

639 
Boﬁ
 
	mßme_s¸ìn
;

640 
Boﬁ
 
	mfocus
;

641 
	m°©e
;

642 } 
	tXCrossögEvít
;

643 
XCrossögEvít
 
	tXE¡îWödowEvít
;

644 
XCrossögEvít
 
	tXLóveWödowEvít
;

647 
	mty≥
;

648 
	m£rül
;

649 
Boﬁ
 
	m£nd_evít
;

650 
Di•œy
 *
	mdi•œy
;

651 
Wödow
 
	mwödow
;

652 
	mmode
;

654 
	mdëaû
;

660 } 
	tXFocusCh™geEvít
;

661 
XFocusCh™geEvít
 
	tXFocusInEvít
;

662 
XFocusCh™geEvít
 
	tXFocusOutEvít
;

666 
	mty≥
;

667 
	m£rül
;

668 
Boﬁ
 
	m£nd_evít
;

669 
Di•œy
 *
	mdi•œy
;

670 
Wödow
 
	mwödow
;

671 
	mkey_ve˘‹
[32];

672 } 
	tXKeym≠Evít
;

675 
	mty≥
;

676 
	m£rül
;

677 
Boﬁ
 
	m£nd_evít
;

678 
Di•œy
 *
	mdi•œy
;

679 
Wödow
 
	mwödow
;

680 
	mx
, 
	my
;

681 
	mwidth
, 
	mheight
;

682 
	mcou¡
;

683 } 
	tXExpo£Evít
;

686 
	mty≥
;

687 
	m£rül
;

688 
Boﬁ
 
	m£nd_evít
;

689 
Di•œy
 *
	mdi•œy
;

690 
DøwabÀ
 
	mdøwabÀ
;

691 
	mx
, 
	my
;

692 
	mwidth
, 
	mheight
;

693 
	mcou¡
;

694 
	mmaj‹_code
;

695 
	mmö‹_code
;

696 } 
	tXGøphicsExpo£Evít
;

699 
	mty≥
;

700 
	m£rül
;

701 
Boﬁ
 
	m£nd_evít
;

702 
Di•œy
 *
	mdi•œy
;

703 
DøwabÀ
 
	mdøwabÀ
;

704 
	mmaj‹_code
;

705 
	mmö‹_code
;

706 } 
	tXNoExpo£Evít
;

709 
	mty≥
;

710 
	m£rül
;

711 
Boﬁ
 
	m£nd_evít
;

712 
Di•œy
 *
	mdi•œy
;

713 
Wödow
 
	mwödow
;

714 
	m°©e
;

715 } 
	tXVisibûôyEvít
;

718 
	mty≥
;

719 
	m£rül
;

720 
Boﬁ
 
	m£nd_evít
;

721 
Di•œy
 *
	mdi•œy
;

722 
Wödow
 
	m∑ª¡
;

723 
Wödow
 
	mwödow
;

724 
	mx
, 
	my
;

725 
	mwidth
, 
	mheight
;

726 
	mb‹dî_width
;

727 
Boﬁ
 
	movîride_ªdúe˘
;

728 } 
	tXCª©eWödowEvít
;

731 
	mty≥
;

732 
	m£rül
;

733 
Boﬁ
 
	m£nd_evít
;

734 
Di•œy
 *
	mdi•œy
;

735 
Wödow
 
	mevít
;

736 
Wödow
 
	mwödow
;

737 } 
	tXDe°royWödowEvít
;

740 
	mty≥
;

741 
	m£rül
;

742 
Boﬁ
 
	m£nd_evít
;

743 
Di•œy
 *
	mdi•œy
;

744 
Wödow
 
	mevít
;

745 
Wödow
 
	mwödow
;

746 
Boﬁ
 
	m‰om_c⁄figuª
;

747 } 
	tXUnm≠Evít
;

750 
	mty≥
;

751 
	m£rül
;

752 
Boﬁ
 
	m£nd_evít
;

753 
Di•œy
 *
	mdi•œy
;

754 
Wödow
 
	mevít
;

755 
Wödow
 
	mwödow
;

756 
Boﬁ
 
	movîride_ªdúe˘
;

757 } 
	tXM≠Evít
;

760 
	mty≥
;

761 
	m£rül
;

762 
Boﬁ
 
	m£nd_evít
;

763 
Di•œy
 *
	mdi•œy
;

764 
Wödow
 
	m∑ª¡
;

765 
Wödow
 
	mwödow
;

766 } 
	tXM≠Reque°Evít
;

769 
	mty≥
;

770 
	m£rül
;

771 
Boﬁ
 
	m£nd_evít
;

772 
Di•œy
 *
	mdi•œy
;

773 
Wödow
 
	mevít
;

774 
Wödow
 
	mwödow
;

775 
Wödow
 
	m∑ª¡
;

776 
	mx
, 
	my
;

777 
Boﬁ
 
	movîride_ªdúe˘
;

778 } 
	tXRï¨ítEvít
;

781 
	mty≥
;

782 
	m£rül
;

783 
Boﬁ
 
	m£nd_evít
;

784 
Di•œy
 *
	mdi•œy
;

785 
Wödow
 
	mevít
;

786 
Wödow
 
	mwödow
;

787 
	mx
, 
	my
;

788 
	mwidth
, 
	mheight
;

789 
	mb‹dî_width
;

790 
Wödow
 
	mabove
;

791 
Boﬁ
 
	movîride_ªdúe˘
;

792 } 
	tXC⁄figuªEvít
;

795 
	mty≥
;

796 
	m£rül
;

797 
Boﬁ
 
	m£nd_evít
;

798 
Di•œy
 *
	mdi•œy
;

799 
Wödow
 
	mevít
;

800 
Wödow
 
	mwödow
;

801 
	mx
, 
	my
;

802 } 
	tXGøvôyEvít
;

805 
	mty≥
;

806 
	m£rül
;

807 
Boﬁ
 
	m£nd_evít
;

808 
Di•œy
 *
	mdi•œy
;

809 
Wödow
 
	mwödow
;

810 
	mwidth
, 
	mheight
;

811 } 
	tXResizeReque°Evít
;

814 
	mty≥
;

815 
	m£rül
;

816 
Boﬁ
 
	m£nd_evít
;

817 
Di•œy
 *
	mdi•œy
;

818 
Wödow
 
	m∑ª¡
;

819 
Wödow
 
	mwödow
;

820 
	mx
, 
	my
;

821 
	mwidth
, 
	mheight
;

822 
	mb‹dî_width
;

823 
Wödow
 
	mabove
;

824 
	mdëaû
;

825 
	mvÆue_mask
;

826 } 
	tXC⁄figuªReque°Evít
;

829 
	mty≥
;

830 
	m£rül
;

831 
Boﬁ
 
	m£nd_evít
;

832 
Di•œy
 *
	mdi•œy
;

833 
Wödow
 
	mevít
;

834 
Wödow
 
	mwödow
;

835 
	m∂a˚
;

836 } 
	tXCúcuœãEvít
;

839 
	mty≥
;

840 
	m£rül
;

841 
Boﬁ
 
	m£nd_evít
;

842 
Di•œy
 *
	mdi•œy
;

843 
Wödow
 
	m∑ª¡
;

844 
Wödow
 
	mwödow
;

845 
	m∂a˚
;

846 } 
	tXCúcuœãReque°Evít
;

849 
	mty≥
;

850 
	m£rül
;

851 
Boﬁ
 
	m£nd_evít
;

852 
Di•œy
 *
	mdi•œy
;

853 
Wödow
 
	mwödow
;

854 
Atom
 
	m©om
;

855 
Time
 
	mtime
;

856 
	m°©e
;

857 } 
	tXPr›îtyEvít
;

860 
	mty≥
;

861 
	m£rül
;

862 
Boﬁ
 
	m£nd_evít
;

863 
Di•œy
 *
	mdi•œy
;

864 
Wödow
 
	mwödow
;

865 
Atom
 
	m£À˘i⁄
;

866 
Time
 
	mtime
;

867 } 
	tXSñe˘i⁄CÀ¨Evít
;

870 
	mty≥
;

871 
	m£rül
;

872 
Boﬁ
 
	m£nd_evít
;

873 
Di•œy
 *
	mdi•œy
;

874 
Wödow
 
	mow√r
;

875 
Wödow
 
	mªque°‹
;

876 
Atom
 
	m£À˘i⁄
;

877 
Atom
 
	mèrgë
;

878 
Atom
 
	m¥›îty
;

879 
Time
 
	mtime
;

880 } 
	tXSñe˘i⁄Reque°Evít
;

883 
	mty≥
;

884 
	m£rül
;

885 
Boﬁ
 
	m£nd_evít
;

886 
Di•œy
 *
	mdi•œy
;

887 
Wödow
 
	mªque°‹
;

888 
Atom
 
	m£À˘i⁄
;

889 
Atom
 
	mèrgë
;

890 
Atom
 
	m¥›îty
;

891 
Time
 
	mtime
;

892 } 
	tXSñe˘i⁄Evít
;

895 
	mty≥
;

896 
	m£rül
;

897 
Boﬁ
 
	m£nd_evít
;

898 
Di•œy
 *
	mdi•œy
;

899 
Wödow
 
	mwödow
;

900 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

901 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

902 
Boﬁ
 
	mc_√w
;

904 
Boﬁ
 
	m√w
;

906 
	m°©e
;

907 } 
	tXCﬁ‹m≠Evít
;

910 
	mty≥
;

911 
	m£rül
;

912 
Boﬁ
 
	m£nd_evít
;

913 
Di•œy
 *
	mdi•œy
;

914 
Wödow
 
	mwödow
;

915 
Atom
 
	mmesßge_ty≥
;

916 
	mf‹m©
;

918 
	mb
[20];

919 
	ms
[10];

920 
	ml
[5];

921 } 
	md©a
;

922 } 
	tXClõ¡MesßgeEvít
;

925 
	mty≥
;

926 
	m£rül
;

927 
Boﬁ
 
	m£nd_evít
;

928 
Di•œy
 *
	mdi•œy
;

929 
Wödow
 
	mwödow
;

930 
	mªque°
;

932 
	mfú°_keycode
;

933 
	mcou¡
;

934 } 
	tXM≠pögEvít
;

937 
	mty≥
;

938 
Di•œy
 *
	mdi•œy
;

939 
XID
 
	mªsour˚id
;

940 
	m£rül
;

941 
	mîr‹_code
;

942 
	mªque°_code
;

943 
	mmö‹_code
;

944 } 
	tXEº‹Evít
;

947 
	mty≥
;

948 
	m£rül
;

949 
Boﬁ
 
	m£nd_evít
;

950 
Di•œy
 *
	mdi•œy
;

951 
Wödow
 
	mwödow
;

952 } 
	tXAnyEvít
;

962 
	mty≥
;

963 
	m£rül
;

964 
Boﬁ
 
	m£nd_evít
;

965 
Di•œy
 *
	mdi•œy
;

966 
	mexãnsi⁄
;

967 
	mevty≥
;

968 } 
	tXGíîicEvít
;

971 
	mty≥
;

972 
	m£rül
;

973 
Boﬁ
 
	m£nd_evít
;

974 
Di•œy
 *
	mdi•œy
;

975 
	mexãnsi⁄
;

976 
	mevty≥
;

977 
	mcookõ
;

978 *
	md©a
;

979 } 
	tXGíîicEvítCookõ
;

985 
	u_XEvít
 {

986 
	mty≥
;

987 
XAnyEvít
 
	mx™y
;

988 
XKeyEvít
 
	mxkey
;

989 
XBuâ⁄Evít
 
	mxbuâ⁄
;

990 
XMŸi⁄Evít
 
	mxmŸi⁄
;

991 
XCrossögEvít
 
	mx¸ossög
;

992 
XFocusCh™geEvít
 
	mxfocus
;

993 
XExpo£Evít
 
	mxexpo£
;

994 
XGøphicsExpo£Evít
 
	mxgøphic£xpo£
;

995 
XNoExpo£Evít
 
	mxn€xpo£
;

996 
XVisibûôyEvít
 
	mxvisibûôy
;

997 
XCª©eWödowEvít
 
	mx¸óãwödow
;

998 
XDe°royWödowEvít
 
	mxde°roywödow
;

999 
XUnm≠Evít
 
	mxunm≠
;

1000 
XM≠Evít
 
	mxm≠
;

1001 
XM≠Reque°Evít
 
	mxm≠ªque°
;

1002 
XRï¨ítEvít
 
	mxª∑ª¡
;

1003 
XC⁄figuªEvít
 
	mxc⁄figuª
;

1004 
XGøvôyEvít
 
	mxgøvôy
;

1005 
XResizeReque°Evít
 
	mxªsizîeque°
;

1006 
XC⁄figuªReque°Evít
 
	mxc⁄figuªªque°
;

1007 
XCúcuœãEvít
 
	mxcúcuœã
;

1008 
XCúcuœãReque°Evít
 
	mxcúcuœãªque°
;

1009 
XPr›îtyEvít
 
	mx¥›îty
;

1010 
XSñe˘i⁄CÀ¨Evít
 
	mx£À˘i⁄˛ór
;

1011 
XSñe˘i⁄Reque°Evít
 
	mx£À˘i⁄ªque°
;

1012 
XSñe˘i⁄Evít
 
	mx£À˘i⁄
;

1013 
XCﬁ‹m≠Evít
 
	mxcﬁ‹m≠
;

1014 
XClõ¡MesßgeEvít
 
	mx˛õ¡
;

1015 
XM≠pögEvít
 
	mxm≠pög
;

1016 
XEº‹Evít
 
	mxîr‹
;

1017 
XKeym≠Evít
 
	mxkeym≠
;

1018 
XGíîicEvít
 
	mxgíîic
;

1019 
XGíîicEvítCookõ
 
	mxcookõ
;

1020 
	m∑d
[24];

1021 } 
	tXEvít
;

1024 
	#XAŒocID
(
dpy
Ë((*((
_XPrivDi•œy
)dpy)->
ªsour˚_Æloc
)((dpy)))

	)

1030 
	mlbórög
;

1031 
	mrbórög
;

1032 
	mwidth
;

1033 
	mas˚¡
;

1034 
	mdes˚¡
;

1035 
	m©åibuãs
;

1036 } 
	tXCh¨Såu˘
;

1043 
Atom
 
	m«me
;

1044 
	mˇrd32
;

1045 } 
	tXF⁄tPr›
;

1048 
XExtD©a
 *
	mext_d©a
;

1049 
F⁄t
 
	mfid
;

1050 
	mdúe˘i⁄
;

1051 
	mmö_ch¨_‹_byã2
;

1052 
	mmax_ch¨_‹_byã2
;

1053 
	mmö_byã1
;

1054 
	mmax_byã1
;

1055 
Boﬁ
 
	mÆl_ch¨s_exi°
;

1056 
	mdeÁu…_ch¨
;

1057 
	mn_¥›îtõs
;

1058 
XF⁄tPr›
 *
	m¥›îtõs
;

1059 
XCh¨Såu˘
 
	mmö_bounds
;

1060 
XCh¨Såu˘
 
	mmax_bounds
;

1061 
XCh¨Såu˘
 *
	m≥r_ch¨
;

1062 
	mas˚¡
;

1063 
	mdes˚¡
;

1064 } 
	tXF⁄tSåu˘
;

1070 *
	mch¨s
;

1071 
	mnch¨s
;

1072 
	mdñè
;

1073 
F⁄t
 
	mf⁄t
;

1074 } 
	tXTextIãm
;

1077 
	mbyã1
;

1078 
	mbyã2
;

1079 } 
	tXCh¨2b
;

1082 
XCh¨2b
 *
	mch¨s
;

1083 
	mnch¨s
;

1084 
	mdñè
;

1085 
F⁄t
 
	mf⁄t
;

1086 } 
	tXTextIãm16
;

1089 uni⁄ { 
Di•œy
 *
	mdi•œy
;

1090 
GC
 
	mgc
;

1091 
VisuÆ
 *
	mvisuÆ
;

1092 
S¸ìn
 *
	ms¸ìn
;

1093 
S¸ìnF‹m©
 *
	mpixm≠_f‹m©
;

1094 
XF⁄tSåu˘
 *
	mf⁄t
; } 
	tXED©aObje˘
;

1097 
XRe˘™gÀ
 
	mmax_ök_exã¡
;

1098 
XRe˘™gÀ
 
	mmax_logiˇl_exã¡
;

1099 } 
	tXF⁄tSëExã¡s
;

1105 
_XOM
 *
	tXOM
;

1106 
_XOC
 *
	tXOC
, *
	tXF⁄tSë
;

1109 *
	mch¨s
;

1110 
	mnch¨s
;

1111 
	mdñè
;

1112 
XF⁄tSë
 
	mf⁄t_£t
;

1113 } 
	tXmbTextIãm
;

1116 
wch¨_t
 *
	mch¨s
;

1117 
	mnch¨s
;

1118 
	mdñè
;

1119 
XF⁄tSë
 
	mf⁄t_£t
;

1120 } 
	tXwcTextIãm
;

1122 
	#XNRequúedCh¨Së
 "ªquúedCh¨Së"

	)

1123 
	#XNQuîyOrõ¡©i⁄
 "quîyOrõ¡©i⁄"

	)

1124 
	#XNBa£F⁄tName
 "ba£F⁄tName"

	)

1125 
	#XNOMAutom©ic
 "omAutom©ic"

	)

1126 
	#XNMissögCh¨Së
 "missögCh¨Së"

	)

1127 
	#XNDeÁu…Såög
 "deÁu…Såög"

	)

1128 
	#XNOrõ¡©i⁄
 "‹õ¡©i⁄"

	)

1129 
	#XNDúe˘i⁄ÆDïídítDøwög
 "dúe˘i⁄ÆDïídítDøwög"

	)

1130 
	#XNC⁄ãxtuÆDøwög
 "c⁄ãxtuÆDøwög"

	)

1131 
	#XNF⁄tInfo
 "f⁄tInfo"

	)

1134 
	mch¨£t_cou¡
;

1135 **
	mch¨£t_li°
;

1136 } 
	tXOMCh¨SëLi°
;

1139 
	mXOMOrõ¡©i⁄_LTR_TTB
,

1140 
	mXOMOrõ¡©i⁄_RTL_TTB
,

1141 
	mXOMOrõ¡©i⁄_TTB_LTR
,

1142 
	mXOMOrõ¡©i⁄_TTB_RTL
,

1143 
	mXOMOrõ¡©i⁄_C⁄ãxt


1144 } 
	tXOrõ¡©i⁄
;

1147 
	mnum_‹õ¡©i⁄
;

1148 
XOrõ¡©i⁄
 *
	m‹õ¡©i⁄
;

1149 } 
	tXOMOrõ¡©i⁄
;

1152 
	mnum_f⁄t
;

1153 
XF⁄tSåu˘
 **
	mf⁄t_°ru˘_li°
;

1154 **
	mf⁄t_«me_li°
;

1155 } 
	tXOMF⁄tInfo
;

1157 
_XIM
 *
	tXIM
;

1158 
_XIC
 *
	tXIC
;

1160 (*
	tXIMProc
)(

1161 
	tXIM
,

1162 
	tXPoöãr
,

1163 
	tXPoöãr


1166 
	$Boﬁ
 (*
	tXICProc
)(

1167 
	tXIC
,

1168 
	tXPoöãr
,

1169 
	tXPoöãr


1172 (*
	tXIDProc
)(

1173 
	tDi•œy
*,

1174 
	tXPoöãr
,

1175 
	tXPoöãr


1178 
	tXIMStyÀ
;

1181 
cou¡_°yÀs
;

1182 
XIMStyÀ
 *
suµ‹ãd_°yÀs
;

1183 } 
	tXIMStyÀs
;

1185 
	#XIMPªedôAªa
 0x0001L

	)

1186 
	#XIMPªedôCÆlbacks
 0x0002L

	)

1187 
	#XIMPªedôPosôi⁄
 0x0004L

	)

1188 
	#XIMPªedôNŸhög
 0x0008L

	)

1189 
	#XIMPªedôN⁄e
 0x0010L

	)

1190 
	#XIMSètusAªa
 0x0100L

	)

1191 
	#XIMSètusCÆlbacks
 0x0200L

	)

1192 
	#XIMSètusNŸhög
 0x0400L

	)

1193 
	#XIMSètusN⁄e
 0x0800L

	)

1195 
	#XNVaNe°edLi°
 "XNVaNe°edLi°"

	)

1196 
	#XNQuîyI≈utStyÀ
 "quîyI≈utStyÀ"

	)

1197 
	#XNClõ¡Wödow
 "˛õ¡Wödow"

	)

1198 
	#XNI≈utStyÀ
 "öputStyÀ"

	)

1199 
	#XNFocusWödow
 "focusWödow"

	)

1200 
	#XNResour˚Name
 "ªsour˚Name"

	)

1201 
	#XNResour˚Cœss
 "ªsour˚Cœss"

	)

1202 
	#XNGeomëryCÆlback
 "geomëryCÆlback"

	)

1203 
	#XNDe°royCÆlback
 "de°royCÆlback"

	)

1204 
	#XNFûãrEvíts
 "fûãrEvíts"

	)

1205 
	#XNPªedôSèπCÆlback
 "¥ìdôSèπCÆlback"

	)

1206 
	#XNPªedôD⁄eCÆlback
 "¥ìdôD⁄eCÆlback"

	)

1207 
	#XNPªedôDøwCÆlback
 "¥ìdôDøwCÆlback"

	)

1208 
	#XNPªedôC¨ëCÆlback
 "¥ìdôC¨ëCÆlback"

	)

1209 
	#XNPªedôSèãNŸifyCÆlback
 "¥ìdôSèãNŸifyCÆlback"

	)

1210 
	#XNPªedôAâribuãs
 "¥ìdôAâribuãs"

	)

1211 
	#XNSètusSèπCÆlback
 "°©usSèπCÆlback"

	)

1212 
	#XNSètusD⁄eCÆlback
 "°©usD⁄eCÆlback"

	)

1213 
	#XNSètusDøwCÆlback
 "°©usDøwCÆlback"

	)

1214 
	#XNSètusAâribuãs
 "°©usAâribuãs"

	)

1215 
	#XNAªa
 "¨ó"

	)

1216 
	#XNAªaNìded
 "¨óNìded"

	)

1217 
	#XNSpŸLoˇti⁄
 "•ŸLoˇti⁄"

	)

1218 
	#XNCﬁ‹m≠
 "cﬁ‹M≠"

	)

1219 
	#XNStdCﬁ‹m≠
 "°dCﬁ‹M≠"

	)

1220 
	#XNF‹eground
 "f‹eground"

	)

1221 
	#XNBackground
 "background"

	)

1222 
	#XNBackgroundPixm≠
 "backgroundPixm≠"

	)

1223 
	#XNF⁄tSë
 "f⁄tSë"

	)

1224 
	#XNLöeS∑˚
 "löeS∑˚"

	)

1225 
	#XNCurs‹
 "curs‹"

	)

1227 
	#XNQuîyIMVÆuesLi°
 "quîyIMVÆuesLi°"

	)

1228 
	#XNQuîyICVÆuesLi°
 "quîyICVÆuesLi°"

	)

1229 
	#XNVisibÀPosôi⁄
 "visibÀPosôi⁄"

	)

1230 
	#XNR6PªedôCÆlback
 "r6PªedôCÆlback"

	)

1231 
	#XNSåögC⁄vîsi⁄CÆlback
 "°rögC⁄vîsi⁄CÆlback"

	)

1232 
	#XNSåögC⁄vîsi⁄
 "°rögC⁄vîsi⁄"

	)

1233 
	#XNRe£tSèã
 "ª£tSèã"

	)

1234 
	#XNHŸKey
 "hŸKey"

	)

1235 
	#XNHŸKeySèã
 "hŸKeySèã"

	)

1236 
	#XNPªedôSèã
 "¥ìdôSèã"

	)

1237 
	#XNSï¨©‹ofNe°edLi°
 "£∑øt‹ofNe°edLi°"

	)

1239 
	#XBuf„rOvîÊow
 -1

	)

1240 
	#XLookupN⁄e
 1

	)

1241 
	#XLookupCh¨s
 2

	)

1242 
	#XLookupKeySym
 3

	)

1243 
	#XLookupBŸh
 4

	)

1245 *
	tXVaNe°edLi°
;

1248 
XPoöãr
 
˛õ¡_d©a
;

1249 
XIMProc
 
ˇŒback
;

1250 } 
	tXIMCÆlback
;

1253 
XPoöãr
 
˛õ¡_d©a
;

1254 
XICProc
 
ˇŒback
;

1255 } 
	tXICCÆlback
;

1257 
	tXIMFìdback
;

1259 
	#XIMRevî£
 1L

	)

1260 
	#XIMUndîlöe
 (1L<<1)

	)

1261 
	#XIMHighlight
 (1L<<2)

	)

1262 
	#XIMPrim¨y
 (1L<<5)

	)

1263 
	#XIMSec⁄d¨y
 (1L<<6)

	)

1264 
	#XIMTîtüry
 (1L<<7)

	)

1265 
	#XIMVisibÀToF‹w¨d
 (1L<<8)

	)

1266 
	#XIMVisibÀToBackw‹d
 (1L<<9)

	)

1267 
	#XIMVisibÀToCíãr
 (1L<<10)

	)

1269 
	s_XIMText
 {

1270 
Àngth
;

1271 
XIMFìdback
 *
„edback
;

1272 
Boﬁ
 
ícodög_is_wch¨
;

1274 *
mu…i_byã
;

1275 
wch¨_t
 *
wide_ch¨
;

1276 } 
°rög
;

1277 } 
	tXIMText
;

1279 
	tXIMPªedôSèã
;

1281 
	#XIMPªedôUnKnown
 0L

	)

1282 
	#XIMPªedôE«bÀ
 1L

	)

1283 
	#XIMPªedôDißbÀ
 (1L<<1)

	)

1285 
	s_XIMPªedôSèãNŸifyCÆlbackSåu˘
 {

1286 
XIMPªedôSèã
 
°©e
;

1287 } 
	tXIMPªedôSèãNŸifyCÆlbackSåu˘
;

1289 
	tXIMRe£tSèã
;

1291 
	#XIMInôülSèã
 1L

	)

1292 
	#XIMPª£rveSèã
 (1L<<1)

	)

1294 
	tXIMSåögC⁄vîsi⁄Fìdback
;

1296 
	#XIMSåögC⁄vîsi⁄Le·Edge
 (0x00000001)

	)

1297 
	#XIMSåögC⁄vîsi⁄RightEdge
 (0x00000002)

	)

1298 
	#XIMSåögC⁄vîsi⁄T›Edge
 (0x00000004)

	)

1299 
	#XIMSåögC⁄vîsi⁄BŸtomEdge
 (0x00000008)

	)

1300 
	#XIMSåögC⁄vîsi⁄C⁄˚Æed
 (0x00000010)

	)

1301 
	#XIMSåögC⁄vîsi⁄Wøµed
 (0x00000020)

	)

1303 
	s_XIMSåögC⁄vîsi⁄Text
 {

1304 
Àngth
;

1305 
XIMSåögC⁄vîsi⁄Fìdback
 *
„edback
;

1306 
Boﬁ
 
ícodög_is_wch¨
;

1308 *
mbs
;

1309 
wch¨_t
 *
wcs
;

1310 } 
°rög
;

1311 } 
	tXIMSåögC⁄vîsi⁄Text
;

1313 
	tXIMSåögC⁄vîsi⁄Posôi⁄
;

1315 
	tXIMSåögC⁄vîsi⁄Ty≥
;

1317 
	#XIMSåögC⁄vîsi⁄Buf„r
 (0x0001)

	)

1318 
	#XIMSåögC⁄vîsi⁄Löe
 (0x0002)

	)

1319 
	#XIMSåögC⁄vîsi⁄W‹d
 (0x0003)

	)

1320 
	#XIMSåögC⁄vîsi⁄Ch¨
 (0x0004)

	)

1322 
	tXIMSåögC⁄vîsi⁄O≥øti⁄
;

1324 
	#XIMSåögC⁄vîsi⁄Sub°ôuti⁄
 (0x0001)

	)

1325 
	#XIMSåögC⁄vîsi⁄RërõvÆ
 (0x0002)

	)

1328 
XIMF‹w¨dCh¨
, 
XIMBackw¨dCh¨
,

1329 
XIMF‹w¨dW‹d
, 
XIMBackw¨dW‹d
,

1330 
XIMC¨ëUp
, 
XIMC¨ëDown
,

1331 
XIMNextLöe
, 
XIMPªviousLöe
,

1332 
XIMLöeSèπ
, 
XIMLöeEnd
,

1333 
XIMAbsﬁuãPosôi⁄
,

1334 
XIMD⁄tCh™ge


1335 } 
	tXIMC¨ëDúe˘i⁄
;

1337 
	s_XIMSåögC⁄vîsi⁄CÆlbackSåu˘
 {

1338 
XIMSåögC⁄vîsi⁄Posôi⁄
 
posôi⁄
;

1339 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1340 
XIMSåögC⁄vîsi⁄O≥øti⁄
 
›î©i⁄
;

1341 
Á˘‹
;

1342 
XIMSåögC⁄vîsi⁄Text
 *
ãxt
;

1343 } 
	tXIMSåögC⁄vîsi⁄CÆlbackSåu˘
;

1345 
	s_XIMPªedôDøwCÆlbackSåu˘
 {

1346 
ˇªt
;

1347 
chg_fú°
;

1348 
chg_Àngth
;

1349 
XIMText
 *
ãxt
;

1350 } 
	tXIMPªedôDøwCÆlbackSåu˘
;

1353 
XIMIsInvisibÀ
,

1354 
XIMIsPrim¨y
,

1355 
XIMIsSec⁄d¨y


1356 } 
	tXIMC¨ëStyÀ
;

1358 
	s_XIMPªedôC¨ëCÆlbackSåu˘
 {

1359 
posôi⁄
;

1360 
XIMC¨ëDúe˘i⁄
 
dúe˘i⁄
;

1361 
XIMC¨ëStyÀ
 
°yÀ
;

1362 } 
	tXIMPªedôC¨ëCÆlbackSåu˘
;

1365 
XIMTextTy≥
,

1366 
XIMBôm≠Ty≥


1367 } 
	tXIMSètusD©aTy≥
;

1369 
	s_XIMSètusDøwCÆlbackSåu˘
 {

1370 
XIMSètusD©aTy≥
 
ty≥
;

1372 
XIMText
 *
ãxt
;

1373 
Pixm≠
 
bôm≠
;

1374 } 
d©a
;

1375 } 
	tXIMSètusDøwCÆlbackSåu˘
;

1377 
	s_XIMHŸKeyTriggî
 {

1378 
KeySym
 
keysym
;

1379 
modifõr
;

1380 
modifõr_mask
;

1381 } 
	tXIMHŸKeyTriggî
;

1383 
	s_XIMHŸKeyTriggîs
 {

1384 
num_hŸ_key
;

1385 
XIMHŸKeyTriggî
 *
key
;

1386 } 
	tXIMHŸKeyTriggîs
;

1388 
	tXIMHŸKeySèã
;

1390 
	#XIMHŸKeySèãON
 (0x0001L)

	)

1391 
	#XIMHŸKeySèãOFF
 (0x0002L)

	)

1394 
cou¡_vÆues
;

1395 **
suµ‹ãd_vÆues
;

1396 } 
	tXIMVÆuesLi°
;

1398 
_XFUNCPROTOBEGIN


1400 #i‡
	`deföed
(
WIN32
Ë&& !deföed(
_XLIBINT_
)

1401 
	#_Xdebug
 (*
_Xdebug_p
)

	)

1404 
_Xdebug
;

1406 
XF⁄tSåu˘
 *
	`XLﬂdQuîyF⁄t
(

1407 
Di•œy
* ,

1408 
_Xc⁄°
 *

1411 
XF⁄tSåu˘
 *
	`XQuîyF⁄t
(

1412 
Di•œy
* ,

1413 
XID


1417 
XTimeCo‹d
 *
	`XGëMŸi⁄Evíts
(

1418 
Di•œy
* ,

1419 
Wödow
 ,

1420 
Time
 ,

1421 
Time
 ,

1425 
XModifõrKeym≠
 *
	`XDñëeModifõrm≠E¡ry
(

1426 
XModifõrKeym≠
* ,

1427 #i‡
NìdWidePrŸŸy≥s


1430 
KeyCode
 ,

1435 
XModifõrKeym≠
 *
	`XGëModifõrM≠pög
(

1436 
Di•œy
*

1439 
XModifõrKeym≠
 *
	`XIn£πModifõrm≠E¡ry
(

1440 
XModifõrKeym≠
* ,

1441 #i‡
NìdWidePrŸŸy≥s


1444 
KeyCode
 ,

1449 
XModifõrKeym≠
 *
	`XNewModifõrm≠
(

1453 
XImage
 *
	`XCª©eImage
(

1454 
Di•œy
* ,

1455 
VisuÆ
* ,

1465 
Sètus
 
	`XInôImage
(

1466 
XImage
*

1468 
XImage
 *
	`XGëImage
(

1469 
Di•œy
* ,

1470 
DøwabÀ
 ,

1478 
XImage
 *
	`XGëSubImage
(

1479 
Di•œy
* ,

1480 
DøwabÀ
 ,

1487 
XImage
* ,

1495 
Di•œy
 *
	`XO≥nDi•œy
(

1496 
_Xc⁄°
 *

1499 
	`XrmInôülize
(

1503 *
	`XFëchByãs
(

1504 
Di•œy
* ,

1507 *
	`XFëchBuf„r
(

1508 
Di•œy
* ,

1512 *
	`XGëAtomName
(

1513 
Di•œy
* ,

1514 
Atom


1516 
Sètus
 
	`XGëAtomNames
(

1517 
Di•œy
* ,

1518 
Atom
* ,

1522 *
	`XGëDeÁu…
(

1523 
Di•œy
* ,

1524 
_Xc⁄°
 * ,

1525 
_Xc⁄°
 *

1527 *
	`XDi•œyName
(

1528 
_Xc⁄°
 *

1530 *
	`XKeysymToSåög
(

1531 
KeySym


1534 (*
	$XSynchr⁄ize
(

1535 
Di•œy
* ,

1536 
Boﬁ


1538 
Di•œy
*

1540 (*
	`XSëA·îFun˘i⁄
(

1541 
Di•œy
* ,

1543 
Di•œy
*

1546 
Di•œy
*

1548 
Atom
 
	`XI¡înAtom
(

1549 
Di•œy
* ,

1550 
_Xc⁄°
 * ,

1551 
Boﬁ


1553 
Sètus
 
	`XI¡înAtoms
(

1554 
Di•œy
* ,

1557 
Boﬁ
 ,

1558 
Atom
*

1560 
Cﬁ‹m≠
 
	`XC›yCﬁ‹m≠AndFªe
(

1561 
Di•œy
* ,

1562 
Cﬁ‹m≠


1564 
Cﬁ‹m≠
 
	`XCª©eCﬁ‹m≠
(

1565 
Di•œy
* ,

1566 
Wödow
 ,

1567 
VisuÆ
* ,

1570 
Curs‹
 
	`XCª©ePixm≠Curs‹
(

1571 
Di•œy
* ,

1572 
Pixm≠
 ,

1573 
Pixm≠
 ,

1574 
XCﬁ‹
* ,

1575 
XCﬁ‹
* ,

1579 
Curs‹
 
	`XCª©eGlyphCurs‹
(

1580 
Di•œy
* ,

1581 
F⁄t
 ,

1582 
F⁄t
 ,

1585 
XCﬁ‹
 
_Xc⁄°
 * ,

1586 
XCﬁ‹
 
_Xc⁄°
 *

1588 
Curs‹
 
	`XCª©eF⁄tCurs‹
(

1589 
Di•œy
* ,

1592 
F⁄t
 
	`XLﬂdF⁄t
(

1593 
Di•œy
* ,

1594 
_Xc⁄°
 *

1596 
GC
 
	`XCª©eGC
(

1597 
Di•œy
* ,

1598 
DøwabÀ
 ,

1600 
XGCVÆues
*

1602 
GC⁄ãxt
 
	`XGC⁄ãxtFromGC
(

1603 
GC


1605 
	`XFlushGC
(

1606 
Di•œy
* ,

1607 
GC


1609 
Pixm≠
 
	`XCª©ePixm≠
(

1610 
Di•œy
* ,

1611 
DøwabÀ
 ,

1616 
Pixm≠
 
	`XCª©eBôm≠FromD©a
(

1617 
Di•œy
* ,

1618 
DøwabÀ
 ,

1619 
_Xc⁄°
 * ,

1623 
Pixm≠
 
	`XCª©ePixm≠FromBôm≠D©a
(

1624 
Di•œy
* ,

1625 
DøwabÀ
 ,

1633 
Wödow
 
	`XCª©eSim∂eWödow
(

1634 
Di•œy
* ,

1635 
Wödow
 ,

1644 
Wödow
 
	`XGëSñe˘i⁄Ow√r
(

1645 
Di•œy
* ,

1646 
Atom


1648 
Wödow
 
	`XCª©eWödow
(

1649 
Di•œy
* ,

1650 
Wödow
 ,

1658 
VisuÆ
* ,

1660 
XSëWödowAâribuãs
*

1662 
Cﬁ‹m≠
 *
	`XLi°In°ÆÀdCﬁ‹m≠s
(

1663 
Di•œy
* ,

1664 
Wödow
 ,

1667 **
	`XLi°F⁄ts
(

1668 
Di•œy
* ,

1669 
_Xc⁄°
 * ,

1673 **
	`XLi°F⁄tsWôhInfo
(

1674 
Di•œy
* ,

1675 
_Xc⁄°
 * ,

1678 
XF⁄tSåu˘
**

1680 **
	`XGëF⁄tP©h
(

1681 
Di•œy
* ,

1684 **
	`XLi°Exãnsi⁄s
(

1685 
Di•œy
* ,

1688 
Atom
 *
	`XLi°Pr›îtõs
(

1689 
Di•œy
* ,

1690 
Wödow
 ,

1693 
XHo°Addªss
 *
	`XLi°Ho°s
(

1694 
Di•œy
* ,

1696 
Boﬁ
*

1698 
_X_DEPRECATED


1699 
KeySym
 
	`XKeycodeToKeysym
(

1700 
Di•œy
* ,

1701 #i‡
NìdWidePrŸŸy≥s


1704 
KeyCode
 ,

1708 
KeySym
 
	`XLookupKeysym
(

1709 
XKeyEvít
* ,

1712 
KeySym
 *
	`XGëKeybﬂrdM≠pög
(

1713 
Di•œy
* ,

1714 #i‡
NìdWidePrŸŸy≥s


1717 
KeyCode
 ,

1722 
KeySym
 
	`XSåögToKeysym
(

1723 
_Xc⁄°
 *

1725 
	`XMaxReque°Size
(

1726 
Di•œy
*

1728 
	`XExãndedMaxReque°Size
(

1729 
Di•œy
*

1731 *
	`XResour˚M™agîSåög
(

1732 
Di•œy
*

1734 *
	`XS¸ìnResour˚Såög
(

1735 
S¸ìn
*

1737 
	`XDi•œyMŸi⁄Buf„rSize
(

1738 
Di•œy
*

1740 
VisuÆID
 
	`XVisuÆIDFromVisuÆ
(

1741 
VisuÆ
*

1746 
Sètus
 
	`XInôThªads
(

1750 
	`XLockDi•œy
(

1751 
Di•œy
*

1754 
	`XU∆ockDi•œy
(

1755 
Di•œy
*

1760 
XExtCodes
 *
	`XInôExãnsi⁄
(

1761 
Di•œy
* ,

1762 
_Xc⁄°
 *

1765 
XExtCodes
 *
	`XAddExãnsi⁄
(

1766 
Di•œy
*

1768 
XExtD©a
 *
	`XFödOnExãnsi⁄Li°
(

1769 
XExtD©a
** ,

1772 
XExtD©a
 **
	`XEHódOfExãnsi⁄Li°
(

1773 
XED©aObje˘


1777 
Wödow
 
	`XRoŸWödow
(

1778 
Di•œy
* ,

1781 
Wödow
 
	`XDeÁu…RoŸWödow
(

1782 
Di•œy
*

1784 
Wödow
 
	`XRoŸWödowOfS¸ìn
(

1785 
S¸ìn
*

1787 
VisuÆ
 *
	`XDeÁu…VisuÆ
(

1788 
Di•œy
* ,

1791 
VisuÆ
 *
	`XDeÁu…VisuÆOfS¸ìn
(

1792 
S¸ìn
*

1794 
GC
 
	`XDeÁu…GC
(

1795 
Di•œy
* ,

1798 
GC
 
	`XDeÁu…GCOfS¸ìn
(

1799 
S¸ìn
*

1801 
	`XBœckPixñ
(

1802 
Di•œy
* ,

1805 
	`XWhôePixñ
(

1806 
Di•œy
* ,

1809 
	`XAŒPœ√s
(

1812 
	`XBœckPixñOfS¸ìn
(

1813 
S¸ìn
*

1815 
	`XWhôePixñOfS¸ìn
(

1816 
S¸ìn
*

1818 
	`XNextReque°
(

1819 
Di•œy
*

1821 
	`XLa°KnownReque°Pro˚s£d
(

1822 
Di•œy
*

1824 *
	`XSîvîVíd‹
(

1825 
Di•œy
*

1827 *
	`XDi•œySåög
(

1828 
Di•œy
*

1830 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠
(

1831 
Di•œy
* ,

1834 
Cﬁ‹m≠
 
	`XDeÁu…Cﬁ‹m≠OfS¸ìn
(

1835 
S¸ìn
*

1837 
Di•œy
 *
	`XDi•œyOfS¸ìn
(

1838 
S¸ìn
*

1840 
S¸ìn
 *
	`XS¸ìnOfDi•œy
(

1841 
Di•œy
* ,

1844 
S¸ìn
 *
	`XDeÁu…S¸ìnOfDi•œy
(

1845 
Di•œy
*

1847 
	`XEvítMaskOfS¸ìn
(

1848 
S¸ìn
*

1851 
	`XS¸ìnNumbîOfS¸ìn
(

1852 
S¸ìn
*

1855 (*
	tXEº‹H™dÀr
) (

1856 
	tDi•œy
* ,

1857 
	tXEº‹Evít
*

1860 
XEº‹H™dÀr
 
	`XSëEº‹H™dÀr
 (

1861 
XEº‹H™dÀr


1865 (*
	tXIOEº‹H™dÀr
) (

1866 
	tDi•œy
*

1869 
XIOEº‹H™dÀr
 
	`XSëIOEº‹H™dÀr
 (

1870 
XIOEº‹H™dÀr


1874 
XPixm≠F‹m©VÆues
 *
	`XLi°Pixm≠F‹m©s
(

1875 
Di•œy
* ,

1878 *
	`XLi°Dïths
(

1879 
Di•œy
* ,

1886 
Sètus
 
	`XRec⁄figuªWMWödow
(

1887 
Di•œy
* ,

1888 
Wödow
 ,

1891 
XWödowCh™ges
*

1894 
Sètus
 
	`XGëWMPrŸocﬁs
(

1895 
Di•œy
* ,

1896 
Wödow
 ,

1897 
Atom
** ,

1900 
Sètus
 
	`XSëWMPrŸocﬁs
(

1901 
Di•œy
* ,

1902 
Wödow
 ,

1903 
Atom
* ,

1906 
Sètus
 
	`XIc⁄ifyWödow
(

1907 
Di•œy
* ,

1908 
Wödow
 ,

1911 
Sètus
 
	`XWôhdøwWödow
(

1912 
Di•œy
* ,

1913 
Wödow
 ,

1916 
Sètus
 
	`XGëComm™d
(

1917 
Di•œy
* ,

1918 
Wödow
 ,

1922 
Sètus
 
	`XGëWMCﬁ‹m≠Wödows
(

1923 
Di•œy
* ,

1924 
Wödow
 ,

1925 
Wödow
** ,

1928 
Sètus
 
	`XSëWMCﬁ‹m≠Wödows
(

1929 
Di•œy
* ,

1930 
Wödow
 ,

1931 
Wödow
* ,

1934 
	`XFªeSåögLi°
(

1937 
	`XSëTønsõ¡F‹Höt
(

1938 
Di•œy
* ,

1939 
Wödow
 ,

1940 
Wödow


1945 
	`XA˘iv©eS¸ìnSavî
(

1946 
Di•œy
*

1949 
	`XAddHo°
(

1950 
Di•œy
* ,

1951 
XHo°Addªss
*

1954 
	`XAddHo°s
(

1955 
Di•œy
* ,

1956 
XHo°Addªss
* ,

1960 
	`XAddToExãnsi⁄Li°
(

1961 
_XExtD©a
** ,

1962 
XExtD©a
*

1965 
	`XAddToSaveSë
(

1966 
Di•œy
* ,

1967 
Wödow


1970 
Sètus
 
	`XAŒocCﬁ‹
(

1971 
Di•œy
* ,

1972 
Cﬁ‹m≠
 ,

1973 
XCﬁ‹
*

1976 
Sètus
 
	`XAŒocCﬁ‹Cñls
(

1977 
Di•œy
* ,

1978 
Cﬁ‹m≠
 ,

1979 
Boﬁ
 ,

1986 
Sètus
 
	`XAŒocCﬁ‹Pœ√s
(

1987 
Di•œy
* ,

1988 
Cﬁ‹m≠
 ,

1989 
Boﬁ
 ,

2000 
Sètus
 
	`XAŒocNamedCﬁ‹
(

2001 
Di•œy
* ,

2002 
Cﬁ‹m≠
 ,

2003 
_Xc⁄°
 * ,

2004 
XCﬁ‹
* ,

2005 
XCﬁ‹
*

2008 
	`XAŒowEvíts
(

2009 
Di•œy
* ,

2011 
Time


2014 
	`XAutoRïótOff
(

2015 
Di•œy
*

2018 
	`XAutoRïótOn
(

2019 
Di•œy
*

2022 
	`XBñl
(

2023 
Di•œy
* ,

2027 
	`XBôm≠BôOrdî
(

2028 
Di•œy
*

2031 
	`XBôm≠Pad
(

2032 
Di•œy
*

2035 
	`XBôm≠Unô
(

2036 
Di•œy
*

2039 
	`XCñlsOfS¸ìn
(

2040 
S¸ìn
*

2043 
	`XCh™geA˘ivePoöãrGøb
(

2044 
Di•œy
* ,

2046 
Curs‹
 ,

2047 
Time


2050 
	`XCh™geGC
(

2051 
Di•œy
* ,

2052 
GC
 ,

2054 
XGCVÆues
*

2057 
	`XCh™geKeybﬂrdC⁄åﬁ
(

2058 
Di•œy
* ,

2060 
XKeybﬂrdC⁄åﬁ
*

2063 
	`XCh™geKeybﬂrdM≠pög
(

2064 
Di•œy
* ,

2067 
KeySym
* ,

2071 
	`XCh™gePoöãrC⁄åﬁ
(

2072 
Di•œy
* ,

2073 
Boﬁ
 ,

2074 
Boﬁ
 ,

2080 
	`XCh™gePr›îty
(

2081 
Di•œy
* ,

2082 
Wödow
 ,

2083 
Atom
 ,

2084 
Atom
 ,

2087 
_Xc⁄°
 * ,

2091 
	`XCh™geSaveSë
(

2092 
Di•œy
* ,

2093 
Wödow
 ,

2097 
	`XCh™geWödowAâribuãs
(

2098 
Di•œy
* ,

2099 
Wödow
 ,

2101 
XSëWödowAâribuãs
*

2104 
Boﬁ
 
	`XCheckIfEvít
(

2105 
Di•œy
* ,

2106 
XEvít
* ,

2107 
	$Boﬁ
 (*) (

2108 
Di•œy
* ,

2109 
XEvít
* ,

2110 
XPoöãr


2112 
XPoöãr


2115 
Boﬁ
 
	`XCheckMaskEvít
(

2116 
Di•œy
* ,

2118 
XEvít
*

2121 
Boﬁ
 
	`XCheckTy≥dEvít
(

2122 
Di•œy
* ,

2124 
XEvít
*

2127 
Boﬁ
 
	`XCheckTy≥dWödowEvít
(

2128 
Di•œy
* ,

2129 
Wödow
 ,

2131 
XEvít
*

2134 
Boﬁ
 
	`XCheckWödowEvít
(

2135 
Di•œy
* ,

2136 
Wödow
 ,

2138 
XEvít
*

2141 
	`XCúcuœãSubwödows
(

2142 
Di•œy
* ,

2143 
Wödow
 ,

2147 
	`XCúcuœãSubwödowsDown
(

2148 
Di•œy
* ,

2149 
Wödow


2152 
	`XCúcuœãSubwödowsUp
(

2153 
Di•œy
* ,

2154 
Wödow


2157 
	`XCÀ¨Aªa
(

2158 
Di•œy
* ,

2159 
Wödow
 ,

2164 
Boﬁ


2167 
	`XCÀ¨Wödow
(

2168 
Di•œy
* ,

2169 
Wödow


2172 
	`XClo£Di•œy
(

2173 
Di•œy
*

2176 
	`XC⁄figuªWödow
(

2177 
Di•œy
* ,

2178 
Wödow
 ,

2180 
XWödowCh™ges
*

2183 
	`XC⁄√˘i⁄Numbî
(

2184 
Di•œy
*

2187 
	`XC⁄vîtSñe˘i⁄
(

2188 
Di•œy
* ,

2189 
Atom
 ,

2190 
Atom
 ,

2191 
Atom
 ,

2192 
Wödow
 ,

2193 
Time


2196 
	`XC›yAªa
(

2197 
Di•œy
* ,

2198 
DøwabÀ
 ,

2199 
DøwabÀ
 ,

2200 
GC
 ,

2209 
	`XC›yGC
(

2210 
Di•œy
* ,

2211 
GC
 ,

2213 
GC


2216 
	`XC›yPœ√
(

2217 
Di•œy
* ,

2218 
DøwabÀ
 ,

2219 
DøwabÀ
 ,

2220 
GC
 ,

2230 
	`XDeÁu…Dïth
(

2231 
Di•œy
* ,

2235 
	`XDeÁu…DïthOfS¸ìn
(

2236 
S¸ìn
*

2239 
	`XDeÁu…S¸ìn
(

2240 
Di•œy
*

2243 
	`XDeföeCurs‹
(

2244 
Di•œy
* ,

2245 
Wödow
 ,

2246 
Curs‹


2249 
	`XDñëePr›îty
(

2250 
Di•œy
* ,

2251 
Wödow
 ,

2252 
Atom


2255 
	`XDe°royWödow
(

2256 
Di•œy
* ,

2257 
Wödow


2260 
	`XDe°roySubwödows
(

2261 
Di•œy
* ,

2262 
Wödow


2265 
	`XD€sBackögSt‹e
(

2266 
S¸ìn
*

2269 
Boﬁ
 
	`XD€sSaveUndîs
(

2270 
S¸ìn
*

2273 
	`XDißbÀAc˚ssC⁄åﬁ
(

2274 
Di•œy
*

2278 
	`XDi•œyCñls
(

2279 
Di•œy
* ,

2283 
	`XDi•œyHeight
(

2284 
Di•œy
* ,

2288 
	`XDi•œyHeightMM
(

2289 
Di•œy
* ,

2293 
	`XDi•œyKeycodes
(

2294 
Di•œy
* ,

2299 
	`XDi•œyPœ√s
(

2300 
Di•œy
* ,

2304 
	`XDi•œyWidth
(

2305 
Di•œy
* ,

2309 
	`XDi•œyWidthMM
(

2310 
Di•œy
* ,

2314 
	`XDøwArc
(

2315 
Di•œy
* ,

2316 
DøwabÀ
 ,

2317 
GC
 ,

2326 
	`XDøwArcs
(

2327 
Di•œy
* ,

2328 
DøwabÀ
 ,

2329 
GC
 ,

2330 
XArc
* ,

2334 
	`XDøwImageSåög
(

2335 
Di•œy
* ,

2336 
DøwabÀ
 ,

2337 
GC
 ,

2340 
_Xc⁄°
 * ,

2344 
	`XDøwImageSåög16
(

2345 
Di•œy
* ,

2346 
DøwabÀ
 ,

2347 
GC
 ,

2350 
_Xc⁄°
 
XCh¨2b
* ,

2354 
	`XDøwLöe
(

2355 
Di•œy
* ,

2356 
DøwabÀ
 ,

2357 
GC
 ,

2364 
	`XDøwLöes
(

2365 
Di•œy
* ,

2366 
DøwabÀ
 ,

2367 
GC
 ,

2368 
XPoöt
* ,

2373 
	`XDøwPoöt
(

2374 
Di•œy
* ,

2375 
DøwabÀ
 ,

2376 
GC
 ,

2381 
	`XDøwPoöts
(

2382 
Di•œy
* ,

2383 
DøwabÀ
 ,

2384 
GC
 ,

2385 
XPoöt
* ,

2390 
	`XDøwRe˘™gÀ
(

2391 
Di•œy
* ,

2392 
DøwabÀ
 ,

2393 
GC
 ,

2400 
	`XDøwRe˘™gÀs
(

2401 
Di•œy
* ,

2402 
DøwabÀ
 ,

2403 
GC
 ,

2404 
XRe˘™gÀ
* ,

2408 
	`XDøwSegmíts
(

2409 
Di•œy
* ,

2410 
DøwabÀ
 ,

2411 
GC
 ,

2412 
XSegmít
* ,

2416 
	`XDøwSåög
(

2417 
Di•œy
* ,

2418 
DøwabÀ
 ,

2419 
GC
 ,

2422 
_Xc⁄°
 * ,

2426 
	`XDøwSåög16
(

2427 
Di•œy
* ,

2428 
DøwabÀ
 ,

2429 
GC
 ,

2432 
_Xc⁄°
 
XCh¨2b
* ,

2436 
	`XDøwText
(

2437 
Di•œy
* ,

2438 
DøwabÀ
 ,

2439 
GC
 ,

2442 
XTextIãm
* ,

2446 
	`XDøwText16
(

2447 
Di•œy
* ,

2448 
DøwabÀ
 ,

2449 
GC
 ,

2452 
XTextIãm16
* ,

2456 
	`XE«bÀAc˚ssC⁄åﬁ
(

2457 
Di•œy
*

2460 
	`XEvítsQueued
(

2461 
Di•œy
* ,

2465 
Sètus
 
	`XFëchName
(

2466 
Di•œy
* ,

2467 
Wödow
 ,

2471 
	`XFûlArc
(

2472 
Di•œy
* ,

2473 
DøwabÀ
 ,

2474 
GC
 ,

2483 
	`XFûlArcs
(

2484 
Di•œy
* ,

2485 
DøwabÀ
 ,

2486 
GC
 ,

2487 
XArc
* ,

2491 
	`XFûlPﬁyg⁄
(

2492 
Di•œy
* ,

2493 
DøwabÀ
 ,

2494 
GC
 ,

2495 
XPoöt
* ,

2501 
	`XFûlRe˘™gÀ
(

2502 
Di•œy
* ,

2503 
DøwabÀ
 ,

2504 
GC
 ,

2511 
	`XFûlRe˘™gÀs
(

2512 
Di•œy
* ,

2513 
DøwabÀ
 ,

2514 
GC
 ,

2515 
XRe˘™gÀ
* ,

2519 
	`XFlush
(

2520 
Di•œy
*

2523 
	`XF‹˚S¸ìnSavî
(

2524 
Di•œy
* ,

2528 
	`XFªe
(

2532 
	`XFªeCﬁ‹m≠
(

2533 
Di•œy
* ,

2534 
Cﬁ‹m≠


2537 
	`XFªeCﬁ‹s
(

2538 
Di•œy
* ,

2539 
Cﬁ‹m≠
 ,

2545 
	`XFªeCurs‹
(

2546 
Di•œy
* ,

2547 
Curs‹


2550 
	`XFªeExãnsi⁄Li°
(

2554 
	`XFªeF⁄t
(

2555 
Di•œy
* ,

2556 
XF⁄tSåu˘
*

2559 
	`XFªeF⁄tInfo
(

2561 
XF⁄tSåu˘
* ,

2565 
	`XFªeF⁄tNames
(

2569 
	`XFªeF⁄tP©h
(

2573 
	`XFªeGC
(

2574 
Di•œy
* ,

2575 
GC


2578 
	`XFªeModifõrm≠
(

2579 
XModifõrKeym≠
*

2582 
	`XFªePixm≠
(

2583 
Di•œy
* ,

2584 
Pixm≠


2587 
	`XGeomëry
(

2588 
Di•œy
* ,

2590 
_Xc⁄°
 * ,

2591 
_Xc⁄°
 * ,

2603 
	`XGëEº‹D©aba£Text
(

2604 
Di•œy
* ,

2605 
_Xc⁄°
 * ,

2606 
_Xc⁄°
 * ,

2607 
_Xc⁄°
 * ,

2612 
	`XGëEº‹Text
(

2613 
Di•œy
* ,

2619 
Boﬁ
 
	`XGëF⁄tPr›îty
(

2620 
XF⁄tSåu˘
* ,

2621 
Atom
 ,

2625 
Sètus
 
	`XGëGCVÆues
(

2626 
Di•œy
* ,

2627 
GC
 ,

2629 
XGCVÆues
*

2632 
Sètus
 
	`XGëGeomëry
(

2633 
Di•œy
* ,

2634 
DøwabÀ
 ,

2635 
Wödow
* ,

2644 
Sètus
 
	`XGëIc⁄Name
(

2645 
Di•œy
* ,

2646 
Wödow
 ,

2650 
	`XGëI≈utFocus
(

2651 
Di•œy
* ,

2652 
Wödow
* ,

2656 
	`XGëKeybﬂrdC⁄åﬁ
(

2657 
Di•œy
* ,

2658 
XKeybﬂrdSèã
*

2661 
	`XGëPoöãrC⁄åﬁ
(

2662 
Di•œy
* ,

2668 
	`XGëPoöãrM≠pög
(

2669 
Di•œy
* ,

2674 
	`XGëS¸ìnSavî
(

2675 
Di•œy
* ,

2682 
Sètus
 
	`XGëTønsõ¡F‹Höt
(

2683 
Di•œy
* ,

2684 
Wödow
 ,

2685 
Wödow
*

2688 
	`XGëWödowPr›îty
(

2689 
Di•œy
* ,

2690 
Wödow
 ,

2691 
Atom
 ,

2694 
Boﬁ
 ,

2695 
Atom
 ,

2696 
Atom
* ,

2703 
Sètus
 
	`XGëWödowAâribuãs
(

2704 
Di•œy
* ,

2705 
Wödow
 ,

2706 
XWödowAâribuãs
*

2709 
	`XGøbBuâ⁄
(

2710 
Di•œy
* ,

2713 
Wödow
 ,

2714 
Boﬁ
 ,

2718 
Wödow
 ,

2719 
Curs‹


2722 
	`XGøbKey
(

2723 
Di•œy
* ,

2726 
Wödow
 ,

2727 
Boﬁ
 ,

2732 
	`XGøbKeybﬂrd
(

2733 
Di•œy
* ,

2734 
Wödow
 ,

2735 
Boﬁ
 ,

2738 
Time


2741 
	`XGøbPoöãr
(

2742 
Di•œy
* ,

2743 
Wödow
 ,

2744 
Boﬁ
 ,

2748 
Wödow
 ,

2749 
Curs‹
 ,

2750 
Time


2753 
	`XGøbSîvî
(

2754 
Di•œy
*

2757 
	`XHeightMMOfS¸ìn
(

2758 
S¸ìn
*

2761 
	`XHeightOfS¸ìn
(

2762 
S¸ìn
*

2765 
	`XIfEvít
(

2766 
Di•œy
* ,

2767 
XEvít
* ,

2768 
	$Boﬁ
 (*) (

2769 
Di•œy
* ,

2770 
XEvít
* ,

2771 
XPoöãr


2773 
XPoöãr


2776 
	`XImageByãOrdî
(

2777 
Di•œy
*

2780 
	`XIn°ÆlCﬁ‹m≠
(

2781 
Di•œy
* ,

2782 
Cﬁ‹m≠


2785 
KeyCode
 
	`XKeysymToKeycode
(

2786 
Di•œy
* ,

2787 
KeySym


2790 
	`XKûlClõ¡
(

2791 
Di•œy
* ,

2792 
XID


2795 
Sètus
 
	`XLookupCﬁ‹
(

2796 
Di•œy
* ,

2797 
Cﬁ‹m≠
 ,

2798 
_Xc⁄°
 * ,

2799 
XCﬁ‹
* ,

2800 
XCﬁ‹
*

2803 
	`XLowîWödow
(

2804 
Di•œy
* ,

2805 
Wödow


2808 
	`XM≠Rai£d
(

2809 
Di•œy
* ,

2810 
Wödow


2813 
	`XM≠Subwödows
(

2814 
Di•œy
* ,

2815 
Wödow


2818 
	`XM≠Wödow
(

2819 
Di•œy
* ,

2820 
Wödow


2823 
	`XMaskEvít
(

2824 
Di•œy
* ,

2826 
XEvít
*

2829 
	`XMaxCm≠sOfS¸ìn
(

2830 
S¸ìn
*

2833 
	`XMöCm≠sOfS¸ìn
(

2834 
S¸ìn
*

2837 
	`XMoveResizeWödow
(

2838 
Di•œy
* ,

2839 
Wödow
 ,

2846 
	`XMoveWödow
(

2847 
Di•œy
* ,

2848 
Wödow
 ,

2853 
	`XNextEvít
(

2854 
Di•œy
* ,

2855 
XEvít
*

2858 
	`XNoOp
(

2859 
Di•œy
*

2862 
Sètus
 
	`XP¨£Cﬁ‹
(

2863 
Di•œy
* ,

2864 
Cﬁ‹m≠
 ,

2865 
_Xc⁄°
 * ,

2866 
XCﬁ‹
*

2869 
	`XP¨£Geomëry
(

2870 
_Xc⁄°
 * ,

2877 
	`XPìkEvít
(

2878 
Di•œy
* ,

2879 
XEvít
*

2882 
	`XPìkIfEvít
(

2883 
Di•œy
* ,

2884 
XEvít
* ,

2885 
	$Boﬁ
 (*) (

2886 
Di•œy
* ,

2887 
XEvít
* ,

2888 
XPoöãr


2890 
XPoöãr


2893 
	`XPídög
(

2894 
Di•œy
*

2897 
	`XPœ√sOfS¸ìn
(

2898 
S¸ìn
*

2901 
	`XPrŸocﬁRevisi⁄
(

2902 
Di•œy
*

2905 
	`XPrŸocﬁVîsi⁄
(

2906 
Di•œy
*

2910 
	`XPutBackEvít
(

2911 
Di•œy
* ,

2912 
XEvít
*

2915 
	`XPutImage
(

2916 
Di•œy
* ,

2917 
DøwabÀ
 ,

2918 
GC
 ,

2919 
XImage
* ,

2928 
	`XQLígth
(

2929 
Di•œy
*

2932 
Sètus
 
	`XQuîyBe°Curs‹
(

2933 
Di•œy
* ,

2934 
DøwabÀ
 ,

2941 
Sètus
 
	`XQuîyBe°Size
(

2942 
Di•œy
* ,

2944 
DøwabÀ
 ,

2951 
Sètus
 
	`XQuîyBe°Stù∂e
(

2952 
Di•œy
* ,

2953 
DøwabÀ
 ,

2960 
Sètus
 
	`XQuîyBe°Tûe
(

2961 
Di•œy
* ,

2962 
DøwabÀ
 ,

2969 
	`XQuîyCﬁ‹
(

2970 
Di•œy
* ,

2971 
Cﬁ‹m≠
 ,

2972 
XCﬁ‹
*

2975 
	`XQuîyCﬁ‹s
(

2976 
Di•œy
* ,

2977 
Cﬁ‹m≠
 ,

2978 
XCﬁ‹
* ,

2982 
Boﬁ
 
	`XQuîyExãnsi⁄
(

2983 
Di•œy
* ,

2984 
_Xc⁄°
 * ,

2990 
	`XQuîyKeym≠
(

2991 
Di•œy
* ,

2995 
Boﬁ
 
	`XQuîyPoöãr
(

2996 
Di•œy
* ,

2997 
Wödow
 ,

2998 
Wödow
* ,

2999 
Wödow
* ,

3007 
	`XQuîyTextExã¡s
(

3008 
Di•œy
* ,

3009 
XID
 ,

3010 
_Xc⁄°
 * ,

3015 
XCh¨Såu˘
*

3018 
	`XQuîyTextExã¡s16
(

3019 
Di•œy
* ,

3020 
XID
 ,

3021 
_Xc⁄°
 
XCh¨2b
* ,

3026 
XCh¨Såu˘
*

3029 
Sètus
 
	`XQuîyTªe
(

3030 
Di•œy
* ,

3031 
Wödow
 ,

3032 
Wödow
* ,

3033 
Wödow
* ,

3034 
Wödow
** ,

3038 
	`XRai£Wödow
(

3039 
Di•œy
* ,

3040 
Wödow


3043 
	`XRódBôm≠Fûe
(

3044 
Di•œy
* ,

3045 
DøwabÀ
 ,

3046 
_Xc⁄°
 * ,

3049 
Pixm≠
* ,

3054 
	`XRódBôm≠FûeD©a
(

3055 
_Xc⁄°
 * ,

3063 
	`XRebödKeysym
(

3064 
Di•œy
* ,

3065 
KeySym
 ,

3066 
KeySym
* ,

3068 
_Xc⁄°
 * ,

3072 
	`XRecﬁ‹Curs‹
(

3073 
Di•œy
* ,

3074 
Curs‹
 ,

3075 
XCﬁ‹
* ,

3076 
XCﬁ‹
*

3079 
	`XRe‰eshKeybﬂrdM≠pög
(

3080 
XM≠pögEvít
*

3083 
	`XRemoveFromSaveSë
(

3084 
Di•œy
* ,

3085 
Wödow


3088 
	`XRemoveHo°
(

3089 
Di•œy
* ,

3090 
XHo°Addªss
*

3093 
	`XRemoveHo°s
(

3094 
Di•œy
* ,

3095 
XHo°Addªss
* ,

3099 
	`XRï¨ítWödow
(

3100 
Di•œy
* ,

3101 
Wödow
 ,

3102 
Wödow
 ,

3107 
	`XRe£tS¸ìnSavî
(

3108 
Di•œy
*

3111 
	`XResizeWödow
(

3112 
Di•œy
* ,

3113 
Wödow
 ,

3118 
	`XRe°ackWödows
(

3119 
Di•œy
* ,

3120 
Wödow
* ,

3124 
	`XRŸ©eBuf„rs
(

3125 
Di•œy
* ,

3129 
	`XRŸ©eWödowPr›îtõs
(

3130 
Di•œy
* ,

3131 
Wödow
 ,

3132 
Atom
* ,

3137 
	`XS¸ìnCou¡
(

3138 
Di•œy
*

3141 
	`XSñe˘I≈ut
(

3142 
Di•œy
* ,

3143 
Wödow
 ,

3147 
Sètus
 
	`XSídEvít
(

3148 
Di•œy
* ,

3149 
Wödow
 ,

3150 
Boﬁ
 ,

3152 
XEvít
*

3155 
	`XSëAc˚ssC⁄åﬁ
(

3156 
Di•œy
* ,

3160 
	`XSëArcMode
(

3161 
Di•œy
* ,

3162 
GC
 ,

3166 
	`XSëBackground
(

3167 
Di•œy
* ,

3168 
GC
 ,

3172 
	`XSëClùMask
(

3173 
Di•œy
* ,

3174 
GC
 ,

3175 
Pixm≠


3178 
	`XSëClùOrigö
(

3179 
Di•œy
* ,

3180 
GC
 ,

3185 
	`XSëClùRe˘™gÀs
(

3186 
Di•œy
* ,

3187 
GC
 ,

3190 
XRe˘™gÀ
* ,

3195 
	`XSëClo£DownMode
(

3196 
Di•œy
* ,

3200 
	`XSëComm™d
(

3201 
Di•œy
* ,

3202 
Wödow
 ,

3207 
	`XSëDashes
(

3208 
Di•œy
* ,

3209 
GC
 ,

3211 
_Xc⁄°
 * ,

3215 
	`XSëFûlRuÀ
(

3216 
Di•œy
* ,

3217 
GC
 ,

3221 
	`XSëFûlStyÀ
(

3222 
Di•œy
* ,

3223 
GC
 ,

3227 
	`XSëF⁄t
(

3228 
Di•œy
* ,

3229 
GC
 ,

3230 
F⁄t


3233 
	`XSëF⁄tP©h
(

3234 
Di•œy
* ,

3239 
	`XSëF‹eground
(

3240 
Di•œy
* ,

3241 
GC
 ,

3245 
	`XSëFun˘i⁄
(

3246 
Di•œy
* ,

3247 
GC
 ,

3251 
	`XSëGøphicsExposuªs
(

3252 
Di•œy
* ,

3253 
GC
 ,

3254 
Boﬁ


3257 
	`XSëIc⁄Name
(

3258 
Di•œy
* ,

3259 
Wödow
 ,

3260 
_Xc⁄°
 *

3263 
	`XSëI≈utFocus
(

3264 
Di•œy
* ,

3265 
Wödow
 ,

3267 
Time


3270 
	`XSëLöeAâribuãs
(

3271 
Di•œy
* ,

3272 
GC
 ,

3279 
	`XSëModifõrM≠pög
(

3280 
Di•œy
* ,

3281 
XModifõrKeym≠
*

3284 
	`XSëPœ√Mask
(

3285 
Di•œy
* ,

3286 
GC
 ,

3290 
	`XSëPoöãrM≠pög
(

3291 
Di•œy
* ,

3292 
_Xc⁄°
 * ,

3296 
	`XSëS¸ìnSavî
(

3297 
Di•œy
* ,

3304 
	`XSëSñe˘i⁄Ow√r
(

3305 
Di•œy
* ,

3306 
Atom
 ,

3307 
Wödow
 ,

3308 
Time


3311 
	`XSëSèã
(

3312 
Di•œy
* ,

3313 
GC
 ,

3320 
	`XSëStù∂e
(

3321 
Di•œy
* ,

3322 
GC
 ,

3323 
Pixm≠


3326 
	`XSëSubwödowMode
(

3327 
Di•œy
* ,

3328 
GC
 ,

3332 
	`XSëTSOrigö
(

3333 
Di•œy
* ,

3334 
GC
 ,

3339 
	`XSëTûe
(

3340 
Di•œy
* ,

3341 
GC
 ,

3342 
Pixm≠


3345 
	`XSëWödowBackground
(

3346 
Di•œy
* ,

3347 
Wödow
 ,

3351 
	`XSëWödowBackgroundPixm≠
(

3352 
Di•œy
* ,

3353 
Wödow
 ,

3354 
Pixm≠


3357 
	`XSëWödowB‹dî
(

3358 
Di•œy
* ,

3359 
Wödow
 ,

3363 
	`XSëWödowB‹dîPixm≠
(

3364 
Di•œy
* ,

3365 
Wödow
 ,

3366 
Pixm≠


3369 
	`XSëWödowB‹dîWidth
(

3370 
Di•œy
* ,

3371 
Wödow
 ,

3375 
	`XSëWödowCﬁ‹m≠
(

3376 
Di•œy
* ,

3377 
Wödow
 ,

3378 
Cﬁ‹m≠


3381 
	`XSt‹eBuf„r
(

3382 
Di•œy
* ,

3383 
_Xc⁄°
 * ,

3388 
	`XSt‹eByãs
(

3389 
Di•œy
* ,

3390 
_Xc⁄°
 * ,

3394 
	`XSt‹eCﬁ‹
(

3395 
Di•œy
* ,

3396 
Cﬁ‹m≠
 ,

3397 
XCﬁ‹
*

3400 
	`XSt‹eCﬁ‹s
(

3401 
Di•œy
* ,

3402 
Cﬁ‹m≠
 ,

3403 
XCﬁ‹
* ,

3407 
	`XSt‹eName
(

3408 
Di•œy
* ,

3409 
Wödow
 ,

3410 
_Xc⁄°
 *

3413 
	`XSt‹eNamedCﬁ‹
(

3414 
Di•œy
* ,

3415 
Cﬁ‹m≠
 ,

3416 
_Xc⁄°
 * ,

3421 
	`XSync
(

3422 
Di•œy
* ,

3423 
Boﬁ


3426 
	`XTextExã¡s
(

3427 
XF⁄tSåu˘
* ,

3428 
_Xc⁄°
 * ,

3433 
XCh¨Såu˘
*

3436 
	`XTextExã¡s16
(

3437 
XF⁄tSåu˘
* ,

3438 
_Xc⁄°
 
XCh¨2b
* ,

3443 
XCh¨Såu˘
*

3446 
	`XTextWidth
(

3447 
XF⁄tSåu˘
* ,

3448 
_Xc⁄°
 * ,

3452 
	`XTextWidth16
(

3453 
XF⁄tSåu˘
* ,

3454 
_Xc⁄°
 
XCh¨2b
* ,

3458 
Boﬁ
 
	`XTøn¶©eCo‹dö©es
(

3459 
Di•œy
* ,

3460 
Wödow
 ,

3461 
Wödow
 ,

3466 
Wödow
*

3469 
	`XUndeföeCurs‹
(

3470 
Di•œy
* ,

3471 
Wödow


3474 
	`XUngøbBuâ⁄
(

3475 
Di•œy
* ,

3478 
Wödow


3481 
	`XUngøbKey
(

3482 
Di•œy
* ,

3485 
Wödow


3488 
	`XUngøbKeybﬂrd
(

3489 
Di•œy
* ,

3490 
Time


3493 
	`XUngøbPoöãr
(

3494 
Di•œy
* ,

3495 
Time


3498 
	`XUngøbSîvî
(

3499 
Di•œy
*

3502 
	`XUnö°ÆlCﬁ‹m≠
(

3503 
Di•œy
* ,

3504 
Cﬁ‹m≠


3507 
	`XU∆ﬂdF⁄t
(

3508 
Di•œy
* ,

3509 
F⁄t


3512 
	`XUnm≠Subwödows
(

3513 
Di•œy
* ,

3514 
Wödow


3517 
	`XUnm≠Wödow
(

3518 
Di•œy
* ,

3519 
Wödow


3522 
	`XVíd‹Rñó£
(

3523 
Di•œy
*

3526 
	`XW¨pPoöãr
(

3527 
Di•œy
* ,

3528 
Wödow
 ,

3529 
Wödow
 ,

3538 
	`XWidthMMOfS¸ìn
(

3539 
S¸ìn
*

3542 
	`XWidthOfS¸ìn
(

3543 
S¸ìn
*

3546 
	`XWödowEvít
(

3547 
Di•œy
* ,

3548 
Wödow
 ,

3550 
XEvít
*

3553 
	`XWrôeBôm≠Fûe
(

3554 
Di•œy
* ,

3555 
_Xc⁄°
 * ,

3556 
Pixm≠
 ,

3563 
Boﬁ
 
	`XSuµ‹tsLoˇÀ
 ();

3565 *
	`XSëLoˇÀModifõrs
(

3569 
XOM
 
	`XO≥nOM
(

3570 
Di•œy
* ,

3571 
_XrmHashBuckëRec
* ,

3572 
_Xc⁄°
 * ,

3573 
_Xc⁄°
 *

3576 
Sètus
 
	`XClo£OM
(

3577 
XOM


3580 *
	$XSëOMVÆues
(

3581 
XOM
 ,

3583 Ë
	`_X_SENTINEL
(0);

3585 *
	$XGëOMVÆues
(

3586 
XOM
 ,

3588 Ë
	`_X_SENTINEL
(0);

3590 
Di•œy
 *
	`XDi•œyOfOM
(

3591 
XOM


3594 *
	`XLoˇÀOfOM
(

3595 
XOM


3598 
XOC
 
	$XCª©eOC
(

3599 
XOM
 ,

3601 Ë
	`_X_SENTINEL
(0);

3603 
	`XDe°royOC
(

3604 
XOC


3607 
XOM
 
	`XOMOfOC
(

3608 
XOC


3611 *
	$XSëOCVÆues
(

3612 
XOC
 ,

3614 Ë
	`_X_SENTINEL
(0);

3616 *
	$XGëOCVÆues
(

3617 
XOC
 ,

3619 Ë
	`_X_SENTINEL
(0);

3621 
XF⁄tSë
 
	`XCª©eF⁄tSë
(

3622 
Di•œy
* ,

3623 
_Xc⁄°
 * ,

3629 
	`XFªeF⁄tSë
(

3630 
Di•œy
* ,

3631 
XF⁄tSë


3634 
	`XF⁄tsOfF⁄tSë
(

3635 
XF⁄tSë
 ,

3636 
XF⁄tSåu˘
*** ,

3640 *
	`XBa£F⁄tNameLi°OfF⁄tSë
(

3641 
XF⁄tSë


3644 *
	`XLoˇÀOfF⁄tSë
(

3645 
XF⁄tSë


3648 
Boﬁ
 
	`XC⁄ãxtDïídítDøwög
(

3649 
XF⁄tSë


3652 
Boﬁ
 
	`XDúe˘i⁄ÆDïídítDøwög
(

3653 
XF⁄tSë


3656 
Boﬁ
 
	`XC⁄ãxtuÆDøwög
(

3657 
XF⁄tSë


3660 
XF⁄tSëExã¡s
 *
	`XExã¡sOfF⁄tSë
(

3661 
XF⁄tSë


3664 
	`XmbTextEsˇ≥mít
(

3665 
XF⁄tSë
 ,

3666 
_Xc⁄°
 * ,

3670 
	`XwcTextEsˇ≥mít
(

3671 
XF⁄tSë
 ,

3672 
_Xc⁄°
 
wch¨_t
* ,

3676 
	`Xutf8TextEsˇ≥mít
(

3677 
XF⁄tSë
 ,

3678 
_Xc⁄°
 * ,

3682 
	`XmbTextExã¡s
(

3683 
XF⁄tSë
 ,

3684 
_Xc⁄°
 * ,

3686 
XRe˘™gÀ
* ,

3687 
XRe˘™gÀ
*

3690 
	`XwcTextExã¡s
(

3691 
XF⁄tSë
 ,

3692 
_Xc⁄°
 
wch¨_t
* ,

3694 
XRe˘™gÀ
* ,

3695 
XRe˘™gÀ
*

3698 
	`Xutf8TextExã¡s
(

3699 
XF⁄tSë
 ,

3700 
_Xc⁄°
 * ,

3702 
XRe˘™gÀ
* ,

3703 
XRe˘™gÀ
*

3706 
Sètus
 
	`XmbTextPîCh¨Exã¡s
(

3707 
XF⁄tSë
 ,

3708 
_Xc⁄°
 * ,

3710 
XRe˘™gÀ
* ,

3711 
XRe˘™gÀ
* ,

3714 
XRe˘™gÀ
* ,

3715 
XRe˘™gÀ
*

3718 
Sètus
 
	`XwcTextPîCh¨Exã¡s
(

3719 
XF⁄tSë
 ,

3720 
_Xc⁄°
 
wch¨_t
* ,

3722 
XRe˘™gÀ
* ,

3723 
XRe˘™gÀ
* ,

3726 
XRe˘™gÀ
* ,

3727 
XRe˘™gÀ
*

3730 
Sètus
 
	`Xutf8TextPîCh¨Exã¡s
(

3731 
XF⁄tSë
 ,

3732 
_Xc⁄°
 * ,

3734 
XRe˘™gÀ
* ,

3735 
XRe˘™gÀ
* ,

3738 
XRe˘™gÀ
* ,

3739 
XRe˘™gÀ
*

3742 
	`XmbDøwText
(

3743 
Di•œy
* ,

3744 
DøwabÀ
 ,

3745 
GC
 ,

3748 
XmbTextIãm
* ,

3752 
	`XwcDøwText
(

3753 
Di•œy
* ,

3754 
DøwabÀ
 ,

3755 
GC
 ,

3758 
XwcTextIãm
* ,

3762 
	`Xutf8DøwText
(

3763 
Di•œy
* ,

3764 
DøwabÀ
 ,

3765 
GC
 ,

3768 
XmbTextIãm
* ,

3772 
	`XmbDøwSåög
(

3773 
Di•œy
* ,

3774 
DøwabÀ
 ,

3775 
XF⁄tSë
 ,

3776 
GC
 ,

3779 
_Xc⁄°
 * ,

3783 
	`XwcDøwSåög
(

3784 
Di•œy
* ,

3785 
DøwabÀ
 ,

3786 
XF⁄tSë
 ,

3787 
GC
 ,

3790 
_Xc⁄°
 
wch¨_t
* ,

3794 
	`Xutf8DøwSåög
(

3795 
Di•œy
* ,

3796 
DøwabÀ
 ,

3797 
XF⁄tSë
 ,

3798 
GC
 ,

3801 
_Xc⁄°
 * ,

3805 
	`XmbDøwImageSåög
(

3806 
Di•œy
* ,

3807 
DøwabÀ
 ,

3808 
XF⁄tSë
 ,

3809 
GC
 ,

3812 
_Xc⁄°
 * ,

3816 
	`XwcDøwImageSåög
(

3817 
Di•œy
* ,

3818 
DøwabÀ
 ,

3819 
XF⁄tSë
 ,

3820 
GC
 ,

3823 
_Xc⁄°
 
wch¨_t
* ,

3827 
	`Xutf8DøwImageSåög
(

3828 
Di•œy
* ,

3829 
DøwabÀ
 ,

3830 
XF⁄tSë
 ,

3831 
GC
 ,

3834 
_Xc⁄°
 * ,

3838 
XIM
 
	`XO≥nIM
(

3839 
Di•œy
* ,

3840 
_XrmHashBuckëRec
* ,

3845 
Sètus
 
	`XClo£IM
(

3846 
XIM


3849 *
	$XGëIMVÆues
(

3850 
XIM
 , ...

3851 Ë
	`_X_SENTINEL
(0);

3853 *
	$XSëIMVÆues
(

3854 
XIM
 , ...

3855 Ë
	`_X_SENTINEL
(0);

3857 
Di•œy
 *
	`XDi•œyOfIM
(

3858 
XIM


3861 *
	`XLoˇÀOfIM
(

3862 
XIM


3865 
XIC
 
	$XCª©eIC
(

3866 
XIM
 , ...

3867 Ë
	`_X_SENTINEL
(0);

3869 
	`XDe°royIC
(

3870 
XIC


3873 
	`XSëICFocus
(

3874 
XIC


3877 
	`XUn£tICFocus
(

3878 
XIC


3881 
wch¨_t
 *
	`XwcRe£tIC
(

3882 
XIC


3885 *
	`XmbRe£tIC
(

3886 
XIC


3889 *
	`Xutf8Re£tIC
(

3890 
XIC


3893 *
	$XSëICVÆues
(

3894 
XIC
 , ...

3895 Ë
	`_X_SENTINEL
(0);

3897 *
	$XGëICVÆues
(

3898 
XIC
 , ...

3899 Ë
	`_X_SENTINEL
(0);

3901 
XIM
 
	`XIMOfIC
(

3902 
XIC


3905 
Boﬁ
 
	`XFûãrEvít
(

3906 
XEvít
* ,

3907 
Wödow


3910 
	`XmbLookupSåög
(

3911 
XIC
 ,

3912 
XKeyPªs£dEvít
* ,

3915 
KeySym
* ,

3916 
Sètus
*

3919 
	`XwcLookupSåög
(

3920 
XIC
 ,

3921 
XKeyPªs£dEvít
* ,

3922 
wch¨_t
* ,

3924 
KeySym
* ,

3925 
Sètus
*

3928 
	`Xutf8LookupSåög
(

3929 
XIC
 ,

3930 
XKeyPªs£dEvít
* ,

3933 
KeySym
* ,

3934 
Sètus
*

3937 
XVaNe°edLi°
 
	$XVaCª©eNe°edLi°
(

3939 Ë
	`_X_SENTINEL
(0);

3943 
Boﬁ
 
	`XRegi°îIMIn°™tüãCÆlback
(

3944 
Di•œy
* ,

3945 
_XrmHashBuckëRec
* ,

3948 
XIDProc
 ,

3949 
XPoöãr


3952 
Boﬁ
 
	`XUƒegi°îIMIn°™tüãCÆlback
(

3953 
Di•œy
* ,

3954 
_XrmHashBuckëRec
* ,

3957 
XIDProc
 ,

3958 
XPoöãr


3961 (*
	tXC⁄√˘i⁄W©chProc
)(

3962 
	tDi•œy
* ,

3963 
	tXPoöãr
 ,

3965 
	tBoﬁ
 ,

3966 
	tXPoöãr
*

3970 
Sètus
 
	`XI¡î«lC⁄√˘i⁄Numbîs
(

3971 
Di•œy
* ,

3976 
	`XPro˚ssI¡î«lC⁄√˘i⁄
(

3977 
Di•œy
* ,

3981 
Sètus
 
	`XAddC⁄√˘i⁄W©ch
(

3982 
Di•œy
* ,

3983 
XC⁄√˘i⁄W©chProc
 ,

3984 
XPoöãr


3987 
	`XRemoveC⁄√˘i⁄W©ch
(

3988 
Di•œy
* ,

3989 
XC⁄√˘i⁄W©chProc
 ,

3990 
XPoöãr


3993 
	`XSëAuth‹iz©i⁄
(

4000 
	`_Xmbtowc
(

4001 
wch¨_t
 * ,

4002 #ifde‡
ISC


4004 
size_t


4011 
	`_Xw˘omb
(

4013 
wch¨_t


4016 
Boﬁ
 
	`XGëEvítD©a
(

4017 
Di•œy
* ,

4018 
XGíîicEvítCookõ
*

4021 
	`XFªeEvítD©a
(

4022 
Di•œy
* ,

4023 
XGíîicEvítCookõ
*

4026 #ifde‡
__˛™g__


4027 #¥agm®
˛™g
 
dügno°ic
 
p›


4030 
_XFUNCPROTOEND


	@/usr/include/asm/types.h

1 #i‚de‡
_ASM_GENERIC_TYPES_H


2 
	#_ASM_GENERIC_TYPES_H


	)

7 
	~<asm-gíîic/öt-Œ64.h
>

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


26 #i‚def 
__√ed_Em©h


27 
	#_ERRNO_H
 1

	)

28 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


35 
	~<bôs/î∫o.h
>

36 #unde‡
__√ed_Em©h


38 #ifdef 
_ERRNO_H


45 #i‚def 
î∫o


46 
î∫o
;

49 #ifde‡
__USE_GNU


54 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

58 
	g__END_DECLS


66 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


67 #i‚de‡
__îr‹_t_deföed


68 
	tîr‹_t
;

69 
	#__îr‹_t_deföed
 1

	)

71 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

40 #i‚de‡
__mode_t_deföed


41 
__mode_t
 
	tmode_t
;

42 
	#__mode_t_deföed


	)

45 #i‚de‡
__off_t_deföed


46 #i‚de‡
__USE_FILE_OFFSET64


47 
__off_t
 
	toff_t
;

49 
__off64_t
 
	toff_t
;

51 
	#__off_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


55 
__off64_t
 
	toff64_t
;

56 
	#__off64_t_deföed


	)

59 #i‚de‡
__pid_t_deföed


60 
__pid_t
 
	tpid_t
;

61 
	#__pid_t_deföed


	)

65 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


66 
	#__√ed_time•ec


	)

67 
	~<time.h
>

68 
	~<bôs/°©.h
>

70 
	#S_IFMT
 
__S_IFMT


	)

71 
	#S_IFDIR
 
__S_IFDIR


	)

72 
	#S_IFCHR
 
__S_IFCHR


	)

73 
	#S_IFBLK
 
__S_IFBLK


	)

74 
	#S_IFREG
 
__S_IFREG


	)

75 #ifde‡
__S_IFIFO


76 
	#S_IFIFO
 
__S_IFIFO


	)

78 #ifde‡
__S_IFLNK


79 
	#S_IFLNK
 
__S_IFLNK


	)

81 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


82 
	#S_IFSOCK
 
__S_IFSOCK


	)

87 
	#S_ISUID
 
__S_ISUID


	)

88 
	#S_ISGID
 
__S_ISGID


	)

90 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


92 
	#S_ISVTX
 
__S_ISVTX


	)

95 
	#S_IRUSR
 
__S_IREAD


	)

96 
	#S_IWUSR
 
__S_IWRITE


	)

97 
	#S_IXUSR
 
__S_IEXEC


	)

99 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

101 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

102 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

103 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

105 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

107 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

108 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

109 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

111 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

114 #ifdef 
__USE_MISC


115 #i‚de‡
R_OK


118 
	#R_OK
 4

	)

119 
	#W_OK
 2

	)

120 
	#X_OK
 1

	)

121 
	#F_OK
 0

	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#SEEK_SET
 0

	)

128 
	#SEEK_CUR
 1

	)

129 
	#SEEK_END
 2

	)

137 
f˙é
 (
__fd
, 
__cmd
, ...);

145 #i‚de‡
__USE_FILE_OFFSET64


146 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

148 #ifde‡
__REDIRECT


149 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

150 
	`__n⁄nuŒ
 ((1));

152 
	#›í
 
›í64


	)

155 #ifde‡
__USE_LARGEFILE64


156 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

159 #ifde‡
__USE_ATFILE


169 #i‚de‡
__USE_FILE_OFFSET64


170 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

171 
	`__n⁄nuŒ
 ((2));

173 #ifde‡
__REDIRECT


174 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

175 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

177 
	#›í©
 
›í©64


	)

180 #ifde‡
__USE_LARGEFILE64


181 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

182 
	`__n⁄nuŒ
 ((2));

191 #i‚de‡
__USE_FILE_OFFSET64


192 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__REDIRECT


195 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

196 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

198 
	#¸ót
 
¸ót64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

205 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

206 && !
deföed
 
__USE_POSIX
))

215 
	#F_ULOCK
 0

	)

216 
	#F_LOCK
 1

	)

217 
	#F_TLOCK
 2

	)

218 
	#F_TEST
 3

	)

220 #i‚de‡
__USE_FILE_OFFSET64


221 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

223 #ifde‡
__REDIRECT


224 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

226 
	#lockf
 
lockf64


	)

229 #ifde‡
__USE_LARGEFILE64


230 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

234 #ifde‡
__USE_XOPEN2K


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

239 
__advi£
Ë
__THROW
;

241 #ifde‡
__REDIRECT_NTH


242 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

243 
__off64_t
 
__Àn
, 
__advi£
),

244 
posix_Ádvi£64
);

246 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

249 #ifde‡
__USE_LARGEFILE64


250 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

251 
__advi£
Ë
__THROW
;

259 #i‚de‡
__USE_FILE_OFFSET64


260 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

264 
__off64_t
 
__Àn
),

265 
posix_ÁŒoˇã64
);

267 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

270 #ifde‡
__USE_LARGEFILE64


271 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

277 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

278 && 
deföed
 
__va_¨g_∑ck_Àn


279 
	~<bôs/f˙é2.h
>

282 
__END_DECLS


	@/usr/include/linux/videodev2.h

56 #i‚de‡
__LINUX_VIDEODEV2_H


57 
	#__LINUX_VIDEODEV2_H


	)

59 
	~<sys/time.h
>

61 
	~<löux/io˘l.h
>

62 
	~<löux/ty≥s.h
>

63 
	~<löux/v4l2-comm⁄.h
>

64 
	~<löux/v4l2-c⁄åﬁs.h
>

70 
	#VIDEO_MAX_FRAME
 32

	)

71 
	#VIDEO_MAX_PLANES
 8

	)

78 
	#v4l2_fourcc
(
a
, 
b
, 
c
, 
d
)\

79 ((
__u32
)(
a
Ë| ((__u32)(
b
Ë<< 8Ë| ((__u32)(
c
Ë<< 16Ë| ((__u32)(
d
Ë<< 24))

	)

84 
	ev4l2_fõld
 {

85 
	mV4L2_FIELD_ANY
 = 0,

89 
	mV4L2_FIELD_NONE
 = 1,

90 
	mV4L2_FIELD_TOP
 = 2,

91 
	mV4L2_FIELD_BOTTOM
 = 3,

92 
	mV4L2_FIELD_INTERLACED
 = 4,

93 
	mV4L2_FIELD_SEQ_TB
 = 5,

95 
	mV4L2_FIELD_SEQ_BT
 = 6,

96 
	mV4L2_FIELD_ALTERNATE
 = 7,

98 
	mV4L2_FIELD_INTERLACED_TB
 = 8,

101 
	mV4L2_FIELD_INTERLACED_BT
 = 9,

105 
	#V4L2_FIELD_HAS_TOP
(
fõld
) \

106 ((
fõld
Ë=
V4L2_FIELD_TOP
 ||\

107 (
fõld
Ë=
V4L2_FIELD_INTERLACED
 ||\

108 (
fõld
Ë=
V4L2_FIELD_INTERLACED_TB
 ||\

109 (
fõld
Ë=
V4L2_FIELD_INTERLACED_BT
 ||\

110 (
fõld
Ë=
V4L2_FIELD_SEQ_TB
 ||\

111 (
fõld
Ë=
V4L2_FIELD_SEQ_BT
)

	)

112 
	#V4L2_FIELD_HAS_BOTTOM
(
fõld
) \

113 ((
fõld
Ë=
V4L2_FIELD_BOTTOM
 ||\

114 (
fõld
Ë=
V4L2_FIELD_INTERLACED
 ||\

115 (
fõld
Ë=
V4L2_FIELD_INTERLACED_TB
 ||\

116 (
fõld
Ë=
V4L2_FIELD_INTERLACED_BT
 ||\

117 (
fõld
Ë=
V4L2_FIELD_SEQ_TB
 ||\

118 (
fõld
Ë=
V4L2_FIELD_SEQ_BT
)

	)

119 
	#V4L2_FIELD_HAS_BOTH
(
fõld
) \

120 ((
fõld
Ë=
V4L2_FIELD_INTERLACED
 ||\

121 (
fõld
Ë=
V4L2_FIELD_INTERLACED_TB
 ||\

122 (
fõld
Ë=
V4L2_FIELD_INTERLACED_BT
 ||\

123 (
fõld
Ë=
V4L2_FIELD_SEQ_TB
 ||\

124 (
fõld
Ë=
V4L2_FIELD_SEQ_BT
)

	)

126 
	ev4l2_buf_ty≥
 {

127 
	mV4L2_BUF_TYPE_VIDEO_CAPTURE
 = 1,

128 
	mV4L2_BUF_TYPE_VIDEO_OUTPUT
 = 2,

129 
	mV4L2_BUF_TYPE_VIDEO_OVERLAY
 = 3,

130 
	mV4L2_BUF_TYPE_VBI_CAPTURE
 = 4,

131 
	mV4L2_BUF_TYPE_VBI_OUTPUT
 = 5,

132 
	mV4L2_BUF_TYPE_SLICED_VBI_CAPTURE
 = 6,

133 
	mV4L2_BUF_TYPE_SLICED_VBI_OUTPUT
 = 7,

136 
	mV4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY
 = 8,

138 
	mV4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE
 = 9,

139 
	mV4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE
 = 10,

141 
	mV4L2_BUF_TYPE_PRIVATE
 = 0x80,

144 
	#V4L2_TYPE_IS_MULTIPLANAR
(
ty≥
) \

145 ((
ty≥
Ë=
V4L2_BUF_TYPE_VIDEO_CAPTURE_MPLANE
 \

146 || (
ty≥
Ë=
V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE
)

	)

148 
	#V4L2_TYPE_IS_OUTPUT
(
ty≥
) \

149 ((
ty≥
Ë=
V4L2_BUF_TYPE_VIDEO_OUTPUT
 \

150 || (
ty≥
Ë=
V4L2_BUF_TYPE_VIDEO_OUTPUT_MPLANE
 \

151 || (
ty≥
Ë=
V4L2_BUF_TYPE_VIDEO_OVERLAY
 \

152 || (
ty≥
Ë=
V4L2_BUF_TYPE_VIDEO_OUTPUT_OVERLAY
 \

153 || (
ty≥
Ë=
V4L2_BUF_TYPE_VBI_OUTPUT
 \

154 || (
ty≥
Ë=
V4L2_BUF_TYPE_SLICED_VBI_OUTPUT
)

	)

156 
	ev4l2_tu√r_ty≥
 {

157 
	mV4L2_TUNER_RADIO
 = 1,

158 
	mV4L2_TUNER_ANALOG_TV
 = 2,

159 
	mV4L2_TUNER_DIGITAL_TV
 = 3,

162 
	ev4l2_mem‹y
 {

163 
	mV4L2_MEMORY_MMAP
 = 1,

164 
	mV4L2_MEMORY_USERPTR
 = 2,

165 
	mV4L2_MEMORY_OVERLAY
 = 3,

166 
	mV4L2_MEMORY_DMABUF
 = 4,

170 
	ev4l2_cﬁ‹•a˚
 {

172 
	mV4L2_COLORSPACE_SMPTE170M
 = 1,

175 
	mV4L2_COLORSPACE_SMPTE240M
 = 2,

178 
	mV4L2_COLORSPACE_REC709
 = 3,

181 
	mV4L2_COLORSPACE_BT878
 = 4,

184 
	mV4L2_COLORSPACE_470_SYSTEM_M
 = 5,

185 
	mV4L2_COLORSPACE_470_SYSTEM_BG
 = 6,

191 
	mV4L2_COLORSPACE_JPEG
 = 7,

194 
	mV4L2_COLORSPACE_SRGB
 = 8,

197 
	ev4l2_¥i‹ôy
 {

198 
	mV4L2_PRIORITY_UNSET
 = 0,

199 
	mV4L2_PRIORITY_BACKGROUND
 = 1,

200 
	mV4L2_PRIORITY_INTERACTIVE
 = 2,

201 
	mV4L2_PRIORITY_RECORD
 = 3,

202 
	mV4L2_PRIORITY_DEFAULT
 = 
V4L2_PRIORITY_INTERACTIVE
,

205 
	sv4l2_ª˘
 {

206 
__s32
 
	mÀ·
;

207 
__s32
 
	mt›
;

208 
__s32
 
	mwidth
;

209 
__s32
 
	mheight
;

212 
	sv4l2_‰a˘
 {

213 
__u32
 
	mnumî©‹
;

214 
__u32
 
	mdíomö©‹
;

228 
	sv4l2_ˇ∑bûôy
 {

229 
__u8
 
	mdrivî
[16];

230 
__u8
 
	mˇrd
[32];

231 
__u8
 
	mbus_öfo
[32];

232 
__u32
 
	mvîsi⁄
;

233 
__u32
 
	mˇ∑bûôõs
;

234 
__u32
 
	mdevi˚_ˇps
;

235 
__u32
 
	mª£rved
[3];

239 
	#V4L2_CAP_VIDEO_CAPTURE
 0x00000001

	)

240 
	#V4L2_CAP_VIDEO_OUTPUT
 0x00000002

	)

241 
	#V4L2_CAP_VIDEO_OVERLAY
 0x00000004

	)

242 
	#V4L2_CAP_VBI_CAPTURE
 0x00000010

	)

243 
	#V4L2_CAP_VBI_OUTPUT
 0x00000020

	)

244 
	#V4L2_CAP_SLICED_VBI_CAPTURE
 0x00000040

	)

245 
	#V4L2_CAP_SLICED_VBI_OUTPUT
 0x00000080

	)

246 
	#V4L2_CAP_RDS_CAPTURE
 0x00000100

	)

247 
	#V4L2_CAP_VIDEO_OUTPUT_OVERLAY
 0x00000200

	)

248 
	#V4L2_CAP_HW_FREQ_SEEK
 0x00000400

	)

249 
	#V4L2_CAP_RDS_OUTPUT
 0x00000800

	)

252 
	#V4L2_CAP_VIDEO_CAPTURE_MPLANE
 0x00001000

	)

254 
	#V4L2_CAP_VIDEO_OUTPUT_MPLANE
 0x00002000

	)

256 
	#V4L2_CAP_VIDEO_M2M_MPLANE
 0x00004000

	)

258 
	#V4L2_CAP_VIDEO_M2M
 0x00008000

	)

260 
	#V4L2_CAP_TUNER
 0x00010000

	)

261 
	#V4L2_CAP_AUDIO
 0x00020000

	)

262 
	#V4L2_CAP_RADIO
 0x00040000

	)

263 
	#V4L2_CAP_MODULATOR
 0x00080000

	)

265 
	#V4L2_CAP_READWRITE
 0x01000000

	)

266 
	#V4L2_CAP_ASYNCIO
 0x02000000

	)

267 
	#V4L2_CAP_STREAMING
 0x04000000

	)

269 
	#V4L2_CAP_DEVICE_CAPS
 0x80000000

	)

274 
	sv4l2_pix_f‹m©
 {

275 
__u32
 
	mwidth
;

276 
__u32
 
	mheight
;

277 
__u32
 
	mpixñf‹m©
;

278 
__u32
 
	mfõld
;

279 
__u32
 
	mbyã•îlöe
;

280 
__u32
 
	msizeimage
;

281 
__u32
 
	mcﬁ‹•a˚
;

282 
__u32
 
	m¥iv
;

288 
	#V4L2_PIX_FMT_RGB332
 
	`v4l2_fourcc
('R', 'G', 'B', '1'Ë

	)

289 
	#V4L2_PIX_FMT_RGB444
 
	`v4l2_fourcc
('R', '4', '4', '4'Ë

	)

290 
	#V4L2_PIX_FMT_RGB555
 
	`v4l2_fourcc
('R', 'G', 'B', 'O'Ë

	)

291 
	#V4L2_PIX_FMT_RGB565
 
	`v4l2_fourcc
('R', 'G', 'B', 'P'Ë

	)

292 
	#V4L2_PIX_FMT_RGB555X
 
	`v4l2_fourcc
('R', 'G', 'B', 'Q'Ë

	)

293 
	#V4L2_PIX_FMT_RGB565X
 
	`v4l2_fourcc
('R', 'G', 'B', 'R'Ë

	)

294 
	#V4L2_PIX_FMT_BGR666
 
	`v4l2_fourcc
('B', 'G', 'R', 'H'Ë

	)

295 
	#V4L2_PIX_FMT_BGR24
 
	`v4l2_fourcc
('B', 'G', 'R', '3'Ë

	)

296 
	#V4L2_PIX_FMT_RGB24
 
	`v4l2_fourcc
('R', 'G', 'B', '3'Ë

	)

297 
	#V4L2_PIX_FMT_BGR32
 
	`v4l2_fourcc
('B', 'G', 'R', '4'Ë

	)

298 
	#V4L2_PIX_FMT_RGB32
 
	`v4l2_fourcc
('R', 'G', 'B', '4'Ë

	)

301 
	#V4L2_PIX_FMT_GREY
 
	`v4l2_fourcc
('G', 'R', 'E', 'Y'Ë

	)

302 
	#V4L2_PIX_FMT_Y4
 
	`v4l2_fourcc
('Y', '0', '4', ' 'Ë

	)

303 
	#V4L2_PIX_FMT_Y6
 
	`v4l2_fourcc
('Y', '0', '6', ' 'Ë

	)

304 
	#V4L2_PIX_FMT_Y10
 
	`v4l2_fourcc
('Y', '1', '0', ' 'Ë

	)

305 
	#V4L2_PIX_FMT_Y12
 
	`v4l2_fourcc
('Y', '1', '2', ' 'Ë

	)

306 
	#V4L2_PIX_FMT_Y16
 
	`v4l2_fourcc
('Y', '1', '6', ' 'Ë

	)

309 
	#V4L2_PIX_FMT_Y10BPACK
 
	`v4l2_fourcc
('Y', '1', '0', 'B'Ë

	)

312 
	#V4L2_PIX_FMT_PAL8
 
	`v4l2_fourcc
('P', 'A', 'L', '8'Ë

	)

315 
	#V4L2_PIX_FMT_UV8
 
	`v4l2_fourcc
('U', 'V', '8', ' 'Ë

	)

318 
	#V4L2_PIX_FMT_YVU410
 
	`v4l2_fourcc
('Y', 'V', 'U', '9'Ë

	)

319 
	#V4L2_PIX_FMT_YVU420
 
	`v4l2_fourcc
('Y', 'V', '1', '2'Ë

	)

320 
	#V4L2_PIX_FMT_YUYV
 
	`v4l2_fourcc
('Y', 'U', 'Y', 'V'Ë

	)

321 
	#V4L2_PIX_FMT_YYUV
 
	`v4l2_fourcc
('Y', 'Y', 'U', 'V'Ë

	)

322 
	#V4L2_PIX_FMT_YVYU
 
	`v4l2_fourcc
('Y', 'V', 'Y', 'U'Ë

	)

323 
	#V4L2_PIX_FMT_UYVY
 
	`v4l2_fourcc
('U', 'Y', 'V', 'Y'Ë

	)

324 
	#V4L2_PIX_FMT_VYUY
 
	`v4l2_fourcc
('V', 'Y', 'U', 'Y'Ë

	)

325 
	#V4L2_PIX_FMT_YUV422P
 
	`v4l2_fourcc
('4', '2', '2', 'P'Ë

	)

326 
	#V4L2_PIX_FMT_YUV411P
 
	`v4l2_fourcc
('4', '1', '1', 'P'Ë

	)

327 
	#V4L2_PIX_FMT_Y41P
 
	`v4l2_fourcc
('Y', '4', '1', 'P'Ë

	)

328 
	#V4L2_PIX_FMT_YUV444
 
	`v4l2_fourcc
('Y', '4', '4', '4'Ë

	)

329 
	#V4L2_PIX_FMT_YUV555
 
	`v4l2_fourcc
('Y', 'U', 'V', 'O'Ë

	)

330 
	#V4L2_PIX_FMT_YUV565
 
	`v4l2_fourcc
('Y', 'U', 'V', 'P'Ë

	)

331 
	#V4L2_PIX_FMT_YUV32
 
	`v4l2_fourcc
('Y', 'U', 'V', '4'Ë

	)

332 
	#V4L2_PIX_FMT_YUV410
 
	`v4l2_fourcc
('Y', 'U', 'V', '9'Ë

	)

333 
	#V4L2_PIX_FMT_YUV420
 
	`v4l2_fourcc
('Y', 'U', '1', '2'Ë

	)

334 
	#V4L2_PIX_FMT_HI240
 
	`v4l2_fourcc
('H', 'I', '2', '4'Ë

	)

335 
	#V4L2_PIX_FMT_HM12
 
	`v4l2_fourcc
('H', 'M', '1', '2'Ë

	)

336 
	#V4L2_PIX_FMT_M420
 
	`v4l2_fourcc
('M', '4', '2', '0'Ë

	)

339 
	#V4L2_PIX_FMT_NV12
 
	`v4l2_fourcc
('N', 'V', '1', '2'Ë

	)

340 
	#V4L2_PIX_FMT_NV21
 
	`v4l2_fourcc
('N', 'V', '2', '1'Ë

	)

341 
	#V4L2_PIX_FMT_NV16
 
	`v4l2_fourcc
('N', 'V', '1', '6'Ë

	)

342 
	#V4L2_PIX_FMT_NV61
 
	`v4l2_fourcc
('N', 'V', '6', '1'Ë

	)

343 
	#V4L2_PIX_FMT_NV24
 
	`v4l2_fourcc
('N', 'V', '2', '4'Ë

	)

344 
	#V4L2_PIX_FMT_NV42
 
	`v4l2_fourcc
('N', 'V', '4', '2'Ë

	)

347 
	#V4L2_PIX_FMT_NV12M
 
	`v4l2_fourcc
('N', 'M', '1', '2'Ë

	)

348 
	#V4L2_PIX_FMT_NV21M
 
	`v4l2_fourcc
('N', 'M', '2', '1'Ë

	)

349 
	#V4L2_PIX_FMT_NV16M
 
	`v4l2_fourcc
('N', 'M', '1', '6'Ë

	)

350 
	#V4L2_PIX_FMT_NV61M
 
	`v4l2_fourcc
('N', 'M', '6', '1'Ë

	)

351 
	#V4L2_PIX_FMT_NV12MT
 
	`v4l2_fourcc
('T', 'M', '1', '2'Ë

	)

352 
	#V4L2_PIX_FMT_NV12MT_16X16
 
	`v4l2_fourcc
('V', 'M', '1', '2'Ë

	)

355 
	#V4L2_PIX_FMT_YUV420M
 
	`v4l2_fourcc
('Y', 'M', '1', '2'Ë

	)

356 
	#V4L2_PIX_FMT_YVU420M
 
	`v4l2_fourcc
('Y', 'M', '2', '1'Ë

	)

359 
	#V4L2_PIX_FMT_SBGGR8
 
	`v4l2_fourcc
('B', 'A', '8', '1'Ë

	)

360 
	#V4L2_PIX_FMT_SGBRG8
 
	`v4l2_fourcc
('G', 'B', 'R', 'G'Ë

	)

361 
	#V4L2_PIX_FMT_SGRBG8
 
	`v4l2_fourcc
('G', 'R', 'B', 'G'Ë

	)

362 
	#V4L2_PIX_FMT_SRGGB8
 
	`v4l2_fourcc
('R', 'G', 'G', 'B'Ë

	)

363 
	#V4L2_PIX_FMT_SBGGR10
 
	`v4l2_fourcc
('B', 'G', '1', '0'Ë

	)

364 
	#V4L2_PIX_FMT_SGBRG10
 
	`v4l2_fourcc
('G', 'B', '1', '0'Ë

	)

365 
	#V4L2_PIX_FMT_SGRBG10
 
	`v4l2_fourcc
('B', 'A', '1', '0'Ë

	)

366 
	#V4L2_PIX_FMT_SRGGB10
 
	`v4l2_fourcc
('R', 'G', '1', '0'Ë

	)

367 
	#V4L2_PIX_FMT_SBGGR12
 
	`v4l2_fourcc
('B', 'G', '1', '2'Ë

	)

368 
	#V4L2_PIX_FMT_SGBRG12
 
	`v4l2_fourcc
('G', 'B', '1', '2'Ë

	)

369 
	#V4L2_PIX_FMT_SGRBG12
 
	`v4l2_fourcc
('B', 'A', '1', '2'Ë

	)

370 
	#V4L2_PIX_FMT_SRGGB12
 
	`v4l2_fourcc
('R', 'G', '1', '2'Ë

	)

372 
	#V4L2_PIX_FMT_SBGGR10ALAW8
 
	`v4l2_fourcc
('a', 'B', 'A', '8')

	)

373 
	#V4L2_PIX_FMT_SGBRG10ALAW8
 
	`v4l2_fourcc
('a', 'G', 'A', '8')

	)

374 
	#V4L2_PIX_FMT_SGRBG10ALAW8
 
	`v4l2_fourcc
('a', 'g', 'A', '8')

	)

375 
	#V4L2_PIX_FMT_SRGGB10ALAW8
 
	`v4l2_fourcc
('a', 'R', 'A', '8')

	)

377 
	#V4L2_PIX_FMT_SBGGR10DPCM8
 
	`v4l2_fourcc
('b', 'B', 'A', '8')

	)

378 
	#V4L2_PIX_FMT_SGBRG10DPCM8
 
	`v4l2_fourcc
('b', 'G', 'A', '8')

	)

379 
	#V4L2_PIX_FMT_SGRBG10DPCM8
 
	`v4l2_fourcc
('B', 'D', '1', '0')

	)

380 
	#V4L2_PIX_FMT_SRGGB10DPCM8
 
	`v4l2_fourcc
('b', 'R', 'A', '8')

	)

385 
	#V4L2_PIX_FMT_SBGGR16
 
	`v4l2_fourcc
('B', 'Y', 'R', '2'Ë

	)

388 
	#V4L2_PIX_FMT_MJPEG
 
	`v4l2_fourcc
('M', 'J', 'P', 'G'Ë

	)

389 
	#V4L2_PIX_FMT_JPEG
 
	`v4l2_fourcc
('J', 'P', 'E', 'G'Ë

	)

390 
	#V4L2_PIX_FMT_DV
 
	`v4l2_fourcc
('d', 'v', 's', 'd'Ë

	)

391 
	#V4L2_PIX_FMT_MPEG
 
	`v4l2_fourcc
('M', 'P', 'E', 'G'Ë

	)

392 
	#V4L2_PIX_FMT_H264
 
	`v4l2_fourcc
('H', '2', '6', '4'Ë

	)

393 
	#V4L2_PIX_FMT_H264_NO_SC
 
	`v4l2_fourcc
('A', 'V', 'C', '1'Ë

	)

394 
	#V4L2_PIX_FMT_H264_MVC
 
	`v4l2_fourcc
('M', '2', '6', '4'Ë

	)

395 
	#V4L2_PIX_FMT_H263
 
	`v4l2_fourcc
('H', '2', '6', '3'Ë

	)

396 
	#V4L2_PIX_FMT_MPEG1
 
	`v4l2_fourcc
('M', 'P', 'G', '1'Ë

	)

397 
	#V4L2_PIX_FMT_MPEG2
 
	`v4l2_fourcc
('M', 'P', 'G', '2'Ë

	)

398 
	#V4L2_PIX_FMT_MPEG4
 
	`v4l2_fourcc
('M', 'P', 'G', '4'Ë

	)

399 
	#V4L2_PIX_FMT_XVID
 
	`v4l2_fourcc
('X', 'V', 'I', 'D'Ë

	)

400 
	#V4L2_PIX_FMT_VC1_ANNEX_G
 
	`v4l2_fourcc
('V', 'C', '1', 'G'Ë

	)

401 
	#V4L2_PIX_FMT_VC1_ANNEX_L
 
	`v4l2_fourcc
('V', 'C', '1', 'L'Ë

	)

402 
	#V4L2_PIX_FMT_VP8
 
	`v4l2_fourcc
('V', 'P', '8', '0'Ë

	)

405 
	#V4L2_PIX_FMT_CPIA1
 
	`v4l2_fourcc
('C', 'P', 'I', 'A'Ë

	)

406 
	#V4L2_PIX_FMT_WNVA
 
	`v4l2_fourcc
('W', 'N', 'V', 'A'Ë

	)

407 
	#V4L2_PIX_FMT_SN9C10X
 
	`v4l2_fourcc
('S', '9', '1', '0'Ë

	)

408 
	#V4L2_PIX_FMT_SN9C20X_I420
 
	`v4l2_fourcc
('S', '9', '2', '0'Ë

	)

409 
	#V4L2_PIX_FMT_PWC1
 
	`v4l2_fourcc
('P', 'W', 'C', '1'Ë

	)

410 
	#V4L2_PIX_FMT_PWC2
 
	`v4l2_fourcc
('P', 'W', 'C', '2'Ë

	)

411 
	#V4L2_PIX_FMT_ET61X251
 
	`v4l2_fourcc
('E', '6', '2', '5'Ë

	)

412 
	#V4L2_PIX_FMT_SPCA501
 
	`v4l2_fourcc
('S', '5', '0', '1'Ë

	)

413 
	#V4L2_PIX_FMT_SPCA505
 
	`v4l2_fourcc
('S', '5', '0', '5'Ë

	)

414 
	#V4L2_PIX_FMT_SPCA508
 
	`v4l2_fourcc
('S', '5', '0', '8'Ë

	)

415 
	#V4L2_PIX_FMT_SPCA561
 
	`v4l2_fourcc
('S', '5', '6', '1'Ë

	)

416 
	#V4L2_PIX_FMT_PAC207
 
	`v4l2_fourcc
('P', '2', '0', '7'Ë

	)

417 
	#V4L2_PIX_FMT_MR97310A
 
	`v4l2_fourcc
('M', '3', '1', '0'Ë

	)

418 
	#V4L2_PIX_FMT_JL2005BCD
 
	`v4l2_fourcc
('J', 'L', '2', '0'Ë

	)

419 
	#V4L2_PIX_FMT_SN9C2028
 
	`v4l2_fourcc
('S', 'O', 'N', 'X'Ë

	)

420 
	#V4L2_PIX_FMT_SQ905C
 
	`v4l2_fourcc
('9', '0', '5', 'C'Ë

	)

421 
	#V4L2_PIX_FMT_PJPG
 
	`v4l2_fourcc
('P', 'J', 'P', 'G'Ë

	)

422 
	#V4L2_PIX_FMT_OV511
 
	`v4l2_fourcc
('O', '5', '1', '1'Ë

	)

423 
	#V4L2_PIX_FMT_OV518
 
	`v4l2_fourcc
('O', '5', '1', '8'Ë

	)

424 
	#V4L2_PIX_FMT_STV0680
 
	`v4l2_fourcc
('S', '6', '8', '0'Ë

	)

425 
	#V4L2_PIX_FMT_TM6000
 
	`v4l2_fourcc
('T', 'M', '6', '0'Ë

	)

426 
	#V4L2_PIX_FMT_CIT_YYVYUY
 
	`v4l2_fourcc
('C', 'I', 'T', 'V'Ë

	)

427 
	#V4L2_PIX_FMT_KONICA420
 
	`v4l2_fourcc
('K', 'O', 'N', 'I'Ë

	)

428 
	#V4L2_PIX_FMT_JPGL
 
	`v4l2_fourcc
('J', 'P', 'G', 'L'Ë

	)

429 
	#V4L2_PIX_FMT_SE401
 
	`v4l2_fourcc
('S', '4', '0', '1'Ë

	)

430 
	#V4L2_PIX_FMT_S5C_UYVY_JPG
 
	`v4l2_fourcc
('S', '5', 'C', 'I'Ë

	)

435 
	sv4l2_fmtdesc
 {

436 
__u32
 
	mödex
;

437 
__u32
 
	mty≥
;

438 
__u32
 
	mÊags
;

439 
__u8
 
	mdes¸ùti⁄
[32];

440 
__u32
 
	mpixñf‹m©
;

441 
__u32
 
	mª£rved
[4];

444 
	#V4L2_FMT_FLAG_COMPRESSED
 0x0001

	)

445 
	#V4L2_FMT_FLAG_EMULATED
 0x0002

	)

452 
	ev4l2_‰msizëy≥s
 {

453 
	mV4L2_FRMSIZE_TYPE_DISCRETE
 = 1,

454 
	mV4L2_FRMSIZE_TYPE_CONTINUOUS
 = 2,

455 
	mV4L2_FRMSIZE_TYPE_STEPWISE
 = 3,

458 
	sv4l2_‰msize_dis¸ëe
 {

459 
__u32
 
	mwidth
;

460 
__u32
 
	mheight
;

463 
	sv4l2_‰msize_°ïwi£
 {

464 
__u32
 
	mmö_width
;

465 
__u32
 
	mmax_width
;

466 
__u32
 
	m°ï_width
;

467 
__u32
 
	mmö_height
;

468 
__u32
 
	mmax_height
;

469 
__u32
 
	m°ï_height
;

472 
	sv4l2_‰msizìnum
 {

473 
__u32
 
	mödex
;

474 
__u32
 
	mpixñ_f‹m©
;

475 
__u32
 
	mty≥
;

478 
v4l2_‰msize_dis¸ëe
 
	mdis¸ëe
;

479 
v4l2_‰msize_°ïwi£
 
	m°ïwi£
;

482 
__u32
 
	mª£rved
[2];

488 
	ev4l2_‰mivÆty≥s
 {

489 
	mV4L2_FRMIVAL_TYPE_DISCRETE
 = 1,

490 
	mV4L2_FRMIVAL_TYPE_CONTINUOUS
 = 2,

491 
	mV4L2_FRMIVAL_TYPE_STEPWISE
 = 3,

494 
	sv4l2_‰mivÆ_°ïwi£
 {

495 
v4l2_‰a˘
 
	mmö
;

496 
v4l2_‰a˘
 
	mmax
;

497 
v4l2_‰a˘
 
	m°ï
;

500 
	sv4l2_‰mivÆíum
 {

501 
__u32
 
	mödex
;

502 
__u32
 
	mpixñ_f‹m©
;

503 
__u32
 
	mwidth
;

504 
__u32
 
	mheight
;

505 
__u32
 
	mty≥
;

508 
v4l2_‰a˘
 
	mdis¸ëe
;

509 
v4l2_‰mivÆ_°ïwi£
 
	m°ïwi£
;

512 
__u32
 
	mª£rved
[2];

519 
	sv4l2_timecode
 {

520 
__u32
 
	mty≥
;

521 
__u32
 
	mÊags
;

522 
__u8
 
	m‰ames
;

523 
__u8
 
	m£c⁄ds
;

524 
__u8
 
	mmöuãs
;

525 
__u8
 
	mhours
;

526 
__u8
 
	mu£rbôs
[4];

530 
	#V4L2_TC_TYPE_24FPS
 1

	)

531 
	#V4L2_TC_TYPE_25FPS
 2

	)

532 
	#V4L2_TC_TYPE_30FPS
 3

	)

533 
	#V4L2_TC_TYPE_50FPS
 4

	)

534 
	#V4L2_TC_TYPE_60FPS
 5

	)

537 
	#V4L2_TC_FLAG_DROPFRAME
 0x0001

	)

538 
	#V4L2_TC_FLAG_COLORFRAME
 0x0002

	)

539 
	#V4L2_TC_USERBITS_fõld
 0x000C

	)

540 
	#V4L2_TC_USERBITS_USERDEFINED
 0x0000

	)

541 
	#V4L2_TC_USERBITS_8BITCHARS
 0x0008

	)

544 
	sv4l2_j≥gcom¥essi⁄
 {

545 
	mquÆôy
;

547 
	mAPPn
;

549 
	mAPP_Àn
;

550 
	mAPP_d©a
[60];

552 
	mCOM_Àn
;

553 
	mCOM_d©a
[60];

555 
__u32
 
	mj≥g_m¨kîs
;

565 
	#V4L2_JPEG_MARKER_DHT
 (1<<3Ë

	)

566 
	#V4L2_JPEG_MARKER_DQT
 (1<<4Ë

	)

567 
	#V4L2_JPEG_MARKER_DRI
 (1<<5Ë

	)

568 
	#V4L2_JPEG_MARKER_COM
 (1<<6Ë

	)

569 
	#V4L2_JPEG_MARKER_APP
 (1<<7Ë

	)

576 
	sv4l2_ªque°buf„rs
 {

577 
__u32
 
	mcou¡
;

578 
__u32
 
	mty≥
;

579 
__u32
 
	mmem‹y
;

580 
__u32
 
	mª£rved
[2];

603 
	sv4l2_∂™e
 {

604 
__u32
 
	mbyãsu£d
;

605 
__u32
 
	mÀngth
;

607 
__u32
 
	mmem_off£t
;

608 
	mu£Ωå
;

609 
__s32
 
	mfd
;

610 } 
	mm
;

611 
__u32
 
	md©a_off£t
;

612 
__u32
 
	mª£rved
[11];

646 
	sv4l2_buf„r
 {

647 
__u32
 
	mödex
;

648 
__u32
 
	mty≥
;

649 
__u32
 
	mbyãsu£d
;

650 
__u32
 
	mÊags
;

651 
__u32
 
	mfõld
;

652 
timevÆ
 
	mtime°amp
;

653 
v4l2_timecode
 
	mtimecode
;

654 
__u32
 
	m£quí˚
;

657 
__u32
 
	mmem‹y
;

659 
__u32
 
	moff£t
;

660 
	mu£Ωå
;

661 
v4l2_∂™e
 *
	m∂™es
;

662 
__s32
 
	mfd
;

663 } 
	mm
;

664 
__u32
 
	mÀngth
;

665 
__u32
 
	mª£rved2
;

666 
__u32
 
	mª£rved
;

670 
	#V4L2_BUF_FLAG_MAPPED
 0x0001

	)

671 
	#V4L2_BUF_FLAG_QUEUED
 0x0002

	)

672 
	#V4L2_BUF_FLAG_DONE
 0x0004

	)

673 
	#V4L2_BUF_FLAG_KEYFRAME
 0x0008

	)

674 
	#V4L2_BUF_FLAG_PFRAME
 0x0010

	)

675 
	#V4L2_BUF_FLAG_BFRAME
 0x0020

	)

677 
	#V4L2_BUF_FLAG_ERROR
 0x0040

	)

678 
	#V4L2_BUF_FLAG_TIMECODE
 0x0100

	)

679 
	#V4L2_BUF_FLAG_PREPARED
 0x0400

	)

681 
	#V4L2_BUF_FLAG_NO_CACHE_INVALIDATE
 0x0800

	)

682 
	#V4L2_BUF_FLAG_NO_CACHE_CLEAN
 0x1000

	)

684 
	#V4L2_BUF_FLAG_TIMESTAMP_MASK
 0xe000

	)

685 
	#V4L2_BUF_FLAG_TIMESTAMP_UNKNOWN
 0x0000

	)

686 
	#V4L2_BUF_FLAG_TIMESTAMP_MONOTONIC
 0x2000

	)

687 
	#V4L2_BUF_FLAG_TIMESTAMP_COPY
 0x4000

	)

707 
	sv4l2_exp‹tbuf„r
 {

708 
__u32
 
	mty≥
;

709 
__u32
 
	mödex
;

710 
__u32
 
	m∂™e
;

711 
__u32
 
	mÊags
;

712 
__s32
 
	mfd
;

713 
__u32
 
	mª£rved
[11];

719 
	sv4l2_‰amebuf„r
 {

720 
__u32
 
	mˇ∑bûôy
;

721 
__u32
 
	mÊags
;

724 *
	mba£
;

725 
v4l2_pix_f‹m©
 
	mfmt
;

728 
	#V4L2_FBUF_CAP_EXTERNOVERLAY
 0x0001

	)

729 
	#V4L2_FBUF_CAP_CHROMAKEY
 0x0002

	)

730 
	#V4L2_FBUF_CAP_LIST_CLIPPING
 0x0004

	)

731 
	#V4L2_FBUF_CAP_BITMAP_CLIPPING
 0x0008

	)

732 
	#V4L2_FBUF_CAP_LOCAL_ALPHA
 0x0010

	)

733 
	#V4L2_FBUF_CAP_GLOBAL_ALPHA
 0x0020

	)

734 
	#V4L2_FBUF_CAP_LOCAL_INV_ALPHA
 0x0040

	)

735 
	#V4L2_FBUF_CAP_SRC_CHROMAKEY
 0x0080

	)

737 
	#V4L2_FBUF_FLAG_PRIMARY
 0x0001

	)

738 
	#V4L2_FBUF_FLAG_OVERLAY
 0x0002

	)

739 
	#V4L2_FBUF_FLAG_CHROMAKEY
 0x0004

	)

740 
	#V4L2_FBUF_FLAG_LOCAL_ALPHA
 0x0008

	)

741 
	#V4L2_FBUF_FLAG_GLOBAL_ALPHA
 0x0010

	)

742 
	#V4L2_FBUF_FLAG_LOCAL_INV_ALPHA
 0x0020

	)

743 
	#V4L2_FBUF_FLAG_SRC_CHROMAKEY
 0x0040

	)

745 
	sv4l2_˛ù
 {

746 
v4l2_ª˘
 
	mc
;

747 
v4l2_˛ù
 *
	m√xt
;

750 
	sv4l2_wödow
 {

751 
v4l2_ª˘
 
	mw
;

752 
__u32
 
	mfõld
;

753 
__u32
 
	mchromakey
;

754 
v4l2_˛ù
 *
	m˛ùs
;

755 
__u32
 
	m˛ùcou¡
;

756 *
	mbôm≠
;

757 
__u8
 
	mglobÆ_Æpha
;

763 
	sv4l2_ˇ±uª∑rm
 {

764 
__u32
 
	mˇ∑bûôy
;

765 
__u32
 
	mˇ±uªmode
;

766 
v4l2_‰a˘
 
	mtimïî‰ame
;

767 
__u32
 
	mexãndedmode
;

768 
__u32
 
	mªadbuf„rs
;

769 
__u32
 
	mª£rved
[4];

773 
	#V4L2_MODE_HIGHQUALITY
 0x0001

	)

774 
	#V4L2_CAP_TIMEPERFRAME
 0x1000

	)

776 
	sv4l2_ouçuç¨m
 {

777 
__u32
 
	mˇ∑bûôy
;

778 
__u32
 
	mouçutmode
;

779 
v4l2_‰a˘
 
	mtimïî‰ame
;

780 
__u32
 
	mexãndedmode
;

781 
__u32
 
	mwrôebuf„rs
;

782 
__u32
 
	mª£rved
[4];

788 
	sv4l2_¸›ˇp
 {

789 
__u32
 
	mty≥
;

790 
v4l2_ª˘
 
	mbounds
;

791 
v4l2_ª˘
 
	mde‰e˘
;

792 
v4l2_‰a˘
 
	mpixña•e˘
;

795 
	sv4l2_¸›
 {

796 
__u32
 
	mty≥
;

797 
v4l2_ª˘
 
	mc
;

813 
	sv4l2_£À˘i⁄
 {

814 
__u32
 
	mty≥
;

815 
__u32
 
	mèrgë
;

816 
__u32
 
	mÊags
;

817 
v4l2_ª˘
 
	mr
;

818 
__u32
 
	mª£rved
[9];

826 
__u64
 
	tv4l2_°d_id
;

829 
	#V4L2_STD_PAL_B
 ((
v4l2_°d_id
)0x00000001)

	)

830 
	#V4L2_STD_PAL_B1
 ((
v4l2_°d_id
)0x00000002)

	)

831 
	#V4L2_STD_PAL_G
 ((
v4l2_°d_id
)0x00000004)

	)

832 
	#V4L2_STD_PAL_H
 ((
v4l2_°d_id
)0x00000008)

	)

833 
	#V4L2_STD_PAL_I
 ((
v4l2_°d_id
)0x00000010)

	)

834 
	#V4L2_STD_PAL_D
 ((
v4l2_°d_id
)0x00000020)

	)

835 
	#V4L2_STD_PAL_D1
 ((
v4l2_°d_id
)0x00000040)

	)

836 
	#V4L2_STD_PAL_K
 ((
v4l2_°d_id
)0x00000080)

	)

838 
	#V4L2_STD_PAL_M
 ((
v4l2_°d_id
)0x00000100)

	)

839 
	#V4L2_STD_PAL_N
 ((
v4l2_°d_id
)0x00000200)

	)

840 
	#V4L2_STD_PAL_Nc
 ((
v4l2_°d_id
)0x00000400)

	)

841 
	#V4L2_STD_PAL_60
 ((
v4l2_°d_id
)0x00000800)

	)

843 
	#V4L2_STD_NTSC_M
 ((
v4l2_°d_id
)0x00001000Ë

	)

844 
	#V4L2_STD_NTSC_M_JP
 ((
v4l2_°d_id
)0x00002000Ë

	)

845 
	#V4L2_STD_NTSC_443
 ((
v4l2_°d_id
)0x00004000)

	)

846 
	#V4L2_STD_NTSC_M_KR
 ((
v4l2_°d_id
)0x00008000Ë

	)

848 
	#V4L2_STD_SECAM_B
 ((
v4l2_°d_id
)0x00010000)

	)

849 
	#V4L2_STD_SECAM_D
 ((
v4l2_°d_id
)0x00020000)

	)

850 
	#V4L2_STD_SECAM_G
 ((
v4l2_°d_id
)0x00040000)

	)

851 
	#V4L2_STD_SECAM_H
 ((
v4l2_°d_id
)0x00080000)

	)

852 
	#V4L2_STD_SECAM_K
 ((
v4l2_°d_id
)0x00100000)

	)

853 
	#V4L2_STD_SECAM_K1
 ((
v4l2_°d_id
)0x00200000)

	)

854 
	#V4L2_STD_SECAM_L
 ((
v4l2_°d_id
)0x00400000)

	)

855 
	#V4L2_STD_SECAM_LC
 ((
v4l2_°d_id
)0x00800000)

	)

858 
	#V4L2_STD_ATSC_8_VSB
 ((
v4l2_°d_id
)0x01000000)

	)

859 
	#V4L2_STD_ATSC_16_VSB
 ((
v4l2_°d_id
)0x02000000)

	)

879 
	#V4L2_STD_NTSC
 (
V4L2_STD_NTSC_M
 |\

880 
V4L2_STD_NTSC_M_JP
 |\

881 
V4L2_STD_NTSC_M_KR
)

	)

883 
	#V4L2_STD_SECAM_DK
 (
V4L2_STD_SECAM_D
 |\

884 
V4L2_STD_SECAM_K
 |\

885 
V4L2_STD_SECAM_K1
)

	)

887 
	#V4L2_STD_SECAM
 (
V4L2_STD_SECAM_B
 |\

888 
V4L2_STD_SECAM_G
 |\

889 
V4L2_STD_SECAM_H
 |\

890 
V4L2_STD_SECAM_DK
 |\

891 
V4L2_STD_SECAM_L
 |\

892 
V4L2_STD_SECAM_LC
)

	)

894 
	#V4L2_STD_PAL_BG
 (
V4L2_STD_PAL_B
 |\

895 
V4L2_STD_PAL_B1
 |\

896 
V4L2_STD_PAL_G
)

	)

897 
	#V4L2_STD_PAL_DK
 (
V4L2_STD_PAL_D
 |\

898 
V4L2_STD_PAL_D1
 |\

899 
V4L2_STD_PAL_K
)

	)

905 
	#V4L2_STD_PAL
 (
V4L2_STD_PAL_BG
 |\

906 
V4L2_STD_PAL_DK
 |\

907 
V4L2_STD_PAL_H
 |\

908 
V4L2_STD_PAL_I
)

	)

910 
	#V4L2_STD_B
 (
V4L2_STD_PAL_B
 |\

911 
V4L2_STD_PAL_B1
 |\

912 
V4L2_STD_SECAM_B
)

	)

913 
	#V4L2_STD_G
 (
V4L2_STD_PAL_G
 |\

914 
V4L2_STD_SECAM_G
)

	)

915 
	#V4L2_STD_H
 (
V4L2_STD_PAL_H
 |\

916 
V4L2_STD_SECAM_H
)

	)

917 
	#V4L2_STD_L
 (
V4L2_STD_SECAM_L
 |\

918 
V4L2_STD_SECAM_LC
)

	)

919 
	#V4L2_STD_GH
 (
V4L2_STD_G
 |\

920 
V4L2_STD_H
)

	)

921 
	#V4L2_STD_DK
 (
V4L2_STD_PAL_DK
 |\

922 
V4L2_STD_SECAM_DK
)

	)

923 
	#V4L2_STD_BG
 (
V4L2_STD_B
 |\

924 
V4L2_STD_G
)

	)

925 
	#V4L2_STD_MN
 (
V4L2_STD_PAL_M
 |\

926 
V4L2_STD_PAL_N
 |\

927 
V4L2_STD_PAL_Nc
 |\

928 
V4L2_STD_NTSC
)

	)

931 
	#V4L2_STD_MTS
 (
V4L2_STD_NTSC_M
 |\

932 
V4L2_STD_PAL_M
 |\

933 
V4L2_STD_PAL_N
 |\

934 
V4L2_STD_PAL_Nc
)

	)

937 
	#V4L2_STD_525_60
 (
V4L2_STD_PAL_M
 |\

938 
V4L2_STD_PAL_60
 |\

939 
V4L2_STD_NTSC
 |\

940 
V4L2_STD_NTSC_443
)

	)

942 
	#V4L2_STD_625_50
 (
V4L2_STD_PAL
 |\

943 
V4L2_STD_PAL_N
 |\

944 
V4L2_STD_PAL_Nc
 |\

945 
V4L2_STD_SECAM
)

	)

947 
	#V4L2_STD_ATSC
 (
V4L2_STD_ATSC_8_VSB
 |\

948 
V4L2_STD_ATSC_16_VSB
)

	)

950 
	#V4L2_STD_UNKNOWN
 0

	)

951 
	#V4L2_STD_ALL
 (
V4L2_STD_525_60
 |\

952 
V4L2_STD_625_50
)

	)

954 
	sv4l2_°™d¨d
 {

955 
__u32
 
	mödex
;

956 
v4l2_°d_id
 
	mid
;

957 
__u8
 
	m«me
[24];

958 
v4l2_‰a˘
 
	m‰amïîiod
;

959 
__u32
 
	m‰amñöes
;

960 
__u32
 
	mª£rved
[4];

999 
	sv4l2_bt_timögs
 {

1000 
__u32
 
	mwidth
;

1001 
__u32
 
	mheight
;

1002 
__u32
 
	möãæa˚d
;

1003 
__u32
 
	mpﬁ¨ôõs
;

1004 
__u64
 
	mpixñ˛ock
;

1005 
__u32
 
	mh‰⁄ç‹ch
;

1006 
__u32
 
	mhsync
;

1007 
__u32
 
	mhbackp‹ch
;

1008 
__u32
 
	mv‰⁄ç‹ch
;

1009 
__u32
 
	mvsync
;

1010 
__u32
 
	mvbackp‹ch
;

1011 
__u32
 
	mû_v‰⁄ç‹ch
;

1012 
__u32
 
	mû_vsync
;

1013 
__u32
 
	mû_vbackp‹ch
;

1014 
__u32
 
	m°™d¨ds
;

1015 
__u32
 
	mÊags
;

1016 
__u32
 
	mª£rved
[14];

1017 } 
__©åibuã__
 ((
∑cked
));

1020 
	#V4L2_DV_PROGRESSIVE
 0

	)

1021 
	#V4L2_DV_INTERLACED
 1

	)

1024 
	#V4L2_DV_VSYNC_POS_POL
 0x00000001

	)

1025 
	#V4L2_DV_HSYNC_POS_POL
 0x00000002

	)

1028 
	#V4L2_DV_BT_STD_CEA861
 (1 << 0Ë

	)

1029 
	#V4L2_DV_BT_STD_DMT
 (1 << 1Ë

	)

1030 
	#V4L2_DV_BT_STD_CVT
 (1 << 2Ë

	)

1031 
	#V4L2_DV_BT_STD_GTF
 (1 << 3Ë

	)

1039 
	#V4L2_DV_FL_REDUCED_BLANKING
 (1 << 0)

	)

1043 
	#V4L2_DV_FL_CAN_REDUCE_FPS
 (1 << 1)

	)

1051 
	#V4L2_DV_FL_REDUCED_FPS
 (1 << 2)

	)

1056 
	#V4L2_DV_FL_HALF_LINE
 (1 << 3)

	)

1059 
	#V4L2_DV_BT_BLANKING_WIDTH
(
bt
) \

1060 (
bt
->
h‰⁄ç‹ch
 + bt->
hsync
 + bt->
hbackp‹ch
)

	)

1061 
	#V4L2_DV_BT_FRAME_WIDTH
(
bt
) \

1062 (
bt
->
width
 + 
	`V4L2_DV_BT_BLANKING_WIDTH
(bt))

	)

1063 
	#V4L2_DV_BT_BLANKING_HEIGHT
(
bt
) \

1064 (
bt
->
v‰⁄ç‹ch
 + bt->
vsync
 + bt->
vbackp‹ch
 + \

1065 
bt
->
û_v‰⁄ç‹ch
 + bt->
û_vsync
 + bt->
û_vbackp‹ch
)

	)

1066 
	#V4L2_DV_BT_FRAME_HEIGHT
(
bt
) \

1067 (
bt
->
height
 + 
	`V4L2_DV_BT_BLANKING_HEIGHT
(bt))

	)

1073 
	sv4l2_dv_timögs
 {

1074 
__u32
 
	mty≥
;

1076 
v4l2_bt_timögs
 
	mbt
;

1077 
__u32
 
	mª£rved
[32];

1079 } 
__©åibuã__
 ((
∑cked
));

1082 
	#V4L2_DV_BT_656_1120
 0

	)

1090 
	sv4l2_íum_dv_timögs
 {

1091 
__u32
 
	mödex
;

1092 
__u32
 
	mª£rved
[3];

1093 
v4l2_dv_timögs
 
	mtimögs
;

1107 
	sv4l2_bt_timögs_ˇp
 {

1108 
__u32
 
	mmö_width
;

1109 
__u32
 
	mmax_width
;

1110 
__u32
 
	mmö_height
;

1111 
__u32
 
	mmax_height
;

1112 
__u64
 
	mmö_pixñ˛ock
;

1113 
__u64
 
	mmax_pixñ˛ock
;

1114 
__u32
 
	m°™d¨ds
;

1115 
__u32
 
	mˇ∑bûôõs
;

1116 
__u32
 
	mª£rved
[16];

1117 } 
__©åibuã__
 ((
∑cked
));

1120 
	#V4L2_DV_BT_CAP_INTERLACED
 (1 << 0)

	)

1122 
	#V4L2_DV_BT_CAP_PROGRESSIVE
 (1 << 1)

	)

1124 
	#V4L2_DV_BT_CAP_REDUCED_BLANKING
 (1 << 2)

	)

1126 
	#V4L2_DV_BT_CAP_CUSTOM
 (1 << 3)

	)

1132 
	sv4l2_dv_timögs_ˇp
 {

1133 
__u32
 
	mty≥
;

1134 
__u32
 
	mª£rved
[3];

1136 
v4l2_bt_timögs_ˇp
 
	mbt
;

1137 
__u32
 
	møw_d©a
[32];

1145 
	sv4l2_öput
 {

1146 
__u32
 
	mödex
;

1147 
__u8
 
	m«me
[32];

1148 
__u32
 
	mty≥
;

1149 
__u32
 
	maudio£t
;

1150 
__u32
 
	mtu√r
;

1151 
v4l2_°d_id
 
	m°d
;

1152 
__u32
 
	m°©us
;

1153 
__u32
 
	mˇ∑bûôõs
;

1154 
__u32
 
	mª£rved
[3];

1158 
	#V4L2_INPUT_TYPE_TUNER
 1

	)

1159 
	#V4L2_INPUT_TYPE_CAMERA
 2

	)

1162 
	#V4L2_IN_ST_NO_POWER
 0x00000001

	)

1163 
	#V4L2_IN_ST_NO_SIGNAL
 0x00000002

	)

1164 
	#V4L2_IN_ST_NO_COLOR
 0x00000004

	)

1168 
	#V4L2_IN_ST_HFLIP
 0x00000010

	)

1169 
	#V4L2_IN_ST_VFLIP
 0x00000020

	)

1172 
	#V4L2_IN_ST_NO_H_LOCK
 0x00000100

	)

1173 
	#V4L2_IN_ST_COLOR_KILL
 0x00000200

	)

1176 
	#V4L2_IN_ST_NO_SYNC
 0x00010000

	)

1177 
	#V4L2_IN_ST_NO_EQU
 0x00020000

	)

1178 
	#V4L2_IN_ST_NO_CARRIER
 0x00040000

	)

1181 
	#V4L2_IN_ST_MACROVISION
 0x01000000

	)

1182 
	#V4L2_IN_ST_NO_ACCESS
 0x02000000

	)

1183 
	#V4L2_IN_ST_VTR
 0x04000000

	)

1186 
	#V4L2_IN_CAP_DV_TIMINGS
 0x00000002

	)

1187 
	#V4L2_IN_CAP_CUSTOM_TIMINGS
 
V4L2_IN_CAP_DV_TIMINGS


	)

1188 
	#V4L2_IN_CAP_STD
 0x00000004

	)

1193 
	sv4l2_ouçut
 {

1194 
__u32
 
	mödex
;

1195 
__u8
 
	m«me
[32];

1196 
__u32
 
	mty≥
;

1197 
__u32
 
	maudio£t
;

1198 
__u32
 
	mmoduœt‹
;

1199 
v4l2_°d_id
 
	m°d
;

1200 
__u32
 
	mˇ∑bûôõs
;

1201 
__u32
 
	mª£rved
[3];

1204 
	#V4L2_OUTPUT_TYPE_MODULATOR
 1

	)

1205 
	#V4L2_OUTPUT_TYPE_ANALOG
 2

	)

1206 
	#V4L2_OUTPUT_TYPE_ANALOGVGAOVERLAY
 3

	)

1209 
	#V4L2_OUT_CAP_DV_TIMINGS
 0x00000002

	)

1210 
	#V4L2_OUT_CAP_CUSTOM_TIMINGS
 
V4L2_OUT_CAP_DV_TIMINGS


	)

1211 
	#V4L2_OUT_CAP_STD
 0x00000004

	)

1216 
	sv4l2_c⁄åﬁ
 {

1217 
__u32
 
	mid
;

1218 
__s32
 
	mvÆue
;

1221 
	sv4l2_ext_c⁄åﬁ
 {

1222 
__u32
 
	mid
;

1223 
__u32
 
	msize
;

1224 
__u32
 
	mª£rved2
[1];

1226 
__s32
 
	mvÆue
;

1227 
__s64
 
	mvÆue64
;

1228 *
	m°rög
;

1230 } 
__©åibuã__
 ((
∑cked
));

1232 
	sv4l2_ext_c⁄åﬁs
 {

1233 
__u32
 
	m˘æ_˛ass
;

1234 
__u32
 
	mcou¡
;

1235 
__u32
 
	mîr‹_idx
;

1236 
__u32
 
	mª£rved
[2];

1237 
v4l2_ext_c⁄åﬁ
 *
	mc⁄åﬁs
;

1240 
	#V4L2_CTRL_ID_MASK
 (0x0fffffff)

	)

1241 
	#V4L2_CTRL_ID2CLASS
(
id
Ë((idË& 0x0fff0000UL)

	)

1242 
	#V4L2_CTRL_DRIVER_PRIV
(
id
Ë(((idË& 0xffffË>0x1000)

	)

1244 
	ev4l2_˘æ_ty≥
 {

1245 
	mV4L2_CTRL_TYPE_INTEGER
 = 1,

1246 
	mV4L2_CTRL_TYPE_BOOLEAN
 = 2,

1247 
	mV4L2_CTRL_TYPE_MENU
 = 3,

1248 
	mV4L2_CTRL_TYPE_BUTTON
 = 4,

1249 
	mV4L2_CTRL_TYPE_INTEGER64
 = 5,

1250 
	mV4L2_CTRL_TYPE_CTRL_CLASS
 = 6,

1251 
	mV4L2_CTRL_TYPE_STRING
 = 7,

1252 
	mV4L2_CTRL_TYPE_BITMASK
 = 8,

1253 
	mV4L2_CTRL_TYPE_INTEGER_MENU
 = 9,

1257 
	sv4l2_quîy˘æ
 {

1258 
__u32
 
	mid
;

1259 
__u32
 
	mty≥
;

1260 
__u8
 
	m«me
[32];

1261 
__s32
 
	mmöimum
;

1262 
__s32
 
	mmaximum
;

1263 
__s32
 
	m°ï
;

1264 
__s32
 
	mdeÁu…_vÆue
;

1265 
__u32
 
	mÊags
;

1266 
__u32
 
	mª£rved
[2];

1270 
	sv4l2_quîymíu
 {

1271 
__u32
 
	mid
;

1272 
__u32
 
	mödex
;

1274 
__u8
 
	m«me
[32];

1275 
__s64
 
	mvÆue
;

1277 
__u32
 
	mª£rved
;

1278 } 
__©åibuã__
 ((
∑cked
));

1281 
	#V4L2_CTRL_FLAG_DISABLED
 0x0001

	)

1282 
	#V4L2_CTRL_FLAG_GRABBED
 0x0002

	)

1283 
	#V4L2_CTRL_FLAG_READ_ONLY
 0x0004

	)

1284 
	#V4L2_CTRL_FLAG_UPDATE
 0x0008

	)

1285 
	#V4L2_CTRL_FLAG_INACTIVE
 0x0010

	)

1286 
	#V4L2_CTRL_FLAG_SLIDER
 0x0020

	)

1287 
	#V4L2_CTRL_FLAG_WRITE_ONLY
 0x0040

	)

1288 
	#V4L2_CTRL_FLAG_VOLATILE
 0x0080

	)

1291 
	#V4L2_CTRL_FLAG_NEXT_CTRL
 0x80000000

	)

1294 
	#V4L2_CID_MAX_CTRLS
 1024

	)

1296 
	#V4L2_CID_PRIVATE_BASE
 0x08000000

	)

1302 
	sv4l2_tu√r
 {

1303 
__u32
 
	mödex
;

1304 
__u8
 
	m«me
[32];

1305 
__u32
 
	mty≥
;

1306 
__u32
 
	mˇ∑bûôy
;

1307 
__u32
 
	møngñow
;

1308 
__u32
 
	møngehigh
;

1309 
__u32
 
	mrxsubch™s
;

1310 
__u32
 
	maudmode
;

1311 
__s32
 
	msig«l
;

1312 
__s32
 
	mafc
;

1313 
__u32
 
	mª£rved
[4];

1316 
	sv4l2_moduœt‹
 {

1317 
__u32
 
	mödex
;

1318 
__u8
 
	m«me
[32];

1319 
__u32
 
	mˇ∑bûôy
;

1320 
__u32
 
	møngñow
;

1321 
__u32
 
	møngehigh
;

1322 
__u32
 
	mtxsubch™s
;

1323 
__u32
 
	mª£rved
[4];

1327 
	#V4L2_TUNER_CAP_LOW
 0x0001

	)

1328 
	#V4L2_TUNER_CAP_NORM
 0x0002

	)

1329 
	#V4L2_TUNER_CAP_HWSEEK_BOUNDED
 0x0004

	)

1330 
	#V4L2_TUNER_CAP_HWSEEK_WRAP
 0x0008

	)

1331 
	#V4L2_TUNER_CAP_STEREO
 0x0010

	)

1332 
	#V4L2_TUNER_CAP_LANG2
 0x0020

	)

1333 
	#V4L2_TUNER_CAP_SAP
 0x0020

	)

1334 
	#V4L2_TUNER_CAP_LANG1
 0x0040

	)

1335 
	#V4L2_TUNER_CAP_RDS
 0x0080

	)

1336 
	#V4L2_TUNER_CAP_RDS_BLOCK_IO
 0x0100

	)

1337 
	#V4L2_TUNER_CAP_RDS_CONTROLS
 0x0200

	)

1338 
	#V4L2_TUNER_CAP_FREQ_BANDS
 0x0400

	)

1339 
	#V4L2_TUNER_CAP_HWSEEK_PROG_LIM
 0x0800

	)

1342 
	#V4L2_TUNER_SUB_MONO
 0x0001

	)

1343 
	#V4L2_TUNER_SUB_STEREO
 0x0002

	)

1344 
	#V4L2_TUNER_SUB_LANG2
 0x0004

	)

1345 
	#V4L2_TUNER_SUB_SAP
 0x0004

	)

1346 
	#V4L2_TUNER_SUB_LANG1
 0x0008

	)

1347 
	#V4L2_TUNER_SUB_RDS
 0x0010

	)

1350 
	#V4L2_TUNER_MODE_MONO
 0x0000

	)

1351 
	#V4L2_TUNER_MODE_STEREO
 0x0001

	)

1352 
	#V4L2_TUNER_MODE_LANG2
 0x0002

	)

1353 
	#V4L2_TUNER_MODE_SAP
 0x0002

	)

1354 
	#V4L2_TUNER_MODE_LANG1
 0x0003

	)

1355 
	#V4L2_TUNER_MODE_LANG1_LANG2
 0x0004

	)

1357 
	sv4l2_‰equícy
 {

1358 
__u32
 
	mtu√r
;

1359 
__u32
 
	mty≥
;

1360 
__u32
 
	m‰equícy
;

1361 
__u32
 
	mª£rved
[8];

1364 
	#V4L2_BAND_MODULATION_VSB
 (1 << 1)

	)

1365 
	#V4L2_BAND_MODULATION_FM
 (1 << 2)

	)

1366 
	#V4L2_BAND_MODULATION_AM
 (1 << 3)

	)

1368 
	sv4l2_‰equícy_b™d
 {

1369 
__u32
 
	mtu√r
;

1370 
__u32
 
	mty≥
;

1371 
__u32
 
	mödex
;

1372 
__u32
 
	mˇ∑bûôy
;

1373 
__u32
 
	møngñow
;

1374 
__u32
 
	møngehigh
;

1375 
__u32
 
	mmoduœti⁄
;

1376 
__u32
 
	mª£rved
[9];

1379 
	sv4l2_hw_‰eq_£ek
 {

1380 
__u32
 
	mtu√r
;

1381 
__u32
 
	mty≥
;

1382 
__u32
 
	m£ek_upw¨d
;

1383 
__u32
 
	mwøp_¨ound
;

1384 
__u32
 
	m•acög
;

1385 
__u32
 
	møngñow
;

1386 
__u32
 
	møngehigh
;

1387 
__u32
 
	mª£rved
[5];

1394 
	sv4l2_rds_d©a
 {

1395 
__u8
 
	mlsb
;

1396 
__u8
 
	mmsb
;

1397 
__u8
 
	mblock
;

1398 } 
__©åibuã__
 ((
∑cked
));

1400 
	#V4L2_RDS_BLOCK_MSK
 0x7

	)

1401 
	#V4L2_RDS_BLOCK_A
 0

	)

1402 
	#V4L2_RDS_BLOCK_B
 1

	)

1403 
	#V4L2_RDS_BLOCK_C
 2

	)

1404 
	#V4L2_RDS_BLOCK_D
 3

	)

1405 
	#V4L2_RDS_BLOCK_C_ALT
 4

	)

1406 
	#V4L2_RDS_BLOCK_INVALID
 7

	)

1408 
	#V4L2_RDS_BLOCK_CORRECTED
 0x40

	)

1409 
	#V4L2_RDS_BLOCK_ERROR
 0x80

	)

1414 
	sv4l2_audio
 {

1415 
__u32
 
	mödex
;

1416 
__u8
 
	m«me
[32];

1417 
__u32
 
	mˇ∑bûôy
;

1418 
__u32
 
	mmode
;

1419 
__u32
 
	mª£rved
[2];

1423 
	#V4L2_AUDCAP_STEREO
 0x00001

	)

1424 
	#V4L2_AUDCAP_AVL
 0x00002

	)

1427 
	#V4L2_AUDMODE_AVL
 0x00001

	)

1429 
	sv4l2_audioout
 {

1430 
__u32
 
	mödex
;

1431 
__u8
 
	m«me
[32];

1432 
__u32
 
	mˇ∑bûôy
;

1433 
__u32
 
	mmode
;

1434 
__u32
 
	mª£rved
[2];

1443 
	#V4L2_ENC_IDX_FRAME_I
 (0)

	)

1444 
	#V4L2_ENC_IDX_FRAME_P
 (1)

	)

1445 
	#V4L2_ENC_IDX_FRAME_B
 (2)

	)

1446 
	#V4L2_ENC_IDX_FRAME_MASK
 (0xf)

	)

1448 
	sv4l2_íc_idx_íåy
 {

1449 
__u64
 
	moff£t
;

1450 
__u64
 
	m±s
;

1451 
__u32
 
	mÀngth
;

1452 
__u32
 
	mÊags
;

1453 
__u32
 
	mª£rved
[2];

1456 
	#V4L2_ENC_IDX_ENTRIES
 (64)

	)

1457 
	sv4l2_íc_idx
 {

1458 
__u32
 
	míåõs
;

1459 
__u32
 
	míåõs_ˇp
;

1460 
__u32
 
	mª£rved
[4];

1461 
v4l2_íc_idx_íåy
 
	míåy
[
V4L2_ENC_IDX_ENTRIES
];

1465 
	#V4L2_ENC_CMD_START
 (0)

	)

1466 
	#V4L2_ENC_CMD_STOP
 (1)

	)

1467 
	#V4L2_ENC_CMD_PAUSE
 (2)

	)

1468 
	#V4L2_ENC_CMD_RESUME
 (3)

	)

1471 
	#V4L2_ENC_CMD_STOP_AT_GOP_END
 (1 << 0)

	)

1473 
	sv4l2_ícodî_cmd
 {

1474 
__u32
 
	mcmd
;

1475 
__u32
 
	mÊags
;

1478 
__u32
 
	md©a
[8];

1479 } 
	møw
;

1484 
	#V4L2_DEC_CMD_START
 (0)

	)

1485 
	#V4L2_DEC_CMD_STOP
 (1)

	)

1486 
	#V4L2_DEC_CMD_PAUSE
 (2)

	)

1487 
	#V4L2_DEC_CMD_RESUME
 (3)

	)

1490 
	#V4L2_DEC_CMD_START_MUTE_AUDIO
 (1 << 0)

	)

1493 
	#V4L2_DEC_CMD_PAUSE_TO_BLACK
 (1 << 0)

	)

1496 
	#V4L2_DEC_CMD_STOP_TO_BLACK
 (1 << 0)

	)

1497 
	#V4L2_DEC_CMD_STOP_IMMEDIATELY
 (1 << 1)

	)

1502 
	#V4L2_DEC_START_FMT_NONE
 (0)

	)

1504 
	#V4L2_DEC_START_FMT_GOP
 (1)

	)

1508 
	sv4l2_decodî_cmd
 {

1509 
__u32
 
	mcmd
;

1510 
__u32
 
	mÊags
;

1513 
__u64
 
	m±s
;

1514 } 
	m°›
;

1522 
__s32
 
	m•ìd
;

1523 
__u32
 
	mf‹m©
;

1524 } 
	m°¨t
;

1527 
__u32
 
	md©a
[16];

1528 } 
	møw
;

1541 
	sv4l2_vbi_f‹m©
 {

1542 
__u32
 
	mßm∂ög_øã
;

1543 
__u32
 
	moff£t
;

1544 
__u32
 
	mßm∂es_≥r_löe
;

1545 
__u32
 
	mßm∂e_f‹m©
;

1546 
__s32
 
	m°¨t
[2];

1547 
__u32
 
	mcou¡
[2];

1548 
__u32
 
	mÊags
;

1549 
__u32
 
	mª£rved
[2];

1553 
	#V4L2_VBI_UNSYNC
 (1 << 0)

	)

1554 
	#V4L2_VBI_INTERLACED
 (1 << 1)

	)

1563 
	sv4l2_¶i˚d_vbi_f‹m©
 {

1564 
__u16
 
	m£rvi˚_£t
;

1569 
__u16
 
	m£rvi˚_löes
[2][24];

1570 
__u32
 
	mio_size
;

1571 
__u32
 
	mª£rved
[2];

1576 
	#V4L2_SLICED_TELETEXT_B
 (0x0001)

	)

1578 
	#V4L2_SLICED_VPS
 (0x0400)

	)

1580 
	#V4L2_SLICED_CAPTION_525
 (0x1000)

	)

1582 
	#V4L2_SLICED_WSS_625
 (0x4000)

	)

1584 
	#V4L2_SLICED_VBI_525
 (
V4L2_SLICED_CAPTION_525
)

	)

1585 
	#V4L2_SLICED_VBI_625
 (
V4L2_SLICED_TELETEXT_B
 | 
V4L2_SLICED_VPS
 | 
V4L2_SLICED_WSS_625
)

	)

1587 
	sv4l2_¶i˚d_vbi_ˇp
 {

1588 
__u16
 
	m£rvi˚_£t
;

1593 
__u16
 
	m£rvi˚_löes
[2][24];

1594 
__u32
 
	mty≥
;

1595 
__u32
 
	mª£rved
[3];

1598 
	sv4l2_¶i˚d_vbi_d©a
 {

1599 
__u32
 
	mid
;

1600 
__u32
 
	mfõld
;

1601 
__u32
 
	mlöe
;

1602 
__u32
 
	mª£rved
;

1603 
__u8
 
	md©a
[48];

1623 
	#V4L2_MPEG_VBI_IVTV_TELETEXT_B
 (1)

	)

1624 
	#V4L2_MPEG_VBI_IVTV_CAPTION_525
 (4)

	)

1625 
	#V4L2_MPEG_VBI_IVTV_WSS_625
 (5)

	)

1626 
	#V4L2_MPEG_VBI_IVTV_VPS
 (7)

	)

1628 
	sv4l2_m≥g_vbi_ôv0_löe
 {

1629 
__u8
 
	mid
;

1630 
__u8
 
	md©a
[42];

1631 } 
__©åibuã__
 ((
∑cked
));

1633 
	sv4l2_m≥g_vbi_ôv0
 {

1634 
__À32
 
	mlöemask
[2];

1635 
v4l2_m≥g_vbi_ôv0_löe
 
	mlöe
[35];

1636 } 
__©åibuã__
 ((
∑cked
));

1638 
	sv4l2_m≥g_vbi_ITV0
 {

1639 
v4l2_m≥g_vbi_ôv0_löe
 
	mlöe
[36];

1640 } 
__©åibuã__
 ((
∑cked
));

1642 
	#V4L2_MPEG_VBI_IVTV_MAGIC0
 "ôv0"

	)

1643 
	#V4L2_MPEG_VBI_IVTV_MAGIC1
 "ITV0"

	)

1645 
	sv4l2_m≥g_vbi_fmt_ivtv
 {

1646 
__u8
 
	mmagic
[4];

1648 
v4l2_m≥g_vbi_ôv0
 
	môv0
;

1649 
v4l2_m≥g_vbi_ITV0
 
	mITV0
;

1651 } 
__©åibuã__
 ((
∑cked
));

1664 
	sv4l2_∂™e_pix_f‹m©
 {

1665 
__u32
 
	msizeimage
;

1666 
__u16
 
	mbyã•îlöe
;

1667 
__u16
 
	mª£rved
[7];

1668 } 
__©åibuã__
 ((
∑cked
));

1680 
	sv4l2_pix_f‹m©_m∂™e
 {

1681 
__u32
 
	mwidth
;

1682 
__u32
 
	mheight
;

1683 
__u32
 
	mpixñf‹m©
;

1684 
__u32
 
	mfõld
;

1685 
__u32
 
	mcﬁ‹•a˚
;

1687 
v4l2_∂™e_pix_f‹m©
 
	m∂™e_fmt
[
VIDEO_MAX_PLANES
];

1688 
__u8
 
	mnum_∂™es
;

1689 
__u8
 
	mª£rved
[11];

1690 } 
__©åibuã__
 ((
∑cked
));

1702 
	sv4l2_f‹m©
 {

1703 
__u32
 
	mty≥
;

1705 
v4l2_pix_f‹m©
 
	mpix
;

1706 
v4l2_pix_f‹m©_m∂™e
 
	mpix_mp
;

1707 
v4l2_wödow
 
	mwö
;

1708 
v4l2_vbi_f‹m©
 
	mvbi
;

1709 
v4l2_¶i˚d_vbi_f‹m©
 
	m¶i˚d
;

1710 
__u8
 
	møw_d©a
[200];

1711 } 
	mfmt
;

1716 
	sv4l2_°ªam∑rm
 {

1717 
__u32
 
	mty≥
;

1719 
v4l2_ˇ±uª∑rm
 
	mˇ±uª
;

1720 
v4l2_ouçuç¨m
 
	mouçut
;

1721 
__u8
 
	møw_d©a
[200];

1722 } 
	m∑rm
;

1729 
	#V4L2_EVENT_ALL
 0

	)

1730 
	#V4L2_EVENT_VSYNC
 1

	)

1731 
	#V4L2_EVENT_EOS
 2

	)

1732 
	#V4L2_EVENT_CTRL
 3

	)

1733 
	#V4L2_EVENT_FRAME_SYNC
 4

	)

1734 
	#V4L2_EVENT_PRIVATE_START
 0x08000000

	)

1737 
	sv4l2_evít_vsync
 {

1739 
__u8
 
	mfõld
;

1740 } 
__©åibuã__
 ((
∑cked
));

1743 
	#V4L2_EVENT_CTRL_CH_VALUE
 (1 << 0)

	)

1744 
	#V4L2_EVENT_CTRL_CH_FLAGS
 (1 << 1)

	)

1745 
	#V4L2_EVENT_CTRL_CH_RANGE
 (1 << 2)

	)

1747 
	sv4l2_evít_˘æ
 {

1748 
__u32
 
	mch™ges
;

1749 
__u32
 
	mty≥
;

1751 
__s32
 
	mvÆue
;

1752 
__s64
 
	mvÆue64
;

1754 
__u32
 
	mÊags
;

1755 
__s32
 
	mmöimum
;

1756 
__s32
 
	mmaximum
;

1757 
__s32
 
	m°ï
;

1758 
__s32
 
	mdeÁu…_vÆue
;

1761 
	sv4l2_evít_‰ame_sync
 {

1762 
__u32
 
	m‰ame_£quí˚
;

1765 
	sv4l2_evít
 {

1766 
__u32
 
	mty≥
;

1768 
v4l2_evít_vsync
 
	mvsync
;

1769 
v4l2_evít_˘æ
 
	m˘æ
;

1770 
v4l2_evít_‰ame_sync
 
	m‰ame_sync
;

1771 
__u8
 
	md©a
[64];

1772 } 
	mu
;

1773 
__u32
 
	m≥ndög
;

1774 
__u32
 
	m£quí˚
;

1775 
time•ec
 
	mtime°amp
;

1776 
__u32
 
	mid
;

1777 
__u32
 
	mª£rved
[8];

1780 
	#V4L2_EVENT_SUB_FL_SEND_INITIAL
 (1 << 0)

	)

1781 
	#V4L2_EVENT_SUB_FL_ALLOW_FEEDBACK
 (1 << 1)

	)

1783 
	sv4l2_evít_subs¸ùti⁄
 {

1784 
__u32
 
	mty≥
;

1785 
__u32
 
	mid
;

1786 
__u32
 
	mÊags
;

1787 
__u32
 
	mª£rved
[5];

1799 
	#V4L2_CHIP_MATCH_BRIDGE
 0

	)

1800 
	#V4L2_CHIP_MATCH_SUBDEV
 4

	)

1803 
	#V4L2_CHIP_MATCH_HOST
 
V4L2_CHIP_MATCH_BRIDGE


	)

1804 
	#V4L2_CHIP_MATCH_I2C_DRIVER
 1

	)

1805 
	#V4L2_CHIP_MATCH_I2C_ADDR
 2

	)

1806 
	#V4L2_CHIP_MATCH_AC97
 3

	)

1808 
	sv4l2_dbg_m©ch
 {

1809 
__u32
 
	mty≥
;

1811 
__u32
 
	maddr
;

1812 
	m«me
[32];

1814 } 
__©åibuã__
 ((
∑cked
));

1816 
	sv4l2_dbg_ªgi°î
 {

1817 
v4l2_dbg_m©ch
 
	mm©ch
;

1818 
__u32
 
	msize
;

1819 
__u64
 
	mªg
;

1820 
__u64
 
	mvÆ
;

1821 } 
__©åibuã__
 ((
∑cked
));

1823 
	#V4L2_CHIP_FL_READABLE
 (1 << 0)

	)

1824 
	#V4L2_CHIP_FL_WRITABLE
 (1 << 1)

	)

1827 
	sv4l2_dbg_chù_öfo
 {

1828 
v4l2_dbg_m©ch
 
	mm©ch
;

1829 
	m«me
[32];

1830 
__u32
 
	mÊags
;

1831 
__u32
 
	mª£rved
[32];

1832 } 
__©åibuã__
 ((
∑cked
));

1843 
	sv4l2_¸óã_buf„rs
 {

1844 
__u32
 
	mödex
;

1845 
__u32
 
	mcou¡
;

1846 
__u32
 
	mmem‹y
;

1847 
v4l2_f‹m©
 
	mf‹m©
;

1848 
__u32
 
	mª£rved
[8];

1855 
	#VIDIOC_QUERYCAP
 
	`_IOR
('V', 0, 
v4l2_ˇ∑bûôy
)

	)

1856 
	#VIDIOC_RESERVED
 
	`_IO
('V', 1)

	)

1857 
	#VIDIOC_ENUM_FMT
 
	`_IOWR
('V', 2, 
v4l2_fmtdesc
)

	)

1858 
	#VIDIOC_G_FMT
 
	`_IOWR
('V', 4, 
v4l2_f‹m©
)

	)

1859 
	#VIDIOC_S_FMT
 
	`_IOWR
('V', 5, 
v4l2_f‹m©
)

	)

1860 
	#VIDIOC_REQBUFS
 
	`_IOWR
('V', 8, 
v4l2_ªque°buf„rs
)

	)

1861 
	#VIDIOC_QUERYBUF
 
	`_IOWR
('V', 9, 
v4l2_buf„r
)

	)

1862 
	#VIDIOC_G_FBUF
 
	`_IOR
('V', 10, 
v4l2_‰amebuf„r
)

	)

1863 
	#VIDIOC_S_FBUF
 
	`_IOW
('V', 11, 
v4l2_‰amebuf„r
)

	)

1864 
	#VIDIOC_OVERLAY
 
	`_IOW
('V', 14, )

	)

1865 
	#VIDIOC_QBUF
 
	`_IOWR
('V', 15, 
v4l2_buf„r
)

	)

1866 
	#VIDIOC_EXPBUF
 
	`_IOWR
('V', 16, 
v4l2_exp‹tbuf„r
)

	)

1867 
	#VIDIOC_DQBUF
 
	`_IOWR
('V', 17, 
v4l2_buf„r
)

	)

1868 
	#VIDIOC_STREAMON
 
	`_IOW
('V', 18, )

	)

1869 
	#VIDIOC_STREAMOFF
 
	`_IOW
('V', 19, )

	)

1870 
	#VIDIOC_G_PARM
 
	`_IOWR
('V', 21, 
v4l2_°ªam∑rm
)

	)

1871 
	#VIDIOC_S_PARM
 
	`_IOWR
('V', 22, 
v4l2_°ªam∑rm
)

	)

1872 
	#VIDIOC_G_STD
 
	`_IOR
('V', 23, 
v4l2_°d_id
)

	)

1873 
	#VIDIOC_S_STD
 
	`_IOW
('V', 24, 
v4l2_°d_id
)

	)

1874 
	#VIDIOC_ENUMSTD
 
	`_IOWR
('V', 25, 
v4l2_°™d¨d
)

	)

1875 
	#VIDIOC_ENUMINPUT
 
	`_IOWR
('V', 26, 
v4l2_öput
)

	)

1876 
	#VIDIOC_G_CTRL
 
	`_IOWR
('V', 27, 
v4l2_c⁄åﬁ
)

	)

1877 
	#VIDIOC_S_CTRL
 
	`_IOWR
('V', 28, 
v4l2_c⁄åﬁ
)

	)

1878 
	#VIDIOC_G_TUNER
 
	`_IOWR
('V', 29, 
v4l2_tu√r
)

	)

1879 
	#VIDIOC_S_TUNER
 
	`_IOW
('V', 30, 
v4l2_tu√r
)

	)

1880 
	#VIDIOC_G_AUDIO
 
	`_IOR
('V', 33, 
v4l2_audio
)

	)

1881 
	#VIDIOC_S_AUDIO
 
	`_IOW
('V', 34, 
v4l2_audio
)

	)

1882 
	#VIDIOC_QUERYCTRL
 
	`_IOWR
('V', 36, 
v4l2_quîy˘æ
)

	)

1883 
	#VIDIOC_QUERYMENU
 
	`_IOWR
('V', 37, 
v4l2_quîymíu
)

	)

1884 
	#VIDIOC_G_INPUT
 
	`_IOR
('V', 38, )

	)

1885 
	#VIDIOC_S_INPUT
 
	`_IOWR
('V', 39, )

	)

1886 
	#VIDIOC_G_OUTPUT
 
	`_IOR
('V', 46, )

	)

1887 
	#VIDIOC_S_OUTPUT
 
	`_IOWR
('V', 47, )

	)

1888 
	#VIDIOC_ENUMOUTPUT
 
	`_IOWR
('V', 48, 
v4l2_ouçut
)

	)

1889 
	#VIDIOC_G_AUDOUT
 
	`_IOR
('V', 49, 
v4l2_audioout
)

	)

1890 
	#VIDIOC_S_AUDOUT
 
	`_IOW
('V', 50, 
v4l2_audioout
)

	)

1891 
	#VIDIOC_G_MODULATOR
 
	`_IOWR
('V', 54, 
v4l2_moduœt‹
)

	)

1892 
	#VIDIOC_S_MODULATOR
 
	`_IOW
('V', 55, 
v4l2_moduœt‹
)

	)

1893 
	#VIDIOC_G_FREQUENCY
 
	`_IOWR
('V', 56, 
v4l2_‰equícy
)

	)

1894 
	#VIDIOC_S_FREQUENCY
 
	`_IOW
('V', 57, 
v4l2_‰equícy
)

	)

1895 
	#VIDIOC_CROPCAP
 
	`_IOWR
('V', 58, 
v4l2_¸›ˇp
)

	)

1896 
	#VIDIOC_G_CROP
 
	`_IOWR
('V', 59, 
v4l2_¸›
)

	)

1897 
	#VIDIOC_S_CROP
 
	`_IOW
('V', 60, 
v4l2_¸›
)

	)

1898 
	#VIDIOC_G_JPEGCOMP
 
	`_IOR
('V', 61, 
v4l2_j≥gcom¥essi⁄
)

	)

1899 
	#VIDIOC_S_JPEGCOMP
 
	`_IOW
('V', 62, 
v4l2_j≥gcom¥essi⁄
)

	)

1900 
	#VIDIOC_QUERYSTD
 
	`_IOR
('V', 63, 
v4l2_°d_id
)

	)

1901 
	#VIDIOC_TRY_FMT
 
	`_IOWR
('V', 64, 
v4l2_f‹m©
)

	)

1902 
	#VIDIOC_ENUMAUDIO
 
	`_IOWR
('V', 65, 
v4l2_audio
)

	)

1903 
	#VIDIOC_ENUMAUDOUT
 
	`_IOWR
('V', 66, 
v4l2_audioout
)

	)

1904 
	#VIDIOC_G_PRIORITY
 
	`_IOR
('V', 67, 
__u32
Ë

	)

1905 
	#VIDIOC_S_PRIORITY
 
	`_IOW
('V', 68, 
__u32
Ë

	)

1906 
	#VIDIOC_G_SLICED_VBI_CAP
 
	`_IOWR
('V', 69, 
v4l2_¶i˚d_vbi_ˇp
)

	)

1907 
	#VIDIOC_LOG_STATUS
 
	`_IO
('V', 70)

	)

1908 
	#VIDIOC_G_EXT_CTRLS
 
	`_IOWR
('V', 71, 
v4l2_ext_c⁄åﬁs
)

	)

1909 
	#VIDIOC_S_EXT_CTRLS
 
	`_IOWR
('V', 72, 
v4l2_ext_c⁄åﬁs
)

	)

1910 
	#VIDIOC_TRY_EXT_CTRLS
 
	`_IOWR
('V', 73, 
v4l2_ext_c⁄åﬁs
)

	)

1911 
	#VIDIOC_ENUM_FRAMESIZES
 
	`_IOWR
('V', 74, 
v4l2_‰msizìnum
)

	)

1912 
	#VIDIOC_ENUM_FRAMEINTERVALS
 
	`_IOWR
('V', 75, 
v4l2_‰mivÆíum
)

	)

1913 
	#VIDIOC_G_ENC_INDEX
 
	`_IOR
('V', 76, 
v4l2_íc_idx
)

	)

1914 
	#VIDIOC_ENCODER_CMD
 
	`_IOWR
('V', 77, 
v4l2_ícodî_cmd
)

	)

1915 
	#VIDIOC_TRY_ENCODER_CMD
 
	`_IOWR
('V', 78, 
v4l2_ícodî_cmd
)

	)

1920 
	#VIDIOC_DBG_S_REGISTER
 
	`_IOW
('V', 79, 
v4l2_dbg_ªgi°î
)

	)

1921 
	#VIDIOC_DBG_G_REGISTER
 
	`_IOWR
('V', 80, 
v4l2_dbg_ªgi°î
)

	)

1923 
	#VIDIOC_S_HW_FREQ_SEEK
 
	`_IOW
('V', 82, 
v4l2_hw_‰eq_£ek
)

	)

1925 
	#VIDIOC_S_DV_TIMINGS
 
	`_IOWR
('V', 87, 
v4l2_dv_timögs
)

	)

1926 
	#VIDIOC_G_DV_TIMINGS
 
	`_IOWR
('V', 88, 
v4l2_dv_timögs
)

	)

1927 
	#VIDIOC_DQEVENT
 
	`_IOR
('V', 89, 
v4l2_evít
)

	)

1928 
	#VIDIOC_SUBSCRIBE_EVENT
 
	`_IOW
('V', 90, 
v4l2_evít_subs¸ùti⁄
)

	)

1929 
	#VIDIOC_UNSUBSCRIBE_EVENT
 
	`_IOW
('V', 91, 
v4l2_evít_subs¸ùti⁄
)

	)

1933 
	#VIDIOC_CREATE_BUFS
 
	`_IOWR
('V', 92, 
v4l2_¸óã_buf„rs
)

	)

1934 
	#VIDIOC_PREPARE_BUF
 
	`_IOWR
('V', 93, 
v4l2_buf„r
)

	)

1937 
	#VIDIOC_G_SELECTION
 
	`_IOWR
('V', 94, 
v4l2_£À˘i⁄
)

	)

1938 
	#VIDIOC_S_SELECTION
 
	`_IOWR
('V', 95, 
v4l2_£À˘i⁄
)

	)

1942 
	#VIDIOC_DECODER_CMD
 
	`_IOWR
('V', 96, 
v4l2_decodî_cmd
)

	)

1943 
	#VIDIOC_TRY_DECODER_CMD
 
	`_IOWR
('V', 97, 
v4l2_decodî_cmd
)

	)

1947 
	#VIDIOC_ENUM_DV_TIMINGS
 
	`_IOWR
('V', 98, 
v4l2_íum_dv_timögs
)

	)

1948 
	#VIDIOC_QUERY_DV_TIMINGS
 
	`_IOR
('V', 99, 
v4l2_dv_timögs
)

	)

1949 
	#VIDIOC_DV_TIMINGS_CAP
 
	`_IOWR
('V', 100, 
v4l2_dv_timögs_ˇp
)

	)

1953 
	#VIDIOC_ENUM_FREQ_BANDS
 
	`_IOWR
('V', 101, 
v4l2_‰equícy_b™d
)

	)

1957 
	#VIDIOC_DBG_G_CHIP_INFO
 
	`_IOWR
('V', 102, 
v4l2_dbg_chù_öfo
)

	)

1962 
	#BASE_VIDIOC_PRIVATE
 192

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


25 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


26 
	#_STDIO_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	~<bôs/ty≥s.h
>

36 
	#__√ed_FILE


	)

37 
	#__√ed___FILE


	)

41 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


44 
	g_IO_FILE
;

46 
__BEGIN_NAMESPACE_STD


48 
_IO_FILE
 
	tFILE
;

49 
	g__END_NAMESPACE_STD


50 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

51 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

52 || 
deföed
 
__USE_POSIX2


53 
	$__USING_NAMESPACE_STD
(
FILE
)

56 
	#__FILE_deföed
 1

	)

58 #unde‡
__√ed_FILE


61 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


64 
_IO_FILE
 
	t__FILE
;

66 
	#____FILE_deföed
 1

	)

68 #unde‡
__√ed___FILE


71 #ifdef 
_STDIO_H


72 
	#_STDIO_USES_IOSTREAM


	)

74 
	~<libio.h
>

76 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


77 #ifde‡
__GNUC__


78 #i‚de‡
_VA_LIST_DEFINED


79 
_G_va_li°
 
	tva_li°
;

80 
	#_VA_LIST_DEFINED


	)

83 
	~<°d¨g.h
>

87 #ifde‡
__USE_XOPEN2K8


88 #i‚de‡
__off_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__off_t
 
	toff_t
;

92 
__off64_t
 
	toff_t
;

94 
	#__off_t_deföed


	)

96 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


97 
__off64_t
 
	toff64_t
;

98 
	#__off64_t_deföed


	)

101 #i‚de‡
__ssize_t_deföed


102 
__ssize_t
 
	tssize_t
;

103 
	#__ssize_t_deföed


	)

108 
__BEGIN_NAMESPACE_STD


109 #i‚de‡
__USE_FILE_OFFSET64


110 
_G_Âos_t
 
	tÂos_t
;

112 
_G_Âos64_t
 
	tÂos_t
;

114 
__END_NAMESPACE_STD


115 #ifde‡
__USE_LARGEFILE64


116 
_G_Âos64_t
 
	tÂos64_t
;

120 
	#_IOFBF
 0

	)

121 
	#_IOLBF
 1

	)

122 
	#_IONBF
 2

	)

126 #i‚de‡
BUFSIZ


127 
	#BUFSIZ
 
_IO_BUFSIZ


	)

133 #i‚de‡
EOF


134 
	#EOF
 (-1)

	)

140 
	#SEEK_SET
 0

	)

141 
	#SEEK_CUR
 1

	)

142 
	#SEEK_END
 2

	)

143 #ifde‡
__USE_GNU


144 
	#SEEK_DATA
 3

	)

145 
	#SEEK_HOLE
 4

	)

149 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


151 
	#P_tmpdú
 "/tmp"

	)

164 
	~<bôs/°dio_lim.h
>

168 
_IO_FILE
 *
°dö
;

169 
_IO_FILE
 *
°dout
;

170 
_IO_FILE
 *
°dîr
;

172 
	#°dö
 
°dö


	)

173 
	#°dout
 
°dout


	)

174 
	#°dîr
 
°dîr


	)

176 
__BEGIN_NAMESPACE_STD


178 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

180 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

181 
__END_NAMESPACE_STD


183 #ifde‡
__USE_ATFILE


185 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

186 c⁄° *
__√w
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


194 #i‚de‡
__USE_FILE_OFFSET64


195 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

197 #ifde‡
__REDIRECT


198 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

200 
	#tmpfûe
 
tmpfûe64


	)

204 #ifde‡
__USE_LARGEFILE64


205 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

209 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

210 
__END_NAMESPACE_STD


212 #ifde‡
__USE_MISC


215 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

219 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


227 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

228 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

232 
__BEGIN_NAMESPACE_STD


237 
	`f˛o£
 (
FILE
 *
__°ªam
);

242 
	`fÊush
 (
FILE
 *
__°ªam
);

243 
__END_NAMESPACE_STD


245 #ifde‡
__USE_MISC


252 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

255 #ifde‡
__USE_GNU


262 
	`f˛o£Æl
 ();

266 
__BEGIN_NAMESPACE_STD


267 #i‚de‡
__USE_FILE_OFFSET64


272 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

273 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

278 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

279 c⁄° *
__ª°ri˘
 
__modes
,

280 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

282 #ifde‡
__REDIRECT


283 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

285 
__wur
;

286 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

289 
__wur
;

291 
	#f›í
 
f›í64


	)

292 
	#‰e›í
 
‰e›í64


	)

295 
__END_NAMESPACE_STD


296 #ifde‡
__USE_LARGEFILE64


297 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

298 c⁄° *
__ª°ri˘
 
__modes
Ë
__wur
;

299 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

300 c⁄° *
__ª°ri˘
 
__modes
,

301 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

304 #ifdef 
__USE_POSIX


306 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW
 
__wur
;

309 #ifdef 
__USE_GNU


312 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

313 c⁄° *
__ª°ri˘
 
__modes
,

314 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

317 #ifde‡
__USE_XOPEN2K8


319 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

320 
__THROW
 
__wur
;

325 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

329 
__BEGIN_NAMESPACE_STD


332 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

336 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

337 
__modes
, 
size_t
 
__n
Ë
__THROW
;

338 
__END_NAMESPACE_STD


340 #ifdef 
__USE_BSD


343 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

344 
size_t
 
__size
Ë
__THROW
;

347 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

351 
__BEGIN_NAMESPACE_STD


356 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

357 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

362 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

364 
	$•rötf
 (*
__ª°ri˘
 
__s
,

365 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

371 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

372 
_G_va_li°
 
__¨g
);

377 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

379 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

380 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

381 
__END_NAMESPACE_STD


383 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


384 
__BEGIN_NAMESPACE_C99


386 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

387 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

388 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

390 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

391 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

393 
__END_NAMESPACE_C99


396 #ifde‡
__USE_GNU


399 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

400 
_G_va_li°
 
__¨g
)

401 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

402 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

403 c⁄° *
__ª°ri˘
 
__fmt
, ...)

404 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

405 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

406 c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

410 #ifde‡
__USE_XOPEN2K8


412 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

413 
_G_va_li°
 
__¨g
)

414 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

415 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

420 
__BEGIN_NAMESPACE_STD


425 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

426 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

431 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

434 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

436 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

437 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

438 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

439 #ifde‡
__REDIRECT


443 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

445 
__isoc99_fsˇnf
Ë
__wur
;

446 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_sˇnf
Ë
__wur
;

448 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

449 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

450 
__isoc99_ssˇnf
);

452 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

453 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

454 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

455 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

456 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

457 
	#fsˇnf
 
__isoc99_fsˇnf


	)

458 
	#sˇnf
 
__isoc99_sˇnf


	)

459 
	#ssˇnf
 
__isoc99_ssˇnf


	)

463 
__END_NAMESPACE_STD


465 #ifdef 
__USE_ISOC99


466 
__BEGIN_NAMESPACE_C99


471 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

472 
_G_va_li°
 
__¨g
)

473 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

479 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

480 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

483 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

484 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

485 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

487 #i‡!
deföed
 
__USE_GNU
 \

488 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

489 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

490 #ifde‡
__REDIRECT


494 
	`__REDIRECT
 (
vfsˇnf
,

495 (
FILE
 *
__ª°ri˘
 
__s
,

496 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

497 
__isoc99_vfsˇnf
)

498 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

499 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

501 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

502 
	`__REDIRECT_NTH
 (
vssˇnf
,

503 (c⁄° *
__ª°ri˘
 
__s
,

504 c⁄° *
__ª°ri˘
 
__f‹m©
,

505 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

506 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

508 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

509 c⁄° *
__ª°ri˘
 
__f‹m©
,

510 
_G_va_li°
 
__¨g
Ë
__wur
;

511 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

514 c⁄° *
__ª°ri˘
 
__f‹m©
,

515 
_G_va_li°
 
__¨g
Ë
__THROW
;

516 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

517 
	#vsˇnf
 
__isoc99_vsˇnf


	)

518 
	#vssˇnf
 
__isoc99_vssˇnf


	)

522 
__END_NAMESPACE_C99


526 
__BEGIN_NAMESPACE_STD


531 
	`fgëc
 (
FILE
 *
__°ªam
);

532 
	`gëc
 (
FILE
 *
__°ªam
);

538 
	`gëch¨
 ();

539 
__END_NAMESPACE_STD


543 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

545 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


550 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

551 
	`gëch¨_u∆ocked
 ();

554 #ifde‡
__USE_MISC


561 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

565 
__BEGIN_NAMESPACE_STD


573 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putch¨
 (
__c
);

581 
__END_NAMESPACE_STD


585 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

587 #ifde‡
__USE_MISC


594 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

597 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


602 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 
	`putch¨_u∆ocked
 (
__c
);

607 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

608 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

610 
	`gëw
 (
FILE
 *
__°ªam
);

613 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

617 
__BEGIN_NAMESPACE_STD


622 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

623 
__wur
;

625 #i‡!
deföed
 
__USE_ISOC11
 \

626 || (
deföed
 
__˝lu•lus
 && __cplusplus <= 201103L)

638 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

640 
__END_NAMESPACE_STD


642 #ifde‡
__USE_GNU


649 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

650 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

654 #ifdef 
__USE_XOPEN2K8


665 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

668 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

669 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

670 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

678 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

679 
size_t
 *
__ª°ri˘
 
__n
,

680 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

684 
__BEGIN_NAMESPACE_STD


689 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

695 
	`puts
 (c⁄° *
__s
);

702 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

709 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

710 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

715 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

716 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

717 
__END_NAMESPACE_STD


719 #ifde‡
__USE_GNU


726 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

727 
FILE
 *
__ª°ri˘
 
__°ªam
);

730 #ifde‡
__USE_MISC


737 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

738 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

739 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

740 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

744 
__BEGIN_NAMESPACE_STD


749 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

754 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

759 
	`ªwöd
 (
FILE
 *
__°ªam
);

760 
__END_NAMESPACE_STD


767 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


768 #i‚de‡
__USE_FILE_OFFSET64


773 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

778 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

780 #ifde‡
__REDIRECT


781 
	`__REDIRECT
 (
f£eko
,

782 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

783 
f£eko64
);

784 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

786 
	#f£eko
 
f£eko64


	)

787 
	#·ñlo
 
·ñlo64


	)

792 
__BEGIN_NAMESPACE_STD


793 #i‚de‡
__USE_FILE_OFFSET64


798 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

803 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

805 #ifde‡
__REDIRECT


806 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

807 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

808 
	`__REDIRECT
 (
f£ços
,

809 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

811 
	#fgëpos
 
fgëpos64


	)

812 
	#f£ços
 
f£ços64


	)

815 
__END_NAMESPACE_STD


817 #ifde‡
__USE_LARGEFILE64


818 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

819 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

820 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

821 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

824 
__BEGIN_NAMESPACE_STD


826 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

828 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

831 
__END_NAMESPACE_STD


833 #ifde‡
__USE_MISC


835 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

836 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

837 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

841 
__BEGIN_NAMESPACE_STD


846 
	`≥º‹
 (c⁄° *
__s
);

847 
__END_NAMESPACE_STD


853 
	~<bôs/sys_îæi°.h
>

856 #ifdef 
__USE_POSIX


858 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

861 #ifde‡
__USE_MISC


863 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

867 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

868 
deföed
 
__USE_MISC
)

873 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
Ë
__wur
;

879 
	`p˛o£
 (
FILE
 *
__°ªam
);

883 #ifdef 
__USE_POSIX


885 *
	$˘îmid
 (*
__s
Ë
__THROW
;

889 #ifde‡
__USE_XOPEN


891 *
	`cu£rid
 (*
__s
);

895 #ifdef 
__USE_GNU


896 
ob°ack
;

899 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

901 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

902 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

903 c⁄° *
__ª°ri˘
 
__f‹m©
,

904 
_G_va_li°
 
__¨gs
)

905 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

909 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


913 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

917 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

920 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

923 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


927 
	#__√ed_gë›t


	)

928 
	~<gë›t.h
>

933 #ifde‡
__USE_EXTERN_INLINES


934 
	~<bôs/°dio.h
>

936 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


937 
	~<bôs/°dio2.h
>

939 #ifde‡
__LDBL_COMPAT


940 
	~<bôs/°dio-ldbl.h
>

943 
__END_DECLS


	@/usr/include/stdlib.h

22 #i‚def 
_STDLIB_H


24 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


29 
	#__√ed_wch¨_t


	)

30 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


37 
	#_STDLIB_H
 1

	)

39 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


41 
	~<bôs/waôÊags.h
>

42 
	~<bôs/waô°©us.h
>

44 #ifde‡
__USE_BSD


49 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


50 
	#__WAIT_INT
(
°©us
) \

51 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

52 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

54 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

62 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


63 
	#__WAIT_STATUS
 *

	)

64 
	#__WAIT_STATUS_DEFN
 *

	)

69 
waô
 *
	m__u±r
;

70 *
	m__ùå
;

71 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

72 
	#__WAIT_STATUS_DEFN
 *

	)

77 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

78 
	#__WAIT_STATUS
 *

	)

79 
	#__WAIT_STATUS_DEFN
 *

	)

84 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

85 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

90 #ifde‡
__WIFCONTINUED


91 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

95 
__BEGIN_NAMESPACE_STD


99 
	mquŸ
;

100 
	mªm
;

101 } 
	tdiv_t
;

104 #i‚de‡
__ldiv_t_deföed


107 
	mquŸ
;

108 
	mªm
;

109 } 
	tldiv_t
;

110 
	#__ldiv_t_deföed
 1

	)

112 
	g__END_NAMESPACE_STD


114 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


115 
__BEGIN_NAMESPACE_C99


117 
__exãnsi⁄__
 struct

119 
	mquŸ
;

120 
	mªm
;

121 } 
	tŒdiv_t
;

122 
	#__Œdiv_t_deföed
 1

	)

123 
	g__END_NAMESPACE_C99


128 
	#RAND_MAX
 2147483647

	)

133 
	#EXIT_FAILURE
 1

	)

134 
	#EXIT_SUCCESS
 0

	)

138 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

139 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

142 
__BEGIN_NAMESPACE_STD


144 
	$©of
 (c⁄° *
__≈å
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

147 
	$©oi
 (c⁄° *
__≈å
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

150 
	$©ﬁ
 (c⁄° *
__≈å
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

152 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


155 
__BEGIN_NAMESPACE_C99


157 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

158 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

159 
__END_NAMESPACE_C99


162 
__BEGIN_NAMESPACE_STD


164 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

165 **
__ª°ri˘
 
__íd±r
)

166 
__THROW
 
	`__n⁄nuŒ
 ((1));

167 
__END_NAMESPACE_STD


169 #ifdef 
__USE_ISOC99


170 
__BEGIN_NAMESPACE_C99


172 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

173 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

175 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

176 **
__ª°ri˘
 
__íd±r
)

177 
__THROW
 
	`__n⁄nuŒ
 ((1));

178 
__END_NAMESPACE_C99


181 
__BEGIN_NAMESPACE_STD


183 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

184 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

185 
__THROW
 
	`__n⁄nuŒ
 ((1));

187 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

188 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

189 
__THROW
 
	`__n⁄nuŒ
 ((1));

190 
__END_NAMESPACE_STD


192 #ifde‡
__USE_BSD


194 
__exãnsi⁄__


195 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

196 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

197 
__THROW
 
	`__n⁄nuŒ
 ((1));

199 
__exãnsi⁄__


200 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

201 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

202 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_MISC


206 
__BEGIN_NAMESPACE_C99


208 
__exãnsi⁄__


209 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

210 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

211 
__THROW
 
	`__n⁄nuŒ
 ((1));

213 
__exãnsi⁄__


214 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

215 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

216 
__THROW
 
	`__n⁄nuŒ
 ((1));

217 
__END_NAMESPACE_C99


221 #ifde‡
__USE_GNU


235 
	~<xloˇÀ.h
>

239 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

240 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

241 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

243 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

244 **
__ª°ri˘
 
__íd±r
,

245 
__ba£
, 
__loˇÀ_t
 
__loc
)

246 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

248 
__exãnsi⁄__


249 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

250 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

251 
__loˇÀ_t
 
__loc
)

252 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

254 
__exãnsi⁄__


255 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

256 **
__ª°ri˘
 
__íd±r
,

257 
__ba£
, 
__loˇÀ_t
 
__loc
)

258 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

260 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

261 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

262 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

264 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

265 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

266 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

268 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

269 **
__ª°ri˘
 
__íd±r
,

270 
__loˇÀ_t
 
__loc
)

271 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

275 #ifde‡
__USE_EXTERN_INLINES


276 
__BEGIN_NAMESPACE_STD


277 
__exã∫_ölöe
 

278 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

280  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

281 
	}
}

282 
__exã∫_ölöe
 

283 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

285  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

286 
	}
}

287 
	g__END_NAMESPACE_STD


289 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


290 
__BEGIN_NAMESPACE_C99


291 
__exãnsi⁄__
 
__exã∫_ölöe
 

292 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

294  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

295 
	}
}

296 
	g__END_NAMESPACE_C99


301 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


305 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

308 
	$a64l
 (c⁄° *
__s
)

309 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

313 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


314 
	~<sys/ty≥s.h
>

321 
	$øndom
 (Ë
__THROW
;

324 
	$§™dom
 (
__£ed
Ë
__THROW
;

330 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

331 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

335 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

338 #ifde‡
__USE_MISC


343 
	søndom_d©a


345 
öt32_t
 *
Âå
;

346 
öt32_t
 *
Ωå
;

347 
öt32_t
 *
°©e
;

348 
ønd_ty≥
;

349 
ønd_deg
;

350 
ønd_£p
;

351 
öt32_t
 *
íd_±r
;

354 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

355 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

357 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

360 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

361 
size_t
 
__°©ñí
,

362 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

363 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

365 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

366 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

367 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

372 
__BEGIN_NAMESPACE_STD


374 
	$ønd
 (Ë
__THROW
;

376 
	$§™d
 (
__£ed
Ë
__THROW
;

377 
__END_NAMESPACE_STD


379 #ifde‡
__USE_POSIX


381 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

385 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


389 
	$dønd48
 (Ë
__THROW
;

390 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

393 
	$Ã™d48
 (Ë
__THROW
;

394 
	$ƒ™d48
 (
__xsubi
[3])

395 
__THROW
 
	`__n⁄nuŒ
 ((1));

398 
	$mønd48
 (Ë
__THROW
;

399 
	$jønd48
 (
__xsubi
[3])

400 
__THROW
 
	`__n⁄nuŒ
 ((1));

403 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

404 *
	$£ed48
 (
__£ed16v
[3])

405 
__THROW
 
	`__n⁄nuŒ
 ((1));

406 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

408 #ifde‡
__USE_MISC


412 
	sdønd48_d©a


414 
__x
[3];

415 
__ﬁd_x
[3];

416 
__c
;

417 
__öô
;

418 
__exãnsi⁄__
 
__a
;

423 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

424 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

425 
	$î™d48_r
 (
__xsubi
[3],

426 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

427 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

431 *
__ª°ri˘
 
__ªsu…
)

432 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

433 
	$ƒ™d48_r
 (
__xsubi
[3],

434 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

435 *
__ª°ri˘
 
__ªsu…
)

436 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

439 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

442 
	$jønd48_r
 (
__xsubi
[3],

443 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

444 *
__ª°ri˘
 
__ªsu…
)

445 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

448 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2));

451 
	$£ed48_r
 (
__£ed16v
[3],

452 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$lc⁄g48_r
 (
__∑øm
[7],

455 
dønd48_d©a
 *
__buf„r
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

462 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


463 
	#__mÆloc_™d_ˇŒoc_deföed


	)

464 
__BEGIN_NAMESPACE_STD


466 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

468 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

469 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

470 
__END_NAMESPACE_STD


473 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


474 
__BEGIN_NAMESPACE_STD


480 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

481 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

483 
	$‰ì
 (*
__±r
Ë
__THROW
;

484 
__END_NAMESPACE_STD


486 #ifdef 
__USE_MISC


488 
	$c‰ì
 (*
__±r
Ë
__THROW
;

491 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


492 
	~<Æloˇ.h
>

495 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

496 || 
deföed
 
__USE_BSD


498 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

501 #ifde‡
__USE_XOPEN2K


503 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

507 #ifde‡
__USE_ISOC11


509 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

510 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

513 
__BEGIN_NAMESPACE_STD


515 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

519 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

521 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


523 #ifde‡
__˝lu•lus


524 "C++" 
	`©_quick_exô
 ((*
__func
) ())

525 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

527 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

530 
__END_NAMESPACE_STD


532 #ifdef 
__USE_MISC


535 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

536 
__THROW
 
	`__n⁄nuŒ
 ((1));

539 
__BEGIN_NAMESPACE_STD


543 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

545 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


549 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

551 
__END_NAMESPACE_STD


553 #ifde‡
__USE_ISOC99


554 
__BEGIN_NAMESPACE_C99


557 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

558 
__END_NAMESPACE_C99


562 
__BEGIN_NAMESPACE_STD


564 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

565 
__END_NAMESPACE_STD


567 #ifde‡
__USE_GNU


570 *
	$£cuª_gëív
 (c⁄° *
__«me
)

571 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

574 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


578 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

581 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


584 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

585 
__THROW
 
	`__n⁄nuŒ
 ((2));

588 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 #ifdef 
__USE_MISC


595 
	$˛óªnv
 (Ë
__THROW
;

599 #i‡
deföed
 
__USE_MISC
 \

600 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
) (const *, const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

759 #ifde‡
__USE_EXTERN_INLINES


760 
	~<bôs/°dlib-b£¨ch.h
>

765 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

766 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

767 #ifde‡
__USE_GNU


768 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

769 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

770 
	`__n⁄nuŒ
 ((1, 4));

775 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

776 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

777 
__END_NAMESPACE_STD


779 #ifde‡
__USE_ISOC99


780 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

781 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

785 
__BEGIN_NAMESPACE_STD


789 
div_t
 
	$div
 (
__numî
, 
__díom
)

790 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

791 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

792 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

793 
__END_NAMESPACE_STD


795 #ifde‡
__USE_ISOC99


796 
__BEGIN_NAMESPACE_C99


797 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

798 
__díom
)

799 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

800 
__END_NAMESPACE_C99


804 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

805 || 
deföed
 
__USE_SVID


812 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

813 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

818 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

819 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

824 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

825 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

828 #ifde‡
__USE_MISC


830 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

831 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

832 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

833 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

834 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

835 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

836 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

837 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

842 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

843 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

844 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

846 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

847 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

853 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

854 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

855 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

856 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

860 
__BEGIN_NAMESPACE_STD


863 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

866 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

867 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

870 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

874 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

875 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

877 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

878 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

879 
__THROW
;

880 
__END_NAMESPACE_STD


883 #ifde‡
__USE_SVID


888 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

892 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


899 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

900 *c⁄° *
__ª°ri˘
 
__tokís
,

901 **
__ª°ri˘
 
__vÆuï
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

906 #ifde‡
__USE_XOPEN


908 
	$£tkey
 (c⁄° *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

914 #ifde‡
__USE_XOPEN2KXSI


916 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

919 #ifde‡
__USE_XOPEN


924 
	$gø¡±
 (
__fd
Ë
__THROW
;

928 
	$u∆ock±
 (
__fd
Ë
__THROW
;

933 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

936 #ifde‡
__USE_GNU


940 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

941 
__THROW
 
	`__n⁄nuŒ
 ((2));

944 
	`gë±
 ();

947 #ifde‡
__USE_BSD


951 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

955 
	~<bôs/°dlib-Êﬂt.h
>

958 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


959 
	~<bôs/°dlib.h
>

961 #ifde‡
__LDBL_COMPAT


962 
	~<bôs/°dlib-ldbl.h
>

966 #unde‡
__√ed_mÆloc_™d_ˇŒoc


968 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


30 
	#__√ed_size_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

39 #i‡
deföed
 
__˝lu•lus
 && (__˝lu•lu†>199711L || 
__GNUC_PREREQ
 (4, 4))

40 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

44 
__BEGIN_NAMESPACE_STD


46 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

47 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

50 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

51 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

52 
__END_NAMESPACE_STD


57 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


58 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

59 
__c
, 
size_t
 
__n
)

60 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

64 
__BEGIN_NAMESPACE_STD


66 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

69 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

70 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

73 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


76 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

77 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

79 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #ifde‡
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


85  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


91  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

94 
	}
}

96 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

99 
__END_NAMESPACE_STD


101 #ifde‡
__USE_GNU


104 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


105 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

106 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

107 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

108 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

110 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

111 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

115 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


116 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

117 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

118 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

119 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

121 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

122 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

127 
__BEGIN_NAMESPACE_STD


129 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

130 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

132 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

133 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

137 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

138 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

140 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

141 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

145 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

147 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

148 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

151 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

154 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

155 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

156 
__THROW
 
	`__n⁄nuŒ
 ((2));

157 
__END_NAMESPACE_STD


159 #ifde‡
__USE_XOPEN2K8


163 
	~<xloˇÀ.h
>

166 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

167 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

169 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

170 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

173 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

174 || 
deföed
 
__USE_XOPEN2K8


176 *
	$°rdup
 (c⁄° *
__s
)

177 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

183 #i‡
deföed
 
__USE_XOPEN2K8


184 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

185 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

188 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


190 
	#°rdu∑
(
s
) \

191 (
__exãnsi⁄__
 \

193 c⁄° *
__ﬁd
 = (
s
); \

194 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

195 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

196 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

197 
	}
}))

	)

200 
	#°∫du∑
(
s
, 
n
) \

201 (
__exãnsi⁄__
 \

203 c⁄° *
__ﬁd
 = (
s
); \

204 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

205 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

206 
__√w
[
__Àn
] = '\0'; \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 }))

	)

211 
	g__BEGIN_NAMESPACE_STD


213 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


216 *
°rchr
 (*
__s
, 
__c
)

217 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

218 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

219 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

221 #ifde‡
__OPTIMIZE__


222 
__exã∫_Æways_ölöe
 *

223 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


225  
__buûtö_°rchr
 (
__s
, 
__c
);

228 
__exã∫_Æways_ölöe
 const *

229 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


231  
__buûtö_°rchr
 (
__s
, 
__c
);

236 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

237 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

240 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


243 *
	`°ºchr
 (*
__s
, 
__c
)

244 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

245 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

246 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

248 #ifde‡
__OPTIMIZE__


249 
__exã∫_Æways_ölöe
 *

250 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


252  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

255 
__exã∫_Æways_ölöe
 const *

256 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


258  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

261 
	}
}

263 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

264 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

266 
__END_NAMESPACE_STD


268 #ifde‡
__USE_GNU


271 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


272 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

273 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

274 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

275 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

278 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

282 
__BEGIN_NAMESPACE_STD


285 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

286 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

289 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

290 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

292 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


295 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

296 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__OPTIMIZE__


301 
__exã∫_Æways_ölöe
 *

302 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


304  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

307 
__exã∫_Æways_ölöe
 const *

308 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


310  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

313 
	}
}

315 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

316 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

319 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


322 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

323 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

324 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 const *

335 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 c⁄° *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

370 c⁄° *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (c⁄° *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 const *

482 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (c⁄° *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 const *

510 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (c⁄° *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

530 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

534 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

535 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

538 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

539 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

542 #ifdef 
__USE_GNU


545 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

546 
__loˇÀ_t
 
__loc
)

547 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

549 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

550 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

554 #ifdef 
__USE_BSD


557 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

558 c⁄° *
__ª°ri˘
 
__dñim
)

559 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

562 #ifdef 
__USE_XOPEN2K8


564 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

567 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

568 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

575 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

577 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

578 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

582 #ifdef 
__USE_GNU


584 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

585 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

588 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

591 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 #i‚de‡
ba£«me


598 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


599 "C++" *
	$ba£«me
 (*
__fûíame
)

600 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

601 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

604 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

610 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

611 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

612 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


632 
	~<bôs/°rög.h
>

635 
	~<bôs/°rög2.h
>

638 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


640 
	~<bôs/°rög3.h
>

644 
__END_DECLS


	@/usr/include/sys/ioctl.h

18 #i‚def 
_SYS_IOCTL_H


19 
	#_SYS_IOCTL_H
 1

	)

21 
	~<„©uªs.h
>

23 
	g__BEGIN_DECLS


26 
	~<bôs/io˘ls.h
>

29 
	~<bôs/io˘l-ty≥s.h
>

36 
	~<sys/âydeÁu…s.h
>

41 
	$io˘l
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

43 
__END_DECLS


	@/usr/include/sys/mman.h

19 #i‚def 
_SYS_MMAN_H


20 
	#_SYS_MMAN_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 #i‚de‡
__off_t_deföed


28 #i‚de‡
__USE_FILE_OFFSET64


29 
__off_t
 
	toff_t
;

31 
__off64_t
 
	toff_t
;

33 
	#__off_t_deföed


	)

36 #i‚de‡
__mode_t_deföed


37 
__mode_t
 
	tmode_t
;

38 
	#__mode_t_deföed


	)

41 
	~<bôs/mm™.h
>

44 
	#MAP_FAILED
 ((*Ë-1)

	)

46 
	g__BEGIN_DECLS


56 #i‚de‡
__USE_FILE_OFFSET64


57 *
	$mm≠
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

58 
__Êags
, 
__fd
, 
__off_t
 
__off£t
Ë
__THROW
;

60 #ifde‡
__REDIRECT_NTH


61 * 
	`__REDIRECT_NTH
 (
mm≠
,

62 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

63 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
),

64 
mm≠64
);

66 
	#mm≠
 
mm≠64


	)

69 #ifde‡
__USE_LARGEFILE64


70 *
	$mm≠64
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
,

71 
__Êags
, 
__fd
, 
__off64_t
 
__off£t
Ë
__THROW
;

76 
	$munm≠
 (*
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

81 
	$m¥Ÿe˘
 (*
__addr
, 
size_t
 
__Àn
, 
__¥Ÿ
Ë
__THROW
;

89 
	`msync
 (*
__addr
, 
size_t
 
__Àn
, 
__Êags
);

91 #ifde‡
__USE_BSD


94 
	$madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

96 #ifde‡
__USE_XOPEN2K


98 
	$posix_madvi£
 (*
__addr
, 
size_t
 
__Àn
, 
__advi˚
Ë
__THROW
;

103 
	$mlock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

106 
	$mu∆ock
 (c⁄° *
__addr
, 
size_t
 
__Àn
Ë
__THROW
;

111 
	$mlockÆl
 (
__Êags
Ë
__THROW
;

115 
	$mu∆ockÆl
 (Ë
__THROW
;

117 #ifde‡
__USE_MISC


123 
	$möc‹e
 (*
__°¨t
, 
size_t
 
__Àn
, *
__vec
)

124 
__THROW
;

127 #ifde‡
__USE_GNU


133 *
	$mªm≠
 (*
__addr
, 
size_t
 
__ﬁd_Àn
, size_à
__√w_Àn
,

134 
__Êags
, ...Ë
__THROW
;

138 
	$ªm≠_fûe_∑ges
 (*
__°¨t
, 
size_t
 
__size
, 
__¥Ÿ
,

139 
size_t
 
__pgoff
, 
__Êags
Ë
__THROW
;

144 
	`shm_›í
 (c⁄° *
__«me
, 
__oÊag
, 
mode_t
 
__mode
);

147 
	`shm_u∆ök
 (c⁄° *
__«me
);

149 
__END_DECLS


	@/usr/include/sys/stat.h

22 #i‚def 
_SYS_STAT_H


23 
	#_SYS_STAT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
 || deföed 
__USE_MISC
 \

30 || 
deföed
 
	g__USE_ATFILE


31 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


32 
	#__√ed_time_t


	)

34 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ATFILE


35 
	#__√ed_time•ec


	)

37 
	~<time.h
>

40 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


43 #i‚de‡
__dev_t_deföed


44 
__dev_t
 
	tdev_t
;

45 
	#__dev_t_deföed


	)

48 #i‚de‡
__gid_t_deföed


49 
__gid_t
 
	tgid_t
;

50 
	#__gid_t_deföed


	)

53 #i‚de‡
__öo_t_deföed


54 #i‚de‡
__USE_FILE_OFFSET64


55 
__öo_t
 
	töo_t
;

57 
__öo64_t
 
	töo_t
;

59 
	#__öo_t_deföed


	)

62 #i‚de‡
__mode_t_deföed


63 
__mode_t
 
	tmode_t
;

64 
	#__mode_t_deföed


	)

67 #i‚de‡
__∆ök_t_deföed


68 
__∆ök_t
 
	t∆ök_t
;

69 
	#__∆ök_t_deföed


	)

72 #i‚de‡
__off_t_deföed


73 #i‚de‡
__USE_FILE_OFFSET64


74 
__off_t
 
	toff_t
;

76 
__off64_t
 
	toff_t
;

78 
	#__off_t_deföed


	)

81 #i‚de‡
__uid_t_deföed


82 
__uid_t
 
	tuid_t
;

83 
	#__uid_t_deföed


	)

87 #ifde‡
__USE_UNIX98


88 #i‚de‡
__blk˙t_t_deföed


89 #i‚de‡
__USE_FILE_OFFSET64


90 
__blk˙t_t
 
	tblk˙t_t
;

92 
__blk˙t64_t
 
	tblk˙t_t
;

94 
	#__blk˙t_t_deföed


	)

97 #i‚de‡
__blksize_t_deföed


98 
__blksize_t
 
	tblksize_t
;

99 
	#__blksize_t_deföed


	)

103 
	g__BEGIN_DECLS


105 
	~<bôs/°©.h
>

107 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


108 
	#S_IFMT
 
__S_IFMT


	)

109 
	#S_IFDIR
 
__S_IFDIR


	)

110 
	#S_IFCHR
 
__S_IFCHR


	)

111 
	#S_IFBLK
 
__S_IFBLK


	)

112 
	#S_IFREG
 
__S_IFREG


	)

113 #ifde‡
__S_IFIFO


114 
	#S_IFIFO
 
__S_IFIFO


	)

116 #ifde‡
__S_IFLNK


117 
	#S_IFLNK
 
__S_IFLNK


	)

119 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_UNIX98
) \

120 && 
deföed
 
	g__S_IFSOCK


121 
	#S_IFSOCK
 
__S_IFSOCK


	)

127 
	#__S_ISTYPE
(
mode
, 
mask
Ë(((modeË& 
__S_IFMT
Ë=(mask))

	)

129 
	#S_ISDIR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFDIR
)

	)

130 
	#S_ISCHR
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFCHR
)

	)

131 
	#S_ISBLK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFBLK
)

	)

132 
	#S_ISREG
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFREG
)

	)

133 #ifde‡
__S_IFIFO


134 
	#S_ISFIFO
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFIFO
)

	)

136 #ifde‡
__S_IFLNK


137 
	#S_ISLNK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFLNK
)

	)

140 #i‡
deföed
 
__USE_BSD
 && !deföed 
__S_IFLNK


141 
	#S_ISLNK
(
mode
Ë0

	)

144 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K
) \

145 && 
deföed
 
	g__S_IFSOCK


146 
	#S_ISSOCK
(
mode
Ë
	`__S_ISTYPE
((mode), 
__S_IFSOCK
)

	)

147 #ñi‡
deföed
 
__USE_XOPEN2K


148 
	#S_ISSOCK
(
mode
Ë0

	)

155 #ifdef 
__USE_POSIX199309


156 
	#S_TYPEISMQ
(
buf
Ë
	`__S_TYPEISMQ
(buf)

	)

157 
	#S_TYPEISSEM
(
buf
Ë
	`__S_TYPEISSEM
(buf)

	)

158 
	#S_TYPEISSHM
(
buf
Ë
	`__S_TYPEISSHM
(buf)

	)

164 
	#S_ISUID
 
__S_ISUID


	)

165 
	#S_ISGID
 
__S_ISGID


	)

167 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


169 
	#S_ISVTX
 
__S_ISVTX


	)

172 
	#S_IRUSR
 
__S_IREAD


	)

173 
	#S_IWUSR
 
__S_IWRITE


	)

174 
	#S_IXUSR
 
__S_IEXEC


	)

176 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

178 #i‡
deföed
 
__USE_MISC
 && deföed 
__USE_BSD


179 
	#S_IREAD
 
S_IRUSR


	)

180 
	#S_IWRITE
 
S_IWUSR


	)

181 
	#S_IEXEC
 
S_IXUSR


	)

184 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

185 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

186 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

188 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

190 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

191 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

192 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

194 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

197 #ifdef 
__USE_BSD


199 
	#ACCESSPERMS
 (
S_IRWXU
|
S_IRWXG
|
S_IRWXO
Ë

	)

200 
	#ALLPERMS
 (
S_ISUID
|
S_ISGID
|
S_ISVTX
|
S_IRWXU
|
S_IRWXG
|
S_IRWXO
)

	)

201 
	#DEFFILEMODE
 (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
)

	)

203 
	#S_BLKSIZE
 512

	)

207 #i‚de‡
__USE_FILE_OFFSET64


209 
	$°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

210 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

214 
	$f°©
 (
__fd
, 
°©
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

216 #ifde‡
__REDIRECT_NTH


217 
	`__REDIRECT_NTH
 (
°©
, (c⁄° *
__ª°ri˘
 
__fûe
,

218 
°©
 *
__ª°ri˘
 
__buf
), 
°©64
)

219 
	`__n⁄nuŒ
 ((1, 2));

220 
	`__REDIRECT_NTH
 (
f°©
, (
__fd
, 
°©
 *
__buf
), 
f°©64
)

221 
	`__n⁄nuŒ
 ((2));

223 
	#°©
 
°©64


	)

224 
	#f°©
 
f°©64


	)

227 #ifde‡
__USE_LARGEFILE64


228 
	$°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

229 
°©64
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

230 
	$f°©64
 (
__fd
, 
°©64
 *
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

233 #ifde‡
__USE_ATFILE


237 #i‚de‡
__USE_FILE_OFFSET64


238 
	$f°©©
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

239 
°©
 *
__ª°ri˘
 
__buf
, 
__Êag
)

240 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

242 #ifde‡
__REDIRECT_NTH


243 
	`__REDIRECT_NTH
 (
f°©©
, (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

244 
°©
 *
__ª°ri˘
 
__buf
,

245 
__Êag
),

246 
f°©©64
Ë
	`__n⁄nuŒ
 ((2, 3));

248 
	#f°©©
 
f°©©64


	)

252 #ifde‡
__USE_LARGEFILE64


253 
	$f°©©64
 (
__fd
, c⁄° *
__ª°ri˘
 
__fûe
,

254 
°©64
 *
__ª°ri˘
 
__buf
, 
__Êag
)

255 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

259 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


260 #i‚de‡
__USE_FILE_OFFSET64


263 
	$l°©
 (c⁄° *
__ª°ri˘
 
__fûe
,

264 
°©
 *
__ª°ri˘
 
__buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

266 #ifde‡
__REDIRECT_NTH


267 
	`__REDIRECT_NTH
 (
l°©
,

268 (c⁄° *
__ª°ri˘
 
__fûe
,

269 
°©
 *
__ª°ri˘
 
__buf
), 
l°©64
)

270 
	`__n⁄nuŒ
 ((1, 2));

272 
	#l°©
 
l°©64


	)

275 #ifde‡
__USE_LARGEFILE64


276 
	$l°©64
 (c⁄° *
__ª°ri˘
 
__fûe
,

277 
°©64
 *
__ª°ri˘
 
__buf
)

278 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

284 
	$chmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

285 
__THROW
 
	`__n⁄nuŒ
 ((1));

287 #ifde‡
__USE_BSD


291 
	$lchmod
 (c⁄° *
__fûe
, 
__mode_t
 
__mode
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX


297 
	$fchmod
 (
__fd
, 
__mode_t
 
__mode
Ë
__THROW
;

300 #ifde‡
__USE_ATFILE


303 
	$fchmod©
 (
__fd
, c⁄° *
__fûe
, 
__mode_t
 
__mode
,

304 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

312 
__mode_t
 
	$umask
 (
__mode_t
 
__mask
Ë
__THROW
;

314 #ifdef 
__USE_GNU


317 
__mode_t
 
	$gëumask
 (Ë
__THROW
;

321 
	$mkdú
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

322 
__THROW
 
	`__n⁄nuŒ
 ((1));

324 #ifde‡
__USE_ATFILE


328 
	$mkdú©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

329 
__THROW
 
	`__n⁄nuŒ
 ((2));

335 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


336 
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
)

337 
__THROW
 
	`__n⁄nuŒ
 ((1));

339 #ifde‡
__USE_ATFILE


343 
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

344 
__dev_t
 
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
	$mkfifo
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
)

351 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 #ifde‡
__USE_ATFILE


357 
	$mkfifﬂt
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
)

358 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 #ifde‡
__USE_ATFILE


364 
	$utimíßt
 (
__fd
, c⁄° *
__∑th
,

365 c⁄° 
time•ec
 
__times
[2],

366 
__Êags
)

367 
__THROW
 
	`__n⁄nuŒ
 ((2));

370 #ifde‡
__USE_XOPEN2K8


372 
	$futimís
 (
__fd
, c⁄° 
time•ec
 
__times
[2]Ë
__THROW
;

390 #i‚de‡
_STAT_VER


391 
	#_STAT_VER
 0

	)

393 #i‚de‡
_MKNOD_VER


394 
	#_MKNOD_VER
 0

	)

398 #i‚de‡
__USE_FILE_OFFSET64


399 
	$__fx°©
 (
__vî
, 
__fûdes
, 
°©
 *
__°©_buf
)

400 
__THROW
 
	`__n⁄nuŒ
 ((3));

401 
	$__x°©
 (
__vî
, c⁄° *
__fûíame
,

402 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

403 
	$__lx°©
 (
__vî
, c⁄° *
__fûíame
,

404 
°©
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

405 
	$__fx°©©
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

406 
°©
 *
__°©_buf
, 
__Êag
)

407 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

409 #ifde‡
__REDIRECT_NTH


410 
	`__REDIRECT_NTH
 (
__fx°©
, (
__vî
, 
__fûdes
,

411 
°©
 *
__°©_buf
), 
__fx°©64
)

412 
	`__n⁄nuŒ
 ((3));

413 
	`__REDIRECT_NTH
 (
__x°©
, (
__vî
, c⁄° *
__fûíame
,

414 
°©
 *
__°©_buf
), 
__x°©64
)

415 
	`__n⁄nuŒ
 ((2, 3));

416 
	`__REDIRECT_NTH
 (
__lx°©
, (
__vî
, c⁄° *
__fûíame
,

417 
°©
 *
__°©_buf
), 
__lx°©64
)

418 
	`__n⁄nuŒ
 ((2, 3));

419 
	`__REDIRECT_NTH
 (
__fx°©©
, (
__vî
, 
__fûdes
,

420 c⁄° *
__fûíame
,

421 
°©
 *
__°©_buf
, 
__Êag
),

422 
__fx°©©64
Ë
	`__n⁄nuŒ
 ((3, 4));

425 
	#__fx°©
 
__fx°©64


	)

426 
	#__x°©
 
__x°©64


	)

427 
	#__lx°©
 
__lx°©64


	)

431 #ifde‡
__USE_LARGEFILE64


432 
	$__fx°©64
 (
__vî
, 
__fûdes
, 
°©64
 *
__°©_buf
)

433 
__THROW
 
	`__n⁄nuŒ
 ((3));

434 
	$__x°©64
 (
__vî
, c⁄° *
__fûíame
,

435 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

436 
	$__lx°©64
 (
__vî
, c⁄° *
__fûíame
,

437 
°©64
 *
__°©_buf
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

438 
	$__fx°©©64
 (
__vî
, 
__fûdes
, c⁄° *
__fûíame
,

439 
°©64
 *
__°©_buf
, 
__Êag
)

440 
__THROW
 
	`__n⁄nuŒ
 ((3, 4));

442 
	$__xmknod
 (
__vî
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

443 
__dev_t
 *
__dev
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

445 
	$__xmknod©
 (
__vî
, 
__fd
, c⁄° *
__∑th
,

446 
__mode_t
 
__mode
, 
__dev_t
 *
__dev
)

447 
__THROW
 
	`__n⁄nuŒ
 ((3, 5));

449 #ifde‡
__USE_EXTERN_INLINES


452 
__exã∫_ölöe
 

453 
	`__NTH
 (
	$°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

455  
	`__x°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

456 
	}
}

458 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


459 
__exã∫_ölöe
 

460 
__NTH
 (
	$l°©
 (c⁄° *
__∑th
, 
°©
 *
__°©buf
))

462  
	`__lx°©
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

463 
	}
}

466 
__exã∫_ölöe
 

467 
__NTH
 (
	$f°©
 (
__fd
, 
°©
 *
__°©buf
))

469  
	`__fx°©
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

470 
	}
}

472 #ifde‡
__USE_ATFILE


473 
__exã∫_ölöe
 

474 
__NTH
 (
	$f°©©
 (
__fd
, c⁄° *
__fûíame
, 
°©
 *
__°©buf
,

475 
__Êag
))

477  
	`__fx°©©
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

478 
	}
}

481 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_BSD


482 
__exã∫_ölöe
 

483 
__NTH
 (
	$mknod
 (c⁄° *
__∑th
, 
__mode_t
 
__mode
, 
__dev_t
 
__dev
))

485  
	`__xmknod
 (
_MKNOD_VER
, 
__∑th
, 
__mode
, &
__dev
);

486 
	}
}

489 #ifde‡
__USE_ATFILE


490 
__exã∫_ölöe
 

491 
__NTH
 (
	$mknod©
 (
__fd
, c⁄° *
__∑th
, 
__mode_t
 
__mode
,

492 
__dev_t
 
__dev
))

494  
	`__xmknod©
 (
_MKNOD_VER
, 
__fd
, 
__∑th
, 
__mode
, &
__dev
);

495 
	}
}

498 #i‡
deföed
 
__USE_LARGEFILE64
 \

499 && (! 
deföed
 
	g__USE_FILE_OFFSET64
 \

500 || (
deföed
 
	g__REDIRECT_NTH
 && deföed 
	g__OPTIMIZE__
))

501 
__exã∫_ölöe
 

502 
__NTH
 (
	$°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

504  
	`__x°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

505 
	}
}

507 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


508 
__exã∫_ölöe
 

509 
__NTH
 (
	$l°©64
 (c⁄° *
__∑th
, 
°©64
 *
__°©buf
))

511  
	`__lx°©64
 (
_STAT_VER
, 
__∑th
, 
__°©buf
);

512 
	}
}

515 
__exã∫_ölöe
 

516 
__NTH
 (
	$f°©64
 (
__fd
, 
°©64
 *
__°©buf
))

518  
	`__fx°©64
 (
_STAT_VER
, 
__fd
, 
__°©buf
);

519 
	}
}

521 #ifde‡
__USE_ATFILE


522 
__exã∫_ölöe
 

523 
__NTH
 (
	$f°©©64
 (
__fd
, c⁄° *
__fûíame
, 
°©64
 *
__°©buf
,

524 
__Êag
))

526  
	`__fx°©©64
 (
_STAT_VER
, 
__fd
, 
__fûíame
, 
__°©buf
, 
__Êag
);

527 
	}
}

534 
	g__END_DECLS


	@/usr/include/sys/time.h

18 #i‚de‡
_SYS_TIME_H


19 
	#_SYS_TIME_H
 1

	)

21 
	~<„©uªs.h
>

23 
	~<bôs/ty≥s.h
>

24 
	#__√ed_time_t


	)

25 
	~<time.h
>

26 
	#__√ed_timevÆ


	)

27 
	~<bôs/time.h
>

29 
	~<sys/£À˘.h
>

31 #i‚de‡
__su£c⁄ds_t_deföed


32 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

33 
	#__su£c⁄ds_t_deföed


	)

37 
	g__BEGIN_DECLS


39 #ifde‡
__USE_GNU


41 
	#TIMEVAL_TO_TIMESPEC
(
tv
, 
ts
) { \

42 (
ts
)->
tv_£c
 = (
tv
)->tv_sec; \

43 (
ts
)->
tv_n£c
 = (
tv
)->
tv_u£c
 * 1000; \

44 }

	)

45 
	#TIMESPEC_TO_TIMEVAL
(
tv
, 
ts
) { \

46 (
tv
)->
tv_£c
 = (
ts
)->tv_sec; \

47 (
tv
)->
tv_u£c
 = (
ts
)->
tv_n£c
 / 1000; \

48 }

	)

52 #ifde‡
__USE_BSD


55 
	stimez⁄e


57 
	mtz_möuãswe°
;

58 
	mtz_d°time
;

61 
timez⁄e
 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

63 *
	t__ª°ri˘
 
	t__timez⁄e_±r_t
;

71 
	$gëtimeofday
 (
timevÆ
 *
__ª°ri˘
 
__tv
,

72 
__timez⁄e_±r_t
 
__tz
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

74 #ifde‡
__USE_BSD


77 
	$£âimeofday
 (c⁄° 
timevÆ
 *
__tv
,

78 c⁄° 
timez⁄e
 *
__tz
)

79 
__THROW
;

85 
	$adjtime
 (c⁄° 
timevÆ
 *
__dñè
,

86 
timevÆ
 *
__ﬁddñè
Ë
__THROW
;

91 
	e__ôimî_which


94 
ITIMER_REAL
 = 0,

95 
	#ITIMER_REAL
 
ITIMER_REAL


	)

97 
ITIMER_VIRTUAL
 = 1,

98 
	#ITIMER_VIRTUAL
 
ITIMER_VIRTUAL


	)

101 
ITIMER_PROF
 = 2

102 
	#ITIMER_PROF
 
ITIMER_PROF


	)

107 
	sôimîvÆ


110 
timevÆ
 
ô_öãrvÆ
;

112 
timevÆ
 
ô_vÆue
;

115 #i‡
deföed
 
__USE_GNU
 && !deföed 
__˝lu•lus


118 
__ôimî_which
 
	t__ôimî_which_t
;

120 
	t__ôimî_which_t
;

125 
	$gëôimî
 (
__ôimî_which_t
 
__which
,

126 
ôimîvÆ
 *
__vÆue
Ë
__THROW
;

131 
	$£tôimî
 (
__ôimî_which_t
 
__which
,

132 c⁄° 
ôimîvÆ
 *
__ª°ri˘
 
__√w
,

133 
ôimîvÆ
 *
__ª°ri˘
 
__ﬁd
Ë
__THROW
;

138 
	$utimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

139 
__THROW
 
	`__n⁄nuŒ
 ((1));

141 #ifde‡
__USE_BSD


143 
	$lutimes
 (c⁄° *
__fûe
, c⁄° 
timevÆ
 
__tvp
[2])

144 
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$futimes
 (
__fd
, c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

150 #ifde‡
__USE_GNU


154 
	$futimeßt
 (
__fd
, c⁄° *
__fûe
,

155 c⁄° 
timevÆ
 
__tvp
[2]Ë
__THROW
;

159 #ifde‡
__USE_BSD


162 
	#timîis£t
(
tvp
Ë(—vp)->
tv_£c
 || (tvp)->
tv_u£c
)

	)

163 
	#timî˛ór
(
tvp
Ë(—vp)->
tv_£c
 = (tvp)->
tv_u£c
 = 0)

	)

164 
	#timîcmp
(
a
, 
b
, 
CMP
) \

165 (((
a
)->
tv_£c
 =(
b
)->tv_sec) ? \

166 ((
a
)->
tv_u£c
 
	`CMP
 (
b
)->tv_usec) : \

167 ((
a
)->
tv_£c
 
	`CMP
 (
b
)->tv_£c))

	)

168 
	#timîadd
(
a
, 
b
, 
ªsu…
) \

170 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯+ (
b
)->tv_sec; \

171 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯+ (
b
)->tv_usec; \

172 i‡((
ªsu…
)->
tv_u£c
 >= 1000000) \

174 ++(
ªsu…
)->
tv_£c
; \

175 (
ªsu…
)->
tv_u£c
 -= 1000000; \

177 
	}
} 0)

	)

178 
	#timîsub
(
a
, 
b
, 
ªsu…
) \

180 (
ªsu…
)->
tv_£c
 = (
a
)->tv_£¯- (
b
)->tv_sec; \

181 (
ªsu…
)->
tv_u£c
 = (
a
)->tv_u£¯- (
b
)->tv_usec; \

182 i‡((
ªsu…
)->
tv_u£c
 < 0) { \

183 --(
ªsu…
)->
tv_£c
; \

184 (
ªsu…
)->
tv_u£c
 += 1000000; \

186 } 0)

	)

189 
	g__END_DECLS


	@/usr/include/sys/types.h

22 #i‚def 
_SYS_TYPES_H


23 
	#_SYS_TYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifdef 
__USE_BSD


32 #i‚de‡
__u_ch¨_deföed


33 
__u_ch¨
 
	tu_ch¨
;

34 
__u_sh‹t
 
	tu_sh‹t
;

35 
__u_öt
 
	tu_öt
;

36 
__u_l⁄g
 
	tu_l⁄g
;

37 
__quad_t
 
	tquad_t
;

38 
__u_quad_t
 
	tu_quad_t
;

39 
__fsid_t
 
	tfsid_t
;

40 
	#__u_ch¨_deföed


	)

44 
__loff_t
 
	tloff_t
;

46 #i‚de‡
__öo_t_deföed


47 #i‚de‡
__USE_FILE_OFFSET64


48 
__öo_t
 
	töo_t
;

50 
__öo64_t
 
	töo_t
;

52 
	#__öo_t_deföed


	)

54 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


55 
__öo64_t
 
	töo64_t
;

56 
	#__öo64_t_deföed


	)

59 #i‚de‡
__dev_t_deföed


60 
__dev_t
 
	tdev_t
;

61 
	#__dev_t_deföed


	)

64 #i‚de‡
__gid_t_deföed


65 
__gid_t
 
	tgid_t
;

66 
	#__gid_t_deföed


	)

69 #i‚de‡
__mode_t_deföed


70 
__mode_t
 
	tmode_t
;

71 
	#__mode_t_deföed


	)

74 #i‚de‡
__∆ök_t_deföed


75 
__∆ök_t
 
	t∆ök_t
;

76 
	#__∆ök_t_deföed


	)

79 #i‚de‡
__uid_t_deföed


80 
__uid_t
 
	tuid_t
;

81 
	#__uid_t_deföed


	)

84 #i‚de‡
__off_t_deföed


85 #i‚de‡
__USE_FILE_OFFSET64


86 
__off_t
 
	toff_t
;

88 
__off64_t
 
	toff_t
;

90 
	#__off_t_deföed


	)

92 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


93 
__off64_t
 
	toff64_t
;

94 
	#__off64_t_deföed


	)

97 #i‚de‡
__pid_t_deföed


98 
__pid_t
 
	tpid_t
;

99 
	#__pid_t_deföed


	)

102 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
) \

103 && !
deföed
 
__id_t_deföed


104 
__id_t
 
	tid_t
;

105 
	#__id_t_deföed


	)

108 #i‚de‡
__ssize_t_deföed


109 
__ssize_t
 
	tssize_t
;

110 
	#__ssize_t_deföed


	)

113 #ifdef 
__USE_BSD


114 #i‚de‡
__daddr_t_deföed


115 
__daddr_t
 
	tdaddr_t
;

116 
__ˇddr_t
 
	tˇddr_t
;

117 
	#__daddr_t_deföed


	)

121 #i‡(
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
Ë&& !deföed 
__key_t_deföed


122 
__key_t
 
	tkey_t
;

123 
	#__key_t_deföed


	)

126 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


127 
	#__√ed_˛ock_t


	)

129 
	#__√ed_time_t


	)

130 
	#__√ed_timî_t


	)

131 
	#__√ed_˛ockid_t


	)

132 
	~<time.h
>

134 #ifde‡
__USE_XOPEN


135 #i‚de‡
__u£c⁄ds_t_deföed


136 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

137 
	#__u£c⁄ds_t_deföed


	)

139 #i‚de‡
__su£c⁄ds_t_deföed


140 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

141 
	#__su£c⁄ds_t_deföed


	)

145 
	#__√ed_size_t


	)

146 
	~<°ddef.h
>

148 #ifde‡
__USE_MISC


150 
	tul⁄g
;

151 
	tush‹t
;

152 
	tuöt
;

157 #i‡!
__GNUC_PREREQ
 (2, 7)

160 #i‚de‡
__öt8_t_deföed


161 
	#__öt8_t_deföed


	)

162 
	töt8_t
;

163 
	töt16_t
;

164 
	töt32_t
;

165 #i‡
__WORDSIZE
 == 64

166 
	töt64_t
;

168 
__exãnsi⁄__
 
	töt64_t
;

173 
	tu_öt8_t
;

174 
	tu_öt16_t
;

175 
	tu_öt32_t
;

176 #i‡
__WORDSIZE
 == 64

177 
	tu_öt64_t
;

179 
__exãnsi⁄__
 
	tu_öt64_t
;

182 
	tªgi°î_t
;

187 
	#__ötN_t
(
N
, 
MODE
) \

188 ##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

189 
	t__u_ötN_t
(
	tN
, 
	tMODE
) \

190 
	tu_öt
##
	tN
##
	t_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	tMODE
)))

	)

192 #i‚de‡
	t__öt8_t_deföed


193 
	t__öt8_t_deföed


	)

194 
	t__ötN_t
 (8, 
	t__QI__
);

195 
__ötN_t
 (16, 
__HI__
);

196 
__ötN_t
 (32, 
__SI__
);

197 
__ötN_t
 (64, 
__DI__
);

200 
__u_ötN_t
 (8, 
__QI__
);

201 
__u_ötN_t
 (16, 
__HI__
);

202 
__u_ötN_t
 (32, 
__SI__
);

203 
__u_ötN_t
 (64, 
__DI__
);

205 
	tªgi°î_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__w‹d__
)));

211 
	#__BIT_TYPES_DEFINED__
 1

	)

214 #ifdef 
__USE_BSD


216 
	~<ídün.h
>

219 
	~<sys/£À˘.h
>

222 
	~<sys/sysma¸os.h
>

226 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
) \

227 && !
deföed
 
__blksize_t_deföed


228 
__blksize_t
 
	tblksize_t
;

229 
	#__blksize_t_deföed


	)

233 #i‚de‡
__USE_FILE_OFFSET64


234 #i‚de‡
__blk˙t_t_deföed


235 
__blk˙t_t
 
	tblk˙t_t
;

236 
	#__blk˙t_t_deföed


	)

238 #i‚de‡
__fsblk˙t_t_deföed


239 
__fsblk˙t_t
 
	tfsblk˙t_t
;

240 
	#__fsblk˙t_t_deföed


	)

242 #i‚de‡
__fsfû˙t_t_deföed


243 
__fsfû˙t_t
 
	tfsfû˙t_t
;

244 
	#__fsfû˙t_t_deföed


	)

247 #i‚de‡
__blk˙t_t_deföed


248 
__blk˙t64_t
 
	tblk˙t_t
;

249 
	#__blk˙t_t_deföed


	)

251 #i‚de‡
__fsblk˙t_t_deföed


252 
__fsblk˙t64_t
 
	tfsblk˙t_t
;

253 
	#__fsblk˙t_t_deföed


	)

255 #i‚de‡
__fsfû˙t_t_deföed


256 
__fsfû˙t64_t
 
	tfsfû˙t_t
;

257 
	#__fsfû˙t_t_deföed


	)

261 #ifde‡
__USE_LARGEFILE64


262 
__blk˙t64_t
 
	tblk˙t64_t
;

263 
__fsblk˙t64_t
 
	tfsblk˙t64_t
;

264 
__fsfû˙t64_t
 
	tfsfû˙t64_t
;

269 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


270 
	~<bôs/±hªadty≥s.h
>

273 
	g__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

71 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

75 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

79 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

83 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

86 #ifde‡
__USE_XOPEN2K8


87 
	#_XOPEN_VERSION
 700

	)

88 #ñi‡
deföed
 
__USE_XOPEN2K


89 
	#_XOPEN_VERSION
 600

	)

90 #ñi‡
deföed
 
__USE_UNIX98


91 
	#_XOPEN_VERSION
 500

	)

93 
	#_XOPEN_VERSION
 4

	)

97 
	#_XOPEN_XCU_VERSION
 4

	)

100 
	#_XOPEN_XPG2
 1

	)

101 
	#_XOPEN_XPG3
 1

	)

102 
	#_XOPEN_XPG4
 1

	)

105 
	#_XOPEN_UNIX
 1

	)

108 
	#_XOPEN_CRYPT
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 #ifde‡
__USE_ATFILE


304 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

305 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

310 #i‚def 
_STDIO_H


311 
	#SEEK_SET
 0

	)

312 
	#SEEK_CUR
 1

	)

313 
	#SEEK_END
 2

	)

314 #ifde‡
__USE_GNU


315 
	#SEEK_DATA
 3

	)

316 
	#SEEK_HOLE
 4

	)

320 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


322 
	#L_SET
 
SEEK_SET


	)

323 
	#L_INCR
 
SEEK_CUR


	)

324 
	#L_XTND
 
SEEK_END


	)

333 #i‚de‡
__USE_FILE_OFFSET64


334 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

336 #ifde‡
__REDIRECT_NTH


337 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

338 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

339 
l£ek64
);

341 
	#l£ek
 
l£ek64


	)

344 #ifde‡
__USE_LARGEFILE64


345 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

346 
__THROW
;

353 
	`˛o£
 (
__fd
);

360 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

366 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur
;

368 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


369 #i‚de‡
__USE_FILE_OFFSET64


376 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

377 
__off_t
 
__off£t
Ë
__wur
;

384 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

385 
__off_t
 
__off£t
Ë
__wur
;

387 #ifde‡
__REDIRECT


388 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

389 
__off64_t
 
__off£t
),

390 
¥ód64
Ë
__wur
;

391 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

392 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

393 
pwrôe64
Ë
__wur
;

395 
	#¥ód
 
¥ód64


	)

396 
	#pwrôe
 
pwrôe64


	)

400 #ifde‡
__USE_LARGEFILE64


404 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
Ë
__wur
;

408 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

409 
__off64_t
 
__off£t
Ë
__wur
;

417 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

419 #ifde‡
__USE_GNU


422 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

432 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

444 
	`¶ìp
 (
__£c⁄ds
);

446 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

447 || 
deföed
 
__USE_BSD


452 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

453 
__THROW
;

460 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

469 
	`∑u£
 ();

473 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

474 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

476 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


478 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

483 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

484 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

488 #ifde‡
__USE_ATFILE


491 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

492 
__gid_t
 
__group
, 
__Êag
)

493 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

497 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

499 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


501 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

511 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

513 #ifdef 
__USE_GNU


517 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

520 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

521 || 
deföed
 
__USE_BSD


525 *
	$gëwd
 (*
__buf
)

526 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

531 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

534 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

536 #ifde‡
__USE_GNU


539 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

543 **
__ívú⁄
;

544 #ifde‡
__USE_GNU


545 **
ívú⁄
;

551 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

552 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

554 #ifde‡
__USE_XOPEN2K8


557 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

558 
__THROW
 
	`__n⁄nuŒ
 ((2));

563 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

564 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

568 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

569 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

573 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

574 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

578 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

587 #ifde‡
__USE_GNU


590 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

591 *c⁄° 
__ívp
[])

592 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

596 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


598 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

603 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

609 
	~<bôs/c⁄‚ame.h
>

612 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

613 
__THROW
 
	`__n⁄nuŒ
 ((1));

616 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

619 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

621 #ifdef 
__USE_POSIX2


623 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

628 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

631 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

634 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

637 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

638 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


639 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

646 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


660 
	$£çgΩ
 (Ë
__THROW
;

667 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

669 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


671 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

675 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

678 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

681 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

684 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

689 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

691 #ifdef 
__USE_GNU


693 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

700 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

702 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


705 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

708 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


710 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

717 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

719 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


722 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


727 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_GNU


733 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

734 
__THROW
;

738 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

739 
__THROW
;

743 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

744 
__THROW
 
__wur
;

748 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

749 
__THROW
 
__wur
;

756 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

758 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

759 || 
deföed
 
__USE_BSD


764 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

770 *
	$ây«me
 (
__fd
Ë
__THROW
;

774 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

775 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

779 
	$ißây
 (
__fd
Ë
__THROW
;

781 #i‡
deföed
 
__USE_BSD
 \

782 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

785 
	$ây¶Ÿ
 (Ë
__THROW
;

790 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

793 #ifde‡
__USE_ATFILE


796 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

797 c⁄° *
__to
, 
__Êags
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

801 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


803 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

804 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

809 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

810 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

811 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

814 #ifde‡
__USE_ATFILE


816 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

817 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

820 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

821 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

822 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

826 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

828 #ifde‡
__USE_ATFILE


830 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

831 
__THROW
 
	`__n⁄nuŒ
 ((2));

835 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

839 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

842 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

849 *
	`gëlogö
 ();

850 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


857 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

860 #ifdef 
__USE_BSD


862 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

866 #ifdef 
__USE_POSIX2


870 
	#__√ed_gë›t


	)

871 
	~<gë›t.h
>

875 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


879 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

883 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

886 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

887 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

891 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

897 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

898 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

899 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

900 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

906 
	$vh™gup
 (Ë
__THROW
;

909 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

917 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

918 
size_t
 
__off£t
, 
__sˇÀ
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

925 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

929 *
	$gëu£rshñl
 (Ë
__THROW
;

930 
	$ídu£rshñl
 (Ë
__THROW
;

931 
	$£tu£rshñl
 (Ë
__THROW
;

937 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

941 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

944 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

948 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

956 
	`fsync
 (
__fd
);

959 #ifde‡
__USE_GNU


962 
	$syncfs
 (
__fd
Ë
__THROW
;

966 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


969 
	`gëho°id
 ();

972 
	$sync
 (Ë
__THROW
;

975 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


978 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

983 
	$gëdèbÀsize
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


992 #i‚de‡
__USE_FILE_OFFSET64


993 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

994 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

996 #ifde‡
__REDIRECT_NTH


997 
	`__REDIRECT_NTH
 (
åunˇã
,

998 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

999 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1001 
	#åunˇã
 
åunˇã64


	)

1004 #ifde‡
__USE_LARGEFILE64


1005 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1006 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1011 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_POSIX199309
 \

1012 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1015 #i‚de‡
__USE_FILE_OFFSET64


1016 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1018 #ifde‡
__REDIRECT_NTH


1019 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1020 
·runˇã64
Ë
__wur
;

1022 
	#·runˇã
 
·runˇã64


	)

1025 #ifde‡
__USE_LARGEFILE64


1026 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1032 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1033 || 
deföed
 
__USE_MISC


1037 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1043 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1047 #ifde‡
__USE_MISC


1058 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1063 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1075 
	#F_ULOCK
 0

	)

1076 
	#F_LOCK
 1

	)

1077 
	#F_TLOCK
 2

	)

1078 
	#F_TEST
 3

	)

1080 #i‚de‡
__USE_FILE_OFFSET64


1081 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1083 #ifde‡
__REDIRECT


1084 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1085 
lockf64
Ë
__wur
;

1087 
	#lockf
 
lockf64


	)

1090 #ifde‡
__USE_LARGEFILE64


1091 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__USE_GNU


1101 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1102 (
__exãnsi⁄__
 \

1103 ({ 
__ªsu…
; \

1104 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1105 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1106 
__ªsu…
; 
	}
}))

	)

1109 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1112 
fd©async
 (
__fûdes
);

1118 #ifdef 
__USE_XOPEN


1120 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1121 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1125 
	$í¸y±
 (*
__glibc_block
, 
__edÊag
)

1126 
__THROW
 
	`__n⁄nuŒ
 ((1));

1133 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1134 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1140 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1142 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1147 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1148 
	~<bôs/uni°d.h
>

1151 
__END_DECLS


	@/usr/include/GL/glxext.h

1 #i‚de‡
__glxext_h_


2 
	#__glxext_h_
 1

	)

4 #ifde‡
__˝lu•lus


39 
	#GLX_GLXEXT_VERSION
 20140114

	)

50 #i‚de‡
GLX_VERSION_1_3


51 
	#GLX_VERSION_1_3
 1

	)

52 
XID
 
	tGLXC⁄ãxtID
;

53 
__GLXFBC⁄figRec
 *
	tGLXFBC⁄fig
;

54 
XID
 
	tGLXWödow
;

55 
XID
 
	tGLXPbuf„r
;

56 
	#GLX_WINDOW_BIT
 0x00000001

	)

57 
	#GLX_PIXMAP_BIT
 0x00000002

	)

58 
	#GLX_PBUFFER_BIT
 0x00000004

	)

59 
	#GLX_RGBA_BIT
 0x00000001

	)

60 
	#GLX_COLOR_INDEX_BIT
 0x00000002

	)

61 
	#GLX_PBUFFER_CLOBBER_MASK
 0x08000000

	)

62 
	#GLX_FRONT_LEFT_BUFFER_BIT
 0x00000001

	)

63 
	#GLX_FRONT_RIGHT_BUFFER_BIT
 0x00000002

	)

64 
	#GLX_BACK_LEFT_BUFFER_BIT
 0x00000004

	)

65 
	#GLX_BACK_RIGHT_BUFFER_BIT
 0x00000008

	)

66 
	#GLX_AUX_BUFFERS_BIT
 0x00000010

	)

67 
	#GLX_DEPTH_BUFFER_BIT
 0x00000020

	)

68 
	#GLX_STENCIL_BUFFER_BIT
 0x00000040

	)

69 
	#GLX_ACCUM_BUFFER_BIT
 0x00000080

	)

70 
	#GLX_CONFIG_CAVEAT
 0x20

	)

71 
	#GLX_X_VISUAL_TYPE
 0x22

	)

72 
	#GLX_TRANSPARENT_TYPE
 0x23

	)

73 
	#GLX_TRANSPARENT_INDEX_VALUE
 0x24

	)

74 
	#GLX_TRANSPARENT_RED_VALUE
 0x25

	)

75 
	#GLX_TRANSPARENT_GREEN_VALUE
 0x26

	)

76 
	#GLX_TRANSPARENT_BLUE_VALUE
 0x27

	)

77 
	#GLX_TRANSPARENT_ALPHA_VALUE
 0x28

	)

78 
	#GLX_DONT_CARE
 0xFFFFFFFF

	)

79 
	#GLX_NONE
 0x8000

	)

80 
	#GLX_SLOW_CONFIG
 0x8001

	)

81 
	#GLX_TRUE_COLOR
 0x8002

	)

82 
	#GLX_DIRECT_COLOR
 0x8003

	)

83 
	#GLX_PSEUDO_COLOR
 0x8004

	)

84 
	#GLX_STATIC_COLOR
 0x8005

	)

85 
	#GLX_GRAY_SCALE
 0x8006

	)

86 
	#GLX_STATIC_GRAY
 0x8007

	)

87 
	#GLX_TRANSPARENT_RGB
 0x8008

	)

88 
	#GLX_TRANSPARENT_INDEX
 0x8009

	)

89 
	#GLX_VISUAL_ID
 0x800B

	)

90 
	#GLX_SCREEN
 0x800C

	)

91 
	#GLX_NON_CONFORMANT_CONFIG
 0x800D

	)

92 
	#GLX_DRAWABLE_TYPE
 0x8010

	)

93 
	#GLX_RENDER_TYPE
 0x8011

	)

94 
	#GLX_X_RENDERABLE
 0x8012

	)

95 
	#GLX_FBCONFIG_ID
 0x8013

	)

96 
	#GLX_RGBA_TYPE
 0x8014

	)

97 
	#GLX_COLOR_INDEX_TYPE
 0x8015

	)

98 
	#GLX_MAX_PBUFFER_WIDTH
 0x8016

	)

99 
	#GLX_MAX_PBUFFER_HEIGHT
 0x8017

	)

100 
	#GLX_MAX_PBUFFER_PIXELS
 0x8018

	)

101 
	#GLX_PRESERVED_CONTENTS
 0x801B

	)

102 
	#GLX_LARGEST_PBUFFER
 0x801C

	)

103 
	#GLX_WIDTH
 0x801D

	)

104 
	#GLX_HEIGHT
 0x801E

	)

105 
	#GLX_EVENT_MASK
 0x801F

	)

106 
	#GLX_DAMAGED
 0x8020

	)

107 
	#GLX_SAVED
 0x8021

	)

108 
	#GLX_WINDOW
 0x8022

	)

109 
	#GLX_PBUFFER
 0x8023

	)

110 
	#GLX_PBUFFER_HEIGHT
 0x8040

	)

111 
	#GLX_PBUFFER_WIDTH
 0x8041

	)

112 
GLXFBC⁄fig
 *–*
	tPFNGLXGETFBCONFIGSPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, *
	t√Àmíts
);

113 
GLXFBC⁄fig
 *–*
	tPFNGLXCHOOSEFBCONFIGPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, c⁄° *
	t©åib_li°
, *
	t√Àmíts
);

114 –*
PFNGLXGETFBCONFIGATTRIBPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄fig
 
	tc⁄fig
, 
	t©åibuã
, *
	tvÆue
);

115 
XVisuÆInfo
 *–*
	tPFNGLXGETVISUALFROMFBCONFIGPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄fig
 
	tc⁄fig
);

116 
GLXWödow
 ( *
	tPFNGLXCREATEWINDOWPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄fig
 
	tc⁄fig
, 
	tWödow
 
	twö
, c⁄° *
	t©åib_li°
);

117 –*
PFNGLXDESTROYWINDOWPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXWödow
 
	twö
);

118 
GLXPixm≠
 ( *
	tPFNGLXCREATEPIXMAPPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄fig
 
	tc⁄fig
, 
	tPixm≠
 
	tpixm≠
, c⁄° *
	t©åib_li°
);

119 –*
PFNGLXDESTROYPIXMAPPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXPixm≠
 
	tpixm≠
);

120 
GLXPbuf„r
 ( *
	tPFNGLXCREATEPBUFFERPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄fig
 
	tc⁄fig
, c⁄° *
	t©åib_li°
);

121 –*
PFNGLXDESTROYPBUFFERPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXPbuf„r
 
	tpbuf
);

122 –*
PFNGLXQUERYDRAWABLEPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøw
, 
	t©åibuã
, *
	tvÆue
);

123 
GLXC⁄ãxt
 ( *
	tPFNGLXCREATENEWCONTEXTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄fig
 
	tc⁄fig
, 
	tªndî_ty≥
, 
	tGLXC⁄ãxt
 
	tsh¨e_li°
, 
	tBoﬁ
 
	tdúe˘
);

124 
Boﬁ
 ( *
	tPFNGLXMAKECONTEXTCURRENTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøw
, GLXDøwabÀ 
	tªad
, 
	tGLXC⁄ãxt
 
	t˘x
);

125 
GLXDøwabÀ
 ( *
	tPFNGLXGETCURRENTREADDRAWABLEPROC
) ();

126 –*
PFNGLXQUERYCONTEXTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXC⁄ãxt
 
	t˘x
, 
	t©åibuã
, *
	tvÆue
);

127 –*
PFNGLXSELECTEVENTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøw
, 
	tevít_mask
);

128 –*
PFNGLXGETSELECTEDEVENTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøw
, *
	tevít_mask
);

129 #ifde‡
GLX_GLXEXT_PROTOTYPES


130 
GLXFBC⁄fig
 *
glXGëFBC⁄figs
 (
Di•œy
 *
dpy
, 
s¸ìn
, *
√Àmíts
);

131 
GLXFBC⁄fig
 *
glXChoo£FBC⁄fig
 (
Di•œy
 *
dpy
, 
s¸ìn
, c⁄° *
©åib_li°
, *
√Àmíts
);

132 
glXGëFBC⁄figAârib
 (
Di•œy
 *
dpy
, 
GLXFBC⁄fig
 
c⁄fig
, 
©åibuã
, *
vÆue
);

133 
XVisuÆInfo
 *
glXGëVisuÆFromFBC⁄fig
 (
Di•œy
 *
dpy
, 
GLXFBC⁄fig
 
c⁄fig
);

134 
GLXWödow
 
glXCª©eWödow
 (
Di•œy
 *
dpy
, 
GLXFBC⁄fig
 
c⁄fig
, 
Wödow
 
wö
, c⁄° *
©åib_li°
);

135 
glXDe°royWödow
 (
Di•œy
 *
dpy
, 
GLXWödow
 
wö
);

136 
GLXPixm≠
 
glXCª©ePixm≠
 (
Di•œy
 *
dpy
, 
GLXFBC⁄fig
 
c⁄fig
, 
Pixm≠
 
pixm≠
, c⁄° *
©åib_li°
);

137 
glXDe°royPixm≠
 (
Di•œy
 *
dpy
, 
GLXPixm≠
 
pixm≠
);

138 
GLXPbuf„r
 
glXCª©ePbuf„r
 (
Di•œy
 *
dpy
, 
GLXFBC⁄fig
 
c⁄fig
, c⁄° *
©åib_li°
);

139 
glXDe°royPbuf„r
 (
Di•œy
 *
dpy
, 
GLXPbuf„r
 
pbuf
);

140 
glXQuîyDøwabÀ
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døw
, 
©åibuã
, *
vÆue
);

141 
GLXC⁄ãxt
 
glXCª©eNewC⁄ãxt
 (
Di•œy
 *
dpy
, 
GLXFBC⁄fig
 
c⁄fig
, 
ªndî_ty≥
, GLXC⁄ãxà
sh¨e_li°
, 
Boﬁ
 
dúe˘
);

142 
Boﬁ
 
glXMakeC⁄ãxtCuºít
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døw
, GLXDøwabÀ 
ªad
, 
GLXC⁄ãxt
 
˘x
);

143 
GLXDøwabÀ
 
glXGëCuºítRódDøwabÀ
 ();

144 
glXQuîyC⁄ãxt
 (
Di•œy
 *
dpy
, 
GLXC⁄ãxt
 
˘x
, 
©åibuã
, *
vÆue
);

145 
glXSñe˘Evít
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døw
, 
evít_mask
);

146 
glXGëSñe˘edEvít
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døw
, *
evít_mask
);

150 #i‚de‡
GLX_VERSION_1_4


151 
	#GLX_VERSION_1_4
 1

	)

152 –*
__GLXextFuncPå
)();

153 
	#GLX_SAMPLE_BUFFERS
 100000

	)

154 
	#GLX_SAMPLES
 100001

	)

155 
__GLXextFuncPå
 ( *
	tPFNGLXGETPROCADDRESSPROC
Ë(c⁄° 
	tGLubyã
 *
	t¥ocName
);

156 #ifde‡
GLX_GLXEXT_PROTOTYPES


157 
__GLXextFuncPå
 
glXGëProcAddªss
 (c⁄° 
GLubyã
 *
¥ocName
);

161 #i‚de‡
GLX_ARB_¸óã_c⁄ãxt


162 
	#GLX_ARB_¸óã_c⁄ãxt
 1

	)

163 
	#GLX_CONTEXT_DEBUG_BIT_ARB
 0x00000001

	)

164 
	#GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB
 0x00000002

	)

165 
	#GLX_CONTEXT_MAJOR_VERSION_ARB
 0x2091

	)

166 
	#GLX_CONTEXT_MINOR_VERSION_ARB
 0x2092

	)

167 
	#GLX_CONTEXT_FLAGS_ARB
 0x2094

	)

168 
GLXC⁄ãxt
 ( *
	tPFNGLXCREATECONTEXTATTRIBSARBPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄fig
 
	tc⁄fig
, 
	tGLXC⁄ãxt
 
	tsh¨e_c⁄ãxt
, 
	tBoﬁ
 
	tdúe˘
, c⁄° *
	t©åib_li°
);

169 #ifde‡
GLX_GLXEXT_PROTOTYPES


170 
GLXC⁄ãxt
 
glXCª©eC⁄ãxtAâribsARB
 (
Di•œy
 *
dpy
, 
GLXFBC⁄fig
 
c⁄fig
, GLXC⁄ãxà
sh¨e_c⁄ãxt
, 
Boﬁ
 
dúe˘
, c⁄° *
©åib_li°
);

174 #i‚de‡
GLX_ARB_¸óã_c⁄ãxt_¥ofûe


175 
	#GLX_ARB_¸óã_c⁄ãxt_¥ofûe
 1

	)

176 
	#GLX_CONTEXT_CORE_PROFILE_BIT_ARB
 0x00000001

	)

177 
	#GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB
 0x00000002

	)

178 
	#GLX_CONTEXT_PROFILE_MASK_ARB
 0x9126

	)

181 #i‚de‡
GLX_ARB_¸óã_c⁄ãxt_robu°√ss


182 
	#GLX_ARB_¸óã_c⁄ãxt_robu°√ss
 1

	)

183 
	#GLX_CONTEXT_ROBUST_ACCESS_BIT_ARB
 0x00000004

	)

184 
	#GLX_LOSE_CONTEXT_ON_RESET_ARB
 0x8252

	)

185 
	#GLX_CONTEXT_RESET_NOTIFICATION_STRATEGY_ARB
 0x8256

	)

186 
	#GLX_NO_RESET_NOTIFICATION_ARB
 0x8261

	)

189 #i‚de‡
GLX_ARB_fbc⁄fig_Êﬂt


190 
	#GLX_ARB_fbc⁄fig_Êﬂt
 1

	)

191 
	#GLX_RGBA_FLOAT_TYPE_ARB
 0x20B9

	)

192 
	#GLX_RGBA_FLOAT_BIT_ARB
 0x00000004

	)

195 #i‚de‡
GLX_ARB_‰amebuf„r_sRGB


196 
	#GLX_ARB_‰amebuf„r_sRGB
 1

	)

197 
	#GLX_FRAMEBUFFER_SRGB_CAPABLE_ARB
 0x20B2

	)

200 #i‚de‡
GLX_ARB_gë_¥oc_addªss


201 
	#GLX_ARB_gë_¥oc_addªss
 1

	)

202 
__GLXextFuncPå
 ( *
	tPFNGLXGETPROCADDRESSARBPROC
Ë(c⁄° 
	tGLubyã
 *
	t¥ocName
);

203 #ifde‡
GLX_GLXEXT_PROTOTYPES


204 
__GLXextFuncPå
 
glXGëProcAddªssARB
 (c⁄° 
GLubyã
 *
¥ocName
);

208 #i‚de‡
GLX_ARB_mu…ißm∂e


209 
	#GLX_ARB_mu…ißm∂e
 1

	)

210 
	#GLX_SAMPLE_BUFFERS_ARB
 100000

	)

211 
	#GLX_SAMPLES_ARB
 100001

	)

214 #i‚de‡
GLX_ARB_robu°√ss_≠∂iˇti⁄_isﬁ©i⁄


215 
	#GLX_ARB_robu°√ss_≠∂iˇti⁄_isﬁ©i⁄
 1

	)

216 
	#GLX_CONTEXT_RESET_ISOLATION_BIT_ARB
 0x00000008

	)

219 #i‚de‡
GLX_ARB_robu°√ss_sh¨e_group_isﬁ©i⁄


220 
	#GLX_ARB_robu°√ss_sh¨e_group_isﬁ©i⁄
 1

	)

223 #i‚de‡
GLX_ARB_vîãx_buf„r_obje˘


224 
	#GLX_ARB_vîãx_buf„r_obje˘
 1

	)

225 
	#GLX_CONTEXT_ALLOW_BUFFER_BYTE_ORDER_MISMATCH_ARB
 0x2095

	)

228 #i‚de‡
GLX_3DFX_mu…ißm∂e


229 
	#GLX_3DFX_mu…ißm∂e
 1

	)

230 
	#GLX_SAMPLE_BUFFERS_3DFX
 0x8050

	)

231 
	#GLX_SAMPLES_3DFX
 0x8051

	)

234 #i‚de‡
GLX_AMD_gpu_assocüti⁄


235 
	#GLX_AMD_gpu_assocüti⁄
 1

	)

236 
	#GLX_GPU_VENDOR_AMD
 0x1F00

	)

237 
	#GLX_GPU_RENDERER_STRING_AMD
 0x1F01

	)

238 
	#GLX_GPU_OPENGL_VERSION_STRING_AMD
 0x1F02

	)

239 
	#GLX_GPU_FASTEST_TARGET_GPUS_AMD
 0x21A2

	)

240 
	#GLX_GPU_RAM_AMD
 0x21A3

	)

241 
	#GLX_GPU_CLOCK_AMD
 0x21A4

	)

242 
	#GLX_GPU_NUM_PIPES_AMD
 0x21A5

	)

243 
	#GLX_GPU_NUM_SIMD_AMD
 0x21A6

	)

244 
	#GLX_GPU_NUM_RB_AMD
 0x21A7

	)

245 
	#GLX_GPU_NUM_SPI_AMD
 0x21A8

	)

248 #i‚de‡
GLX_EXT_buf„r_age


249 
	#GLX_EXT_buf„r_age
 1

	)

250 
	#GLX_BACK_BUFFER_AGE_EXT
 0x20F4

	)

253 #i‚de‡
GLX_EXT_¸óã_c⁄ãxt_es2_¥ofûe


254 
	#GLX_EXT_¸óã_c⁄ãxt_es2_¥ofûe
 1

	)

255 
	#GLX_CONTEXT_ES2_PROFILE_BIT_EXT
 0x00000004

	)

258 #i‚de‡
GLX_EXT_¸óã_c⁄ãxt_es_¥ofûe


259 
	#GLX_EXT_¸óã_c⁄ãxt_es_¥ofûe
 1

	)

260 
	#GLX_CONTEXT_ES_PROFILE_BIT_EXT
 0x00000004

	)

263 #i‚de‡
GLX_EXT_fbc⁄fig_∑cked_Êﬂt


264 
	#GLX_EXT_fbc⁄fig_∑cked_Êﬂt
 1

	)

265 
	#GLX_RGBA_UNSIGNED_FLOAT_TYPE_EXT
 0x20B1

	)

266 
	#GLX_RGBA_UNSIGNED_FLOAT_BIT_EXT
 0x00000008

	)

269 #i‚de‡
GLX_EXT_‰amebuf„r_sRGB


270 
	#GLX_EXT_‰amebuf„r_sRGB
 1

	)

271 
	#GLX_FRAMEBUFFER_SRGB_CAPABLE_EXT
 0x20B2

	)

274 #i‚de‡
GLX_EXT_imp‹t_c⁄ãxt


275 
	#GLX_EXT_imp‹t_c⁄ãxt
 1

	)

276 
	#GLX_SHARE_CONTEXT_EXT
 0x800A

	)

277 
	#GLX_VISUAL_ID_EXT
 0x800B

	)

278 
	#GLX_SCREEN_EXT
 0x800C

	)

279 
Di•œy
 *–*
	tPFNGLXGETCURRENTDISPLAYEXTPROC
) ();

280 –*
PFNGLXQUERYCONTEXTINFOEXTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXC⁄ãxt
 
	tc⁄ãxt
, 
	t©åibuã
, *
	tvÆue
);

281 
GLXC⁄ãxtID
 ( *
	tPFNGLXGETCONTEXTIDEXTPROC
Ë(c⁄° 
	tGLXC⁄ãxt
 
	tc⁄ãxt
);

282 
GLXC⁄ãxt
 ( *
	tPFNGLXIMPORTCONTEXTEXTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXC⁄ãxtID
 
	tc⁄ãxtID
);

283 –*
PFNGLXFREECONTEXTEXTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXC⁄ãxt
 
	tc⁄ãxt
);

284 #ifde‡
GLX_GLXEXT_PROTOTYPES


285 
Di•œy
 *
glXGëCuºítDi•œyEXT
 ();

286 
glXQuîyC⁄ãxtInfoEXT
 (
Di•œy
 *
dpy
, 
GLXC⁄ãxt
 
c⁄ãxt
, 
©åibuã
, *
vÆue
);

287 
GLXC⁄ãxtID
 
glXGëC⁄ãxtIDEXT
 (c⁄° 
GLXC⁄ãxt
 
c⁄ãxt
);

288 
GLXC⁄ãxt
 
glXImp‹tC⁄ãxtEXT
 (
Di•œy
 *
dpy
, 
GLXC⁄ãxtID
 
c⁄ãxtID
);

289 
glXFªeC⁄ãxtEXT
 (
Di•œy
 *
dpy
, 
GLXC⁄ãxt
 
c⁄ãxt
);

293 #i‚de‡
GLX_EXT_sw≠_c⁄åﬁ


294 
	#GLX_EXT_sw≠_c⁄åﬁ
 1

	)

295 
	#GLX_SWAP_INTERVAL_EXT
 0x20F1

	)

296 
	#GLX_MAX_SWAP_INTERVAL_EXT
 0x20F2

	)

297 –*
PFNGLXSWAPINTERVALEXTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	töãrvÆ
);

298 #ifde‡
GLX_GLXEXT_PROTOTYPES


299 
glXSw≠I¡îvÆEXT
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
öãrvÆ
);

303 #i‚de‡
GLX_EXT_sw≠_c⁄åﬁ_ã¨


304 
	#GLX_EXT_sw≠_c⁄åﬁ_ã¨
 1

	)

305 
	#GLX_LATE_SWAPS_TEAR_EXT
 0x20F3

	)

308 #i‚de‡
GLX_EXT_ãxtuª_‰om_pixm≠


309 
	#GLX_EXT_ãxtuª_‰om_pixm≠
 1

	)

310 
	#GLX_TEXTURE_1D_BIT_EXT
 0x00000001

	)

311 
	#GLX_TEXTURE_2D_BIT_EXT
 0x00000002

	)

312 
	#GLX_TEXTURE_RECTANGLE_BIT_EXT
 0x00000004

	)

313 
	#GLX_BIND_TO_TEXTURE_RGB_EXT
 0x20D0

	)

314 
	#GLX_BIND_TO_TEXTURE_RGBA_EXT
 0x20D1

	)

315 
	#GLX_BIND_TO_MIPMAP_TEXTURE_EXT
 0x20D2

	)

316 
	#GLX_BIND_TO_TEXTURE_TARGETS_EXT
 0x20D3

	)

317 
	#GLX_Y_INVERTED_EXT
 0x20D4

	)

318 
	#GLX_TEXTURE_FORMAT_EXT
 0x20D5

	)

319 
	#GLX_TEXTURE_TARGET_EXT
 0x20D6

	)

320 
	#GLX_MIPMAP_TEXTURE_EXT
 0x20D7

	)

321 
	#GLX_TEXTURE_FORMAT_NONE_EXT
 0x20D8

	)

322 
	#GLX_TEXTURE_FORMAT_RGB_EXT
 0x20D9

	)

323 
	#GLX_TEXTURE_FORMAT_RGBA_EXT
 0x20DA

	)

324 
	#GLX_TEXTURE_1D_EXT
 0x20DB

	)

325 
	#GLX_TEXTURE_2D_EXT
 0x20DC

	)

326 
	#GLX_TEXTURE_RECTANGLE_EXT
 0x20DD

	)

327 
	#GLX_FRONT_LEFT_EXT
 0x20DE

	)

328 
	#GLX_FRONT_RIGHT_EXT
 0x20DF

	)

329 
	#GLX_BACK_LEFT_EXT
 0x20E0

	)

330 
	#GLX_BACK_RIGHT_EXT
 0x20E1

	)

331 
	#GLX_FRONT_EXT
 0x20DE

	)

332 
	#GLX_BACK_EXT
 0x20E0

	)

333 
	#GLX_AUX0_EXT
 0x20E2

	)

334 
	#GLX_AUX1_EXT
 0x20E3

	)

335 
	#GLX_AUX2_EXT
 0x20E4

	)

336 
	#GLX_AUX3_EXT
 0x20E5

	)

337 
	#GLX_AUX4_EXT
 0x20E6

	)

338 
	#GLX_AUX5_EXT
 0x20E7

	)

339 
	#GLX_AUX6_EXT
 0x20E8

	)

340 
	#GLX_AUX7_EXT
 0x20E9

	)

341 
	#GLX_AUX8_EXT
 0x20EA

	)

342 
	#GLX_AUX9_EXT
 0x20EB

	)

343 –*
PFNGLXBINDTEXIMAGEEXTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	tbuf„r
, c⁄° *
	t©åib_li°
);

344 –*
PFNGLXRELEASETEXIMAGEEXTPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	tbuf„r
);

345 #ifde‡
GLX_GLXEXT_PROTOTYPES


346 
glXBödTexImageEXT
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
buf„r
, c⁄° *
©åib_li°
);

347 
glXRñó£TexImageEXT
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
buf„r
);

351 #i‚de‡
GLX_EXT_visuÆ_öfo


352 
	#GLX_EXT_visuÆ_öfo
 1

	)

353 
	#GLX_X_VISUAL_TYPE_EXT
 0x22

	)

354 
	#GLX_TRANSPARENT_TYPE_EXT
 0x23

	)

355 
	#GLX_TRANSPARENT_INDEX_VALUE_EXT
 0x24

	)

356 
	#GLX_TRANSPARENT_RED_VALUE_EXT
 0x25

	)

357 
	#GLX_TRANSPARENT_GREEN_VALUE_EXT
 0x26

	)

358 
	#GLX_TRANSPARENT_BLUE_VALUE_EXT
 0x27

	)

359 
	#GLX_TRANSPARENT_ALPHA_VALUE_EXT
 0x28

	)

360 
	#GLX_NONE_EXT
 0x8000

	)

361 
	#GLX_TRUE_COLOR_EXT
 0x8002

	)

362 
	#GLX_DIRECT_COLOR_EXT
 0x8003

	)

363 
	#GLX_PSEUDO_COLOR_EXT
 0x8004

	)

364 
	#GLX_STATIC_COLOR_EXT
 0x8005

	)

365 
	#GLX_GRAY_SCALE_EXT
 0x8006

	)

366 
	#GLX_STATIC_GRAY_EXT
 0x8007

	)

367 
	#GLX_TRANSPARENT_RGB_EXT
 0x8008

	)

368 
	#GLX_TRANSPARENT_INDEX_EXT
 0x8009

	)

371 #i‚de‡
GLX_EXT_visuÆ_øtög


372 
	#GLX_EXT_visuÆ_øtög
 1

	)

373 
	#GLX_VISUAL_CAVEAT_EXT
 0x20

	)

374 
	#GLX_SLOW_VISUAL_EXT
 0x8001

	)

375 
	#GLX_NON_CONFORMANT_VISUAL_EXT
 0x800D

	)

378 #i‚de‡
GLX_INTEL_sw≠_evít


379 
	#GLX_INTEL_sw≠_evít
 1

	)

380 
	#GLX_BUFFER_SWAP_COMPLETE_INTEL_MASK
 0x04000000

	)

381 
	#GLX_EXCHANGE_COMPLETE_INTEL
 0x8180

	)

382 
	#GLX_COPY_COMPLETE_INTEL
 0x8181

	)

383 
	#GLX_FLIP_COMPLETE_INTEL
 0x8182

	)

386 #i‚de‡
GLX_MESA_agp_off£t


387 
	#GLX_MESA_agp_off£t
 1

	)

388 –*
	tPFNGLXGETAGPOFFSETMESAPROC
Ë(c⁄° *
	tpoöãr
);

389 #ifde‡
GLX_GLXEXT_PROTOTYPES


390 
glXGëAGPOff£tMESA
 (c⁄° *
poöãr
);

394 #i‚de‡
GLX_MESA_c›y_sub_buf„r


395 
	#GLX_MESA_c›y_sub_buf„r
 1

	)

396 –*
PFNGLXCOPYSUBBUFFERMESAPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	tx
, 
	ty
, 
	twidth
, 
	theight
);

397 #ifde‡
GLX_GLXEXT_PROTOTYPES


398 
glXC›ySubBuf„rMESA
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
x
, 
y
, 
width
, 
height
);

402 #i‚de‡
GLX_MESA_pixm≠_cﬁ‹m≠


403 
	#GLX_MESA_pixm≠_cﬁ‹m≠
 1

	)

404 
GLXPixm≠
 ( *
	tPFNGLXCREATEGLXPIXMAPMESAPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tXVisuÆInfo
 *
	tvisuÆ
, 
	tPixm≠
 
	tpixm≠
, 
	tCﬁ‹m≠
 
	tcm≠
);

405 #ifde‡
GLX_GLXEXT_PROTOTYPES


406 
GLXPixm≠
 
glXCª©eGLXPixm≠MESA
 (
Di•œy
 *
dpy
, 
XVisuÆInfo
 *
visuÆ
, 
Pixm≠
 
pixm≠
, 
Cﬁ‹m≠
 
cm≠
);

410 #i‚de‡
GLX_MESA_ªÀa£_buf„rs


411 
	#GLX_MESA_ªÀa£_buf„rs
 1

	)

412 
Boﬁ
 ( *
	tPFNGLXRELEASEBUFFERSMESAPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
);

413 #ifde‡
GLX_GLXEXT_PROTOTYPES


414 
Boﬁ
 
glXRñó£Buf„rsMESA
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
);

418 #i‚de‡
GLX_MESA_£t_3dfx_mode


419 
	#GLX_MESA_£t_3dfx_mode
 1

	)

420 
	#GLX_3DFX_WINDOW_MODE_MESA
 0x1

	)

421 
	#GLX_3DFX_FULLSCREEN_MODE_MESA
 0x2

	)

422 
Boﬁ
 ( *
	tPFNGLXSET3DFXMODEMESAPROC
Ë(
	tmode
);

423 #ifde‡
GLX_GLXEXT_PROTOTYPES


424 
Boﬁ
 
glXSë3DfxModeMESA
 (
mode
);

428 #i‚de‡
GLX_NV_c›y_image


429 
	#GLX_NV_c›y_image
 1

	)

430 –*
PFNGLXCOPYIMAGESUBDATANVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXC⁄ãxt
 
	t§cCtx
, 
	tGLuöt
 
	t§cName
, 
	tGLíum
 
	t§cT¨gë
, 
	tGLöt
 
	t§cLevñ
, GLöà
	t§cX
, GLöà
	t§cY
, GLöà
	t§cZ
, GLXC⁄ãxà
	td°Ctx
, GLuöà
	td°Name
, GLíum 
	td°T¨gë
, GLöà
	td°Levñ
, GLöà
	td°X
, GLöà
	td°Y
, GLöà
	td°Z
, 
	tGLsizei
 
	twidth
, GLsizeò
	theight
, GLsizeò
	tdïth
);

431 #ifde‡
GLX_GLXEXT_PROTOTYPES


432 
glXC›yImageSubD©aNV
 (
Di•œy
 *
dpy
, 
GLXC⁄ãxt
 
§cCtx
, 
GLuöt
 
§cName
, 
GLíum
 
§cT¨gë
, 
GLöt
 
§cLevñ
, GLöà
§cX
, GLöà
§cY
, GLöà
§cZ
, GLXC⁄ãxà
d°Ctx
, GLuöà
d°Name
, GLíum 
d°T¨gë
, GLöà
d°Levñ
, GLöà
d°X
, GLöà
d°Y
, GLöà
d°Z
, 
GLsizei
 
width
, GLsizeò
height
, GLsizeò
dïth
);

436 #i‚de‡
GLX_NV_dñay_bef‹e_sw≠


437 
	#GLX_NV_dñay_bef‹e_sw≠
 1

	)

438 
Boﬁ
 ( *
	tPFNGLXDELAYBEFORESWAPNVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	tGLÊﬂt
 
	t£c⁄ds
);

439 #ifde‡
GLX_GLXEXT_PROTOTYPES


440 
Boﬁ
 
glXDñayBef‹eSw≠NV
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
GLÊﬂt
 
£c⁄ds
);

444 #i‚de‡
GLX_NV_Êﬂt_buf„r


445 
	#GLX_NV_Êﬂt_buf„r
 1

	)

446 
	#GLX_FLOAT_COMPONENTS_NV
 0x20B0

	)

449 #i‚de‡
GLX_NV_mu…ißm∂e_covîage


450 
	#GLX_NV_mu…ißm∂e_covîage
 1

	)

451 
	#GLX_COVERAGE_SAMPLES_NV
 100001

	)

452 
	#GLX_COLOR_SAMPLES_NV
 0x20B3

	)

455 #i‚de‡
GLX_NV_¥e£¡_video


456 
	#GLX_NV_¥e£¡_video
 1

	)

457 
	#GLX_NUM_VIDEO_SLOTS_NV
 0x20F0

	)

458 *–*
	tPFNGLXENUMERATEVIDEODEVICESNVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, *
	t√Àmíts
);

459 –*
PFNGLXBINDVIDEODEVICENVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tvideo_¶Ÿ
, 
	tvideo_devi˚
, c⁄° *
	t©åib_li°
);

460 #ifde‡
GLX_GLXEXT_PROTOTYPES


461 *
glXEnumî©eVideoDevi˚sNV
 (
Di•œy
 *
dpy
, 
s¸ìn
, *
√Àmíts
);

462 
glXBödVideoDevi˚NV
 (
Di•œy
 *
dpy
, 
video_¶Ÿ
, 
video_devi˚
, c⁄° *
©åib_li°
);

466 #i‚de‡
GLX_NV_sw≠_group


467 
	#GLX_NV_sw≠_group
 1

	)

468 
Boﬁ
 ( *
	tPFNGLXJOINSWAPGROUPNVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	tGLuöt
 
	tgroup
);

469 
Boﬁ
 ( *
	tPFNGLXBINDSWAPBARRIERNVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLuöt
 
	tgroup
, GLuöà
	tb¨rõr
);

470 
Boﬁ
 ( *
	tPFNGLXQUERYSWAPGROUPNVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	tGLuöt
 *
	tgroup
, GLuöà*
	tb¨rõr
);

471 
Boﬁ
 ( *
	tPFNGLXQUERYMAXSWAPGROUPSNVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, 
	tGLuöt
 *
	tmaxGroups
, GLuöà*
	tmaxB¨rõrs
);

472 
Boﬁ
 ( *
	tPFNGLXQUERYFRAMECOUNTNVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, 
	tGLuöt
 *
	tcou¡
);

473 
Boﬁ
 ( *
	tPFNGLXRESETFRAMECOUNTNVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
);

474 #ifde‡
GLX_GLXEXT_PROTOTYPES


475 
Boﬁ
 
glXJoöSw≠GroupNV
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
GLuöt
 
group
);

476 
Boﬁ
 
glXBödSw≠B¨rõrNV
 (
Di•œy
 *
dpy
, 
GLuöt
 
group
, GLuöà
b¨rõr
);

477 
Boﬁ
 
glXQuîySw≠GroupNV
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
GLuöt
 *
group
, GLuöà*
b¨rõr
);

478 
Boﬁ
 
glXQuîyMaxSw≠GroupsNV
 (
Di•œy
 *
dpy
, 
s¸ìn
, 
GLuöt
 *
maxGroups
, GLuöà*
maxB¨rõrs
);

479 
Boﬁ
 
glXQuîyFømeCou¡NV
 (
Di•œy
 *
dpy
, 
s¸ìn
, 
GLuöt
 *
cou¡
);

480 
Boﬁ
 
glXRe£tFømeCou¡NV
 (
Di•œy
 *
dpy
, 
s¸ìn
);

484 #i‚de‡
GLX_NV_video_ˇ±uª


485 
	#GLX_NV_video_ˇ±uª
 1

	)

486 
XID
 
	tGLXVideoC≠tuªDevi˚NV
;

487 
	#GLX_DEVICE_ID_NV
 0x20CD

	)

488 
	#GLX_UNIQUE_ID_NV
 0x20CE

	)

489 
	#GLX_NUM_VIDEO_CAPTURE_SLOTS_NV
 0x20CF

	)

490 –*
PFNGLXBINDVIDEOCAPTUREDEVICENVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tvideo_ˇ±uª_¶Ÿ
, 
	tGLXVideoC≠tuªDevi˚NV
 
	tdevi˚
);

491 
GLXVideoC≠tuªDevi˚NV
 *–*
	tPFNGLXENUMERATEVIDEOCAPTUREDEVICESNVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, *
	t√Àmíts
);

492 –*
PFNGLXLOCKVIDEOCAPTUREDEVICENVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXVideoC≠tuªDevi˚NV
 
	tdevi˚
);

493 –*
PFNGLXQUERYVIDEOCAPTUREDEVICENVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXVideoC≠tuªDevi˚NV
 
	tdevi˚
, 
	t©åibuã
, *
	tvÆue
);

494 –*
PFNGLXRELEASEVIDEOCAPTUREDEVICENVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXVideoC≠tuªDevi˚NV
 
	tdevi˚
);

495 #ifde‡
GLX_GLXEXT_PROTOTYPES


496 
glXBödVideoC≠tuªDevi˚NV
 (
Di•œy
 *
dpy
, 
video_ˇ±uª_¶Ÿ
, 
GLXVideoC≠tuªDevi˚NV
 
devi˚
);

497 
GLXVideoC≠tuªDevi˚NV
 *
glXEnumî©eVideoC≠tuªDevi˚sNV
 (
Di•œy
 *
dpy
, 
s¸ìn
, *
√Àmíts
);

498 
glXLockVideoC≠tuªDevi˚NV
 (
Di•œy
 *
dpy
, 
GLXVideoC≠tuªDevi˚NV
 
devi˚
);

499 
glXQuîyVideoC≠tuªDevi˚NV
 (
Di•œy
 *
dpy
, 
GLXVideoC≠tuªDevi˚NV
 
devi˚
, 
©åibuã
, *
vÆue
);

500 
glXRñó£VideoC≠tuªDevi˚NV
 (
Di•œy
 *
dpy
, 
GLXVideoC≠tuªDevi˚NV
 
devi˚
);

504 #i‚de‡
GLX_NV_video_ouçut


505 
	#GLX_NV_video_ouçut
 1

	)

506 
	tGLXVideoDevi˚NV
;

507 
	#GLX_VIDEO_OUT_COLOR_NV
 0x20C3

	)

508 
	#GLX_VIDEO_OUT_ALPHA_NV
 0x20C4

	)

509 
	#GLX_VIDEO_OUT_DEPTH_NV
 0x20C5

	)

510 
	#GLX_VIDEO_OUT_COLOR_AND_ALPHA_NV
 0x20C6

	)

511 
	#GLX_VIDEO_OUT_COLOR_AND_DEPTH_NV
 0x20C7

	)

512 
	#GLX_VIDEO_OUT_FRAME_NV
 0x20C8

	)

513 
	#GLX_VIDEO_OUT_FIELD_1_NV
 0x20C9

	)

514 
	#GLX_VIDEO_OUT_FIELD_2_NV
 0x20CA

	)

515 
	#GLX_VIDEO_OUT_STACKED_FIELDS_1_2_NV
 0x20CB

	)

516 
	#GLX_VIDEO_OUT_STACKED_FIELDS_2_1_NV
 0x20CC

	)

517 –*
PFNGLXGETVIDEODEVICENVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, 
	tnumVideoDevi˚s
, 
	tGLXVideoDevi˚NV
 *
	tpVideoDevi˚
);

518 –*
PFNGLXRELEASEVIDEODEVICENVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, 
	tGLXVideoDevi˚NV
 
	tVideoDevi˚
);

519 –*
PFNGLXBINDVIDEOIMAGENVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXVideoDevi˚NV
 
	tVideoDevi˚
, 
	tGLXPbuf„r
 
	tpbuf
, 
	tiVideoBuf„r
);

520 –*
PFNGLXRELEASEVIDEOIMAGENVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXPbuf„r
 
	tpbuf
);

521 –*
PFNGLXSENDPBUFFERTOVIDEONVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXPbuf„r
 
	tpbuf
, 
	tiBuf„rTy≥
, *
	tpulCou¡îPbuf„r
, 
	tGLboﬁón
 
	tbBlock
);

522 –*
PFNGLXGETVIDEOINFONVPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, 
	tGLXVideoDevi˚NV
 
	tVideoDevi˚
, *
	tpulCou¡îOuçutPbuf„r
, *
	tpulCou¡îOuçutVideo
);

523 #ifde‡
GLX_GLXEXT_PROTOTYPES


524 
glXGëVideoDevi˚NV
 (
Di•œy
 *
dpy
, 
s¸ìn
, 
numVideoDevi˚s
, 
GLXVideoDevi˚NV
 *
pVideoDevi˚
);

525 
glXRñó£VideoDevi˚NV
 (
Di•œy
 *
dpy
, 
s¸ìn
, 
GLXVideoDevi˚NV
 
VideoDevi˚
);

526 
glXBödVideoImageNV
 (
Di•œy
 *
dpy
, 
GLXVideoDevi˚NV
 
VideoDevi˚
, 
GLXPbuf„r
 
pbuf
, 
iVideoBuf„r
);

527 
glXRñó£VideoImageNV
 (
Di•œy
 *
dpy
, 
GLXPbuf„r
 
pbuf
);

528 
glXSídPbuf„rToVideoNV
 (
Di•œy
 *
dpy
, 
GLXPbuf„r
 
pbuf
, 
iBuf„rTy≥
, *
pulCou¡îPbuf„r
, 
GLboﬁón
 
bBlock
);

529 
glXGëVideoInfoNV
 (
Di•œy
 *
dpy
, 
s¸ìn
, 
GLXVideoDevi˚NV
 
VideoDevi˚
, *
pulCou¡îOuçutPbuf„r
, *
pulCou¡îOuçutVideo
);

533 #i‚de‡
GLX_OML_sw≠_mëhod


534 
	#GLX_OML_sw≠_mëhod
 1

	)

535 
	#GLX_SWAP_METHOD_OML
 0x8060

	)

536 
	#GLX_SWAP_EXCHANGE_OML
 0x8061

	)

537 
	#GLX_SWAP_COPY_OML
 0x8062

	)

538 
	#GLX_SWAP_UNDEFINED_OML
 0x8063

	)

541 #i‚de‡
GLX_OML_sync_c⁄åﬁ


542 
	#GLX_OML_sync_c⁄åﬁ
 1

	)

543 #i‚de‡
GLEXT_64_TYPES_DEFINED


545 
	#GLEXT_64_TYPES_DEFINED


	)

548 #i‡
deföed
(
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

549 
	~<öây≥s.h
>

550 #ñi‡
deföed
(
__sun__
Ë|| deföed(
__digôÆ__
)

551 
	~<öây≥s.h
>

552 #i‡
deföed
(
__STDC__
)

553 #i‡
deföed
(
__¨ch64__
Ë|| deföed(
_LP64
)

554 
	töt64_t
;

555 
	tuöt64_t
;

557 
	töt64_t
;

558 
	tuöt64_t
;

561 #ñi‡
deföed
–
__VMS
 ) || deföed(
__sgi
)

562 
	~<öây≥s.h
>

563 #ñi‡
deföed
(
__SCO__
Ë|| deföed(
__USLC__
)

564 
	~<°döt.h
>

565 #ñi‡
deföed
(
__UNIXOS2__
Ë|| deföed(
__SOL64__
)

566 
	töt32_t
;

567 
	töt64_t
;

568 
	tuöt64_t
;

569 #ñi‡
deföed
(
_WIN32
Ë&& deföed(
__GNUC__
)

570 
	~<°döt.h
>

571 #ñi‡
deföed
(
_WIN32
)

572 
__öt32
 
	töt32_t
;

573 
__öt64
 
	töt64_t
;

574 
	t__öt64
 
	tuöt64_t
;

577 
	~<öây≥s.h
>

580 
Boﬁ
 ( *
	tPFNGLXGETSYNCVALUESOMLPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	töt64_t
 *
	tu°
, i¡64_à*
	tmsc
, i¡64_à*
	tsbc
);

581 
Boﬁ
 ( *
	tPFNGLXGETMSCRATEOMLPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	töt32_t
 *
	tnumî©‹
, i¡32_à*
	tdíomö©‹
);

582 
öt64_t
 ( *
	tPFNGLXSWAPBUFFERSMSCOMLPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	töt64_t
 
	tèrgë_msc
, i¡64_à
	tdivis‹
, i¡64_à
	tªmaödî
);

583 
Boﬁ
 ( *
	tPFNGLXWAITFORMSCOMLPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	töt64_t
 
	tèrgë_msc
, i¡64_à
	tdivis‹
, i¡64_à
	tªmaödî
, i¡64_à*
	tu°
, i¡64_à*
	tmsc
, i¡64_à*
	tsbc
);

584 
Boﬁ
 ( *
	tPFNGLXWAITFORSBCOMLPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	töt64_t
 
	tèrgë_sbc
, i¡64_à*
	tu°
, i¡64_à*
	tmsc
, i¡64_à*
	tsbc
);

585 #ifde‡
GLX_GLXEXT_PROTOTYPES


586 
Boﬁ
 
glXGëSyncVÆuesOML
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
öt64_t
 *
u°
, i¡64_à*
msc
, i¡64_à*
sbc
);

587 
Boﬁ
 
glXGëMscR©eOML
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
öt32_t
 *
numî©‹
, i¡32_à*
díomö©‹
);

588 
öt64_t
 
glXSw≠Buf„rsMscOML
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, i¡64_à
èrgë_msc
, i¡64_à
divis‹
, i¡64_à
ªmaödî
);

589 
Boﬁ
 
glXWaôF‹MscOML
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
öt64_t
 
èrgë_msc
, i¡64_à
divis‹
, i¡64_à
ªmaödî
, i¡64_à*
u°
, i¡64_à*
msc
, i¡64_à*
sbc
);

590 
Boﬁ
 
glXWaôF‹SbcOML
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
öt64_t
 
èrgë_sbc
, i¡64_à*
u°
, i¡64_à*
msc
, i¡64_à*
sbc
);

594 #i‚de‡
GLX_SGIS_bÀnded_ovîœy


595 
	#GLX_SGIS_bÀnded_ovîœy
 1

	)

596 
	#GLX_BLENDED_RGBA_SGIS
 0x8025

	)

599 #i‚de‡
GLX_SGIS_mu…ißm∂e


600 
	#GLX_SGIS_mu…ißm∂e
 1

	)

601 
	#GLX_SAMPLE_BUFFERS_SGIS
 100000

	)

602 
	#GLX_SAMPLES_SGIS
 100001

	)

605 #i‚de‡
GLX_SGIS_sh¨ed_mu…ißm∂e


606 
	#GLX_SGIS_sh¨ed_mu…ißm∂e
 1

	)

607 
	#GLX_MULTISAMPLE_SUB_RECT_WIDTH_SGIS
 0x8026

	)

608 
	#GLX_MULTISAMPLE_SUB_RECT_HEIGHT_SGIS
 0x8027

	)

611 #i‚de‡
GLX_SGIX_dmbuf„r


612 
	#GLX_SGIX_dmbuf„r
 1

	)

613 
XID
 
	tGLXPbuf„rSGIX
;

614 #ifde‡
_DM_BUFFER_H_


615 
	#GLX_DIGITAL_MEDIA_PBUFFER_SGIX
 0x8024

	)

616 
Boﬁ
 ( *
	tPFNGLXASSOCIATEDMPBUFFERSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXPbuf„rSGIX
 
	tpbuf„r
, 
	tDM∑øms
 *
	t∑øms
, 
	tDMbuf„r
 
	tdmbuf„r
);

617 #ifde‡
GLX_GLXEXT_PROTOTYPES


618 
Boﬁ
 
glXAssocüãDMPbuf„rSGIX
 (
Di•œy
 *
dpy
, 
GLXPbuf„rSGIX
 
pbuf„r
, 
DM∑øms
 *
∑øms
, 
DMbuf„r
 
dmbuf„r
);

623 #i‚de‡
GLX_SGIX_fbc⁄fig


624 
	#GLX_SGIX_fbc⁄fig
 1

	)

625 
__GLXFBC⁄figRec
 *
	tGLXFBC⁄figSGIX
;

626 
	#GLX_WINDOW_BIT_SGIX
 0x00000001

	)

627 
	#GLX_PIXMAP_BIT_SGIX
 0x00000002

	)

628 
	#GLX_RGBA_BIT_SGIX
 0x00000001

	)

629 
	#GLX_COLOR_INDEX_BIT_SGIX
 0x00000002

	)

630 
	#GLX_DRAWABLE_TYPE_SGIX
 0x8010

	)

631 
	#GLX_RENDER_TYPE_SGIX
 0x8011

	)

632 
	#GLX_X_RENDERABLE_SGIX
 0x8012

	)

633 
	#GLX_FBCONFIG_ID_SGIX
 0x8013

	)

634 
	#GLX_RGBA_TYPE_SGIX
 0x8014

	)

635 
	#GLX_COLOR_INDEX_TYPE_SGIX
 0x8015

	)

636 –*
PFNGLXGETFBCONFIGATTRIBSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄figSGIX
 
	tc⁄fig
, 
	t©åibuã
, *
	tvÆue
);

637 
GLXFBC⁄figSGIX
 *–*
	tPFNGLXCHOOSEFBCONFIGSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, *
	t©åib_li°
, *
	t√Àmíts
);

638 
GLXPixm≠
 ( *
	tPFNGLXCREATEGLXPIXMAPWITHCONFIGSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄figSGIX
 
	tc⁄fig
, 
	tPixm≠
 
	tpixm≠
);

639 
GLXC⁄ãxt
 ( *
	tPFNGLXCREATECONTEXTWITHCONFIGSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄figSGIX
 
	tc⁄fig
, 
	tªndî_ty≥
, 
	tGLXC⁄ãxt
 
	tsh¨e_li°
, 
	tBoﬁ
 
	tdúe˘
);

640 
XVisuÆInfo
 *–*
	tPFNGLXGETVISUALFROMFBCONFIGSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄figSGIX
 
	tc⁄fig
);

641 
GLXFBC⁄figSGIX
 ( *
	tPFNGLXGETFBCONFIGFROMVISUALSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tXVisuÆInfo
 *
	tvis
);

642 #ifde‡
GLX_GLXEXT_PROTOTYPES


643 
glXGëFBC⁄figAâribSGIX
 (
Di•œy
 *
dpy
, 
GLXFBC⁄figSGIX
 
c⁄fig
, 
©åibuã
, *
vÆue
);

644 
GLXFBC⁄figSGIX
 *
glXChoo£FBC⁄figSGIX
 (
Di•œy
 *
dpy
, 
s¸ìn
, *
©åib_li°
, *
√Àmíts
);

645 
GLXPixm≠
 
glXCª©eGLXPixm≠WôhC⁄figSGIX
 (
Di•œy
 *
dpy
, 
GLXFBC⁄figSGIX
 
c⁄fig
, 
Pixm≠
 
pixm≠
);

646 
GLXC⁄ãxt
 
glXCª©eC⁄ãxtWôhC⁄figSGIX
 (
Di•œy
 *
dpy
, 
GLXFBC⁄figSGIX
 
c⁄fig
, 
ªndî_ty≥
, GLXC⁄ãxà
sh¨e_li°
, 
Boﬁ
 
dúe˘
);

647 
XVisuÆInfo
 *
glXGëVisuÆFromFBC⁄figSGIX
 (
Di•œy
 *
dpy
, 
GLXFBC⁄figSGIX
 
c⁄fig
);

648 
GLXFBC⁄figSGIX
 
glXGëFBC⁄figFromVisuÆSGIX
 (
Di•œy
 *
dpy
, 
XVisuÆInfo
 *
vis
);

652 #i‚de‡
GLX_SGIX_hy≥Ωùe


653 
	#GLX_SGIX_hy≥Ωùe
 1

	)

655 
pùeName
[80];

656 
√tw‹kId
;

657 } 
	tGLXHy≥ΩùeNëw‹kSGIX
;

659 
pùeName
[80];

660 
ch™√l
;

661 
∑πicù©i⁄Ty≥
;

662 
timeSli˚
;

663 } 
	tGLXHy≥ΩùeC⁄figSGIX
;

665 
pùeName
[80];

666 
§cXOrigö
, 
§cYOrigö
, 
§cWidth
, 
§cHeight
;

667 
de°XOrigö
, 
de°YOrigö
, 
de°Width
, 
de°Height
;

668 } 
	tGLXPùeRe˘
;

670 
pùeName
[80];

671 
XOrigö
, 
YOrigö
, 
maxHeight
, 
maxWidth
;

672 } 
	tGLXPùeRe˘Limôs
;

673 
	#GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX
 80

	)

674 
	#GLX_BAD_HYPERPIPE_CONFIG_SGIX
 91

	)

675 
	#GLX_BAD_HYPERPIPE_SGIX
 92

	)

676 
	#GLX_HYPERPIPE_DISPLAY_PIPE_SGIX
 0x00000001

	)

677 
	#GLX_HYPERPIPE_RENDER_PIPE_SGIX
 0x00000002

	)

678 
	#GLX_PIPE_RECT_SGIX
 0x00000001

	)

679 
	#GLX_PIPE_RECT_LIMITS_SGIX
 0x00000002

	)

680 
	#GLX_HYPERPIPE_STEREO_SGIX
 0x00000003

	)

681 
	#GLX_HYPERPIPE_PIXEL_AVERAGE_SGIX
 0x00000004

	)

682 
	#GLX_HYPERPIPE_ID_SGIX
 0x8030

	)

683 
GLXHy≥ΩùeNëw‹kSGIX
 *–*
	tPFNGLXQUERYHYPERPIPENETWORKSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, *
	t≈ùes
);

684 –*
PFNGLXHYPERPIPECONFIGSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	t√tw‹kId
, 
	t≈ùes
, 
	tGLXHy≥ΩùeC⁄figSGIX
 *
	tcfg
, *
	thpId
);

685 
GLXHy≥ΩùeC⁄figSGIX
 *–*
	tPFNGLXQUERYHYPERPIPECONFIGSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	thpId
, *
	t≈ùes
);

686 –*
PFNGLXDESTROYHYPERPIPECONFIGSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	thpId
);

687 –*
PFNGLXBINDHYPERPIPESGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	thpId
);

688 –*
PFNGLXQUERYHYPERPIPEBESTATTRIBSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ttimeSli˚
, 
	t©åib
, 
	tsize
, *
	t©åibLi°
, *
	tªtu∫AâribLi°
);

689 –*
PFNGLXHYPERPIPEATTRIBSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ttimeSli˚
, 
	t©åib
, 
	tsize
, *
	t©åibLi°
);

690 –*
PFNGLXQUERYHYPERPIPEATTRIBSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ttimeSli˚
, 
	t©åib
, 
	tsize
, *
	tªtu∫AâribLi°
);

691 #ifde‡
GLX_GLXEXT_PROTOTYPES


692 
GLXHy≥ΩùeNëw‹kSGIX
 *
glXQuîyHy≥ΩùeNëw‹kSGIX
 (
Di•œy
 *
dpy
, *
≈ùes
);

693 
glXHy≥ΩùeC⁄figSGIX
 (
Di•œy
 *
dpy
, 
√tw‹kId
, 
≈ùes
, 
GLXHy≥ΩùeC⁄figSGIX
 *
cfg
, *
hpId
);

694 
GLXHy≥ΩùeC⁄figSGIX
 *
glXQuîyHy≥ΩùeC⁄figSGIX
 (
Di•œy
 *
dpy
, 
hpId
, *
≈ùes
);

695 
glXDe°royHy≥ΩùeC⁄figSGIX
 (
Di•œy
 *
dpy
, 
hpId
);

696 
glXBödHy≥ΩùeSGIX
 (
Di•œy
 *
dpy
, 
hpId
);

697 
glXQuîyHy≥ΩùeBe°AâribSGIX
 (
Di•œy
 *
dpy
, 
timeSli˚
, 
©åib
, 
size
, *
©åibLi°
, *
ªtu∫AâribLi°
);

698 
glXHy≥ΩùeAâribSGIX
 (
Di•œy
 *
dpy
, 
timeSli˚
, 
©åib
, 
size
, *
©åibLi°
);

699 
glXQuîyHy≥ΩùeAâribSGIX
 (
Di•œy
 *
dpy
, 
timeSli˚
, 
©åib
, 
size
, *
ªtu∫AâribLi°
);

703 #i‚de‡
GLX_SGIX_pbuf„r


704 
	#GLX_SGIX_pbuf„r
 1

	)

705 
	#GLX_PBUFFER_BIT_SGIX
 0x00000004

	)

706 
	#GLX_BUFFER_CLOBBER_MASK_SGIX
 0x08000000

	)

707 
	#GLX_FRONT_LEFT_BUFFER_BIT_SGIX
 0x00000001

	)

708 
	#GLX_FRONT_RIGHT_BUFFER_BIT_SGIX
 0x00000002

	)

709 
	#GLX_BACK_LEFT_BUFFER_BIT_SGIX
 0x00000004

	)

710 
	#GLX_BACK_RIGHT_BUFFER_BIT_SGIX
 0x00000008

	)

711 
	#GLX_AUX_BUFFERS_BIT_SGIX
 0x00000010

	)

712 
	#GLX_DEPTH_BUFFER_BIT_SGIX
 0x00000020

	)

713 
	#GLX_STENCIL_BUFFER_BIT_SGIX
 0x00000040

	)

714 
	#GLX_ACCUM_BUFFER_BIT_SGIX
 0x00000080

	)

715 
	#GLX_SAMPLE_BUFFERS_BIT_SGIX
 0x00000100

	)

716 
	#GLX_MAX_PBUFFER_WIDTH_SGIX
 0x8016

	)

717 
	#GLX_MAX_PBUFFER_HEIGHT_SGIX
 0x8017

	)

718 
	#GLX_MAX_PBUFFER_PIXELS_SGIX
 0x8018

	)

719 
	#GLX_OPTIMAL_PBUFFER_WIDTH_SGIX
 0x8019

	)

720 
	#GLX_OPTIMAL_PBUFFER_HEIGHT_SGIX
 0x801A

	)

721 
	#GLX_PRESERVED_CONTENTS_SGIX
 0x801B

	)

722 
	#GLX_LARGEST_PBUFFER_SGIX
 0x801C

	)

723 
	#GLX_WIDTH_SGIX
 0x801D

	)

724 
	#GLX_HEIGHT_SGIX
 0x801E

	)

725 
	#GLX_EVENT_MASK_SGIX
 0x801F

	)

726 
	#GLX_DAMAGED_SGIX
 0x8020

	)

727 
	#GLX_SAVED_SGIX
 0x8021

	)

728 
	#GLX_WINDOW_SGIX
 0x8022

	)

729 
	#GLX_PBUFFER_SGIX
 0x8023

	)

730 
GLXPbuf„rSGIX
 ( *
	tPFNGLXCREATEGLXPBUFFERSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXFBC⁄figSGIX
 
	tc⁄fig
, 
	twidth
, 
	theight
, *
	t©åib_li°
);

731 –*
PFNGLXDESTROYGLXPBUFFERSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXPbuf„rSGIX
 
	tpbuf
);

732 –*
PFNGLXQUERYGLXPBUFFERSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXPbuf„rSGIX
 
	tpbuf
, 
	t©åibuã
, *
	tvÆue
);

733 –*
PFNGLXSELECTEVENTSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	tmask
);

734 –*
PFNGLXGETSELECTEDEVENTSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, *
	tmask
);

735 #ifde‡
GLX_GLXEXT_PROTOTYPES


736 
GLXPbuf„rSGIX
 
glXCª©eGLXPbuf„rSGIX
 (
Di•œy
 *
dpy
, 
GLXFBC⁄figSGIX
 
c⁄fig
, 
width
, 
height
, *
©åib_li°
);

737 
glXDe°royGLXPbuf„rSGIX
 (
Di•œy
 *
dpy
, 
GLXPbuf„rSGIX
 
pbuf
);

738 
glXQuîyGLXPbuf„rSGIX
 (
Di•œy
 *
dpy
, 
GLXPbuf„rSGIX
 
pbuf
, 
©åibuã
, *
vÆue
);

739 
glXSñe˘EvítSGIX
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
mask
);

740 
glXGëSñe˘edEvítSGIX
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, *
mask
);

744 #i‚de‡
GLX_SGIX_sw≠_b¨rõr


745 
	#GLX_SGIX_sw≠_b¨rõr
 1

	)

746 –*
PFNGLXBINDSWAPBARRIERSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, 
	tb¨rõr
);

747 
Boﬁ
 ( *
	tPFNGLXQUERYMAXSWAPBARRIERSSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	ts¸ìn
, *
	tmax
);

748 #ifde‡
GLX_GLXEXT_PROTOTYPES


749 
glXBödSw≠B¨rõrSGIX
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, 
b¨rõr
);

750 
Boﬁ
 
glXQuîyMaxSw≠B¨rõrsSGIX
 (
Di•œy
 *
dpy
, 
s¸ìn
, *
max
);

754 #i‚de‡
GLX_SGIX_sw≠_group


755 
	#GLX_SGIX_sw≠_group
 1

	)

756 –*
PFNGLXJOINSWAPGROUPSGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøwabÀ
, GLXDøwabÀ 
	tmembî
);

757 #ifde‡
GLX_GLXEXT_PROTOTYPES


758 
glXJoöSw≠GroupSGIX
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døwabÀ
, GLXDøwabÀ 
membî
);

762 #i‚de‡
GLX_SGIX_video_ªsize


763 
	#GLX_SGIX_video_ªsize
 1

	)

764 
	#GLX_SYNC_FRAME_SGIX
 0x00000000

	)

765 
	#GLX_SYNC_SWAP_SGIX
 0x00000001

	)

766 –*
PFNGLXBINDCHANNELTOWINDOWSGIXPROC
Ë(
	tDi•œy
 *
	tdi•œy
, 
	ts¸ìn
, 
	tch™√l
, 
	tWödow
 
	twödow
);

767 –*
PFNGLXCHANNELRECTSGIXPROC
Ë(
	tDi•œy
 *
	tdi•œy
, 
	ts¸ìn
, 
	tch™√l
, 
	tx
, 
	ty
, 
	tw
, 
	th
);

768 –*
PFNGLXQUERYCHANNELRECTSGIXPROC
Ë(
	tDi•œy
 *
	tdi•œy
, 
	ts¸ìn
, 
	tch™√l
, *
	tdx
, *
	tdy
, *
	tdw
, *
	tdh
);

769 –*
PFNGLXQUERYCHANNELDELTASSGIXPROC
Ë(
	tDi•œy
 *
	tdi•œy
, 
	ts¸ìn
, 
	tch™√l
, *
	tx
, *
	ty
, *
	tw
, *
	th
);

770 –*
PFNGLXCHANNELRECTSYNCSGIXPROC
Ë(
	tDi•œy
 *
	tdi•œy
, 
	ts¸ìn
, 
	tch™√l
, 
	tGLíum
 
	tsyn˘y≥
);

771 #ifde‡
GLX_GLXEXT_PROTOTYPES


772 
glXBödCh™√lToWödowSGIX
 (
Di•œy
 *
di•œy
, 
s¸ìn
, 
ch™√l
, 
Wödow
 
wödow
);

773 
glXCh™√lRe˘SGIX
 (
Di•œy
 *
di•œy
, 
s¸ìn
, 
ch™√l
, 
x
, 
y
, 
w
, 
h
);

774 
glXQuîyCh™√lRe˘SGIX
 (
Di•œy
 *
di•œy
, 
s¸ìn
, 
ch™√l
, *
dx
, *
dy
, *
dw
, *
dh
);

775 
glXQuîyCh™√lDñèsSGIX
 (
Di•œy
 *
di•œy
, 
s¸ìn
, 
ch™√l
, *
x
, *
y
, *
w
, *
h
);

776 
glXCh™√lRe˘SyncSGIX
 (
Di•œy
 *
di•œy
, 
s¸ìn
, 
ch™√l
, 
GLíum
 
syn˘y≥
);

780 #i‚de‡
GLX_SGIX_video_sour˚


781 
	#GLX_SGIX_video_sour˚
 1

	)

782 
XID
 
	tGLXVideoSour˚SGIX
;

783 #ifde‡
_VL_H


784 
GLXVideoSour˚SGIX
 ( *
	tPFNGLXCREATEGLXVIDEOSOURCESGIXPROC
Ë(
	tDi•œy
 *
	tdi•œy
, 
	ts¸ìn
, 
	tVLSîvî
 
	t£rvî
, 
	tVLP©h
 
	t∑th
, 
	tnodeCœss
, 
	tVLNode
 
	tdøöNode
);

785 –*
PFNGLXDESTROYGLXVIDEOSOURCESGIXPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXVideoSour˚SGIX
 
	tglxvideosour˚
);

786 #ifde‡
GLX_GLXEXT_PROTOTYPES


787 
GLXVideoSour˚SGIX
 
glXCª©eGLXVideoSour˚SGIX
 (
Di•œy
 *
di•œy
, 
s¸ìn
, 
VLSîvî
 
£rvî
, 
VLP©h
 
∑th
, 
nodeCœss
, 
VLNode
 
døöNode
);

788 
glXDe°royGLXVideoSour˚SGIX
 (
Di•œy
 *
dpy
, 
GLXVideoSour˚SGIX
 
glxvideosour˚
);

793 #i‚de‡
GLX_SGIX_visuÆ_£À˘_group


794 
	#GLX_SGIX_visuÆ_£À˘_group
 1

	)

795 
	#GLX_VISUAL_SELECT_GROUP_SGIX
 0x8028

	)

798 #i‚de‡
GLX_SGI_cushi⁄


799 
	#GLX_SGI_cushi⁄
 1

	)

800 –*
PFNGLXCUSHIONSGIPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tWödow
 
	twödow
, 
	tcushi⁄
);

801 #ifde‡
GLX_GLXEXT_PROTOTYPES


802 
glXCushi⁄SGI
 (
Di•œy
 *
dpy
, 
Wödow
 
wödow
, 
cushi⁄
);

806 #i‚de‡
GLX_SGI_make_cuºít_ªad


807 
	#GLX_SGI_make_cuºít_ªad
 1

	)

808 
Boﬁ
 ( *
	tPFNGLXMAKECURRENTREADSGIPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tGLXDøwabÀ
 
	tdøw
, GLXDøwabÀ 
	tªad
, 
	tGLXC⁄ãxt
 
	t˘x
);

809 
GLXDøwabÀ
 ( *
	tPFNGLXGETCURRENTREADDRAWABLESGIPROC
) ();

810 #ifde‡
GLX_GLXEXT_PROTOTYPES


811 
Boﬁ
 
glXMakeCuºítRódSGI
 (
Di•œy
 *
dpy
, 
GLXDøwabÀ
 
døw
, GLXDøwabÀ 
ªad
, 
GLXC⁄ãxt
 
˘x
);

812 
GLXDøwabÀ
 
glXGëCuºítRódDøwabÀSGI
 ();

816 #i‚de‡
GLX_SGI_sw≠_c⁄åﬁ


817 
	#GLX_SGI_sw≠_c⁄åﬁ
 1

	)

818 –*
PFNGLXSWAPINTERVALSGIPROC
Ë(
	töãrvÆ
);

819 #ifde‡
GLX_GLXEXT_PROTOTYPES


820 
glXSw≠I¡îvÆSGI
 (
öãrvÆ
);

824 #i‚de‡
GLX_SGI_video_sync


825 
	#GLX_SGI_video_sync
 1

	)

826 –*
PFNGLXGETVIDEOSYNCSGIPROC
Ë(*
	tcou¡
);

827 –*
PFNGLXWAITVIDEOSYNCSGIPROC
Ë(
	tdivis‹
, 
	tªmaödî
, *
	tcou¡
);

828 #ifde‡
GLX_GLXEXT_PROTOTYPES


829 
glXGëVideoSyncSGI
 (*
cou¡
);

830 
glXWaôVideoSyncSGI
 (
divis‹
, 
ªmaödî
, *
cou¡
);

834 #i‚de‡
GLX_SUN_gë_å™•¨ít_ödex


835 
	#GLX_SUN_gë_å™•¨ít_ödex
 1

	)

836 
Sètus
 ( *
	tPFNGLXGETTRANSPARENTINDEXSUNPROC
Ë(
	tDi•œy
 *
	tdpy
, 
	tWödow
 
	tovîœy
, Wödow 
	tundîœy
, *
	tpTøn•¨ítIndex
);

837 #ifde‡
GLX_GLXEXT_PROTOTYPES


838 
Sètus
 
glXGëTøn•¨ítIndexSUN
 (
Di•œy
 *
dpy
, 
Wödow
 
ovîœy
, Wödow 
undîœy
, *
pTøn•¨ítIndex
);

842 #ifde‡
__˝lu•lus


	@/usr/include/X11/X.h

3 #i‚de‡
X_H


4 
	#X_H


	)

53 
	#X_PROTOCOL
 11

	)

54 
	#X_PROTOCOL_REVISION
 0

	)

63 #i‚de‡
_XSERVER64


64 #i‚de‡
_XTYPEDEF_XID


65 
	#_XTYPEDEF_XID


	)

66 
	tXID
;

68 #i‚de‡
_XTYPEDEF_MASK


69 
	#_XTYPEDEF_MASK


	)

70 
	tMask
;

72 #i‚de‡
_XTYPEDEF_ATOM


73 
	#_XTYPEDEF_ATOM


	)

74 
	tAtom
;

76 
	tVisuÆID
;

77 
	tTime
;

79 
	~<X11/Xmd.h
>

80 #i‚de‡
_XTYPEDEF_XID


81 
	#_XTYPEDEF_XID


	)

82 
CARD32
 
	tXID
;

84 #i‚de‡
_XTYPEDEF_MASK


85 
	#_XTYPEDEF_MASK


	)

86 
CARD32
 
	tMask
;

88 #i‚de‡
_XTYPEDEF_ATOM


89 
	#_XTYPEDEF_ATOM


	)

90 
CARD32
 
	tAtom
;

92 
CARD32
 
	tVisuÆID
;

93 
CARD32
 
	tTime
;

96 
XID
 
	tWödow
;

97 
XID
 
	tDøwabÀ
;

98 #i‚de‡
_XTYPEDEF_FONT


99 
	#_XTYPEDEF_FONT


	)

100 
XID
 
	tF⁄t
;

102 
XID
 
	tPixm≠
;

103 
XID
 
	tCurs‹
;

104 
XID
 
	tCﬁ‹m≠
;

105 
XID
 
	tGC⁄ãxt
;

106 
XID
 
	tKeySym
;

108 
	tKeyCode
;

114 #i‚de‡
N⁄e


115 
	#N⁄e
 0L

	)

118 
	#P¨ítRñ©ive
 1L

	)

121 
	#C›yFromP¨ít
 0L

	)

126 
	#PoöãrWödow
 0L

	)

127 
	#I≈utFocus
 1L

	)

129 
	#PoöãrRoŸ
 1L

	)

131 
	#AnyPr›îtyTy≥
 0L

	)

133 
	#AnyKey
 0L

	)

135 
	#AnyBuâ⁄
 0L

	)

137 
	#AŒTemp‹¨y
 0L

	)

139 
	#CuºítTime
 0L

	)

141 
	#NoSymbﬁ
 0L

	)

150 
	#NoEvítMask
 0L

	)

151 
	#KeyPªssMask
 (1L<<0)

	)

152 
	#KeyRñó£Mask
 (1L<<1)

	)

153 
	#Buâ⁄PªssMask
 (1L<<2)

	)

154 
	#Buâ⁄Rñó£Mask
 (1L<<3)

	)

155 
	#E¡îWödowMask
 (1L<<4)

	)

156 
	#LóveWödowMask
 (1L<<5)

	)

157 
	#PoöãrMŸi⁄Mask
 (1L<<6)

	)

158 
	#PoöãrMŸi⁄HötMask
 (1L<<7)

	)

159 
	#Buâ⁄1MŸi⁄Mask
 (1L<<8)

	)

160 
	#Buâ⁄2MŸi⁄Mask
 (1L<<9)

	)

161 
	#Buâ⁄3MŸi⁄Mask
 (1L<<10)

	)

162 
	#Buâ⁄4MŸi⁄Mask
 (1L<<11)

	)

163 
	#Buâ⁄5MŸi⁄Mask
 (1L<<12)

	)

164 
	#Buâ⁄MŸi⁄Mask
 (1L<<13)

	)

165 
	#Keym≠SèãMask
 (1L<<14)

	)

166 
	#ExposuªMask
 (1L<<15)

	)

167 
	#VisibûôyCh™geMask
 (1L<<16)

	)

168 
	#Såu˘uªNŸifyMask
 (1L<<17)

	)

169 
	#ResizeRedúe˘Mask
 (1L<<18)

	)

170 
	#Sub°ru˘uªNŸifyMask
 (1L<<19)

	)

171 
	#Sub°ru˘uªRedúe˘Mask
 (1L<<20)

	)

172 
	#FocusCh™geMask
 (1L<<21)

	)

173 
	#Pr›îtyCh™geMask
 (1L<<22)

	)

174 
	#Cﬁ‹m≠Ch™geMask
 (1L<<23)

	)

175 
	#Ow√rGøbBuâ⁄Mask
 (1L<<24)

	)

181 
	#KeyPªss
 2

	)

182 
	#KeyRñó£
 3

	)

183 
	#Buâ⁄Pªss
 4

	)

184 
	#Buâ⁄Rñó£
 5

	)

185 
	#MŸi⁄NŸify
 6

	)

186 
	#E¡îNŸify
 7

	)

187 
	#LóveNŸify
 8

	)

188 
	#FocusIn
 9

	)

189 
	#FocusOut
 10

	)

190 
	#Keym≠NŸify
 11

	)

191 
	#Expo£
 12

	)

192 
	#GøphicsExpo£
 13

	)

193 
	#NoExpo£
 14

	)

194 
	#VisibûôyNŸify
 15

	)

195 
	#Cª©eNŸify
 16

	)

196 
	#De°royNŸify
 17

	)

197 
	#Unm≠NŸify
 18

	)

198 
	#M≠NŸify
 19

	)

199 
	#M≠Reque°
 20

	)

200 
	#Rï¨ítNŸify
 21

	)

201 
	#C⁄figuªNŸify
 22

	)

202 
	#C⁄figuªReque°
 23

	)

203 
	#GøvôyNŸify
 24

	)

204 
	#ResizeReque°
 25

	)

205 
	#CúcuœãNŸify
 26

	)

206 
	#CúcuœãReque°
 27

	)

207 
	#Pr›îtyNŸify
 28

	)

208 
	#Sñe˘i⁄CÀ¨
 29

	)

209 
	#Sñe˘i⁄Reque°
 30

	)

210 
	#Sñe˘i⁄NŸify
 31

	)

211 
	#Cﬁ‹m≠NŸify
 32

	)

212 
	#Clõ¡Mesßge
 33

	)

213 
	#M≠pögNŸify
 34

	)

214 
	#GíîicEvít
 35

	)

215 
	#LASTEvít
 36

	)

221 
	#Shi·Mask
 (1<<0)

	)

222 
	#LockMask
 (1<<1)

	)

223 
	#C⁄åﬁMask
 (1<<2)

	)

224 
	#Mod1Mask
 (1<<3)

	)

225 
	#Mod2Mask
 (1<<4)

	)

226 
	#Mod3Mask
 (1<<5)

	)

227 
	#Mod4Mask
 (1<<6)

	)

228 
	#Mod5Mask
 (1<<7)

	)

233 
	#Shi·M≠Index
 0

	)

234 
	#LockM≠Index
 1

	)

235 
	#C⁄åﬁM≠Index
 2

	)

236 
	#Mod1M≠Index
 3

	)

237 
	#Mod2M≠Index
 4

	)

238 
	#Mod3M≠Index
 5

	)

239 
	#Mod4M≠Index
 6

	)

240 
	#Mod5M≠Index
 7

	)

246 
	#Buâ⁄1Mask
 (1<<8)

	)

247 
	#Buâ⁄2Mask
 (1<<9)

	)

248 
	#Buâ⁄3Mask
 (1<<10)

	)

249 
	#Buâ⁄4Mask
 (1<<11)

	)

250 
	#Buâ⁄5Mask
 (1<<12)

	)

252 
	#AnyModifõr
 (1<<15Ë

	)

259 
	#Buâ⁄1
 1

	)

260 
	#Buâ⁄2
 2

	)

261 
	#Buâ⁄3
 3

	)

262 
	#Buâ⁄4
 4

	)

263 
	#Buâ⁄5
 5

	)

267 
	#NŸifyN‹mÆ
 0

	)

268 
	#NŸifyGøb
 1

	)

269 
	#NŸifyUngøb
 2

	)

270 
	#NŸifyWhûeGøbbed
 3

	)

272 
	#NŸifyHöt
 1

	)

276 
	#NŸifyAn˚°‹
 0

	)

277 
	#NŸifyVútuÆ
 1

	)

278 
	#NŸifyIn„ri‹
 2

	)

279 
	#NŸifyN⁄löór
 3

	)

280 
	#NŸifyN⁄löórVútuÆ
 4

	)

281 
	#NŸifyPoöãr
 5

	)

282 
	#NŸifyPoöãrRoŸ
 6

	)

283 
	#NŸifyDëaûN⁄e
 7

	)

287 
	#VisibûôyUnobscuªd
 0

	)

288 
	#VisibûôyP¨tüŒyObscuªd
 1

	)

289 
	#VisibûôyFuŒyObscuªd
 2

	)

293 
	#Pœ˚OnT›
 0

	)

294 
	#Pœ˚OnBŸtom
 1

	)

298 
	#FamûyI¡î√t
 0

	)

299 
	#FamûyDEC√t
 1

	)

300 
	#FamûyChaos
 2

	)

301 
	#FamûyI¡î√t6
 6

	)

304 
	#FamûySîvîI¡î¥ëed
 5

	)

308 
	#Pr›îtyNewVÆue
 0

	)

309 
	#Pr›îtyDñëe
 1

	)

313 
	#Cﬁ‹m≠Unö°ÆÀd
 0

	)

314 
	#Cﬁ‹m≠In°ÆÀd
 1

	)

318 
	#GøbModeSync
 0

	)

319 
	#GøbModeAsync
 1

	)

323 
	#GøbSuc˚ss
 0

	)

324 
	#AÃódyGøbbed
 1

	)

325 
	#GøbInvÆidTime
 2

	)

326 
	#GøbNŸVõwabÀ
 3

	)

327 
	#GøbFrozí
 4

	)

331 
	#AsyncPoöãr
 0

	)

332 
	#SyncPoöãr
 1

	)

333 
	#RïœyPoöãr
 2

	)

334 
	#AsyncKeybﬂrd
 3

	)

335 
	#SyncKeybﬂrd
 4

	)

336 
	#RïœyKeybﬂrd
 5

	)

337 
	#AsyncBŸh
 6

	)

338 
	#SyncBŸh
 7

	)

342 
	#RevîtToN⁄e
 ()
N⁄e


	)

343 
	#RevîtToPoöãrRoŸ
 ()
PoöãrRoŸ


	)

344 
	#RevîtToP¨ít
 2

	)

350 
	#Suc˚ss
 0

	)

351 
	#BadReque°
 1

	)

352 
	#BadVÆue
 2

	)

353 
	#BadWödow
 3

	)

354 
	#BadPixm≠
 4

	)

355 
	#BadAtom
 5

	)

356 
	#BadCurs‹
 6

	)

357 
	#BadF⁄t
 7

	)

358 
	#BadM©ch
 8

	)

359 
	#BadDøwabÀ
 9

	)

360 
	#BadAc˚ss
 10

	)

369 
	#BadAŒoc
 11

	)

370 
	#BadCﬁ‹
 12

	)

371 
	#BadGC
 13

	)

372 
	#BadIDChoi˚
 14

	)

373 
	#BadName
 15

	)

374 
	#BadLígth
 16

	)

375 
	#BadIm∂emíèti⁄
 17

	)

377 
	#Fú°Exãnsi⁄Eº‹
 128

	)

378 
	#La°Exãnsi⁄Eº‹
 255

	)

387 
	#I≈utOuçut
 1

	)

388 
	#I≈utO∆y
 2

	)

392 
	#CWBackPixm≠
 (1L<<0)

	)

393 
	#CWBackPixñ
 (1L<<1)

	)

394 
	#CWB‹dîPixm≠
 (1L<<2)

	)

395 
	#CWB‹dîPixñ
 (1L<<3)

	)

396 
	#CWBôGøvôy
 (1L<<4)

	)

397 
	#CWWöGøvôy
 (1L<<5)

	)

398 
	#CWBackögSt‹e
 (1L<<6)

	)

399 
	#CWBackögPœ√s
 (1L<<7)

	)

400 
	#CWBackögPixñ
 (1L<<8)

	)

401 
	#CWOvîrideRedúe˘
 (1L<<9)

	)

402 
	#CWSaveUndî
 (1L<<10)

	)

403 
	#CWEvítMask
 (1L<<11)

	)

404 
	#CWD⁄tPr›ag©e
 (1L<<12)

	)

405 
	#CWCﬁ‹m≠
 (1L<<13)

	)

406 
	#CWCurs‹
 (1L<<14)

	)

410 
	#CWX
 (1<<0)

	)

411 
	#CWY
 (1<<1)

	)

412 
	#CWWidth
 (1<<2)

	)

413 
	#CWHeight
 (1<<3)

	)

414 
	#CWB‹dîWidth
 (1<<4)

	)

415 
	#CWSiblög
 (1<<5)

	)

416 
	#CWSèckMode
 (1<<6)

	)

421 
	#F‹gëGøvôy
 0

	)

422 
	#N‹thWe°Gøvôy
 1

	)

423 
	#N‹thGøvôy
 2

	)

424 
	#N‹thEa°Gøvôy
 3

	)

425 
	#We°Gøvôy
 4

	)

426 
	#CíãrGøvôy
 5

	)

427 
	#Ea°Gøvôy
 6

	)

428 
	#SouthWe°Gøvôy
 7

	)

429 
	#SouthGøvôy
 8

	)

430 
	#SouthEa°Gøvôy
 9

	)

431 
	#SèticGøvôy
 10

	)

435 
	#Unm≠Gøvôy
 0

	)

439 
	#NŸU£ful
 0

	)

440 
	#WhíM≠≥d
 1

	)

441 
	#Always
 2

	)

445 
	#IsUnm≠≥d
 0

	)

446 
	#IsUnvõwabÀ
 1

	)

447 
	#IsVõwabÀ
 2

	)

451 
	#SëModeIn£π
 0

	)

452 
	#SëModeDñëe
 1

	)

456 
	#De°royAŒ
 0

	)

457 
	#RëaöPîm™ít
 1

	)

458 
	#RëaöTemp‹¨y
 2

	)

462 
	#Above
 0

	)

463 
	#Bñow
 1

	)

464 
	#T›If
 2

	)

465 
	#BŸtomIf
 3

	)

466 
	#Oµosôe
 4

	)

470 
	#Rai£Lowe°
 0

	)

471 
	#LowîHighe°
 1

	)

475 
	#Pr›ModeRïœ˚
 0

	)

476 
	#Pr›ModePª≥nd
 1

	)

477 
	#Pr›ModeAµíd
 2

	)

485 
	#GX˛ór
 0x0

	)

486 
	#GX™d
 0x1

	)

487 
	#GX™dRevî£
 0x2

	)

488 
	#GXc›y
 0x3

	)

489 
	#GX™dInvîãd
 0x4

	)

490 
	#GXno›
 0x5

	)

491 
	#GXx‹
 0x6

	)

492 
	#GX‹
 0x7

	)

493 
	#GXn‹
 0x8

	)

494 
	#GXequiv
 0x9

	)

495 
	#GXövît
 0x®

	)

496 
	#GX‹Revî£
 0xb

	)

497 
	#GXc›yInvîãd
 0x¯

	)

498 
	#GX‹Invîãd
 0xd

	)

499 
	#GX«nd
 0xê

	)

500 
	#GX£t
 0x‡

	)

504 
	#LöeSﬁid
 0

	)

505 
	#LöeOnOffDash
 1

	)

506 
	#LöeDoubÀDash
 2

	)

510 
	#C≠NŸLa°
 0

	)

511 
	#C≠Buâ
 1

	)

512 
	#C≠Round
 2

	)

513 
	#C≠Proje˘ög
 3

	)

517 
	#JoöMôî
 0

	)

518 
	#JoöRound
 1

	)

519 
	#JoöBevñ
 2

	)

523 
	#FûlSﬁid
 0

	)

524 
	#FûlTûed
 1

	)

525 
	#FûlStù∂ed
 2

	)

526 
	#FûlO∑queStù∂ed
 3

	)

530 
	#EvíOddRuÀ
 0

	)

531 
	#WödögRuÀ
 1

	)

535 
	#ClùByChûdªn
 0

	)

536 
	#In˛udeIn„ri‹s
 1

	)

540 
	#Uns‹ãd
 0

	)

541 
	#YS‹ãd
 1

	)

542 
	#YXS‹ãd
 2

	)

543 
	#YXB™ded
 3

	)

547 
	#Co‹dModeOrigö
 0

	)

548 
	#Co‹dModePªvious
 1

	)

552 
	#Com∂ex
 0

	)

553 
	#N⁄c⁄vex
 1

	)

554 
	#C⁄vex
 2

	)

558 
	#ArcCh‹d
 0

	)

559 
	#ArcPõSli˚
 1

	)

564 
	#GCFun˘i⁄
 (1L<<0)

	)

565 
	#GCPœ√Mask
 (1L<<1)

	)

566 
	#GCF‹eground
 (1L<<2)

	)

567 
	#GCBackground
 (1L<<3)

	)

568 
	#GCLöeWidth
 (1L<<4)

	)

569 
	#GCLöeStyÀ
 (1L<<5)

	)

570 
	#GCC≠StyÀ
 (1L<<6)

	)

571 
	#GCJoöStyÀ
 (1L<<7)

	)

572 
	#GCFûlStyÀ
 (1L<<8)

	)

573 
	#GCFûlRuÀ
 (1L<<9)

	)

574 
	#GCTûe
 (1L<<10)

	)

575 
	#GCStù∂e
 (1L<<11)

	)

576 
	#GCTûeStùXOrigö
 (1L<<12)

	)

577 
	#GCTûeStùYOrigö
 (1L<<13)

	)

578 
	#GCF⁄t
 (1L<<14)

	)

579 
	#GCSubwödowMode
 (1L<<15)

	)

580 
	#GCGøphicsExposuªs
 (1L<<16)

	)

581 
	#GCClùXOrigö
 (1L<<17)

	)

582 
	#GCClùYOrigö
 (1L<<18)

	)

583 
	#GCClùMask
 (1L<<19)

	)

584 
	#GCDashOff£t
 (1L<<20)

	)

585 
	#GCDashLi°
 (1L<<21)

	)

586 
	#GCArcMode
 (1L<<22)

	)

588 
	#GCLa°Bô
 22

	)

595 
	#F⁄tLe·ToRight
 0

	)

596 
	#F⁄tRightToLe·
 1

	)

598 
	#F⁄tCh™ge
 255

	)

606 
	#XYBôm≠
 0

	)

607 
	#XYPixm≠
 1

	)

608 
	#ZPixm≠
 2

	)

616 
	#AŒocN⁄e
 0

	)

617 
	#AŒocAŒ
 1

	)

622 
	#DoRed
 (1<<0)

	)

623 
	#DoGªí
 (1<<1)

	)

624 
	#DoBlue
 (1<<2)

	)

632 
	#Curs‹Sh≠e
 0

	)

633 
	#TûeSh≠e
 1

	)

634 
	#Stù∂eSh≠e
 2

	)

640 
	#AutoRïótModeOff
 0

	)

641 
	#AutoRïótModeOn
 1

	)

642 
	#AutoRïótModeDeÁu…
 2

	)

644 
	#LedModeOff
 0

	)

645 
	#LedModeOn
 1

	)

649 
	#KBKeyClickPî˚¡
 (1L<<0)

	)

650 
	#KBBñlPî˚¡
 (1L<<1)

	)

651 
	#KBBñlPôch
 (1L<<2)

	)

652 
	#KBBñlDuøti⁄
 (1L<<3)

	)

653 
	#KBLed
 (1L<<4)

	)

654 
	#KBLedMode
 (1L<<5)

	)

655 
	#KBKey
 (1L<<6)

	)

656 
	#KBAutoRïótMode
 (1L<<7)

	)

658 
	#M≠pögSuc˚ss
 0

	)

659 
	#M≠pögBusy
 1

	)

660 
	#M≠pögFaûed
 2

	)

662 
	#M≠pögModifõr
 0

	)

663 
	#M≠pögKeybﬂrd
 1

	)

664 
	#M≠pögPoöãr
 2

	)

670 
	#D⁄tPª„rBœnkög
 0

	)

671 
	#Pª„rBœnkög
 1

	)

672 
	#DeÁu…Bœnkög
 2

	)

674 
	#DißbÀS¸ìnSavî
 0

	)

675 
	#DißbÀS¸ìnI¡îvÆ
 0

	)

677 
	#D⁄tAŒowExposuªs
 0

	)

678 
	#AŒowExposuªs
 1

	)

679 
	#DeÁu…Exposuªs
 2

	)

683 
	#S¸ìnSavîRe£t
 0

	)

684 
	#S¸ìnSavîA˘ive
 1

	)

692 
	#Ho°In£π
 0

	)

693 
	#Ho°Dñëe
 1

	)

697 
	#E«bÀAc˚ss
 1

	)

698 
	#DißbÀAc˚ss
 0

	)

704 
	#SèticGøy
 0

	)

705 
	#GøySˇÀ
 1

	)

706 
	#SèticCﬁ‹
 2

	)

707 
	#P£udoCﬁ‹
 3

	)

708 
	#TrueCﬁ‹
 4

	)

709 
	#Dúe˘Cﬁ‹
 5

	)

714 
	#LSBFú°
 0

	)

715 
	#MSBFú°
 1

	)

	@/usr/include/X11/Xfuncproto.h

30 #i‚de‡
_XFUNCPROTO_H_


31 
	#_XFUNCPROTO_H_


	)

33 #i‚de‡
NìdFun˘i⁄PrŸŸy≥s


34 
	#NìdFun˘i⁄PrŸŸy≥s
 1

	)

37 #i‚de‡
NìdV¨¨gsPrŸŸy≥s


38 
	#NìdV¨¨gsPrŸŸy≥s
 1

	)

41 #i‡
NìdFun˘i⁄PrŸŸy≥s


43 #i‚de‡
NìdNe°edPrŸŸy≥s


44 
	#NìdNe°edPrŸŸy≥s
 1

	)

47 #i‚de‡
_Xc⁄°


48 
	#_Xc⁄°
 c⁄°

	)

52 #i‚de‡
NARROWPROTO


53 
	#NARROWPROTO


	)

55 #i‚de‡
FUNCPROTO


56 
	#FUNCPROTO
 15

	)

59 #i‚de‡
NìdWidePrŸŸy≥s


60 #ifde‡
NARROWPROTO


61 
	#NìdWidePrŸŸy≥s
 0

	)

63 
	#NìdWidePrŸŸy≥s
 1

	)

69 #i‚de‡
_XFUNCPROTOBEGIN


70 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

71 
	#_XFUNCPROTOBEGIN
 "C" {

	)

72 
	#_XFUNCPROTOEND
 }

	)

74 
	#_XFUNCPROTOBEGIN


	)

75 
	#_XFUNCPROTOEND


	)

80 #i‡
deföed
(
__GNUC__
) && (__GNUC__ >= 4)

81 
	#_X_SENTINEL
(
x
Ë
	`__©åibuã__
 ((
	`__£¡öñ__
(x)))

	)

83 
	#_X_SENTINEL
(
x
)

	)

87 #i‡
deföed
(
__GNUC__
Ë&& (__GNUC__ >4Ë&& !deföed(
__CYGWIN__
Ë&& !deföed(
__MINGW32__
)

88 
	#_X_EXPORT
 
	`__©åibuã__
((
	`visibûôy
("deÁu…")))

	)

89 
	#_X_HIDDEN
 
	`__©åibuã__
((
	`visibûôy
("hiddí")))

	)

90 
	#_X_INTERNAL
 
	`__©åibuã__
((
	`visibûôy
("öã∫Æ")))

	)

91 #ñi‡
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550)

92 
	#_X_EXPORT
 
__globÆ


	)

93 
	#_X_HIDDEN
 
__hiddí


	)

94 
	#_X_INTERNAL
 
__hiddí


	)

96 
	#_X_EXPORT


	)

97 
	#_X_HIDDEN


	)

98 
	#_X_INTERNAL


	)

103 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

104 
	#_X_LIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 1)

	)

105 
	#_X_UNLIKELY
(
x
Ë
	`__buûtö_ex≥˘
(!!(x), 0)

	)

107 
	#_X_LIKELY
(
x
Ë(x)

	)

108 
	#_X_UNLIKELY
(
x
Ë(x)

	)

113 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 403)

114 
	#_X_COLD
 
	`__©åibuã__
((
__cﬁd__
))

	)

116 
	#_X_COLD


	)

120 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 301)

121 
	#_X_DEPRECATED
 
	`__©åibuã__
((
dïªˇãd
))

	)

123 
	#_X_DEPRECATED


	)

127 #i‡(
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)) \

128 || (
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x590))

129 
	#_X_NORETURN
 
	`__©åibuã
((
n‹ëu∫
))

	)

131 
	#_X_NORETURN


	)

135 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 203)

136 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
Ë
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
,x,y)))

	)

138 
	#_X_ATTRIBUTE_PRINTF
(
x
,
y
)

	)

144 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 303)

145 
	#_X_NONNULL
(
¨gs
...Ë
	`__©åibuã__
((
	`n⁄nuŒ
◊rgs)))

	)

146 #ñi‡
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)

147 
	#_X_NONNULL
(...Ë

	)

151 #i‡
deföed
(
__GNUC__
Ë&& ((__GNUC__ * 100 + 
__GNUC_MINOR__
) >= 205)

152 
	#_X_UNUSED
 
	`__©åibuã__
((
__unu£d__
))

	)

154 
	#_X_UNUSED


	)

160 #i‡
deföed
(
ölöe
) || \

161 (
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L)) || \

162 (
deföed
(
__SUNPRO_C
) && (__SUNPRO_C >= 0x550))

163 
	#_X_INLINE
 
ölöe


	)

164 #ñi‡
deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

165 
	#_X_INLINE
 
__ölöe__


	)

167 
	#_X_INLINE


	)

172 #i‚de‡
_X_RESTRICT_KYWD


173 #i‡
deföed
(
ª°ri˘
) || \

174 (
deföed
(
__STDC_VERSION__
) && (__STDC_VERSION__ - 0 >= 199901L) \

175 && !
	$deföed
(
__˝lu•lus
))

176 
	#_X_RESTRICT_KYWD
 
ª°ri˘


	)

177 #ñi‡
	`deföed
(
__GNUC__
Ë&& !deföed(
__STRICT_ANSI__
)

178 
	#_X_RESTRICT_KYWD
 
__ª°ri˘__


	)

180 
	#_X_RESTRICT_KYWD


	)

	@/usr/include/X11/Xosdefs.h

27 #i‚de‡
_XOSDEFS_H_


28 
	#_XOSDEFS_H_


	)

37 #ifde‡
_SCO_DS


38 #i‚de‡
__SCO__


39 
	#__SCO__


	)

43 #ifde‡
__i386__


44 #ifde‡
SYSV


45 #i‡!
deföed
(
__SCO__
) && \

46 !
deföed
(
__UNIXWARE__
Ë&& !
	$deföed
(
__sun
)

47 #i‡!
	`deföed
(
_POSIX_SOURCE
)

48 
	#X_NOT_POSIX


	)

54 #ifde‡
__sun


58 #i‡
	`deföed
(
__SVR4
Ë&& !deföed(
SVR4
)

59 
	#SVR4
 1

	)

61 #ifde‡
SVR4


63 
	#X_POSIX_C_SOURCE
 199300L

	)

67 #ifde‡
WIN32


68 #i‚de‡
_POSIX_


69 
	#X_NOT_POSIX


	)

74 #ifde‡
__APPLE__


75 
	#NULL_NOT_ZERO


	)

82 #i‡
	`deföed
(
_XOPEN_SOURCE
Ë|| deföed(
_POSIX_SOURCE
Ë|| deföed(
_POSIX_C_SOURCE
)

83 #i‚de‡
_DARWIN_C_SOURCE


84 
	#_DARWIN_C_SOURCE


	)

90 #ifde‡
__GNU__


91 #i‚de‡
PATH_MAX


92 
	#PATH_MAX
 4096

	)

94 #i‚de‡
MAXPATHLEN


95 
	#MAXPATHLEN
 4096

	)

99 #i‡
	`deföed
(
__SCO__
Ë|| deföed(
__UNIXWARE__
)

100 #i‚de‡
PATH_MAX


101 
	#PATH_MAX
 1024

	)

103 #i‚de‡
MAXPATHLEN


104 
	#MAXPATHLEN
 1024

	)

108 #i‡
	`deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
Ë|| deföed(
__FªeBSD__
) \

109 || 
	`deföed
(
__APPLE__
Ë|| 
	$deföed
(
__Døg⁄Fly__
)

110 #i‚de‡
CSRG_BASED


111 
	#CSRG_BASED


	)

	@/usr/include/X11/Xutil.h

49 #i‚de‡
_X11_XUTIL_H_


50 
	#_X11_XUTIL_H_


	)

53 
	~<X11/Xlib.h
>

54 
	~<X11/keysym.h
>

59 #ifde‡
__˛™g__


60 #¥agm®
˛™g
 
dügno°ic
 
push


61 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wpadded"

68 
	#NoVÆue
 0x0000

	)

69 
	#XVÆue
 0x0001

	)

70 
	#YVÆue
 0x0002

	)

71 
	#WidthVÆue
 0x0004

	)

72 
	#HeightVÆue
 0x0008

	)

73 
	#AŒVÆues
 0x000F

	)

74 
	#XNeg©ive
 0x0010

	)

75 
	#YNeg©ive
 0x0020

	)

82 
	mÊags
;

83 
	mx
, 
	my
;

84 
	mwidth
, 
	mheight
;

85 
	mmö_width
, 
	mmö_height
;

86 
	mmax_width
, 
	mmax_height
;

87 
	mwidth_öc
, 
	mheight_öc
;

89 
	mx
;

90 
	my
;

91 } 
	mmö_a•e˘
, 
	mmax_a•e˘
;

92 
	mba£_width
, 
	mba£_height
;

93 
	mwö_gøvôy
;

94 } 
	tXSizeHöts
;

102 
	#USPosôi⁄
 (1L << 0Ë

	)

103 
	#USSize
 (1L << 1Ë

	)

105 
	#PPosôi⁄
 (1L << 2Ë

	)

106 
	#PSize
 (1L << 3Ë

	)

107 
	#PMöSize
 (1L << 4Ë

	)

108 
	#PMaxSize
 (1L << 5Ë

	)

109 
	#PResizeInc
 (1L << 6Ë

	)

110 
	#PA•e˘
 (1L << 7Ë

	)

111 
	#PBa£Size
 (1L << 8Ë

	)

112 
	#PWöGøvôy
 (1L << 9Ë

	)

115 
	#PAŒHöts
 (
PPosôi⁄
|
PSize
|
PMöSize
|
PMaxSize
|
PResizeInc
|
PA•e˘
)

	)

120 
	mÊags
;

121 
Boﬁ
 
	möput
;

123 
	möôül_°©e
;

124 
Pixm≠
 
	mic⁄_pixm≠
;

125 
Wödow
 
	mic⁄_wödow
;

126 
	mic⁄_x
, 
	mic⁄_y
;

127 
Pixm≠
 
	mic⁄_mask
;

128 
XID
 
	mwödow_group
;

130 } 
	tXWMHöts
;

134 
	#I≈utHöt
 (1L << 0)

	)

135 
	#SèãHöt
 (1L << 1)

	)

136 
	#Ic⁄Pixm≠Höt
 (1L << 2)

	)

137 
	#Ic⁄WödowHöt
 (1L << 3)

	)

138 
	#Ic⁄Posôi⁄Höt
 (1L << 4)

	)

139 
	#Ic⁄MaskHöt
 (1L << 5)

	)

140 
	#WödowGroupHöt
 (1L << 6)

	)

141 
	#AŒHöts
 (
I≈utHöt
|
SèãHöt
|
Ic⁄Pixm≠Höt
|
Ic⁄WödowHöt
| \

142 
Ic⁄Posôi⁄Höt
|
Ic⁄MaskHöt
|
WödowGroupHöt
)

	)

143 
	#XUrgícyHöt
 (1L << 8)

	)

146 
	#WôhdøwnSèã
 0

	)

147 
	#N‹mÆSèã
 1

	)

148 
	#Ic⁄icSèã
 3

	)

153 
	#D⁄tC¨eSèã
 0

	)

154 
	#ZoomSèã
 2

	)

155 
	#I«˘iveSèã
 4

	)

164 *
	mvÆue
;

165 
Atom
 
	mícodög
;

166 
	mf‹m©
;

167 
	mnôems
;

168 } 
	tXTextPr›îty
;

170 
	#XNoMem‹y
 -1

	)

171 
	#XLoˇÀNŸSuµ‹ãd
 -2

	)

172 
	#XC⁄vîãrNŸFound
 -3

	)

175 
	mXSåögStyÀ
,

176 
	mXCompoundTextStyÀ
,

177 
	mXTextStyÀ
,

178 
	mXStdICCTextStyÀ
,

180 
	mXUTF8SåögStyÀ


181 } 
	tXICCEncodögStyÀ
;

184 
	mmö_width
, 
	mmö_height
;

185 
	mmax_width
, 
	mmax_height
;

186 
	mwidth_öc
, 
	mheight_öc
;

187 } 
	tXIc⁄Size
;

190 *
	mªs_«me
;

191 *
	mªs_˛ass
;

192 } 
	tXCœssHöt
;

194 #ifde‡
XUTIL_DEFINE_FUNCTIONS


195 
XDe°royImage
(

196 
XImage
 *
ximage
);

197 
XGëPixñ
(

198 
XImage
 *
ximage
,

199 
x
, 
y
);

200 
XPutPixñ
(

201 
XImage
 *
ximage
,

202 
x
, 
y
,

203 
pixñ
);

204 
XImage
 *
XSubImage
(

205 
XImage
 *
ximage
,

206 
x
, 
y
,

207 
width
, 
height
);

208 
XAddPixñ
(

209 
XImage
 *
ximage
,

210 
vÆue
);

216 
	#XDe°royImage
(
ximage
) \

217 ((*((
ximage
)->
f
.
de°roy_image
))((ximage)))

	)

218 
	#XGëPixñ
(
ximage
, 
x
, 
y
) \

219 ((*((
ximage
)->
f
.
gë_pixñ
))((ximage), (
x
), (
y
)))

	)

220 
	#XPutPixñ
(
ximage
, 
x
, 
y
, 
pixñ
) \

221 ((*((
ximage
)->
f
.
put_pixñ
))((ximage), (
x
), (
y
), (
pixñ
)))

	)

222 
	#XSubImage
(
ximage
, 
x
, 
y
, 
width
, 
height
) \

223 ((*((
ximage
)->
f
.
sub_image
))((ximage), (
x
), (
y
), (
width
), (
height
)))

	)

224 
	#XAddPixñ
(
ximage
, 
vÆue
) \

225 ((*((
ximage
)->
f
.
add_pixñ
))((ximage), (
vÆue
)))

	)

231 
	s_XCompo£Sètus
 {

232 
XPoöãr
 
	mcompo£_±r
;

233 
	mch¨s_m©ched
;

234 } 
	tXCompo£Sètus
;

239 
	#IsKey∑dKey
(
keysym
) \

240 (((
KeySym
)(
keysym
Ë>
XK_KP_S∑˚
Ë&& ((KeySym)(keysymË<
XK_KP_EquÆ
))

	)

242 
	#IsPriv©eKey∑dKey
(
keysym
) \

243 (((
KeySym
)(
keysym
Ë>0x11000000Ë&& ((KeySym)(keysymË<0x1100FFFF))

	)

245 
	#IsCurs‹Key
(
keysym
) \

246 (((
KeySym
)(
keysym
Ë>
XK_Home
Ë&& ((KeySym)(keysymË< 
XK_Sñe˘
))

	)

248 
	#IsPFKey
(
keysym
) \

249 (((
KeySym
)(
keysym
Ë>
XK_KP_F1
Ë&& ((KeySym)(keysymË<
XK_KP_F4
))

	)

251 
	#IsFun˘i⁄Key
(
keysym
) \

252 (((
KeySym
)(
keysym
Ë>
XK_F1
Ë&& ((KeySym)(keysymË<
XK_F35
))

	)

254 
	#IsMiscFun˘i⁄Key
(
keysym
) \

255 (((
KeySym
)(
keysym
Ë>
XK_Sñe˘
Ë&& ((KeySym)(keysymË<
XK_Bªak
))

	)

257 #ifde‡
XK_XKB_KEYS


258 
	#IsModifõrKey
(
keysym
) \

259 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

260 || (((
KeySym
)(
keysym
Ë>
XK_ISO_Lock
) && \

261 ((
KeySym
)(
keysym
Ë<
XK_ISO_Levñ5_Lock
)) \

262 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

263 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

265 
	#IsModifõrKey
(
keysym
) \

266 ((((
KeySym
)(
keysym
Ë>
XK_Shi·_L
Ë&& ((KeySym)(keysymË<
XK_Hy≥r_R
)) \

267 || ((
KeySym
)(
keysym
Ë=
XK_Mode_swôch
) \

268 || ((
KeySym
)(
keysym
Ë=
XK_Num_Lock
))

	)

273 
_XRegi⁄
 *
	tRegi⁄
;

277 
	#Re˘™gÀOut
 0

	)

278 
	#Re˘™gÀIn
 1

	)

279 
	#Re˘™gÀP¨t
 2

	)

288 
VisuÆ
 *
	mvisuÆ
;

289 
VisuÆID
 
	mvisuÆid
;

290 
	ms¸ìn
;

291 
	mdïth
;

292 #i‡
deföed
(
__˝lu•lus
Ë|| deföed(
c_∂u•lus
)

293 
	mc_˛ass
;

295 
	m˛ass
;

297 
	mªd_mask
;

298 
	mgªí_mask
;

299 
	mblue_mask
;

300 
	mcﬁ‹m≠_size
;

301 
	mbôs_≥r_rgb
;

302 } 
	tXVisuÆInfo
;

304 
	#VisuÆNoMask
 0x0

	)

305 
	#VisuÆIDMask
 0x1

	)

306 
	#VisuÆS¸ìnMask
 0x2

	)

307 
	#VisuÆDïthMask
 0x4

	)

308 
	#VisuÆCœssMask
 0x8

	)

309 
	#VisuÆRedMaskMask
 0x10

	)

310 
	#VisuÆGªíMaskMask
 0x20

	)

311 
	#VisuÆBlueMaskMask
 0x40

	)

312 
	#VisuÆCﬁ‹m≠SizeMask
 0x80

	)

313 
	#VisuÆBôsPîRGBMask
 0x100

	)

314 
	#VisuÆAŒMask
 0x1FF

	)

321 
Cﬁ‹m≠
 
	mcﬁ‹m≠
;

322 
	mªd_max
;

323 
	mªd_mu…
;

324 
	mgªí_max
;

325 
	mgªí_mu…
;

326 
	mblue_max
;

327 
	mblue_mu…
;

328 
	mba£_pixñ
;

329 
VisuÆID
 
	mvisuÆid
;

330 
XID
 
	mkûlid
;

331 } 
	tXSènd¨dCﬁ‹m≠
;

333 
	#Rñó£ByFªeögCﬁ‹m≠
 ((
XID
Ë1LË

	)

339 
	#Bôm≠Suc˚ss
 0

	)

340 
	#Bôm≠O≥nFaûed
 1

	)

341 
	#Bôm≠FûeInvÆid
 2

	)

342 
	#Bôm≠NoMem‹y
 3

	)

353 
	#XCSUCCESS
 0

	)

354 
	#XCNOMEM
 1

	)

355 
	#XCNOENT
 2

	)

357 
	tXC⁄ãxt
;

359 
	#XUniqueC⁄ãxt
(Ë((
XC⁄ãxt
Ë
	`XrmUniqueQu¨k
())

	)

360 
	#XSåögToC⁄ãxt
(
°rög
Ë((
XC⁄ãxt
Ë
	`XrmSåögToQu¨k
(°rög))

	)

362 
_XFUNCPROTOBEGIN


366 
XCœssHöt
 *
XAŒocCœssHöt
 (

370 
XIc⁄Size
 *
XAŒocIc⁄Size
 (

374 
XSizeHöts
 *
XAŒocSizeHöts
 (

378 
XSènd¨dCﬁ‹m≠
 *
XAŒocSènd¨dCﬁ‹m≠
 (

382 
XWMHöts
 *
XAŒocWMHöts
 (

386 
XClùBox
(

387 
Regi⁄
 ,

388 
XRe˘™gÀ
*

391 
Regi⁄
 
XCª©eRegi⁄
(

395 c⁄° *
XDeÁu…Såög
 ();

397 
XDñëeC⁄ãxt
(

398 
Di•œy
* ,

399 
XID
 ,

400 
XC⁄ãxt


403 
XDe°royRegi⁄
(

404 
Regi⁄


407 
XEm±yRegi⁄
(

408 
Regi⁄


411 
XEquÆRegi⁄
(

412 
Regi⁄
 ,

413 
Regi⁄


416 
XFödC⁄ãxt
(

417 
Di•œy
* ,

418 
XID
 ,

419 
XC⁄ãxt
 ,

420 
XPoöãr
*

423 
Sètus
 
XGëCœssHöt
(

424 
Di•œy
* ,

425 
Wödow
 ,

426 
XCœssHöt
*

429 
Sètus
 
XGëIc⁄Sizes
(

430 
Di•œy
* ,

431 
Wödow
 ,

432 
XIc⁄Size
** ,

436 
Sètus
 
XGëN‹mÆHöts
(

437 
Di•œy
* ,

438 
Wödow
 ,

439 
XSizeHöts
*

442 
Sètus
 
XGëRGBCﬁ‹m≠s
(

443 
Di•œy
* ,

444 
Wödow
 ,

445 
XSènd¨dCﬁ‹m≠
** ,

447 
Atom


450 
Sètus
 
XGëSizeHöts
(

451 
Di•œy
* ,

452 
Wödow
 ,

453 
XSizeHöts
* ,

454 
Atom


457 
Sètus
 
XGëSènd¨dCﬁ‹m≠
(

458 
Di•œy
* ,

459 
Wödow
 ,

460 
XSènd¨dCﬁ‹m≠
* ,

461 
Atom


464 
Sètus
 
XGëTextPr›îty
(

465 
Di•œy
* ,

466 
Wödow
 ,

467 
XTextPr›îty
* ,

468 
Atom


471 
XVisuÆInfo
 *
XGëVisuÆInfo
(

472 
Di•œy
* ,

474 
XVisuÆInfo
* ,

478 
Sètus
 
XGëWMClõ¡Machöe
(

479 
Di•œy
* ,

480 
Wödow
 ,

481 
XTextPr›îty
*

484 
XWMHöts
 *
XGëWMHöts
(

485 
Di•œy
* ,

486 
Wödow


489 
Sètus
 
XGëWMIc⁄Name
(

490 
Di•œy
* ,

491 
Wödow
 ,

492 
XTextPr›îty
*

495 
Sètus
 
XGëWMName
(

496 
Di•œy
* ,

497 
Wödow
 ,

498 
XTextPr›îty
*

501 
Sètus
 
XGëWMN‹mÆHöts
(

502 
Di•œy
* ,

503 
Wödow
 ,

504 
XSizeHöts
* ,

508 
Sètus
 
XGëWMSizeHöts
(

509 
Di•œy
* ,

510 
Wödow
 ,

511 
XSizeHöts
* ,

513 
Atom


516 
Sètus
 
XGëZoomHöts
(

517 
Di•œy
* ,

518 
Wödow
 ,

519 
XSizeHöts
*

522 
XI¡î£˘Regi⁄
(

523 
Regi⁄
 ,

524 
Regi⁄
 ,

525 
Regi⁄


528 
XC⁄vîtCa£
(

529 
KeySym
 ,

530 
KeySym
* ,

531 
KeySym
*

534 
XLookupSåög
(

535 
XKeyEvít
* ,

538 
KeySym
* ,

539 
XCompo£Sètus
*

542 
Sètus
 
XM©chVisuÆInfo
(

543 
Di•œy
* ,

547 
XVisuÆInfo
*

550 
XOff£tRegi⁄
(

551 
Regi⁄
 ,

556 
Boﬁ
 
XPoötInRegi⁄
(

557 
Regi⁄
 ,

562 
Regi⁄
 
XPﬁyg⁄Regi⁄
(

563 
XPoöt
* ,

568 
XRe˘InRegi⁄
(

569 
Regi⁄
 ,

576 
XSaveC⁄ãxt
(

577 
Di•œy
* ,

578 
XID
 ,

579 
XC⁄ãxt
 ,

580 
_Xc⁄°
 *

583 
XSëCœssHöt
(

584 
Di•œy
* ,

585 
Wödow
 ,

586 
XCœssHöt
*

589 
XSëIc⁄Sizes
(

590 
Di•œy
* ,

591 
Wödow
 ,

592 
XIc⁄Size
* ,

596 
XSëN‹mÆHöts
(

597 
Di•œy
* ,

598 
Wödow
 ,

599 
XSizeHöts
*

602 
XSëRGBCﬁ‹m≠s
(

603 
Di•œy
* ,

604 
Wödow
 ,

605 
XSènd¨dCﬁ‹m≠
* ,

607 
Atom


610 
XSëSizeHöts
(

611 
Di•œy
* ,

612 
Wödow
 ,

613 
XSizeHöts
* ,

614 
Atom


617 
XSëSènd¨dPr›îtõs
(

618 
Di•œy
* ,

619 
Wödow
 ,

620 
_Xc⁄°
 * ,

621 
_Xc⁄°
 * ,

622 
Pixm≠
 ,

625 
XSizeHöts
*

628 
XSëTextPr›îty
(

629 
Di•œy
* ,

630 
Wödow
 ,

631 
XTextPr›îty
* ,

632 
Atom


635 
XSëWMClõ¡Machöe
(

636 
Di•œy
* ,

637 
Wödow
 ,

638 
XTextPr›îty
*

641 
XSëWMHöts
(

642 
Di•œy
* ,

643 
Wödow
 ,

644 
XWMHöts
*

647 
XSëWMIc⁄Name
(

648 
Di•œy
* ,

649 
Wödow
 ,

650 
XTextPr›îty
*

653 
XSëWMName
(

654 
Di•œy
* ,

655 
Wödow
 ,

656 
XTextPr›îty
*

659 
XSëWMN‹mÆHöts
(

660 
Di•œy
* ,

661 
Wödow
 ,

662 
XSizeHöts
*

665 
XSëWMPr›îtõs
(

666 
Di•œy
* ,

667 
Wödow
 ,

668 
XTextPr›îty
* ,

669 
XTextPr›îty
* ,

672 
XSizeHöts
* ,

673 
XWMHöts
* ,

674 
XCœssHöt
*

677 
XmbSëWMPr›îtõs
(

678 
Di•œy
* ,

679 
Wödow
 ,

680 
_Xc⁄°
 * ,

681 
_Xc⁄°
 * ,

684 
XSizeHöts
* ,

685 
XWMHöts
* ,

686 
XCœssHöt
*

689 
Xutf8SëWMPr›îtõs
(

690 
Di•œy
* ,

691 
Wödow
 ,

692 
_Xc⁄°
 * ,

693 
_Xc⁄°
 * ,

696 
XSizeHöts
* ,

697 
XWMHöts
* ,

698 
XCœssHöt
*

701 
XSëWMSizeHöts
(

702 
Di•œy
* ,

703 
Wödow
 ,

704 
XSizeHöts
* ,

705 
Atom


708 
XSëRegi⁄
(

709 
Di•œy
* ,

710 
GC
 ,

711 
Regi⁄


714 
XSëSènd¨dCﬁ‹m≠
(

715 
Di•œy
* ,

716 
Wödow
 ,

717 
XSènd¨dCﬁ‹m≠
* ,

718 
Atom


721 
XSëZoomHöts
(

722 
Di•œy
* ,

723 
Wödow
 ,

724 
XSizeHöts
*

727 
XShrökRegi⁄
(

728 
Regi⁄
 ,

733 
Sètus
 
XSåögLi°ToTextPr›îty
(

736 
XTextPr›îty
*

739 
XSubåa˘Regi⁄
(

740 
Regi⁄
 ,

741 
Regi⁄
 ,

742 
Regi⁄


745 
XmbTextLi°ToTextPr›îty
(

746 
Di•œy
* 
di•œy
,

747 ** 
li°
,

748 
cou¡
,

749 
XICCEncodögStyÀ
 
°yÀ
,

750 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


753 
XwcTextLi°ToTextPr›îty
(

754 
Di•œy
* 
di•œy
,

755 
wch¨_t
** 
li°
,

756 
cou¡
,

757 
XICCEncodögStyÀ
 
°yÀ
,

758 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


761 
Xutf8TextLi°ToTextPr›îty
(

762 
Di•œy
* 
di•œy
,

763 ** 
li°
,

764 
cou¡
,

765 
XICCEncodögStyÀ
 
°yÀ
,

766 
XTextPr›îty
* 
ãxt_¥›_ªtu∫


769 
XwcFªeSåögLi°
(

770 
wch¨_t
** 
li°


773 
Sètus
 
XTextPr›îtyToSåögLi°
(

774 
XTextPr›îty
* ,

779 
XmbTextPr›îtyToTextLi°
(

780 
Di•œy
* 
di•œy
,

781 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

782 *** 
li°_ªtu∫
,

783 * 
cou¡_ªtu∫


786 
XwcTextPr›îtyToTextLi°
(

787 
Di•œy
* 
di•œy
,

788 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

789 
wch¨_t
*** 
li°_ªtu∫
,

790 * 
cou¡_ªtu∫


793 
Xutf8TextPr›îtyToTextLi°
(

794 
Di•œy
* 
di•œy
,

795 c⁄° 
XTextPr›îty
* 
ãxt_¥›
,

796 *** 
li°_ªtu∫
,

797 * 
cou¡_ªtu∫


800 
XUni⁄Re˘WôhRegi⁄
(

801 
XRe˘™gÀ
* ,

802 
Regi⁄
 ,

803 
Regi⁄


806 
XUni⁄Regi⁄
(

807 
Regi⁄
 ,

808 
Regi⁄
 ,

809 
Regi⁄


812 
XWMGeomëry
(

813 
Di•œy
* ,

815 
_Xc⁄°
 * ,

816 
_Xc⁄°
 * ,

818 
XSizeHöts
* ,

826 
XX‹Regi⁄
(

827 
Regi⁄
 ,

828 
Regi⁄
 ,

829 
Regi⁄


832 #ifde‡
__˛™g__


833 #¥agm®
˛™g
 
dügno°ic
 
p›


836 
	g_XFUNCPROTOEND


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/asm-generic/int-ll64.h

8 #i‚de‡
_ASM_GENERIC_INT_LL64_H


9 
	#_ASM_GENERIC_INT_LL64_H


	)

11 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__ASSEMBLY__


19 
__sig√d__
 
	t__s8
;

20 
	t__u8
;

22 
__sig√d__
 
	t__s16
;

23 
	t__u16
;

25 
__sig√d__
 
	t__s32
;

26 
	t__u32
;

28 #ifde‡
__GNUC__


29 
__exãnsi⁄__
 
__sig√d__
 
	t__s64
;

30 
__exãnsi⁄__
 
	t__u64
;

32 
__sig√d__
 
	t__s64
;

33 
	t__u64
;

	@/usr/include/bits/confname.h

19 #i‚de‡
_UNISTD_H


26 
	m_PC_LINK_MAX
,

27 
	#_PC_LINK_MAX
 
_PC_LINK_MAX


	)

28 
	m_PC_MAX_CANON
,

29 
	#_PC_MAX_CANON
 
_PC_MAX_CANON


	)

30 
	m_PC_MAX_INPUT
,

31 
	#_PC_MAX_INPUT
 
_PC_MAX_INPUT


	)

32 
	m_PC_NAME_MAX
,

33 
	#_PC_NAME_MAX
 
_PC_NAME_MAX


	)

34 
	m_PC_PATH_MAX
,

35 
	#_PC_PATH_MAX
 
_PC_PATH_MAX


	)

36 
	m_PC_PIPE_BUF
,

37 
	#_PC_PIPE_BUF
 
_PC_PIPE_BUF


	)

38 
	m_PC_CHOWN_RESTRICTED
,

39 
	#_PC_CHOWN_RESTRICTED
 
_PC_CHOWN_RESTRICTED


	)

40 
	m_PC_NO_TRUNC
,

41 
	#_PC_NO_TRUNC
 
_PC_NO_TRUNC


	)

42 
	m_PC_VDISABLE
,

43 
	#_PC_VDISABLE
 
_PC_VDISABLE


	)

44 
	m_PC_SYNC_IO
,

45 
	#_PC_SYNC_IO
 
_PC_SYNC_IO


	)

46 
	m_PC_ASYNC_IO
,

47 
	#_PC_ASYNC_IO
 
_PC_ASYNC_IO


	)

48 
	m_PC_PRIO_IO
,

49 
	#_PC_PRIO_IO
 
_PC_PRIO_IO


	)

50 
	m_PC_SOCK_MAXBUF
,

51 
	#_PC_SOCK_MAXBUF
 
_PC_SOCK_MAXBUF


	)

52 
	m_PC_FILESIZEBITS
,

53 
	#_PC_FILESIZEBITS
 
_PC_FILESIZEBITS


	)

54 
	m_PC_REC_INCR_XFER_SIZE
,

55 
	#_PC_REC_INCR_XFER_SIZE
 
_PC_REC_INCR_XFER_SIZE


	)

56 
	m_PC_REC_MAX_XFER_SIZE
,

57 
	#_PC_REC_MAX_XFER_SIZE
 
_PC_REC_MAX_XFER_SIZE


	)

58 
	m_PC_REC_MIN_XFER_SIZE
,

59 
	#_PC_REC_MIN_XFER_SIZE
 
_PC_REC_MIN_XFER_SIZE


	)

60 
	m_PC_REC_XFER_ALIGN
,

61 
	#_PC_REC_XFER_ALIGN
 
_PC_REC_XFER_ALIGN


	)

62 
	m_PC_ALLOC_SIZE_MIN
,

63 
	#_PC_ALLOC_SIZE_MIN
 
_PC_ALLOC_SIZE_MIN


	)

64 
	m_PC_SYMLINK_MAX
,

65 
	#_PC_SYMLINK_MAX
 
_PC_SYMLINK_MAX


	)

66 
	m_PC_2_SYMLINKS


67 
	#_PC_2_SYMLINKS
 
_PC_2_SYMLINKS


	)

73 
	m_SC_ARG_MAX
,

74 
	#_SC_ARG_MAX
 
_SC_ARG_MAX


	)

75 
	m_SC_CHILD_MAX
,

76 
	#_SC_CHILD_MAX
 
_SC_CHILD_MAX


	)

77 
	m_SC_CLK_TCK
,

78 
	#_SC_CLK_TCK
 
_SC_CLK_TCK


	)

79 
	m_SC_NGROUPS_MAX
,

80 
	#_SC_NGROUPS_MAX
 
_SC_NGROUPS_MAX


	)

81 
	m_SC_OPEN_MAX
,

82 
	#_SC_OPEN_MAX
 
_SC_OPEN_MAX


	)

83 
	m_SC_STREAM_MAX
,

84 
	#_SC_STREAM_MAX
 
_SC_STREAM_MAX


	)

85 
	m_SC_TZNAME_MAX
,

86 
	#_SC_TZNAME_MAX
 
_SC_TZNAME_MAX


	)

87 
	m_SC_JOB_CONTROL
,

88 
	#_SC_JOB_CONTROL
 
_SC_JOB_CONTROL


	)

89 
	m_SC_SAVED_IDS
,

90 
	#_SC_SAVED_IDS
 
_SC_SAVED_IDS


	)

91 
	m_SC_REALTIME_SIGNALS
,

92 
	#_SC_REALTIME_SIGNALS
 
_SC_REALTIME_SIGNALS


	)

93 
	m_SC_PRIORITY_SCHEDULING
,

94 
	#_SC_PRIORITY_SCHEDULING
 
_SC_PRIORITY_SCHEDULING


	)

95 
	m_SC_TIMERS
,

96 
	#_SC_TIMERS
 
_SC_TIMERS


	)

97 
	m_SC_ASYNCHRONOUS_IO
,

98 
	#_SC_ASYNCHRONOUS_IO
 
_SC_ASYNCHRONOUS_IO


	)

99 
	m_SC_PRIORITIZED_IO
,

100 
	#_SC_PRIORITIZED_IO
 
_SC_PRIORITIZED_IO


	)

101 
	m_SC_SYNCHRONIZED_IO
,

102 
	#_SC_SYNCHRONIZED_IO
 
_SC_SYNCHRONIZED_IO


	)

103 
	m_SC_FSYNC
,

104 
	#_SC_FSYNC
 
_SC_FSYNC


	)

105 
	m_SC_MAPPED_FILES
,

106 
	#_SC_MAPPED_FILES
 
_SC_MAPPED_FILES


	)

107 
	m_SC_MEMLOCK
,

108 
	#_SC_MEMLOCK
 
_SC_MEMLOCK


	)

109 
	m_SC_MEMLOCK_RANGE
,

110 
	#_SC_MEMLOCK_RANGE
 
_SC_MEMLOCK_RANGE


	)

111 
	m_SC_MEMORY_PROTECTION
,

112 
	#_SC_MEMORY_PROTECTION
 
_SC_MEMORY_PROTECTION


	)

113 
	m_SC_MESSAGE_PASSING
,

114 
	#_SC_MESSAGE_PASSING
 
_SC_MESSAGE_PASSING


	)

115 
	m_SC_SEMAPHORES
,

116 
	#_SC_SEMAPHORES
 
_SC_SEMAPHORES


	)

117 
	m_SC_SHARED_MEMORY_OBJECTS
,

118 
	#_SC_SHARED_MEMORY_OBJECTS
 
_SC_SHARED_MEMORY_OBJECTS


	)

119 
	m_SC_AIO_LISTIO_MAX
,

120 
	#_SC_AIO_LISTIO_MAX
 
_SC_AIO_LISTIO_MAX


	)

121 
	m_SC_AIO_MAX
,

122 
	#_SC_AIO_MAX
 
_SC_AIO_MAX


	)

123 
	m_SC_AIO_PRIO_DELTA_MAX
,

124 
	#_SC_AIO_PRIO_DELTA_MAX
 
_SC_AIO_PRIO_DELTA_MAX


	)

125 
	m_SC_DELAYTIMER_MAX
,

126 
	#_SC_DELAYTIMER_MAX
 
_SC_DELAYTIMER_MAX


	)

127 
	m_SC_MQ_OPEN_MAX
,

128 
	#_SC_MQ_OPEN_MAX
 
_SC_MQ_OPEN_MAX


	)

129 
	m_SC_MQ_PRIO_MAX
,

130 
	#_SC_MQ_PRIO_MAX
 
_SC_MQ_PRIO_MAX


	)

131 
	m_SC_VERSION
,

132 
	#_SC_VERSION
 
_SC_VERSION


	)

133 
	m_SC_PAGESIZE
,

134 
	#_SC_PAGESIZE
 
_SC_PAGESIZE


	)

135 
	#_SC_PAGE_SIZE
 
_SC_PAGESIZE


	)

136 
	m_SC_RTSIG_MAX
,

137 
	#_SC_RTSIG_MAX
 
_SC_RTSIG_MAX


	)

138 
	m_SC_SEM_NSEMS_MAX
,

139 
	#_SC_SEM_NSEMS_MAX
 
_SC_SEM_NSEMS_MAX


	)

140 
	m_SC_SEM_VALUE_MAX
,

141 
	#_SC_SEM_VALUE_MAX
 
_SC_SEM_VALUE_MAX


	)

142 
	m_SC_SIGQUEUE_MAX
,

143 
	#_SC_SIGQUEUE_MAX
 
_SC_SIGQUEUE_MAX


	)

144 
	m_SC_TIMER_MAX
,

145 
	#_SC_TIMER_MAX
 
_SC_TIMER_MAX


	)

149 
	m_SC_BC_BASE_MAX
,

150 
	#_SC_BC_BASE_MAX
 
_SC_BC_BASE_MAX


	)

151 
	m_SC_BC_DIM_MAX
,

152 
	#_SC_BC_DIM_MAX
 
_SC_BC_DIM_MAX


	)

153 
	m_SC_BC_SCALE_MAX
,

154 
	#_SC_BC_SCALE_MAX
 
_SC_BC_SCALE_MAX


	)

155 
	m_SC_BC_STRING_MAX
,

156 
	#_SC_BC_STRING_MAX
 
_SC_BC_STRING_MAX


	)

157 
	m_SC_COLL_WEIGHTS_MAX
,

158 
	#_SC_COLL_WEIGHTS_MAX
 
_SC_COLL_WEIGHTS_MAX


	)

159 
	m_SC_EQUIV_CLASS_MAX
,

160 
	#_SC_EQUIV_CLASS_MAX
 
_SC_EQUIV_CLASS_MAX


	)

161 
	m_SC_EXPR_NEST_MAX
,

162 
	#_SC_EXPR_NEST_MAX
 
_SC_EXPR_NEST_MAX


	)

163 
	m_SC_LINE_MAX
,

164 
	#_SC_LINE_MAX
 
_SC_LINE_MAX


	)

165 
	m_SC_RE_DUP_MAX
,

166 
	#_SC_RE_DUP_MAX
 
_SC_RE_DUP_MAX


	)

167 
	m_SC_CHARCLASS_NAME_MAX
,

168 
	#_SC_CHARCLASS_NAME_MAX
 
_SC_CHARCLASS_NAME_MAX


	)

170 
	m_SC_2_VERSION
,

171 
	#_SC_2_VERSION
 
_SC_2_VERSION


	)

172 
	m_SC_2_C_BIND
,

173 
	#_SC_2_C_BIND
 
_SC_2_C_BIND


	)

174 
	m_SC_2_C_DEV
,

175 
	#_SC_2_C_DEV
 
_SC_2_C_DEV


	)

176 
	m_SC_2_FORT_DEV
,

177 
	#_SC_2_FORT_DEV
 
_SC_2_FORT_DEV


	)

178 
	m_SC_2_FORT_RUN
,

179 
	#_SC_2_FORT_RUN
 
_SC_2_FORT_RUN


	)

180 
	m_SC_2_SW_DEV
,

181 
	#_SC_2_SW_DEV
 
_SC_2_SW_DEV


	)

182 
	m_SC_2_LOCALEDEF
,

183 
	#_SC_2_LOCALEDEF
 
_SC_2_LOCALEDEF


	)

185 
	m_SC_PII
,

186 
	#_SC_PII
 
_SC_PII


	)

187 
	m_SC_PII_XTI
,

188 
	#_SC_PII_XTI
 
_SC_PII_XTI


	)

189 
	m_SC_PII_SOCKET
,

190 
	#_SC_PII_SOCKET
 
_SC_PII_SOCKET


	)

191 
	m_SC_PII_INTERNET
,

192 
	#_SC_PII_INTERNET
 
_SC_PII_INTERNET


	)

193 
	m_SC_PII_OSI
,

194 
	#_SC_PII_OSI
 
_SC_PII_OSI


	)

195 
	m_SC_POLL
,

196 
	#_SC_POLL
 
_SC_POLL


	)

197 
	m_SC_SELECT
,

198 
	#_SC_SELECT
 
_SC_SELECT


	)

199 
	m_SC_UIO_MAXIOV
,

200 
	#_SC_UIO_MAXIOV
 
_SC_UIO_MAXIOV


	)

201 
	m_SC_IOV_MAX
 = 
_SC_UIO_MAXIOV
,

202 
	#_SC_IOV_MAX
 
_SC_IOV_MAX


	)

203 
	m_SC_PII_INTERNET_STREAM
,

204 
	#_SC_PII_INTERNET_STREAM
 
_SC_PII_INTERNET_STREAM


	)

205 
	m_SC_PII_INTERNET_DGRAM
,

206 
	#_SC_PII_INTERNET_DGRAM
 
_SC_PII_INTERNET_DGRAM


	)

207 
	m_SC_PII_OSI_COTS
,

208 
	#_SC_PII_OSI_COTS
 
_SC_PII_OSI_COTS


	)

209 
	m_SC_PII_OSI_CLTS
,

210 
	#_SC_PII_OSI_CLTS
 
_SC_PII_OSI_CLTS


	)

211 
	m_SC_PII_OSI_M
,

212 
	#_SC_PII_OSI_M
 
_SC_PII_OSI_M


	)

213 
	m_SC_T_IOV_MAX
,

214 
	#_SC_T_IOV_MAX
 
_SC_T_IOV_MAX


	)

217 
	m_SC_THREADS
,

218 
	#_SC_THREADS
 
_SC_THREADS


	)

219 
	m_SC_THREAD_SAFE_FUNCTIONS
,

220 
	#_SC_THREAD_SAFE_FUNCTIONS
 
_SC_THREAD_SAFE_FUNCTIONS


	)

221 
	m_SC_GETGR_R_SIZE_MAX
,

222 
	#_SC_GETGR_R_SIZE_MAX
 
_SC_GETGR_R_SIZE_MAX


	)

223 
	m_SC_GETPW_R_SIZE_MAX
,

224 
	#_SC_GETPW_R_SIZE_MAX
 
_SC_GETPW_R_SIZE_MAX


	)

225 
	m_SC_LOGIN_NAME_MAX
,

226 
	#_SC_LOGIN_NAME_MAX
 
_SC_LOGIN_NAME_MAX


	)

227 
	m_SC_TTY_NAME_MAX
,

228 
	#_SC_TTY_NAME_MAX
 
_SC_TTY_NAME_MAX


	)

229 
	m_SC_THREAD_DESTRUCTOR_ITERATIONS
,

230 
	#_SC_THREAD_DESTRUCTOR_ITERATIONS
 
_SC_THREAD_DESTRUCTOR_ITERATIONS


	)

231 
	m_SC_THREAD_KEYS_MAX
,

232 
	#_SC_THREAD_KEYS_MAX
 
_SC_THREAD_KEYS_MAX


	)

233 
	m_SC_THREAD_STACK_MIN
,

234 
	#_SC_THREAD_STACK_MIN
 
_SC_THREAD_STACK_MIN


	)

235 
	m_SC_THREAD_THREADS_MAX
,

236 
	#_SC_THREAD_THREADS_MAX
 
_SC_THREAD_THREADS_MAX


	)

237 
	m_SC_THREAD_ATTR_STACKADDR
,

238 
	#_SC_THREAD_ATTR_STACKADDR
 
_SC_THREAD_ATTR_STACKADDR


	)

239 
	m_SC_THREAD_ATTR_STACKSIZE
,

240 
	#_SC_THREAD_ATTR_STACKSIZE
 
_SC_THREAD_ATTR_STACKSIZE


	)

241 
	m_SC_THREAD_PRIORITY_SCHEDULING
,

242 
	#_SC_THREAD_PRIORITY_SCHEDULING
 
_SC_THREAD_PRIORITY_SCHEDULING


	)

243 
	m_SC_THREAD_PRIO_INHERIT
,

244 
	#_SC_THREAD_PRIO_INHERIT
 
_SC_THREAD_PRIO_INHERIT


	)

245 
	m_SC_THREAD_PRIO_PROTECT
,

246 
	#_SC_THREAD_PRIO_PROTECT
 
_SC_THREAD_PRIO_PROTECT


	)

247 
	m_SC_THREAD_PROCESS_SHARED
,

248 
	#_SC_THREAD_PROCESS_SHARED
 
_SC_THREAD_PROCESS_SHARED


	)

250 
	m_SC_NPROCESSORS_CONF
,

251 
	#_SC_NPROCESSORS_CONF
 
_SC_NPROCESSORS_CONF


	)

252 
	m_SC_NPROCESSORS_ONLN
,

253 
	#_SC_NPROCESSORS_ONLN
 
_SC_NPROCESSORS_ONLN


	)

254 
	m_SC_PHYS_PAGES
,

255 
	#_SC_PHYS_PAGES
 
_SC_PHYS_PAGES


	)

256 
	m_SC_AVPHYS_PAGES
,

257 
	#_SC_AVPHYS_PAGES
 
_SC_AVPHYS_PAGES


	)

258 
	m_SC_ATEXIT_MAX
,

259 
	#_SC_ATEXIT_MAX
 
_SC_ATEXIT_MAX


	)

260 
	m_SC_PASS_MAX
,

261 
	#_SC_PASS_MAX
 
_SC_PASS_MAX


	)

263 
	m_SC_XOPEN_VERSION
,

264 
	#_SC_XOPEN_VERSION
 
_SC_XOPEN_VERSION


	)

265 
	m_SC_XOPEN_XCU_VERSION
,

266 
	#_SC_XOPEN_XCU_VERSION
 
_SC_XOPEN_XCU_VERSION


	)

267 
	m_SC_XOPEN_UNIX
,

268 
	#_SC_XOPEN_UNIX
 
_SC_XOPEN_UNIX


	)

269 
	m_SC_XOPEN_CRYPT
,

270 
	#_SC_XOPEN_CRYPT
 
_SC_XOPEN_CRYPT


	)

271 
	m_SC_XOPEN_ENH_I18N
,

272 
	#_SC_XOPEN_ENH_I18N
 
_SC_XOPEN_ENH_I18N


	)

273 
	m_SC_XOPEN_SHM
,

274 
	#_SC_XOPEN_SHM
 
_SC_XOPEN_SHM


	)

276 
	m_SC_2_CHAR_TERM
,

277 
	#_SC_2_CHAR_TERM
 
_SC_2_CHAR_TERM


	)

278 
	m_SC_2_C_VERSION
,

279 
	#_SC_2_C_VERSION
 
_SC_2_C_VERSION


	)

280 
	m_SC_2_UPE
,

281 
	#_SC_2_UPE
 
_SC_2_UPE


	)

283 
	m_SC_XOPEN_XPG2
,

284 
	#_SC_XOPEN_XPG2
 
_SC_XOPEN_XPG2


	)

285 
	m_SC_XOPEN_XPG3
,

286 
	#_SC_XOPEN_XPG3
 
_SC_XOPEN_XPG3


	)

287 
	m_SC_XOPEN_XPG4
,

288 
	#_SC_XOPEN_XPG4
 
_SC_XOPEN_XPG4


	)

290 
	m_SC_CHAR_BIT
,

291 
	#_SC_CHAR_BIT
 
_SC_CHAR_BIT


	)

292 
	m_SC_CHAR_MAX
,

293 
	#_SC_CHAR_MAX
 
_SC_CHAR_MAX


	)

294 
	m_SC_CHAR_MIN
,

295 
	#_SC_CHAR_MIN
 
_SC_CHAR_MIN


	)

296 
	m_SC_INT_MAX
,

297 
	#_SC_INT_MAX
 
_SC_INT_MAX


	)

298 
	m_SC_INT_MIN
,

299 
	#_SC_INT_MIN
 
_SC_INT_MIN


	)

300 
	m_SC_LONG_BIT
,

301 
	#_SC_LONG_BIT
 
_SC_LONG_BIT


	)

302 
	m_SC_WORD_BIT
,

303 
	#_SC_WORD_BIT
 
_SC_WORD_BIT


	)

304 
	m_SC_MB_LEN_MAX
,

305 
	#_SC_MB_LEN_MAX
 
_SC_MB_LEN_MAX


	)

306 
	m_SC_NZERO
,

307 
	#_SC_NZERO
 
_SC_NZERO


	)

308 
	m_SC_SSIZE_MAX
,

309 
	#_SC_SSIZE_MAX
 
_SC_SSIZE_MAX


	)

310 
	m_SC_SCHAR_MAX
,

311 
	#_SC_SCHAR_MAX
 
_SC_SCHAR_MAX


	)

312 
	m_SC_SCHAR_MIN
,

313 
	#_SC_SCHAR_MIN
 
_SC_SCHAR_MIN


	)

314 
	m_SC_SHRT_MAX
,

315 
	#_SC_SHRT_MAX
 
_SC_SHRT_MAX


	)

316 
	m_SC_SHRT_MIN
,

317 
	#_SC_SHRT_MIN
 
_SC_SHRT_MIN


	)

318 
	m_SC_UCHAR_MAX
,

319 
	#_SC_UCHAR_MAX
 
_SC_UCHAR_MAX


	)

320 
	m_SC_UINT_MAX
,

321 
	#_SC_UINT_MAX
 
_SC_UINT_MAX


	)

322 
	m_SC_ULONG_MAX
,

323 
	#_SC_ULONG_MAX
 
_SC_ULONG_MAX


	)

324 
	m_SC_USHRT_MAX
,

325 
	#_SC_USHRT_MAX
 
_SC_USHRT_MAX


	)

327 
	m_SC_NL_ARGMAX
,

328 
	#_SC_NL_ARGMAX
 
_SC_NL_ARGMAX


	)

329 
	m_SC_NL_LANGMAX
,

330 
	#_SC_NL_LANGMAX
 
_SC_NL_LANGMAX


	)

331 
	m_SC_NL_MSGMAX
,

332 
	#_SC_NL_MSGMAX
 
_SC_NL_MSGMAX


	)

333 
	m_SC_NL_NMAX
,

334 
	#_SC_NL_NMAX
 
_SC_NL_NMAX


	)

335 
	m_SC_NL_SETMAX
,

336 
	#_SC_NL_SETMAX
 
_SC_NL_SETMAX


	)

337 
	m_SC_NL_TEXTMAX
,

338 
	#_SC_NL_TEXTMAX
 
_SC_NL_TEXTMAX


	)

340 
	m_SC_XBS5_ILP32_OFF32
,

341 
	#_SC_XBS5_ILP32_OFF32
 
_SC_XBS5_ILP32_OFF32


	)

342 
	m_SC_XBS5_ILP32_OFFBIG
,

343 
	#_SC_XBS5_ILP32_OFFBIG
 
_SC_XBS5_ILP32_OFFBIG


	)

344 
	m_SC_XBS5_LP64_OFF64
,

345 
	#_SC_XBS5_LP64_OFF64
 
_SC_XBS5_LP64_OFF64


	)

346 
	m_SC_XBS5_LPBIG_OFFBIG
,

347 
	#_SC_XBS5_LPBIG_OFFBIG
 
_SC_XBS5_LPBIG_OFFBIG


	)

349 
	m_SC_XOPEN_LEGACY
,

350 
	#_SC_XOPEN_LEGACY
 
_SC_XOPEN_LEGACY


	)

351 
	m_SC_XOPEN_REALTIME
,

352 
	#_SC_XOPEN_REALTIME
 
_SC_XOPEN_REALTIME


	)

353 
	m_SC_XOPEN_REALTIME_THREADS
,

354 
	#_SC_XOPEN_REALTIME_THREADS
 
_SC_XOPEN_REALTIME_THREADS


	)

356 
	m_SC_ADVISORY_INFO
,

357 
	#_SC_ADVISORY_INFO
 
_SC_ADVISORY_INFO


	)

358 
	m_SC_BARRIERS
,

359 
	#_SC_BARRIERS
 
_SC_BARRIERS


	)

360 
	m_SC_BASE
,

361 
	#_SC_BASE
 
_SC_BASE


	)

362 
	m_SC_C_LANG_SUPPORT
,

363 
	#_SC_C_LANG_SUPPORT
 
_SC_C_LANG_SUPPORT


	)

364 
	m_SC_C_LANG_SUPPORT_R
,

365 
	#_SC_C_LANG_SUPPORT_R
 
_SC_C_LANG_SUPPORT_R


	)

366 
	m_SC_CLOCK_SELECTION
,

367 
	#_SC_CLOCK_SELECTION
 
_SC_CLOCK_SELECTION


	)

368 
	m_SC_CPUTIME
,

369 
	#_SC_CPUTIME
 
_SC_CPUTIME


	)

370 
	m_SC_THREAD_CPUTIME
,

371 
	#_SC_THREAD_CPUTIME
 
_SC_THREAD_CPUTIME


	)

372 
	m_SC_DEVICE_IO
,

373 
	#_SC_DEVICE_IO
 
_SC_DEVICE_IO


	)

374 
	m_SC_DEVICE_SPECIFIC
,

375 
	#_SC_DEVICE_SPECIFIC
 
_SC_DEVICE_SPECIFIC


	)

376 
	m_SC_DEVICE_SPECIFIC_R
,

377 
	#_SC_DEVICE_SPECIFIC_R
 
_SC_DEVICE_SPECIFIC_R


	)

378 
	m_SC_FD_MGMT
,

379 
	#_SC_FD_MGMT
 
_SC_FD_MGMT


	)

380 
	m_SC_FIFO
,

381 
	#_SC_FIFO
 
_SC_FIFO


	)

382 
	m_SC_PIPE
,

383 
	#_SC_PIPE
 
_SC_PIPE


	)

384 
	m_SC_FILE_ATTRIBUTES
,

385 
	#_SC_FILE_ATTRIBUTES
 
_SC_FILE_ATTRIBUTES


	)

386 
	m_SC_FILE_LOCKING
,

387 
	#_SC_FILE_LOCKING
 
_SC_FILE_LOCKING


	)

388 
	m_SC_FILE_SYSTEM
,

389 
	#_SC_FILE_SYSTEM
 
_SC_FILE_SYSTEM


	)

390 
	m_SC_MONOTONIC_CLOCK
,

391 
	#_SC_MONOTONIC_CLOCK
 
_SC_MONOTONIC_CLOCK


	)

392 
	m_SC_MULTI_PROCESS
,

393 
	#_SC_MULTI_PROCESS
 
_SC_MULTI_PROCESS


	)

394 
	m_SC_SINGLE_PROCESS
,

395 
	#_SC_SINGLE_PROCESS
 
_SC_SINGLE_PROCESS


	)

396 
	m_SC_NETWORKING
,

397 
	#_SC_NETWORKING
 
_SC_NETWORKING


	)

398 
	m_SC_READER_WRITER_LOCKS
,

399 
	#_SC_READER_WRITER_LOCKS
 
_SC_READER_WRITER_LOCKS


	)

400 
	m_SC_SPIN_LOCKS
,

401 
	#_SC_SPIN_LOCKS
 
_SC_SPIN_LOCKS


	)

402 
	m_SC_REGEXP
,

403 
	#_SC_REGEXP
 
_SC_REGEXP


	)

404 
	m_SC_REGEX_VERSION
,

405 
	#_SC_REGEX_VERSION
 
_SC_REGEX_VERSION


	)

406 
	m_SC_SHELL
,

407 
	#_SC_SHELL
 
_SC_SHELL


	)

408 
	m_SC_SIGNALS
,

409 
	#_SC_SIGNALS
 
_SC_SIGNALS


	)

410 
	m_SC_SPAWN
,

411 
	#_SC_SPAWN
 
_SC_SPAWN


	)

412 
	m_SC_SPORADIC_SERVER
,

413 
	#_SC_SPORADIC_SERVER
 
_SC_SPORADIC_SERVER


	)

414 
	m_SC_THREAD_SPORADIC_SERVER
,

415 
	#_SC_THREAD_SPORADIC_SERVER
 
_SC_THREAD_SPORADIC_SERVER


	)

416 
	m_SC_SYSTEM_DATABASE
,

417 
	#_SC_SYSTEM_DATABASE
 
_SC_SYSTEM_DATABASE


	)

418 
	m_SC_SYSTEM_DATABASE_R
,

419 
	#_SC_SYSTEM_DATABASE_R
 
_SC_SYSTEM_DATABASE_R


	)

420 
	m_SC_TIMEOUTS
,

421 
	#_SC_TIMEOUTS
 
_SC_TIMEOUTS


	)

422 
	m_SC_TYPED_MEMORY_OBJECTS
,

423 
	#_SC_TYPED_MEMORY_OBJECTS
 
_SC_TYPED_MEMORY_OBJECTS


	)

424 
	m_SC_USER_GROUPS
,

425 
	#_SC_USER_GROUPS
 
_SC_USER_GROUPS


	)

426 
	m_SC_USER_GROUPS_R
,

427 
	#_SC_USER_GROUPS_R
 
_SC_USER_GROUPS_R


	)

428 
	m_SC_2_PBS
,

429 
	#_SC_2_PBS
 
_SC_2_PBS


	)

430 
	m_SC_2_PBS_ACCOUNTING
,

431 
	#_SC_2_PBS_ACCOUNTING
 
_SC_2_PBS_ACCOUNTING


	)

432 
	m_SC_2_PBS_LOCATE
,

433 
	#_SC_2_PBS_LOCATE
 
_SC_2_PBS_LOCATE


	)

434 
	m_SC_2_PBS_MESSAGE
,

435 
	#_SC_2_PBS_MESSAGE
 
_SC_2_PBS_MESSAGE


	)

436 
	m_SC_2_PBS_TRACK
,

437 
	#_SC_2_PBS_TRACK
 
_SC_2_PBS_TRACK


	)

438 
	m_SC_SYMLOOP_MAX
,

439 
	#_SC_SYMLOOP_MAX
 
_SC_SYMLOOP_MAX


	)

440 
	m_SC_STREAMS
,

441 
	#_SC_STREAMS
 
_SC_STREAMS


	)

442 
	m_SC_2_PBS_CHECKPOINT
,

443 
	#_SC_2_PBS_CHECKPOINT
 
_SC_2_PBS_CHECKPOINT


	)

445 
	m_SC_V6_ILP32_OFF32
,

446 
	#_SC_V6_ILP32_OFF32
 
_SC_V6_ILP32_OFF32


	)

447 
	m_SC_V6_ILP32_OFFBIG
,

448 
	#_SC_V6_ILP32_OFFBIG
 
_SC_V6_ILP32_OFFBIG


	)

449 
	m_SC_V6_LP64_OFF64
,

450 
	#_SC_V6_LP64_OFF64
 
_SC_V6_LP64_OFF64


	)

451 
	m_SC_V6_LPBIG_OFFBIG
,

452 
	#_SC_V6_LPBIG_OFFBIG
 
_SC_V6_LPBIG_OFFBIG


	)

454 
	m_SC_HOST_NAME_MAX
,

455 
	#_SC_HOST_NAME_MAX
 
_SC_HOST_NAME_MAX


	)

456 
	m_SC_TRACE
,

457 
	#_SC_TRACE
 
_SC_TRACE


	)

458 
	m_SC_TRACE_EVENT_FILTER
,

459 
	#_SC_TRACE_EVENT_FILTER
 
_SC_TRACE_EVENT_FILTER


	)

460 
	m_SC_TRACE_INHERIT
,

461 
	#_SC_TRACE_INHERIT
 
_SC_TRACE_INHERIT


	)

462 
	m_SC_TRACE_LOG
,

463 
	#_SC_TRACE_LOG
 
_SC_TRACE_LOG


	)

465 
	m_SC_LEVEL1_ICACHE_SIZE
,

466 
	#_SC_LEVEL1_ICACHE_SIZE
 
_SC_LEVEL1_ICACHE_SIZE


	)

467 
	m_SC_LEVEL1_ICACHE_ASSOC
,

468 
	#_SC_LEVEL1_ICACHE_ASSOC
 
_SC_LEVEL1_ICACHE_ASSOC


	)

469 
	m_SC_LEVEL1_ICACHE_LINESIZE
,

470 
	#_SC_LEVEL1_ICACHE_LINESIZE
 
_SC_LEVEL1_ICACHE_LINESIZE


	)

471 
	m_SC_LEVEL1_DCACHE_SIZE
,

472 
	#_SC_LEVEL1_DCACHE_SIZE
 
_SC_LEVEL1_DCACHE_SIZE


	)

473 
	m_SC_LEVEL1_DCACHE_ASSOC
,

474 
	#_SC_LEVEL1_DCACHE_ASSOC
 
_SC_LEVEL1_DCACHE_ASSOC


	)

475 
	m_SC_LEVEL1_DCACHE_LINESIZE
,

476 
	#_SC_LEVEL1_DCACHE_LINESIZE
 
_SC_LEVEL1_DCACHE_LINESIZE


	)

477 
	m_SC_LEVEL2_CACHE_SIZE
,

478 
	#_SC_LEVEL2_CACHE_SIZE
 
_SC_LEVEL2_CACHE_SIZE


	)

479 
	m_SC_LEVEL2_CACHE_ASSOC
,

480 
	#_SC_LEVEL2_CACHE_ASSOC
 
_SC_LEVEL2_CACHE_ASSOC


	)

481 
	m_SC_LEVEL2_CACHE_LINESIZE
,

482 
	#_SC_LEVEL2_CACHE_LINESIZE
 
_SC_LEVEL2_CACHE_LINESIZE


	)

483 
	m_SC_LEVEL3_CACHE_SIZE
,

484 
	#_SC_LEVEL3_CACHE_SIZE
 
_SC_LEVEL3_CACHE_SIZE


	)

485 
	m_SC_LEVEL3_CACHE_ASSOC
,

486 
	#_SC_LEVEL3_CACHE_ASSOC
 
_SC_LEVEL3_CACHE_ASSOC


	)

487 
	m_SC_LEVEL3_CACHE_LINESIZE
,

488 
	#_SC_LEVEL3_CACHE_LINESIZE
 
_SC_LEVEL3_CACHE_LINESIZE


	)

489 
	m_SC_LEVEL4_CACHE_SIZE
,

490 
	#_SC_LEVEL4_CACHE_SIZE
 
_SC_LEVEL4_CACHE_SIZE


	)

491 
	m_SC_LEVEL4_CACHE_ASSOC
,

492 
	#_SC_LEVEL4_CACHE_ASSOC
 
_SC_LEVEL4_CACHE_ASSOC


	)

493 
	m_SC_LEVEL4_CACHE_LINESIZE
,

494 
	#_SC_LEVEL4_CACHE_LINESIZE
 
_SC_LEVEL4_CACHE_LINESIZE


	)

497 
	m_SC_IPV6
 = 
_SC_LEVEL1_ICACHE_SIZE
 + 50,

498 
	#_SC_IPV6
 
_SC_IPV6


	)

499 
	m_SC_RAW_SOCKETS
,

500 
	#_SC_RAW_SOCKETS
 
_SC_RAW_SOCKETS


	)

502 
	m_SC_V7_ILP32_OFF32
,

503 
	#_SC_V7_ILP32_OFF32
 
_SC_V7_ILP32_OFF32


	)

504 
	m_SC_V7_ILP32_OFFBIG
,

505 
	#_SC_V7_ILP32_OFFBIG
 
_SC_V7_ILP32_OFFBIG


	)

506 
	m_SC_V7_LP64_OFF64
,

507 
	#_SC_V7_LP64_OFF64
 
_SC_V7_LP64_OFF64


	)

508 
	m_SC_V7_LPBIG_OFFBIG
,

509 
	#_SC_V7_LPBIG_OFFBIG
 
_SC_V7_LPBIG_OFFBIG


	)

511 
	m_SC_SS_REPL_MAX
,

512 
	#_SC_SS_REPL_MAX
 
_SC_SS_REPL_MAX


	)

514 
	m_SC_TRACE_EVENT_NAME_MAX
,

515 
	#_SC_TRACE_EVENT_NAME_MAX
 
_SC_TRACE_EVENT_NAME_MAX


	)

516 
	m_SC_TRACE_NAME_MAX
,

517 
	#_SC_TRACE_NAME_MAX
 
_SC_TRACE_NAME_MAX


	)

518 
	m_SC_TRACE_SYS_MAX
,

519 
	#_SC_TRACE_SYS_MAX
 
_SC_TRACE_SYS_MAX


	)

520 
	m_SC_TRACE_USER_EVENT_MAX
,

521 
	#_SC_TRACE_USER_EVENT_MAX
 
_SC_TRACE_USER_EVENT_MAX


	)

523 
	m_SC_XOPEN_STREAMS
,

524 
	#_SC_XOPEN_STREAMS
 
_SC_XOPEN_STREAMS


	)

526 
	m_SC_THREAD_ROBUST_PRIO_INHERIT
,

527 
	#_SC_THREAD_ROBUST_PRIO_INHERIT
 
_SC_THREAD_ROBUST_PRIO_INHERIT


	)

528 
	m_SC_THREAD_ROBUST_PRIO_PROTECT


529 
	#_SC_THREAD_ROBUST_PRIO_PROTECT
 
_SC_THREAD_ROBUST_PRIO_PROTECT


	)

535 
	m_CS_PATH
,

536 
	#_CS_PATH
 
_CS_PATH


	)

538 
	m_CS_V6_WIDTH_RESTRICTED_ENVS
,

539 
	#_CS_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

540 
	#_CS_POSIX_V6_WIDTH_RESTRICTED_ENVS
 
_CS_V6_WIDTH_RESTRICTED_ENVS


	)

542 
	m_CS_GNU_LIBC_VERSION
,

543 
	#_CS_GNU_LIBC_VERSION
 
_CS_GNU_LIBC_VERSION


	)

544 
	m_CS_GNU_LIBPTHREAD_VERSION
,

545 
	#_CS_GNU_LIBPTHREAD_VERSION
 
_CS_GNU_LIBPTHREAD_VERSION


	)

547 
	m_CS_V5_WIDTH_RESTRICTED_ENVS
,

548 
	#_CS_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

549 
	#_CS_POSIX_V5_WIDTH_RESTRICTED_ENVS
 
_CS_V5_WIDTH_RESTRICTED_ENVS


	)

551 
	m_CS_V7_WIDTH_RESTRICTED_ENVS
,

552 
	#_CS_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

553 
	#_CS_POSIX_V7_WIDTH_RESTRICTED_ENVS
 
_CS_V7_WIDTH_RESTRICTED_ENVS


	)

555 
	m_CS_LFS_CFLAGS
 = 1000,

556 
	#_CS_LFS_CFLAGS
 
_CS_LFS_CFLAGS


	)

557 
	m_CS_LFS_LDFLAGS
,

558 
	#_CS_LFS_LDFLAGS
 
_CS_LFS_LDFLAGS


	)

559 
	m_CS_LFS_LIBS
,

560 
	#_CS_LFS_LIBS
 
_CS_LFS_LIBS


	)

561 
	m_CS_LFS_LINTFLAGS
,

562 
	#_CS_LFS_LINTFLAGS
 
_CS_LFS_LINTFLAGS


	)

563 
	m_CS_LFS64_CFLAGS
,

564 
	#_CS_LFS64_CFLAGS
 
_CS_LFS64_CFLAGS


	)

565 
	m_CS_LFS64_LDFLAGS
,

566 
	#_CS_LFS64_LDFLAGS
 
_CS_LFS64_LDFLAGS


	)

567 
	m_CS_LFS64_LIBS
,

568 
	#_CS_LFS64_LIBS
 
_CS_LFS64_LIBS


	)

569 
	m_CS_LFS64_LINTFLAGS
,

570 
	#_CS_LFS64_LINTFLAGS
 
_CS_LFS64_LINTFLAGS


	)

572 
	m_CS_XBS5_ILP32_OFF32_CFLAGS
 = 1100,

573 
	#_CS_XBS5_ILP32_OFF32_CFLAGS
 
_CS_XBS5_ILP32_OFF32_CFLAGS


	)

574 
	m_CS_XBS5_ILP32_OFF32_LDFLAGS
,

575 
	#_CS_XBS5_ILP32_OFF32_LDFLAGS
 
_CS_XBS5_ILP32_OFF32_LDFLAGS


	)

576 
	m_CS_XBS5_ILP32_OFF32_LIBS
,

577 
	#_CS_XBS5_ILP32_OFF32_LIBS
 
_CS_XBS5_ILP32_OFF32_LIBS


	)

578 
	m_CS_XBS5_ILP32_OFF32_LINTFLAGS
,

579 
	#_CS_XBS5_ILP32_OFF32_LINTFLAGS
 
_CS_XBS5_ILP32_OFF32_LINTFLAGS


	)

580 
	m_CS_XBS5_ILP32_OFFBIG_CFLAGS
,

581 
	#_CS_XBS5_ILP32_OFFBIG_CFLAGS
 
_CS_XBS5_ILP32_OFFBIG_CFLAGS


	)

582 
	m_CS_XBS5_ILP32_OFFBIG_LDFLAGS
,

583 
	#_CS_XBS5_ILP32_OFFBIG_LDFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LDFLAGS


	)

584 
	m_CS_XBS5_ILP32_OFFBIG_LIBS
,

585 
	#_CS_XBS5_ILP32_OFFBIG_LIBS
 
_CS_XBS5_ILP32_OFFBIG_LIBS


	)

586 
	m_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
,

587 
	#_CS_XBS5_ILP32_OFFBIG_LINTFLAGS
 
_CS_XBS5_ILP32_OFFBIG_LINTFLAGS


	)

588 
	m_CS_XBS5_LP64_OFF64_CFLAGS
,

589 
	#_CS_XBS5_LP64_OFF64_CFLAGS
 
_CS_XBS5_LP64_OFF64_CFLAGS


	)

590 
	m_CS_XBS5_LP64_OFF64_LDFLAGS
,

591 
	#_CS_XBS5_LP64_OFF64_LDFLAGS
 
_CS_XBS5_LP64_OFF64_LDFLAGS


	)

592 
	m_CS_XBS5_LP64_OFF64_LIBS
,

593 
	#_CS_XBS5_LP64_OFF64_LIBS
 
_CS_XBS5_LP64_OFF64_LIBS


	)

594 
	m_CS_XBS5_LP64_OFF64_LINTFLAGS
,

595 
	#_CS_XBS5_LP64_OFF64_LINTFLAGS
 
_CS_XBS5_LP64_OFF64_LINTFLAGS


	)

596 
	m_CS_XBS5_LPBIG_OFFBIG_CFLAGS
,

597 
	#_CS_XBS5_LPBIG_OFFBIG_CFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_CFLAGS


	)

598 
	m_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
,

599 
	#_CS_XBS5_LPBIG_OFFBIG_LDFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LDFLAGS


	)

600 
	m_CS_XBS5_LPBIG_OFFBIG_LIBS
,

601 
	#_CS_XBS5_LPBIG_OFFBIG_LIBS
 
_CS_XBS5_LPBIG_OFFBIG_LIBS


	)

602 
	m_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
,

603 
	#_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS
 
_CS_XBS5_LPBIG_OFFBIG_LINTFLAGS


	)

605 
	m_CS_POSIX_V6_ILP32_OFF32_CFLAGS
,

606 
	#_CS_POSIX_V6_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_CFLAGS


	)

607 
	m_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
,

608 
	#_CS_POSIX_V6_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LDFLAGS


	)

609 
	m_CS_POSIX_V6_ILP32_OFF32_LIBS
,

610 
	#_CS_POSIX_V6_ILP32_OFF32_LIBS
 
_CS_POSIX_V6_ILP32_OFF32_LIBS


	)

611 
	m_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
,

612 
	#_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFF32_LINTFLAGS


	)

613 
	m_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
,

614 
	#_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_CFLAGS


	)

615 
	m_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
,

616 
	#_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS


	)

617 
	m_CS_POSIX_V6_ILP32_OFFBIG_LIBS
,

618 
	#_CS_POSIX_V6_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V6_ILP32_OFFBIG_LIBS


	)

619 
	m_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
,

620 
	#_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS


	)

621 
	m_CS_POSIX_V6_LP64_OFF64_CFLAGS
,

622 
	#_CS_POSIX_V6_LP64_OFF64_CFLAGS
 
_CS_POSIX_V6_LP64_OFF64_CFLAGS


	)

623 
	m_CS_POSIX_V6_LP64_OFF64_LDFLAGS
,

624 
	#_CS_POSIX_V6_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LDFLAGS


	)

625 
	m_CS_POSIX_V6_LP64_OFF64_LIBS
,

626 
	#_CS_POSIX_V6_LP64_OFF64_LIBS
 
_CS_POSIX_V6_LP64_OFF64_LIBS


	)

627 
	m_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
,

628 
	#_CS_POSIX_V6_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V6_LP64_OFF64_LINTFLAGS


	)

629 
	m_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
,

630 
	#_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS


	)

631 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
,

632 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS


	)

633 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
,

634 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LIBS


	)

635 
	m_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
,

636 
	#_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS


	)

638 
	m_CS_POSIX_V7_ILP32_OFF32_CFLAGS
,

639 
	#_CS_POSIX_V7_ILP32_OFF32_CFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_CFLAGS


	)

640 
	m_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
,

641 
	#_CS_POSIX_V7_ILP32_OFF32_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LDFLAGS


	)

642 
	m_CS_POSIX_V7_ILP32_OFF32_LIBS
,

643 
	#_CS_POSIX_V7_ILP32_OFF32_LIBS
 
_CS_POSIX_V7_ILP32_OFF32_LIBS


	)

644 
	m_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
,

645 
	#_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFF32_LINTFLAGS


	)

646 
	m_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
,

647 
	#_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_CFLAGS


	)

648 
	m_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
,

649 
	#_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS


	)

650 
	m_CS_POSIX_V7_ILP32_OFFBIG_LIBS
,

651 
	#_CS_POSIX_V7_ILP32_OFFBIG_LIBS
 
_CS_POSIX_V7_ILP32_OFFBIG_LIBS


	)

652 
	m_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
,

653 
	#_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS


	)

654 
	m_CS_POSIX_V7_LP64_OFF64_CFLAGS
,

655 
	#_CS_POSIX_V7_LP64_OFF64_CFLAGS
 
_CS_POSIX_V7_LP64_OFF64_CFLAGS


	)

656 
	m_CS_POSIX_V7_LP64_OFF64_LDFLAGS
,

657 
	#_CS_POSIX_V7_LP64_OFF64_LDFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LDFLAGS


	)

658 
	m_CS_POSIX_V7_LP64_OFF64_LIBS
,

659 
	#_CS_POSIX_V7_LP64_OFF64_LIBS
 
_CS_POSIX_V7_LP64_OFF64_LIBS


	)

660 
	m_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
,

661 
	#_CS_POSIX_V7_LP64_OFF64_LINTFLAGS
 
_CS_POSIX_V7_LP64_OFF64_LINTFLAGS


	)

662 
	m_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
,

663 
	#_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS


	)

664 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
,

665 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS


	)

666 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
,

667 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LIBS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LIBS


	)

668 
	m_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
,

669 
	#_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS
 
_CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS


	)

671 
	m_CS_V6_ENV
,

672 
	#_CS_V6_ENV
 
_CS_V6_ENV


	)

673 
	m_CS_V7_ENV


674 
	#_CS_V7_ENV
 
_CS_V7_ENV


	)

	@/usr/include/bits/environments.h

18 #i‚de‡
_UNISTD_H


22 
	~<bôs/w‹dsize.h
>

42 #i‡
__WORDSIZE
 == 64

56 
	#_POSIX_V7_LPBIG_OFFBIG
 -1

	)

57 
	#_POSIX_V6_LPBIG_OFFBIG
 -1

	)

58 
	#_XBS5_LPBIG_OFFBIG
 -1

	)

61 
	#_POSIX_V7_LP64_OFF64
 1

	)

62 
	#_POSIX_V6_LP64_OFF64
 1

	)

63 
	#_XBS5_LP64_OFF64
 1

	)

69 
	#_POSIX_V7_ILP32_OFFBIG
 1

	)

70 
	#_POSIX_V6_ILP32_OFFBIG
 1

	)

71 
	#_XBS5_ILP32_OFFBIG
 1

	)

73 #i‚de‡
__x86_64__


75 
	#_POSIX_V7_ILP32_OFF32
 1

	)

76 
	#_POSIX_V6_ILP32_OFF32
 1

	)

77 
	#_XBS5_ILP32_OFF32
 1

	)

95 
	#__ILP32_OFF32_CFLAGS
 "-m32"

	)

96 
	#__ILP32_OFF32_LDFLAGS
 "-m32"

	)

97 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


98 
	#__ILP32_OFFBIG_CFLAGS
 "-mx32"

	)

99 
	#__ILP32_OFFBIG_LDFLAGS
 "-mx32"

	)

101 
	#__ILP32_OFFBIG_CFLAGS
 "-m32 -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

	)

102 
	#__ILP32_OFFBIG_LDFLAGS
 "-m32"

	)

104 
	#__LP64_OFF64_CFLAGS
 "-m64"

	)

105 
	#__LP64_OFF64_LDFLAGS
 "-m64"

	)

	@/usr/include/bits/errno.h

19 #ifde‡
_ERRNO_H


21 #unde‡
EDOM


22 #unde‡
EILSEQ


23 #unde‡
ERANGE


24 
	~<löux/î∫o.h
>

27 
	#ENOTSUP
 
EOPNOTSUPP


	)

30 #i‚de‡
ECANCELED


31 
	#ECANCELED
 125

	)

35 #i‚de‡
EOWNERDEAD


36 
	#EOWNERDEAD
 130

	)

37 
	#ENOTRECOVERABLE
 131

	)

40 #i‚de‡
ERFKILL


41 
	#ERFKILL
 132

	)

44 #i‚de‡
EHWPOISON


45 
	#EHWPOISON
 133

	)

48 #i‚de‡
__ASSEMBLER__


50 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

52 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


54 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

59 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


63 
	#EDOM
 33

	)

64 
	#EILSEQ
 84

	)

65 
	#ERANGE
 34

	)

	@/usr/include/bits/fcntl.h

19 #i‚de‡
_FCNTL_H


23 #ifde‡
__x86_64__


24 
	#__O_LARGEFILE
 0

	)

27 #ifde‡
__x86_64__


29 
	#F_GETLK64
 5

	)

30 
	#F_SETLK64
 6

	)

31 
	#F_SETLKW64
 7

	)

35 
	sÊock


37 
	ml_ty≥
;

38 
	ml_whí˚
;

39 #i‚de‡
__USE_FILE_OFFSET64


40 
__off_t
 
	ml_°¨t
;

41 
__off_t
 
	ml_Àn
;

43 
__off64_t
 
	ml_°¨t
;

44 
__off64_t
 
	ml_Àn
;

46 
__pid_t
 
	ml_pid
;

49 #ifde‡
__USE_LARGEFILE64


50 
	sÊock64


52 
	ml_ty≥
;

53 
	ml_whí˚
;

54 
__off64_t
 
	ml_°¨t
;

55 
__off64_t
 
	ml_Àn
;

56 
__pid_t
 
	ml_pid
;

61 
	~<bôs/f˙é-löux.h
>

	@/usr/include/bits/fcntl2.h

19 #i‚def 
_FCNTL_H


25 #i‚de‡
__USE_FILE_OFFSET64


26 
	$__›í_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

27 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

28 
›í
Ë
	`__n⁄nuŒ
 ((1));

30 
	`__REDIRECT
 (
__›í_2
, (c⁄° *
__∑th
, 
__oÊag
),

31 
__›í64_2
Ë
	`__n⁄nuŒ
 ((1));

32 
	`__REDIRECT
 (
__›í_Æüs
, (c⁄° *
__∑th
, 
__oÊag
, ...),

33 
›í64
Ë
	`__n⁄nuŒ
 ((1));

35 
	`__îr‹de˛
 (
__›í_too_m™y_¨gs
,

37 
	`__îr‹de˛
 (
__›í_missög_mode
,

40 
__f‹tify_fun˘i⁄
 

41 
	$›í
 (c⁄° *
__∑th
, 
__oÊag
, ...)

43 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

44 
	`__›í_too_m™y_¨gs
 ();

46 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

48 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

50 
	`__›í_missög_mode
 ();

51  
	`__›í_2
 (
__∑th
, 
__oÊag
);

53  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

56 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

57  
	`__›í_2
 (
__∑th
, 
__oÊag
);

59  
	`__›í_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

60 
	}
}

63 #ifde‡
__USE_LARGEFILE64


64 
	$__›í64_2
 (c⁄° *
__∑th
, 
__oÊag
Ë
	`__n⁄nuŒ
 ((1));

65 
	`__REDIRECT
 (
__›í64_Æüs
, (c⁄° *
__∑th
, 
__oÊag
,

66 ...), 
›í64
Ë
	`__n⁄nuŒ
 ((1));

67 
	`__îr‹de˛
 (
__›í64_too_m™y_¨gs
,

69 
	`__îr‹de˛
 (
__›í64_missög_mode
,

72 
__f‹tify_fun˘i⁄
 

73 
	$›í64
 (c⁄° *
__∑th
, 
__oÊag
, ...)

75 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

76 
	`__›í64_too_m™y_¨gs
 ();

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

80 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

82 
	`__›í64_missög_mode
 ();

83  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

85  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

88 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

89  
	`__›í64_2
 (
__∑th
, 
__oÊag
);

91  
	`__›í64_Æüs
 (
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

92 
	}
}

96 #ifde‡
__USE_ATFILE


97 #i‚de‡
__USE_FILE_OFFSET64


98 
	$__›í©_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

99 
	`__n⁄nuŒ
 ((2));

100 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

101 
__oÊag
, ...), 
›í©
)

102 
	`__n⁄nuŒ
 ((2));

104 
	`__REDIRECT
 (
__›í©_2
, (
__fd
, c⁄° *
__∑th
,

105 
__oÊag
), 
__›í©64_2
)

106 
	`__n⁄nuŒ
 ((2));

107 
	`__REDIRECT
 (
__›í©_Æüs
, (
__fd
, c⁄° *
__∑th
,

108 
__oÊag
, ...), 
›í©64
)

109 
	`__n⁄nuŒ
 ((2));

111 
	`__îr‹de˛
 (
__›í©_too_m™y_¨gs
,

113 
	`__îr‹de˛
 (
__›í©_missög_mode
,

116 
__f‹tify_fun˘i⁄
 

117 
	$›í©
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

119 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

120 
	`__›í©_too_m™y_¨gs
 ();

122 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

124 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

126 
	`__›í©_missög_mode
 ();

127  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

129  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

132 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

133  
	`__›í©_2
 (
__fd
, 
__∑th
, 
__oÊag
);

135  
	`__›í©_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

136 
	}
}

139 #ifde‡
__USE_LARGEFILE64


140 
	$__›í©64_2
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
)

141 
	`__n⁄nuŒ
 ((2));

142 
	`__REDIRECT
 (
__›í©64_Æüs
, (
__fd
, c⁄° *
__∑th
,

143 
__oÊag
, ...), 
›í©64
)

144 
	`__n⁄nuŒ
 ((2));

145 
	`__îr‹de˛
 (
__›í©64_too_m™y_¨gs
,

147 
	`__îr‹de˛
 (
__›í©64_missög_mode
,

150 
__f‹tify_fun˘i⁄
 

151 
	$›í©64
 (
__fd
, c⁄° *
__∑th
, 
__oÊag
, ...)

153 i‡(
	`__va_¨g_∑ck_Àn
 () > 1)

154 
	`__›í©64_too_m™y_¨gs
 ();

156 i‡(
	`__buûtö_c⁄°™t_p
 (
__oÊag
))

158 i‡((
__oÊag
 & 
O_CREAT
Ë!0 && 
	`__va_¨g_∑ck_Àn
 () < 1)

160 
	`__›í©64_missög_mode
 ();

161  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

163  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

166 i‡(
	`__va_¨g_∑ck_Àn
 () < 1)

167  
	`__›í©64_2
 (
__fd
, 
__∑th
, 
__oÊag
);

169  
	`__›í©64_Æüs
 (
__fd
, 
__∑th
, 
__oÊag
, 
	`__va_¨g_∑ck
 ());

170 
	}
}

	@/usr/include/bits/ioctl-types.h

19 #i‚de‡
_SYS_IOCTL_H


24 
	~<asm/io˘ls.h
>

27 
	swösize


29 
	mws_row
;

30 
	mws_cﬁ
;

31 
	mws_xpixñ
;

32 
	mws_ypixñ
;

35 
	#NCC
 8

	)

36 
	sãrmio


38 
	mc_iÊag
;

39 
	mc_oÊag
;

40 
	mc_cÊag
;

41 
	mc_lÊag
;

42 
	mc_löe
;

43 
	mc_cc
[
NCC
];

47 
	#TIOCM_LE
 0x001

	)

48 
	#TIOCM_DTR
 0x002

	)

49 
	#TIOCM_RTS
 0x004

	)

50 
	#TIOCM_ST
 0x008

	)

51 
	#TIOCM_SR
 0x010

	)

52 
	#TIOCM_CTS
 0x020

	)

53 
	#TIOCM_CAR
 0x040

	)

54 
	#TIOCM_RNG
 0x080

	)

55 
	#TIOCM_DSR
 0x100

	)

56 
	#TIOCM_CD
 
TIOCM_CAR


	)

57 
	#TIOCM_RI
 
TIOCM_RNG


	)

62 
	#N_TTY
 0

	)

63 
	#N_SLIP
 1

	)

64 
	#N_MOUSE
 2

	)

65 
	#N_PPP
 3

	)

66 
	#N_STRIP
 4

	)

67 
	#N_AX25
 5

	)

68 
	#N_X25
 6

	)

69 
	#N_6PACK
 7

	)

70 
	#N_MASC
 8

	)

71 
	#N_R3964
 9

	)

72 
	#N_PROFIBUS_FDL
 10

	)

73 
	#N_IRDA
 11

	)

74 
	#N_SMSBLOCK
 12

	)

75 
	#N_HDLC
 13

	)

76 
	#N_SYNC_PPP
 14

	)

77 
	#N_HCI
 15

	)

	@/usr/include/bits/ioctls.h

18 #i‚de‡
_SYS_IOCTL_H


23 
	~<asm/io˘ls.h
>

26 
	#SIOCADDRT
 0x890B

	)

27 
	#SIOCDELRT
 0x890C

	)

28 
	#SIOCRTMSG
 0x890D

	)

31 
	#SIOCGIFNAME
 0x8910

	)

32 
	#SIOCSIFLINK
 0x8911

	)

33 
	#SIOCGIFCONF
 0x8912

	)

34 
	#SIOCGIFFLAGS
 0x8913

	)

35 
	#SIOCSIFFLAGS
 0x8914

	)

36 
	#SIOCGIFADDR
 0x8915

	)

37 
	#SIOCSIFADDR
 0x8916

	)

38 
	#SIOCGIFDSTADDR
 0x8917

	)

39 
	#SIOCSIFDSTADDR
 0x8918

	)

40 
	#SIOCGIFBRDADDR
 0x8919

	)

41 
	#SIOCSIFBRDADDR
 0x891®

	)

42 
	#SIOCGIFNETMASK
 0x891b

	)

43 
	#SIOCSIFNETMASK
 0x891¯

	)

44 
	#SIOCGIFMETRIC
 0x891d

	)

45 
	#SIOCSIFMETRIC
 0x891ê

	)

46 
	#SIOCGIFMEM
 0x891‡

	)

47 
	#SIOCSIFMEM
 0x8920

	)

48 
	#SIOCGIFMTU
 0x8921

	)

49 
	#SIOCSIFMTU
 0x8922

	)

50 
	#SIOCSIFNAME
 0x8923

	)

51 
	#SIOCSIFHWADDR
 0x8924

	)

52 
	#SIOCGIFENCAP
 0x8925

	)

53 
	#SIOCSIFENCAP
 0x8926

	)

54 
	#SIOCGIFHWADDR
 0x8927

	)

55 
	#SIOCGIFSLAVE
 0x8929

	)

56 
	#SIOCSIFSLAVE
 0x8930

	)

57 
	#SIOCADDMULTI
 0x8931

	)

58 
	#SIOCDELMULTI
 0x8932

	)

59 
	#SIOCGIFINDEX
 0x8933

	)

60 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

61 
	#SIOCSIFPFLAGS
 0x8934

	)

62 
	#SIOCGIFPFLAGS
 0x8935

	)

63 
	#SIOCDIFADDR
 0x8936

	)

64 
	#SIOCSIFHWBROADCAST
 0x8937

	)

65 
	#SIOCGIFCOUNT
 0x8938

	)

67 
	#SIOCGIFBR
 0x8940

	)

68 
	#SIOCSIFBR
 0x8941

	)

70 
	#SIOCGIFTXQLEN
 0x8942

	)

71 
	#SIOCSIFTXQLEN
 0x8943

	)

76 
	#SIOCDARP
 0x8953

	)

77 
	#SIOCGARP
 0x8954

	)

78 
	#SIOCSARP
 0x8955

	)

81 
	#SIOCDRARP
 0x8960

	)

82 
	#SIOCGRARP
 0x8961

	)

83 
	#SIOCSRARP
 0x8962

	)

87 
	#SIOCGIFMAP
 0x8970

	)

88 
	#SIOCSIFMAP
 0x8971

	)

92 
	#SIOCADDDLCI
 0x8980

	)

93 
	#SIOCDELDLCI
 0x8981

	)

102 
	#SIOCDEVPRIVATE
 0x89F0

	)

108 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/bits/mman.h

19 #i‚de‡
_SYS_MMAN_H


27 #ifde‡
__USE_MISC


28 
	#MAP_32BIT
 0x40

	)

32 #ifde‡
__USE_MISC


33 
	#MAP_GROWSDOWN
 0x00100

	)

34 
	#MAP_DENYWRITE
 0x00800

	)

35 
	#MAP_EXECUTABLE
 0x01000

	)

36 
	#MAP_LOCKED
 0x02000

	)

37 
	#MAP_NORESERVE
 0x04000

	)

38 
	#MAP_POPULATE
 0x08000

	)

39 
	#MAP_NONBLOCK
 0x10000

	)

40 
	#MAP_STACK
 0x20000

	)

41 
	#MAP_HUGETLB
 0x40000

	)

45 
	~<bôs/mm™-löux.h
>

	@/usr/include/bits/posix_opt.h

19 #i‚def 
_BITS_POSIX_OPT_H


20 
	#_BITS_POSIX_OPT_H
 1

	)

23 
	#_POSIX_JOB_CONTROL
 1

	)

26 
	#_POSIX_SAVED_IDS
 1

	)

29 
	#_POSIX_PRIORITY_SCHEDULING
 200809L

	)

32 
	#_POSIX_SYNCHRONIZED_IO
 200809L

	)

35 
	#_POSIX_FSYNC
 200809L

	)

38 
	#_POSIX_MAPPED_FILES
 200809L

	)

41 
	#_POSIX_MEMLOCK
 200809L

	)

44 
	#_POSIX_MEMLOCK_RANGE
 200809L

	)

47 
	#_POSIX_MEMORY_PROTECTION
 200809L

	)

50 
	#_POSIX_CHOWN_RESTRICTED
 0

	)

54 
	#_POSIX_VDISABLE
 '\0'

	)

57 
	#_POSIX_NO_TRUNC
 1

	)

60 
	#_XOPEN_REALTIME
 1

	)

63 
	#_XOPEN_REALTIME_THREADS
 1

	)

66 
	#_XOPEN_SHM
 1

	)

69 
	#_POSIX_THREADS
 200809L

	)

72 
	#_POSIX_REENTRANT_FUNCTIONS
 1

	)

73 
	#_POSIX_THREAD_SAFE_FUNCTIONS
 200809L

	)

76 
	#_POSIX_THREAD_PRIORITY_SCHEDULING
 200809L

	)

79 
	#_POSIX_THREAD_ATTR_STACKSIZE
 200809L

	)

82 
	#_POSIX_THREAD_ATTR_STACKADDR
 200809L

	)

85 
	#_POSIX_THREAD_PRIO_INHERIT
 200809L

	)

89 
	#_POSIX_THREAD_PRIO_PROTECT
 200809L

	)

91 #ifde‡
__USE_XOPEN2K8


93 
	#_POSIX_THREAD_ROBUST_PRIO_INHERIT
 200809L

	)

96 
	#_POSIX_THREAD_ROBUST_PRIO_PROTECT
 -1

	)

100 
	#_POSIX_SEMAPHORES
 200809L

	)

103 
	#_POSIX_REALTIME_SIGNALS
 200809L

	)

106 
	#_POSIX_ASYNCHRONOUS_IO
 200809L

	)

107 
	#_POSIX_ASYNC_IO
 1

	)

109 
	#_LFS_ASYNCHRONOUS_IO
 1

	)

111 
	#_POSIX_PRIORITIZED_IO
 200809L

	)

114 
	#_LFS64_ASYNCHRONOUS_IO
 1

	)

117 
	#_LFS_LARGEFILE
 1

	)

118 
	#_LFS64_LARGEFILE
 1

	)

119 
	#_LFS64_STDIO
 1

	)

122 
	#_POSIX_SHARED_MEMORY_OBJECTS
 200809L

	)

125 
	#_POSIX_CPUTIME
 0

	)

128 
	#_POSIX_THREAD_CPUTIME
 0

	)

131 
	#_POSIX_REGEXP
 1

	)

134 
	#_POSIX_READER_WRITER_LOCKS
 200809L

	)

137 
	#_POSIX_SHELL
 1

	)

140 
	#_POSIX_TIMEOUTS
 200809L

	)

143 
	#_POSIX_SPIN_LOCKS
 200809L

	)

146 
	#_POSIX_SPAWN
 200809L

	)

149 
	#_POSIX_TIMERS
 200809L

	)

152 
	#_POSIX_BARRIERS
 200809L

	)

155 
	#_POSIX_MESSAGE_PASSING
 200809L

	)

158 
	#_POSIX_THREAD_PROCESS_SHARED
 200809L

	)

161 
	#_POSIX_MONOTONIC_CLOCK
 0

	)

164 
	#_POSIX_CLOCK_SELECTION
 200809L

	)

167 
	#_POSIX_ADVISORY_INFO
 200809L

	)

170 
	#_POSIX_IPV6
 200809L

	)

173 
	#_POSIX_RAW_SOCKETS
 200809L

	)

176 
	#_POSIX2_CHAR_TERM
 200809L

	)

179 
	#_POSIX_SPORADIC_SERVER
 -1

	)

180 
	#_POSIX_THREAD_SPORADIC_SERVER
 -1

	)

183 
	#_POSIX_TRACE
 -1

	)

184 
	#_POSIX_TRACE_EVENT_FILTER
 -1

	)

185 
	#_POSIX_TRACE_INHERIT
 -1

	)

186 
	#_POSIX_TRACE_LOG
 -1

	)

189 
	#_POSIX_TYPED_MEMORY_OBJECTS
 -1

	)

	@/usr/include/bits/pthreadtypes.h

18 #i‚de‡
_BITS_PTHREADTYPES_H


19 
	#_BITS_PTHREADTYPES_H
 1

	)

21 
	~<bôs/w‹dsize.h
>

23 #ifde‡
__x86_64__


24 #i‡
__WORDSIZE
 == 64

25 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

26 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

27 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

28 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

29 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

30 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

31 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

32 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

33 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

35 
	#__SIZEOF_PTHREAD_ATTR_T
 32

	)

36 
	#__SIZEOF_PTHREAD_MUTEX_T
 32

	)

37 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

38 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

39 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

40 
	#__SIZEOF_PTHREAD_RWLOCK_T
 44

	)

41 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

42 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

43 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

46 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

47 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

48 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

49 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

50 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

51 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

52 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

53 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

54 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

60 
	t±hªad_t
;

63 
	u±hªad_©å_t


65 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

66 
	m__Æign
;

68 #i‚de‡
__have_±hªad_©å_t


69 
±hªad_©å_t
 
	t±hªad_©å_t
;

70 
	#__have_±hªad_©å_t
 1

	)

74 #ifde‡
__x86_64__


75 
	s__±hªad_öã∫Æ_li°


77 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

78 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

79 } 
	t__±hªad_li°_t
;

81 
	s__±hªad_öã∫Æ_¶i°


83 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

84 } 
	t__±hªad_¶i°_t
;

92 
	s__±hªad_muãx_s


94 
	m__lock
;

95 
	m__cou¡
;

96 
	m__ow√r
;

97 #ifde‡
__x86_64__


98 
	m__nu£rs
;

102 
	m__köd
;

103 #ifde‡
__x86_64__


104 
	m__•ös
;

105 
	m__ñisi⁄
;

106 
__±hªad_li°_t
 
	m__li°
;

107 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

108 
	#__PTHREAD_MUTEX_HAVE_ELISION
 1

	)

110 
	m__nu£rs
;

111 
__exãnsi⁄__
 union

115 
	m__e•ös
;

116 
	m__ñisi⁄
;

117 
	#__•ös
 
d
.
__e•ös


	)

118 
	#__ñisi⁄
 
d
.
__ñisi⁄


	)

119 
	#__PTHREAD_MUTEX_HAVE_ELISION
 2

	)

120 } 
	md
;

121 
__±hªad_¶i°_t
 
	m__li°
;

124 } 
	m__d©a
;

125 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

126 
	m__Æign
;

127 } 
	t±hªad_muãx_t
;

131 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

132 
	m__Æign
;

133 } 
	t±hªad_muãx©å_t
;

142 
	m__lock
;

143 
	m__fuãx
;

144 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

145 
__exãnsi⁄__
 
	m__wakeup_£q
;

146 
__exãnsi⁄__
 
	m__wokí_£q
;

147 *
	m__muãx
;

148 
	m__nwaôîs
;

149 
	m__brﬂdˇ°_£q
;

150 } 
	m__d©a
;

151 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

152 
__exãnsi⁄__
 
	m__Æign
;

153 } 
	t±hªad_c⁄d_t
;

157 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

158 
	m__Æign
;

159 } 
	t±hªad_c⁄d©å_t
;

163 
	t±hªad_key_t
;

167 
	t±hªad_⁄˚_t
;

170 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


175 #ifde‡
__x86_64__


178 
	m__lock
;

179 
	m__ƒ_ªadîs
;

180 
	m__ªadîs_wakeup
;

181 
	m__wrôî_wakeup
;

182 
	m__ƒ_ªadîs_queued
;

183 
	m__ƒ_wrôîs_queued
;

184 
	m__wrôî
;

185 
	m__sh¨ed
;

186 
	m__∑d1
;

187 
	m__∑d2
;

190 
	m__Êags
;

191 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

192 } 
	m__d©a
;

196 
	m__lock
;

197 
	m__ƒ_ªadîs
;

198 
	m__ªadîs_wakeup
;

199 
	m__wrôî_wakeup
;

200 
	m__ƒ_ªadîs_queued
;

201 
	m__ƒ_wrôîs_queued
;

204 
	m__Êags
;

205 
	m__sh¨ed
;

206 
	m__∑d1
;

207 
	m__∑d2
;

208 
	m__wrôî
;

209 } 
	m__d©a
;

211 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

212 
	m__Æign
;

213 } 
	t±hªad_rwlock_t
;

217 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

218 
	m__Æign
;

219 } 
	t±hªad_rwlock©å_t
;

223 #ifde‡
__USE_XOPEN2K


225 vﬁ©ûê
	t±hªad_•ölock_t
;

232 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

233 
	m__Æign
;

234 } 
	t±hªad_b¨rõr_t
;

238 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

239 
	m__Æign
;

240 } 
	t±hªad_b¨rõøâr_t
;

244 #i‚de‡
__x86_64__


246 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/stat.h

18 #i‡!
deföed
 
_SYS_STAT_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_STAT_H


23 
	#_BITS_STAT_H
 1

	)

26 #i‚de‡
__x86_64__


27 
	#_STAT_VER_LINUX_OLD
 1

	)

28 
	#_STAT_VER_KERNEL
 1

	)

29 
	#_STAT_VER_SVR4
 2

	)

30 
	#_STAT_VER_LINUX
 3

	)

33 
	#_MKNOD_VER_LINUX
 1

	)

34 
	#_MKNOD_VER_SVR4
 2

	)

35 
	#_MKNOD_VER
 
_MKNOD_VER_LINUX


	)

37 
	#_STAT_VER_KERNEL
 0

	)

38 
	#_STAT_VER_LINUX
 1

	)

41 
	#_MKNOD_VER_LINUX
 0

	)

44 
	#_STAT_VER
 
_STAT_VER_LINUX


	)

46 
	s°©


48 
__dev_t
 
	m°_dev
;

49 #i‚de‡
__x86_64__


50 
	m__∑d1
;

52 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


53 
__öo_t
 
	m°_öo
;

55 
__öo_t
 
	m__°_öo
;

57 #i‚de‡
__x86_64__


58 
__mode_t
 
	m°_mode
;

59 
__∆ök_t
 
	m°_∆ök
;

61 
__∆ök_t
 
	m°_∆ök
;

62 
__mode_t
 
	m°_mode
;

64 
__uid_t
 
	m°_uid
;

65 
__gid_t
 
	m°_gid
;

66 #ifde‡
__x86_64__


67 
	m__∑d0
;

69 
__dev_t
 
	m°_rdev
;

70 #i‚de‡
__x86_64__


71 
	m__∑d2
;

73 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


74 
__off_t
 
	m°_size
;

76 
__off64_t
 
	m°_size
;

78 
__blksize_t
 
	m°_blksize
;

79 #i‡
deföed
 
__x86_64__
 || !deföed 
__USE_FILE_OFFSET64


80 
__blk˙t_t
 
	m°_blocks
;

82 
__blk˙t64_t
 
	m°_blocks
;

84 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


91 
time•ec
 
	m°_©im
;

92 
time•ec
 
	m°_mtim
;

93 
time•ec
 
	m°_˘im
;

94 
	#°_©ime
 
°_©im
.
tv_£c


	)

95 
	#°_mtime
 
°_mtim
.
tv_£c


	)

96 
	#°_˘ime
 
°_˘im
.
tv_£c


	)

98 
__time_t
 
	m°_©ime
;

99 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

100 
__time_t
 
	m°_mtime
;

101 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

102 
__time_t
 
	m°_˘ime
;

103 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

105 #ifde‡
__x86_64__


106 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

108 #i‚de‡
__USE_FILE_OFFSET64


109 
	m__glibc_ª£rved4
;

110 
	m__glibc_ª£rved5
;

112 
__öo64_t
 
	m°_öo
;

117 #ifde‡
__USE_LARGEFILE64


119 
	s°©64


121 
__dev_t
 
	m°_dev
;

122 #ifde‡
__x86_64__


123 
__öo64_t
 
	m°_öo
;

124 
__∆ök_t
 
	m°_∆ök
;

125 
__mode_t
 
	m°_mode
;

127 
	m__∑d1
;

128 
__öo_t
 
	m__°_öo
;

129 
__mode_t
 
	m°_mode
;

130 
__∆ök_t
 
	m°_∆ök
;

132 
__uid_t
 
	m°_uid
;

133 
__gid_t
 
	m°_gid
;

134 #ifde‡
__x86_64__


135 
	m__∑d0
;

136 
__dev_t
 
	m°_rdev
;

137 
__off_t
 
	m°_size
;

139 
__dev_t
 
	m°_rdev
;

140 
	m__∑d2
;

141 
__off64_t
 
	m°_size
;

143 
__blksize_t
 
	m°_blksize
;

144 
__blk˙t64_t
 
	m°_blocks
;

145 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


152 
time•ec
 
	m°_©im
;

153 
time•ec
 
	m°_mtim
;

154 
time•ec
 
	m°_˘im
;

156 
__time_t
 
	m°_©ime
;

157 
__sysˇŒ_ul⁄g_t
 
	m°_©imí£c
;

158 
__time_t
 
	m°_mtime
;

159 
__sysˇŒ_ul⁄g_t
 
	m°_mtimí£c
;

160 
__time_t
 
	m°_˘ime
;

161 
__sysˇŒ_ul⁄g_t
 
	m°_˘imí£c
;

163 #ifde‡
__x86_64__


164 
__sysˇŒ_¶⁄g_t
 
	m__glibc_ª£rved
[3];

166 
__öo64_t
 
	m°_öo
;

172 
	#_STATBUF_ST_BLKSIZE


	)

173 
	#_STATBUF_ST_RDEV


	)

175 
	#_STATBUF_ST_NSEC


	)

179 
	#__S_IFMT
 0170000

	)

182 
	#__S_IFDIR
 0040000

	)

183 
	#__S_IFCHR
 0020000

	)

184 
	#__S_IFBLK
 0060000

	)

185 
	#__S_IFREG
 0100000

	)

186 
	#__S_IFIFO
 0010000

	)

187 
	#__S_IFLNK
 0120000

	)

188 
	#__S_IFSOCK
 0140000

	)

192 
	#__S_TYPEISMQ
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

193 
	#__S_TYPEISSEM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

194 
	#__S_TYPEISSHM
(
buf
Ë((buf)->
°_mode
 - (buf)->°_mode)

	)

198 
	#__S_ISUID
 04000

	)

199 
	#__S_ISGID
 02000

	)

200 
	#__S_ISVTX
 01000

	)

201 
	#__S_IREAD
 0400

	)

202 
	#__S_IWRITE
 0200

	)

203 
	#__S_IEXEC
 0100

	)

205 #ifde‡
__USE_ATFILE


206 
	#UTIME_NOW
 ((1»<< 30Ë- 1l)

	)

207 
	#UTIME_OMIT
 ((1»<< 30Ë- 2l)

	)

	@/usr/include/bits/stdio-ldbl.h

19 #i‚de‡
_STDIO_H


23 
__BEGIN_NAMESPACE_STD


24 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

25 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

26 
	$__LDBL_REDIR_DECL
 (
•rötf
)

27 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

28 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

29 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

30 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

31 && !
deföed
 
__REDIRECT
 \

32 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

33 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

34 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

37 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

41 
__END_NAMESPACE_STD


43 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


44 
__BEGIN_NAMESPACE_C99


45 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

46 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

47 
__END_NAMESPACE_C99


50 #ifdef 
__USE_ISOC99


51 
__BEGIN_NAMESPACE_C99


52 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

53 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

54 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

55 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

58 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

62 
__END_NAMESPACE_C99


65 #ifde‡
__USE_XOPEN2K8


66 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

67 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

70 #ifde‡
__USE_GNU


71 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

73 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

74 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

75 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

78 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


79 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

80 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

81 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


82 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

83 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

85 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

88 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

89 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

90 #ifde‡
__USE_XOPEN2K8


91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

94 #ifde‡
__USE_GNU


95 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

96 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

97 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

98 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

19 #i‚de‡
_STDIO_H


23 #i‚de‡
__exã∫_ölöe


24 
	#__STDIO_INLINE
 
ölöe


	)

26 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

30 #ifde‡
__USE_EXTERN_INLINES


33 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
)

35 
__STDIO_INLINE
 

36 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

38  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

39 
	}
}

43 
__STDIO_INLINE
 

44 
	$gëch¨
 ()

46  
	`_IO_gëc
 (
°dö
);

47 
	}
}

50 #ifde‡
__USE_MISC


52 
__STDIO_INLINE
 

53 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

55  
	`_IO_gëc_u∆ocked
 (
__Â
);

56 
	}
}

60 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


62 
__STDIO_INLINE
 

63 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

65  
	`_IO_gëc_u∆ocked
 (
__Â
);

66 
	}
}

69 
__STDIO_INLINE
 

70 
	$gëch¨_u∆ocked
 ()

72  
	`_IO_gëc_u∆ocked
 (
°dö
);

73 
	}
}

78 
__STDIO_INLINE
 

79 
	$putch¨
 (
__c
)

81  
	`_IO_putc
 (
__c
, 
°dout
);

82 
	}
}

85 #ifde‡
__USE_MISC


87 
__STDIO_INLINE
 

88 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

90  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

91 
	}
}

95 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


97 
__STDIO_INLINE
 

98 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

100  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

101 
	}
}

104 
__STDIO_INLINE
 

105 
	$putch¨_u∆ocked
 (
__c
)

107  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

108 
	}
}

112 #ifdef 
__USE_GNU


114 
__STDIO_INLINE
 
_IO_ssize_t


115 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

117  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

118 
	}
}

122 #ifde‡
__USE_MISC


124 
__STDIO_INLINE
 

125 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

127  
	`_IO_„of_u∆ocked
 (
__°ªam
);

128 
	}
}

131 
__STDIO_INLINE
 

132 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

134  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

135 
	}
}

141 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

142 && !
deföed
 
	g__˝lu•lus


144 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

145 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

146 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

147 && (
size_t
Ë(
size
) != 0) \

148 ? ({ *
__±r
 = (*Ë(
±r
); \

149 
FILE
 *
__°ªam
 = (
°ªam
); \

150 
size_t
 
__˙t
; \

151 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

152 
__˙t
 > 0; --__cnt) \

154 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

155 i‡(
__c
 =
EOF
) \

157 *
__±r
++ = 
__c
; \

159 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

160 / (
size_t
Ë(
size
); }) \

161 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

162 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

164 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

165 (Ë(
n
), (
size_t
) 0) \

166 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

168 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

169 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

170 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

171 && (
size_t
Ë(
size
) != 0) \

172 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

173 
FILE
 *
__°ªam
 = (
°ªam
); \

174 
size_t
 
__˙t
; \

175 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

176 
__˙t
 > 0; --__cnt) \

177 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

179 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

180 / (
size_t
Ë(
size
); }) \

181 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

182 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

184 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

185 (Ë(
n
), (
size_t
) 0) \

186 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

190 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

19 #i‚de‡
_STDIO_H


23 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

24 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

25 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

26 c⁄° *
__ª°ri˘
 
__f‹m©
,

27 
_G_va_li°
 
__≠
Ë
__THROW
;

29 #ifde‡
__va_¨g_∑ck


30 
__f‹tify_fun˘i⁄
 

31 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
, ...))

33  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

34 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

35 
	}
}

36 #ñi‡!
deföed
 
__˝lu•lus


37 
	#•rötf
(
°r
, ...) \

38 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

39 
__VA_ARGS__
)

	)

42 
__f‹tify_fun˘i⁄
 

43 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__fmt
,

44 
_G_va_li°
 
__≠
))

46  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

47 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

48 
	}
}

50 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


52 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

53 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

54 ...Ë
__THROW
;

55 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

56 
size_t
 
__¶í
, c⁄° *
__ª°ri˘
 
__f‹m©
,

57 
_G_va_li°
 
__≠
Ë
__THROW
;

59 #ifde‡
__va_¨g_∑ck


60 
__f‹tify_fun˘i⁄
 

61 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

62 c⁄° *
__ª°ri˘
 
__fmt
, ...))

64  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

65 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

66 
	}
}

67 #ñi‡!
deföed
 
__˝lu•lus


68 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

69 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

70 
__VA_ARGS__
)

	)

73 
__f‹tify_fun˘i⁄
 

74 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

75 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

77  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

78 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

79 
	}
}

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

85 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

86 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

87 
__¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

88 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

89 c⁄° *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

90 
__v¥ötf_chk
 (
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

91 
_G_va_li°
 
__≠
);

93 #ifde‡
__va_¨g_∑ck


94 
__f‹tify_fun˘i⁄
 

95 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° *__ª°ri˘ 
__fmt
, ...)

97  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

98 
	`__va_¨g_∑ck
 ());

99 
	}
}

101 
__f‹tify_fun˘i⁄
 

102 
	$¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, ...)

104  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

105 
	}
}

106 #ñi‡!
deföed
 
__˝lu•lus


107 
	#¥ötf
(...) \

108 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

109 
	#Ârötf
(
°ªam
, ...) \

110 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

113 
__f‹tify_fun˘i⁄
 

114 
	$v¥ötf
 (c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

116 #ifde‡
__USE_EXTERN_INLINES


117  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

119  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

121 
	}
}

123 
__f‹tify_fun˘i⁄
 

124 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

125 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

127  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

128 
	}
}

130 #ifde‡
__USE_XOPEN2K8


131 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, c⁄° *
__ª°ri˘
 
__fmt
,

132 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

133 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

134 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

135 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

137 #ifde‡
__va_¨g_∑ck


138 
__f‹tify_fun˘i⁄
 

139 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

141  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

142 
	`__va_¨g_∑ck
 ());

143 
	}
}

144 #ñi‡!
deföed
 
__˝lu•lus


145 
	#d¥ötf
(
fd
, ...) \

146 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

149 
__f‹tify_fun˘i⁄
 

150 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

152  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

153 
	}
}

156 #ifde‡
__USE_GNU


158 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

159 c⁄° *
__ª°ri˘
 
__fmt
, ...)

160 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

161 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

162 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

163 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

164 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

165 
__Êag
, c⁄° *
__ª°ri˘
 
__f‹m©
,

167 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

168 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

169 
__Êag
,

170 c⁄° *
__ª°ri˘
 
__f‹m©
,

171 
_G_va_li°
 
__¨gs
)

172 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

174 #ifde‡
__va_¨g_∑ck


175 
__f‹tify_fun˘i⁄
 

176 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
, ...))

178  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

179 
	`__va_¨g_∑ck
 ());

180 
	}
}

182 
__f‹tify_fun˘i⁄
 

183 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

186  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

187 
	`__va_¨g_∑ck
 ());

188 
	}
}

190 
__f‹tify_fun˘i⁄
 

191 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

192 c⁄° *
__ª°ri˘
 
__fmt
, ...))

194  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

195 
	`__va_¨g_∑ck
 ());

196 
	}
}

197 #ñi‡!
deföed
 
__˝lu•lus


198 
	#a•rötf
(
±r
, ...) \

199 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

200 
	#__a•rötf
(
±r
, ...) \

201 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

202 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

203 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

206 
__f‹tify_fun˘i⁄
 

207 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__fmt
,

208 
_G_va_li°
 
__≠
))

210  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

211 
	}
}

213 
__f‹tify_fun˘i⁄
 

214 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

215 c⁄° *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

217  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

218 
__≠
);

219 
	}
}

225 #i‡!
deföed
 
__USE_ISOC11
 \

226 || (
deföed
 
	g__˝lu•lus
 && __˝lu•lu†<201103L && !deföed 
__USE_GNU
)

227 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

228 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

229 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

232 
__f‹tify_fun˘i⁄
 
__wur
 *

233 
	$gës
 (*
__°r
)

235 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

236  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

237  
	`__gës_w¨n
 (
__°r
);

238 
	}
}

241 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

242 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

243 *
	`__REDIRECT
 (
__fgës_Æüs
,

244 (*
__ª°ri˘
 
__s
, 
__n
,

245 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

246 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

247 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

248 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

249 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

252 
__f‹tify_fun˘i⁄
 
__wur
 *

253 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

255 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

257 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

258  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

260 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

261  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

263  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

264 
	}
}

266 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

270 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

271 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

272 
‰ód
Ë
__wur
;

273 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

274 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

275 
size_t
 
__size
, size_à
__n
,

276 
FILE
 *
__ª°ri˘
 
__°ªam
),

277 
__‰ód_chk
)

278 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

281 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


282 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

283 
FILE
 *
__ª°ri˘
 
__°ªam
)

285 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

287 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

288 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

289 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

290  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

292 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

293  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

295  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

296 
	}
}

298 #ifde‡
__USE_GNU


299 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

300 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

302 (*
__ª°ri˘
 
__s
, 
__n
,

303 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

304 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

305 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

306 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

307 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

310 
__f‹tify_fun˘i⁄
 
__wur
 *

311 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

313 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

315 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

316  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

318 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

319  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

321  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

322 
	}
}

325 #ifde‡
__USE_MISC


326 #unde‡
‰ód_u∆ocked


327 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

330 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

331 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

332 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

333 
‰ód_u∆ocked
Ë
__wur
;

334 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

335 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

336 
size_t
 
__size
, size_à
__n
,

337 
FILE
 *
__ª°ri˘
 
__°ªam
),

338 
__‰ód_u∆ocked_chk
)

339 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

342 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


343 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

344 
FILE
 *
__ª°ri˘
 
__°ªam
)

346 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

349 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

350 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

351  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

352 
__°ªam
);

354 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

355  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

356 
__°ªam
);

359 #ifde‡
__USE_EXTERN_INLINES


360 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

361 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

362 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

363 && 
__size
 * 
__n
 <= 8)

365 
size_t
 
__˙t
 = 
__size
 * 
__n
;

366 *
__˝å
 = (*Ë
__±r
;

367 i‡(
__˙t
 == 0)

370 ; 
__˙t
 > 0; --__cnt)

372 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

373 i‡(
__c
 =
EOF
)

375 *
__˝å
++ = 
__c
;

377  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

380  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

381 
	}
}

	@/usr/include/bits/stdio_lim.h

18 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


22 #ifde‡
_STDIO_H


23 
	#L_tm≤am
 20

	)

24 
	#TMP_MAX
 238328

	)

25 
	#FILENAME_MAX
 4096

	)

27 #ifde‡
__USE_POSIX


28 
	#L_˘îmid
 9

	)

29 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


30 
	#L_cu£rid
 9

	)

35 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


36 #unde‡
FOPEN_MAX


37 
	#FOPEN_MAX
 16

	)

40 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


41 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/stdlib-bsearch.h

19 
__exã∫_ölöe
 *

20 
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

21 
__com∑r_‚_t
 
__com∑r
)

23 
size_t
 
__l
, 
__u
, 
__idx
;

24 c⁄° *
__p
;

25 
__com∑ris⁄
;

27 
__l
 = 0;

28 
__u
 = 
__nmemb
;

29 
__l
 < 
__u
)

31 
__idx
 = (
__l
 + 
__u
) / 2;

32 
__p
 = (*Ë(((c⁄° *Ë
__ba£
Ë+ (
__idx
 * 
__size
));

33 
__com∑ris⁄
 = (*
__com∑r
Ë(
__key
, 
__p
);

34 i‡(
__com∑ris⁄
 < 0)

35 
__u
 = 
__idx
;

36 i‡(
__com∑ris⁄
 > 0)

37 
__l
 = 
__idx
 + 1;

39  (*Ë
__p
;

42  
NULL
;

43 
	}
}

	@/usr/include/bits/stdlib-float.h

19 #i‚de‡
_STDLIB_H


23 #ifde‡
__USE_EXTERN_INLINES


24 
__BEGIN_NAMESPACE_STD


25 
__exã∫_ölöe
 

26 
__NTH
 (
	$©of
 (c⁄° *
__≈å
))

28  
	`°πod
 (
__≈å
, (**Ë
NULL
);

29 
	}
}

30 
	g__END_NAMESPACE_STD


	@/usr/include/bits/stdlib-ldbl.h

19 #i‚de‡
_STDLIB_H


23 #ifdef 
__USE_ISOC99


24 
__BEGIN_NAMESPACE_C99


25 
	$__LDBL_REDIR1_DECL
 (
°πﬁd
, 
°πod
)

26 
__END_NAMESPACE_C99


29 #ifde‡
__USE_GNU


30 
	$__LDBL_REDIR1_DECL
 (
°πﬁd_l
, 
°πod_l
)

33 #ifde‡
__USE_MISC


34 
	$__LDBL_REDIR1_DECL
 (
qecvt
, 
ecvt
)

35 
	$__LDBL_REDIR1_DECL
 (
qfcvt
, 
fcvt
)

36 
	$__LDBL_REDIR1_DECL
 (
qgcvt
, 
gcvt
)

37 
	$__LDBL_REDIR1_DECL
 (
qecvt_r
, 
ecvt_r
)

38 
	$__LDBL_REDIR1_DECL
 (
qfcvt_r
, 
fcvt_r
)

	@/usr/include/bits/stdlib.h

19 #i‚de‡
_STDLIB_H


23 *
	$__ªÆ∑th_chk
 (c⁄° *
__ª°ri˘
 
__«me
,

24 *
__ª°ri˘
 
__ªsﬁved
,

25 
size_t
 
__ªsﬁvedÀn
Ë
__THROW
 
__wur
;

26 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_Æüs
,

27 (c⁄° *
__ª°ri˘
 
__«me
,

28 *
__ª°ri˘
 
__ªsﬁved
), 
ªÆ∑th
Ë
__wur
;

29 *
	`__REDIRECT_NTH
 (
__ªÆ∑th_chk_w¨n
,

30 (c⁄° *
__ª°ri˘
 
__«me
,

31 *
__ª°ri˘
 
__ªsﬁved
,

32 
size_t
 
__ªsﬁvedÀn
), 
__ªÆ∑th_chk
Ë
__wur


33 
	`__w¨«âr
 ("secondárgument ofÑealpath must beÉither NULL orát "

36 
__f‹tify_fun˘i⁄
 
__wur
 *

37 
	`__NTH
 (
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
, *__ª°ri˘ 
__ªsﬁved
))

39 i‡(
	`__bos
 (
__ªsﬁved
Ë!(
size_t
) -1)

41 #i‡
deföed
 
_LIBC_LIMITS_H_
 && deföed 
PATH_MAX


42 i‡(
	`__bos
 (
__ªsﬁved
Ë< 
PATH_MAX
)

43  
	`__ªÆ∑th_chk_w¨n
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

45  
	`__ªÆ∑th_chk
 (
__«me
, 
__ªsﬁved
, 
	`__bos
 (__resolved));

48  
	`__ªÆ∑th_Æüs
 (
__«me
, 
__ªsﬁved
);

49 
	}
}

52 
	$__±¢ame_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

53 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

54 
	`__REDIRECT_NTH
 (
__±¢ame_r_Æüs
, (
__fd
, *
__buf
,

55 
size_t
 
__buÊí
), 
±¢ame_r
)

56 
	`__n⁄nuŒ
 ((2));

57 
	`__REDIRECT_NTH
 (
__±¢ame_r_chk_w¨n
,

58 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

59 
size_t
 
__ƒól
), 
__±¢ame_r_chk
)

60 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ptsname_r called with buflen biggerÅhan "

63 
__f‹tify_fun˘i⁄
 

64 
	`__NTH
 (
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

66 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

68 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

69  
	`__±¢ame_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

70 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

71  
	`__±¢ame_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

73  
	`__±¢ame_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

74 
	}
}

77 
	$__w˘omb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
size_t
 
__buÊí
)

78 
__THROW
 
__wur
;

79 
	`__REDIRECT_NTH
 (
__w˘omb_Æüs
, (*
__s
, 
wch¨_t
 
__wch¨
),

80 
w˘omb
Ë
__wur
;

82 
__f‹tify_fun˘i⁄
 
__wur
 

83 
	`__NTH
 (
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
))

88 
	#__STDLIB_MB_LEN_MAX
 16

	)

89 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__STDLIB_MB_LEN_MAX


92 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__STDLIB_MB_LEN_MAX
 > __bos (__s))

93  
	`__w˘omb_chk
 (
__s
, 
__wch¨
, 
	`__bos
 (__s));

94  
	`__w˘omb_Æüs
 (
__s
, 
__wch¨
);

95 
	}
}

98 
size_t
 
	$__mb°owcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

99 c⁄° *
__ª°ri˘
 
__§c
,

100 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

101 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_Æüs
,

102 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

103 c⁄° *
__ª°ri˘
 
__§c
,

104 
size_t
 
__Àn
), 
mb°owcs
);

105 
size_t
 
	`__REDIRECT_NTH
 (
__mb°owcs_chk_w¨n
,

106 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

107 c⁄° *
__ª°ri˘
 
__§c
,

108 
size_t
 
__Àn
, size_à
__d°Àn
), 
__mb°owcs_chk
)

109 
	`__w¨«âr
 ("mbstowcs called with dst buffer smallerÅhanÜen "

112 
__f‹tify_fun˘i⁄
 
size_t


113 
	`__NTH
 (
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° *__ª°ri˘ 
__§c
,

114 
size_t
 
__Àn
))

116 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

118 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

119  
	`__mb°owcs_chk
 (
__d°
, 
__§c
, 
__Àn
,

120 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

122 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

123  
	`__mb°owcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
,

124 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

126  
	`__mb°owcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

127 
	}
}

130 
size_t
 
	$__wc°ombs_chk
 (*
__ª°ri˘
 
__d°
,

131 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

132 
size_t
 
__Àn
, size_à
__d°Àn
Ë
__THROW
;

133 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_Æüs
,

134 (*
__ª°ri˘
 
__d°
,

135 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

136 
size_t
 
__Àn
), 
wc°ombs
);

137 
size_t
 
	`__REDIRECT_NTH
 (
__wc°ombs_chk_w¨n
,

138 (*
__ª°ri˘
 
__d°
,

139 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

140 
size_t
 
__Àn
, size_à
__d°Àn
), 
__wc°ombs_chk
)

141 
	`__w¨«âr
 ("wcstombs called with dst buffer smallerÅhanÜen");

143 
__f‹tify_fun˘i⁄
 
size_t


144 
	`__NTH
 (
	$wc°ombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__§c
,

145 
size_t
 
__Àn
))

147 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

149 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

150  
	`__wc°ombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

151 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

152  
	`__wc°ombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dst));

154  
	`__wc°ombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
);

155 
	}
}

	@/usr/include/bits/string.h

19 #i‚de‡
_STRING_H


24 
	#_STRING_ARCH_u«lig√d
 1

	)

28 #i‡!
deföed
 
__x86_64__
 && (deföed 
__i486__
 || deföed 
__≥¡ium__
 \

29 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

30 || 
deföed
 
	g__noc⁄a__
 || deföed 
	g__©om__
 \

31 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__c‹ei7__
 \

32 || 
deföed
 
	g__k6__
 || deföed 
	g__geode__
 \

33 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

34 || 
deföed
 
	g__amdÁm10__
)

38 #i‡!
deföed
 
__NO_STRING_INLINES
 && deföed 
__USE_STRING_INLINES
 \

39 && 
deföed
 
	g__GNUC__
 && __GNUC__ >= 2

41 #i‚de‡
__STRING_INLINE


42 #i‚de‡
__exã∫_ölöe


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

50 
	#__STRING_SMALL_GET16
(
§c
, 
idx
) \

51 ((((c⁄° *Ë(
§c
))[
idx
 + 1] << 8) \

52 | ((c⁄° *Ë(
§c
))[
idx
])

	)

53 
	#__STRING_SMALL_GET32
(
§c
, 
idx
) \

54 (((((c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

55 | ((c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

56 | ((c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

57 | ((c⁄° *Ë(
§c
))[
idx
])

	)

61 
	#_HAVE_STRING_ARCH_mem˝y
 1

	)

62 
	#mem˝y
(
de°
, 
§c
, 
n
) \

63 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

64 ? 
	`__mem˝y_c
 ((
de°
), (
§c
), (
n
)) \

65 : 
	`__mem˝y_g
 ((
de°
), (
§c
), (
n
))))

	)

66 
	#__mem˝y_c
(
de°
, 
§c
, 
n
) \

67 ((
n
) == 0 \

68 ? (
de°
) \

69 : (((
n
) % 4 == 0) \

70 ? 
	`__mem˝y_by4
 (
de°
, 
§c
, 
n
) \

71 : (((
n
) % 2 == 0) \

72 ? 
	`__mem˝y_by2
 (
de°
, 
§c
, 
n
) \

73 : 
	`__mem˝y_g
 (
de°
, 
§c
, 
n
))))

	)

75 
__STRING_INLINE
 *
__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
,

76 
size_t
 
__n
);

78 
__STRING_INLINE
 *

79 
	$__mem˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

81 
__d0
, 
__d1
;

82 *
__tmp
 = 
__de°
;

83 
__asm__
 
__vﬁ©ûe__


91 : "=&r" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

92 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 4)

94  
__de°
;

95 
	}
}

97 
__STRING_INLINE
 *
__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
,

98 
size_t
 
__n
);

100 
__STRING_INLINE
 *

101 
	$__mem˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

103 
__d0
, 
__d1
;

104 *
__tmp
 = 
__de°
;

105 
__asm__
 
__vﬁ©ûe__


118 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

119 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
 / 2)

121  
__de°
;

122 
	}
}

124 
__STRING_INLINE
 *
__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
);

126 
__STRING_INLINE
 *

127 
	$__mem˝y_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

129 
__d0
, 
__d1
, 
__d2
;

130 *
__tmp
 = 
__de°
;

131 
__asm__
 
__vﬁ©ûe__


142 : "=&c" (
__d0
), "=&D" (
__d1
), "=&S" (
__d2
),

143 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

144 : "0" (
__n
), "1" (
__tmp
), "2" (
__§c
),

145 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
)

147  
__de°
;

148 
	}
}

150 
	#_HAVE_STRING_ARCH_memmove
 1

	)

151 #i‚de‡
_FORCE_INLINES


154 
	#memmove
(
de°
, 
§c
, 
n
Ë
	`__memmove_g
 (de°, src,Ç)

	)

156 
__STRING_INLINE
 *
	$__memmove_g
 (*, c⁄° *, 
size_t
)

157 
	`__asm__
 ("memmove");

159 
__STRING_INLINE
 *

160 
	$__memmove_g
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

162 
__d0
, 
__d1
, 
__d2
;

163 *
__tmp
 = 
__de°
;

164 i‡(
__de°
 < 
__§c
)

165 
__asm__
 
__vﬁ©ûe__


168 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

169 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

170 : "0" (
__n
), "1" (
__§c
), "2" (
__tmp
),

171 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

173 
__asm__
 
__vﬁ©ûe__


177 : "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
),

178 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__de°
)

179 : "0" (
__n
), "1" (__¿- 1 + (c⁄° *Ë
__§c
),

180 "2" (
__n
 - 1 + (*Ë
__tmp
),

181 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__§c
));

182  
__de°
;

183 
	}
}

187 
	#_HAVE_STRING_ARCH_memcmp
 1

	)

188 #i‚de‡
_FORCE_INLINES


189 #i‚de‡
__PIC__


191 
__STRING_INLINE
 

192 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

194 
__d0
, 
__d1
, 
__d2
;

195 
__ªs
;

196 
__asm__
 
__vﬁ©ûe__


204 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

205 : "0" (0), "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

206 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

207 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

209  
__ªs
;

210 
	}
}

215 
	#_HAVE_STRING_ARCH_mem£t
 1

	)

216 
	#_USE_STRING_ARCH_mem£t
 1

	)

217 
	#mem£t
(
s
, 
c
, 
n
) \

218 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

219 ? ((
n
) == 1 \

220 ? 
	`__mem£t_c1
 ((
s
), (
c
)) \

221 : 
	`__mem£t_gc
 ((
s
), (
c
), (
n
))) \

222 : (
	`__buûtö_c⁄°™t_p
 (
c
) \

223 ? (
	`__buûtö_c⁄°™t_p
 (
n
) \

224 ? 
	`__mem£t_c˙
 ((
s
), (
c
), (
n
)) \

225 : 
	`mem£t
 ((
s
), (
c
), (
n
))) \

226 : (
	`__buûtö_c⁄°™t_p
 (
n
) \

227 ? 
	`__mem£t_g˙
 ((
s
), (
c
), (
n
)) \

228 : 
	`mem£t
 ((
s
), (
c
), (
n
))))))

	)

230 
	#__mem£t_c1
(
s
, 
c
Ë({ *
__s
 = (s); \

231 *((*Ë
__s
Ë(Ë(
c
); \

232 
__s
; })

	)

234 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

235 ({ *
__s
 = (
s
); \

237 
__ui
; \

238 
__usi
; \

239 
__uc
; \

240 } *
__u
 = 
__s
; \

241 
__c
 = ((Ë((Ë(
c
))) * 0x01010101; \

247 i‡((
n
) == 3 || (n) >= 5) \

248 
__asm__
 
	`__vﬁ©ûe__
 ("" : "Ù" (
__c
) : "0" (__c)); \

251 
n
) \

254 
__u
->
__ui
 = 
__c
; \

255 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

257 
__u
->
__ui
 = 
__c
; \

258 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

260 
__u
->
__ui
 = 
__c
; \

261 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

263 
__u
->
__usi
 = (Ë
__c
; \

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

265 
__u
->
__uc
 = (Ë
__c
; \

269 
__u
->
__ui
 = 
__c
; \

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

272 
__u
->
__ui
 = 
__c
; \

273 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

275 
__u
->
__ui
 = 
__c
; \

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

278 
__u
->
__usi
 = (Ë
__c
; \

282 
__u
->
__ui
 = 
__c
; \

283 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

285 
__u
->
__ui
 = 
__c
; \

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

288 
__u
->
__ui
 = 
__c
; \

289 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

291 
__u
->
__uc
 = (Ë
__c
; \

295 
__u
->
__ui
 = 
__c
; \

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

298 
__u
->
__ui
 = 
__c
; \

299 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

301 
__u
->
__ui
 = 
__c
; \

302 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

304 
__u
->
__ui
 = 
__c
; \

309 
__s
; })

	)

311 
	#__mem£t_c˙
(
s
, 
c
, 
n
) \

312 (((
n
) % 4 == 0) \

313 ? 
	`__mem£t_c˙_by4
 (
s
, ((Ë((Ë(
c
))) * 0x01010101,\

314 
n
) \

315 : (((
n
) % 2 == 0) \

316 ? 
	`__mem£t_c˙_by2
 (
s
, \

317 ((Ë((Ë(
c
))) * 0x01010101,\

318 
n
) \

319 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

321 
__STRING_INLINE
 *
__mem£t_c˙_by4
 (*
__s
, 
__c
,

322 
size_t
 
__n
);

324 
__STRING_INLINE
 *

325 
	$__mem£t_c˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

327 *
__tmp
 = 
__s
;

328 
__d0
;

329 #ifde‡
__i686__


330 
__asm__
 
__vﬁ©ûe__


333 : "=&a" (
__c
), "=&D" (
__tmp
), "=&c" (
__d0
),

334 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

335 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

338 
__asm__
 
__vﬁ©ûe__


344 : "=&r" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

345 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

346 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

349  
__s
;

350 
	}
}

352 
__STRING_INLINE
 *
__mem£t_c˙_by2
 (*
__s
, 
__c
,

353 
size_t
 
__n
);

355 
__STRING_INLINE
 *

356 
	$__mem£t_c˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

358 
__d0
, 
__d1
;

359 *
__tmp
 = 
__s
;

360 #ifde‡
__i686__


361 
__asm__
 
__vﬁ©ûe__


365 : "=&a" (
__d0
), "=&D" (
__tmp
), "=&c" (
__d1
),

366 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

367 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

370 
__asm__
 
__vﬁ©ûe__


376 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

377 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

378 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

381  
__s
;

382 
	}
}

384 
	#__mem£t_g˙
(
s
, 
c
, 
n
) \

385 (((
n
) % 4 == 0) \

386 ? 
	`__mem£t_g˙_by4
 (
s
, 
c
, 
n
) \

387 : (((
n
) % 2 == 0) \

388 ? 
	`__mem£t_g˙_by2
 (
s
, 
c
, 
n
) \

389 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

391 
__STRING_INLINE
 *
__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
);

393 
__STRING_INLINE
 *

394 
	$__mem£t_g˙_by4
 (*
__s
, 
__c
, 
size_t
 
__n
)

396 *
__tmp
 = 
__s
;

397 
__d0
;

398 
__asm__
 
__vﬁ©ûe__


408 : "=&q" (
__c
), "=&r" (
__tmp
), "=&r" (
__d0
),

409 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

410 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

412  
__s
;

413 
	}
}

415 
__STRING_INLINE
 *
__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
);

417 
__STRING_INLINE
 *

418 
	$__mem£t_g˙_by2
 (*
__s
, 
__c
, 
size_t
 
__n
)

420 
__d0
, 
__d1
;

421 *
__tmp
 = 
__s
;

422 
__asm__
 
__vﬁ©ûe__


433 : "=&q" (
__d0
), "=&r" (
__tmp
), "=&r" (
__d1
),

434 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

435 : "0" ((Ë
__c
), "1" (
__tmp
), "2" (
__n
 / 4)

437  
__s
;

438 
	}
}

442 
	#_HAVE_STRING_ARCH_memchr
 1

	)

443 #i‚de‡
_FORCE_INLINES


444 
__STRING_INLINE
 *

445 
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

447 
__d0
;

448 #ifde‡
__i686__


449 
__d1
;

451 *
__ªs
;

452 i‡(
__n
 == 0)

453  
NULL
;

454 #ifde‡
__i686__


455 
__asm__
 
__vﬁ©ûe__


459 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

460 : "a" (
__c
), "0" (
__s
), "1" (
__n
), "2" (1),

461 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

464 
__asm__
 
__vﬁ©ûe__


470 : "=D" (
__ªs
), "=&c" (
__d0
)

471 : "a" (
__c
), "0" (
__s
), "1" (
__n
),

472 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

475  
__ªs
 - 1;

476 
	}
}

479 
	#_HAVE_STRING_ARCH_memrchr
 1

	)

480 #i‚de‡
_FORCE_INLINES


481 
__STRING_INLINE
 *
__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
);

483 
__STRING_INLINE
 *

484 
	$__memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

486 
__d0
;

487 #ifde‡
__i686__


488 
__d1
;

490 *
__ªs
;

491 i‡(
__n
 == 0)

492  
NULL
;

493 #ifde‡
__i686__


494 
__asm__
 
__vﬁ©ûe__


500 : "=D" (
__ªs
), "=&c" (
__d0
), "=&r" (
__d1
)

501 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n), "2" (-1),

502 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

505 
__asm__
 
__vﬁ©ûe__


512 : "=D" (
__ªs
), "=&c" (
__d0
)

513 : "a" (
__c
), "0" (
__s
 + 
__n
 - 1), "1" (__n),

514 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s
)

517  
__ªs
;

518 
	}
}

519 #ifde‡
__USE_GNU


520 
	#memrchr
(
s
, 
c
, 
n
Ë
	`__memrchr
 ((s), (c), (n))

	)

525 
	#_HAVE_STRING_ARCH_øwmemchr
 1

	)

526 
__STRING_INLINE
 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

528 #i‚de‡
_FORCE_INLINES


529 
__STRING_INLINE
 *

530 
	$__øwmemchr
 (c⁄° *
__s
, 
__c
)

532 
__d0
;

533 *
__ªs
;

534 
__asm__
 
__vﬁ©ûe__


537 : "=D" (
__ªs
), "=&c" (
__d0
)

538 : "a" (
__c
), "0" (
__s
), "1" (0xffffffff),

539 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

541  
__ªs
 - 1;

542 
	}
}

543 #ifde‡
__USE_GNU


544 
__STRING_INLINE
 *

545 
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

547  
	`__øwmemchr
 (
__s
, 
__c
);

548 
	}
}

554 
	#_HAVE_STRING_ARCH_°æí
 1

	)

555 
	#°æí
(
°r
) \

556 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
°r
) \

557 ? 
	`__buûtö_°æí
 (
°r
) \

558 : 
	`__°æí_g
 (
°r
)))

	)

559 
__STRING_INLINE
 
size_t
 
__°æí_g
 (c⁄° *
__°r
);

561 
__STRING_INLINE
 
size_t


562 
	$__°æí_g
 (c⁄° *
__°r
)

564 
__dummy
;

565 c⁄° *
__tmp
 = 
__°r
;

566 
__asm__
 
__vﬁ©ûe__


572 : "Ù" (
__tmp
), "=&q" (
__dummy
)

573 : "0" (
__°r
),

574 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__°r
)

576  
__tmp
 - 
__°r
 - 1;

577 
	}
}

581 
	#_HAVE_STRING_ARCH_°r˝y
 1

	)

582 
	#°r˝y
(
de°
, 
§c
) \

583 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

584 ? ( ((
§c
)[0]Ë=1 && 
	`°æí
 (src) + 1 <= 8 \

585 ? 
	`__°r˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

586 : (*Ë
	`mem˝y
 ((*Ë(
de°
), \

587 (c⁄° *Ë(
§c
), \

588 
	`°æí
 (
§c
) + 1)) \

589 : 
	`__°r˝y_g
 ((
de°
), (
§c
))))

	)

591 
	#__°r˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

592 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

594 
__ui
; \

595 
__usi
; \

596 
__uc
; \

597 
__c
; \

598 } *
__u
 = (*Ë
__de°
; \

599 
§˛í
) \

602 
__u
->
__uc
 = '\0'; \

605 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

608 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

609 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

610 
__u
->
__uc
 = '\0'; \

613 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

616 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

617 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

618 
__u
->
__uc
 = '\0'; \

621 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

622 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

623 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

626 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

627 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

628 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

629 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

630 
__u
->
__uc
 = '\0'; \

633 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

635 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

638 (*Ë
__de°
; }))

	)

640 
__STRING_INLINE
 *
__°r˝y_g
 (*
__de°
, c⁄° *
__§c
);

642 
__STRING_INLINE
 *

643 
	$__°r˝y_g
 (*
__de°
, c⁄° *
__§c
)

645 *
__tmp
 = 
__de°
;

646 
__dummy
;

647 
__asm__
 
__vﬁ©ûe__


656 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
),

657 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

658 : "0" (
__§c
), "1" (
__tmp
),

659 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

661  
__de°
;

662 
	}
}

665 #ifde‡
__USE_GNU


666 
	#_HAVE_STRING_ARCH_°p˝y
 1

	)

668 
	#__°p˝y
(
de°
, 
§c
) \

669 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

670 ? (
	`°æí
 (
§c
) + 1 <= 8 \

671 ? 
	`__°p˝y_a_smÆl
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

672 : 
	`__°p˝y_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1)) \

673 : 
	`__°p˝y_g
 ((
de°
), (
§c
))))

	)

674 
	#__°p˝y_c
(
de°
, 
§c
, 
§˛í
) \

675 ((
§˛í
) % 4 == 0 \

676 ? 
	`__memp˝y_by4
 (
de°
, 
§c
, 
§˛í
) - 1 \

677 : ((
§˛í
) % 2 == 0 \

678 ? 
	`__memp˝y_by2
 (
de°
, 
§c
, 
§˛í
) - 1 \

679 : 
	`__memp˝y_byn
 (
de°
, 
§c
, 
§˛í
Ë- 1))

	)

682 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 ((de°), (§c))

	)

684 
	#__°p˝y_a_smÆl
(
de°
, 
§c
, 
§˛í
) \

685 (
	`__exãnsi⁄__
 ({ union { \

686 
__ui
; \

687 
__usi
; \

688 
__uc
; \

689 
__c
; \

690 } *
__u
 = (*Ë(
de°
); \

691 
§˛í
) \

694 
__u
->
__uc
 = '\0'; \

697 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

698 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

701 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 0); \

702 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

703 
__u
->
__uc
 = '\0'; \

706 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

707 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

710 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

711 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

712 
__u
->
__uc
 = '\0'; \

715 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

716 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

717 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

718 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1); \

721 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

722 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

723 
__u
->
__usi
 = 
	`__STRING_SMALL_GET16
 (
§c
, 4); \

724 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

725 
__u
->
__uc
 = '\0'; \

728 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 0); \

729 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

730 
__u
->
__ui
 = 
	`__STRING_SMALL_GET32
 (
§c
, 4); \

731 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3); \

734 (*Ë
__u
; }))

	)

736 
__STRING_INLINE
 *
__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
,

737 
size_t
 
__§˛í
);

739 
__STRING_INLINE
 *

740 
	$__memp˝y_by4
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

742 *
__tmp
 = 
__de°
;

743 
__d0
, 
__d1
;

744 
__asm__
 
__vﬁ©ûe__


752 : "=&r" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
)

753 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4)

755  
__tmp
;

756 
	}
}

758 
__STRING_INLINE
 *
__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
,

759 
size_t
 
__§˛í
);

761 
__STRING_INLINE
 *

762 
	$__memp˝y_by2
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

764 *
__tmp
 = 
__de°
;

765 
__d0
, 
__d1
;

766 
__asm__
 
__vﬁ©ûe__


779 : "=&q" (
__d0
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__d1
),

780 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

781 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

782 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

784  
__tmp
 + 2;

785 
	}
}

787 
__STRING_INLINE
 *
__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
,

788 
size_t
 
__§˛í
);

790 
__STRING_INLINE
 *

791 
	$__memp˝y_byn
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__§˛í
)

793 
__d0
, 
__d1
;

794 *
__tmp
 = 
__de°
;

795 
__asm__
 
__vﬁ©ûe__


806 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

807 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

808 : "0" (
__tmp
), "1" (
__§˛í
), "2" (
__§c
),

809 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

811  
__tmp
;

812 
	}
}

814 
__STRING_INLINE
 *
__°p˝y_g
 (*
__de°
, c⁄° *
__§c
);

816 
__STRING_INLINE
 *

817 
	$__°p˝y_g
 (*
__de°
, c⁄° *
__§c
)

819 *
__tmp
 = 
__de°
;

820 
__dummy
;

821 
__asm__
 
__vﬁ©ûe__


830 : "=&r" (
__§c
), "Ù" (
__tmp
), "=&q" (
__dummy
),

831 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

832 : "0" (
__§c
), "1" (
__tmp
),

833 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

835  
__tmp
 - 1;

836 
	}
}

841 
	#_HAVE_STRING_ARCH_°∫˝y
 1

	)

842 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

843 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

844 ? ((
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

845 ? (*Ë
	`mem˝y
 ((*Ë(
de°
), \

846 (c⁄° *Ë(
§c
), 
n
) \

847 : 
	`__°∫˝y_cg
 ((
de°
), (
§c
), 
	`°æí
 (§cË+ 1, 
n
))) \

848 : 
	`__°∫˝y_gg
 ((
de°
), (
§c
), 
n
)))

	)

849 
	#__°∫˝y_cg
(
de°
, 
§c
, 
§˛í
, 
n
) \

850 (((
§˛í
) % 4 == 0) \

851 ? 
	`__°∫˝y_by4
 (
de°
, 
§c
, 
§˛í
, 
n
) \

852 : (((
§˛í
) % 2 == 0) \

853 ? 
	`__°∫˝y_by2
 (
de°
, 
§c
, 
§˛í
, 
n
) \

854 : 
	`__°∫˝y_byn
 (
de°
, 
§c
, 
§˛í
, 
n
)))

	)

856 
__STRING_INLINE
 *
__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[],

857 
size_t
 
__§˛í
, size_à
__n
);

859 
__STRING_INLINE
 *

860 
	$__°∫˝y_by4
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

862 *
__tmp
 = 
__de°
;

863 
__dummy1
, 
__dummy2
;

864 
__asm__
 
__vﬁ©ûe__


872 : "=&r" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

873 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

874 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 4),

875 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

877 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

878  
__de°
;

879 
	}
}

881 
__STRING_INLINE
 *
__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[],

882 
size_t
 
__§˛í
, size_à
__n
);

884 
__STRING_INLINE
 *

885 
	$__°∫˝y_by2
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

887 *
__tmp
 = 
__de°
;

888 
__dummy1
, 
__dummy2
;

889 
__asm__
 
__vﬁ©ûe__


902 : "=&q" (
__dummy1
), "Ù" (
__tmp
), "=&r" (
__§c
), "=&r" (
__dummy2
),

903 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

904 : "1" (
__tmp
), "2" (
__§c
), "3" (
__§˛í
 / 2),

905 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

907 (Ë
	`mem£t
 (
__tmp
 + 2, '\0', 
__n
 - 
__§˛í
);

908  
__de°
;

909 
	}
}

911 
__STRING_INLINE
 *
__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[],

912 
size_t
 
__§˛í
, size_à
__n
);

914 
__STRING_INLINE
 *

915 
	$__°∫˝y_byn
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
, size_à
__n
)

917 
__d0
, 
__d1
;

918 *
__tmp
 = 
__de°
;

919 
__asm__
 
__vﬁ©ûe__


930 : "=D" (
__tmp
), "=&c" (
__d0
), "=&S" (
__d1
),

931 "=m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__de°
)

932 : "1" (
__§˛í
), "0" (
__tmp
),"2" (
__§c
),

933 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

935 (Ë
	`mem£t
 (
__tmp
, '\0', 
__n
 - 
__§˛í
);

936  
__de°
;

937 
	}
}

939 
__STRING_INLINE
 *
__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
,

940 
size_t
 
__n
);

942 
__STRING_INLINE
 *

943 
	$__°∫˝y_gg
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

945 *
__tmp
 = 
__de°
;

946 
__dummy
;

947 i‡(
__n
 > 0)

948 
__asm__
 
__vﬁ©ûe__


964 : "=&r" (
__§c
), "=&r" (
__tmp
), "=&q" (
__dummy
), "=&r" (
__n
)

965 : "0" (
__§c
), "1" (
__tmp
), "3" (
__n
)

968  
__de°
;

969 
	}
}

973 
	#_HAVE_STRING_ARCH_°rˇt
 1

	)

974 
	#°rˇt
(
de°
, 
§c
) \

975 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

976 ? 
	`__°rˇt_c
 ((
de°
), (
§c
), 
	`°æí
 (src) + 1) \

977 : 
	`__°rˇt_g
 ((
de°
), (
§c
))))

	)

979 
__STRING_INLINE
 *
__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[],

980 
size_t
 
__§˛í
);

982 
__STRING_INLINE
 *

983 
	$__°rˇt_c
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__§˛í
)

985 #ifde‡
__i686__


986 
__d0
;

987 *
__tmp
;

988 
__asm__
 
__vﬁ©ûe__


990 : "=D" (
__tmp
), "=&c" (
__d0
),

991 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

992 : "0" (
__de°
), "1" (0xffffffff), "a" (0),

993 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

995 --
__tmp
;

997 *
__tmp
 = 
__de°
 - 1;

998 
__asm__
 
__vﬁ©ûe__


1003 : "Ù" (
__tmp
),

1004 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1005 : "0" (
__tmp
),

1006 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__§˛í
]; } *)
__§c
)

1009 (Ë
	`mem˝y
 (
__tmp
, 
__§c
, 
__§˛í
);

1010  
__de°
;

1011 
	}
}

1013 
__STRING_INLINE
 *
__°rˇt_g
 (*
__de°
, c⁄° *
__§c
);

1015 
__STRING_INLINE
 *

1016 
	$__°rˇt_g
 (*
__de°
, c⁄° *
__§c
)

1018 *
__tmp
 = 
__de°
 - 1;

1019 
__dummy
;

1020 
__asm__
 
__vﬁ©ûe__


1032 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
),

1033 "=m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__de°
)

1034 : "1" (
__tmp
), "2" (
__§c
),

1035 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__§c
)

1037  
__de°
;

1038 
	}
}

1042 
	#_HAVE_STRING_ARCH_°∫ˇt
 1

	)

1043 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

1044 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

1045 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

1046 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

1047 ? 
	`°rˇt
 (
__de°
, (
§c
)) \

1048 : (*(*)
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

1049 (c⁄° *Ë(
§c
), \

1050 (
n
)Ë0, 
__de°
)) \

1051 : 
	`__°∫ˇt_g
 (
__de°
, (
§c
), (
n
)); }))

	)

1053 
__STRING_INLINE
 *
__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[],

1054 
size_t
 
__n
);

1056 
__STRING_INLINE
 *

1057 
	$__°∫ˇt_g
 (*
__de°
, c⁄° 
__§c
[], 
size_t
 
__n
)

1059 *
__tmp
 = 
__de°
;

1060 
__dummy
;

1061 #ifde‡
__i686__


1062 
__asm__
 
__vﬁ©ûe__


1076 : "=&a" (
__dummy
), "=&D" (
__tmp
), "=&S" (
__§c
), "=&c" (
__n
)

1077 : "g" (
__n
), "0" (0), "1" (
__tmp
), "2" (
__§c
), "3" (0xffffffff)

1080 --
__tmp
;

1081 
__asm__
 
__vﬁ©ûe__


1098 : "=&q" (
__dummy
), "=&r" (
__tmp
), "=&r" (
__§c
), "=&r" (
__n
)

1099 : "1" (
__tmp
), "2" (
__§c
), "3" (
__n
)

1102  
__de°
;

1103 
	}
}

1107 
	#_HAVE_STRING_ARCH_°rcmp
 1

	)

1108 
	#°rcmp
(
s1
, 
s2
) \

1109 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

1110 && ( ((
s1
)[0]Ë!1 || 
	`°æí
 (s1) >= 4) \

1111 && ( ((
s2
)[0]Ë!1 || 
	`°æí
 (s2) >= 4) \

1112 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

1113 (
	`°æí
 (
s1
Ë< såÀ¿(
s2
) \

1114 ? 
	`°æí
 (
s1
Ë: såÀ¿(
s2
)) + 1) \

1115 : (
	`__buûtö_c⁄°™t_p
 (
s1
) &&  ((s1)[0]) == 1 \

1116 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (
s1
) < 4 \

1117 ? (
	`__buûtö_c⁄°™t_p
 (
s2
) &&  ((s2)[0]) == 1 \

1118 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1119 (c⁄° *Ë(
s2
), \

1120 
	`°æí
 (
s1
)) \

1121 : 
	`__°rcmp_cg
 ((c⁄° *Ë(
s1
), \

1122 (c⁄° *Ë(
s2
), \

1123 
	`°æí
 (
s1
))) \

1124 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&&  ((
s1
)[0]) == 1 \

1125 &&  ((
s2
)[0]Ë=1 && 
	`°æí
 (s2) < 4 \

1126 ? (
	`__buûtö_c⁄°™t_p
 (
s1
) \

1127 ? 
	`__°rcmp_cc
 ((c⁄° *Ë(
s1
), \

1128 (c⁄° *Ë(
s2
), \

1129 
	`°æí
 (
s2
)) \

1130 : 
	`__°rcmp_gc
 ((c⁄° *Ë(
s1
), \

1131 (c⁄° *Ë(
s2
), \

1132 
	`°æí
 (
s2
))) \

1133 : 
	`__°rcmp_gg
 ((
s1
), (
s2
))))))

	)

1135 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

1136 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = (
s1
)[0] - (
s2
)[0]; \

1137 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

1139 
__ªsu…
 = (
s1
)[1] - (
s2
)[1]; \

1140 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

1142 
__ªsu…
 = (
s1
)[2] - (
s2
)[2]; \

1143 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

1144 
__ªsu…
 = (
s1
)[3] - (
s2
)[3]; \

1147 
__ªsu…
; }))

	)

1149 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

1150 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = (
s2
); \

1151 
__ªsu…
 = (
s1
)[0] - 
__s2
[0]; \

1152 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

1154 
__ªsu…
 = (
s1
)[1] - 
__s2
[1]; \

1155 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

1157 
__ªsu…
 = (
s1
)[2] - 
__s2
[2]; \

1158 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

1159 
__ªsu…
 = (
s1
)[3] - 
__s2
[3]; \

1162 
__ªsu…
; }))

	)

1164 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
) \

1165 (
	`__exãnsi⁄__
 ({ c⁄° *
__s1
 = (
s1
); \

1166 
__ªsu…
 = 
__s1
[0] - (
s2
)[0]; \

1167 i‡(
l2
 > 0 && 
__ªsu…
 == 0) \

1169 
__ªsu…
 = 
__s1
[1] - (
s2
)[1]; \

1170 i‡(
l2
 > 1 && 
__ªsu…
 == 0) \

1172 
__ªsu…
 = 
__s1
[2] - (
s2
)[2]; \

1173 i‡(
l2
 > 2 && 
__ªsu…
 == 0) \

1174 
__ªsu…
 = 
__s1
[3] - (
s2
)[3]; \

1177 
__ªsu…
; }))

	)

1179 
__STRING_INLINE
 
__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
);

1181 
__STRING_INLINE
 

1182 
	$__°rcmp_gg
 (c⁄° *
__s1
, c⁄° *
__s2
)

1184 
__ªs
;

1185 
__asm__
 
__vﬁ©ûe__


1201 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
)

1202 : "1" (
__s1
), "2" (
__s2
),

1203 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s1
),

1204 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s2
)

1206  
__ªs
;

1207 
	}
}

1211 
	#_HAVE_STRING_ARCH_°∫cmp
 1

	)

1212 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

1213 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`°æí
 (s1Ë< ((
size_t
Ë(
n
)) \

1214 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1215 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`°æí
 (s2Ë< ((
size_t
Ë(
n
))\

1216 ? 
	`°rcmp
 ((
s1
), (
s2
)) \

1217 : 
	`__°∫cmp_g
 ((
s1
), (
s2
), (
n
)))))

	)

1219 
__STRING_INLINE
 
__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
,

1220 
size_t
 
__n
);

1222 
__STRING_INLINE
 

1223 
	$__°∫cmp_g
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

1225 
__ªs
;

1226 
__asm__
 
__vﬁ©ûe__


1245 : "=q" (
__ªs
), "=&r" (
__s1
), "=&r" (
__s2
), "=&r" (
__n
)

1246 : "1" (
__s1
), "2" (
__s2
), "3" (
__n
),

1247 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s1
),

1248 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__n
]; } *)
__s2
)

1250  
__ªs
;

1251 
	}
}

1255 
	#_HAVE_STRING_ARCH_°rchr
 1

	)

1256 
	#_USE_STRING_ARCH_°rchr
 1

	)

1257 
	#°rchr
(
s
, 
c
) \

1258 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1259 ? ((
c
) == '\0' \

1260 ? (*Ë
	`__øwmemchr
 ((
s
), (
c
)) \

1261 : 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1262 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1264 
__STRING_INLINE
 *
__°rchr_c
 (c⁄° *
__s
, 
__c
);

1266 
__STRING_INLINE
 *

1267 
	$__°rchr_c
 (c⁄° *
__s
, 
__c
)

1269 
__d0
;

1270 *
__ªs
;

1271 
__asm__
 
__vﬁ©ûe__


1281 : "Ù" (
__ªs
), "=&a" (
__d0
)

1282 : "0" (
__s
), "1" (
__c
),

1283 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1285  
__ªs
;

1286 
	}
}

1288 
__STRING_INLINE
 *
__°rchr_g
 (c⁄° *
__s
, 
__c
);

1290 
__STRING_INLINE
 *

1291 
	$__°rchr_g
 (c⁄° *
__s
, 
__c
)

1293 
__d0
;

1294 *
__ªs
;

1295 
__asm__
 
__vﬁ©ûe__


1306 : "Ù" (
__ªs
), "=&a" (
__d0
)

1307 : "0" (
__s
), "1" (
__c
),

1308 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1310  
__ªs
;

1311 
	}
}

1315 
	#_HAVE_STRING_ARCH_°rch∫ul
 1

	)

1316 
	#__°rch∫ul
(
s
, 
c
) \

1317 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1318 ? ((
c
) == '\0' \

1319 ? (*Ë
	`__øwmemchr
 ((
s
), 
c
) \

1320 : 
	`__°rch∫ul_c
 ((
s
), ((
c
) & 0xff) << 8)) \

1321 : 
	`__°rch∫ul_g
 ((
s
), 
c
)))

	)

1323 
__STRING_INLINE
 *
__°rch∫ul_c
 (c⁄° *
__s
, 
__c
);

1325 
__STRING_INLINE
 *

1326 
	$__°rch∫ul_c
 (c⁄° *
__s
, 
__c
)

1328 
__d0
;

1329 *
__ªs
;

1330 
__asm__
 
__vﬁ©ûe__


1340 : "Ù" (
__ªs
), "=&a" (
__d0
)

1341 : "0" (
__s
), "1" (
__c
),

1342 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1344  
__ªs
;

1345 
	}
}

1347 
__STRING_INLINE
 *
__°rch∫ul_g
 (c⁄° *
__s
, 
__c
);

1349 
__STRING_INLINE
 *

1350 
	$__°rch∫ul_g
 (c⁄° *
__s
, 
__c
)

1352 
__d0
;

1353 *
__ªs
;

1354 
__asm__
 
__vﬁ©ûe__


1365 : "Ù" (
__ªs
), "=&a" (
__d0
)

1366 : "0" (
__s
), "1" (
__c
),

1367 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1369  
__ªs
;

1370 
	}
}

1371 #ifde‡
__USE_GNU


1372 
	#°rch∫ul
(
s
, 
c
Ë
	`__°rch∫ul
 ((s), (c))

	)

1376 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1378 
	#_HAVE_STRING_ARCH_ödex
 1

	)

1379 
	#ödex
(
s
, 
c
) \

1380 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1381 ? 
	`__°rchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1382 : 
	`__°rchr_g
 ((
s
), (
c
))))

	)

1387 
	#_HAVE_STRING_ARCH_°ºchr
 1

	)

1388 
	#°ºchr
(
s
, 
c
) \

1389 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1390 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1391 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1393 #ifde‡
__i686__


1394 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1396 
__STRING_INLINE
 *

1397 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1399 
__d0
, 
__d1
;

1400 *
__ªs
;

1401 
__asm__
 
__vﬁ©ûe__


1409 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1410 : "0" (1), "1" (
__s
), "2" (
__c
),

1411 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1413  
__ªs
 - 1;

1414 
	}
}

1416 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1418 
__STRING_INLINE
 *

1419 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1421 
__d0
, 
__d1
;

1422 *
__ªs
;

1423 
__asm__
 
__vﬁ©ûe__


1432 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1433 : "0" (1), "1" (
__s
), "2" (
__c
),

1434 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1436  
__ªs
 - 1;

1437 
	}
}

1439 
__STRING_INLINE
 *
__°ºchr_c
 (c⁄° *
__s
, 
__c
);

1441 
__STRING_INLINE
 *

1442 
	$__°ºchr_c
 (c⁄° *
__s
, 
__c
)

1444 
__d0
, 
__d1
;

1445 *
__ªs
;

1446 
__asm__
 
__vﬁ©ûe__


1456 : "=d" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1457 : "0" (0), "1" (
__s
), "2" (
__c
),

1458 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1460  
__ªs
;

1461 
	}
}

1463 
__STRING_INLINE
 *
__°ºchr_g
 (c⁄° *
__s
, 
__c
);

1465 
__STRING_INLINE
 *

1466 
	$__°ºchr_g
 (c⁄° *
__s
, 
__c
)

1468 
__d0
, 
__d1
;

1469 *
__ªs
;

1470 
__asm__
 
__vﬁ©ûe__


1481 : "Ù" (
__ªs
), "=&S" (
__d0
), "=&a" (
__d1
)

1482 : "0" (0), "1" (
__s
), "2" (
__c
),

1483 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1485  
__ªs
;

1486 
	}
}

1490 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1492 
	#_HAVE_STRING_ARCH_rödex
 1

	)

1493 
	#rödex
(
s
, 
c
) \

1494 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) \

1495 ? 
	`__°ºchr_c
 ((
s
), ((
c
) & 0xff) << 8) \

1496 : 
	`__°ºchr_g
 ((
s
), (
c
))))

	)

1502 
	#_HAVE_STRING_ARCH_°rc•n
 1

	)

1503 
	#°rc•n
(
s
, 
ªje˘
) \

1504 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
) &&  ((reject)[0]) == 1 \

1505 ? ((
ªje˘
)[0] == '\0' \

1506 ? 
	`°æí
 (
s
) \

1507 : ((
ªje˘
)[1] == '\0' \

1508 ? 
	`__°rc•n_c1
 ((
s
), (((
ªje˘
)[0] << 8) & 0xff00)) \

1509 : 
	`__°rc•n_cg
 ((
s
), (
ªje˘
), 
	`°æí
 (reject)))) \

1510 : 
	`__°rc•n_g
 ((
s
), (
ªje˘
))))

	)

1512 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

1514 #i‚de‡
_FORCE_INLINES


1515 
__STRING_INLINE
 
size_t


1516 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

1518 
__d0
;

1519 *
__ªs
;

1520 
__asm__
 
__vﬁ©ûe__


1529 : "Ù" (
__ªs
), "=&a" (
__d0
)

1530 : "0" (
__s
), "1" (
__ªje˘
),

1531 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1533  (
__ªs
 - 1Ë- 
__s
;

1534 
	}
}

1537 
__STRING_INLINE
 
size_t
 
__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[],

1538 
size_t
 
__ªje˘_Àn
);

1540 
__STRING_INLINE
 
size_t


1541 
	$__°rc•n_cg
 (c⁄° *
__s
, c⁄° 
__ªje˘
[], 
size_t
 
__ªje˘_Àn
)

1543 
__d0
, 
__d1
, 
__d2
;

1544 c⁄° *
__ªs
;

1545 
__asm__
 
__vﬁ©ûe__


1556 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1557 : "0" (
__s
), "d" (
__ªje˘
), "g" (
__ªje˘_Àn
)

1559  (
__ªs
 - 1Ë- 
__s
;

1560 
	}
}

1562 
__STRING_INLINE
 
size_t
 
__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
);

1563 #ifde‡
__PIC__


1565 
__STRING_INLINE
 
size_t


1566 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1568 
__d0
, 
__d1
, 
__d2
;

1569 c⁄° *
__ªs
;

1570 
__asm__
 
__vﬁ©ûe__


1587 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1588 : "r" (
__ªje˘
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1590  (
__ªs
 - 1Ë- 
__s
;

1591 
	}
}

1593 
__STRING_INLINE
 
size_t


1594 
	$__°rc•n_g
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

1596 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1597 c⁄° *
__ªs
;

1598 
__asm__
 
__vﬁ©ûe__


1612 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1613 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ªje˘
), "b" (__reject)

1616  (
__ªs
 - 1Ë- 
__s
;

1617 
	}
}

1623 
	#_HAVE_STRING_ARCH_°r•n
 1

	)

1624 
	#°r•n
(
s
, 
ac˚±
) \

1625 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1626 ? ((
ac˚±
)[0] == '\0' \

1627 ? ((Ë(
s
), 0) \

1628 : ((
ac˚±
)[1] == '\0' \

1629 ? 
	`__°r•n_c1
 ((
s
), (((
ac˚±
)[0] << 8 ) & 0xff00)) \

1630 : 
	`__°r•n_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1631 : 
	`__°r•n_g
 ((
s
), (
ac˚±
))))

	)

1633 #i‚de‡
_FORCE_INLINES


1634 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1636 
__STRING_INLINE
 
size_t


1637 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1639 
__d0
;

1640 *
__ªs
;

1642 
__asm__
 
__vﬁ©ûe__


1648 : "Ù" (
__ªs
), "=&q" (
__d0
)

1649 : "0" (
__s
), "1" (
__ac˚±
),

1650 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
)

1652  (
__ªs
 - 1Ë- 
__s
;

1653 
	}
}

1656 
__STRING_INLINE
 
size_t
 
__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1657 
size_t
 
__ac˚±_Àn
);

1659 
__STRING_INLINE
 
size_t


1660 
	$__°r•n_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1662 
__d0
, 
__d1
, 
__d2
;

1663 c⁄° *
__ªs
;

1664 
__asm__
 
__vﬁ©ûe__


1675 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1676 : "0" (
__s
), "g" (
__ac˚±
), "g" (
__ac˚±_Àn
),

1679 "m" ( *(°ru˘ { 
__x
[0xfffffff]; } *)
__s
),

1680 "m" ( *(°ru˘ { 
__exãnsi⁄__
 
__x
[
__ac˚±_Àn
]; } *)
__ac˚±
)

1682  (
__ªs
 - 1Ë- 
__s
;

1683 
	}
}

1685 
__STRING_INLINE
 
size_t
 
__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1686 #ifde‡
__PIC__


1688 
__STRING_INLINE
 
size_t


1689 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1691 
__d0
, 
__d1
, 
__d2
;

1692 c⁄° *
__ªs
;

1693 
__asm__
 
__vﬁ©ûe__


1709 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1710 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (__accept)

1712  (
__ªs
 - 1Ë- 
__s
;

1713 
	}
}

1715 
__STRING_INLINE
 
size_t


1716 
	$__°r•n_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1718 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1719 c⁄° *
__ªs
;

1720 
__asm__
 
__vﬁ©ûe__


1734 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1735 : "0" (
__s
), "1" (0), "2" (0xffffffff), "3" (
__ac˚±
), "b" (__accept)

1737  (
__ªs
 - 1Ë- 
__s
;

1738 
	}
}

1743 
	#_HAVE_STRING_ARCH_°Ωbrk
 1

	)

1744 
	#°Ωbrk
(
s
, 
ac˚±
) \

1745 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
) &&  ((accept)[0]) == 1 \

1746 ? ((
ac˚±
)[0] == '\0' \

1747 ? ((Ë(
s
), (*) 0) \

1748 : ((
ac˚±
)[1] == '\0' \

1749 ? 
	`°rchr
 ((
s
), (
ac˚±
)[0]) \

1750 : 
	`__°Ωbrk_cg
 ((
s
), (
ac˚±
), 
	`°æí
 (accept)))) \

1751 : 
	`__°Ωbrk_g
 ((
s
), (
ac˚±
))))

	)

1753 
__STRING_INLINE
 *
__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[],

1754 
size_t
 
__ac˚±_Àn
);

1756 
__STRING_INLINE
 *

1757 
	$__°Ωbrk_cg
 (c⁄° *
__s
, c⁄° 
__ac˚±
[], 
size_t
 
__ac˚±_Àn
)

1759 
__d0
, 
__d1
, 
__d2
;

1760 *
__ªs
;

1761 
__asm__
 
__vﬁ©ûe__


1776 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1777 : "0" (
__s
), "d" (
__ac˚±
), "g" (
__ac˚±_Àn
)

1779  
__ªs
;

1780 
	}
}

1782 
__STRING_INLINE
 *
__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
);

1783 #ifde‡
__PIC__


1785 
__STRING_INLINE
 *

1786 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1788 
__d0
, 
__d1
, 
__d2
;

1789 *
__ªs
;

1790 
__asm__
 
__vﬁ©ûe__


1811 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&D" (
__d2
)

1812 : "d" (
__ac˚±
), "0" (
__s
), "1" (0), "2" (0xffffffff)

1814  
__ªs
;

1815 
	}
}

1817 
__STRING_INLINE
 *

1818 
	$__°Ωbrk_g
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

1820 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1821 *
__ªs
;

1822 
__asm__
 
__vﬁ©ûe__


1841 : "=S" (
__ªs
), "=&a" (
__d0
), "=&c" (
__d1
), "=&d" (
__d2
), "=&D" (
__d3
)

1842 : "0" (
__s
), "1" (0), "2" (0xffffffff), "b" (
__ac˚±
)

1844  
__ªs
;

1845 
	}
}

1850 
	#_HAVE_STRING_ARCH_°r°r
 1

	)

1851 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1852 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
) &&  ((needle)[0]) == 1 \

1853 ? ((
√edÀ
)[0] == '\0' \

1854 ? (
hay°ack
) \

1855 : ((
√edÀ
)[1] == '\0' \

1856 ? 
	`°rchr
 ((
hay°ack
), (
√edÀ
)[0]) \

1857 : 
	`__°r°r_cg
 ((
hay°ack
), (
√edÀ
), \

1858 
	`°æí
 (
√edÀ
)))) \

1859 : 
	`__°r°r_g
 ((
hay°ack
), (
√edÀ
))))

	)

1863 
__STRING_INLINE
 *
__°r°r_cg
 (c⁄° *
__hay°ack
,

1864 c⁄° 
__√edÀ
[],

1865 
size_t
 
__√edÀ_Àn
);

1867 
__STRING_INLINE
 *

1868 
	$__°r°r_cg
 (c⁄° *
__hay°ack
, c⁄° 
__√edÀ
[],

1869 
size_t
 
__√edÀ_Àn
)

1871 
__d0
, 
__d1
, 
__d2
;

1872 *
__ªs
;

1873 
__asm__
 
__vﬁ©ûe__


1886 : "=&a" (
__ªs
), "=&S" (
__d0
), "=&D" (
__d1
), "=&c" (
__d2
)

1887 : "g" (
__√edÀ_Àn
), "1" (
__hay°ack
), "d" (
__√edÀ
)

1889  
__ªs
;

1890 
	}
}

1892 
__STRING_INLINE
 *
__°r°r_g
 (c⁄° *
__hay°ack
,

1893 c⁄° *
__√edÀ
);

1894 #ifde‡
__PIC__


1896 
__STRING_INLINE
 *

1897 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1899 
__d0
, 
__d1
, 
__d2
;

1900 *
__ªs
;

1901 
__asm__
 
__vﬁ©ûe__


1920 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
)

1921 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1922 "d" (
__√edÀ
)

1924  
__ªs
;

1925 
	}
}

1927 
__STRING_INLINE
 *

1928 
	$__°r°r_g
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

1930 
__d0
, 
__d1
, 
__d2
, 
__d3
;

1931 *
__ªs
;

1932 
__asm__
 
__vﬁ©ûe__


1949 : "=&a" (
__ªs
), "=&c" (
__d0
), "=&S" (
__d1
), "=&D" (
__d2
), "=&d" (
__d3
)

1950 : "0" (0), "1" (0xffffffff), "2" (
__hay°ack
), "3" (
__√edÀ
),

1951 "b" (
__√edÀ
)

1953  
__ªs
;

1954 
	}
}

1960 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1961 #ifde‡
__i686__


1962 
	#_HAVE_STRING_ARCH_ffs
 1

	)

1963 
	#ffs
(
w‹d
Ë(
	`__buûtö_c⁄°™t_p
 (word) \

1964 ? 
	`__buûtö_ffs
 (
w‹d
) \

1965 : ({ 
__˙t
, 
__tmp
; \

1966 
__asm__
 
__vﬁ©ûe__
 \

1969 : "=&r" (
__˙t
), "Ù" (
__tmp
) \

1970 : "rm" (
w‹d
), "1" (-1)); \

1971 
__˙t
 + 1; }))

	)

1973 #i‚de‡
ff¶


1974 
	#ff¶
(
w‹d
Ë
	`ffs
(w‹d)

	)

1979 #i‚de‡
_FORCE_INLINES


1980 #unde‡
__STRING_INLINE


	@/usr/include/bits/string2.h

20 #i‚de‡
_STRING_H


24 #i‚de‡
__NO_STRING_INLINES


41 #i‚de‡
__STRING_INLINE


42 #ifde‡
__˝lu•lus


43 
	#__STRING_INLINE
 
ölöe


	)

45 
	#__STRING_INLINE
 
__exã∫_ölöe


	)

49 #i‡
_STRING_ARCH_u«lig√d


51 
	~<ídün.h
>

52 
	~<bôs/ty≥s.h
>

54 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


55 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

56 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1] << 8 \

57 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

58 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

59 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3] << 8 \

60 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

61 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

62 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
])

	)

64 
	#__STRING2_SMALL_GET16
(
§c
, 
idx
) \

65 (((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

66 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1])

	)

67 
	#__STRING2_SMALL_GET32
(
§c
, 
idx
) \

68 (((((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
] << 8 \

69 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 1]) << 8 \

70 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 2]) << 8 \

71 | ((c⁄° *Ë(c⁄° *Ë(
§c
))[
idx
 + 3])

	)

76 
	#__STRING2_COPY_TYPE
(
N
) \

77 °ru˘ { 
__¨r
[
N
]; } \

78 
	t__©åibuã__
 ((
	t__∑cked__
)Ë
	t__STRING2_COPY_ARR
##
	tN


	)

79 
	t__STRING2_COPY_TYPE
 (2);

80 
__STRING2_COPY_TYPE
 (3);

81 
__STRING2_COPY_TYPE
 (4);

82 
__STRING2_COPY_TYPE
 (5);

83 
__STRING2_COPY_TYPE
 (6);

84 
__STRING2_COPY_TYPE
 (7);

85 
__STRING2_COPY_TYPE
 (8);

86 #unde‡
__STRING2_COPY_TYPE


92 
	#__°rög2_1b±r_p
(
__x
) \

93 ((
size_t
)(c⁄° *)((
__x
Ë+ 1Ë- (size_t)(c⁄° *)(__xË=1)

	)

96 #i‡!
deföed
 
_HAVE_STRING_ARCH_mem£t


97 #i‡!
__GNUC_PREREQ
 (3, 0)

98 #i‡
_STRING_ARCH_u«lig√d


99 
	#mem£t
(
s
, 
c
, 
n
) \

100 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) && (n) <= 16 \

101 ? ((
n
) == 1 \

102 ? 
	`__mem£t_1
 (
s
, 
c
) \

103 : 
	`__mem£t_gc
 (
s
, 
c
, 
n
)) \

104 : (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

105 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

106 : 
	`mem£t
 (
s
, 
c
, 
n
))))

	)

108 
	#__mem£t_1
(
s
, 
c
Ë({ *
__s
 = (s); \

109 *((
__uöt8_t
 *Ë
__s
Ë(__uöt8_tË
c
; __s; })

	)

111 
	#__mem£t_gc
(
s
, 
c
, 
n
) \

112 ({ *
__s
 = (
s
); \

114 
__ui
; \

115 
__usi
; \

116 
__uc
; \

117 } *
__u
 = 
__s
; \

118 
__uöt8_t
 
__c
 = (__uöt8_tË(
c
); \

121 (Ë(
n
)) \

124 
__u
->
__ui
 = 
__c
 * 0x01010101; \

125 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

127 
__u
->
__ui
 = 
__c
 * 0x01010101; \

128 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

130 
__u
->
__ui
 = 
__c
 * 0x01010101; \

131 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

133 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

134 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2); \

135 
__u
->
__uc
 = (Ë
__c
; \

139 
__u
->
__ui
 = 
__c
 * 0x01010101; \

140 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

142 
__u
->
__ui
 = 
__c
 * 0x01010101; \

143 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

145 
__u
->
__ui
 = 
__c
 * 0x01010101; \

146 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

148 
__u
->
__usi
 = (Ë
__c
 * 0x0101; \

152 
__u
->
__ui
 = 
__c
 * 0x01010101; \

153 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

155 
__u
->
__ui
 = 
__c
 * 0x01010101; \

156 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

158 
__u
->
__ui
 = 
__c
 * 0x01010101; \

159 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

161 
__u
->
__uc
 = (Ë
__c
; \

165 
__u
->
__ui
 = 
__c
 * 0x01010101; \

166 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

168 
__u
->
__ui
 = 
__c
 * 0x01010101; \

169 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

171 
__u
->
__ui
 = 
__c
 * 0x01010101; \

172 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4); \

174 
__u
->
__ui
 = 
__c
 * 0x01010101; \

179 
__s
; })

	)

181 
	#mem£t
(
s
, 
c
, 
n
) \

182 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

183 ? ({ *
__s
 = (
s
); 
	`__bzîo
 (__s, 
n
); __s; }) \

184 : 
	`mem£t
 (
s
, 
c
, 
n
)))

	)

193 #i‡
__GNUC_PREREQ
 (2, 91)

194 
	#__bzîo
(
s
, 
n
Ë
	`__buûtö_mem£t
 (s, '\0',Ç)

	)

202 #ifde‡
__USE_GNU


203 #i‡!
deföed
 
_HAVE_STRING_ARCH_memp˝y
 || deföed 
_FORCE_INLINES


204 #i‚de‡
_HAVE_STRING_ARCH_memp˝y


205 #i‡
__GNUC_PREREQ
 (3, 4)

206 
	#__memp˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_memp˝y
 (de°, src,Ç)

	)

207 #ñi‡
__GNUC_PREREQ
 (3, 0)

208 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

209 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

210 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

211 ? 
	`__buûtö_mem˝y
 (
de°
, 
§c
, 
n
) + (n) \

212 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

214 
	#__memp˝y
(
de°
, 
§c
, 
n
) \

215 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

216 && 
	`__°rög2_1b±r_p
 (
§c
Ë&& 
n
 <= 8 \

217 ? 
	`__memp˝y_smÆl
 (
de°
, 
	`__memp˝y_¨gs
 (
§c
), 
n
) \

218 : 
	`__memp˝y
 (
de°
, 
§c
, 
n
)))

	)

222 
	#memp˝y
(
de°
, 
§c
, 
n
Ë
	`__memp˝y
 (de°, src,Ç)

	)

225 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


226 #i‡
_STRING_ARCH_u«lig√d


227 #i‚de‡
_FORCE_INLINES


228 
	#__memp˝y_¨gs
(
§c
) \

229 ((c⁄° *Ë(
§c
))[0], ((const *) (src))[2], \

230 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[6], \

231 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

232 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

233 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

234 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

236 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , , , ,

237 
__uöt16_t
, __uöt16_t, 
__uöt32_t
,

238 
__uöt32_t
, 
size_t
);

239 
__STRING_INLINE
 *

240 
	$__memp˝y_smÆl
 (*
__de°1
,

241 
__§c0_1
, 
__§c2_1
, 
__§c4_1
, 
__§c6_1
,

242 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

243 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

244 
size_t
 
__§˛í
)

247 
__uöt32_t
 
__ui
;

248 
__uöt16_t
 
__usi
;

249 
__uc
;

250 
__c
;

251 } *
__u
 = 
__de°1
;

252 (Ë
__§˛í
)

255 
__u
->
__c
 = 
__§c0_1
;

256 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

259 
__u
->
__usi
 = 
__§c0_2
;

260 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

263 
__u
->
__usi
 = 
__§c0_2
;

264 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

265 
__u
->
__c
 = 
__§c2_1
;

266 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

269 
__u
->
__ui
 = 
__§c0_4
;

270 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

273 
__u
->
__ui
 = 
__§c0_4
;

274 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

275 
__u
->
__c
 = 
__§c4_1
;

276 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

279 
__u
->
__ui
 = 
__§c0_4
;

280 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

281 
__u
->
__usi
 = 
__§c4_2
;

282 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

285 
__u
->
__ui
 = 
__§c0_4
;

286 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

287 
__u
->
__usi
 = 
__§c4_2
;

288 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

289 
__u
->
__c
 = 
__§c6_1
;

290 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

293 
__u
->
__ui
 = 
__§c0_4
;

294 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

295 
__u
->
__ui
 = 
__§c4_4
;

296 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

299  (*Ë
__u
;

300 
	}
}

302 #i‚de‡
_FORCE_INLINES


303 
	#__memp˝y_¨gs
(
§c
) \

304 ((c⁄° *Ë(
§c
))[0], \

305 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

306 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1] } }), \

307 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

308 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

309 ((c⁄° *Ë(
§c
))[2] } }), \

310 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

311 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

312 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3] } }), \

313 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

314 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

315 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

316 ((c⁄° *Ë(
§c
))[4] } }), \

317 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

318 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

319 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

320 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5] } }), \

321 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

322 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

323 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

324 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

325 ((c⁄° *Ë(
§c
))[6] } }), \

326 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

327 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

328 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

329 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

330 ((c⁄° *Ë(
§c
))[6], ((c⁄° *Ë(§c))[7] } })

	)

332 
__STRING_INLINE
 *
__memp˝y_smÆl
 (*, , 
__STRING2_COPY_ARR2
,

333 
__STRING2_COPY_ARR3
,

334 
__STRING2_COPY_ARR4
,

335 
__STRING2_COPY_ARR5
,

336 
__STRING2_COPY_ARR6
,

337 
__STRING2_COPY_ARR7
,

338 
__STRING2_COPY_ARR8
, 
size_t
);

339 
__STRING_INLINE
 *

340 
	$__memp˝y_smÆl
 (*
__de°
, 
__§c1
,

341 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

342 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

343 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

344 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

347 
__c
;

348 
__STRING2_COPY_ARR2
 
__sˇ2
;

349 
__STRING2_COPY_ARR3
 
__sˇ3
;

350 
__STRING2_COPY_ARR4
 
__sˇ4
;

351 
__STRING2_COPY_ARR5
 
__sˇ5
;

352 
__STRING2_COPY_ARR6
 
__sˇ6
;

353 
__STRING2_COPY_ARR7
 
__sˇ7
;

354 
__STRING2_COPY_ARR8
 
__sˇ8
;

355 } *
__u
 = 
__de°
;

356 (Ë
__§˛í
)

359 
__u
->
__c
 = 
__§c1
;

362 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

365 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

368 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

371 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

374 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

377 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

380 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

383  
	`__exãnsi⁄__
 ((*Ë
__u
 + 
__§˛í
);

384 
	}
}

392 #i‚de‡
_HAVE_STRING_ARCH_°rchr


393 *
__øwmemchr
 (c⁄° *
__s
, 
__c
);

394 #i‡
__GNUC_PREREQ
 (3, 2)

395 
	#°rchr
(
s
, 
c
) \

396 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
Ë&& !__buûtö_c⁄°™t_∞(
s
) \

397 && (
c
) == '\0' \

398 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

399 : 
	`__buûtö_°rchr
 (
s
, 
c
)))

	)

401 
	#°rchr
(
s
, 
c
) \

402 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
c
) && (c) == '\0' \

403 ? (*Ë
	`__øwmemchr
 (
s
, 
c
) \

404 : 
	`°rchr
 (
s
, 
c
)))

	)

410 #i‡(!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)) \

411 || 
deföed
 
	g_FORCE_INLINES


412 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r˝y
 && !
__GNUC_PREREQ
 (3, 0)

413 
	#°r˝y
(
de°
, 
§c
) \

414 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

415 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

416 ? 
	`__°r˝y_smÆl
 (
de°
, 
	`__°r˝y_¨gs
 (
§c
), \

417 
	`°æí
 (
§c
) + 1) \

418 : (*Ë
	`mem˝y
 (
de°
, 
§c
, 
	`°æí
 (src) + 1)) \

419 : 
	`°r˝y
 (
de°
, 
§c
)))

	)

422 #i‡
_STRING_ARCH_u«lig√d


423 #i‚de‡
_FORCE_INLINES


424 
	#__°r˝y_¨gs
(
§c
) \

425 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

426 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

427 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

428 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

430 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

431 
__uöt32_t
, __uöt32_t, 
size_t
);

432 
__STRING_INLINE
 *

433 
	$__°r˝y_smÆl
 (*
__de°
,

434 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

435 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

436 
size_t
 
__§˛í
)

439 
__uöt32_t
 
__ui
;

440 
__uöt16_t
 
__usi
;

441 
__uc
;

442 } *
__u
 = (*Ë
__de°
;

443 (Ë
__§˛í
)

446 
__u
->
__uc
 = '\0';

449 
__u
->
__usi
 = 
__§c0_2
;

452 
__u
->
__usi
 = 
__§c0_2
;

453 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

454 
__u
->
__uc
 = '\0';

457 
__u
->
__ui
 = 
__§c0_4
;

460 
__u
->
__ui
 = 
__§c0_4
;

461 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

462 
__u
->
__uc
 = '\0';

465 
__u
->
__ui
 = 
__§c0_4
;

466 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

467 
__u
->
__usi
 = 
__§c4_2
;

470 
__u
->
__ui
 = 
__§c0_4
;

471 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

472 
__u
->
__usi
 = 
__§c4_2
;

473 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

474 
__u
->
__uc
 = '\0';

477 
__u
->
__ui
 = 
__§c0_4
;

478 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

479 
__u
->
__ui
 = 
__§c4_4
;

482  
__de°
;

483 
	}
}

485 #i‚de‡
_FORCE_INLINES


486 
	#__°r˝y_¨gs
(
§c
) \

487 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

488 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

489 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

490 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

492 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

493 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

494 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

495 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

496 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

497 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

499 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

500 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

501 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

502 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

503 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

504 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

505 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

506 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

508 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

509 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

510 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

511 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

512 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

514 
__STRING_INLINE
 *
__°r˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

515 
__STRING2_COPY_ARR3
,

516 
__STRING2_COPY_ARR4
,

517 
__STRING2_COPY_ARR5
,

518 
__STRING2_COPY_ARR6
,

519 
__STRING2_COPY_ARR7
,

520 
__STRING2_COPY_ARR8
, 
size_t
);

521 
__STRING_INLINE
 *

522 
	$__°r˝y_smÆl
 (*
__de°
,

523 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

524 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

525 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

526 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

529 
__c
;

530 
__STRING2_COPY_ARR2
 
__sˇ2
;

531 
__STRING2_COPY_ARR3
 
__sˇ3
;

532 
__STRING2_COPY_ARR4
 
__sˇ4
;

533 
__STRING2_COPY_ARR5
 
__sˇ5
;

534 
__STRING2_COPY_ARR6
 
__sˇ6
;

535 
__STRING2_COPY_ARR7
 
__sˇ7
;

536 
__STRING2_COPY_ARR8
 
__sˇ8
;

537 } *
__u
 = (*Ë
__de°
;

538 (Ë
__§˛í
)

541 
__u
->
__c
 = '\0';

544 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

547 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

550 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

553 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

556 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

559 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

562 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

565  
__de°
;

566 
	}
}

572 #ifde‡
__USE_GNU


573 #i‡!
deföed
 
_HAVE_STRING_ARCH_°p˝y
 || deföed 
_FORCE_INLINES


574 #i‚de‡
_HAVE_STRING_ARCH_°p˝y


575 #i‡
__GNUC_PREREQ
 (3, 4)

576 
	#__°p˝y
(
de°
, 
§c
Ë
	`__buûtö_°p˝y
 (de°, src)

	)

577 #ñi‡
__GNUC_PREREQ
 (3, 0)

578 
	#__°p˝y
(
de°
, 
§c
) \

579 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

580 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

581 ? 
	`__buûtö_°r˝y
 (
de°
, 
§c
Ë+ 
	`°æí
 (src) \

582 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

584 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

586 
	#__°p˝y
(
de°
, 
§c
) \

587 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
) \

588 ? (
	`__°rög2_1b±r_p
 (
§c
Ë&& 
	`°æí
 (src) + 1 <= 8 \

589 ? 
	`__°p˝y_smÆl
 (
de°
, 
	`__°p˝y_¨gs
 (
§c
), \

590 
	`°æí
 (
§c
) + 1) \

591 : ((*Ë(
__memp˝y
Ë(
de°
, 
§c
, 
	`°æí
 (src) + 1) \

593 : 
	`__°p˝y
 (
de°
, 
§c
)))

	)

597 
	#°p˝y
(
de°
, 
§c
Ë
	`__°p˝y
 (de°, src)

	)

600 #i‡!
__GNUC_PREREQ
 (3, 0Ë|| 
deföed
 
_FORCE_INLINES


601 #i‡
_STRING_ARCH_u«lig√d


602 #i‚de‡
_FORCE_INLINES


603 
	#__°p˝y_¨gs
(
§c
) \

604 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 0), \

605 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET16
 (
§c
, 4), \

606 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 0), \

607 
__exãnsi⁄__
 
	`__STRING2_SMALL_GET32
 (
§c
, 4)

	)

609 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__uöt16_t
, __uint16_t,

610 
__uöt32_t
, __uöt32_t, 
size_t
);

611 
__STRING_INLINE
 *

612 
	$__°p˝y_smÆl
 (*
__de°
,

613 
__uöt16_t
 
__§c0_2
, __uöt16_à
__§c4_2
,

614 
__uöt32_t
 
__§c0_4
, __uöt32_à
__§c4_4
,

615 
size_t
 
__§˛í
)

618 
__ui
;

619 
__usi
;

620 
__uc
;

621 
__c
;

622 } *
__u
 = (*Ë
__de°
;

623 (Ë
__§˛í
)

626 
__u
->
__uc
 = '\0';

629 
__u
->
__usi
 = 
__§c0_2
;

630 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

633 
__u
->
__usi
 = 
__§c0_2
;

634 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

635 
__u
->
__uc
 = '\0';

638 
__u
->
__ui
 = 
__§c0_4
;

639 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

642 
__u
->
__ui
 = 
__§c0_4
;

643 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

644 
__u
->
__uc
 = '\0';

647 
__u
->
__ui
 = 
__§c0_4
;

648 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

649 
__u
->
__usi
 = 
__§c4_2
;

650 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 1);

653 
__u
->
__ui
 = 
__§c0_4
;

654 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

655 
__u
->
__usi
 = 
__§c4_2
;

656 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 2);

657 
__u
->
__uc
 = '\0';

660 
__u
->
__ui
 = 
__§c0_4
;

661 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 4);

662 
__u
->
__ui
 = 
__§c4_4
;

663 
__u
 = 
	`__exãnsi⁄__
 ((*) __u + 3);

666  &
__u
->
__c
;

667 
	}
}

669 #i‚de‡
_FORCE_INLINES


670 
	#__°p˝y_¨gs
(
§c
) \

671 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR2
) \

672 { { ((c⁄° *Ë(
§c
))[0], '\0' } }), \

673 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR3
) \

674 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

676 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR4
) \

677 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

678 ((c⁄° *Ë(
§c
))[2], '\0' } }), \

679 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR5
) \

680 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

681 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

683 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR6
) \

684 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

685 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

686 ((c⁄° *Ë(
§c
))[4], '\0' } }), \

687 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR7
) \

688 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

689 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

690 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

692 
	`__exãnsi⁄__
 ((
__STRING2_COPY_ARR8
) \

693 { { ((c⁄° *Ë(
§c
))[0], ((const *) (src))[1], \

694 ((c⁄° *Ë(
§c
))[2], ((const *) (src))[3], \

695 ((c⁄° *Ë(
§c
))[4], ((const *) (src))[5], \

696 ((c⁄° *Ë(
§c
))[6], '\0' } })

	)

698 
__STRING_INLINE
 *
__°p˝y_smÆl
 (*, 
__STRING2_COPY_ARR2
,

699 
__STRING2_COPY_ARR3
,

700 
__STRING2_COPY_ARR4
,

701 
__STRING2_COPY_ARR5
,

702 
__STRING2_COPY_ARR6
,

703 
__STRING2_COPY_ARR7
,

704 
__STRING2_COPY_ARR8
, 
size_t
);

705 
__STRING_INLINE
 *

706 
	$__°p˝y_smÆl
 (*
__de°
,

707 
__STRING2_COPY_ARR2
 
__§c2
, 
__STRING2_COPY_ARR3
 
__§c3
,

708 
__STRING2_COPY_ARR4
 
__§c4
, 
__STRING2_COPY_ARR5
 
__§c5
,

709 
__STRING2_COPY_ARR6
 
__§c6
, 
__STRING2_COPY_ARR7
 
__§c7
,

710 
__STRING2_COPY_ARR8
 
__§c8
, 
size_t
 
__§˛í
)

713 
__c
;

714 
__STRING2_COPY_ARR2
 
__sˇ2
;

715 
__STRING2_COPY_ARR3
 
__sˇ3
;

716 
__STRING2_COPY_ARR4
 
__sˇ4
;

717 
__STRING2_COPY_ARR5
 
__sˇ5
;

718 
__STRING2_COPY_ARR6
 
__sˇ6
;

719 
__STRING2_COPY_ARR7
 
__sˇ7
;

720 
__STRING2_COPY_ARR8
 
__sˇ8
;

721 } *
__u
 = (*Ë
__de°
;

722 (Ë
__§˛í
)

725 
__u
->
__c
 = '\0';

728 
__exãnsi⁄__
 
__u
->
__sˇ2
 = 
__§c2
;

731 
__exãnsi⁄__
 
__u
->
__sˇ3
 = 
__§c3
;

734 
__exãnsi⁄__
 
__u
->
__sˇ4
 = 
__§c4
;

737 
__exãnsi⁄__
 
__u
->
__sˇ5
 = 
__§c5
;

740 
__exãnsi⁄__
 
__u
->
__sˇ6
 = 
__§c6
;

743 
__exãnsi⁄__
 
__u
->
__sˇ7
 = 
__§c7
;

746 
__exãnsi⁄__
 
__u
->
__sˇ8
 = 
__§c8
;

749  
__de°
 + 
__§˛í
 - 1;

750 
	}
}

758 #i‚de‡
_HAVE_STRING_ARCH_°∫˝y


759 #i‡
__GNUC_PREREQ
 (3, 2)

760 
	#°∫˝y
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫˝y
 (de°, src,Ç)

	)

762 
	#°∫˝y
(
de°
, 
§c
, 
n
) \

763 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

764 ? (
	`°æí
 (
§c
Ë+ 1 >((
size_t
Ë(
n
)) \

765 ? (*Ë
	`mem˝y
 (
de°
, 
§c
, 
n
) \

766 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)) \

767 : 
	`°∫˝y
 (
de°
, 
§c
, 
n
)))

	)

773 #i‚de‡
_HAVE_STRING_ARCH_°∫ˇt


774 #ifde‡
_USE_STRING_ARCH_°rchr


775 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

776 (
	`__exãnsi⁄__
 ({ *
__de°
 = (
de°
); \

777 
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

778 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

779 ? 
	`°rˇt
 (
__de°
, 
§c
) \

780 : (*((*Ë
	`__memp˝y
 (
	`°rchr
 (
__de°
, '\0'), \

781 
§c
, 
n
)Ë'\0', 
__de°
)) \

782 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
); }))

	)

783 #ñi‡
__GNUC_PREREQ
 (3, 2)

784 
	#°∫ˇt
(
de°
, 
§c
, 
n
Ë
	`__buûtö_°∫ˇt
 (de°, src,Ç)

	)

786 
	#°∫ˇt
(
de°
, 
§c
, 
n
) \

787 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
§c
Ë&& __buûtö_c⁄°™t_∞(
n
) \

788 ? (
	`°æí
 (
§c
Ë< ((
size_t
Ë(
n
)) \

789 ? 
	`°rˇt
 (
de°
, 
§c
) \

790 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)) \

791 : 
	`°∫ˇt
 (
de°
, 
§c
, 
n
)))

	)

797 #i‚de‡
_HAVE_STRING_ARCH_°rcmp


798 #i‡
__GNUC_PREREQ
 (3, 2)

799 
	#°rcmp
(
s1
, 
s2
) \

800 
__exãnsi⁄__
 \

801 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

802 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

803 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), 
__s2_Àn
 = __buûtö_°æí (
s2
), \

804 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

805 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

806 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

807 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

808 && (
__s1_Àn
 = 
	`__buûtö_°æí
 (
s1
), __s1_len < 4) \

809 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

810 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

811 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

812 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

813 && (
__s2_Àn
 = 
	`__buûtö_°æí
 (
s2
), __s2_len < 4) \

814 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

815 ? 
	`__buûtö_°rcmp
 (
s1
, 
s2
) \

816 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

817 : 
	`__buûtö_°rcmp
 (
s1
, 
s2
)))); })

	)

819 
	#°rcmp
(
s1
, 
s2
) \

820 
__exãnsi⁄__
 \

821 ({ 
size_t
 
__s1_Àn
, 
__s2_Àn
; \

822 (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& __buûtö_c⁄°™t_∞(
s2
) \

823 && (
__s1_Àn
 = 
	`°æí
 (
s1
), 
__s2_Àn
 = såÀ¿(
s2
), \

824 (!
	`__°rög2_1b±r_p
 (
s1
Ë|| 
__s1_Àn
 >= 4) \

825 && (!
	`__°rög2_1b±r_p
 (
s2
Ë|| 
__s2_Àn
 >= 4)) \

826 ? 
	`memcmp
 ((c⁄° *Ë(
s1
), (c⁄° *Ë(
s2
), \

827 (
__s1_Àn
 < 
__s2_Àn
 ? __s1_len : __s2_len) + 1) \

828 : (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

829 && (
__s1_Àn
 = 
	`°æí
 (
s1
), __s1_len < 4) \

830 ? (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

831 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s1_Àn
) \

832 : 
	`__°rcmp_cg
 (
s1
, 
s2
, 
__s1_Àn
)) \

833 : (
	`__buûtö_c⁄°™t_p
 (
s2
Ë&& 
	`__°rög2_1b±r_p
 (s2) \

834 && (
__s2_Àn
 = 
	`°æí
 (
s2
), __s2_len < 4) \

835 ? (
	`__buûtö_c⁄°™t_p
 (
s1
Ë&& 
	`__°rög2_1b±r_p
 (s1) \

836 ? 
	`__°rcmp_cc
 (
s1
, 
s2
, 
__s2_Àn
) \

837 : 
	`__°rcmp_gc
 (
s1
, 
s2
, 
__s2_Àn
)) \

838 : 
	`°rcmp
 (
s1
, 
s2
)))); })

	)

841 
	#__°rcmp_cc
(
s1
, 
s2
, 
l
) \

842 (
	`__exãnsi⁄__
 ({ 
__ªsu…
 = \

843 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

844 - ((c⁄° *Ë(c⁄° *)(
s2
))[0]); \

845 i‡(
l
 > 0 && 
__ªsu…
 == 0) \

847 
__ªsu…
 = (((const *) \

848 (c⁄° *Ë(
s1
))[1] \

850 (c⁄° *Ë(
s2
))[1]); \

851 i‡(
l
 > 1 && 
__ªsu…
 == 0) \

853 
__ªsu…
 = \

855 (c⁄° *Ë(
s1
))[2] \

857 (c⁄° *Ë(
s2
))[2]); \

858 i‡(
l
 > 2 && 
__ªsu…
 == 0) \

859 
__ªsu…
 = \

861 (c⁄° *Ë(
s1
))[3] \

863 (c⁄° *Ë(
s2
))[3]); \

866 
__ªsu…
; }))

	)

868 
	#__°rcmp_cg
(
s1
, 
s2
, 
l1
) \

869 (
	`__exãnsi⁄__
 ({ c⁄° *
__s2
 = \

870 (c⁄° *Ë(c⁄° *Ë(
s2
); \

871 
__ªsu…
 = \

872 (((c⁄° *Ë(c⁄° *Ë(
s1
))[0] \

873 - 
__s2
[0]); \

874 i‡(
l1
 > 0 && 
__ªsu…
 == 0) \

876 
__ªsu…
 = (((const *) \

877 (c⁄° *Ë(
s1
))[1] - 
__s2
[1]); \

878 i‡(
l1
 > 1 && 
__ªsu…
 == 0) \

880 
__ªsu…
 = (((const *) \

881 (c⁄° *Ë(
s1
))[2] - 
__s2
[2]); \

882 i‡(
l1
 > 2 && 
__ªsu…
 == 0) \

883 
__ªsu…
 = (((const *) \

884 (c⁄° *Ë(
s1
))[3] \

885 - 
__s2
[3]); \

888 
__ªsu…
; }))

	)

890 
	#__°rcmp_gc
(
s1
, 
s2
, 
l2
Ë(- 
	`__°rcmp_cg
 (s2, s1,Ü2))

	)

895 #i‚de‡
_HAVE_STRING_ARCH_°∫cmp


896 
	#°∫cmp
(
s1
, 
s2
, 
n
) \

897 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
n
) \

898 && ((
	`__buûtö_c⁄°™t_p
 (
s1
) \

899 && 
	`°æí
 (
s1
Ë< ((
size_t
Ë(
n
))) \

900 || (
	`__buûtö_c⁄°™t_p
 (
s2
) \

901 && 
	`°æí
 (
s2
Ë< ((
size_t
Ë(
n
)))) \

902 ? 
	`°rcmp
 (
s1
, 
s2
Ë: 
	`°∫cmp
 (s1, s2, 
n
)))

	)

908 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rc•n
 || deföed 
_FORCE_INLINES


909 #i‚de‡
_HAVE_STRING_ARCH_°rc•n


910 #i‡
__GNUC_PREREQ
 (3, 2)

911 
	#°rc•n
(
s
, 
ªje˘
) \

912 
__exãnsi⁄__
 \

913 ({ 
__r0
, 
__r1
, 
__r2
; \

914 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

915 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

916 ? 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
) \

917 : ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

918 ? 
	`°æí
 (
s
) \

919 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

920 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

921 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

922 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

923 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

924 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

925 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)))))) \

926 : 
	`__buûtö_°rc•n
 (
s
, 
ªje˘
)); })

	)

928 
	#°rc•n
(
s
, 
ªje˘
) \

929 
__exãnsi⁄__
 \

930 ({ 
__r0
, 
__r1
, 
__r2
; \

931 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

932 ? ((
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], __r0 == '\0') \

933 ? 
	`°æí
 (
s
) \

934 : ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], __r1 == '\0') \

935 ? 
	`__°rc•n_c1
 (
s
, 
__r0
) \

936 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

937 ? 
	`__°rc•n_c2
 (
s
, 
__r0
, 
__r1
) \

938 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

939 ? 
	`__°rc•n_c3
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

940 : 
	`°rc•n
 (
s
, 
ªje˘
))))) \

941 : 
	`°rc•n
 (
s
, 
ªje˘
)); })

	)

945 
__STRING_INLINE
 
size_t
 
__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
);

946 
__STRING_INLINE
 
size_t


947 
	$__°rc•n_c1
 (c⁄° *
__s
, 
__ªje˘
)

949 
size_t
 
__ªsu…
 = 0;

950 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘
)

951 ++
__ªsu…
;

952  
__ªsu…
;

953 
	}
}

955 
__STRING_INLINE
 
size_t
 
__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
,

956 
__ªje˘2
);

957 
__STRING_INLINE
 
size_t


958 
	$__°rc•n_c2
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
)

960 
size_t
 
__ªsu…
 = 0;

961 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


962 && 
__s
[
__ªsu…
] !
__ªje˘2
)

963 ++
__ªsu…
;

964  
__ªsu…
;

965 
	}
}

967 
__STRING_INLINE
 
size_t
 
__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
,

968 
__ªje˘2
, 
__ªje˘3
);

969 
__STRING_INLINE
 
size_t


970 
	$__°rc•n_c3
 (c⁄° *
__s
, 
__ªje˘1
, 
__ªje˘2
,

971 
__ªje˘3
)

973 
size_t
 
__ªsu…
 = 0;

974 
__s
[
__ªsu…
] !'\0' && __s[__ªsu…] !
__ªje˘1


975 && 
__s
[
__ªsu…
] !
__ªje˘2
 && __s[__ªsu…] !
__ªje˘3
)

976 ++
__ªsu…
;

977  
__ªsu…
;

978 
	}
}

984 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r•n
 || deföed 
_FORCE_INLINES


985 #i‚de‡
_HAVE_STRING_ARCH_°r•n


986 #i‡
__GNUC_PREREQ
 (3, 2)

987 
	#°r•n
(
s
, 
ac˚±
) \

988 
__exãnsi⁄__
 \

989 ({ 
__a0
, 
__a1
, 
__a2
; \

990 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

991 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

992 ? 
	`__buûtö_°r•n
 (
s
, 
ac˚±
) \

993 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

994 ? ((Ë(
s
), (
size_t
) 0) \

995 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

996 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

997 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

998 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

999 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1000 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1001 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)))))) \

1002 : 
	`__buûtö_°r•n
 (
s
, 
ac˚±
)); })

	)

1004 
	#°r•n
(
s
, 
ac˚±
) \

1005 
__exãnsi⁄__
 \

1006 ({ 
__a0
, 
__a1
, 
__a2
; \

1007 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1008 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1009 ? ((Ë(
s
), (
size_t
) 0) \

1010 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1011 ? 
	`__°r•n_c1
 (
s
, 
__a0
) \

1012 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1013 ? 
	`__°r•n_c2
 (
s
, 
__a0
, 
__a1
) \

1014 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1015 ? 
	`__°r•n_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1016 : 
	`°r•n
 (
s
, 
ac˚±
))))) \

1017 : 
	`°r•n
 (
s
, 
ac˚±
)); })

	)

1021 
__STRING_INLINE
 
size_t
 
__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
);

1022 
__STRING_INLINE
 
size_t


1023 
	$__°r•n_c1
 (c⁄° *
__s
, 
__ac˚±
)

1025 
size_t
 
__ªsu…
 = 0;

1027 
__s
[
__ªsu…
] =
__ac˚±
)

1028 ++
__ªsu…
;

1029  
__ªsu…
;

1030 
	}
}

1032 
__STRING_INLINE
 
size_t
 
__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1033 
__ac˚±2
);

1034 
__STRING_INLINE
 
size_t


1035 
	$__°r•n_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1037 
size_t
 
__ªsu…
 = 0;

1039 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2
)

1040 ++
__ªsu…
;

1041  
__ªsu…
;

1042 
	}
}

1044 
__STRING_INLINE
 
size_t
 
__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1045 
__ac˚±2
, 
__ac˚±3
);

1046 
__STRING_INLINE
 
size_t


1047 
	$__°r•n_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1049 
size_t
 
__ªsu…
 = 0;

1051 
__s
[
__ªsu…
] =
__ac˚±1
 || __s[__ªsu…] =
__ac˚±2


1052 || 
__s
[
__ªsu…
] =
__ac˚±3
)

1053 ++
__ªsu…
;

1054  
__ªsu…
;

1055 
	}
}

1060 #i‡!
deföed
 
_HAVE_STRING_ARCH_°Ωbrk
 || deföed 
_FORCE_INLINES


1061 #i‚de‡
_HAVE_STRING_ARCH_°Ωbrk


1062 #i‡
__GNUC_PREREQ
 (3, 2)

1063 
	#°Ωbrk
(
s
, 
ac˚±
) \

1064 
__exãnsi⁄__
 \

1065 ({ 
__a0
, 
__a1
, 
__a2
; \

1066 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1067 ? ((
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s)) \

1068 ? 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
) \

1069 : ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1070 ? ((Ë(
s
), (*Ë
NULL
) \

1071 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1072 ? 
	`__buûtö_°rchr
 (
s
, 
__a0
) \

1073 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1074 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1075 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1076 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1077 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)))))) \

1078 : 
	`__buûtö_°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1080 
	#°Ωbrk
(
s
, 
ac˚±
) \

1081 
__exãnsi⁄__
 \

1082 ({ 
__a0
, 
__a1
, 
__a2
; \

1083 (
	`__buûtö_c⁄°™t_p
 (
ac˚±
Ë&& 
	`__°rög2_1b±r_p
 (accept) \

1084 ? ((
__a0
 = ((c⁄° *Ë(
ac˚±
))[0], __a0 == '\0') \

1085 ? ((Ë(
s
), (*Ë
NULL
) \

1086 : ((
__a1
 = ((c⁄° *Ë(
ac˚±
))[1], __a1 == '\0') \

1087 ? 
	`°rchr
 (
s
, 
__a0
) \

1088 : ((
__a2
 = ((c⁄° *Ë(
ac˚±
))[2], __a2 == '\0') \

1089 ? 
	`__°Ωbrk_c2
 (
s
, 
__a0
, 
__a1
) \

1090 : (((c⁄° *Ë(
ac˚±
))[3] == '\0' \

1091 ? 
	`__°Ωbrk_c3
 (
s
, 
__a0
, 
__a1
, 
__a2
) \

1092 : 
	`°Ωbrk
 (
s
, 
ac˚±
))))) \

1093 : 
	`°Ωbrk
 (
s
, 
ac˚±
)); })

	)

1097 
__STRING_INLINE
 *
__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
,

1098 
__ac˚±2
);

1099 
__STRING_INLINE
 *

1100 
	$__°Ωbrk_c2
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
)

1103 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2
)

1104 ++
__s
;

1105  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1106 
	}
}

1108 
__STRING_INLINE
 *
__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
,

1109 
__ac˚±2
, 
__ac˚±3
);

1110 
__STRING_INLINE
 *

1111 
	$__°Ωbrk_c3
 (c⁄° *
__s
, 
__ac˚±1
, 
__ac˚±2
, 
__ac˚±3
)

1114 *
__s
 !'\0' && *__†!
__ac˚±1
 && *__†!
__ac˚±2


1115 && *
__s
 !
__ac˚±3
)

1116 ++
__s
;

1117  *
__s
 ='\0' ? 
NULL
 : (*Ë(
size_t
) __s;

1118 
	}
}

1124 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r°r
 && !
__GNUC_PREREQ
 (2, 97)

1125 
	#°r°r
(
hay°ack
, 
√edÀ
) \

1126 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
√edÀ
Ë&& 
	`__°rög2_1b±r_p
 (needle) \

1127 ? (((c⁄° *Ë(
√edÀ
))[0] == '\0' \

1128 ? (*Ë(
size_t
Ë(
hay°ack
) \

1129 : (((c⁄° *Ë(
√edÀ
))[1] == '\0' \

1130 ? 
	`°rchr
 (
hay°ack
, \

1131 ((c⁄° *Ë(
√edÀ
))[0]) \

1132 : 
	`°r°r
 (
hay°ack
, 
√edÀ
))) \

1133 : 
	`°r°r
 (
hay°ack
, 
√edÀ
)))

	)

1137 #i‡!
deföed
 
_HAVE_STRING_ARCH_°πok_r
 || deföed 
_FORCE_INLINES


1138 #i‚de‡
_HAVE_STRING_ARCH_°πok_r


1139 
	#__°πok_r
(
s
, 
£p
, 
√xç
) \

1140 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
£p
Ë&& 
	`__°rög2_1b±r_p
 (sep) \

1141 && ((c⁄° *Ë(
£p
))[0] != '\0' \

1142 && ((c⁄° *Ë(
£p
))[1] == '\0' \

1143 ? 
	`__°πok_r_1c
 (
s
, ((c⁄° *Ë(
£p
))[0], 
√xç
) \

1144 : 
	`__°πok_r
 (
s
, 
£p
, 
√xç
)))

	)

1147 
__STRING_INLINE
 *
__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
);

1148 
__STRING_INLINE
 *

1149 
	$__°πok_r_1c
 (*
__s
, 
__£p
, **
__√xç
)

1151 *
__ªsu…
;

1152 i‡(
__s
 =
NULL
)

1153 
__s
 = *
__√xç
;

1154 *
__s
 =
__£p
)

1155 ++
__s
;

1156 
__ªsu…
 = 
NULL
;

1157 i‡(*
__s
 != '\0')

1159 
__ªsu…
 = 
__s
++;

1160 *
__s
 != '\0')

1161 i‡(*
__s
++ =
__£p
)

1163 
__s
[-1] = '\0';

1167 *
__√xç
 = 
__s
;

1168  
__ªsu…
;

1169 
	}
}

1170 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


1171 
	#°πok_r
(
s
, 
£p
, 
√xç
Ë
	`__°πok_r
 (s, sï,Çexç)

	)

1176 #i‡!
deföed
 
_HAVE_STRING_ARCH_°r£p
 || deföed 
_FORCE_INLINES


1177 #i‚de‡
_HAVE_STRING_ARCH_°r£p


1179 *
__°r£p_g
 (**
__°rögp
, c⁄° *
__dñim
);

1180 
	#__°r£p
(
s
, 
ªje˘
) \

1181 
__exãnsi⁄__
 \

1182 ({ 
__r0
, 
__r1
, 
__r2
; \

1183 (
	`__buûtö_c⁄°™t_p
 (
ªje˘
Ë&& 
	`__°rög2_1b±r_p
 (reject) \

1184 && (
__r0
 = ((c⁄° *Ë(
ªje˘
))[0], \

1185 ((c⁄° *Ë(
ªje˘
))[0] != '\0') \

1186 ? ((
__r1
 = ((c⁄° *Ë(
ªje˘
))[1], \

1187 ((c⁄° *Ë(
ªje˘
))[1] == '\0') \

1188 ? 
	`__°r£p_1c
 (
s
, 
__r0
) \

1189 : ((
__r2
 = ((c⁄° *Ë(
ªje˘
))[2], __r2 == '\0') \

1190 ? 
	`__°r£p_2c
 (
s
, 
__r0
, 
__r1
) \

1191 : (((c⁄° *Ë(
ªje˘
))[3] == '\0' \

1192 ? 
	`__°r£p_3c
 (
s
, 
__r0
, 
__r1
, 
__r2
) \

1193 : 
	`__°r£p_g
 (
s
, 
ªje˘
)))) \

1194 : 
	`__°r£p_g
 (
s
, 
ªje˘
)); })

	)

1197 
__STRING_INLINE
 *
__°r£p_1c
 (**
__s
, 
__ªje˘
);

1198 
__STRING_INLINE
 *

1199 
	$__°r£p_1c
 (**
__s
, 
__ªje˘
)

1201 *
__ªtvÆ
 = *
__s
;

1202 i‡(
__ªtvÆ
 !
NULL
 && (*
__s
 = 
	`°rchr
 (__ªtvÆ, 
__ªje˘
)) != NULL)

1203 *(*
__s
)++ = '\0';

1204  
__ªtvÆ
;

1205 
	}
}

1207 
__STRING_INLINE
 *
__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
);

1208 
__STRING_INLINE
 *

1209 
	$__°r£p_2c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
)

1211 *
__ªtvÆ
 = *
__s
;

1212 i‡(
__ªtvÆ
 !
NULL
)

1214 *
__˝
 = 
__ªtvÆ
;

1217 i‡(*
__˝
 == '\0')

1219 
__˝
 = 
NULL
;

1222 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
)

1224 *
__˝
++ = '\0';

1227 ++
__˝
;

1229 *
__s
 = 
__˝
;

1231  
__ªtvÆ
;

1232 
	}
}

1234 
__STRING_INLINE
 *
__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
,

1235 
__ªje˘3
);

1236 
__STRING_INLINE
 *

1237 
	$__°r£p_3c
 (**
__s
, 
__ªje˘1
, 
__ªje˘2
, 
__ªje˘3
)

1239 *
__ªtvÆ
 = *
__s
;

1240 i‡(
__ªtvÆ
 !
NULL
)

1242 *
__˝
 = 
__ªtvÆ
;

1245 i‡(*
__˝
 == '\0')

1247 
__˝
 = 
NULL
;

1250 i‡(*
__˝
 =
__ªje˘1
 || *__˝ =
__ªje˘2
 || *__˝ =
__ªje˘3
)

1252 *
__˝
++ = '\0';

1255 ++
__˝
;

1257 *
__s
 = 
__˝
;

1259  
__ªtvÆ
;

1260 
	}
}

1261 #ifde‡
__USE_BSD


1262 
	#°r£p
(
s
, 
ªje˘
Ë
	`__°r£p
 (s,Ñeje˘)

	)

1269 #ifde‡
__USE_MISC


1271 #i‡!
deföed
 
_HAVE_STRING_ARCH_°rdup
 || !deföed 
_HAVE_STRING_ARCH_°∫dup


1272 
	#__√ed_mÆloc_™d_ˇŒoc


	)

1273 
	~<°dlib.h
>

1276 #i‚de‡
_HAVE_STRING_ARCH_°rdup


1278 *
	$__°rdup
 (c⁄° *
__°rög
Ë
__THROW
 
__©åibuã_mÆloc__
;

1279 
	#__°rdup
(
s
) \

1280 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1281 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1282 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1283 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1284 *
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1285 i‡(
__ªtvÆ
 !
NULL
) \

1286 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, 
__Àn
); \

1287 
__ªtvÆ
; 
	}
})) \

1288 : 
	`__°rdup
 (
s
)))

	)

1290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


1291 
	#°rdup
(
s
Ë
	`__°rdup
 (s)

	)

1295 #i‚de‡
_HAVE_STRING_ARCH_°∫dup


1297 *
	$__°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

1298 
__THROW
 
__©åibuã_mÆloc__
;

1299 
	#__°∫dup
(
s
, 
n
) \

1300 (
	`__exãnsi⁄__
 (
	`__buûtö_c⁄°™t_p
 (
s
Ë&& 
	`__°rög2_1b±r_p
 (s) \

1301 ? (((c⁄° *Ë(
s
))[0] == '\0' \

1302 ? (*Ë
	`ˇŒoc
 ((
size_t
) 1, (size_t) 1) \

1303 : ({ 
size_t
 
__Àn
 = 
	`°æí
 (
s
) + 1; \

1304 
size_t
 
__n
 = (
n
); \

1305 *
__ªtvÆ
; \

1306 i‡(
__n
 < 
__Àn
) \

1307 
__Àn
 = 
__n
 + 1; \

1308 
__ªtvÆ
 = (*Ë
	`mÆloc
 (
__Àn
); \

1309 i‡(
__ªtvÆ
 !
NULL
) \

1311 
__ªtvÆ
[
__Àn
 - 1] = '\0'; \

1312 
__ªtvÆ
 = (*Ë
	`mem˝y
 (__ªtvÆ, 
s
, \

1313 
__Àn
 - 1); \

1315 
__ªtvÆ
; 
	}
})) \

1316 : 
	`__°∫dup
 (
s
, 
n
)))

	)

1318 #ifde‡
__USE_GNU


1319 
	#°∫dup
(
s
, 
n
Ë
	`__°∫dup
 (s,Ç)

	)

1325 #i‚de‡
_FORCE_INLINES


1326 #unde‡
__STRING_INLINE


	@/usr/include/bits/string3.h

18 #i‚de‡
_STRING_H


22 
__w¨nde˛
 (
__w¨n_mem£t_zîo_Àn
,

25 #i‚de‡
__˝lu•lus


29 #unde‡
mem˝y


30 #unde‡
memmove


31 #unde‡
mem£t


32 #unde‡
°rˇt


33 #unde‡
°r˝y


34 #unde‡
°∫ˇt


35 #unde‡
°∫˝y


36 #ifde‡
__USE_GNU


37 #unde‡
memp˝y


38 #unde‡
°p˝y


40 #ifde‡
__USE_BSD


41 #unde‡
bc›y


42 #unde‡
bzîo


47 
__f‹tify_fun˘i⁄
 *

48 
__NTH
 (
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

49 
size_t
 
__Àn
))

51  
	`__buûtö___mem˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

52 
	}
}

54 
__f‹tify_fun˘i⁄
 *

55 
__NTH
 (
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__Àn
))

57  
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

58 
	}
}

60 #ifde‡
__USE_GNU


61 
__f‹tify_fun˘i⁄
 *

62 
__NTH
 (
	$memp˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

63 
size_t
 
__Àn
))

65  
	`__buûtö___memp˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

66 
	}
}

75 
__f‹tify_fun˘i⁄
 *

76 
__NTH
 (
	$mem£t
 (*
__de°
, 
__ch
, 
size_t
 
__Àn
))

78 i‡(
	`__buûtö_c⁄°™t_p
 (
__Àn
) && __len == 0

79 && (!
	`__buûtö_c⁄°™t_p
 (
__ch
) || __ch != 0))

81 
	`__w¨n_mem£t_zîo_Àn
 ();

82  
__de°
;

84  
	`__buûtö___mem£t_chk
 (
__de°
, 
__ch
, 
__Àn
, 
	`__bos0
 (__dest));

85 
	}
}

87 #ifde‡
__USE_BSD


88 
__f‹tify_fun˘i⁄
 

89 
__NTH
 (
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__Àn
))

91 (Ë
	`__buûtö___memmove_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos0
 (__dest));

92 
	}
}

94 
__f‹tify_fun˘i⁄
 

95 
__NTH
 (
	$bzîo
 (*
__de°
, 
size_t
 
__Àn
))

97 (Ë
	`__buûtö___mem£t_chk
 (
__de°
, '\0', 
__Àn
, 
	`__bos0
 (__dest));

98 
	}
}

101 
__f‹tify_fun˘i⁄
 *

102 
__NTH
 (
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

104  
	`__buûtö___°r˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

105 
	}
}

107 #ifde‡
__USE_GNU


108 
__f‹tify_fun˘i⁄
 *

109 
__NTH
 (
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

111  
	`__buûtö___°p˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

112 
	}
}

116 
__f‹tify_fun˘i⁄
 *

117 
__NTH
 (
	$°∫˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

118 
size_t
 
__Àn
))

120  
	`__buûtö___°∫˝y_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

121 
	}
}

124 *
	$__°≤˝y_chk
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

125 
size_t
 
__de°Àn
Ë
__THROW
;

126 *
	`__REDIRECT_NTH
 (
__°≤˝y_Æüs
, (*
__de°
, c⁄° *
__§c
,

127 
size_t
 
__n
), 
°≤˝y
);

129 
__f‹tify_fun˘i⁄
 *

130 
	`__NTH
 (
	$°≤˝y
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
))

132 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1

133 && (!
	`__buûtö_c⁄°™t_p
 (
__n
Ë|| __¿<
	`__bos
 (
__de°
)))

134  
	`__°≤˝y_chk
 (
__de°
, 
__§c
, 
__n
, 
	`__bos
 (__dest));

135  
	`__°≤˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

136 
	}
}

139 
__f‹tify_fun˘i⁄
 *

140 
__NTH
 (
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
))

142  
	`__buûtö___°rˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__dest));

143 
	}
}

146 
__f‹tify_fun˘i⁄
 *

147 
__NTH
 (
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

148 
size_t
 
__Àn
))

150  
	`__buûtö___°∫ˇt_chk
 (
__de°
, 
__§c
, 
__Àn
, 
	`__bos
 (__dest));

151 
	}
}

	@/usr/include/bits/sys_errlist.h

19 #i‚de‡
_STDIO_H


25 #ifde‡ 
__USE_BSD


26 
sys_√º
;

27 c⁄° *c⁄° 
sys_îæi°
[];

29 #ifde‡ 
__USE_GNU


30 
_sys_√º
;

31 c⁄° *c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/time.h

23 #i‡
deföed
 
__√ed_timevÆ
 || deföed 
__USE_GNU


24 #i‚de‡
_STRUCT_TIMEVAL


25 
	#_STRUCT_TIMEVAL
 1

	)

26 
	~<bôs/ty≥s.h
>

30 
	stimevÆ


32 
__time_t
 
	mtv_£c
;

33 
__su£c⁄ds_t
 
	mtv_u£c
;

38 #i‚de‡
__√ed_timevÆ


39 #i‚de‡
_BITS_TIME_H


40 
	#_BITS_TIME_H
 1

	)

48 
	#CLOCKS_PER_SEC
 1000000l

	)

50 #i‡(!
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_POSIX
) \

51 && !
deföed
 
	g__USE_XOPEN2K


54 
	~<bôs/ty≥s.h
>

55 
__sysc⁄f
 ();

56 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

59 #ifde‡
__USE_POSIX199309


61 
	#CLOCK_REALTIME
 0

	)

63 
	#CLOCK_MONOTONIC
 1

	)

65 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

67 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

69 
	#CLOCK_MONOTONIC_RAW
 4

	)

71 
	#CLOCK_REALTIME_COARSE
 5

	)

73 
	#CLOCK_MONOTONIC_COARSE
 6

	)

75 
	#CLOCK_BOOTTIME
 7

	)

77 
	#CLOCK_REALTIME_ALARM
 8

	)

79 
	#CLOCK_BOOTTIME_ALARM
 9

	)

82 
	#TIMER_ABSTIME
 1

	)

85 #ifde‡
__USE_GNU


86 
	~<bôs/timex.h
>

88 
__BEGIN_DECLS


91 
	$˛ock_adjtime
 (
__˛ockid_t
 
__˛ock_id
, 
timex
 *
__utx
Ë
__THROW
;

93 
__END_DECLS


99 #unde‡
__√ed_timevÆ


	@/usr/include/bits/types.h

23 #i‚def 
_BITS_TYPES_H


24 
	#_BITS_TYPES_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/w‹dsize.h
>

30 
	t__u_ch¨
;

31 
	t__u_sh‹t
;

32 
	t__u_öt
;

33 
	t__u_l⁄g
;

36 sig√d 
	t__öt8_t
;

37 
	t__uöt8_t
;

38 sig√d 
	t__öt16_t
;

39 
	t__uöt16_t
;

40 sig√d 
	t__öt32_t
;

41 
	t__uöt32_t
;

42 #i‡
__WORDSIZE
 == 64

43 sig√d 
	t__öt64_t
;

44 
	t__uöt64_t
;

46 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

47 
__exãnsi⁄__
 
	t__uöt64_t
;

51 #i‡
__WORDSIZE
 == 64

52 
	t__quad_t
;

53 
	t__u_quad_t
;

55 
__exãnsi⁄__
 
	t__quad_t
;

56 
__exãnsi⁄__
 
	t__u_quad_t
;

89 
	#__S16_TYPE
 

	)

90 
	#__U16_TYPE
 

	)

91 
	#__S32_TYPE
 

	)

92 
	#__U32_TYPE
 

	)

93 
	#__SLONGWORD_TYPE
 

	)

94 
	#__ULONGWORD_TYPE
 

	)

95 #i‡
__WORDSIZE
 == 32

96 
	#__SQUAD_TYPE
 
__quad_t


	)

97 
	#__UQUAD_TYPE
 
__u_quad_t


	)

98 
	#__SWORD_TYPE
 

	)

99 
	#__UWORD_TYPE
 

	)

100 
	#__SLONG32_TYPE
 

	)

101 
	#__ULONG32_TYPE
 

	)

102 
	#__S64_TYPE
 
__quad_t


	)

103 
	#__U64_TYPE
 
__u_quad_t


	)

106 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

107 #ñi‡
__WORDSIZE
 == 64

108 
	t__SQUAD_TYPE
 

	)

109 
	t__UQUAD_TYPE
 

	)

110 
	t__SWORD_TYPE
 

	)

111 
	t__UWORD_TYPE
 

	)

112 
	t__SLONG32_TYPE
 

	)

113 
	t__ULONG32_TYPE
 

	)

114 
	t__S64_TYPE
 

	)

115 
	t__U64_TYPE
 

	)

117 
	t__STD_TYPE
 

	)

121 
	~<bôs/ty≥sizes.h
>

124 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

125 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

126 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

127 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

128 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

129 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

130 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

131 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

132 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

133 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

134 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

135 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

136 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

137 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

138 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

139 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

140 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

141 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

143 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

144 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

147 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

150 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

153 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

158 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

159 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

162 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

163 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

166 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

167 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

170 
__STD_TYPE
 
__FSWORD_T_TYPE
 
	g__fsw‹d_t
;

172 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

175 
__STD_TYPE
 
__SYSCALL_SLONG_TYPE
 
	g__sysˇŒ_¶⁄g_t
;

177 
__STD_TYPE
 
__SYSCALL_ULONG_TYPE
 
	g__sysˇŒ_ul⁄g_t
;

181 
__off64_t
 
	t__loff_t
;

182 
__quad_t
 *
	t__qaddr_t
;

183 *
	t__ˇddr_t
;

186 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

189 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

192 #unde‡
__STD_TYPE


	@/usr/include/bits/unistd.h

19 #i‚de‡
_UNISTD_H


23 
ssize_t
 
	$__ªad_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

24 
size_t
 
__buÊí
Ë
__wur
;

25 
ssize_t
 
	`__REDIRECT
 (
__ªad_Æüs
, (
__fd
, *
__buf
,

26 
size_t
 
__nbyãs
), 
ªad
Ë
__wur
;

27 
ssize_t
 
	`__REDIRECT
 (
__ªad_chk_w¨n
,

28 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

29 
size_t
 
__buÊí
), 
__ªad_chk
)

30 
__wur
 
	`__w¨«âr
 ("read called with biggerÜengthÅhan size of "

33 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


34 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
)

36 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

38 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

39  
	`__ªad_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

41 i‡(
__nbyãs
 > 
	`__bos0
 (
__buf
))

42  
	`__ªad_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
	`__bos0
 (__buf));

44  
	`__ªad_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
);

45 
	}
}

47 #ifde‡
__USE_UNIX98


48 
ssize_t
 
	$__¥ód_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

49 
__off_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

50 
ssize_t
 
	$__¥ód64_chk
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

51 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
Ë
__wur
;

52 
ssize_t
 
	`__REDIRECT
 (
__¥ód_Æüs
,

53 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

54 
__off_t
 
__off£t
), 
¥ód
Ë
__wur
;

55 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_Æüs
,

56 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

57 
__off64_t
 
__off£t
), 
¥ód64
Ë
__wur
;

58 
ssize_t
 
	`__REDIRECT
 (
__¥ód_chk_w¨n
,

59 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

60 
__off_t
 
__off£t
, 
size_t
 
__bufsize
), 
__¥ód_chk
)

61 
__wur
 
	`__w¨«âr
 ("pread called with biggerÜengthÅhan size of "

63 
ssize_t
 
	`__REDIRECT
 (
__¥ód64_chk_w¨n
,

64 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

65 
__off64_t
 
__off£t
, 
size_t
 
__bufsize
),

66 
__¥ód64_chk
)

67 
__wur
 
	`__w¨«âr
 ("pread64 called with biggerÜengthÅhan size of "

70 #i‚de‡
__USE_FILE_OFFSET64


71 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


72 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off_t
 
__off£t
)

74 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

76 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

77  
	`__¥ód_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

79 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

80  
	`__¥ód_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

81 
	`__bos0
 (
__buf
));

83  
	`__¥ód_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

84 
	}
}

86 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


87 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

89 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

91 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

92  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

94 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

95  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

96 
	`__bos0
 (
__buf
));

99  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

100 
	}
}

103 #ifde‡
__USE_LARGEFILE64


104 
__f‹tify_fun˘i⁄
 
__wur
 
ssize_t


105 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
)

107 i‡(
	`__bos0
 (
__buf
Ë!(
size_t
) -1)

109 i‡(!
	`__buûtö_c⁄°™t_p
 (
__nbyãs
))

110  
	`__¥ód64_chk
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
, 
	`__bos0
 (__buf));

112 i‡–
__nbyãs
 > 
	`__bos0
 (
__buf
))

113  
	`__¥ód64_chk_w¨n
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
,

114 
	`__bos0
 (
__buf
));

117  
	`__¥ód64_Æüs
 (
__fd
, 
__buf
, 
__nbyãs
, 
__off£t
);

118 
	}
}

122 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


123 
ssize_t
 
	$__ªadlök_chk
 (c⁄° *
__ª°ri˘
 
__∑th
,

124 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

125 
size_t
 
__buÊí
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

127 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_Æüs
,

128 (c⁄° *
__ª°ri˘
 
__∑th
,

129 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
), 
ªadlök
)

130 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

131 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök_chk_w¨n
,

132 (c⁄° *
__ª°ri˘
 
__∑th
,

133 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

134 
size_t
 
__buÊí
), 
__ªadlök_chk
)

135 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
	`__w¨«âr
 ("readlink called with biggerÜength "

138 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
 
ssize_t


139 
	`__NTH
 (
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
, *__ª°ri˘ 
__buf
,

140 
size_t
 
__Àn
))

142 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

144 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

145  
	`__ªadlök_chk
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

147 i‡–
__Àn
 > 
	`__bos
 (
__buf
))

148  
	`__ªadlök_chk_w¨n
 (
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

150  
	`__ªadlök_Æüs
 (
__∑th
, 
__buf
, 
__Àn
);

151 
	}
}

154 #ifde‡
__USE_ATFILE


155 
ssize_t
 
	$__ªadlök©_chk
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

156 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

157 
size_t
 
__buÊí
)

158 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

159 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_Æüs
,

160 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

161 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
),

162 
ªadlök©
)

163 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

164 
ssize_t
 
	`__REDIRECT_NTH
 (
__ªadlök©_chk_w¨n
,

165 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

166 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
,

167 
size_t
 
__buÊí
), 
__ªadlök©_chk
)

168 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
	`__w¨«âr
 ("readlinkat called with bigger "

172 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
 
ssize_t


173 
	`__NTH
 (
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

174 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
))

176 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

178 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

179  
	`__ªadlök©_chk
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

181 i‡(
__Àn
 > 
	`__bos
 (
__buf
))

182  
	`__ªadlök©_chk_w¨n
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
,

183 
	`__bos
 (
__buf
));

185  
	`__ªadlök©_Æüs
 (
__fd
, 
__∑th
, 
__buf
, 
__Àn
);

186 
	}
}

189 *
	$__gëcwd_chk
 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
)

190 
__THROW
 
__wur
;

191 *
	`__REDIRECT_NTH
 (
__gëcwd_Æüs
,

192 (*
__buf
, 
size_t
 
__size
), 
gëcwd
Ë
__wur
;

193 *
	`__REDIRECT_NTH
 (
__gëcwd_chk_w¨n
,

194 (*
__buf
, 
size_t
 
__size
, size_à
__buÊí
),

195 
__gëcwd_chk
)

196 
__wur
 
	`__w¨«âr
 ("getcwd caller with biggerÜengthÅhan size of "

199 
__f‹tify_fun˘i⁄
 
__wur
 *

200 
	`__NTH
 (
	$gëcwd
 (*
__buf
, 
size_t
 
__size
))

202 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

204 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
))

205  
	`__gëcwd_chk
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

207 i‡(
__size
 > 
	`__bos
 (
__buf
))

208  
	`__gëcwd_chk_w¨n
 (
__buf
, 
__size
, 
	`__bos
 (__buf));

210  
	`__gëcwd_Æüs
 (
__buf
, 
__size
);

211 
	}
}

213 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


214 *
	$__gëwd_chk
 (*
__buf
, 
size_t
 
buÊí
)

215 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

216 *
	`__REDIRECT_NTH
 (
__gëwd_w¨n
, (*
__buf
), 
gëwd
)

217 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("please use getcwd instead,ás getwd "

220 
__f‹tify_fun˘i⁄
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
 *

221 
	`__NTH
 (
	$gëwd
 (*
__buf
))

223 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

224  
	`__gëwd_chk
 (
__buf
, 
	`__bos
 (__buf));

225  
	`__gëwd_w¨n
 (
__buf
);

226 
	}
}

229 
size_t
 
	$__c⁄f°r_chk
 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

230 
size_t
 
__buÊí
Ë
__THROW
;

231 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_Æüs
, (
__«me
, *
__buf
,

232 
size_t
 
__Àn
), 
c⁄f°r
);

233 
size_t
 
	`__REDIRECT_NTH
 (
__c⁄f°r_chk_w¨n
,

234 (
__«me
, *
__buf
, 
size_t
 
__Àn
,

235 
size_t
 
__buÊí
), 
__c⁄f°r_chk
)

236 
	`__w¨«âr
 ("confstr called with biggerÜengthÅhan size of destination "

239 
__f‹tify_fun˘i⁄
 
size_t


240 
	`__NTH
 (
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
))

242 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

244 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

245  
	`__c⁄f°r_chk
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

247 i‡(
	`__bos
 (
__buf
Ë< 
__Àn
)

248  
	`__c⁄f°r_chk_w¨n
 (
__«me
, 
__buf
, 
__Àn
, 
	`__bos
 (__buf));

250  
	`__c⁄f°r_Æüs
 (
__«me
, 
__buf
, 
__Àn
);

251 
	}
}

254 
	$__gëgroups_chk
 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
)

255 
__THROW
 
__wur
;

256 
	`__REDIRECT_NTH
 (
__gëgroups_Æüs
, (
__size
, 
__gid_t
 
__li°
[]),

257 
gëgroups
Ë
__wur
;

258 
	`__REDIRECT_NTH
 (
__gëgroups_chk_w¨n
,

259 (
__size
, 
__gid_t
 
__li°
[], 
size_t
 
__li°Àn
),

260 
__gëgroups_chk
)

261 
__wur
 
	`__w¨«âr
 ("getgroups called with bigger group countÅhan what "

264 
__f‹tify_fun˘i⁄
 

265 
	`__NTH
 (
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]))

267 i‡(
	`__bos
 (
__li°
Ë!(
size_t
) -1)

269 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
) || __size < 0)

270  
	`__gëgroups_chk
 (
__size
, 
__li°
, 
	`__bos
 (__list));

272 i‡(
__size
 *  (
__gid_t
Ë> 
	`__bos
 (
__li°
))

273  
	`__gëgroups_chk_w¨n
 (
__size
, 
__li°
, 
	`__bos
 (__list));

275  
	`__gëgroups_Æüs
 (
__size
, 
__li°
);

276 
	}
}

279 
	$__ây«me_r_chk
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

280 
size_t
 
__ƒól
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

281 
	`__REDIRECT_NTH
 (
__ây«me_r_Æüs
, (
__fd
, *
__buf
,

282 
size_t
 
__buÊí
), 
ây«me_r
)

283 
	`__n⁄nuŒ
 ((2));

284 
	`__REDIRECT_NTH
 (
__ây«me_r_chk_w¨n
,

285 (
__fd
, *
__buf
, 
size_t
 
__buÊí
,

286 
size_t
 
__ƒól
), 
__ây«me_r_chk
)

287 
	`__n⁄nuŒ
 ((2)Ë
	`__w¨«âr
 ("ttyname_r called with bigger buflenÅhan "

290 
__f‹tify_fun˘i⁄
 

291 
	`__NTH
 (
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
))

293 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

295 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

296  
	`__ây«me_r_chk
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

298 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

299  
	`__ây«me_r_chk_w¨n
 (
__fd
, 
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

301  
	`__ây«me_r_Æüs
 (
__fd
, 
__buf
, 
__buÊí
);

302 
	}
}

305 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


306 
	$__gëlogö_r_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

307 
	`__n⁄nuŒ
 ((1));

308 
	`__REDIRECT
 (
__gëlogö_r_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

309 
gëlogö_r
Ë
	`__n⁄nuŒ
 ((1));

310 
	`__REDIRECT
 (
__gëlogö_r_chk_w¨n
,

311 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

312 
__gëlogö_r_chk
)

313 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("getlogin_r called with bigger buflenÅhan "

316 
__f‹tify_fun˘i⁄
 

317 
	$gëlogö_r
 (*
__buf
, 
size_t
 
__buÊí
)

319 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

321 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

322  
	`__gëlogö_r_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

324 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

325  
	`__gëlogö_r_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

327  
	`__gëlogö_r_Æüs
 (
__buf
, 
__buÊí
);

328 
	}
}

332 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98


333 
	$__gëho°«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

335 
	`__REDIRECT_NTH
 (
__gëho°«me_Æüs
, (*
__buf
, 
size_t
 
__buÊí
),

336 
gëho°«me
Ë
	`__n⁄nuŒ
 ((1));

337 
	`__REDIRECT_NTH
 (
__gëho°«me_chk_w¨n
,

338 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

339 
__gëho°«me_chk
)

340 
	`__n⁄nuŒ
 ((1)Ë
	`__w¨«âr
 ("gethostname called with bigger buflenÅhan "

343 
__f‹tify_fun˘i⁄
 

344 
	`__NTH
 (
	$gëho°«me
 (*
__buf
, 
size_t
 
__buÊí
))

346 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

348 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

349  
	`__gëho°«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

351 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

352  
	`__gëho°«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

354  
	`__gëho°«me_Æüs
 (
__buf
, 
__buÊí
);

355 
	}
}

359 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

360 
	$__gëdomaö«me_chk
 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
)

361 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

362 
	`__REDIRECT_NTH
 (
__gëdomaö«me_Æüs
, (*
__buf
,

363 
size_t
 
__buÊí
),

364 
gëdomaö«me
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

365 
	`__REDIRECT_NTH
 (
__gëdomaö«me_chk_w¨n
,

366 (*
__buf
, 
size_t
 
__buÊí
, size_à
__ƒól
),

367 
__gëdomaö«me_chk
)

368 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__w¨«âr
 ("getdomainname called with bigger "

372 
__f‹tify_fun˘i⁄
 

373 
	`__NTH
 (
	$gëdomaö«me
 (*
__buf
, 
size_t
 
__buÊí
))

375 i‡(
	`__bos
 (
__buf
Ë!(
size_t
) -1)

377 i‡(!
	`__buûtö_c⁄°™t_p
 (
__buÊí
))

378  
	`__gëdomaö«me_chk
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

380 i‡(
__buÊí
 > 
	`__bos
 (
__buf
))

381  
	`__gëdomaö«me_chk_w¨n
 (
__buf
, 
__buÊí
, 
	`__bos
 (__buf));

383  
	`__gëdomaö«me_Æüs
 (
__buf
, 
__buÊí
);

384 
	}
}

	@/usr/include/bits/waitflags.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


25 
	#WNOHANG
 1

	)

26 
	#WUNTRACED
 2

	)

29 
	#WSTOPPED
 2

	)

30 
	#WEXITED
 4

	)

31 
	#WCONTINUED
 8

	)

32 
	#WNOWAIT
 0x01000000

	)

34 
	#__WNOTHREAD
 0x20000000

	)

36 
	#__WALL
 0x40000000

	)

37 
	#__WCLONE
 0x80000000

	)

40 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


41 #i‚de‡
__ENUM_IDTYPE_T


42 
	#__ENUM_IDTYPE_T
 1

	)

46 #unde‡
P_ALL


47 #unde‡
P_PID


48 #unde‡
P_PGID


52 
	mP_ALL
,

53 
	mP_PID
,

54 
	mP_PGID


55 } 
	tidty≥_t
;

	@/usr/include/bits/waitstatus.h

19 #i‡!
deföed
 
_SYS_WAIT_H
 && !deföed 
_STDLIB_H


28 
	#__WEXITSTATUS
(
°©us
Ë(((°©usË& 0xff00Ë>> 8)

	)

31 
	#__WTERMSIG
(
°©us
Ë((°©usË& 0x7f)

	)

34 
	#__WSTOPSIG
(
°©us
Ë
	`__WEXITSTATUS
(°©us)

	)

37 
	#__WIFEXITED
(
°©us
Ë(
	`__WTERMSIG
(°©usË=0)

	)

40 
	#__WIFSIGNALED
(
°©us
) \

41 (((sig√d Ë(((
°©us
Ë& 0x7fË+ 1Ë>> 1Ë> 0)

	)

44 
	#__WIFSTOPPED
(
°©us
Ë(((°©usË& 0xffË=0x7f)

	)

48 #ifde‡
WCONTINUED


49 
	#__WIFCONTINUED
(
°©us
Ë((°©usË=
__W_CONTINUED
)

	)

53 
	#__WCOREDUMP
(
°©us
Ë((°©usË& 
__WCOREFLAG
)

	)

56 
	#__W_EXITCODE
(
ªt
, 
sig
Ë(‘ëË<< 8 | (sig))

	)

57 
	#__W_STOPCODE
(
sig
Ë((sigË<< 8 | 0x7f)

	)

58 
	#__W_CONTINUED
 0xffff

	)

59 
	#__WCOREFLAG
 0x80

	)

62 #ifdef 
__USE_BSD


64 
	~<ídün.h
>

66 
	uwaô


68 
	mw_°©us
;

71 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
	m__w_ãrmsig
:7;

73 
	m__w_c‹edump
:1;

74 
	m__w_ªtcode
:8;

77 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


79 
	m__w_ªtcode
:8;

80 
	m__w_c‹edump
:1;

81 
	m__w_ãrmsig
:7;

83 } 
	m__waô_ãrmö©ed
;

86 #if 
__BYTE_ORDER
 =
__LITTLE_ENDIAN


87 
	m__w_°›vÆ
:8;

88 
	m__w_°›sig
:8;

91 #if 
__BYTE_ORDER
 =
__BIG_ENDIAN


93 
	m__w_°›sig
:8;

94 
	m__w_°›vÆ
:8;

96 } 
	m__waô_°›≥d
;

99 
	#w_ãrmsig
 
__waô_ãrmö©ed
.
__w_ãrmsig


	)

100 
	#w_c‹edump
 
__waô_ãrmö©ed
.
__w_c‹edump


	)

101 
	#w_ªtcode
 
__waô_ãrmö©ed
.
__w_ªtcode


	)

102 
	#w_°›sig
 
__waô_°›≥d
.
__w_°›sig


	)

103 
	#w_°›vÆ
 
__waô_°›≥d
.
__w_°›vÆ


	)

	@/usr/include/endian.h

18 #i‚def 
_ENDIAN_H


19 
	#_ENDIAN_H
 1

	)

21 
	~<„©uªs.h
>

31 
	#__LITTLE_ENDIAN
 1234

	)

32 
	#__BIG_ENDIAN
 4321

	)

33 
	#__PDP_ENDIAN
 3412

	)

36 
	~<bôs/ídün.h
>

40 #i‚de‡
__FLOAT_WORD_ORDER


41 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

44 #ifdef 
__USE_BSD


45 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

46 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

47 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

48 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

51 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


52 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

53 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


54 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

58 #i‡
deföed
 
__USE_BSD
 && !deföed 
__ASSEMBLER__


60 
	~<bôs/byãsw≠.h
>

62 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


63 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

64 
	#htﬁe16
(
x
Ë(x)

	)

65 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

66 
	#À16toh
(
x
Ë(x)

	)

68 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

69 
	#htﬁe32
(
x
Ë(x)

	)

70 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

71 
	#À32toh
(
x
Ë(x)

	)

73 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

74 
	#htﬁe64
(
x
Ë(x)

	)

75 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

76 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

101 #unde‡
__USE_ISOC11


102 #unde‡
__USE_ISOC99


103 #unde‡
__USE_ISOC95


104 #unde‡
__USE_ISOCXX11


105 #unde‡
__USE_POSIX


106 #unde‡
__USE_POSIX2


107 #unde‡
__USE_POSIX199309


108 #unde‡
__USE_POSIX199506


109 #unde‡
__USE_XOPEN


110 #unde‡
__USE_XOPEN_EXTENDED


111 #unde‡
__USE_UNIX98


112 #unde‡
__USE_XOPEN2K


113 #unde‡
__USE_XOPEN2KXSI


114 #unde‡
__USE_XOPEN2K8


115 #unde‡
__USE_XOPEN2K8XSI


116 #unde‡
__USE_LARGEFILE


117 #unde‡
__USE_LARGEFILE64


118 #unde‡
__USE_FILE_OFFSET64


119 #unde‡
__USE_BSD


120 #unde‡
__USE_SVID


121 #unde‡
__USE_MISC


122 #unde‡
__USE_ATFILE


123 #unde‡
__USE_GNU


124 #unde‡
__USE_REENTRANT


125 #unde‡
__USE_FORTIFY_LEVEL


126 #unde‡
__KERNEL_STRICT_NAMES


130 #i‚de‡
_LOOSE_KERNEL_NAMES


131 
	#__KERNEL_STRICT_NAMES


	)

141 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


142 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

143 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

145 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

150 #ifde‡
_GNU_SOURCE


151 #unde‡
_ISOC95_SOURCE


152 
	#_ISOC95_SOURCE
 1

	)

153 #unde‡
_ISOC99_SOURCE


154 
	#_ISOC99_SOURCE
 1

	)

155 #unde‡
_ISOC11_SOURCE


156 
	#_ISOC11_SOURCE
 1

	)

157 #unde‡
_POSIX_SOURCE


158 
	#_POSIX_SOURCE
 1

	)

159 #unde‡
_POSIX_C_SOURCE


160 
	#_POSIX_C_SOURCE
 200809L

	)

161 #unde‡
_XOPEN_SOURCE


162 
	#_XOPEN_SOURCE
 700

	)

163 #unde‡
_XOPEN_SOURCE_EXTENDED


164 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

165 #unde‡
_LARGEFILE64_SOURCE


166 
	#_LARGEFILE64_SOURCE
 1

	)

167 #unde‡
_DEFAULT_SOURCE


168 
	#_DEFAULT_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

180 || (!
deföed
 
	g__STRICT_ANSI__
 \

181 && !
deföed
 
	g_ISOC99_SOURCE
 \

182 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

183 && !
deföed
 
	g_XOPEN_SOURCE
 \

184 && !
deföed
 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
))

185 #unde‡
_DEFAULT_SOURCE


186 
	#_DEFAULT_SOURCE
 1

	)

187 #unde‡
_BSD_SOURCE


188 
	#_BSD_SOURCE
 1

	)

189 #unde‡
_SVID_SOURCE


190 
	#_SVID_SOURCE
 1

	)

194 #i‡(
deföed
 
_ISOC11_SOURCE
 \

195 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

196 
	#__USE_ISOC11
 1

	)

200 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

201 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

202 
	#__USE_ISOC99
 1

	)

206 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

207 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

208 
	#__USE_ISOC95
 1

	)

215 #i‡((
deföed
 
__˝lu•lus
 && __cplusplus >= 201103L) \

216 || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
)

217 
	#__USE_ISOCXX11
 1

	)

223 #ifde‡
_DEFAULT_SOURCE


224 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


225 
	#__USE_POSIX_IMPLICITLY
 1

	)

227 #unde‡
_POSIX_SOURCE


228 
	#_POSIX_SOURCE
 1

	)

229 #unde‡
_POSIX_C_SOURCE


230 
	#_POSIX_C_SOURCE
 200809L

	)

232 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

233 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

234 
	#_POSIX_SOURCE
 1

	)

235 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

236 
	#_POSIX_C_SOURCE
 2

	)

237 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

238 
	#_POSIX_C_SOURCE
 199506L

	)

239 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

240 
	#_POSIX_C_SOURCE
 200112L

	)

242 
	#_POSIX_C_SOURCE
 200809L

	)

244 
	#__USE_POSIX_IMPLICITLY
 1

	)

247 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


248 
	#__USE_POSIX
 1

	)

251 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


252 
	#__USE_POSIX2
 1

	)

255 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

256 
	#__USE_POSIX199309
 1

	)

259 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

260 
	#__USE_POSIX199506
 1

	)

263 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

264 
	#__USE_XOPEN2K
 1

	)

265 #unde‡
__USE_ISOC95


266 
	#__USE_ISOC95
 1

	)

267 #unde‡
__USE_ISOC99


268 
	#__USE_ISOC99
 1

	)

271 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

272 
	#__USE_XOPEN2K8
 1

	)

273 #unde‡
_ATFILE_SOURCE


274 
	#_ATFILE_SOURCE
 1

	)

277 #ifdef 
_XOPEN_SOURCE


278 
	#__USE_XOPEN
 1

	)

279 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

280 
	#__USE_XOPEN_EXTENDED
 1

	)

281 
	#__USE_UNIX98
 1

	)

282 #unde‡
_LARGEFILE_SOURCE


283 
	#_LARGEFILE_SOURCE
 1

	)

284 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

285 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

286 
	#__USE_XOPEN2K8
 1

	)

287 
	#__USE_XOPEN2K8XSI
 1

	)

289 
	#__USE_XOPEN2K
 1

	)

290 
	#__USE_XOPEN2KXSI
 1

	)

291 #unde‡
__USE_ISOC95


292 
	#__USE_ISOC95
 1

	)

293 #unde‡
__USE_ISOC99


294 
	#__USE_ISOC99
 1

	)

297 #ifde‡
_XOPEN_SOURCE_EXTENDED


298 
	#__USE_XOPEN_EXTENDED
 1

	)

303 #ifde‡
_LARGEFILE_SOURCE


304 
	#__USE_LARGEFILE
 1

	)

307 #ifde‡
_LARGEFILE64_SOURCE


308 
	#__USE_LARGEFILE64
 1

	)

311 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

312 
	#__USE_FILE_OFFSET64
 1

	)

315 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


316 
	#__USE_MISC
 1

	)

319 #ifdef 
_BSD_SOURCE


320 
	#__USE_BSD
 1

	)

323 #ifdef 
_SVID_SOURCE


324 
	#__USE_SVID
 1

	)

327 #ifdef 
_ATFILE_SOURCE


328 
	#__USE_ATFILE
 1

	)

331 #ifdef 
_GNU_SOURCE


332 
	#__USE_GNU
 1

	)

335 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


336 
	#__USE_REENTRANT
 1

	)

339 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

340 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

341 #i‡
_FORTIFY_SOURCE
 > 1

342 
	#__USE_FORTIFY_LEVEL
 2

	)

344 
	#__USE_FORTIFY_LEVEL
 1

	)

347 
	#__USE_FORTIFY_LEVEL
 0

	)

352 
	~<°dc-¥edef.h
>

360 #unde‡
__GNU_LIBRARY__


361 
	#__GNU_LIBRARY__
 6

	)

365 
	#__GLIBC__
 2

	)

366 
	#__GLIBC_MINOR__
 19

	)

368 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

369 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

372 #i‚de‡
__ASSEMBLER__


373 #i‚de‡
_SYS_CDEFS_H


374 
	~<sys/cdefs.h
>

379 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


380 
	#__USE_LARGEFILE
 1

	)

381 
	#__USE_LARGEFILE64
 1

	)

387 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

388 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

389 && 
deföed
 
	g__exã∫_ölöe


390 
	#__USE_EXTERN_INLINES
 1

	)

398 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

19 #i‚de‡
_GETOPT_H


21 #i‚de‡
__√ed_gë›t


22 
	#_GETOPT_H
 1

	)

32 #i‡!
deföed
 
__GNU_LIBRARY__


33 
	~<˘y≥.h
>

36 #i‚de‡
__THROW


37 #i‚de‡
__GNUC_PREREQ


38 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

40 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

41 
	#__THROW
 
	`throw
 ()

	)

43 
	#__THROW


	)

47 #ifdef 
__˝lu•lus


57 *
›èrg
;

71 
›töd
;

76 
›ãº
;

80 
›t›t
;

82 #i‚de‡
__√ed_gë›t


104 
	s›ti⁄


106 c⁄° *
	g«me
;

109 
	ghas_¨g
;

110 *
	gÊag
;

111 
	gvÆ
;

116 
	#no_¨gumít
 0

	)

117 
	#ªquúed_¨gumít
 1

	)

118 
	#›ti⁄Æ_¨gumít
 2

	)

146 #ifde‡
__GNU_LIBRARY__


150 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

151 
__THROW
;

153 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

154 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


158 #ifde‡
__REDIRECT


159 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

160 c⁄° *
__sh‹t›ts
),

161 
__posix_gë›t
);

163 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

164 c⁄° *
__sh‹t›ts
Ë
__THROW
;

165 
	#gë›t
 
__posix_gë›t


	)

169 
gë›t
 ();

172 #i‚de‡
__√ed_gë›t


173 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

174 c⁄° *
__sh‹t›ts
,

175 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

176 
__THROW
;

177 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

178 c⁄° *
__sh‹t›ts
,

179 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

180 
__THROW
;

184 #ifdef 
__˝lu•lus


189 #unde‡
__√ed_gë›t


	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 #ifde‡
__USE_EXTERN_INLINES


316 #i‡
__WORDSIZE
 == 64

318 
	$__°πﬁ_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

319 **
__ª°ri˘
 
__íd±r
,

320 
__ba£
, 
__group
)

321 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

323 
__exã∫_ölöe
 
ötmax_t


324 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

325 
ba£
))

327  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

328 
	}
}

330 
	$__°πoul_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

331 ** 
__ª°ri˘
 
__íd±r
,

332 
__ba£
, 
__group
)

333 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

335 
__exã∫_ölöe
 
uötmax_t


336 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

337 
ba£
))

339  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

340 
	}
}

342 
	$__wc°ﬁ_öã∫Æ
 (c⁄° 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

343 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

344 
__ba£
, 
__group
)

345 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

347 
__exã∫_ölöe
 
ötmax_t


348 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

349 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

351  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

352 
	}
}

354 
	$__wc°oul_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

355 
__ª°ri˘
 
__≈å
,

356 
__gwch¨_t
 **

357 
__ª°ri˘
 
__íd±r
,

358 
__ba£
, 
__group
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

361 
__exã∫_ölöe
 
uötmax_t


362 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

363 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

365  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

366 
	}
}

370 
__exãnsi⁄__


371 
	$__°πﬁl_öã∫Æ
 (c⁄° *
__ª°ri˘
 
__≈å
,

372 **
__ª°ri˘
 
__íd±r
,

373 
__ba£
, 
__group
)

374 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

376 
__exã∫_ölöe
 
ötmax_t


377 
	`__NTH
 (
	$°πoimax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

378 
ba£
))

380  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

381 
	}
}

383 
__exãnsi⁄__


384 
	$__°πouŒ_öã∫Æ
 (const *

385 
__ª°ri˘
 
__≈å
,

387 
__ª°ri˘
 
__íd±r
,

388 
__ba£
,

389 
__group
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

392 
__exã∫_ölöe
 
uötmax_t


393 
	`__NTH
 (
	$°πoumax
 (c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

394 
ba£
))

396  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

397 
	}
}

399 
__exãnsi⁄__


400 
	$__wc°ﬁl_öã∫Æ
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

401 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

402 
__ba£
, 
__group
)

403 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

405 
__exã∫_ölöe
 
ötmax_t


406 
	`__NTH
 (
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

407 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

409  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

410 
	}
}

413 
__exãnsi⁄__


414 
	$__wc°ouŒ_öã∫Æ
 (c⁄° 
__gwch¨_t
 *

415 
__ª°ri˘
 
__≈å
,

416 
__gwch¨_t
 **

417 
__ª°ri˘
 
__íd±r
,

418 
__ba£
,

419 
__group
)

420 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

422 
__exã∫_ölöe
 
uötmax_t


423 
	`__NTH
 (
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

424 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

426  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

427 
	}
}

432 
	g__END_DECLS


	@/usr/include/libio.h

28 #i‚de‡
_IO_STDIO_H


29 
	#_IO_STDIO_H


	)

31 
	~<_G_c⁄fig.h
>

33 
	#_IO_Âos_t
 
_G_Âos_t


	)

34 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

35 
	#_IO_size_t
 
size_t


	)

36 
	#_IO_ssize_t
 
__ssize_t


	)

37 
	#_IO_off_t
 
__off_t


	)

38 
	#_IO_off64_t
 
__off64_t


	)

39 
	#_IO_pid_t
 
__pid_t


	)

40 
	#_IO_uid_t
 
__uid_t


	)

41 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

42 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

43 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

44 
	#_IO_va_li°
 
_G_va_li°


	)

45 
	#_IO_wöt_t
 
wöt_t


	)

48 
	#__√ed___va_li°


	)

49 
	~<°d¨g.h
>

50 #ifde‡
__GNUC_VA_LIST


51 #unde‡
_IO_va_li°


52 
	#_IO_va_li°
 
__gnuc_va_li°


	)

55 #i‚de‡
__P


56 
	~<sys/cdefs.h
>

59 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

61 #i‚de‡
EOF


62 
	#EOF
 (-1)

	)

64 #i‚de‡
NULL


65 #i‡
deföed
 
__GNUG__
 && \

66 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

67 
	#NULL
 (
__nuŒ
)

	)

69 #i‡!
deföed
(
__˝lu•lus
)

70 
	#NULL
 ((*)0)

	)

72 
	#NULL
 (0)

	)

77 
	#_IOS_INPUT
 1

	)

78 
	#_IOS_OUTPUT
 2

	)

79 
	#_IOS_ATEND
 4

	)

80 
	#_IOS_APPEND
 8

	)

81 
	#_IOS_TRUNC
 16

	)

82 
	#_IOS_NOCREATE
 32

	)

83 
	#_IOS_NOREPLACE
 64

	)

84 
	#_IOS_BIN
 128

	)

92 
	#_IO_MAGIC
 0xFBAD0000

	)

93 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

94 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

95 
	#_IO_USER_BUF
 1

	)

96 
	#_IO_UNBUFFERED
 2

	)

97 
	#_IO_NO_READS
 4

	)

98 
	#_IO_NO_WRITES
 8

	)

99 
	#_IO_EOF_SEEN
 0x10

	)

100 
	#_IO_ERR_SEEN
 0x20

	)

101 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

102 
	#_IO_LINKED
 0x80

	)

103 
	#_IO_IN_BACKUP
 0x100

	)

104 
	#_IO_LINE_BUF
 0x200

	)

105 
	#_IO_TIED_PUT_GET
 0x400

	)

106 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

107 
	#_IO_IS_APPENDING
 0x1000

	)

108 
	#_IO_IS_FILEBUF
 0x2000

	)

109 
	#_IO_BAD_SEEN
 0x4000

	)

110 
	#_IO_USER_LOCK
 0x8000

	)

112 
	#_IO_FLAGS2_MMAP
 1

	)

113 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

114 #ifde‡
_LIBC


115 
	#_IO_FLAGS2_FORTIFY
 4

	)

117 
	#_IO_FLAGS2_USER_WBUF
 8

	)

118 #ifde‡
_LIBC


119 
	#_IO_FLAGS2_SCANF_STD
 16

	)

120 
	#_IO_FLAGS2_NOCLOSE
 32

	)

121 
	#_IO_FLAGS2_CLOEXEC
 64

	)

125 
	#_IO_SKIPWS
 01

	)

126 
	#_IO_LEFT
 02

	)

127 
	#_IO_RIGHT
 04

	)

128 
	#_IO_INTERNAL
 010

	)

129 
	#_IO_DEC
 020

	)

130 
	#_IO_OCT
 040

	)

131 
	#_IO_HEX
 0100

	)

132 
	#_IO_SHOWBASE
 0200

	)

133 
	#_IO_SHOWPOINT
 0400

	)

134 
	#_IO_UPPERCASE
 01000

	)

135 
	#_IO_SHOWPOS
 02000

	)

136 
	#_IO_SCIENTIFIC
 04000

	)

137 
	#_IO_FIXED
 010000

	)

138 
	#_IO_UNITBUF
 020000

	)

139 
	#_IO_STDIO
 040000

	)

140 
	#_IO_DONT_CLOSE
 0100000

	)

141 
	#_IO_BOOLALPHA
 0200000

	)

144 
_IO_jump_t
; 
	g_IO_FILE
;

147 #ifde‡
_IO_MTSAFE_IO


148 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

149 
	~<bôs/°dio-lock.h
>

154 
	t_IO_lock_t
;

160 
	s_IO_m¨kî
 {

161 
_IO_m¨kî
 *
	m_√xt
;

162 
_IO_FILE
 *
	m_sbuf
;

166 
	m_pos
;

168 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

169 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

170 
	mpublic
:

171 
°ªamm¨kî
(
°ªambuf
 *
sb
);

172 ~
°ªamm¨kî
();

173 
ßvög
(Ë{  
	m_•os
 == -2; }

174 
dñè
(
°ªamm¨kî
&);

175 
dñè
();

180 
	e__codecvt_ªsu…


182 
	m__codecvt_ok
,

183 
	m__codecvt_∑πül
,

184 
	m__codecvt_îr‹
,

185 
	m__codecvt_noc⁄v


188 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


191 
	s_IO_codecvt


193 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

194 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

195 
	m__mb°©e_t
 *,

196 c⁄° 
	mwch¨_t
 *,

197 c⁄° 
	mwch¨_t
 *,

198 c⁄° 
	mwch¨_t
 **, *,

200 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

201 
	m__mb°©e_t
 *, *,

203 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

204 
	m__mb°©e_t
 *,

206 c⁄° **, 
	mwch¨_t
 *,

207 
	mwch¨_t
 *, wchar_t **);

208 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

209 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

210 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

211 c⁄° *, c⁄° *, 
	m_IO_size_t
);

212 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

214 
_IO_ic⁄v_t
 
	m__cd_ö
;

215 
_IO_ic⁄v_t
 
	m__cd_out
;

219 
	s_IO_wide_d©a


221 
wch¨_t
 *
	m_IO_ªad_±r
;

222 
wch¨_t
 *
	m_IO_ªad_íd
;

223 
wch¨_t
 *
	m_IO_ªad_ba£
;

224 
wch¨_t
 *
	m_IO_wrôe_ba£
;

225 
wch¨_t
 *
	m_IO_wrôe_±r
;

226 
wch¨_t
 *
	m_IO_wrôe_íd
;

227 
wch¨_t
 *
	m_IO_buf_ba£
;

228 
wch¨_t
 *
	m_IO_buf_íd
;

230 
wch¨_t
 *
	m_IO_ßve_ba£
;

231 
wch¨_t
 *
	m_IO_backup_ba£
;

233 
wch¨_t
 *
	m_IO_ßve_íd
;

235 
__mb°©e_t
 
	m_IO_°©e
;

236 
__mb°©e_t
 
	m_IO_œ°_°©e
;

237 
_IO_codecvt
 
	m_codecvt
;

239 
wch¨_t
 
	m_sh‹tbuf
[1];

241 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

245 
	s_IO_FILE
 {

246 
	m_Êags
;

247 
	#_IO_fûe_Êags
 
_Êags


	)

251 * 
	m_IO_ªad_±r
;

252 * 
	m_IO_ªad_íd
;

253 * 
	m_IO_ªad_ba£
;

254 * 
	m_IO_wrôe_ba£
;

255 * 
	m_IO_wrôe_±r
;

256 * 
	m_IO_wrôe_íd
;

257 * 
	m_IO_buf_ba£
;

258 * 
	m_IO_buf_íd
;

260 *
	m_IO_ßve_ba£
;

261 *
	m_IO_backup_ba£
;

262 *
	m_IO_ßve_íd
;

264 
_IO_m¨kî
 *
	m_m¨kîs
;

266 
_IO_FILE
 *
	m_chaö
;

268 
	m_fûío
;

270 
	m_blksize
;

272 
	m_Êags2
;

274 
_IO_off_t
 
	m_ﬁd_off£t
;

276 
	#__HAVE_COLUMN


	)

278 
	m_cur_cﬁumn
;

279 sig√d 
	m_vèbÀ_off£t
;

280 
	m_sh‹tbuf
[1];

284 
_IO_lock_t
 *
	m_lock
;

285 #ifde‡
_IO_USE_OLD_IO_FILE


288 
	s_IO_FILE_com∂ëe


290 
_IO_FILE
 
	m_fûe
;

292 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

293 
_IO_off64_t
 
	m_off£t
;

294 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


296 
_IO_codecvt
 *
	m_codecvt
;

297 
_IO_wide_d©a
 *
	m_wide_d©a
;

298 
_IO_FILE
 *
	m_‰ìªs_li°
;

299 *
	m_‰ìªs_buf
;

300 
size_t
 
	m_‰ìªs_size
;

302 *
	m__∑d1
;

303 *
	m__∑d2
;

304 *
	m__∑d3
;

305 *
	m__∑d4
;

306 
size_t
 
	m__∑d5
;

308 
	m_mode
;

310 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

314 #i‚de‡
__˝lu•lus


315 
_IO_FILE
 
	t_IO_FILE
;

318 
	g_IO_FILE_∂us
;

320 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

321 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

322 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

323 #i‚de‡
_LIBC


324 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

325 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

326 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

328 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

329 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

330 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

338 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

346 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, c⁄° *
	t__buf
,

347 
	tsize_t
 
	t__n
);

355 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

358 
	t__io_˛o£_‚
 (*
	t__cookõ
);

361 #ifde‡
_GNU_SOURCE


363 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

364 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

365 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

366 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

371 
__io_ªad_‚
 *
	mªad
;

372 
__io_wrôe_‚
 *
	mwrôe
;

373 
__io_£ek_‚
 *
	m£ek
;

374 
__io_˛o£_‚
 *
	m˛o£
;

375 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

376 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

378 
	g_IO_cookõ_fûe
;

381 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

382 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

386 #ifde‡
__˝lu•lus


390 
__undîÊow
 (
_IO_FILE
 *);

391 
__uÊow
 (
_IO_FILE
 *);

392 
__ovîÊow
 (
_IO_FILE
 *, );

393 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


394 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

395 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

396 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

399 #i‡ 
__GNUC__
 >= 3

400 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

402 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

405 
	#_IO_gëc_u∆ocked
(
_Â
) \

406 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

407 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

408 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

409 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

410 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

411 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

412 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

413 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

414 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

415 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

417 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


418 
	#_IO_gëwc_u∆ocked
(
_Â
) \

419 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

420 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

421 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

422 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

423 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

424 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

425 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

426 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

427 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

428 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

431 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

432 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

434 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

435 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

436 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

437 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

439 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

442 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

443 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

445 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

446 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

447 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

449 #ifde‡
_IO_MTSAFE_IO


450 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

451 
	#_IO_Êockfûe
(
_Â
) \

452 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

453 
	#_IO_fu∆ockfûe
(
_Â
) \

454 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

456 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

457 
	#_IO_Êockfûe
(
_Â
Ë

	)

458 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

459 
	#_IO_·rylockfûe
(
_Â
Ë

	)

460 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

461 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

464 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

465 
_IO_va_li°
, *
__ª°ri˘
);

466 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

467 
_IO_va_li°
);

468 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

469 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

471 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

472 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

474 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

476 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


477 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

478 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

479 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

480 #i‡
__GNUC__
 >= 2

483 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


484 
	~<shlib-com∑t.h
>

485 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

486 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

487 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

488 c⁄° 
_IO_°dö_u£d
;

489 
wók_exã∫
 (
_IO_°dö_u£d
);

492 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


493 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

497 
	#_IO_fwide
(
__Â
, 
__mode
) \

498 ({ 
__ªsu…
 = (
__mode
); \

499 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

501 i‡((
__Â
)->
_mode
 == 0) \

503 (
__Â
)->
_mode
 = -1; \

504 
__ªsu…
 = (
__Â
)->
_mode
; \

506 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

507 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

509 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

510 
__ªsu…
; })

	)

513 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

514 
_IO_va_li°
, *
__ª°ri˘
);

515 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

516 
_IO_va_li°
);

517 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

518 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

521 #ifde‡
__LDBL_COMPAT


522 
	~<bôs/libio-ldbl.h
>

525 #ifde‡
__˝lu•lus


	@/usr/include/linux/ioctl.h

1 #i‚de‡
_LINUX_IOCTL_H


2 
	#_LINUX_IOCTL_H


	)

4 
	~<asm/io˘l.h
>

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/v4l2-common.h

29 #i‚de‡
__V4L2_COMMON__


30 
	#__V4L2_COMMON__


	)

39 
	#V4L2_SEL_TGT_CROP
 0x0000

	)

41 
	#V4L2_SEL_TGT_CROP_DEFAULT
 0x0001

	)

43 
	#V4L2_SEL_TGT_CROP_BOUNDS
 0x0002

	)

45 
	#V4L2_SEL_TGT_COMPOSE
 0x0100

	)

47 
	#V4L2_SEL_TGT_COMPOSE_DEFAULT
 0x0101

	)

49 
	#V4L2_SEL_TGT_COMPOSE_BOUNDS
 0x0102

	)

51 
	#V4L2_SEL_TGT_COMPOSE_PADDED
 0x0103

	)

54 
	#V4L2_SEL_TGT_CROP_ACTIVE
 
V4L2_SEL_TGT_CROP


	)

55 
	#V4L2_SEL_TGT_COMPOSE_ACTIVE
 
V4L2_SEL_TGT_COMPOSE


	)

56 
	#V4L2_SUBDEV_SEL_TGT_CROP_ACTUAL
 
V4L2_SEL_TGT_CROP


	)

57 
	#V4L2_SUBDEV_SEL_TGT_COMPOSE_ACTUAL
 
V4L2_SEL_TGT_COMPOSE


	)

58 
	#V4L2_SUBDEV_SEL_TGT_CROP_BOUNDS
 
V4L2_SEL_TGT_CROP_BOUNDS


	)

59 
	#V4L2_SUBDEV_SEL_TGT_COMPOSE_BOUNDS
 
V4L2_SEL_TGT_COMPOSE_BOUNDS


	)

62 
	#V4L2_SEL_FLAG_GE
 (1 << 0)

	)

63 
	#V4L2_SEL_FLAG_LE
 (1 << 1)

	)

64 
	#V4L2_SEL_FLAG_KEEP_CONFIG
 (1 << 2)

	)

67 
	#V4L2_SUBDEV_SEL_FLAG_SIZE_GE
 
V4L2_SEL_FLAG_GE


	)

68 
	#V4L2_SUBDEV_SEL_FLAG_SIZE_LE
 
V4L2_SEL_FLAG_LE


	)

69 
	#V4L2_SUBDEV_SEL_FLAG_KEEP_CONFIG
 
V4L2_SEL_FLAG_KEEP_CONFIG


	)

	@/usr/include/linux/v4l2-controls.h

49 #i‚de‡
__LINUX_V4L2_CONTROLS_H


50 
	#__LINUX_V4L2_CONTROLS_H


	)

53 
	#V4L2_CTRL_CLASS_USER
 0x00980000

	)

54 
	#V4L2_CTRL_CLASS_MPEG
 0x00990000

	)

55 
	#V4L2_CTRL_CLASS_CAMERA
 0x009a0000

	)

56 
	#V4L2_CTRL_CLASS_FM_TX
 0x009b0000

	)

57 
	#V4L2_CTRL_CLASS_FLASH
 0x009c0000

	)

58 
	#V4L2_CTRL_CLASS_JPEG
 0x009d0000

	)

59 
	#V4L2_CTRL_CLASS_IMAGE_SOURCE
 0x009e0000

	)

60 
	#V4L2_CTRL_CLASS_IMAGE_PROC
 0x009f0000

	)

61 
	#V4L2_CTRL_CLASS_DV
 0x00a00000

	)

62 
	#V4L2_CTRL_CLASS_FM_RX
 0x00a10000

	)

66 
	#V4L2_CID_BASE
 (
V4L2_CTRL_CLASS_USER
 | 0x900)

	)

67 
	#V4L2_CID_USER_BASE
 
V4L2_CID_BASE


	)

68 
	#V4L2_CID_USER_CLASS
 (
V4L2_CTRL_CLASS_USER
 | 1)

	)

69 
	#V4L2_CID_BRIGHTNESS
 (
V4L2_CID_BASE
+0)

	)

70 
	#V4L2_CID_CONTRAST
 (
V4L2_CID_BASE
+1)

	)

71 
	#V4L2_CID_SATURATION
 (
V4L2_CID_BASE
+2)

	)

72 
	#V4L2_CID_HUE
 (
V4L2_CID_BASE
+3)

	)

73 
	#V4L2_CID_AUDIO_VOLUME
 (
V4L2_CID_BASE
+5)

	)

74 
	#V4L2_CID_AUDIO_BALANCE
 (
V4L2_CID_BASE
+6)

	)

75 
	#V4L2_CID_AUDIO_BASS
 (
V4L2_CID_BASE
+7)

	)

76 
	#V4L2_CID_AUDIO_TREBLE
 (
V4L2_CID_BASE
+8)

	)

77 
	#V4L2_CID_AUDIO_MUTE
 (
V4L2_CID_BASE
+9)

	)

78 
	#V4L2_CID_AUDIO_LOUDNESS
 (
V4L2_CID_BASE
+10)

	)

79 
	#V4L2_CID_BLACK_LEVEL
 (
V4L2_CID_BASE
+11Ë

	)

80 
	#V4L2_CID_AUTO_WHITE_BALANCE
 (
V4L2_CID_BASE
+12)

	)

81 
	#V4L2_CID_DO_WHITE_BALANCE
 (
V4L2_CID_BASE
+13)

	)

82 
	#V4L2_CID_RED_BALANCE
 (
V4L2_CID_BASE
+14)

	)

83 
	#V4L2_CID_BLUE_BALANCE
 (
V4L2_CID_BASE
+15)

	)

84 
	#V4L2_CID_GAMMA
 (
V4L2_CID_BASE
+16)

	)

85 
	#V4L2_CID_WHITENESS
 (
V4L2_CID_GAMMA
Ë

	)

86 
	#V4L2_CID_EXPOSURE
 (
V4L2_CID_BASE
+17)

	)

87 
	#V4L2_CID_AUTOGAIN
 (
V4L2_CID_BASE
+18)

	)

88 
	#V4L2_CID_GAIN
 (
V4L2_CID_BASE
+19)

	)

89 
	#V4L2_CID_HFLIP
 (
V4L2_CID_BASE
+20)

	)

90 
	#V4L2_CID_VFLIP
 (
V4L2_CID_BASE
+21)

	)

92 
	#V4L2_CID_POWER_LINE_FREQUENCY
 (
V4L2_CID_BASE
+24)

	)

93 
	ev4l2_powî_löe_‰equícy
 {

94 
	mV4L2_CID_POWER_LINE_FREQUENCY_DISABLED
 = 0,

95 
	mV4L2_CID_POWER_LINE_FREQUENCY_50HZ
 = 1,

96 
	mV4L2_CID_POWER_LINE_FREQUENCY_60HZ
 = 2,

97 
	mV4L2_CID_POWER_LINE_FREQUENCY_AUTO
 = 3,

99 
	#V4L2_CID_HUE_AUTO
 (
V4L2_CID_BASE
+25)

	)

100 
	#V4L2_CID_WHITE_BALANCE_TEMPERATURE
 (
V4L2_CID_BASE
+26)

	)

101 
	#V4L2_CID_SHARPNESS
 (
V4L2_CID_BASE
+27)

	)

102 
	#V4L2_CID_BACKLIGHT_COMPENSATION
 (
V4L2_CID_BASE
+28)

	)

103 
	#V4L2_CID_CHROMA_AGC
 (
V4L2_CID_BASE
+29)

	)

104 
	#V4L2_CID_COLOR_KILLER
 (
V4L2_CID_BASE
+30)

	)

105 
	#V4L2_CID_COLORFX
 (
V4L2_CID_BASE
+31)

	)

106 
	ev4l2_cﬁ‹fx
 {

107 
	mV4L2_COLORFX_NONE
 = 0,

108 
	mV4L2_COLORFX_BW
 = 1,

109 
	mV4L2_COLORFX_SEPIA
 = 2,

110 
	mV4L2_COLORFX_NEGATIVE
 = 3,

111 
	mV4L2_COLORFX_EMBOSS
 = 4,

112 
	mV4L2_COLORFX_SKETCH
 = 5,

113 
	mV4L2_COLORFX_SKY_BLUE
 = 6,

114 
	mV4L2_COLORFX_GRASS_GREEN
 = 7,

115 
	mV4L2_COLORFX_SKIN_WHITEN
 = 8,

116 
	mV4L2_COLORFX_VIVID
 = 9,

117 
	mV4L2_COLORFX_AQUA
 = 10,

118 
	mV4L2_COLORFX_ART_FREEZE
 = 11,

119 
	mV4L2_COLORFX_SILHOUETTE
 = 12,

120 
	mV4L2_COLORFX_SOLARIZATION
 = 13,

121 
	mV4L2_COLORFX_ANTIQUE
 = 14,

122 
	mV4L2_COLORFX_SET_CBCR
 = 15,

124 
	#V4L2_CID_AUTOBRIGHTNESS
 (
V4L2_CID_BASE
+32)

	)

125 
	#V4L2_CID_BAND_STOP_FILTER
 (
V4L2_CID_BASE
+33)

	)

127 
	#V4L2_CID_ROTATE
 (
V4L2_CID_BASE
+34)

	)

128 
	#V4L2_CID_BG_COLOR
 (
V4L2_CID_BASE
+35)

	)

130 
	#V4L2_CID_CHROMA_GAIN
 (
V4L2_CID_BASE
+36)

	)

132 
	#V4L2_CID_ILLUMINATORS_1
 (
V4L2_CID_BASE
+37)

	)

133 
	#V4L2_CID_ILLUMINATORS_2
 (
V4L2_CID_BASE
+38)

	)

135 
	#V4L2_CID_MIN_BUFFERS_FOR_CAPTURE
 (
V4L2_CID_BASE
+39)

	)

136 
	#V4L2_CID_MIN_BUFFERS_FOR_OUTPUT
 (
V4L2_CID_BASE
+40)

	)

138 
	#V4L2_CID_ALPHA_COMPONENT
 (
V4L2_CID_BASE
+41)

	)

139 
	#V4L2_CID_COLORFX_CBCR
 (
V4L2_CID_BASE
+42)

	)

142 
	#V4L2_CID_LASTP1
 (
V4L2_CID_BASE
+43)

	)

148 
	#V4L2_CID_USER_MEYE_BASE
 (
V4L2_CID_USER_BASE
 + 0x1000)

	)

152 
	#V4L2_CID_USER_BTTV_BASE
 (
V4L2_CID_USER_BASE
 + 0x1010)

	)

157 
	#V4L2_CID_USER_S2255_BASE
 (
V4L2_CID_USER_BASE
 + 0x1030)

	)

161 
	#V4L2_CID_USER_SI476X_BASE
 (
V4L2_CID_USER_BASE
 + 0x1040)

	)

165 
	#V4L2_CID_USER_TI_VPE_BASE
 (
V4L2_CID_USER_BASE
 + 0x1050)

	)

171 
	#V4L2_CID_MPEG_BASE
 (
V4L2_CTRL_CLASS_MPEG
 | 0x900)

	)

172 
	#V4L2_CID_MPEG_CLASS
 (
V4L2_CTRL_CLASS_MPEG
 | 1)

	)

175 
	#V4L2_CID_MPEG_STREAM_TYPE
 (
V4L2_CID_MPEG_BASE
+0)

	)

176 
	ev4l2_m≥g_°ªam_ty≥
 {

177 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_PS
 = 0,

178 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_TS
 = 1,

179 
	mV4L2_MPEG_STREAM_TYPE_MPEG1_SS
 = 2,

180 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_DVD
 = 3,

181 
	mV4L2_MPEG_STREAM_TYPE_MPEG1_VCD
 = 4,

182 
	mV4L2_MPEG_STREAM_TYPE_MPEG2_SVCD
 = 5,

184 
	#V4L2_CID_MPEG_STREAM_PID_PMT
 (
V4L2_CID_MPEG_BASE
+1)

	)

185 
	#V4L2_CID_MPEG_STREAM_PID_AUDIO
 (
V4L2_CID_MPEG_BASE
+2)

	)

186 
	#V4L2_CID_MPEG_STREAM_PID_VIDEO
 (
V4L2_CID_MPEG_BASE
+3)

	)

187 
	#V4L2_CID_MPEG_STREAM_PID_PCR
 (
V4L2_CID_MPEG_BASE
+4)

	)

188 
	#V4L2_CID_MPEG_STREAM_PES_ID_AUDIO
 (
V4L2_CID_MPEG_BASE
+5)

	)

189 
	#V4L2_CID_MPEG_STREAM_PES_ID_VIDEO
 (
V4L2_CID_MPEG_BASE
+6)

	)

190 
	#V4L2_CID_MPEG_STREAM_VBI_FMT
 (
V4L2_CID_MPEG_BASE
+7)

	)

191 
	ev4l2_m≥g_°ªam_vbi_fmt
 {

192 
	mV4L2_MPEG_STREAM_VBI_FMT_NONE
 = 0,

193 
	mV4L2_MPEG_STREAM_VBI_FMT_IVTV
 = 1,

197 
	#V4L2_CID_MPEG_AUDIO_SAMPLING_FREQ
 (
V4L2_CID_MPEG_BASE
+100)

	)

198 
	ev4l2_m≥g_audio_ßm∂ög_‰eq
 {

199 
	mV4L2_MPEG_AUDIO_SAMPLING_FREQ_44100
 = 0,

200 
	mV4L2_MPEG_AUDIO_SAMPLING_FREQ_48000
 = 1,

201 
	mV4L2_MPEG_AUDIO_SAMPLING_FREQ_32000
 = 2,

203 
	#V4L2_CID_MPEG_AUDIO_ENCODING
 (
V4L2_CID_MPEG_BASE
+101)

	)

204 
	ev4l2_m≥g_audio_ícodög
 {

205 
	mV4L2_MPEG_AUDIO_ENCODING_LAYER_1
 = 0,

206 
	mV4L2_MPEG_AUDIO_ENCODING_LAYER_2
 = 1,

207 
	mV4L2_MPEG_AUDIO_ENCODING_LAYER_3
 = 2,

208 
	mV4L2_MPEG_AUDIO_ENCODING_AAC
 = 3,

209 
	mV4L2_MPEG_AUDIO_ENCODING_AC3
 = 4,

211 
	#V4L2_CID_MPEG_AUDIO_L1_BITRATE
 (
V4L2_CID_MPEG_BASE
+102)

	)

212 
	ev4l2_m≥g_audio_l1_bôøã
 {

213 
	mV4L2_MPEG_AUDIO_L1_BITRATE_32K
 = 0,

214 
	mV4L2_MPEG_AUDIO_L1_BITRATE_64K
 = 1,

215 
	mV4L2_MPEG_AUDIO_L1_BITRATE_96K
 = 2,

216 
	mV4L2_MPEG_AUDIO_L1_BITRATE_128K
 = 3,

217 
	mV4L2_MPEG_AUDIO_L1_BITRATE_160K
 = 4,

218 
	mV4L2_MPEG_AUDIO_L1_BITRATE_192K
 = 5,

219 
	mV4L2_MPEG_AUDIO_L1_BITRATE_224K
 = 6,

220 
	mV4L2_MPEG_AUDIO_L1_BITRATE_256K
 = 7,

221 
	mV4L2_MPEG_AUDIO_L1_BITRATE_288K
 = 8,

222 
	mV4L2_MPEG_AUDIO_L1_BITRATE_320K
 = 9,

223 
	mV4L2_MPEG_AUDIO_L1_BITRATE_352K
 = 10,

224 
	mV4L2_MPEG_AUDIO_L1_BITRATE_384K
 = 11,

225 
	mV4L2_MPEG_AUDIO_L1_BITRATE_416K
 = 12,

226 
	mV4L2_MPEG_AUDIO_L1_BITRATE_448K
 = 13,

228 
	#V4L2_CID_MPEG_AUDIO_L2_BITRATE
 (
V4L2_CID_MPEG_BASE
+103)

	)

229 
	ev4l2_m≥g_audio_l2_bôøã
 {

230 
	mV4L2_MPEG_AUDIO_L2_BITRATE_32K
 = 0,

231 
	mV4L2_MPEG_AUDIO_L2_BITRATE_48K
 = 1,

232 
	mV4L2_MPEG_AUDIO_L2_BITRATE_56K
 = 2,

233 
	mV4L2_MPEG_AUDIO_L2_BITRATE_64K
 = 3,

234 
	mV4L2_MPEG_AUDIO_L2_BITRATE_80K
 = 4,

235 
	mV4L2_MPEG_AUDIO_L2_BITRATE_96K
 = 5,

236 
	mV4L2_MPEG_AUDIO_L2_BITRATE_112K
 = 6,

237 
	mV4L2_MPEG_AUDIO_L2_BITRATE_128K
 = 7,

238 
	mV4L2_MPEG_AUDIO_L2_BITRATE_160K
 = 8,

239 
	mV4L2_MPEG_AUDIO_L2_BITRATE_192K
 = 9,

240 
	mV4L2_MPEG_AUDIO_L2_BITRATE_224K
 = 10,

241 
	mV4L2_MPEG_AUDIO_L2_BITRATE_256K
 = 11,

242 
	mV4L2_MPEG_AUDIO_L2_BITRATE_320K
 = 12,

243 
	mV4L2_MPEG_AUDIO_L2_BITRATE_384K
 = 13,

245 
	#V4L2_CID_MPEG_AUDIO_L3_BITRATE
 (
V4L2_CID_MPEG_BASE
+104)

	)

246 
	ev4l2_m≥g_audio_l3_bôøã
 {

247 
	mV4L2_MPEG_AUDIO_L3_BITRATE_32K
 = 0,

248 
	mV4L2_MPEG_AUDIO_L3_BITRATE_40K
 = 1,

249 
	mV4L2_MPEG_AUDIO_L3_BITRATE_48K
 = 2,

250 
	mV4L2_MPEG_AUDIO_L3_BITRATE_56K
 = 3,

251 
	mV4L2_MPEG_AUDIO_L3_BITRATE_64K
 = 4,

252 
	mV4L2_MPEG_AUDIO_L3_BITRATE_80K
 = 5,

253 
	mV4L2_MPEG_AUDIO_L3_BITRATE_96K
 = 6,

254 
	mV4L2_MPEG_AUDIO_L3_BITRATE_112K
 = 7,

255 
	mV4L2_MPEG_AUDIO_L3_BITRATE_128K
 = 8,

256 
	mV4L2_MPEG_AUDIO_L3_BITRATE_160K
 = 9,

257 
	mV4L2_MPEG_AUDIO_L3_BITRATE_192K
 = 10,

258 
	mV4L2_MPEG_AUDIO_L3_BITRATE_224K
 = 11,

259 
	mV4L2_MPEG_AUDIO_L3_BITRATE_256K
 = 12,

260 
	mV4L2_MPEG_AUDIO_L3_BITRATE_320K
 = 13,

262 
	#V4L2_CID_MPEG_AUDIO_MODE
 (
V4L2_CID_MPEG_BASE
+105)

	)

263 
	ev4l2_m≥g_audio_mode
 {

264 
	mV4L2_MPEG_AUDIO_MODE_STEREO
 = 0,

265 
	mV4L2_MPEG_AUDIO_MODE_JOINT_STEREO
 = 1,

266 
	mV4L2_MPEG_AUDIO_MODE_DUAL
 = 2,

267 
	mV4L2_MPEG_AUDIO_MODE_MONO
 = 3,

269 
	#V4L2_CID_MPEG_AUDIO_MODE_EXTENSION
 (
V4L2_CID_MPEG_BASE
+106)

	)

270 
	ev4l2_m≥g_audio_mode_exãnsi⁄
 {

271 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_4
 = 0,

272 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_8
 = 1,

273 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_12
 = 2,

274 
	mV4L2_MPEG_AUDIO_MODE_EXTENSION_BOUND_16
 = 3,

276 
	#V4L2_CID_MPEG_AUDIO_EMPHASIS
 (
V4L2_CID_MPEG_BASE
+107)

	)

277 
	ev4l2_m≥g_audio_emphasis
 {

278 
	mV4L2_MPEG_AUDIO_EMPHASIS_NONE
 = 0,

279 
	mV4L2_MPEG_AUDIO_EMPHASIS_50_DIV_15_uS
 = 1,

280 
	mV4L2_MPEG_AUDIO_EMPHASIS_CCITT_J17
 = 2,

282 
	#V4L2_CID_MPEG_AUDIO_CRC
 (
V4L2_CID_MPEG_BASE
+108)

	)

283 
	ev4l2_m≥g_audio_¸c
 {

284 
	mV4L2_MPEG_AUDIO_CRC_NONE
 = 0,

285 
	mV4L2_MPEG_AUDIO_CRC_CRC16
 = 1,

287 
	#V4L2_CID_MPEG_AUDIO_MUTE
 (
V4L2_CID_MPEG_BASE
+109)

	)

288 
	#V4L2_CID_MPEG_AUDIO_AAC_BITRATE
 (
V4L2_CID_MPEG_BASE
+110)

	)

289 
	#V4L2_CID_MPEG_AUDIO_AC3_BITRATE
 (
V4L2_CID_MPEG_BASE
+111)

	)

290 
	ev4l2_m≥g_audio_ac3_bôøã
 {

291 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_32K
 = 0,

292 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_40K
 = 1,

293 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_48K
 = 2,

294 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_56K
 = 3,

295 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_64K
 = 4,

296 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_80K
 = 5,

297 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_96K
 = 6,

298 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_112K
 = 7,

299 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_128K
 = 8,

300 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_160K
 = 9,

301 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_192K
 = 10,

302 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_224K
 = 11,

303 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_256K
 = 12,

304 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_320K
 = 13,

305 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_384K
 = 14,

306 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_448K
 = 15,

307 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_512K
 = 16,

308 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_576K
 = 17,

309 
	mV4L2_MPEG_AUDIO_AC3_BITRATE_640K
 = 18,

311 
	#V4L2_CID_MPEG_AUDIO_DEC_PLAYBACK
 (
V4L2_CID_MPEG_BASE
+112)

	)

312 
	ev4l2_m≥g_audio_dec_∂ayback
 {

313 
	mV4L2_MPEG_AUDIO_DEC_PLAYBACK_AUTO
 = 0,

314 
	mV4L2_MPEG_AUDIO_DEC_PLAYBACK_STEREO
 = 1,

315 
	mV4L2_MPEG_AUDIO_DEC_PLAYBACK_LEFT
 = 2,

316 
	mV4L2_MPEG_AUDIO_DEC_PLAYBACK_RIGHT
 = 3,

317 
	mV4L2_MPEG_AUDIO_DEC_PLAYBACK_MONO
 = 4,

318 
	mV4L2_MPEG_AUDIO_DEC_PLAYBACK_SWAPPED_STEREO
 = 5,

320 
	#V4L2_CID_MPEG_AUDIO_DEC_MULTILINGUAL_PLAYBACK
 (
V4L2_CID_MPEG_BASE
+113)

	)

323 
	#V4L2_CID_MPEG_VIDEO_ENCODING
 (
V4L2_CID_MPEG_BASE
+200)

	)

324 
	ev4l2_m≥g_video_ícodög
 {

325 
	mV4L2_MPEG_VIDEO_ENCODING_MPEG_1
 = 0,

326 
	mV4L2_MPEG_VIDEO_ENCODING_MPEG_2
 = 1,

327 
	mV4L2_MPEG_VIDEO_ENCODING_MPEG_4_AVC
 = 2,

329 
	#V4L2_CID_MPEG_VIDEO_ASPECT
 (
V4L2_CID_MPEG_BASE
+201)

	)

330 
	ev4l2_m≥g_video_a•e˘
 {

331 
	mV4L2_MPEG_VIDEO_ASPECT_1x1
 = 0,

332 
	mV4L2_MPEG_VIDEO_ASPECT_4x3
 = 1,

333 
	mV4L2_MPEG_VIDEO_ASPECT_16x9
 = 2,

334 
	mV4L2_MPEG_VIDEO_ASPECT_221x100
 = 3,

336 
	#V4L2_CID_MPEG_VIDEO_B_FRAMES
 (
V4L2_CID_MPEG_BASE
+202)

	)

337 
	#V4L2_CID_MPEG_VIDEO_GOP_SIZE
 (
V4L2_CID_MPEG_BASE
+203)

	)

338 
	#V4L2_CID_MPEG_VIDEO_GOP_CLOSURE
 (
V4L2_CID_MPEG_BASE
+204)

	)

339 
	#V4L2_CID_MPEG_VIDEO_PULLDOWN
 (
V4L2_CID_MPEG_BASE
+205)

	)

340 
	#V4L2_CID_MPEG_VIDEO_BITRATE_MODE
 (
V4L2_CID_MPEG_BASE
+206)

	)

341 
	ev4l2_m≥g_video_bôøã_mode
 {

342 
	mV4L2_MPEG_VIDEO_BITRATE_MODE_VBR
 = 0,

343 
	mV4L2_MPEG_VIDEO_BITRATE_MODE_CBR
 = 1,

345 
	#V4L2_CID_MPEG_VIDEO_BITRATE
 (
V4L2_CID_MPEG_BASE
+207)

	)

346 
	#V4L2_CID_MPEG_VIDEO_BITRATE_PEAK
 (
V4L2_CID_MPEG_BASE
+208)

	)

347 
	#V4L2_CID_MPEG_VIDEO_TEMPORAL_DECIMATION
 (
V4L2_CID_MPEG_BASE
+209)

	)

348 
	#V4L2_CID_MPEG_VIDEO_MUTE
 (
V4L2_CID_MPEG_BASE
+210)

	)

349 
	#V4L2_CID_MPEG_VIDEO_MUTE_YUV
 (
V4L2_CID_MPEG_BASE
+211)

	)

350 
	#V4L2_CID_MPEG_VIDEO_DECODER_SLICE_INTERFACE
 (
V4L2_CID_MPEG_BASE
+212)

	)

351 
	#V4L2_CID_MPEG_VIDEO_DECODER_MPEG4_DEBLOCK_FILTER
 (
V4L2_CID_MPEG_BASE
+213)

	)

352 
	#V4L2_CID_MPEG_VIDEO_CYCLIC_INTRA_REFRESH_MB
 (
V4L2_CID_MPEG_BASE
+214)

	)

353 
	#V4L2_CID_MPEG_VIDEO_FRAME_RC_ENABLE
 (
V4L2_CID_MPEG_BASE
+215)

	)

354 
	#V4L2_CID_MPEG_VIDEO_HEADER_MODE
 (
V4L2_CID_MPEG_BASE
+216)

	)

355 
	ev4l2_m≥g_video_hódî_mode
 {

356 
	mV4L2_MPEG_VIDEO_HEADER_MODE_SEPARATE
 = 0,

357 
	mV4L2_MPEG_VIDEO_HEADER_MODE_JOINED_WITH_1ST_FRAME
 = 1,

360 
	#V4L2_CID_MPEG_VIDEO_MAX_REF_PIC
 (
V4L2_CID_MPEG_BASE
+217)

	)

361 
	#V4L2_CID_MPEG_VIDEO_MB_RC_ENABLE
 (
V4L2_CID_MPEG_BASE
+218)

	)

362 
	#V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_BYTES
 (
V4L2_CID_MPEG_BASE
+219)

	)

363 
	#V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MAX_MB
 (
V4L2_CID_MPEG_BASE
+220)

	)

364 
	#V4L2_CID_MPEG_VIDEO_MULTI_SLICE_MODE
 (
V4L2_CID_MPEG_BASE
+221)

	)

365 
	ev4l2_m≥g_video_mu…i_¶i˚_mode
 {

366 
	mV4L2_MPEG_VIDEO_MULTI_SLICE_MODE_SINGLE
 = 0,

367 
	mV4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_MB
 = 1,

368 
	mV4L2_MPEG_VIDEO_MULTI_SICE_MODE_MAX_BYTES
 = 2,

370 
	#V4L2_CID_MPEG_VIDEO_VBV_SIZE
 (
V4L2_CID_MPEG_BASE
+222)

	)

371 
	#V4L2_CID_MPEG_VIDEO_DEC_PTS
 (
V4L2_CID_MPEG_BASE
+223)

	)

372 
	#V4L2_CID_MPEG_VIDEO_DEC_FRAME
 (
V4L2_CID_MPEG_BASE
+224)

	)

373 
	#V4L2_CID_MPEG_VIDEO_VBV_DELAY
 (
V4L2_CID_MPEG_BASE
+225)

	)

374 
	#V4L2_CID_MPEG_VIDEO_REPEAT_SEQ_HEADER
 (
V4L2_CID_MPEG_BASE
+226)

	)

376 
	#V4L2_CID_MPEG_VIDEO_H263_I_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+300)

	)

377 
	#V4L2_CID_MPEG_VIDEO_H263_P_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+301)

	)

378 
	#V4L2_CID_MPEG_VIDEO_H263_B_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+302)

	)

379 
	#V4L2_CID_MPEG_VIDEO_H263_MIN_QP
 (
V4L2_CID_MPEG_BASE
+303)

	)

380 
	#V4L2_CID_MPEG_VIDEO_H263_MAX_QP
 (
V4L2_CID_MPEG_BASE
+304)

	)

381 
	#V4L2_CID_MPEG_VIDEO_H264_I_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+350)

	)

382 
	#V4L2_CID_MPEG_VIDEO_H264_P_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+351)

	)

383 
	#V4L2_CID_MPEG_VIDEO_H264_B_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+352)

	)

384 
	#V4L2_CID_MPEG_VIDEO_H264_MIN_QP
 (
V4L2_CID_MPEG_BASE
+353)

	)

385 
	#V4L2_CID_MPEG_VIDEO_H264_MAX_QP
 (
V4L2_CID_MPEG_BASE
+354)

	)

386 
	#V4L2_CID_MPEG_VIDEO_H264_8X8_TRANSFORM
 (
V4L2_CID_MPEG_BASE
+355)

	)

387 
	#V4L2_CID_MPEG_VIDEO_H264_CPB_SIZE
 (
V4L2_CID_MPEG_BASE
+356)

	)

388 
	#V4L2_CID_MPEG_VIDEO_H264_ENTROPY_MODE
 (
V4L2_CID_MPEG_BASE
+357)

	)

389 
	ev4l2_m≥g_video_h264_íå›y_mode
 {

390 
	mV4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CAVLC
 = 0,

391 
	mV4L2_MPEG_VIDEO_H264_ENTROPY_MODE_CABAC
 = 1,

393 
	#V4L2_CID_MPEG_VIDEO_H264_I_PERIOD
 (
V4L2_CID_MPEG_BASE
+358)

	)

394 
	#V4L2_CID_MPEG_VIDEO_H264_LEVEL
 (
V4L2_CID_MPEG_BASE
+359)

	)

395 
	ev4l2_m≥g_video_h264_Àvñ
 {

396 
	mV4L2_MPEG_VIDEO_H264_LEVEL_1_0
 = 0,

397 
	mV4L2_MPEG_VIDEO_H264_LEVEL_1B
 = 1,

398 
	mV4L2_MPEG_VIDEO_H264_LEVEL_1_1
 = 2,

399 
	mV4L2_MPEG_VIDEO_H264_LEVEL_1_2
 = 3,

400 
	mV4L2_MPEG_VIDEO_H264_LEVEL_1_3
 = 4,

401 
	mV4L2_MPEG_VIDEO_H264_LEVEL_2_0
 = 5,

402 
	mV4L2_MPEG_VIDEO_H264_LEVEL_2_1
 = 6,

403 
	mV4L2_MPEG_VIDEO_H264_LEVEL_2_2
 = 7,

404 
	mV4L2_MPEG_VIDEO_H264_LEVEL_3_0
 = 8,

405 
	mV4L2_MPEG_VIDEO_H264_LEVEL_3_1
 = 9,

406 
	mV4L2_MPEG_VIDEO_H264_LEVEL_3_2
 = 10,

407 
	mV4L2_MPEG_VIDEO_H264_LEVEL_4_0
 = 11,

408 
	mV4L2_MPEG_VIDEO_H264_LEVEL_4_1
 = 12,

409 
	mV4L2_MPEG_VIDEO_H264_LEVEL_4_2
 = 13,

410 
	mV4L2_MPEG_VIDEO_H264_LEVEL_5_0
 = 14,

411 
	mV4L2_MPEG_VIDEO_H264_LEVEL_5_1
 = 15,

413 
	#V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_ALPHA
 (
V4L2_CID_MPEG_BASE
+360)

	)

414 
	#V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_BETA
 (
V4L2_CID_MPEG_BASE
+361)

	)

415 
	#V4L2_CID_MPEG_VIDEO_H264_LOOP_FILTER_MODE
 (
V4L2_CID_MPEG_BASE
+362)

	)

416 
	ev4l2_m≥g_video_h264_lo›_fûãr_mode
 {

417 
	mV4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_ENABLED
 = 0,

418 
	mV4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED
 = 1,

419 
	mV4L2_MPEG_VIDEO_H264_LOOP_FILTER_MODE_DISABLED_AT_SLICE_BOUNDARY
 = 2,

421 
	#V4L2_CID_MPEG_VIDEO_H264_PROFILE
 (
V4L2_CID_MPEG_BASE
+363)

	)

422 
	ev4l2_m≥g_video_h264_¥ofûe
 {

423 
	mV4L2_MPEG_VIDEO_H264_PROFILE_BASELINE
 = 0,

424 
	mV4L2_MPEG_VIDEO_H264_PROFILE_CONSTRAINED_BASELINE
 = 1,

425 
	mV4L2_MPEG_VIDEO_H264_PROFILE_MAIN
 = 2,

426 
	mV4L2_MPEG_VIDEO_H264_PROFILE_EXTENDED
 = 3,

427 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH
 = 4,

428 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10
 = 5,

429 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422
 = 6,

430 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_PREDICTIVE
 = 7,

431 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH_10_INTRA
 = 8,

432 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH_422_INTRA
 = 9,

433 
	mV4L2_MPEG_VIDEO_H264_PROFILE_HIGH_444_INTRA
 = 10,

434 
	mV4L2_MPEG_VIDEO_H264_PROFILE_CAVLC_444_INTRA
 = 11,

435 
	mV4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_BASELINE
 = 12,

436 
	mV4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH
 = 13,

437 
	mV4L2_MPEG_VIDEO_H264_PROFILE_SCALABLE_HIGH_INTRA
 = 14,

438 
	mV4L2_MPEG_VIDEO_H264_PROFILE_STEREO_HIGH
 = 15,

439 
	mV4L2_MPEG_VIDEO_H264_PROFILE_MULTIVIEW_HIGH
 = 16,

441 
	#V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_HEIGHT
 (
V4L2_CID_MPEG_BASE
+364)

	)

442 
	#V4L2_CID_MPEG_VIDEO_H264_VUI_EXT_SAR_WIDTH
 (
V4L2_CID_MPEG_BASE
+365)

	)

443 
	#V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_ENABLE
 (
V4L2_CID_MPEG_BASE
+366)

	)

444 
	#V4L2_CID_MPEG_VIDEO_H264_VUI_SAR_IDC
 (
V4L2_CID_MPEG_BASE
+367)

	)

445 
	ev4l2_m≥g_video_h264_vui_ßr_idc
 {

446 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_UNSPECIFIED
 = 0,

447 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_1x1
 = 1,

448 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_12x11
 = 2,

449 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_10x11
 = 3,

450 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_16x11
 = 4,

451 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_40x33
 = 5,

452 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_24x11
 = 6,

453 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_20x11
 = 7,

454 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_32x11
 = 8,

455 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_80x33
 = 9,

456 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_18x11
 = 10,

457 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_15x11
 = 11,

458 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_64x33
 = 12,

459 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_160x99
 = 13,

460 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_4x3
 = 14,

461 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_3x2
 = 15,

462 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_2x1
 = 16,

463 
	mV4L2_MPEG_VIDEO_H264_VUI_SAR_IDC_EXTENDED
 = 17,

465 
	#V4L2_CID_MPEG_VIDEO_H264_SEI_FRAME_PACKING
 (
V4L2_CID_MPEG_BASE
+368)

	)

466 
	#V4L2_CID_MPEG_VIDEO_H264_SEI_FP_CURRENT_FRAME_0
 (
V4L2_CID_MPEG_BASE
+369)

	)

467 
	#V4L2_CID_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE
 (
V4L2_CID_MPEG_BASE
+370)

	)

468 
	ev4l2_m≥g_video_h264_£i_Â_¨øngemít_ty≥
 {

469 
	mV4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_CHECKERBOARD
 = 0,

470 
	mV4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_COLUMN
 = 1,

471 
	mV4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_ROW
 = 2,

472 
	mV4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_SIDE_BY_SIDE
 = 3,

473 
	mV4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TOP_BOTTOM
 = 4,

474 
	mV4L2_MPEG_VIDEO_H264_SEI_FP_ARRANGEMENT_TYPE_TEMPORAL
 = 5,

476 
	#V4L2_CID_MPEG_VIDEO_H264_FMO
 (
V4L2_CID_MPEG_BASE
+371)

	)

477 
	#V4L2_CID_MPEG_VIDEO_H264_FMO_MAP_TYPE
 (
V4L2_CID_MPEG_BASE
+372)

	)

478 
	ev4l2_m≥g_video_h264_fmo_m≠_ty≥
 {

479 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_INTERLEAVED_SLICES
 = 0,

480 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_SCATTERED_SLICES
 = 1,

481 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_FOREGROUND_WITH_LEFT_OVER
 = 2,

482 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_BOX_OUT
 = 3,

483 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_RASTER_SCAN
 = 4,

484 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_WIPE_SCAN
 = 5,

485 
	mV4L2_MPEG_VIDEO_H264_FMO_MAP_TYPE_EXPLICIT
 = 6,

487 
	#V4L2_CID_MPEG_VIDEO_H264_FMO_SLICE_GROUP
 (
V4L2_CID_MPEG_BASE
+373)

	)

488 
	#V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_DIRECTION
 (
V4L2_CID_MPEG_BASE
+374)

	)

489 
	ev4l2_m≥g_video_h264_fmo_ch™ge_dú
 {

490 
	mV4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_RIGHT
 = 0,

491 
	mV4L2_MPEG_VIDEO_H264_FMO_CHANGE_DIR_LEFT
 = 1,

493 
	#V4L2_CID_MPEG_VIDEO_H264_FMO_CHANGE_RATE
 (
V4L2_CID_MPEG_BASE
+375)

	)

494 
	#V4L2_CID_MPEG_VIDEO_H264_FMO_RUN_LENGTH
 (
V4L2_CID_MPEG_BASE
+376)

	)

495 
	#V4L2_CID_MPEG_VIDEO_H264_ASO
 (
V4L2_CID_MPEG_BASE
+377)

	)

496 
	#V4L2_CID_MPEG_VIDEO_H264_ASO_SLICE_ORDER
 (
V4L2_CID_MPEG_BASE
+378)

	)

497 
	#V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING
 (
V4L2_CID_MPEG_BASE
+379)

	)

498 
	#V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_TYPE
 (
V4L2_CID_MPEG_BASE
+380)

	)

499 
	ev4l2_m≥g_video_h264_hõørchiˇl_codög_ty≥
 {

500 
	mV4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_B
 = 0,

501 
	mV4L2_MPEG_VIDEO_H264_HIERARCHICAL_CODING_P
 = 1,

503 
	#V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER
 (
V4L2_CID_MPEG_BASE
+381)

	)

504 
	#V4L2_CID_MPEG_VIDEO_H264_HIERARCHICAL_CODING_LAYER_QP
 (
V4L2_CID_MPEG_BASE
+382)

	)

505 
	#V4L2_CID_MPEG_VIDEO_MPEG4_I_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+400)

	)

506 
	#V4L2_CID_MPEG_VIDEO_MPEG4_P_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+401)

	)

507 
	#V4L2_CID_MPEG_VIDEO_MPEG4_B_FRAME_QP
 (
V4L2_CID_MPEG_BASE
+402)

	)

508 
	#V4L2_CID_MPEG_VIDEO_MPEG4_MIN_QP
 (
V4L2_CID_MPEG_BASE
+403)

	)

509 
	#V4L2_CID_MPEG_VIDEO_MPEG4_MAX_QP
 (
V4L2_CID_MPEG_BASE
+404)

	)

510 
	#V4L2_CID_MPEG_VIDEO_MPEG4_LEVEL
 (
V4L2_CID_MPEG_BASE
+405)

	)

511 
	ev4l2_m≥g_video_m≥g4_Àvñ
 {

512 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_0
 = 0,

513 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_0B
 = 1,

514 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_1
 = 2,

515 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_2
 = 3,

516 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_3
 = 4,

517 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_3B
 = 5,

518 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_4
 = 6,

519 
	mV4L2_MPEG_VIDEO_MPEG4_LEVEL_5
 = 7,

521 
	#V4L2_CID_MPEG_VIDEO_MPEG4_PROFILE
 (
V4L2_CID_MPEG_BASE
+406)

	)

522 
	ev4l2_m≥g_video_m≥g4_¥ofûe
 {

523 
	mV4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE
 = 0,

524 
	mV4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_SIMPLE
 = 1,

525 
	mV4L2_MPEG_VIDEO_MPEG4_PROFILE_CORE
 = 2,

526 
	mV4L2_MPEG_VIDEO_MPEG4_PROFILE_SIMPLE_SCALABLE
 = 3,

527 
	mV4L2_MPEG_VIDEO_MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY
 = 4,

529 
	#V4L2_CID_MPEG_VIDEO_MPEG4_QPEL
 (
V4L2_CID_MPEG_BASE
+407)

	)

535 
	#V4L2_CID_MPEG_VIDEO_VPX_NUM_PARTITIONS
 (
V4L2_CID_MPEG_BASE
+500)

	)

536 
	ev4l2_vp8_num_∑πôi⁄s
 {

537 
	mV4L2_CID_MPEG_VIDEO_VPX_1_PARTITION
 = 0,

538 
	mV4L2_CID_MPEG_VIDEO_VPX_2_PARTITIONS
 = 1,

539 
	mV4L2_CID_MPEG_VIDEO_VPX_4_PARTITIONS
 = 2,

540 
	mV4L2_CID_MPEG_VIDEO_VPX_8_PARTITIONS
 = 3,

542 
	#V4L2_CID_MPEG_VIDEO_VPX_IMD_DISABLE_4X4
 (
V4L2_CID_MPEG_BASE
+501)

	)

543 
	#V4L2_CID_MPEG_VIDEO_VPX_NUM_REF_FRAMES
 (
V4L2_CID_MPEG_BASE
+502)

	)

544 
	ev4l2_vp8_num_ªf_‰ames
 {

545 
	mV4L2_CID_MPEG_VIDEO_VPX_1_REF_FRAME
 = 0,

546 
	mV4L2_CID_MPEG_VIDEO_VPX_2_REF_FRAME
 = 1,

547 
	mV4L2_CID_MPEG_VIDEO_VPX_3_REF_FRAME
 = 2,

549 
	#V4L2_CID_MPEG_VIDEO_VPX_FILTER_LEVEL
 (
V4L2_CID_MPEG_BASE
+503)

	)

550 
	#V4L2_CID_MPEG_VIDEO_VPX_FILTER_SHARPNESS
 (
V4L2_CID_MPEG_BASE
+504)

	)

551 
	#V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_REF_PERIOD
 (
V4L2_CID_MPEG_BASE
+505)

	)

552 
	#V4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_SEL
 (
V4L2_CID_MPEG_BASE
+506)

	)

553 
	ev4l2_vp8_gﬁdí_‰ame_£l
 {

554 
	mV4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_PREV
 = 0,

555 
	mV4L2_CID_MPEG_VIDEO_VPX_GOLDEN_FRAME_USE_REF_PERIOD
 = 1,

559 
	#V4L2_CID_MPEG_CX2341X_BASE
 (
V4L2_CTRL_CLASS_MPEG
 | 0x1000)

	)

560 
	#V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE
 (
V4L2_CID_MPEG_CX2341X_BASE
+0)

	)

561 
	ev4l2_m≥g_cx2341x_video_•©ül_fûãr_mode
 {

562 
	mV4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_MANUAL
 = 0,

563 
	mV4L2_MPEG_CX2341X_VIDEO_SPATIAL_FILTER_MODE_AUTO
 = 1,

565 
	#V4L2_CID_MPEG_CX2341X_VIDEO_SPATIAL_FILTER
 (
V4L2_CID_MPEG_CX2341X_BASE
+1)

	)

566 
	#V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE
 (
V4L2_CID_MPEG_CX2341X_BASE
+2)

	)

567 
	ev4l2_m≥g_cx2341x_video_luma_•©ül_fûãr_ty≥
 {

568 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_OFF
 = 0,

569 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_HOR
 = 1,

570 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_1D_VERT
 = 2,

571 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_HV_SEPARABLE
 = 3,

572 
	mV4L2_MPEG_CX2341X_VIDEO_LUMA_SPATIAL_FILTER_TYPE_2D_SYM_NON_SEPARABLE
 = 4,

574 
	#V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE
 (
V4L2_CID_MPEG_CX2341X_BASE
+3)

	)

575 
	ev4l2_m≥g_cx2341x_video_chroma_•©ül_fûãr_ty≥
 {

576 
	mV4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_OFF
 = 0,

577 
	mV4L2_MPEG_CX2341X_VIDEO_CHROMA_SPATIAL_FILTER_TYPE_1D_HOR
 = 1,

579 
	#V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE
 (
V4L2_CID_MPEG_CX2341X_BASE
+4)

	)

580 
	ev4l2_m≥g_cx2341x_video_ãmp‹Æ_fûãr_mode
 {

581 
	mV4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_MANUAL
 = 0,

582 
	mV4L2_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER_MODE_AUTO
 = 1,

584 
	#V4L2_CID_MPEG_CX2341X_VIDEO_TEMPORAL_FILTER
 (
V4L2_CID_MPEG_CX2341X_BASE
+5)

	)

585 
	#V4L2_CID_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE
 (
V4L2_CID_MPEG_CX2341X_BASE
+6)

	)

586 
	ev4l2_m≥g_cx2341x_video_medün_fûãr_ty≥
 {

587 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_OFF
 = 0,

588 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR
 = 1,

589 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_VERT
 = 2,

590 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_HOR_VERT
 = 3,

591 
	mV4L2_MPEG_CX2341X_VIDEO_MEDIAN_FILTER_TYPE_DIAG
 = 4,

593 
	#V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_BOTTOM
 (
V4L2_CID_MPEG_CX2341X_BASE
+7)

	)

594 
	#V4L2_CID_MPEG_CX2341X_VIDEO_LUMA_MEDIAN_FILTER_TOP
 (
V4L2_CID_MPEG_CX2341X_BASE
+8)

	)

595 
	#V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_BOTTOM
 (
V4L2_CID_MPEG_CX2341X_BASE
+9)

	)

596 
	#V4L2_CID_MPEG_CX2341X_VIDEO_CHROMA_MEDIAN_FILTER_TOP
 (
V4L2_CID_MPEG_CX2341X_BASE
+10)

	)

597 
	#V4L2_CID_MPEG_CX2341X_STREAM_INSERT_NAV_PACKETS
 (
V4L2_CID_MPEG_CX2341X_BASE
+11)

	)

600 
	#V4L2_CID_MPEG_MFC51_BASE
 (
V4L2_CTRL_CLASS_MPEG
 | 0x1100)

	)

602 
	#V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY
 (
V4L2_CID_MPEG_MFC51_BASE
+0)

	)

603 
	#V4L2_CID_MPEG_MFC51_VIDEO_DECODER_H264_DISPLAY_DELAY_ENABLE
 (
V4L2_CID_MPEG_MFC51_BASE
+1)

	)

604 
	#V4L2_CID_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE
 (
V4L2_CID_MPEG_MFC51_BASE
+2)

	)

605 
	ev4l2_m≥g_mfc51_video_‰ame_skù_mode
 {

606 
	mV4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_DISABLED
 = 0,

607 
	mV4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_LEVEL_LIMIT
 = 1,

608 
	mV4L2_MPEG_MFC51_VIDEO_FRAME_SKIP_MODE_BUF_LIMIT
 = 2,

610 
	#V4L2_CID_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE
 (
V4L2_CID_MPEG_MFC51_BASE
+3)

	)

611 
	ev4l2_m≥g_mfc51_video_f‹˚_‰ame_ty≥
 {

612 
	mV4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_DISABLED
 = 0,

613 
	mV4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_I_FRAME
 = 1,

614 
	mV4L2_MPEG_MFC51_VIDEO_FORCE_FRAME_TYPE_NOT_CODED
 = 2,

616 
	#V4L2_CID_MPEG_MFC51_VIDEO_PADDING
 (
V4L2_CID_MPEG_MFC51_BASE
+4)

	)

617 
	#V4L2_CID_MPEG_MFC51_VIDEO_PADDING_YUV
 (
V4L2_CID_MPEG_MFC51_BASE
+5)

	)

618 
	#V4L2_CID_MPEG_MFC51_VIDEO_RC_FIXED_TARGET_BIT
 (
V4L2_CID_MPEG_MFC51_BASE
+6)

	)

619 
	#V4L2_CID_MPEG_MFC51_VIDEO_RC_REACTION_COEFF
 (
V4L2_CID_MPEG_MFC51_BASE
+7)

	)

620 
	#V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_ACTIVITY
 (
V4L2_CID_MPEG_MFC51_BASE
+50)

	)

621 
	#V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_DARK
 (
V4L2_CID_MPEG_MFC51_BASE
+51)

	)

622 
	#V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_SMOOTH
 (
V4L2_CID_MPEG_MFC51_BASE
+52)

	)

623 
	#V4L2_CID_MPEG_MFC51_VIDEO_H264_ADAPTIVE_RC_STATIC
 (
V4L2_CID_MPEG_MFC51_BASE
+53)

	)

624 
	#V4L2_CID_MPEG_MFC51_VIDEO_H264_NUM_REF_PIC_FOR_P
 (
V4L2_CID_MPEG_MFC51_BASE
+54)

	)

629 
	#V4L2_CID_CAMERA_CLASS_BASE
 (
V4L2_CTRL_CLASS_CAMERA
 | 0x900)

	)

630 
	#V4L2_CID_CAMERA_CLASS
 (
V4L2_CTRL_CLASS_CAMERA
 | 1)

	)

632 
	#V4L2_CID_EXPOSURE_AUTO
 (
V4L2_CID_CAMERA_CLASS_BASE
+1)

	)

633 
	ev4l2_exposuª_auto_ty≥
 {

634 
	mV4L2_EXPOSURE_AUTO
 = 0,

635 
	mV4L2_EXPOSURE_MANUAL
 = 1,

636 
	mV4L2_EXPOSURE_SHUTTER_PRIORITY
 = 2,

637 
	mV4L2_EXPOSURE_APERTURE_PRIORITY
 = 3

639 
	#V4L2_CID_EXPOSURE_ABSOLUTE
 (
V4L2_CID_CAMERA_CLASS_BASE
+2)

	)

640 
	#V4L2_CID_EXPOSURE_AUTO_PRIORITY
 (
V4L2_CID_CAMERA_CLASS_BASE
+3)

	)

642 
	#V4L2_CID_PAN_RELATIVE
 (
V4L2_CID_CAMERA_CLASS_BASE
+4)

	)

643 
	#V4L2_CID_TILT_RELATIVE
 (
V4L2_CID_CAMERA_CLASS_BASE
+5)

	)

644 
	#V4L2_CID_PAN_RESET
 (
V4L2_CID_CAMERA_CLASS_BASE
+6)

	)

645 
	#V4L2_CID_TILT_RESET
 (
V4L2_CID_CAMERA_CLASS_BASE
+7)

	)

647 
	#V4L2_CID_PAN_ABSOLUTE
 (
V4L2_CID_CAMERA_CLASS_BASE
+8)

	)

648 
	#V4L2_CID_TILT_ABSOLUTE
 (
V4L2_CID_CAMERA_CLASS_BASE
+9)

	)

650 
	#V4L2_CID_FOCUS_ABSOLUTE
 (
V4L2_CID_CAMERA_CLASS_BASE
+10)

	)

651 
	#V4L2_CID_FOCUS_RELATIVE
 (
V4L2_CID_CAMERA_CLASS_BASE
+11)

	)

652 
	#V4L2_CID_FOCUS_AUTO
 (
V4L2_CID_CAMERA_CLASS_BASE
+12)

	)

654 
	#V4L2_CID_ZOOM_ABSOLUTE
 (
V4L2_CID_CAMERA_CLASS_BASE
+13)

	)

655 
	#V4L2_CID_ZOOM_RELATIVE
 (
V4L2_CID_CAMERA_CLASS_BASE
+14)

	)

656 
	#V4L2_CID_ZOOM_CONTINUOUS
 (
V4L2_CID_CAMERA_CLASS_BASE
+15)

	)

658 
	#V4L2_CID_PRIVACY
 (
V4L2_CID_CAMERA_CLASS_BASE
+16)

	)

660 
	#V4L2_CID_IRIS_ABSOLUTE
 (
V4L2_CID_CAMERA_CLASS_BASE
+17)

	)

661 
	#V4L2_CID_IRIS_RELATIVE
 (
V4L2_CID_CAMERA_CLASS_BASE
+18)

	)

663 
	#V4L2_CID_AUTO_EXPOSURE_BIAS
 (
V4L2_CID_CAMERA_CLASS_BASE
+19)

	)

665 
	#V4L2_CID_AUTO_N_PRESET_WHITE_BALANCE
 (
V4L2_CID_CAMERA_CLASS_BASE
+20)

	)

666 
	ev4l2_auto_n_¥e£t_whôe_bÆ™˚
 {

667 
	mV4L2_WHITE_BALANCE_MANUAL
 = 0,

668 
	mV4L2_WHITE_BALANCE_AUTO
 = 1,

669 
	mV4L2_WHITE_BALANCE_INCANDESCENT
 = 2,

670 
	mV4L2_WHITE_BALANCE_FLUORESCENT
 = 3,

671 
	mV4L2_WHITE_BALANCE_FLUORESCENT_H
 = 4,

672 
	mV4L2_WHITE_BALANCE_HORIZON
 = 5,

673 
	mV4L2_WHITE_BALANCE_DAYLIGHT
 = 6,

674 
	mV4L2_WHITE_BALANCE_FLASH
 = 7,

675 
	mV4L2_WHITE_BALANCE_CLOUDY
 = 8,

676 
	mV4L2_WHITE_BALANCE_SHADE
 = 9,

679 
	#V4L2_CID_WIDE_DYNAMIC_RANGE
 (
V4L2_CID_CAMERA_CLASS_BASE
+21)

	)

680 
	#V4L2_CID_IMAGE_STABILIZATION
 (
V4L2_CID_CAMERA_CLASS_BASE
+22)

	)

682 
	#V4L2_CID_ISO_SENSITIVITY
 (
V4L2_CID_CAMERA_CLASS_BASE
+23)

	)

683 
	#V4L2_CID_ISO_SENSITIVITY_AUTO
 (
V4L2_CID_CAMERA_CLASS_BASE
+24)

	)

684 
	ev4l2_iso_£nsôivôy_auto_ty≥
 {

685 
	mV4L2_ISO_SENSITIVITY_MANUAL
 = 0,

686 
	mV4L2_ISO_SENSITIVITY_AUTO
 = 1,

689 
	#V4L2_CID_EXPOSURE_METERING
 (
V4L2_CID_CAMERA_CLASS_BASE
+25)

	)

690 
	ev4l2_exposuª_mëîög
 {

691 
	mV4L2_EXPOSURE_METERING_AVERAGE
 = 0,

692 
	mV4L2_EXPOSURE_METERING_CENTER_WEIGHTED
 = 1,

693 
	mV4L2_EXPOSURE_METERING_SPOT
 = 2,

694 
	mV4L2_EXPOSURE_METERING_MATRIX
 = 3,

697 
	#V4L2_CID_SCENE_MODE
 (
V4L2_CID_CAMERA_CLASS_BASE
+26)

	)

698 
	ev4l2_s˚√_mode
 {

699 
	mV4L2_SCENE_MODE_NONE
 = 0,

700 
	mV4L2_SCENE_MODE_BACKLIGHT
 = 1,

701 
	mV4L2_SCENE_MODE_BEACH_SNOW
 = 2,

702 
	mV4L2_SCENE_MODE_CANDLE_LIGHT
 = 3,

703 
	mV4L2_SCENE_MODE_DAWN_DUSK
 = 4,

704 
	mV4L2_SCENE_MODE_FALL_COLORS
 = 5,

705 
	mV4L2_SCENE_MODE_FIREWORKS
 = 6,

706 
	mV4L2_SCENE_MODE_LANDSCAPE
 = 7,

707 
	mV4L2_SCENE_MODE_NIGHT
 = 8,

708 
	mV4L2_SCENE_MODE_PARTY_INDOOR
 = 9,

709 
	mV4L2_SCENE_MODE_PORTRAIT
 = 10,

710 
	mV4L2_SCENE_MODE_SPORTS
 = 11,

711 
	mV4L2_SCENE_MODE_SUNSET
 = 12,

712 
	mV4L2_SCENE_MODE_TEXT
 = 13,

715 
	#V4L2_CID_3A_LOCK
 (
V4L2_CID_CAMERA_CLASS_BASE
+27)

	)

716 
	#V4L2_LOCK_EXPOSURE
 (1 << 0)

	)

717 
	#V4L2_LOCK_WHITE_BALANCE
 (1 << 1)

	)

718 
	#V4L2_LOCK_FOCUS
 (1 << 2)

	)

720 
	#V4L2_CID_AUTO_FOCUS_START
 (
V4L2_CID_CAMERA_CLASS_BASE
+28)

	)

721 
	#V4L2_CID_AUTO_FOCUS_STOP
 (
V4L2_CID_CAMERA_CLASS_BASE
+29)

	)

722 
	#V4L2_CID_AUTO_FOCUS_STATUS
 (
V4L2_CID_CAMERA_CLASS_BASE
+30)

	)

723 
	#V4L2_AUTO_FOCUS_STATUS_IDLE
 (0 << 0)

	)

724 
	#V4L2_AUTO_FOCUS_STATUS_BUSY
 (1 << 0)

	)

725 
	#V4L2_AUTO_FOCUS_STATUS_REACHED
 (1 << 1)

	)

726 
	#V4L2_AUTO_FOCUS_STATUS_FAILED
 (1 << 2)

	)

728 
	#V4L2_CID_AUTO_FOCUS_RANGE
 (
V4L2_CID_CAMERA_CLASS_BASE
+31)

	)

729 
	ev4l2_auto_focus_ønge
 {

730 
	mV4L2_AUTO_FOCUS_RANGE_AUTO
 = 0,

731 
	mV4L2_AUTO_FOCUS_RANGE_NORMAL
 = 1,

732 
	mV4L2_AUTO_FOCUS_RANGE_MACRO
 = 2,

733 
	mV4L2_AUTO_FOCUS_RANGE_INFINITY
 = 3,

739 
	#V4L2_CID_FM_TX_CLASS_BASE
 (
V4L2_CTRL_CLASS_FM_TX
 | 0x900)

	)

740 
	#V4L2_CID_FM_TX_CLASS
 (
V4L2_CTRL_CLASS_FM_TX
 | 1)

	)

742 
	#V4L2_CID_RDS_TX_DEVIATION
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 1)

	)

743 
	#V4L2_CID_RDS_TX_PI
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 2)

	)

744 
	#V4L2_CID_RDS_TX_PTY
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 3)

	)

745 
	#V4L2_CID_RDS_TX_PS_NAME
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 5)

	)

746 
	#V4L2_CID_RDS_TX_RADIO_TEXT
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 6)

	)

748 
	#V4L2_CID_AUDIO_LIMITER_ENABLED
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 64)

	)

749 
	#V4L2_CID_AUDIO_LIMITER_RELEASE_TIME
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 65)

	)

750 
	#V4L2_CID_AUDIO_LIMITER_DEVIATION
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 66)

	)

752 
	#V4L2_CID_AUDIO_COMPRESSION_ENABLED
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 80)

	)

753 
	#V4L2_CID_AUDIO_COMPRESSION_GAIN
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 81)

	)

754 
	#V4L2_CID_AUDIO_COMPRESSION_THRESHOLD
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 82)

	)

755 
	#V4L2_CID_AUDIO_COMPRESSION_ATTACK_TIME
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 83)

	)

756 
	#V4L2_CID_AUDIO_COMPRESSION_RELEASE_TIME
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 84)

	)

758 
	#V4L2_CID_PILOT_TONE_ENABLED
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 96)

	)

759 
	#V4L2_CID_PILOT_TONE_DEVIATION
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 97)

	)

760 
	#V4L2_CID_PILOT_TONE_FREQUENCY
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 98)

	)

762 
	#V4L2_CID_TUNE_PREEMPHASIS
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 112)

	)

763 
	ev4l2_¥ìmphasis
 {

764 
	mV4L2_PREEMPHASIS_DISABLED
 = 0,

765 
	mV4L2_PREEMPHASIS_50_uS
 = 1,

766 
	mV4L2_PREEMPHASIS_75_uS
 = 2,

768 
	#V4L2_CID_TUNE_POWER_LEVEL
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 113)

	)

769 
	#V4L2_CID_TUNE_ANTENNA_CAPACITOR
 (
V4L2_CID_FM_TX_CLASS_BASE
 + 114)

	)

774 
	#V4L2_CID_FLASH_CLASS_BASE
 (
V4L2_CTRL_CLASS_FLASH
 | 0x900)

	)

775 
	#V4L2_CID_FLASH_CLASS
 (
V4L2_CTRL_CLASS_FLASH
 | 1)

	)

777 
	#V4L2_CID_FLASH_LED_MODE
 (
V4L2_CID_FLASH_CLASS_BASE
 + 1)

	)

778 
	ev4l2_Êash_Àd_mode
 {

779 
	mV4L2_FLASH_LED_MODE_NONE
,

780 
	mV4L2_FLASH_LED_MODE_FLASH
,

781 
	mV4L2_FLASH_LED_MODE_TORCH
,

784 
	#V4L2_CID_FLASH_STROBE_SOURCE
 (
V4L2_CID_FLASH_CLASS_BASE
 + 2)

	)

785 
	ev4l2_Êash_°robe_sour˚
 {

786 
	mV4L2_FLASH_STROBE_SOURCE_SOFTWARE
,

787 
	mV4L2_FLASH_STROBE_SOURCE_EXTERNAL
,

790 
	#V4L2_CID_FLASH_STROBE
 (
V4L2_CID_FLASH_CLASS_BASE
 + 3)

	)

791 
	#V4L2_CID_FLASH_STROBE_STOP
 (
V4L2_CID_FLASH_CLASS_BASE
 + 4)

	)

792 
	#V4L2_CID_FLASH_STROBE_STATUS
 (
V4L2_CID_FLASH_CLASS_BASE
 + 5)

	)

794 
	#V4L2_CID_FLASH_TIMEOUT
 (
V4L2_CID_FLASH_CLASS_BASE
 + 6)

	)

795 
	#V4L2_CID_FLASH_INTENSITY
 (
V4L2_CID_FLASH_CLASS_BASE
 + 7)

	)

796 
	#V4L2_CID_FLASH_TORCH_INTENSITY
 (
V4L2_CID_FLASH_CLASS_BASE
 + 8)

	)

797 
	#V4L2_CID_FLASH_INDICATOR_INTENSITY
 (
V4L2_CID_FLASH_CLASS_BASE
 + 9)

	)

799 
	#V4L2_CID_FLASH_FAULT
 (
V4L2_CID_FLASH_CLASS_BASE
 + 10)

	)

800 
	#V4L2_FLASH_FAULT_OVER_VOLTAGE
 (1 << 0)

	)

801 
	#V4L2_FLASH_FAULT_TIMEOUT
 (1 << 1)

	)

802 
	#V4L2_FLASH_FAULT_OVER_TEMPERATURE
 (1 << 2)

	)

803 
	#V4L2_FLASH_FAULT_SHORT_CIRCUIT
 (1 << 3)

	)

804 
	#V4L2_FLASH_FAULT_OVER_CURRENT
 (1 << 4)

	)

805 
	#V4L2_FLASH_FAULT_INDICATOR
 (1 << 5)

	)

807 
	#V4L2_CID_FLASH_CHARGE
 (
V4L2_CID_FLASH_CLASS_BASE
 + 11)

	)

808 
	#V4L2_CID_FLASH_READY
 (
V4L2_CID_FLASH_CLASS_BASE
 + 12)

	)

813 
	#V4L2_CID_JPEG_CLASS_BASE
 (
V4L2_CTRL_CLASS_JPEG
 | 0x900)

	)

814 
	#V4L2_CID_JPEG_CLASS
 (
V4L2_CTRL_CLASS_JPEG
 | 1)

	)

816 
	#V4L2_CID_JPEG_CHROMA_SUBSAMPLING
 (
V4L2_CID_JPEG_CLASS_BASE
 + 1)

	)

817 
	ev4l2_j≥g_chroma_subßm∂ög
 {

818 
	mV4L2_JPEG_CHROMA_SUBSAMPLING_444
 = 0,

819 
	mV4L2_JPEG_CHROMA_SUBSAMPLING_422
 = 1,

820 
	mV4L2_JPEG_CHROMA_SUBSAMPLING_420
 = 2,

821 
	mV4L2_JPEG_CHROMA_SUBSAMPLING_411
 = 3,

822 
	mV4L2_JPEG_CHROMA_SUBSAMPLING_410
 = 4,

823 
	mV4L2_JPEG_CHROMA_SUBSAMPLING_GRAY
 = 5,

825 
	#V4L2_CID_JPEG_RESTART_INTERVAL
 (
V4L2_CID_JPEG_CLASS_BASE
 + 2)

	)

826 
	#V4L2_CID_JPEG_COMPRESSION_QUALITY
 (
V4L2_CID_JPEG_CLASS_BASE
 + 3)

	)

828 
	#V4L2_CID_JPEG_ACTIVE_MARKER
 (
V4L2_CID_JPEG_CLASS_BASE
 + 4)

	)

829 
	#V4L2_JPEG_ACTIVE_MARKER_APP0
 (1 << 0)

	)

830 
	#V4L2_JPEG_ACTIVE_MARKER_APP1
 (1 << 1)

	)

831 
	#V4L2_JPEG_ACTIVE_MARKER_COM
 (1 << 16)

	)

832 
	#V4L2_JPEG_ACTIVE_MARKER_DQT
 (1 << 17)

	)

833 
	#V4L2_JPEG_ACTIVE_MARKER_DHT
 (1 << 18)

	)

837 
	#V4L2_CID_IMAGE_SOURCE_CLASS_BASE
 (
V4L2_CTRL_CLASS_IMAGE_SOURCE
 | 0x900)

	)

838 
	#V4L2_CID_IMAGE_SOURCE_CLASS
 (
V4L2_CTRL_CLASS_IMAGE_SOURCE
 | 1)

	)

840 
	#V4L2_CID_VBLANK
 (
V4L2_CID_IMAGE_SOURCE_CLASS_BASE
 + 1)

	)

841 
	#V4L2_CID_HBLANK
 (
V4L2_CID_IMAGE_SOURCE_CLASS_BASE
 + 2)

	)

842 
	#V4L2_CID_ANALOGUE_GAIN
 (
V4L2_CID_IMAGE_SOURCE_CLASS_BASE
 + 3)

	)

847 
	#V4L2_CID_IMAGE_PROC_CLASS_BASE
 (
V4L2_CTRL_CLASS_IMAGE_PROC
 | 0x900)

	)

848 
	#V4L2_CID_IMAGE_PROC_CLASS
 (
V4L2_CTRL_CLASS_IMAGE_PROC
 | 1)

	)

850 
	#V4L2_CID_LINK_FREQ
 (
V4L2_CID_IMAGE_PROC_CLASS_BASE
 + 1)

	)

851 
	#V4L2_CID_PIXEL_RATE
 (
V4L2_CID_IMAGE_PROC_CLASS_BASE
 + 2)

	)

852 
	#V4L2_CID_TEST_PATTERN
 (
V4L2_CID_IMAGE_PROC_CLASS_BASE
 + 3)

	)

856 
	#V4L2_CID_DV_CLASS_BASE
 (
V4L2_CTRL_CLASS_DV
 | 0x900)

	)

857 
	#V4L2_CID_DV_CLASS
 (
V4L2_CTRL_CLASS_DV
 | 1)

	)

859 
	#V4L2_CID_DV_TX_HOTPLUG
 (
V4L2_CID_DV_CLASS_BASE
 + 1)

	)

860 
	#V4L2_CID_DV_TX_RXSENSE
 (
V4L2_CID_DV_CLASS_BASE
 + 2)

	)

861 
	#V4L2_CID_DV_TX_EDID_PRESENT
 (
V4L2_CID_DV_CLASS_BASE
 + 3)

	)

862 
	#V4L2_CID_DV_TX_MODE
 (
V4L2_CID_DV_CLASS_BASE
 + 4)

	)

863 
	ev4l2_dv_tx_mode
 {

864 
	mV4L2_DV_TX_MODE_DVI_D
 = 0,

865 
	mV4L2_DV_TX_MODE_HDMI
 = 1,

867 
	#V4L2_CID_DV_TX_RGB_RANGE
 (
V4L2_CID_DV_CLASS_BASE
 + 5)

	)

868 
	ev4l2_dv_rgb_ønge
 {

869 
	mV4L2_DV_RGB_RANGE_AUTO
 = 0,

870 
	mV4L2_DV_RGB_RANGE_LIMITED
 = 1,

871 
	mV4L2_DV_RGB_RANGE_FULL
 = 2,

874 
	#V4L2_CID_DV_RX_POWER_PRESENT
 (
V4L2_CID_DV_CLASS_BASE
 + 100)

	)

875 
	#V4L2_CID_DV_RX_RGB_RANGE
 (
V4L2_CID_DV_CLASS_BASE
 + 101)

	)

877 
	#V4L2_CID_FM_RX_CLASS_BASE
 (
V4L2_CTRL_CLASS_FM_RX
 | 0x900)

	)

878 
	#V4L2_CID_FM_RX_CLASS
 (
V4L2_CTRL_CLASS_FM_RX
 | 1)

	)

880 
	#V4L2_CID_TUNE_DEEMPHASIS
 (
V4L2_CID_FM_RX_CLASS_BASE
 + 1)

	)

881 
	ev4l2_dìmphasis
 {

882 
	mV4L2_DEEMPHASIS_DISABLED
 = 
V4L2_PREEMPHASIS_DISABLED
,

883 
	mV4L2_DEEMPHASIS_50_uS
 = 
V4L2_PREEMPHASIS_50_uS
,

884 
	mV4L2_DEEMPHASIS_75_uS
 = 
V4L2_PREEMPHASIS_75_uS
,

887 
	#V4L2_CID_RDS_RECEPTION
 (
V4L2_CID_FM_RX_CLASS_BASE
 + 2)

	)

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/wch¨.h
>

27 
	~<bôs/w‹dsize.h
>

34 #i‚de‡
__öt8_t_deföed


35 
	#__öt8_t_deföed


	)

36 sig√d 
	töt8_t
;

37 
	töt16_t
;

38 
	töt32_t
;

39 #i‡
__WORDSIZE
 == 64

40 
	töt64_t
;

42 
__exãnsi⁄__


43 
	töt64_t
;

48 
	tuöt8_t
;

49 
	tuöt16_t
;

50 #i‚de‡
__uöt32_t_deföed


51 
	tuöt32_t
;

52 
	#__uöt32_t_deföed


	)

54 #i‡
__WORDSIZE
 == 64

55 
	tuöt64_t
;

57 
__exãnsi⁄__


58 
	tuöt64_t
;

65 sig√d 
	töt_Àa°8_t
;

66 
	töt_Àa°16_t
;

67 
	töt_Àa°32_t
;

68 #i‡
__WORDSIZE
 == 64

69 
	töt_Àa°64_t
;

71 
__exãnsi⁄__


72 
	töt_Àa°64_t
;

76 
	tuöt_Àa°8_t
;

77 
	tuöt_Àa°16_t
;

78 
	tuöt_Àa°32_t
;

79 #i‡
__WORDSIZE
 == 64

80 
	tuöt_Àa°64_t
;

82 
__exãnsi⁄__


83 
	tuöt_Àa°64_t
;

90 sig√d 
	töt_Á°8_t
;

91 #i‡
__WORDSIZE
 == 64

92 
	töt_Á°16_t
;

93 
	töt_Á°32_t
;

94 
	töt_Á°64_t
;

96 
	töt_Á°16_t
;

97 
	töt_Á°32_t
;

98 
__exãnsi⁄__


99 
	töt_Á°64_t
;

103 
	tuöt_Á°8_t
;

104 #i‡
__WORDSIZE
 == 64

105 
	tuöt_Á°16_t
;

106 
	tuöt_Á°32_t
;

107 
	tuöt_Á°64_t
;

109 
	tuöt_Á°16_t
;

110 
	tuöt_Á°32_t
;

111 
__exãnsi⁄__


112 
	tuöt_Á°64_t
;

117 #i‡
__WORDSIZE
 == 64

118 #i‚de‡
__öçå_t_deföed


119 
	töçå_t
;

120 
	#__öçå_t_deföed


	)

122 
	tuöçå_t
;

124 #i‚de‡
__öçå_t_deföed


125 
	töçå_t
;

126 
	#__öçå_t_deföed


	)

128 
	tuöçå_t
;

133 #i‡
__WORDSIZE
 == 64

134 
	tötmax_t
;

135 
	tuötmax_t
;

137 
__exãnsi⁄__


138 
	tötmax_t
;

139 
__exãnsi⁄__


140 
	tuötmax_t
;

144 #i‡
__WORDSIZE
 == 64

145 
	#__INT64_C
(
c
Ë¯## 
L


	)

146 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

148 
	#__INT64_C
(
c
Ë¯## 
LL


	)

149 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

155 
	#INT8_MIN
 (-128)

	)

156 
	#INT16_MIN
 (-32767-1)

	)

157 
	#INT32_MIN
 (-2147483647-1)

	)

158 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

160 
	#INT8_MAX
 (127)

	)

161 
	#INT16_MAX
 (32767)

	)

162 
	#INT32_MAX
 (2147483647)

	)

163 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

166 
	#UINT8_MAX
 (255)

	)

167 
	#UINT16_MAX
 (65535)

	)

168 
	#UINT32_MAX
 (4294967295U)

	)

169 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

173 
	#INT_LEAST8_MIN
 (-128)

	)

174 
	#INT_LEAST16_MIN
 (-32767-1)

	)

175 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

176 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

178 
	#INT_LEAST8_MAX
 (127)

	)

179 
	#INT_LEAST16_MAX
 (32767)

	)

180 
	#INT_LEAST32_MAX
 (2147483647)

	)

181 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

184 
	#UINT_LEAST8_MAX
 (255)

	)

185 
	#UINT_LEAST16_MAX
 (65535)

	)

186 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

187 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

191 
	#INT_FAST8_MIN
 (-128)

	)

192 #i‡
__WORDSIZE
 == 64

193 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

194 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

196 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

197 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

199 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

201 
	#INT_FAST8_MAX
 (127)

	)

202 #i‡
__WORDSIZE
 == 64

203 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

204 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

206 
	#INT_FAST16_MAX
 (2147483647)

	)

207 
	#INT_FAST32_MAX
 (2147483647)

	)

209 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

212 
	#UINT_FAST8_MAX
 (255)

	)

213 #i‡
__WORDSIZE
 == 64

214 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

215 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

217 
	#UINT_FAST16_MAX
 (4294967295U)

	)

218 
	#UINT_FAST32_MAX
 (4294967295U)

	)

220 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

224 #i‡
__WORDSIZE
 == 64

225 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

226 
	#INTPTR_MAX
 (9223372036854775807L)

	)

227 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

229 
	#INTPTR_MIN
 (-2147483647-1)

	)

230 
	#INTPTR_MAX
 (2147483647)

	)

231 
	#UINTPTR_MAX
 (4294967295U)

	)

236 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

238 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

241 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

247 #i‡
__WORDSIZE
 == 64

248 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

249 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

251 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

252 
	#PTRDIFF_MAX
 (2147483647)

	)

256 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

257 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

260 #i‡
__WORDSIZE
 == 64

261 
	#SIZE_MAX
 (18446744073709551615UL)

	)

263 
	#SIZE_MAX
 (4294967295U)

	)

267 #i‚de‡
WCHAR_MIN


269 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

270 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

274 
	#WINT_MIN
 (0u)

	)

275 
	#WINT_MAX
 (4294967295u)

	)

278 
	#INT8_C
(
c
Ë
	)
c

279 
	#INT16_C
(
c
Ë
	)
c

280 
	#INT32_C
(
c
Ë
	)
c

281 #i‡
__WORDSIZE
 == 64

282 
	#INT64_C
(
c
Ë¯## 
L


	)

284 
	#INT64_C
(
c
Ë¯## 
LL


	)

288 
	#UINT8_C
(
c
Ë
	)
c

289 
	#UINT16_C
(
c
Ë
	)
c

290 
	#UINT32_C
(
c
Ë¯## 
U


	)

291 #i‡
__WORDSIZE
 == 64

292 
	#UINT64_C
(
c
Ë¯## 
UL


	)

294 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

298 #i‡
__WORDSIZE
 == 64

299 
	#INTMAX_C
(
c
Ë¯## 
L


	)

300 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

302 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

303 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/sys/select.h

21 #i‚de‡
_SYS_SELECT_H


22 
	#_SYS_SELECT_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

30 
	~<bôs/£À˘.h
>

33 
	~<bôs/sig£t.h
>

35 #i‚de‡
__sig£t_t_deföed


36 
	#__sig£t_t_deföed


	)

37 
__sig£t_t
 
	tsig£t_t
;

41 
	#__√ed_time_t


	)

42 
	#__√ed_time•ec


	)

43 
	~<time.h
>

44 
	#__√ed_timevÆ


	)

45 
	~<bôs/time.h
>

47 #i‚de‡
__su£c⁄ds_t_deföed


48 
__su£c⁄ds_t
 
	tsu£c⁄ds_t
;

49 
	#__su£c⁄ds_t_deföed


	)

54 
	t__fd_mask
;

57 #unde‡
__NFDBITS


59 
	#__NFDBITS
 (8 * (Ë (
__fd_mask
))

	)

60 
	#__FD_ELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

61 
	#__FD_MASK
(
d
Ë((
__fd_mask
Ë1 << ((dË% 
__NFDBITS
))

	)

68 #ifde‡
__USE_XOPEN


69 
__fd_mask
 
	mfds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

70 
	#__FDS_BITS
(
£t
Ë((£t)->
fds_bôs
)

	)

72 
__fd_mask
 
	m__fds_bôs
[
__FD_SETSIZE
 / 
__NFDBITS
];

73 
	#__FDS_BITS
(
£t
Ë((£t)->
__fds_bôs
)

	)

75 } 
	tfd_£t
;

78 
	#FD_SETSIZE
 
__FD_SETSIZE


	)

80 #ifde‡
__USE_MISC


82 
__fd_mask
 
	tfd_mask
;

85 
	#NFDBITS
 
__NFDBITS


	)

90 
	#FD_SET
(
fd
, 
fd£ç
Ë
	`__FD_SET
 (fd, fd£ç)

	)

91 
	#FD_CLR
(
fd
, 
fd£ç
Ë
	`__FD_CLR
 (fd, fd£ç)

	)

92 
	#FD_ISSET
(
fd
, 
fd£ç
Ë
	`__FD_ISSET
 (fd, fd£ç)

	)

93 
	#FD_ZERO
(
fd£ç
Ë
	`__FD_ZERO
 (fd£ç)

	)

96 
__BEGIN_DECLS


106 
£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

107 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

108 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

109 
timevÆ
 *
__ª°ri˘
 
__timeout
);

111 #ifde‡
__USE_XOPEN2K


118 
p£À˘
 (
__nfds
, 
fd_£t
 *
__ª°ri˘
 
__ªadfds
,

119 
fd_£t
 *
__ª°ri˘
 
__wrôefds
,

120 
fd_£t
 *
__ª°ri˘
 
__ex˚±fds
,

121 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
,

122 c⁄° 
__sig£t_t
 *
__ª°ri˘
 
__sigmask
);

127 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__GNUC__


128 
	~<bôs/£À˘2.h
>

131 
	g__END_DECLS


	@/usr/include/sys/sysmacros.h

19 #i‚de‡
_SYS_SYSMACROS_H


20 
	#_SYS_SYSMACROS_H
 1

	)

22 
	~<„©uªs.h
>

24 
__BEGIN_DECLS


26 
__exãnsi⁄__


27 
	$gnu_dev_maj‹
 (
__dev
)

28 
__THROW
 
__©åibuã_c⁄°__
;

29 
__exãnsi⁄__


30 
	$gnu_dev_mö‹
 (
__dev
)

31 
__THROW
 
__©åibuã_c⁄°__
;

32 
__exãnsi⁄__


33 
	$gnu_dev_makedev
 (
__maj‹
,

34 
__mö‹
)

35 
__THROW
 
__©åibuã_c⁄°__
;

37 #ifde‡
__USE_EXTERN_INLINES


38 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

39 
	`__NTH
 (
	$gnu_dev_maj‹
 (
__dev
))

41  ((
__dev
 >> 8) & 0xfff) | (() (__dev >> 32) & ~0xfff);

42 
	}
}

44 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

45 
__NTH
 (
	$gnu_dev_mö‹
 (
__dev
))

47  (
__dev
 & 0xff) | (() (__dev >> 12) & ~0xff);

48 
	}
}

50 
__exãnsi⁄__
 
__exã∫_ölöe
 
__©åibuã_c⁄°__
 

51 
__NTH
 (
	$gnu_dev_makedev
 (
__maj‹
, 
__mö‹
))

53  ((
__mö‹
 & 0xffË| ((
__maj‹
 & 0xfff) << 8)

54 | (((Ë(
__mö‹
 & ~0xff)) << 12)

55 | (((Ë(
__maj‹
 & ~0xfff)) << 32));

56 
	}
}

58 
	g__END_DECLS


61 
	#maj‹
(
dev
Ë
	`gnu_dev_maj‹
 (dev)

	)

62 
	#mö‹
(
dev
Ë
	`gnu_dev_mö‹
 (dev)

	)

63 
	#makedev
(
maj
, 
mö
Ë
	`gnu_dev_makedev
 (maj, mö)

	)

	@/usr/include/sys/ttydefaults.h

40 #i‚de‡
_SYS_TTYDEFAULTS_H_


41 
	#_SYS_TTYDEFAULTS_H_


	)

46 
	#TTYDEF_IFLAG
 (
BRKINT
 | 
ISTRIP
 | 
ICRNL
 | 
IMAXBEL
 | 
IXON
 | 
IXANY
)

	)

47 
	#TTYDEF_OFLAG
 (
OPOST
 | 
ONLCR
 | 
XTABS
)

	)

48 
	#TTYDEF_LFLAG
 (
ECHO
 | 
ICANON
 | 
ISIG
 | 
IEXTEN
 | 
ECHOE
|
ECHOKE
|
ECHOCTL
)

	)

49 
	#TTYDEF_CFLAG
 (
CREAD
 | 
CS7
 | 
PARENB
 | 
HUPCL
)

	)

50 
	#TTYDEF_SPEED
 (
B9600
)

	)

55 
	#CTRL
(
x
Ë(x&037)

	)

56 
	#CEOF
 
	`CTRL
('d')

	)

57 #ifde‡
_POSIX_VDISABLE


58 
	#CEOL
 
_POSIX_VDISABLE


	)

60 
	#CEOL
 '\0'

	)

62 
	#CERASE
 0177

	)

63 
	#CINTR
 
	`CTRL
('c')

	)

64 #ifde‡
_POSIX_VDISABLE


65 
	#CSTATUS
 
_POSIX_VDISABLE


	)

67 
	#CSTATUS
 '\0'

	)

69 
	#CKILL
 
	`CTRL
('u')

	)

70 
	#CMIN
 1

	)

71 
	#CQUIT
 034

	)

72 
	#CSUSP
 
	`CTRL
('z')

	)

73 
	#CTIME
 0

	)

74 
	#CDSUSP
 
	`CTRL
('y')

	)

75 
	#CSTART
 
	`CTRL
('q')

	)

76 
	#CSTOP
 
	`CTRL
('s')

	)

77 
	#CLNEXT
 
	`CTRL
('v')

	)

78 
	#CDISCARD
 
	`CTRL
('o')

	)

79 
	#CWERASE
 
	`CTRL
('w')

	)

80 
	#CREPRINT
 
	`CTRL
('r')

	)

81 
	#CEOT
 
CEOF


	)

83 
	#CBRK
 
CEOL


	)

84 
	#CRPRNT
 
CREPRINT


	)

85 
	#CFLUSH
 
CDISCARD


	)

93 #ifde‡
TTYDEFCHARS


94 
cc_t
 
	gâydefch¨s
[
NCCS
] = {

95 
CEOF
, 
CEOL
, CEOL, 
CERASE
, 
CWERASE
, 
CKILL
, 
CREPRINT
,

96 
_POSIX_VDISABLE
, 
CINTR
, 
CQUIT
, 
CSUSP
, 
CDSUSP
, 
CSTART
, 
CSTOP
, 
CLNEXT
,

97 
CDISCARD
, 
CMIN
, 
CTIME
, 
CSTATUS
, 
_POSIX_VDISABLE


99 #unde‡
TTYDEFCHARS


	@/usr/include/time.h

22 #i‚def 
_TIME_H


24 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

25 ! 
deföed
 
	g__√ed_time•ec
)

26 
	#_TIME_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


33 #ifdef 
_TIME_H


35 
	#__√ed_size_t


	)

36 
	#__√ed_NULL


	)

37 
	~<°ddef.h
>

41 
	~<bôs/time.h
>

44 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


45 #i‚de‡
CLK_TCK


46 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

52 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

53 
	#__˛ock_t_deföed
 1

	)

55 
	~<bôs/ty≥s.h
>

57 
__BEGIN_NAMESPACE_STD


59 
__˛ock_t
 
	t˛ock_t
;

60 
	g__END_NAMESPACE_STD


61 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


62 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

66 #unde‡
__√ed_˛ock_t


68 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

69 
	#__time_t_deföed
 1

	)

71 
	~<bôs/ty≥s.h
>

73 
__BEGIN_NAMESPACE_STD


75 
__time_t
 
	ttime_t
;

76 
__END_NAMESPACE_STD


77 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


78 
	$__USING_NAMESPACE_STD
(
time_t
)

82 #unde‡
__√ed_time_t


84 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

85 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

86 
	#__˛ockid_t_deföed
 1

	)

88 
	~<bôs/ty≥s.h
>

91 
__˛ockid_t
 
	t˛ockid_t
;

94 #unde‡
__˛ockid_time_t


96 #i‡!
deföed
 
__timî_t_deföed
 && \

97 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

98 
	#__timî_t_deföed
 1

	)

100 
	~<bôs/ty≥s.h
>

103 
__timî_t
 
	ttimî_t
;

106 #unde‡
__√ed_timî_t


109 #i‡(!
deföed
 
__time•ec_deföed
 \

110 && ((
deföed
 
_TIME_H
 \

111 && (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
 \

112 || 
deföed
 
__USE_ISOC11
)) \

113 || 
deföed
 
__√ed_time•ec
))

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
__sysˇŒ_¶⁄g_t
 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 c⁄° *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 c⁄° *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 #ifde‡
__USE_ISOC11


182 
	#TIME_UTC
 1

	)

186 
__BEGIN_NAMESPACE_STD


189 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

192 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

195 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

196 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

199 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

205 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

206 c⁄° *
__ª°ri˘
 
__f‹m©
,

207 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

208 
__END_NAMESPACE_STD


210 #ifde‡
__USE_XOPEN


213 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

214 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

215 
__THROW
;

218 #ifde‡
__USE_XOPEN2K8


221 
	~<xloˇÀ.h
>

223 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

224 c⁄° *
__ª°ri˘
 
__f‹m©
,

225 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

229 #ifde‡
__USE_GNU


230 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

231 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

232 
__loˇÀ_t
 
__loc
Ë
__THROW
;

236 
__BEGIN_NAMESPACE_STD


239 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

243 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

244 
__END_NAMESPACE_STD


246 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


249 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

250 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

254 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

255 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

258 
__BEGIN_NAMESPACE_STD


261 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

264 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

265 
__END_NAMESPACE_STD


267 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


272 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

273 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

277 *
__ª°ri˘
 
__buf
Ë
__THROW
;

282 *
__tz«me
[2];

283 
__daylight
;

284 
__timez⁄e
;

287 #ifdef 
__USE_POSIX


289 *
tz«me
[2];

293 
	$tz£t
 (Ë
__THROW
;

296 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


297 
daylight
;

298 
timez⁄e
;

301 #ifde‡
__USE_SVID


304 
	$°ime
 (c⁄° 
time_t
 *
__whí
Ë
__THROW
;

310 
	#__i¶óp
(
yór
) \

311 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

314 #ifde‡
__USE_MISC


319 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

322 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

325 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

329 #ifde‡
__USE_POSIX199309


334 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

335 
time•ec
 *
__ªmaöög
);

339 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

342 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

345 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

346 
__THROW
;

348 #ifde‡
__USE_XOPEN2K


353 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

354 c⁄° 
time•ec
 *
__ªq
,

355 
time•ec
 *
__ªm
);

358 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

363 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

364 
sigevít
 *
__ª°ri˘
 
__evp
,

365 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

368 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

371 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

372 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

373 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

376 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

377 
__THROW
;

380 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

384 #ifde‡
__USE_ISOC11


386 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

387 
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_XOPEN_EXTENDED


403 
gëd©e_îr
;

412 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

415 #ifde‡
__USE_GNU


426 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

427 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

430 
__END_DECLS


	@/usr/include/xlocale.h

20 #i‚de‡
_XLOCALE_H


21 
	#_XLOCALE_H
 1

	)

27 
	s__loˇÀ_°ru˘


30 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

33 c⁄° *
	m__˘y≥_b
;

34 c⁄° *
	m__˘y≥_tﬁowî
;

35 c⁄° *
	m__˘y≥_touµî
;

38 c⁄° *
	m__«mes
[13];

39 } *
	t__loˇÀ_t
;

42 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/X11/Xmd.h

47 #i‚de‡
XMD_H


48 
	#XMD_H
 1

	)

56 #i‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

57 
	~<sys/iß_defs.h
>

60 #i‡
deföed
 (
_LP64
Ë|| deföed(
__LP64__
) || \

61 
deföed
(
__Æpha
Ë|| deföed(
__Æpha__
) || \

62 
deföed
(
__ü64__
Ë|| deföed(
ü64
) || \

63 
deföed
(
__•¨c64__
) || \

64 
deföed
(
__s390x__
) || \

65 
deföed
(
__amd64__
Ë|| deföed(
amd64
) || \

66 
	$deföed
(
__powîpc64__
)

67 #i‡!
	`deföed
(
__ILP32__
)

68 
	#LONG64


	)

86 
	#_SIZEOF
(
x
Ë
sz_
##
	)
x

87 
	#SIZEOF
(
x
Ë
	`_SIZEOF
(x)

	)

94 
	#B32


	)

95 
	#B16


	)

96 #ifde‡
LONG64


97 
	tINT64
;

98 
	tINT32
;

100 
	tINT32
;

102 
	tINT16
;

104 sig√d 
	tINT8
;

106 #ifde‡
LONG64


107 
	tCARD64
;

108 
	tCARD32
;

110 
	tCARD64
;

111 
	tCARD32
;

113 
	tCARD16
;

114 
	tCARD8
;

116 
CARD32
 
	tBITS32
;

117 
CARD16
 
	tBITS16
;

119 
CARD8
 
	tBYTE
;

120 
CARD8
 
	tBOOL
;

126 
	#cvtINT8toI¡
(
vÆ
Ë(vÆ)

	)

127 
	#cvtINT16toI¡
(
vÆ
Ë(vÆ)

	)

128 
	#cvtINT32toI¡
(
vÆ
Ë(vÆ)

	)

129 
	#cvtINT8toSh‹t
(
vÆ
Ë(vÆ)

	)

130 
	#cvtINT16toSh‹t
(
vÆ
Ë(vÆ)

	)

131 
	#cvtINT32toSh‹t
(
vÆ
Ë(vÆ)

	)

132 
	#cvtINT8toL⁄g
(
vÆ
Ë(vÆ)

	)

133 
	#cvtINT16toL⁄g
(
vÆ
Ë(vÆ)

	)

134 
	#cvtINT32toL⁄g
(
vÆ
Ë(vÆ)

	)

140 
	#NEXTPTR
(
p
,
t
Ë((— *)’)Ë+ 1)

	)

	@/usr/include/X11/keysym.h

49 
	#XK_MISCELLANY


	)

50 
	#XK_XKB_KEYS


	)

51 
	#XK_LATIN1


	)

52 
	#XK_LATIN2


	)

53 
	#XK_LATIN3


	)

54 
	#XK_LATIN4


	)

55 
	#XK_LATIN8


	)

56 
	#XK_LATIN9


	)

57 
	#XK_CAUCASUS


	)

58 
	#XK_GREEK


	)

59 
	#XK_KATAKANA


	)

60 
	#XK_ARABIC


	)

61 
	#XK_CYRILLIC


	)

62 
	#XK_HEBREW


	)

63 
	#XK_THAI


	)

64 
	#XK_KOREAN


	)

65 
	#XK_ARMENIAN


	)

66 
	#XK_GEORGIAN


	)

67 
	#XK_VIETNAMESE


	)

68 
	#XK_CURRENCY


	)

69 
	#XK_MATHEMATICAL


	)

70 
	#XK_BRAILLE


	)

71 
	#XK_SINHALA


	)

73 
	~<X11/keysymdef.h
>

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

23 
__off_t
 
	m__pos
;

24 
__mb°©e_t
 
	m__°©e
;

25 } 
	t_G_Âos_t
;

28 
__off64_t
 
	m__pos
;

29 
__mb°©e_t
 
	m__°©e
;

30 } 
	t_G_Âos64_t
;

31 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


32 
	~<gc⁄v.h
>

35 
__gc⁄v_öfo
 
	m__cd
;

38 
__gc⁄v_öfo
 
	m__cd
;

39 
__gc⁄v_°ï_d©a
 
	m__d©a
;

40 } 
	m__comböed
;

41 } 
	t_G_ic⁄v_t
;

46 
	#_G_va_li°
 
__gnuc_va_li°


	)

48 
	#_G_HAVE_MMAP
 1

	)

49 
	#_G_HAVE_MREMAP
 1

	)

51 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

54 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

56 
	#_G_BUFSIZ
 8192

	)

	@/usr/include/asm/bitsperlong.h

1 #i‚de‡
__ASM_GENERIC_BITS_PER_LONG


2 
	#__ASM_GENERIC_BITS_PER_LONG


	)

11 #i‚de‡
__BITS_PER_LONG


12 
	#__BITS_PER_LONG
 32

	)

	@/usr/include/asm/ioctl.h

1 #i‚de‡
_ASM_GENERIC_IOCTL_H


2 
	#_ASM_GENERIC_IOCTL_H


	)

22 
	#_IOC_NRBITS
 8

	)

23 
	#_IOC_TYPEBITS
 8

	)

30 #i‚de‡
_IOC_SIZEBITS


31 
	#_IOC_SIZEBITS
 14

	)

34 #i‚de‡
_IOC_DIRBITS


35 
	#_IOC_DIRBITS
 2

	)

38 
	#_IOC_NRMASK
 ((1 << 
_IOC_NRBITS
)-1)

	)

39 
	#_IOC_TYPEMASK
 ((1 << 
_IOC_TYPEBITS
)-1)

	)

40 
	#_IOC_SIZEMASK
 ((1 << 
_IOC_SIZEBITS
)-1)

	)

41 
	#_IOC_DIRMASK
 ((1 << 
_IOC_DIRBITS
)-1)

	)

43 
	#_IOC_NRSHIFT
 0

	)

44 
	#_IOC_TYPESHIFT
 (
_IOC_NRSHIFT
+
_IOC_NRBITS
)

	)

45 
	#_IOC_SIZESHIFT
 (
_IOC_TYPESHIFT
+
_IOC_TYPEBITS
)

	)

46 
	#_IOC_DIRSHIFT
 (
_IOC_SIZESHIFT
+
_IOC_SIZEBITS
)

	)

53 #i‚de‡
_IOC_NONE


54 
	#_IOC_NONE
 0U

	)

57 #i‚de‡
_IOC_WRITE


58 
	#_IOC_WRITE
 1U

	)

61 #i‚de‡
_IOC_READ


62 
	#_IOC_READ
 2U

	)

65 
	#_IOC
(
dú
,
ty≥
,
ƒ
,
size
) \

66 (((
dú
Ë<< 
_IOC_DIRSHIFT
) | \

67 ((
ty≥
Ë<< 
_IOC_TYPESHIFT
) | \

68 ((
ƒ
Ë<< 
_IOC_NRSHIFT
) | \

69 ((
size
Ë<< 
_IOC_SIZESHIFT
))

	)

71 
	#_IOC_TYPECHECK
(
t
Ë(—))

	)

74 
	#_IO
(
ty≥
,
ƒ
Ë
	`_IOC
(
_IOC_NONE
,—y≥),“r),0)

	)

75 
	#_IOR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

76 
	#_IOW
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

77 
	#_IOWR
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(
	`_IOC_TYPECHECK
(size)))

	)

78 
	#_IOR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
,—y≥),“r),(size))

	)

79 
	#_IOW_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_WRITE
,—y≥),“r),(size))

	)

80 
	#_IOWR_BAD
(
ty≥
,
ƒ
,
size
Ë
	`_IOC
(
_IOC_READ
|
_IOC_WRITE
,—y≥),“r),(size))

	)

83 
	#_IOC_DIR
(
ƒ
Ë((“rË>> 
_IOC_DIRSHIFT
Ë& 
_IOC_DIRMASK
)

	)

84 
	#_IOC_TYPE
(
ƒ
Ë((“rË>> 
_IOC_TYPESHIFT
Ë& 
_IOC_TYPEMASK
)

	)

85 
	#_IOC_NR
(
ƒ
Ë((“rË>> 
_IOC_NRSHIFT
Ë& 
_IOC_NRMASK
)

	)

86 
	#_IOC_SIZE
(
ƒ
Ë((“rË>> 
_IOC_SIZESHIFT
Ë& 
_IOC_SIZEMASK
)

	)

90 
	#IOC_IN
 (
_IOC_WRITE
 << 
_IOC_DIRSHIFT
)

	)

91 
	#IOC_OUT
 (
_IOC_READ
 << 
_IOC_DIRSHIFT
)

	)

92 
	#IOC_INOUT
 ((
_IOC_WRITE
|
_IOC_READ
Ë<< 
_IOC_DIRSHIFT
)

	)

93 
	#IOCSIZE_MASK
 (
_IOC_SIZEMASK
 << 
_IOC_SIZESHIFT
)

	)

94 
	#IOCSIZE_SHIFT
 (
_IOC_SIZESHIFT
)

	)

	@/usr/include/asm/ioctls.h

1 #i‚de‡
__ASM_GENERIC_IOCTLS_H


2 
	#__ASM_GENERIC_IOCTLS_H


	)

4 
	~<löux/io˘l.h
>

19 
	#TCGETS
 0x5401

	)

20 
	#TCSETS
 0x5402

	)

21 
	#TCSETSW
 0x5403

	)

22 
	#TCSETSF
 0x5404

	)

23 
	#TCGETA
 0x5405

	)

24 
	#TCSETA
 0x5406

	)

25 
	#TCSETAW
 0x5407

	)

26 
	#TCSETAF
 0x5408

	)

27 
	#TCSBRK
 0x5409

	)

28 
	#TCXONC
 0x540A

	)

29 
	#TCFLSH
 0x540B

	)

30 
	#TIOCEXCL
 0x540C

	)

31 
	#TIOCNXCL
 0x540D

	)

32 
	#TIOCSCTTY
 0x540E

	)

33 
	#TIOCGPGRP
 0x540F

	)

34 
	#TIOCSPGRP
 0x5410

	)

35 
	#TIOCOUTQ
 0x5411

	)

36 
	#TIOCSTI
 0x5412

	)

37 
	#TIOCGWINSZ
 0x5413

	)

38 
	#TIOCSWINSZ
 0x5414

	)

39 
	#TIOCMGET
 0x5415

	)

40 
	#TIOCMBIS
 0x5416

	)

41 
	#TIOCMBIC
 0x5417

	)

42 
	#TIOCMSET
 0x5418

	)

43 
	#TIOCGSOFTCAR
 0x5419

	)

44 
	#TIOCSSOFTCAR
 0x541A

	)

45 
	#FIONREAD
 0x541B

	)

46 
	#TIOCINQ
 
FIONREAD


	)

47 
	#TIOCLINUX
 0x541C

	)

48 
	#TIOCCONS
 0x541D

	)

49 
	#TIOCGSERIAL
 0x541E

	)

50 
	#TIOCSSERIAL
 0x541F

	)

51 
	#TIOCPKT
 0x5420

	)

52 
	#FIONBIO
 0x5421

	)

53 
	#TIOCNOTTY
 0x5422

	)

54 
	#TIOCSETD
 0x5423

	)

55 
	#TIOCGETD
 0x5424

	)

56 
	#TCSBRKP
 0x5425

	)

57 
	#TIOCSBRK
 0x5427

	)

58 
	#TIOCCBRK
 0x5428

	)

59 
	#TIOCGSID
 0x5429

	)

60 
	#TCGETS2
 
	`_IOR
('T', 0x2A, 
ãrmios2
)

	)

61 
	#TCSETS2
 
	`_IOW
('T', 0x2B, 
ãrmios2
)

	)

62 
	#TCSETSW2
 
	`_IOW
('T', 0x2C, 
ãrmios2
)

	)

63 
	#TCSETSF2
 
	`_IOW
('T', 0x2D, 
ãrmios2
)

	)

64 
	#TIOCGRS485
 0x542E

	)

65 #i‚de‡
TIOCSRS485


66 
	#TIOCSRS485
 0x542F

	)

68 
	#TIOCGPTN
 
	`_IOR
('T', 0x30, Ë

	)

69 
	#TIOCSPTLCK
 
	`_IOW
('T', 0x31, Ë

	)

70 
	#TIOCGDEV
 
	`_IOR
('T', 0x32, Ë

	)

71 
	#TCGETX
 0x5432

	)

72 
	#TCSETX
 0x5433

	)

73 
	#TCSETXF
 0x5434

	)

74 
	#TCSETXW
 0x5435

	)

75 
	#TIOCSIG
 
	`_IOW
('T', 0x36, Ë

	)

76 
	#TIOCVHANGUP
 0x5437

	)

77 
	#TIOCGPKT
 
	`_IOR
('T', 0x38, Ë

	)

78 
	#TIOCGPTLCK
 
	`_IOR
('T', 0x39, Ë

	)

79 
	#TIOCGEXCL
 
	`_IOR
('T', 0x40, Ë

	)

81 
	#FIONCLEX
 0x5450

	)

82 
	#FIOCLEX
 0x5451

	)

83 
	#FIOASYNC
 0x5452

	)

84 
	#TIOCSERCONFIG
 0x5453

	)

85 
	#TIOCSERGWILD
 0x5454

	)

86 
	#TIOCSERSWILD
 0x5455

	)

87 
	#TIOCGLCKTRMIOS
 0x5456

	)

88 
	#TIOCSLCKTRMIOS
 0x5457

	)

89 
	#TIOCSERGSTRUCT
 0x5458

	)

90 
	#TIOCSERGETLSR
 0x5459

	)

91 
	#TIOCSERGETMULTI
 0x545A

	)

92 
	#TIOCSERSETMULTI
 0x545B

	)

94 
	#TIOCMIWAIT
 0x545C

	)

95 
	#TIOCGICOUNT
 0x545D

	)

101 #i‚de‡
FIOQSIZE


102 
	#FIOQSIZE
 0x5460

	)

106 
	#TIOCPKT_DATA
 0

	)

107 
	#TIOCPKT_FLUSHREAD
 1

	)

108 
	#TIOCPKT_FLUSHWRITE
 2

	)

109 
	#TIOCPKT_STOP
 4

	)

110 
	#TIOCPKT_START
 8

	)

111 
	#TIOCPKT_NOSTOP
 16

	)

112 
	#TIOCPKT_DOSTOP
 32

	)

113 
	#TIOCPKT_IOCTL
 64

	)

115 
	#TIOCSER_TEMT
 0x01

	)

	@/usr/include/bits/byteswap.h

19 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


23 #i‚de‡
_BITS_BYTESWAP_H


24 
	#_BITS_BYTESWAP_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((Ë((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8)))

	)

35 
	~<bôs/byãsw≠-16.h
>

38 
	#__bsw≠_c⁄°™t_32
(
x
) \

39 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

40 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

42 #ifde‡
__GNUC__


43 #i‡
__GNUC_PREREQ
 (4, 3)

44 
__ölöe
 

45 
	$__bsw≠_32
 (
__bsx
)

47  
	`__buûtö_bsw≠32
 (
__bsx
);

48 
	}
}

49 #ñi‡
__GNUC__
 >= 2

50 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

51 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

52 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

53 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

54 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

55 || 
deföed
 
	g__amdÁm10__
)

58 
	#__bsw≠_32
(
x
) \

59 (
__exãnsi⁄__
 \

60 ({ 
__v
, 
__x
 = (
x
); \

61 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

62 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

64 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

65 
__v
; }))

	)

67 
	#__bsw≠_32
(
x
) \

68 (
__exãnsi⁄__
 \

69 ({ 
__v
, 
__x
 = (
x
); \

70 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

71 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

73 
	`__asm__
 ("rorw $8, %w0;" \

76 : "Ù" (
__v
) \

77 : "0" (
__x
) \

79 
__v
; }))

	)

82 
	#__bsw≠_32
(
x
) \

83 (
__exãnsi⁄__
 \

84 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

87 
__ölöe
 

88 
	$__bsw≠_32
 (
__bsx
)

90  
	`__bsw≠_c⁄°™t_32
 (
__bsx
);

91 
	}
}

95 #i‡
__GNUC_PREREQ
 (2, 0)

97 
	#__bsw≠_c⁄°™t_64
(
x
) \

98 (
	`__exãnsi⁄__
 ((((
x
) & 0xff00000000000000ull) >> 56) \

99 | (((
x
) & 0x00ff000000000000ull) >> 40) \

100 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

101 | (((
x
) & 0x000000ff00000000ull) >> 8) \

102 | (((
x
) & 0x00000000ff000000ull) << 8) \

103 | (((
x
) & 0x0000000000ff0000ull) << 24) \

104 | (((
x
) & 0x000000000000ff00ull) << 40) \

105 | (((
x
Ë& 0x00000000000000ffuŒË<< 56)))

	)

107 #i‡
__GNUC_PREREQ
 (4, 3)

108 
__ölöe
 
__uöt64_t


109 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

111  
	`__buûtö_bsw≠64
 (
__bsx
);

112 
	}
}

113 #ñi‡
__WORDSIZE
 == 64

114 
	#__bsw≠_64
(
x
) \

115 (
__exãnsi⁄__
 \

116 ({ 
__uöt64_t
 
__v
, 
__x
 = (
x
); \

117 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

118 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

120 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

121 
__v
; }))

	)

123 
	#__bsw≠_64
(
x
) \

124 (
__exãnsi⁄__
 \

125 ({ uni⁄ { 
__exãnsi⁄__
 
__uöt64_t
 
__Œ
; \

126 
__l
[2]; } 
__w
, 
__r
; \

127 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

128 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

131 
__w
.
__Œ
 = (
x
); \

132 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

133 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

135 
__r
.
__Œ
; }))

	)

138 
	#__bsw≠_c⁄°™t_64
(
x
) \

139 ((((
x
) & 0xff00000000000000ull) >> 56) \

140 | (((
x
) & 0x00ff000000000000ull) >> 40) \

141 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

142 | (((
x
) & 0x000000ff00000000ull) >> 8) \

143 | (((
x
) & 0x00000000ff000000ull) << 8) \

144 | (((
x
) & 0x0000000000ff0000ull) << 24) \

145 | (((
x
) & 0x000000000000ff00ull) << 40) \

146 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

148 
__ölöe
 
__uöt64_t


149 
	$__bsw≠_64
 (
__uöt64_t
 
__bsx
)

151  
	`__bsw≠_c⁄°™t_64
 (
__bsx
);

152 
	}
}

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/fcntl-linux.h

19 #i‚def 
_FCNTL_H


37 #ifde‡
__USE_GNU


38 
	~<bôs/uio.h
>

42 
	#O_ACCMODE
 0003

	)

43 
	#O_RDONLY
 00

	)

44 
	#O_WRONLY
 01

	)

45 
	#O_RDWR
 02

	)

46 #i‚de‡
O_CREAT


47 
	#O_CREAT
 0100

	)

49 #i‚de‡
O_EXCL


50 
	#O_EXCL
 0200

	)

52 #i‚de‡
O_NOCTTY


53 
	#O_NOCTTY
 0400

	)

55 #i‚de‡
O_TRUNC


56 
	#O_TRUNC
 01000

	)

58 #i‚de‡
O_APPEND


59 
	#O_APPEND
 02000

	)

61 #i‚de‡
O_NONBLOCK


62 
	#O_NONBLOCK
 04000

	)

64 #i‚de‡
O_NDELAY


65 
	#O_NDELAY
 
O_NONBLOCK


	)

67 #i‚de‡
O_SYNC


68 
	#O_SYNC
 04010000

	)

70 
	#O_FSYNC
 
O_SYNC


	)

71 #i‚de‡
O_ASYNC


72 
	#O_ASYNC
 020000

	)

74 #i‚de‡
__O_LARGEFILE


75 
	#__O_LARGEFILE
 0100000

	)

78 #i‚de‡
__O_DIRECTORY


79 
	#__O_DIRECTORY
 0200000

	)

81 #i‚de‡
__O_NOFOLLOW


82 
	#__O_NOFOLLOW
 0400000

	)

84 #i‚de‡
__O_CLOEXEC


85 
	#__O_CLOEXEC
 02000000

	)

87 #i‚de‡
__O_DIRECT


88 
	#__O_DIRECT
 040000

	)

90 #i‚de‡
__O_NOATIME


91 
	#__O_NOATIME
 01000000

	)

93 #i‚de‡
__O_PATH


94 
	#__O_PATH
 010000000

	)

96 #i‚de‡
__O_DSYNC


97 
	#__O_DSYNC
 010000

	)

99 #i‚de‡
__O_TMPFILE


100 
	#__O_TMPFILE
 020200000

	)

103 #i‚de‡
F_GETLK


104 #i‚de‡
__USE_FILE_OFFSET64


105 
	#F_GETLK
 5

	)

106 
	#F_SETLK
 6

	)

107 
	#F_SETLKW
 7

	)

109 
	#F_GETLK
 
F_GETLK64


	)

110 
	#F_SETLK
 
F_SETLK64


	)

111 
	#F_SETLKW
 
F_SETLKW64


	)

114 #i‚de‡
F_GETLK64


115 
	#F_GETLK64
 12

	)

116 
	#F_SETLK64
 13

	)

117 
	#F_SETLKW64
 14

	)

120 #ifde‡
__USE_LARGEFILE64


121 
	#O_LARGEFILE
 
__O_LARGEFILE


	)

124 #ifde‡
__USE_XOPEN2K8


125 
	#O_DIRECTORY
 
__O_DIRECTORY


	)

126 
	#O_NOFOLLOW
 
__O_NOFOLLOW


	)

127 
	#O_CLOEXEC
 
__O_CLOEXEC


	)

130 #ifde‡
__USE_GNU


131 
	#O_DIRECT
 
__O_DIRECT


	)

132 
	#O_NOATIME
 
__O_NOATIME


	)

133 
	#O_PATH
 
__O_PATH


	)

134 
	#O_TMPFILE
 
__O_TMPFILE


	)

140 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


141 
	#O_DSYNC
 
__O_DSYNC


	)

142 #i‡
deföed
 
__O_RSYNC


143 
	#O_RSYNC
 
__O_RSYNC


	)

145 
	#O_RSYNC
 
O_SYNC


	)

150 
	#F_DUPFD
 0

	)

151 
	#F_GETFD
 1

	)

152 
	#F_SETFD
 2

	)

153 
	#F_GETFL
 3

	)

154 
	#F_SETFL
 4

	)

156 #i‚de‡
__F_SETOWN


157 
	#__F_SETOWN
 8

	)

158 
	#__F_GETOWN
 9

	)

161 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


162 
	#F_SETOWN
 
__F_SETOWN


	)

163 
	#F_GETOWN
 
__F_GETOWN


	)

166 #i‚de‡
__F_SETSIG


167 
	#__F_SETSIG
 10

	)

168 
	#__F_GETSIG
 11

	)

170 #i‚de‡
__F_SETOWN_EX


171 
	#__F_SETOWN_EX
 15

	)

172 
	#__F_GETOWN_EX
 16

	)

175 #ifde‡
__USE_GNU


176 
	#F_SETSIG
 
__F_SETSIG


	)

177 
	#F_GETSIG
 
__F_GETSIG


	)

178 
	#F_SETOWN_EX
 
__F_SETOWN_EX


	)

179 
	#F_GETOWN_EX
 
__F_GETOWN_EX


	)

182 #ifde‡
__USE_GNU


183 
	#F_SETLEASE
 1024

	)

184 
	#F_GETLEASE
 1025

	)

185 
	#F_NOTIFY
 1026

	)

186 
	#F_SETPIPE_SZ
 1031

	)

187 
	#F_GETPIPE_SZ
 1032

	)

189 #ifde‡
__USE_XOPEN2K8


190 
	#F_DUPFD_CLOEXEC
 1030

	)

195 
	#FD_CLOEXEC
 1

	)

197 #i‚de‡
F_RDLCK


199 
	#F_RDLCK
 0

	)

200 
	#F_WRLCK
 1

	)

201 
	#F_UNLCK
 2

	)

206 #i‚de‡
F_EXLCK


207 
	#F_EXLCK
 4

	)

208 
	#F_SHLCK
 8

	)

211 #ifde‡
__USE_BSD


213 
	#LOCK_SH
 1

	)

214 
	#LOCK_EX
 2

	)

215 
	#LOCK_NB
 4

	)

217 
	#LOCK_UN
 8

	)

220 #ifde‡
__USE_GNU


221 
	#LOCK_MAND
 32

	)

222 
	#LOCK_READ
 64

	)

223 
	#LOCK_WRITE
 128

	)

224 
	#LOCK_RW
 192

	)

227 #ifde‡
__USE_GNU


229 
	#DN_ACCESS
 0x00000001

	)

230 
	#DN_MODIFY
 0x00000002

	)

231 
	#DN_CREATE
 0x00000004

	)

232 
	#DN_DELETE
 0x00000008

	)

233 
	#DN_RENAME
 0x00000010

	)

234 
	#DN_ATTRIB
 0x00000020

	)

235 
	#DN_MULTISHOT
 0x80000000

	)

239 #ifde‡
__USE_GNU


241 
	e__pid_ty≥


243 
	mF_OWNER_TID
 = 0,

244 
	mF_OWNER_PID
,

245 
	mF_OWNER_PGRP
,

246 
	mF_OWNER_GID
 = 
F_OWNER_PGRP


250 
	sf_ow√r_ex


252 
__pid_ty≥
 
	mty≥
;

253 
__pid_t
 
	mpid
;

259 #ifdef 
__USE_BSD


260 
	#FAPPEND
 
O_APPEND


	)

261 
	#FFSYNC
 
O_FSYNC


	)

262 
	#FASYNC
 
O_ASYNC


	)

263 
	#FNONBLOCK
 
O_NONBLOCK


	)

264 
	#FNDELAY
 
O_NDELAY


	)

267 #i‚de‡
__POSIX_FADV_DONTNEED


268 
	#__POSIX_FADV_DONTNEED
 4

	)

269 
	#__POSIX_FADV_NOREUSE
 5

	)

272 #ifde‡
__USE_XOPEN2K


273 
	#POSIX_FADV_NORMAL
 0

	)

274 
	#POSIX_FADV_RANDOM
 1

	)

275 
	#POSIX_FADV_SEQUENTIAL
 2

	)

276 
	#POSIX_FADV_WILLNEED
 3

	)

277 
	#POSIX_FADV_DONTNEED
 
__POSIX_FADV_DONTNEED


	)

278 
	#POSIX_FADV_NOREUSE
 
__POSIX_FADV_NOREUSE


	)

282 #ifde‡
__USE_GNU


284 
	#SYNC_FILE_RANGE_WAIT_BEFORE
 1

	)

287 
	#SYNC_FILE_RANGE_WRITE
 2

	)

290 
	#SYNC_FILE_RANGE_WAIT_AFTER
 4

	)

295 
	#SPLICE_F_MOVE
 1

	)

296 
	#SPLICE_F_NONBLOCK
 2

	)

299 
	#SPLICE_F_MORE
 4

	)

300 
	#SPLICE_F_GIFT
 8

	)

304 
	#FALLOC_FL_KEEP_SIZE
 1

	)

307 
	#FALLOC_FL_PUNCH_HOLE
 2

	)

311 
	sfûe_h™dÀ


313 
	mh™dÀ_byãs
;

314 
	mh™dÀ_ty≥
;

316 
	mf_h™dÀ
[0];

320 
	#MAX_HANDLE_SZ
 128

	)

324 #ifde‡
__USE_ATFILE


325 
	#AT_FDCWD
 -100

	)

328 
	#AT_SYMLINK_NOFOLLOW
 0x100

	)

329 
	#AT_REMOVEDIR
 0x200

	)

331 
	#AT_SYMLINK_FOLLOW
 0x400

	)

332 #ifde‡
__USE_GNU


333 
	#AT_NO_AUTOMOUNT
 0x800

	)

335 
	#AT_EMPTY_PATH
 0x1000

	)

337 
	#AT_EACCESS
 0x200

	)

341 
	g__BEGIN_DECLS


343 #ifde‡
__USE_GNU


346 
ssize_t
 
	$ªadahód
 (
__fd
, 
__off64_t
 
__off£t
, 
size_t
 
__cou¡
)

347 
__THROW
;

354 
	`sync_fûe_ønge
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__cou¡
,

355 
__Êags
);

362 
ssize_t
 
	`vm•li˚
 (
__fdout
, c⁄° 
iovec
 *
__iov
,

363 
size_t
 
__cou¡
, 
__Êags
);

369 
ssize_t
 
	`•li˚
 (
__fdö
, 
__off64_t
 *
__offö
, 
__fdout
,

370 
__off64_t
 *
__offout
, 
size_t
 
__Àn
,

371 
__Êags
);

377 
ssize_t
 
	`ãe
 (
__fdö
, 
__fdout
, 
size_t
 
__Àn
,

378 
__Êags
);

384 #i‚de‡
__USE_FILE_OFFSET64


385 
	`ÁŒoˇã
 (
__fd
, 
__mode
, 
__off_t
 
__off£t
, __off_à
__Àn
);

387 #ifde‡
__REDIRECT


388 
	`__REDIRECT
 (
ÁŒoˇã
, (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

389 
__off64_t
 
__Àn
),

390 
ÁŒoˇã64
);

392 
	#ÁŒoˇã
 
ÁŒoˇã64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	`ÁŒoˇã64
 (
__fd
, 
__mode
, 
__off64_t
 
__off£t
,

397 
__off64_t
 
__Àn
);

402 
	$«me_to_h™dÀ_©
 (
__dfd
, c⁄° *
__«me
,

403 
fûe_h™dÀ
 *
__h™dÀ
, *
__m¡_id
,

404 
__Êags
Ë
__THROW
;

410 
	`›í_by_h™dÀ_©
 (
__mou¡dúfd
, 
fûe_h™dÀ
 *
__h™dÀ
,

411 
__Êags
);

415 
__END_DECLS


	@/usr/include/bits/libio-ldbl.h

19 #i‚de‡
_IO_STDIO_H


23 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

24 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/mman-linux.h

19 #i‚de‡
_SYS_MMAN_H


32 
	#PROT_READ
 0x1

	)

33 
	#PROT_WRITE
 0x2

	)

34 
	#PROT_EXEC
 0x4

	)

35 
	#PROT_NONE
 0x0

	)

36 
	#PROT_GROWSDOWN
 0x01000000

	)

38 
	#PROT_GROWSUP
 0x02000000

	)

42 
	#MAP_SHARED
 0x01

	)

43 
	#MAP_PRIVATE
 0x02

	)

44 #ifde‡
__USE_MISC


45 
	#MAP_TYPE
 0x0‡

	)

49 
	#MAP_FIXED
 0x10

	)

50 #ifde‡
__USE_MISC


51 
	#MAP_FILE
 0

	)

52 #ifde‡
__MAP_ANONYMOUS


53 
	#MAP_ANONYMOUS
 
__MAP_ANONYMOUS


	)

55 
	#MAP_ANONYMOUS
 0x20

	)

57 
	#MAP_ANON
 
MAP_ANONYMOUS


	)

59 
	#MAP_HUGE_SHIFT
 26

	)

60 
	#MAP_HUGE_MASK
 0x3f

	)

64 
	#MS_ASYNC
 1

	)

65 
	#MS_SYNC
 4

	)

66 
	#MS_INVALIDATE
 2

	)

69 #ifde‡
__USE_GNU


70 
	#MREMAP_MAYMOVE
 1

	)

71 
	#MREMAP_FIXED
 2

	)

75 #ifde‡
__USE_BSD


76 
	#MADV_NORMAL
 0

	)

77 
	#MADV_RANDOM
 1

	)

78 
	#MADV_SEQUENTIAL
 2

	)

79 
	#MADV_WILLNEED
 3

	)

80 
	#MADV_DONTNEED
 4

	)

81 
	#MADV_REMOVE
 9

	)

82 
	#MADV_DONTFORK
 10

	)

83 
	#MADV_DOFORK
 11

	)

84 
	#MADV_MERGEABLE
 12

	)

85 
	#MADV_UNMERGEABLE
 13

	)

86 
	#MADV_HUGEPAGE
 14

	)

87 
	#MADV_NOHUGEPAGE
 15

	)

88 
	#MADV_DONTDUMP
 16

	)

90 
	#MADV_DODUMP
 17

	)

91 
	#MADV_HWPOISON
 100

	)

95 #ifde‡
__USE_XOPEN2K


96 
	#POSIX_MADV_NORMAL
 0

	)

97 
	#POSIX_MADV_RANDOM
 1

	)

98 
	#POSIX_MADV_SEQUENTIAL
 2

	)

99 
	#POSIX_MADV_WILLNEED
 3

	)

100 
	#POSIX_MADV_DONTNEED
 4

	)

104 #i‚de‡
MCL_CURRENT


105 
	#MCL_CURRENT
 1

	)

106 
	#MCL_FUTURE
 2

	)

	@/usr/include/bits/select.h

18 #i‚de‡
_SYS_SELECT_H


22 
	~<bôs/w‹dsize.h
>

25 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

27 #i‡
__WORDSIZE
 == 64

28 
	#__FD_ZERO_STOS
 "°osq"

	)

30 
	#__FD_ZERO_STOS
 "°o¶"

	)

33 
	#__FD_ZERO
(
fd•
) \

35 
__d0
, 
__d1
; \

36 
__asm__
 
	`__vﬁ©ûe__
 ("˛d;Ñï; " 
__FD_ZERO_STOS
 \

37 : "=c" (
__d0
), "=D" (
__d1
) \

38 : "a" (0), "0" ( (
fd_£t
) \

39 /  (
__fd_mask
)), \

40 "1" (&
	`__FDS_BITS
 (
fd•
)[0]) \

42 } 0)

	)

48 
	#__FD_ZERO
(
£t
) \

50 
__i
; \

51 
fd_£t
 *
__¨r
 = (
£t
); \

52 
__i
 = 0; __ò<  (
fd_£t
Ë/  (
__fd_mask
); ++__i) \

53 
	`__FDS_BITS
 (
__¨r
)[
__i
] = 0; \

54 } 0)

	)

58 
	#__FD_SET
(
d
, 
£t
) \

59 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] |
	`__FD_MASK
 (d)))

	)

60 
	#__FD_CLR
(
d
, 
£t
) \

61 ((Ë(
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] &~
	`__FD_MASK
 (d)))

	)

62 
	#__FD_ISSET
(
d
, 
£t
) \

63 ((
	`__FDS_BITS
 (
£t
)[
	`__FD_ELT
 (
d
)] & 
	`__FD_MASK
 (d)Ë!0)

	)

	@/usr/include/bits/select2.h

19 #i‚de‡
_SYS_SELECT_H


24 
__fdñt_chk
 (
__d
);

25 
	$__fdñt_w¨n
 (
__d
)

26 
	`__w¨«âr
 ("bit outside of fd_set selected");

27 #unde‡
__FD_ELT


28 
	#__FD_ELT
(
d
) \

29 
__exãnsi⁄__
 \

30 ({ 
__d
 = (
d
); \

31 (
	`__buûtö_c⁄°™t_p
 (
__d
) \

32 ? (0 <
__d
 && __d < 
__FD_SETSIZE
 \

33 ? (
__d
 / 
__NFDBITS
) \

34 : 
	`__fdñt_w¨n
 (
__d
)) \

35 : 
	`__fdñt_chk
 (
__d
)); 
	}
})

	)

	@/usr/include/bits/sigset.h

19 #i‚def 
_SIGSET_H_ty≥s


20 
	#_SIGSET_H_ty≥s
 1

	)

22 
	t__sig_©omic_t
;

26 
	#_SIGSET_NWORDS
 (1024 / (8 *  ()))

	)

29 
	m__vÆ
[
_SIGSET_NWORDS
];

30 } 
	t__sig£t_t
;

41 #i‡!
deföed
 
_SIGSET_H_‚s
 && deföed 
_SIGNAL_H


42 
	#_SIGSET_H_‚s
 1

	)

44 #i‚de‡
_EXTERN_INLINE


45 
	#_EXTERN_INLINE
 
__exã∫_ölöe


	)

49 
	#__sigmask
(
sig
) \

50 (((Ë1Ë<< (((
sig
Ë- 1Ë% (8 *  ())))

	)

53 
	#__sigw‹d
(
sig
Ë(((sigË- 1Ë/ (8 *  ()))

	)

55 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

56 
	#__sigem±y£t
(
£t
) \

57 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

58 
sig£t_t
 *
__£t
 = (
£t
); \

59 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = 0; \

60 0; }))

	)

61 
	#__sigfûl£t
(
£t
) \

62 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

63 
sig£t_t
 *
__£t
 = (
£t
); \

64 --
__˙t
 >0Ë
__£t
->
__vÆ
[__cnt] = ~0UL; \

65 0; }))

	)

67 #ifde‡
__USE_GNU


71 
	#__sigi£m±y£t
(
£t
) \

72 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

73 c⁄° 
sig£t_t
 *
__£t
 = (
£t
); \

74 
__ªt
 = 
__£t
->
__vÆ
[--
__˙t
]; \

75 !
__ªt
 && --
__˙t
 >= 0) \

76 
__ªt
 = 
__£t
->
__vÆ
[
__˙t
]; \

77 
__ªt
 =0; }))

	)

78 
	#__sig™d£t
(
de°
, 
À·
, 
right
) \

79 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

80 
sig£t_t
 *
__de°
 = (
de°
); \

81 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

82 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

83 --
__˙t
 >= 0) \

84 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

85 & 
__right
->
__vÆ
[
__˙t
]); \

86 0; }))

	)

87 
	#__sig‹£t
(
de°
, 
À·
, 
right
) \

88 (
	`__exãnsi⁄__
 ({ 
__˙t
 = 
_SIGSET_NWORDS
; \

89 
sig£t_t
 *
__de°
 = (
de°
); \

90 c⁄° 
sig£t_t
 *
__À·
 = (
À·
); \

91 c⁄° 
sig£t_t
 *
__right
 = (
right
); \

92 --
__˙t
 >= 0) \

93 
__de°
->
__vÆ
[
__˙t
] = (
__À·
->__val[__cnt] \

94 | 
__right
->
__vÆ
[
__˙t
]); \

95 0; }))

	)

102 
__sigismembî
 (c⁄° 
__sig£t_t
 *, );

103 
__sigadd£t
 (
__sig£t_t
 *, );

104 
__sigdñ£t
 (
__sig£t_t
 *, );

106 #ifde‡
__USE_EXTERN_INLINES


107 
	#__SIGSETFN
(
NAME
, 
BODY
, 
CONST
) \

108 
_EXTERN_INLINE
 \

109 
	`NAME
 (
CONST
 
__sig£t_t
 *
__£t
, 
__sig
) \

111 
__mask
 = 
	`__sigmask
 (
__sig
); \

112 
__w‹d
 = 
	`__sigw‹d
 (
__sig
); \

113  
BODY
; \

114 }

	)

116 
__SIGSETFN
 (
__sigismembî
, (
__£t
->
__vÆ
[
__w‹d
] & 
__mask
) ? 1 : 0, const)

117 
__SIGSETFN
 (
__sigadd£t
, ((
__£t
->
__vÆ
[
__w‹d
] |
__mask
), 0), )

118 
__SIGSETFN
 (
__sigdñ£t
, ((
__£t
->
__vÆ
[
__w‹d
] &~
__mask
), 0), )

120 #unde‡
__SIGSETFN


	@/usr/include/bits/stdio-lock.h

19 #i‚de‡
_BITS_STDIO_LOCK_H


20 
	#_BITS_STDIO_LOCK_H
 1

	)

22 
	~<bôs/libc-lock.h
>

23 
	~<lowÀvñlock.h
>

27 
	#_IO_lock_öex≥nsive
 1

	)

29 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

31 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

33 
	#_IO_lock_öô
(
_«me
) \

34 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

36 
	#_IO_lock_föi
(
_«me
) \

37 ((Ë0)

	)

39 
	#_IO_lock_lock
(
_«me
) \

41 *
__£lf
 = 
THREAD_SELF
; \

42 i‡((
_«me
).
ow√r
 !
__£lf
) \

44 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

45 (
_«me
).
ow√r
 = 
__£lf
; \

47 ++(
_«me
).
˙t
; \

48 } 0)

	)

50 
	#_IO_lock_åylock
(
_«me
) \

52 
__ªsu…
 = 0; \

53 *
__£lf
 = 
THREAD_SELF
; \

54 i‡((
_«me
).
ow√r
 !
__£lf
) \

56 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

58 (
_«me
).
ow√r
 = 
__£lf
; \

59 (
_«me
).
˙t
 = 1; \

62 
__ªsu…
 = 
EBUSY
; \

65 ++(
_«me
).
˙t
; \

66 
__ªsu…
; \

67 })

	)

69 
	#_IO_lock_u∆ock
(
_«me
) \

71 i‡(--(
_«me
).
˙t
 == 0) \

73 (
_«me
).
ow√r
 = 
NULL
; \

74 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

76 } 0)

	)

80 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

81 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

82 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

83 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

84 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

85 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

87 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


89 #ifde‡
__EXCEPTIONS


90 
	#_IO_acquúe_lock
(
_Â
) \

92 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

93 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

94 (
_Â
); \

95 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

96 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

98 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

99 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

100 (
_Â
); \

101 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

103 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

104 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

106 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/timex.h

18 #i‚def 
_BITS_TIMEX_H


19 
	#_BITS_TIMEX_H
 1

	)

21 
	~<bôs/ty≥s.h
>

25 
	stimex


27 
	mmodes
;

28 
__sysˇŒ_¶⁄g_t
 
	moff£t
;

29 
__sysˇŒ_¶⁄g_t
 
	m‰eq
;

30 
__sysˇŒ_¶⁄g_t
 
	mmaxîr‹
;

31 
__sysˇŒ_¶⁄g_t
 
	me°îr‹
;

32 
	m°©us
;

33 
__sysˇŒ_¶⁄g_t
 
	mc⁄°™t
;

34 
__sysˇŒ_¶⁄g_t
 
	m¥ecisi⁄
;

35 
__sysˇŒ_¶⁄g_t
 
	mtﬁî™˚
;

36 
timevÆ
 
	mtime
;

37 
__sysˇŒ_¶⁄g_t
 
	mtick
;

38 
__sysˇŒ_¶⁄g_t
 
	mµs‰eq
;

39 
__sysˇŒ_¶⁄g_t
 
	mjôãr
;

40 
	mshi·
;

41 
__sysˇŒ_¶⁄g_t
 
	m°abû
;

42 
__sysˇŒ_¶⁄g_t
 
	mjô˙t
;

43 
__sysˇŒ_¶⁄g_t
 
	mˇl˙t
;

44 
__sysˇŒ_¶⁄g_t
 
	mîr˙t
;

45 
__sysˇŒ_¶⁄g_t
 
	m°b˙t
;

47 
	mèi
;

56 
	#ADJ_OFFSET
 0x0001

	)

57 
	#ADJ_FREQUENCY
 0x0002

	)

58 
	#ADJ_MAXERROR
 0x0004

	)

59 
	#ADJ_ESTERROR
 0x0008

	)

60 
	#ADJ_STATUS
 0x0010

	)

61 
	#ADJ_TIMECONST
 0x0020

	)

62 
	#ADJ_TAI
 0x0080

	)

63 
	#ADJ_MICRO
 0x1000

	)

64 
	#ADJ_NANO
 0x2000

	)

65 
	#ADJ_TICK
 0x4000

	)

66 
	#ADJ_OFFSET_SINGLESHOT
 0x8001

	)

67 
	#ADJ_OFFSET_SS_READ
 0xa001

	)

70 
	#MOD_OFFSET
 
ADJ_OFFSET


	)

71 
	#MOD_FREQUENCY
 
ADJ_FREQUENCY


	)

72 
	#MOD_MAXERROR
 
ADJ_MAXERROR


	)

73 
	#MOD_ESTERROR
 
ADJ_ESTERROR


	)

74 
	#MOD_STATUS
 
ADJ_STATUS


	)

75 
	#MOD_TIMECONST
 
ADJ_TIMECONST


	)

76 
	#MOD_CLKB
 
ADJ_TICK


	)

77 
	#MOD_CLKA
 
ADJ_OFFSET_SINGLESHOT


	)

78 
	#MOD_TAI
 
ADJ_TAI


	)

79 
	#MOD_MICRO
 
ADJ_MICRO


	)

80 
	#MOD_NANO
 
ADJ_NANO


	)

84 
	#STA_PLL
 0x0001

	)

85 
	#STA_PPSFREQ
 0x0002

	)

86 
	#STA_PPSTIME
 0x0004

	)

87 
	#STA_FLL
 0x0008

	)

89 
	#STA_INS
 0x0010

	)

90 
	#STA_DEL
 0x0020

	)

91 
	#STA_UNSYNC
 0x0040

	)

92 
	#STA_FREQHOLD
 0x0080

	)

94 
	#STA_PPSSIGNAL
 0x0100

	)

95 
	#STA_PPSJITTER
 0x0200

	)

96 
	#STA_PPSWANDER
 0x0400

	)

97 
	#STA_PPSERROR
 0x0800

	)

99 
	#STA_CLOCKERR
 0x1000

	)

100 
	#STA_NANO
 0x2000

	)

101 
	#STA_MODE
 0x4000

	)

102 
	#STA_CLK
 0x8000

	)

105 
	#STA_RONLY
 (
STA_PPSSIGNAL
 | 
STA_PPSJITTER
 | 
STA_PPSWANDER
 | \

106 
STA_PPSERROR
 | 
STA_CLOCKERR
 | 
STA_NANO
 | 
STA_MODE
 | 
STA_CLK
)

	)

	@/usr/include/bits/typesizes.h

19 #i‚de‡
_BITS_TYPES_H


23 #i‚def 
_BITS_TYPESIZES_H


24 
	#_BITS_TYPESIZES_H
 1

	)

30 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


31 
	#__SYSCALL_SLONG_TYPE
 
__SQUAD_TYPE


	)

32 
	#__SYSCALL_ULONG_TYPE
 
__UQUAD_TYPE


	)

34 
	#__SYSCALL_SLONG_TYPE
 
__SLONGWORD_TYPE


	)

35 
	#__SYSCALL_ULONG_TYPE
 
__ULONGWORD_TYPE


	)

38 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

39 
	#__UID_T_TYPE
 
__U32_TYPE


	)

40 
	#__GID_T_TYPE
 
__U32_TYPE


	)

41 
	#__INO_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

42 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

43 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

44 #ifde‡
__x86_64__


45 
	#__NLINK_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

46 
	#__FSWORD_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

48 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

49 
	#__FSWORD_T_TYPE
 
__SWORD_TYPE


	)

51 
	#__OFF_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

52 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

53 
	#__PID_T_TYPE
 
__S32_TYPE


	)

54 
	#__RLIM_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

55 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

56 
	#__BLKCNT_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

57 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

58 
	#__FSBLKCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

59 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

60 
	#__FSFILCNT_T_TYPE
 
__SYSCALL_ULONG_TYPE


	)

61 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

62 
	#__ID_T_TYPE
 
__U32_TYPE


	)

63 
	#__CLOCK_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

64 
	#__TIME_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

65 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

66 
	#__SUSECONDS_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

67 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

68 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

69 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

70 
	#__TIMER_T_TYPE
 *

	)

71 
	#__BLKSIZE_T_TYPE
 
__SYSCALL_SLONG_TYPE


	)

72 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

73 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

75 #ifde‡
__x86_64__


79 
	#__OFF_T_MATCHES_OFF64_T
 1

	)

82 
	#__INO_T_MATCHES_INO64_T
 1

	)

86 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wchar.h

19 #i‚de‡
_BITS_WCHAR_H


20 
	#_BITS_WCHAR_H
 1

	)

33 #ifde‡
__WCHAR_MAX__


34 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

35 #ñi‡
L
'\0' - 1 > 0

36 
	#__WCHAR_MAX
 (0xffffffffu + 
L
'\0')

	)

38 
	#__WCHAR_MAX
 (0x7ffffff‡+ 
L
'\0')

	)

41 #ifde‡
__WCHAR_MIN__


42 
	#__WCHAR_MIN
 
__WCHAR_MIN__


	)

43 #ñi‡
L
'\0' - 1 > 0

44 
	#__WCHAR_MIN
 (
L
'\0' + 0)

	)

46 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__
 && !deföed 
__ILP32__


4 
	#__WORDSIZE
 64

	)

6 
	#__WORDSIZE
 32

	)

9 #ifde‡
__x86_64__


10 
	#__WORDSIZE_TIME64_COMPAT32
 1

	)

12 
	#__SYSCALL_WORDSIZE
 64

	)

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

104 
__BEGIN_NAMESPACE_STD


110 
__ex˘y≥
 (
iß um
);

111 
__ex˘y≥
 (
ißÕha
);

112 
__ex˘y≥
 (
is˙ål
);

113 
__ex˘y≥
 (
isdigô
);

114 
__ex˘y≥
 (
i¶owî
);

115 
__ex˘y≥
 (
isgøph
);

116 
__ex˘y≥
 (
i•röt
);

117 
__ex˘y≥
 (
i•un˘
);

118 
__ex˘y≥
 (
is•a˚
);

119 
__ex˘y≥
 (
isuµî
);

120 
__ex˘y≥
 (
isxdigô
);

124 
	$tﬁowî
 (
__c
Ë
__THROW
;

127 
	$touµî
 (
__c
Ë
__THROW
;

129 
__END_NAMESPACE_STD


133 #ifdef 
__USE_ISOC99


134 
__BEGIN_NAMESPACE_C99


136 
	`__ex˘y≥
 (
isbœnk
);

138 
__END_NAMESPACE_C99


141 #ifde‡
__USE_GNU


143 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


150 
	$ißscii
 (
__c
Ë
__THROW
;

154 
	$tﬂscii
 (
__c
Ë
__THROW
;

158 
	`__ex˘y≥
 (
_touµî
);

159 
	`__ex˘y≥
 (
_tﬁowî
);

163 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

164 (
__exãnsi⁄__
 \

165 ({ 
__ªs
; \

166 i‡( (
c
) > 1) \

168 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

170 
__c
 = (
c
); \

171 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

174 
__ªs
 = 
f
 
¨gs
; \

177 
__ªs
 = (
a
)[(Ë(
c
)]; \

178 
__ªs
; 
	}
}))

	)

180 #i‡!
deföed
 
__NO_CTYPE


181 #ifde‡
__is˘y≥_f


182 
	$__is˘y≥_f
 (
Ænum
)

183 
	$__is˘y≥_f
 (
Æpha
)

184 
	$__is˘y≥_f
 (
˙ål
)

185 
	$__is˘y≥_f
 (
digô
)

186 
	$__is˘y≥_f
 (
lowî
)

187 
	$__is˘y≥_f
 (
gøph
)

188 
	$__is˘y≥_f
 (
¥öt
)

189 
	$__is˘y≥_f
 (
pun˘
)

190 
	$__is˘y≥_f
 (
•a˚
)

191 
	$__is˘y≥_f
 (
uµî
)

192 
	$__is˘y≥_f
 (
xdigô
)

193 #ifde‡
__USE_ISOC99


194 
	$__is˘y≥_f
 (
bœnk
)

196 #ñi‡
deföed
 
__is˘y≥


197 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

198 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

199 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

200 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

201 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

202 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

203 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

204 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

205 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

206 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

207 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

208 #ifde‡
__USE_ISOC99


209 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

213 #ifde‡
__USE_EXTERN_INLINES


214 
__exã∫_ölöe
 

215 
	`__NTH
 (
	$tﬁowî
 (
__c
))

217  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

218 
	}
}

220 
__exã∫_ölöe
 

221 
__NTH
 (
	$touµî
 (
__c
))

223  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

224 
	}
}

227 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


228 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

229 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

232 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


233 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

234 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

236 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

237 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

243 #ifde‡
__USE_XOPEN2K8


257 
	~<xloˇÀ.h
>

261 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

262 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

264 
	#__ex˘y≥_l
(
«me
) \

265 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

271 
__ex˘y≥_l
 (
iß um_l
);

272 
__ex˘y≥_l
 (
ißÕha_l
);

273 
__ex˘y≥_l
 (
is˙ål_l
);

274 
__ex˘y≥_l
 (
isdigô_l
);

275 
__ex˘y≥_l
 (
i¶owî_l
);

276 
__ex˘y≥_l
 (
isgøph_l
);

277 
__ex˘y≥_l
 (
i•röt_l
);

278 
__ex˘y≥_l
 (
i•un˘_l
);

279 
__ex˘y≥_l
 (
is•a˚_l
);

280 
__ex˘y≥_l
 (
isuµî_l
);

281 
__ex˘y≥_l
 (
isxdigô_l
);

283 
__ex˘y≥_l
 (
isbœnk_l
);

287 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

288 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

291 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

292 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


295 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

296 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

297 
	#__touµî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

299 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

300 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

304 #i‚de‡
__NO_CTYPE


305 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

306 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

307 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

308 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

309 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

310 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

311 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

312 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

313 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

314 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

315 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

317 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


320 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

321 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

324 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

325 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

326 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

327 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

328 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

329 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

330 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

331 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

332 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

333 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

334 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

336 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

338 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


339 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

340 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

347 
__END_DECLS


	@/usr/include/gnu/stubs.h

6 #i‡!
deföed
 
__x86_64__


7 
	~<gnu/°ubs-32.h
>

9 #i‡
deföed
 
__x86_64__
 && deföed 
__LP64__


10 
	~<gnu/°ubs-64.h
>

12 #i‡
deföed
 
__x86_64__
 && deföed 
__ILP32__


13 
	~<gnu/°ubs-x32.h
>

	@/usr/include/linux/errno.h

1 
	~<asm/î∫o.h
>

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__FD_SETSIZE


22 
	#__FD_SETSIZE
 1024

	)

25 
	mfds_bôs
[
__FD_SETSIZE
 / (8 * ())];

26 } 
	t__kî√l_fd_£t
;

29 (*
	t__kî√l_sigh™dÀr_t
)();

32 
	t__kî√l_key_t
;

33 
	t__kî√l_mqd_t
;

35 
	~<asm/posix_ty≥s.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

41 
	#__STDC_IEC_559__
 1

	)

44 #ifde‡
__GCC_IEC_559_COMPLEX


45 #i‡
__GCC_IEC_559_COMPLEX
 > 0

46 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_559_COMPLEX__
 1

	)

54 
	#__STDC_ISO_10646__
 201103L

	)

57 
	#__STDC_NO_THREADS__
 1

	)

	@/usr/include/sys/cdefs.h

18 #i‚def 
_SYS_CDEFS_H


19 
	#_SYS_CDEFS_H
 1

	)

22 #i‚de‡
_FEATURES_H


23 
	~<„©uªs.h
>

29 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


34 #unde‡
__P


35 #unde‡
__PMT


37 #ifde‡
__GNUC__


41 #i‡
__GNUC_PREREQ
 (4, 6Ë&& !
deföed
 
_LIBC


42 
	#__LEAF
 , 
__Àaf__


	)

43 
	#__LEAF_ATTR
 
	`__©åibuã__
 ((
__Àaf__
))

	)

45 
	#__LEAF


	)

46 
	#__LEAF_ATTR


	)

54 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

55 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
))

	)

56 
	#__THROWNL
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

57 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
 
__LEAF
)Ë
	)
fct

59 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

60 
	#__THROW
 
	`throw
 ()

	)

61 
	#__THROWNL
 
	`throw
 ()

	)

62 
	#__NTH
(
f˘
Ë
__LEAF_ATTR
 f˘ 
	`throw
 ()

	)

64 
	#__THROW


	)

65 
	#__THROWNL


	)

66 
	#__NTH
(
f˘
Ë
	)
fct

72 
	#__ölöe


	)

74 
	#__THROW


	)

75 
	#__THROWNL


	)

76 
	#__NTH
(
f˘
Ë
	)
fct

82 
	#__P
(
¨gs
Ë
	)
args

83 
	#__PMT
(
¨gs
Ë
	)
args

88 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

89 
	#__STRING
(
x
Ë#x

	)

92 
	#__±r_t
 *

	)

93 
	#__l⁄g_doubÀ_t
 

	)

97 #ifdef 
__˝lu•lus


98 
	#__BEGIN_DECLS
 "C" {

	)

99 
	#__END_DECLS
 }

	)

101 
	#__BEGIN_DECLS


	)

102 
	#__END_DECLS


	)

111 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


112 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

113 
	#__END_NAMESPACE_STD
 }

	)

114 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

115 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

116 
	#__END_NAMESPACE_C99
 }

	)

117 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

122 
	#__BEGIN_NAMESPACE_STD


	)

123 
	#__END_NAMESPACE_STD


	)

124 
	#__USING_NAMESPACE_STD
(
«me
)

	)

125 
	#__BEGIN_NAMESPACE_C99


	)

126 
	#__END_NAMESPACE_C99


	)

127 
	#__USING_NAMESPACE_C99
(
«me
)

	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

134 
	#__f‹tify_fun˘i⁄
 
__exã∫_Æways_ölöe
 
__©åibuã_¨tificül__


	)

136 #i‡
__GNUC_PREREQ
 (4,3)

137 
	#__w¨nde˛
(
«me
, 
msg
) \

138 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

139 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

140 
	#__îr‹de˛
(
«me
, 
msg
) \

141 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

143 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

144 
	#__w¨«âr
(
msg
)

	)

145 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

149 #i‡
__GNUC_PREREQ
 (2,97)

151 
	#__Êex¨r
 []

	)

153 #ifde‡
__GNUC__


154 
	#__Êex¨r
 [0]

	)

156 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

157 
	#__Êex¨r
 []

	)

160 
	#__Êex¨r
 [1]

	)

176 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

178 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

179 #ifde‡
__˝lu•lus


180 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

181 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
__THROWNL
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

185 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

186 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

187 
	#__REDIRECT_NTHNL
(
«me
, 
¥Ÿo
, 
Æüs
) \

188 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROWNL


	)

190 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

191 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

204 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

205 
	#__©åibuã__
(
xyz
Ë

	)

211 #i‡
__GNUC_PREREQ
 (2,96)

212 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

214 
	#__©åibuã_mÆloc__


	)

219 #i‡
__GNUC_PREREQ
 (4, 3)

220 
	#__©åibuã_Æloc_size__
(
∑øms
) \

221 
	`__©åibuã__
 ((
__Æloc_size__
 
∑øms
))

	)

223 
	#__©åibuã_Æloc_size__
(
∑øms
Ë

	)

229 #i‡
__GNUC_PREREQ
 (2,96)

230 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

232 
	#__©åibuã_puª__


	)

236 #i‡
__GNUC_PREREQ
 (2,5)

237 
	#__©åibuã_c⁄°__
 
	`__©åibuã__
 ((
__c⁄°__
))

	)

239 
	#__©åibuã_c⁄°__


	)

245 #i‡
__GNUC_PREREQ
 (3,1)

246 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

247 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

249 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

250 
	#__©åibuã_noölöe__


	)

254 #i‡
__GNUC_PREREQ
 (3,2)

255 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

257 
	#__©åibuã_dïªˇãd__


	)

266 #i‡
__GNUC_PREREQ
 (2,8)

267 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

269 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

276 #i‡
__GNUC_PREREQ
 (2,97)

277 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

278 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

280 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

285 #i‡
__GNUC_PREREQ
 (3,3)

286 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

288 
	#__n⁄nuŒ
(
∑øms
)

	)

293 #i‡
__GNUC_PREREQ
 (3,4)

294 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

295 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

296 #i‡
__USE_FORTIFY_LEVEL
 > 0

297 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

300 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

302 #i‚de‡
__wur


303 
	#__wur


	)

307 #i‡
__GNUC_PREREQ
 (3,2)

308 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

310 
	#__Æways_ölöe
 
__ölöe


	)

315 #i‡
__GNUC_PREREQ
 (4,3)

316 
	#__©åibuã_¨tificül__
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

318 
	#__©åibuã_¨tificül__


	)

321 #ifde‡
__GNUC__


326 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__GNUC_GNU_INLINE__


327 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

328 
	#__exã∫_Æways_ölöe
 \

329 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

331 
	#__exã∫_ölöe
 
__ölöe


	)

332 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

335 
	#__exã∫_ölöe


	)

336 
	#__exã∫_Æways_ölöe


	)

341 #i‡
__GNUC_PREREQ
 (4,3)

342 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

343 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

350 #i‡!
__GNUC_PREREQ
 (2,8)

351 
	#__exãnsi⁄__


	)

355 #i‡!
__GNUC_PREREQ
 (2,92)

356 
	#__ª°ri˘


	)

362 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


363 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

365 #ifde‡
__GNUC__


366 
	#__ª°ri˘_¨r


	)

368 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

369 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

372 
	#__ª°ri˘_¨r


	)

377 #i‡
__GNUC__
 >= 3

378 
	#__glibc_u∆ikñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 0)

	)

379 
	#__glibc_likñy
(
c⁄d
Ë
	`__buûtö_ex≥˘
 ((c⁄d), 1)

	)

381 
	#__glibc_u∆ikñy
(
c⁄d
Ë(c⁄d)

	)

382 
	#__glibc_likñy
(
c⁄d
Ë(c⁄d)

	)

385 
	~<bôs/w‹dsize.h
>

387 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


388 
	#__LDBL_COMPAT
 1

	)

389 #ifde‡
__REDIRECT


390 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

391 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

392 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

393 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

394 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

395 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

396 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

397 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

398 
	#__LDBL_REDIR_DECL
(
«me
) \

399 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

400 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

401 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

402 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

403 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

406 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


407 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

408 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

409 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

410 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

411 
	#__LDBL_REDIR_DECL
(
«me
)

	)

412 #ifde‡
__REDIRECT


413 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

414 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

415 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/X11/keysymdef.h

115 
	#XK_VoidSymbﬁ
 0xfffff‡

	)

117 #ifde‡
XK_MISCELLANY


124 
	#XK_BackS∑˚
 0xff08

	)

125 
	#XK_Tab
 0xff09

	)

126 
	#XK_Löe„ed
 0xff0®

	)

127 
	#XK_CÀ¨
 0xff0b

	)

128 
	#XK_Rëu∫
 0xff0d

	)

129 
	#XK_Pau£
 0xff13

	)

130 
	#XK_S¸ﬁl_Lock
 0xff14

	)

131 
	#XK_Sys_Req
 0xff15

	)

132 
	#XK_Esˇ≥
 0xff1b

	)

133 
	#XK_Dñëe
 0xfff‡

	)

139 
	#XK_Mu…i_key
 0xff20

	)

140 
	#XK_Codeöput
 0xff37

	)

141 
	#XK_SögÀC™did©e
 0xff3c

	)

142 
	#XK_Mu…ùÀC™did©e
 0xff3d

	)

143 
	#XK_PªviousC™did©e
 0xff3e

	)

147 
	#XK_K™ji
 0xff21

	)

148 
	#XK_Muhík™
 0xff22

	)

149 
	#XK_Hík™_Mode
 0xff23

	)

150 
	#XK_Hík™
 0xff23

	)

151 
	#XK_Romaji
 0xff24

	)

152 
	#XK_Húag™a
 0xff25

	)

153 
	#XK_K©ak™a
 0xff26

	)

154 
	#XK_Húag™a_K©ak™a
 0xff27

	)

155 
	#XK_Zíkaku
 0xff28

	)

156 
	#XK_H™kaku
 0xff29

	)

157 
	#XK_Zíkaku_H™kaku
 0xff2®

	)

158 
	#XK_Touroku
 0xff2b

	)

159 
	#XK_Massyo
 0xff2¯

	)

160 
	#XK_K™a_Lock
 0xff2d

	)

161 
	#XK_K™a_Shi·
 0xff2ê

	)

162 
	#XK_Eisu_Shi·
 0xff2‡

	)

163 
	#XK_Eisu_toggÀ
 0xff30

	)

164 
	#XK_K™ji_B™gou
 0xff37

	)

165 
	#XK_Zí_Koho
 0xff3d

	)

166 
	#XK_M´_Koho
 0xff3ê

	)

172 
	#XK_Home
 0xff50

	)

173 
	#XK_Le·
 0xff51

	)

174 
	#XK_Up
 0xff52

	)

175 
	#XK_Right
 0xff53

	)

176 
	#XK_Down
 0xff54

	)

177 
	#XK_Pri‹
 0xff55

	)

178 
	#XK_Page_Up
 0xff55

	)

179 
	#XK_Next
 0xff56

	)

180 
	#XK_Page_Down
 0xff56

	)

181 
	#XK_End
 0xff57

	)

182 
	#XK_Begö
 0xff58

	)

187 
	#XK_Sñe˘
 0xff60

	)

188 
	#XK_Pröt
 0xff61

	)

189 
	#XK_Execuã
 0xff62

	)

190 
	#XK_In£π
 0xff63

	)

191 
	#XK_Undo
 0xff65

	)

192 
	#XK_Redo
 0xff66

	)

193 
	#XK_Míu
 0xff67

	)

194 
	#XK_Föd
 0xff68

	)

195 
	#XK_C™˚l
 0xff69

	)

196 
	#XK_Hñp
 0xff6®

	)

197 
	#XK_Bªak
 0xff6b

	)

198 
	#XK_Mode_swôch
 0xff7ê

	)

199 
	#XK_s¸ùt_swôch
 0xff7ê

	)

200 
	#XK_Num_Lock
 0xff7f

	)

204 
	#XK_KP_S∑˚
 0xff80

	)

205 
	#XK_KP_Tab
 0xff89

	)

206 
	#XK_KP_E¡î
 0xff8d

	)

207 
	#XK_KP_F1
 0xff91

	)

208 
	#XK_KP_F2
 0xff92

	)

209 
	#XK_KP_F3
 0xff93

	)

210 
	#XK_KP_F4
 0xff94

	)

211 
	#XK_KP_Home
 0xff95

	)

212 
	#XK_KP_Le·
 0xff96

	)

213 
	#XK_KP_Up
 0xff97

	)

214 
	#XK_KP_Right
 0xff98

	)

215 
	#XK_KP_Down
 0xff99

	)

216 
	#XK_KP_Pri‹
 0xff9a

	)

217 
	#XK_KP_Page_Up
 0xff9a

	)

218 
	#XK_KP_Next
 0xff9b

	)

219 
	#XK_KP_Page_Down
 0xff9b

	)

220 
	#XK_KP_End
 0xff9c

	)

221 
	#XK_KP_Begö
 0xff9d

	)

222 
	#XK_KP_In£π
 0xff9e

	)

223 
	#XK_KP_Dñëe
 0xff9f

	)

224 
	#XK_KP_EquÆ
 0xffbd

	)

225 
	#XK_KP_Mu…ùly
 0xfÁa

	)

226 
	#XK_KP_Add
 0xfÁb

	)

227 
	#XK_KP_Sï¨©‹
 0xfÁ¯

	)

228 
	#XK_KP_Subåa˘
 0xfÁd

	)

229 
	#XK_KP_DecimÆ
 0xfÁe

	)

230 
	#XK_KP_Divide
 0xfÁf

	)

232 
	#XK_KP_0
 0xffb0

	)

233 
	#XK_KP_1
 0xffb1

	)

234 
	#XK_KP_2
 0xffb2

	)

235 
	#XK_KP_3
 0xffb3

	)

236 
	#XK_KP_4
 0xffb4

	)

237 
	#XK_KP_5
 0xffb5

	)

238 
	#XK_KP_6
 0xffb6

	)

239 
	#XK_KP_7
 0xffb7

	)

240 
	#XK_KP_8
 0xffb8

	)

241 
	#XK_KP_9
 0xffb9

	)

252 
	#XK_F1
 0xffbe

	)

253 
	#XK_F2
 0xffbf

	)

254 
	#XK_F3
 0xffc0

	)

255 
	#XK_F4
 0xffc1

	)

256 
	#XK_F5
 0xffc2

	)

257 
	#XK_F6
 0xffc3

	)

258 
	#XK_F7
 0xffc4

	)

259 
	#XK_F8
 0xffc5

	)

260 
	#XK_F9
 0xffc6

	)

261 
	#XK_F10
 0xffc7

	)

262 
	#XK_F11
 0xffc8

	)

263 
	#XK_L1
 0xffc8

	)

264 
	#XK_F12
 0xffc9

	)

265 
	#XK_L2
 0xffc9

	)

266 
	#XK_F13
 0xffˇ

	)

267 
	#XK_L3
 0xffˇ

	)

268 
	#XK_F14
 0xffcb

	)

269 
	#XK_L4
 0xffcb

	)

270 
	#XK_F15
 0xffcc

	)

271 
	#XK_L5
 0xffcc

	)

272 
	#XK_F16
 0xffcd

	)

273 
	#XK_L6
 0xffcd

	)

274 
	#XK_F17
 0xff˚

	)

275 
	#XK_L7
 0xff˚

	)

276 
	#XK_F18
 0xffcf

	)

277 
	#XK_L8
 0xffcf

	)

278 
	#XK_F19
 0xffd0

	)

279 
	#XK_L9
 0xffd0

	)

280 
	#XK_F20
 0xffd1

	)

281 
	#XK_L10
 0xffd1

	)

282 
	#XK_F21
 0xffd2

	)

283 
	#XK_R1
 0xffd2

	)

284 
	#XK_F22
 0xffd3

	)

285 
	#XK_R2
 0xffd3

	)

286 
	#XK_F23
 0xffd4

	)

287 
	#XK_R3
 0xffd4

	)

288 
	#XK_F24
 0xffd5

	)

289 
	#XK_R4
 0xffd5

	)

290 
	#XK_F25
 0xffd6

	)

291 
	#XK_R5
 0xffd6

	)

292 
	#XK_F26
 0xffd7

	)

293 
	#XK_R6
 0xffd7

	)

294 
	#XK_F27
 0xffd8

	)

295 
	#XK_R7
 0xffd8

	)

296 
	#XK_F28
 0xffd9

	)

297 
	#XK_R8
 0xffd9

	)

298 
	#XK_F29
 0xffda

	)

299 
	#XK_R9
 0xffda

	)

300 
	#XK_F30
 0xffdb

	)

301 
	#XK_R10
 0xffdb

	)

302 
	#XK_F31
 0xffdc

	)

303 
	#XK_R11
 0xffdc

	)

304 
	#XK_F32
 0xffdd

	)

305 
	#XK_R12
 0xffdd

	)

306 
	#XK_F33
 0xffde

	)

307 
	#XK_R13
 0xffde

	)

308 
	#XK_F34
 0xffdf

	)

309 
	#XK_R14
 0xffdf

	)

310 
	#XK_F35
 0xf„0

	)

311 
	#XK_R15
 0xf„0

	)

315 
	#XK_Shi·_L
 0xf„1

	)

316 
	#XK_Shi·_R
 0xf„2

	)

317 
	#XK_C⁄åﬁ_L
 0xf„3

	)

318 
	#XK_C⁄åﬁ_R
 0xf„4

	)

319 
	#XK_C≠s_Lock
 0xf„5

	)

320 
	#XK_Shi·_Lock
 0xf„6

	)

322 
	#XK_Mëa_L
 0xf„7

	)

323 
	#XK_Mëa_R
 0xf„8

	)

324 
	#XK_A…_L
 0xf„9

	)

325 
	#XK_A…_R
 0xf„®

	)

326 
	#XK_Su≥r_L
 0xf„b

	)

327 
	#XK_Su≥r_R
 0xf„¯

	)

328 
	#XK_Hy≥r_L
 0xf„d

	)

329 
	#XK_Hy≥r_R
 0xf„ê

	)

338 #ifde‡
XK_XKB_KEYS


339 
	#XK_ISO_Lock
 0x„01

	)

340 
	#XK_ISO_Levñ2_L©ch
 0x„02

	)

341 
	#XK_ISO_Levñ3_Shi·
 0x„03

	)

342 
	#XK_ISO_Levñ3_L©ch
 0x„04

	)

343 
	#XK_ISO_Levñ3_Lock
 0x„05

	)

344 
	#XK_ISO_Levñ5_Shi·
 0x„11

	)

345 
	#XK_ISO_Levñ5_L©ch
 0x„12

	)

346 
	#XK_ISO_Levñ5_Lock
 0x„13

	)

347 
	#XK_ISO_Group_Shi·
 0xff7ê

	)

348 
	#XK_ISO_Group_L©ch
 0x„06

	)

349 
	#XK_ISO_Group_Lock
 0x„07

	)

350 
	#XK_ISO_Next_Group
 0x„08

	)

351 
	#XK_ISO_Next_Group_Lock
 0x„09

	)

352 
	#XK_ISO_Pªv_Group
 0x„0a

	)

353 
	#XK_ISO_Pªv_Group_Lock
 0x„0b

	)

354 
	#XK_ISO_Fú°_Group
 0x„0c

	)

355 
	#XK_ISO_Fú°_Group_Lock
 0x„0d

	)

356 
	#XK_ISO_La°_Group
 0x„0e

	)

357 
	#XK_ISO_La°_Group_Lock
 0x„0f

	)

359 
	#XK_ISO_Le·_Tab
 0x„20

	)

360 
	#XK_ISO_Move_Löe_Up
 0x„21

	)

361 
	#XK_ISO_Move_Löe_Down
 0x„22

	)

362 
	#XK_ISO_P¨tül_Löe_Up
 0x„23

	)

363 
	#XK_ISO_P¨tül_Löe_Down
 0x„24

	)

364 
	#XK_ISO_P¨tül_S∑˚_Le·
 0x„25

	)

365 
	#XK_ISO_P¨tül_S∑˚_Right
 0x„26

	)

366 
	#XK_ISO_Së_M¨gö_Le·
 0x„27

	)

367 
	#XK_ISO_Së_M¨gö_Right
 0x„28

	)

368 
	#XK_ISO_Rñó£_M¨gö_Le·
 0x„29

	)

369 
	#XK_ISO_Rñó£_M¨gö_Right
 0x„2a

	)

370 
	#XK_ISO_Rñó£_BŸh_M¨gös
 0x„2b

	)

371 
	#XK_ISO_Fa°_Curs‹_Le·
 0x„2c

	)

372 
	#XK_ISO_Fa°_Curs‹_Right
 0x„2d

	)

373 
	#XK_ISO_Fa°_Curs‹_Up
 0x„2e

	)

374 
	#XK_ISO_Fa°_Curs‹_Down
 0x„2f

	)

375 
	#XK_ISO_C⁄töuous_Undîlöe
 0x„30

	)

376 
	#XK_ISO_Disc⁄töuous_Undîlöe
 0x„31

	)

377 
	#XK_ISO_Emphasize
 0x„32

	)

378 
	#XK_ISO_Cíãr_Obje˘
 0x„33

	)

379 
	#XK_ISO_E¡î
 0x„34

	)

381 
	#XK_dód_gøve
 0x„50

	)

382 
	#XK_dód_acuã
 0x„51

	)

383 
	#XK_dód_cúcumÊex
 0x„52

	)

384 
	#XK_dód_tûde
 0x„53

	)

385 
	#XK_dód_≥ri•omíi
 0x„53

	)

386 
	#XK_dód_ma¸⁄
 0x„54

	)

387 
	#XK_dód_bªve
 0x„55

	)

388 
	#XK_dód_abovedŸ
 0x„56

	)

389 
	#XK_dód_düîesis
 0x„57

	)

390 
	#XK_dód_abovîög
 0x„58

	)

391 
	#XK_dód_doubÀacuã
 0x„59

	)

392 
	#XK_dód_ˇr⁄
 0x„5a

	)

393 
	#XK_dód_˚dûœ
 0x„5b

	)

394 
	#XK_dód_og⁄ek
 0x„5c

	)

395 
	#XK_dód_iŸa
 0x„5d

	)

396 
	#XK_dód_voi˚d_sound
 0x„5e

	)

397 
	#XK_dód_£mivoi˚d_sound
 0x„5f

	)

398 
	#XK_dód_bñowdŸ
 0x„60

	)

399 
	#XK_dód_hook
 0x„61

	)

400 
	#XK_dód_h‹n
 0x„62

	)

401 
	#XK_dód_°roke
 0x„63

	)

402 
	#XK_dód_abovecomma
 0x„64

	)

403 
	#XK_dód_psûi
 0x„64

	)

404 
	#XK_dód_abovîevî£dcomma
 0x„65

	)

405 
	#XK_dód_dasü
 0x„65

	)

406 
	#XK_dód_doubÀgøve
 0x„66

	)

407 
	#XK_dód_bñowrög
 0x„67

	)

408 
	#XK_dód_bñowma¸⁄
 0x„68

	)

409 
	#XK_dód_bñowcúcumÊex
 0x„69

	)

410 
	#XK_dód_bñowtûde
 0x„6a

	)

411 
	#XK_dód_bñowbªve
 0x„6b

	)

412 
	#XK_dód_bñowdüîesis
 0x„6c

	)

413 
	#XK_dód_övîãdbªve
 0x„6d

	)

414 
	#XK_dód_bñowcomma
 0x„6e

	)

415 
	#XK_dód_cuºícy
 0x„6f

	)

418 
	#XK_dód_lowlöe
 0x„90

	)

419 
	#XK_dód_abovevîtiˇŒöe
 0x„91

	)

420 
	#XK_dód_bñowvîtiˇŒöe
 0x„92

	)

421 
	#XK_dód_l⁄gsﬁidusovîœy
 0x„93

	)

424 
	#XK_dód_a
 0x„80

	)

425 
	#XK_dód_A
 0x„81

	)

426 
	#XK_dód_e
 0x„82

	)

427 
	#XK_dód_E
 0x„83

	)

428 
	#XK_dód_i
 0x„84

	)

429 
	#XK_dód_I
 0x„85

	)

430 
	#XK_dód_o
 0x„86

	)

431 
	#XK_dód_O
 0x„87

	)

432 
	#XK_dód_u
 0x„88

	)

433 
	#XK_dód_U
 0x„89

	)

434 
	#XK_dód_smÆl_schwa
 0x„8a

	)

435 
	#XK_dód_ˇpôÆ_schwa
 0x„8b

	)

437 
	#XK_dód_gªek
 0x„8c

	)

439 
	#XK_Fú°_VútuÆ_S¸ìn
 0x„d0

	)

440 
	#XK_Pªv_VútuÆ_S¸ìn
 0x„d1

	)

441 
	#XK_Next_VútuÆ_S¸ìn
 0x„d2

	)

442 
	#XK_La°_VútuÆ_S¸ìn
 0x„d4

	)

443 
	#XK_Tîmö©e_Sîvî
 0x„d5

	)

445 
	#XK_Ac˚ssX_E«bÀ
 0x„70

	)

446 
	#XK_Ac˚ssX_Fìdback_E«bÀ
 0x„71

	)

447 
	#XK_RïótKeys_E«bÀ
 0x„72

	)

448 
	#XK_SlowKeys_E«bÀ
 0x„73

	)

449 
	#XK_Boun˚Keys_E«bÀ
 0x„74

	)

450 
	#XK_StickyKeys_E«bÀ
 0x„75

	)

451 
	#XK_Mou£Keys_E«bÀ
 0x„76

	)

452 
	#XK_Mou£Keys_Ac˚l_E«bÀ
 0x„77

	)

453 
	#XK_Ovîœy1_E«bÀ
 0x„78

	)

454 
	#XK_Ovîœy2_E«bÀ
 0x„79

	)

455 
	#XK_AudibÀBñl_E«bÀ
 0x„7a

	)

457 
	#XK_Poöãr_Le·
 0x„e0

	)

458 
	#XK_Poöãr_Right
 0x„e1

	)

459 
	#XK_Poöãr_Up
 0x„e2

	)

460 
	#XK_Poöãr_Down
 0x„e3

	)

461 
	#XK_Poöãr_UpLe·
 0x„e4

	)

462 
	#XK_Poöãr_UpRight
 0x„e5

	)

463 
	#XK_Poöãr_DownLe·
 0x„e6

	)

464 
	#XK_Poöãr_DownRight
 0x„e7

	)

465 
	#XK_Poöãr_Buâ⁄_DÊt
 0x„e8

	)

466 
	#XK_Poöãr_Buâ⁄1
 0x„e9

	)

467 
	#XK_Poöãr_Buâ⁄2
 0x„ó

	)

468 
	#XK_Poöãr_Buâ⁄3
 0x„eb

	)

469 
	#XK_Poöãr_Buâ⁄4
 0x„ec

	)

470 
	#XK_Poöãr_Buâ⁄5
 0x„ed

	)

471 
	#XK_Poöãr_DblClick_DÊt
 0x„ì

	)

472 
	#XK_Poöãr_DblClick1
 0x„ef

	)

473 
	#XK_Poöãr_DblClick2
 0x„f0

	)

474 
	#XK_Poöãr_DblClick3
 0x„f1

	)

475 
	#XK_Poöãr_DblClick4
 0x„f2

	)

476 
	#XK_Poöãr_DblClick5
 0x„f3

	)

477 
	#XK_Poöãr_Døg_DÊt
 0x„f4

	)

478 
	#XK_Poöãr_Døg1
 0x„f5

	)

479 
	#XK_Poöãr_Døg2
 0x„f6

	)

480 
	#XK_Poöãr_Døg3
 0x„f7

	)

481 
	#XK_Poöãr_Døg4
 0x„f8

	)

482 
	#XK_Poöãr_Døg5
 0x„fd

	)

484 
	#XK_Poöãr_E«bÀKeys
 0x„f9

	)

485 
	#XK_Poöãr_Ac˚Àøã
 0x„Á

	)

486 
	#XK_Poöãr_DÊtBäNext
 0x„fb

	)

487 
	#XK_Poöãr_DÊtBäPªv
 0x„fc

	)

491 
	#XK_ch
 0x„a0

	)

492 
	#XK_Ch
 0x„a1

	)

493 
	#XK_CH
 0x„a2

	)

494 
	#XK_c_h
 0x„a3

	)

495 
	#XK_C_h
 0x„a4

	)

496 
	#XK_C_H
 0x„a5

	)

505 #ifde‡
XK_3270


506 
	#XK_3270_Du∂iˇã
 0xfd01

	)

507 
	#XK_3270_FõldM¨k
 0xfd02

	)

508 
	#XK_3270_Right2
 0xfd03

	)

509 
	#XK_3270_Le·2
 0xfd04

	)

510 
	#XK_3270_BackTab
 0xfd05

	)

511 
	#XK_3270_Eø£EOF
 0xfd06

	)

512 
	#XK_3270_Eø£I≈ut
 0xfd07

	)

513 
	#XK_3270_Re£t
 0xfd08

	)

514 
	#XK_3270_Quô
 0xfd09

	)

515 
	#XK_3270_PA1
 0xfd0a

	)

516 
	#XK_3270_PA2
 0xfd0b

	)

517 
	#XK_3270_PA3
 0xfd0c

	)

518 
	#XK_3270_Te°
 0xfd0d

	)

519 
	#XK_3270_Aân
 0xfd0e

	)

520 
	#XK_3270_Curs‹Blök
 0xfd0f

	)

521 
	#XK_3270_A…Curs‹
 0xfd10

	)

522 
	#XK_3270_KeyClick
 0xfd11

	)

523 
	#XK_3270_Jump
 0xfd12

	)

524 
	#XK_3270_Idít
 0xfd13

	)

525 
	#XK_3270_RuÀ
 0xfd14

	)

526 
	#XK_3270_C›y
 0xfd15

	)

527 
	#XK_3270_Pœy
 0xfd16

	)

528 
	#XK_3270_Sëup
 0xfd17

	)

529 
	#XK_3270_Rec‹d
 0xfd18

	)

530 
	#XK_3270_Ch™geS¸ìn
 0xfd19

	)

531 
	#XK_3270_DñëeW‹d
 0xfd1a

	)

532 
	#XK_3270_ExSñe˘
 0xfd1b

	)

533 
	#XK_3270_Curs‹Sñe˘
 0xfd1c

	)

534 
	#XK_3270_PrötS¸ìn
 0xfd1d

	)

535 
	#XK_3270_E¡î
 0xfd1e

	)

543 #ifde‡
XK_LATIN1


544 
	#XK_•a˚
 0x0020

	)

545 
	#XK_ex˛am
 0x0021

	)

546 
	#XK_quŸedbl
 0x0022

	)

547 
	#XK_numbîsign
 0x0023

	)

548 
	#XK_dﬁœr
 0x0024

	)

549 
	#XK_≥r˚¡
 0x0025

	)

550 
	#XK_am≥rßnd
 0x0026

	)

551 
	#XK_≠o°r›he
 0x0027

	)

552 
	#XK_quŸîight
 0x0027

	)

553 
	#XK_∑ª∆e·
 0x0028

	)

554 
	#XK_∑ªƒight
 0x0029

	)

555 
	#XK_a°îisk
 0x002®

	)

556 
	#XK_∂us
 0x002b

	)

557 
	#XK_comma
 0x002¯

	)

558 
	#XK_möus
 0x002d

	)

559 
	#XK_≥riod
 0x002ê

	)

560 
	#XK_¶ash
 0x002‡

	)

561 
	#XK_0
 0x0030

	)

562 
	#XK_1
 0x0031

	)

563 
	#XK_2
 0x0032

	)

564 
	#XK_3
 0x0033

	)

565 
	#XK_4
 0x0034

	)

566 
	#XK_5
 0x0035

	)

567 
	#XK_6
 0x0036

	)

568 
	#XK_7
 0x0037

	)

569 
	#XK_8
 0x0038

	)

570 
	#XK_9
 0x0039

	)

571 
	#XK_cﬁ⁄
 0x003®

	)

572 
	#XK_£micﬁ⁄
 0x003b

	)

573 
	#XK_Àss
 0x003¯

	)

574 
	#XK_equÆ
 0x003d

	)

575 
	#XK_gª©î
 0x003ê

	)

576 
	#XK_que°i⁄
 0x003‡

	)

577 
	#XK_©
 0x0040

	)

578 
	#XK_A
 0x0041

	)

579 
	#XK_B
 0x0042

	)

580 
	#XK_C
 0x0043

	)

581 
	#XK_D
 0x0044

	)

582 
	#XK_E
 0x0045

	)

583 
	#XK_F
 0x0046

	)

584 
	#XK_G
 0x0047

	)

585 
	#XK_H
 0x0048

	)

586 
	#XK_I
 0x0049

	)

587 
	#XK_J
 0x004®

	)

588 
	#XK_K
 0x004b

	)

589 
	#XK_L
 0x004¯

	)

590 
	#XK_M
 0x004d

	)

591 
	#XK_N
 0x004ê

	)

592 
	#XK_O
 0x004‡

	)

593 
	#XK_P
 0x0050

	)

594 
	#XK_Q
 0x0051

	)

595 
	#XK_R
 0x0052

	)

596 
	#XK_S
 0x0053

	)

597 
	#XK_T
 0x0054

	)

598 
	#XK_U
 0x0055

	)

599 
	#XK_V
 0x0056

	)

600 
	#XK_W
 0x0057

	)

601 
	#XK_X
 0x0058

	)

602 
	#XK_Y
 0x0059

	)

603 
	#XK_Z
 0x005®

	)

604 
	#XK_bøckëÀ·
 0x005b

	)

605 
	#XK_back¶ash
 0x005¯

	)

606 
	#XK_bøckëright
 0x005d

	)

607 
	#XK_asciicúcum
 0x005ê

	)

608 
	#XK_undîsc‹e
 0x005‡

	)

609 
	#XK_gøve
 0x0060

	)

610 
	#XK_quŸñe·
 0x0060

	)

611 
	#XK_a
 0x0061

	)

612 
	#XK_b
 0x0062

	)

613 
	#XK_c
 0x0063

	)

614 
	#XK_d
 0x0064

	)

615 
	#XK_e
 0x0065

	)

616 
	#XK_f
 0x0066

	)

617 
	#XK_g
 0x0067

	)

618 
	#XK_h
 0x0068

	)

619 
	#XK_i
 0x0069

	)

620 
	#XK_j
 0x006®

	)

621 
	#XK_k
 0x006b

	)

622 
	#XK_l
 0x006¯

	)

623 
	#XK_m
 0x006d

	)

624 
	#XK_n
 0x006ê

	)

625 
	#XK_o
 0x006‡

	)

626 
	#XK_p
 0x0070

	)

627 
	#XK_q
 0x0071

	)

628 
	#XK_r
 0x0072

	)

629 
	#XK_s
 0x0073

	)

630 
	#XK_t
 0x0074

	)

631 
	#XK_u
 0x0075

	)

632 
	#XK_v
 0x0076

	)

633 
	#XK_w
 0x0077

	)

634 
	#XK_x
 0x0078

	)

635 
	#XK_y
 0x0079

	)

636 
	#XK_z
 0x007®

	)

637 
	#XK_bø˚À·
 0x007b

	)

638 
	#XK_b¨
 0x007¯

	)

639 
	#XK_bø˚right
 0x007d

	)

640 
	#XK_asciôûde
 0x007ê

	)

642 
	#XK_nobªak•a˚
 0x00a0

	)

643 
	#XK_ex˛amdown
 0x00a1

	)

644 
	#XK_˚¡
 0x00a2

	)

645 
	#XK_°îlög
 0x00a3

	)

646 
	#XK_cuºícy
 0x00a4

	)

647 
	#XK_yí
 0x00a5

	)

648 
	#XK_brokíb¨
 0x00a6

	)

649 
	#XK_£˘i⁄
 0x00a7

	)

650 
	#XK_düîesis
 0x00a8

	)

651 
	#XK_c›yright
 0x00a9

	)

652 
	#XK_‹d„mööe
 0x00Ø

	)

653 
	#XK_guûÀmŸÀ·
 0x00ab

	)

654 
	#XK_nŸsign
 0x00a¯

	)

655 
	#XK_hyphí
 0x00ad

	)

656 
	#XK_ªgi°îed
 0x00´

	)

657 
	#XK_ma¸⁄
 0x00a‡

	)

658 
	#XK_degªe
 0x00b0

	)

659 
	#XK_∂usmöus
 0x00b1

	)

660 
	#XK_twosu≥ri‹
 0x00b2

	)

661 
	#XK_thªesu≥ri‹
 0x00b3

	)

662 
	#XK_acuã
 0x00b4

	)

663 
	#XK_mu
 0x00b5

	)

664 
	#XK_∑øgøph
 0x00b6

	)

665 
	#XK_≥riod˚¡îed
 0x00b7

	)

666 
	#XK_˚dûœ
 0x00b8

	)

667 
	#XK_⁄esu≥ri‹
 0x00b9

	)

668 
	#XK_masculöe
 0x00b®

	)

669 
	#XK_guûÀmŸright
 0x00bb

	)

670 
	#XK_⁄equ¨ãr
 0x00b¯

	)

671 
	#XK_⁄ehÆf
 0x00bd

	)

672 
	#XK_thªequ¨ãrs
 0x00bê

	)

673 
	#XK_que°i⁄down
 0x00b‡

	)

674 
	#XK_Agøve
 0x00c0

	)

675 
	#XK_Aacuã
 0x00c1

	)

676 
	#XK_AcúcumÊex
 0x00c2

	)

677 
	#XK_Atûde
 0x00c3

	)

678 
	#XK_Adüîesis
 0x00c4

	)

679 
	#XK_Arög
 0x00c5

	)

680 
	#XK_AE
 0x00c6

	)

681 
	#XK_C˚dûœ
 0x00c7

	)

682 
	#XK_Egøve
 0x00c8

	)

683 
	#XK_Eacuã
 0x00c9

	)

684 
	#XK_EcúcumÊex
 0x00ˇ

	)

685 
	#XK_Edüîesis
 0x00cb

	)

686 
	#XK_Igøve
 0x00c¯

	)

687 
	#XK_Iacuã
 0x00cd

	)

688 
	#XK_IcúcumÊex
 0x00˚

	)

689 
	#XK_Idüîesis
 0x00c‡

	)

690 
	#XK_ETH
 0x00d0

	)

691 
	#XK_Eth
 0x00d0

	)

692 
	#XK_Ntûde
 0x00d1

	)

693 
	#XK_Ogøve
 0x00d2

	)

694 
	#XK_Oacuã
 0x00d3

	)

695 
	#XK_OcúcumÊex
 0x00d4

	)

696 
	#XK_Otûde
 0x00d5

	)

697 
	#XK_Odüîesis
 0x00d6

	)

698 
	#XK_mu…ùly
 0x00d7

	)

699 
	#XK_O¶ash
 0x00d8

	)

700 
	#XK_Ooblique
 0x00d8

	)

701 
	#XK_Ugøve
 0x00d9

	)

702 
	#XK_Uacuã
 0x00d®

	)

703 
	#XK_UcúcumÊex
 0x00db

	)

704 
	#XK_Udüîesis
 0x00d¯

	)

705 
	#XK_Yacuã
 0x00dd

	)

706 
	#XK_THORN
 0x00dê

	)

707 
	#XK_Th‹n
 0x00dê

	)

708 
	#XK_ssh¨p
 0x00d‡

	)

709 
	#XK_agøve
 0x00e0

	)

710 
	#XK_Øcuã
 0x00e1

	)

711 
	#XK_acúcumÊex
 0x00e2

	)

712 
	#XK_©ûde
 0x00e3

	)

713 
	#XK_adüîesis
 0x00e4

	)

714 
	#XK_¨ög
 0x00e5

	)

715 
	#XK_´
 0x00e6

	)

716 
	#XK_c˚dûœ
 0x00e7

	)

717 
	#XK_egøve
 0x00e8

	)

718 
	#XK_ócuã
 0x00e9

	)

719 
	#XK_ecúcumÊex
 0x00ó

	)

720 
	#XK_edüîesis
 0x00eb

	)

721 
	#XK_igøve
 0x00e¯

	)

722 
	#XK_ücuã
 0x00ed

	)

723 
	#XK_icúcumÊex
 0x00ì

	)

724 
	#XK_idüîesis
 0x00e‡

	)

725 
	#XK_ëh
 0x00f0

	)

726 
	#XK_¡ûde
 0x00f1

	)

727 
	#XK_ogøve
 0x00f2

	)

728 
	#XK_ﬂcuã
 0x00f3

	)

729 
	#XK_ocúcumÊex
 0x00f4

	)

730 
	#XK_Ÿûde
 0x00f5

	)

731 
	#XK_odüîesis
 0x00f6

	)

732 
	#XK_divisi⁄
 0x00f7

	)

733 
	#XK_o¶ash
 0x00f8

	)

734 
	#XK_ooblique
 0x00f8

	)

735 
	#XK_ugøve
 0x00f9

	)

736 
	#XK_uacuã
 0x00Á

	)

737 
	#XK_ucúcumÊex
 0x00fb

	)

738 
	#XK_udüîesis
 0x00f¯

	)

739 
	#XK_yacuã
 0x00fd

	)

740 
	#XK_th‹n
 0x00„

	)

741 
	#XK_ydüîesis
 0x00f‡

	)

749 #ifde‡
XK_LATIN2


750 
	#XK_Aog⁄ek
 0x01a1

	)

751 
	#XK_bªve
 0x01a2

	)

752 
	#XK_L°roke
 0x01a3

	)

753 
	#XK_Lˇr⁄
 0x01a5

	)

754 
	#XK_Sacuã
 0x01a6

	)

755 
	#XK_Sˇr⁄
 0x01a9

	)

756 
	#XK_S˚dûœ
 0x01Ø

	)

757 
	#XK_Tˇr⁄
 0x01ab

	)

758 
	#XK_Zacuã
 0x01a¯

	)

759 
	#XK_Zˇr⁄
 0x01´

	)

760 
	#XK_ZabovedŸ
 0x01a‡

	)

761 
	#XK_aog⁄ek
 0x01b1

	)

762 
	#XK_og⁄ek
 0x01b2

	)

763 
	#XK_l°roke
 0x01b3

	)

764 
	#XK_lˇr⁄
 0x01b5

	)

765 
	#XK_ßcuã
 0x01b6

	)

766 
	#XK_ˇr⁄
 0x01b7

	)

767 
	#XK_sˇr⁄
 0x01b9

	)

768 
	#XK_s˚dûœ
 0x01b®

	)

769 
	#XK_tˇr⁄
 0x01bb

	)

770 
	#XK_zacuã
 0x01b¯

	)

771 
	#XK_doubÀacuã
 0x01bd

	)

772 
	#XK_zˇr⁄
 0x01bê

	)

773 
	#XK_zabovedŸ
 0x01b‡

	)

774 
	#XK_Racuã
 0x01c0

	)

775 
	#XK_Abªve
 0x01c3

	)

776 
	#XK_Lacuã
 0x01c5

	)

777 
	#XK_Cacuã
 0x01c6

	)

778 
	#XK_Cˇr⁄
 0x01c8

	)

779 
	#XK_Eog⁄ek
 0x01ˇ

	)

780 
	#XK_Eˇr⁄
 0x01c¯

	)

781 
	#XK_Dˇr⁄
 0x01c‡

	)

782 
	#XK_D°roke
 0x01d0

	)

783 
	#XK_Nacuã
 0x01d1

	)

784 
	#XK_Nˇr⁄
 0x01d2

	)

785 
	#XK_OdoubÀacuã
 0x01d5

	)

786 
	#XK_Rˇr⁄
 0x01d8

	)

787 
	#XK_Urög
 0x01d9

	)

788 
	#XK_UdoubÀacuã
 0x01db

	)

789 
	#XK_T˚dûœ
 0x01dê

	)

790 
	#XK_øcuã
 0x01e0

	)

791 
	#XK_abªve
 0x01e3

	)

792 
	#XK_œcuã
 0x01e5

	)

793 
	#XK_ˇcuã
 0x01e6

	)

794 
	#XK_cˇr⁄
 0x01e8

	)

795 
	#XK_eog⁄ek
 0x01ó

	)

796 
	#XK_eˇr⁄
 0x01e¯

	)

797 
	#XK_dˇr⁄
 0x01e‡

	)

798 
	#XK_d°roke
 0x01f0

	)

799 
	#XK_«cuã
 0x01f1

	)

800 
	#XK_nˇr⁄
 0x01f2

	)

801 
	#XK_odoubÀacuã
 0x01f5

	)

802 
	#XK_rˇr⁄
 0x01f8

	)

803 
	#XK_urög
 0x01f9

	)

804 
	#XK_udoubÀacuã
 0x01fb

	)

805 
	#XK_t˚dûœ
 0x01„

	)

806 
	#XK_abovedŸ
 0x01f‡

	)

814 #ifde‡
XK_LATIN3


815 
	#XK_H°roke
 0x02a1

	)

816 
	#XK_HcúcumÊex
 0x02a6

	)

817 
	#XK_IabovedŸ
 0x02a9

	)

818 
	#XK_Gbªve
 0x02ab

	)

819 
	#XK_JcúcumÊex
 0x02a¯

	)

820 
	#XK_h°roke
 0x02b1

	)

821 
	#XK_hcúcumÊex
 0x02b6

	)

822 
	#XK_idŸÀss
 0x02b9

	)

823 
	#XK_gbªve
 0x02bb

	)

824 
	#XK_jcúcumÊex
 0x02b¯

	)

825 
	#XK_CabovedŸ
 0x02c5

	)

826 
	#XK_CcúcumÊex
 0x02c6

	)

827 
	#XK_GabovedŸ
 0x02d5

	)

828 
	#XK_GcúcumÊex
 0x02d8

	)

829 
	#XK_Ubªve
 0x02dd

	)

830 
	#XK_ScúcumÊex
 0x02dê

	)

831 
	#XK_ˇbovedŸ
 0x02e5

	)

832 
	#XK_ccúcumÊex
 0x02e6

	)

833 
	#XK_gabovedŸ
 0x02f5

	)

834 
	#XK_gcúcumÊex
 0x02f8

	)

835 
	#XK_ubªve
 0x02fd

	)

836 
	#XK_scúcumÊex
 0x02„

	)

845 #ifde‡
XK_LATIN4


846 
	#XK_kø
 0x03a2

	)

847 
	#XK_k≠∑
 0x03a2

	)

848 
	#XK_R˚dûœ
 0x03a3

	)

849 
	#XK_Itûde
 0x03a5

	)

850 
	#XK_L˚dûœ
 0x03a6

	)

851 
	#XK_Ema¸⁄
 0x03Ø

	)

852 
	#XK_G˚dûœ
 0x03ab

	)

853 
	#XK_T¶ash
 0x03a¯

	)

854 
	#XK_r˚dûœ
 0x03b3

	)

855 
	#XK_ôûde
 0x03b5

	)

856 
	#XK_l˚dûœ
 0x03b6

	)

857 
	#XK_ema¸⁄
 0x03b®

	)

858 
	#XK_g˚dûœ
 0x03bb

	)

859 
	#XK_t¶ash
 0x03b¯

	)

860 
	#XK_ENG
 0x03bd

	)

861 
	#XK_íg
 0x03b‡

	)

862 
	#XK_Ama¸⁄
 0x03c0

	)

863 
	#XK_Iog⁄ek
 0x03c7

	)

864 
	#XK_EabovedŸ
 0x03c¯

	)

865 
	#XK_Ima¸⁄
 0x03c‡

	)

866 
	#XK_N˚dûœ
 0x03d1

	)

867 
	#XK_Oma¸⁄
 0x03d2

	)

868 
	#XK_K˚dûœ
 0x03d3

	)

869 
	#XK_Uog⁄ek
 0x03d9

	)

870 
	#XK_Utûde
 0x03dd

	)

871 
	#XK_Uma¸⁄
 0x03dê

	)

872 
	#XK_ama¸⁄
 0x03e0

	)

873 
	#XK_iog⁄ek
 0x03e7

	)

874 
	#XK_óbovedŸ
 0x03e¯

	)

875 
	#XK_ima¸⁄
 0x03e‡

	)

876 
	#XK_n˚dûœ
 0x03f1

	)

877 
	#XK_oma¸⁄
 0x03f2

	)

878 
	#XK_k˚dûœ
 0x03f3

	)

879 
	#XK_uog⁄ek
 0x03f9

	)

880 
	#XK_utûde
 0x03fd

	)

881 
	#XK_uma¸⁄
 0x03„

	)

887 #ifde‡
XK_LATIN8


888 
	#XK_WcúcumÊex
 0x1000174

	)

889 
	#XK_wcúcumÊex
 0x1000175

	)

890 
	#XK_YcúcumÊex
 0x1000176

	)

891 
	#XK_ycúcumÊex
 0x1000177

	)

892 
	#XK_BabovedŸ
 0x1001e02

	)

893 
	#XK_babovedŸ
 0x1001e03

	)

894 
	#XK_DabovedŸ
 0x1001e0®

	)

895 
	#XK_dabovedŸ
 0x1001e0b

	)

896 
	#XK_FabovedŸ
 0x1001e1ê

	)

897 
	#XK_ÁbovedŸ
 0x1001e1‡

	)

898 
	#XK_MabovedŸ
 0x1001e40

	)

899 
	#XK_mabovedŸ
 0x1001e41

	)

900 
	#XK_PabovedŸ
 0x1001e56

	)

901 
	#XK_∑bovedŸ
 0x1001e57

	)

902 
	#XK_SabovedŸ
 0x1001e60

	)

903 
	#XK_ßbovedŸ
 0x1001e61

	)

904 
	#XK_TabovedŸ
 0x1001e6®

	)

905 
	#XK_èbovedŸ
 0x1001e6b

	)

906 
	#XK_Wgøve
 0x1001e80

	)

907 
	#XK_wgøve
 0x1001e81

	)

908 
	#XK_Wacuã
 0x1001e82

	)

909 
	#XK_wacuã
 0x1001e83

	)

910 
	#XK_Wdüîesis
 0x1001e84

	)

911 
	#XK_wdüîesis
 0x1001e85

	)

912 
	#XK_Ygøve
 0x1001ef2

	)

913 
	#XK_ygøve
 0x1001ef3

	)

921 #ifde‡
XK_LATIN9


922 
	#XK_OE
 0x13b¯

	)

923 
	#XK_€
 0x13bd

	)

924 
	#XK_Ydüîesis
 0x13bê

	)

932 #ifde‡
XK_KATAKANA


933 
	#XK_ovîlöe
 0x047ê

	)

934 
	#XK_k™a_fuŒ°›
 0x04a1

	)

935 
	#XK_k™a_›íögbøckë
 0x04a2

	)

936 
	#XK_k™a_˛osögbøckë
 0x04a3

	)

937 
	#XK_k™a_comma
 0x04a4

	)

938 
	#XK_k™a_c⁄jun˘ive
 0x04a5

	)

939 
	#XK_k™a_middÀdŸ
 0x04a5

	)

940 
	#XK_k™a_WO
 0x04a6

	)

941 
	#XK_k™a_a
 0x04a7

	)

942 
	#XK_k™a_i
 0x04a8

	)

943 
	#XK_k™a_u
 0x04a9

	)

944 
	#XK_k™a_e
 0x04Ø

	)

945 
	#XK_k™a_o
 0x04ab

	)

946 
	#XK_k™a_ya
 0x04a¯

	)

947 
	#XK_k™a_yu
 0x04ad

	)

948 
	#XK_k™a_yo
 0x04´

	)

949 
	#XK_k™a_tsu
 0x04a‡

	)

950 
	#XK_k™a_tu
 0x04a‡

	)

951 
	#XK_¥ﬁ⁄gedsound
 0x04b0

	)

952 
	#XK_k™a_A
 0x04b1

	)

953 
	#XK_k™a_I
 0x04b2

	)

954 
	#XK_k™a_U
 0x04b3

	)

955 
	#XK_k™a_E
 0x04b4

	)

956 
	#XK_k™a_O
 0x04b5

	)

957 
	#XK_k™a_KA
 0x04b6

	)

958 
	#XK_k™a_KI
 0x04b7

	)

959 
	#XK_k™a_KU
 0x04b8

	)

960 
	#XK_k™a_KE
 0x04b9

	)

961 
	#XK_k™a_KO
 0x04b®

	)

962 
	#XK_k™a_SA
 0x04bb

	)

963 
	#XK_k™a_SHI
 0x04b¯

	)

964 
	#XK_k™a_SU
 0x04bd

	)

965 
	#XK_k™a_SE
 0x04bê

	)

966 
	#XK_k™a_SO
 0x04b‡

	)

967 
	#XK_k™a_TA
 0x04c0

	)

968 
	#XK_k™a_CHI
 0x04c1

	)

969 
	#XK_k™a_TI
 0x04c1

	)

970 
	#XK_k™a_TSU
 0x04c2

	)

971 
	#XK_k™a_TU
 0x04c2

	)

972 
	#XK_k™a_TE
 0x04c3

	)

973 
	#XK_k™a_TO
 0x04c4

	)

974 
	#XK_k™a_NA
 0x04c5

	)

975 
	#XK_k™a_NI
 0x04c6

	)

976 
	#XK_k™a_NU
 0x04c7

	)

977 
	#XK_k™a_NE
 0x04c8

	)

978 
	#XK_k™a_NO
 0x04c9

	)

979 
	#XK_k™a_HA
 0x04ˇ

	)

980 
	#XK_k™a_HI
 0x04cb

	)

981 
	#XK_k™a_FU
 0x04c¯

	)

982 
	#XK_k™a_HU
 0x04c¯

	)

983 
	#XK_k™a_HE
 0x04cd

	)

984 
	#XK_k™a_HO
 0x04˚

	)

985 
	#XK_k™a_MA
 0x04c‡

	)

986 
	#XK_k™a_MI
 0x04d0

	)

987 
	#XK_k™a_MU
 0x04d1

	)

988 
	#XK_k™a_ME
 0x04d2

	)

989 
	#XK_k™a_MO
 0x04d3

	)

990 
	#XK_k™a_YA
 0x04d4

	)

991 
	#XK_k™a_YU
 0x04d5

	)

992 
	#XK_k™a_YO
 0x04d6

	)

993 
	#XK_k™a_RA
 0x04d7

	)

994 
	#XK_k™a_RI
 0x04d8

	)

995 
	#XK_k™a_RU
 0x04d9

	)

996 
	#XK_k™a_RE
 0x04d®

	)

997 
	#XK_k™a_RO
 0x04db

	)

998 
	#XK_k™a_WA
 0x04d¯

	)

999 
	#XK_k™a_N
 0x04dd

	)

1000 
	#XK_voi˚dsound
 0x04dê

	)

1001 
	#XK_£mivoi˚dsound
 0x04d‡

	)

1002 
	#XK_k™a_swôch
 0xff7ê

	)

1010 #ifde‡
XK_ARABIC


1011 
	#XK_F¨si_0
 0x10006f0

	)

1012 
	#XK_F¨si_1
 0x10006f1

	)

1013 
	#XK_F¨si_2
 0x10006f2

	)

1014 
	#XK_F¨si_3
 0x10006f3

	)

1015 
	#XK_F¨si_4
 0x10006f4

	)

1016 
	#XK_F¨si_5
 0x10006f5

	)

1017 
	#XK_F¨si_6
 0x10006f6

	)

1018 
	#XK_F¨si_7
 0x10006f7

	)

1019 
	#XK_F¨si_8
 0x10006f8

	)

1020 
	#XK_F¨si_9
 0x10006f9

	)

1021 
	#XK_Aøbic_≥r˚¡
 0x100066®

	)

1022 
	#XK_Aøbic_su≥rs¸ùt_Æef
 0x1000670

	)

1023 
	#XK_Aøbic_âeh
 0x1000679

	)

1024 
	#XK_Aøbic_≥h
 0x100067ê

	)

1025 
	#XK_Aøbic_tcheh
 0x1000686

	)

1026 
	#XK_Aøbic_ddÆ
 0x1000688

	)

1027 
	#XK_Aøbic_ºeh
 0x1000691

	)

1028 
	#XK_Aøbic_comma
 0x05a¯

	)

1029 
	#XK_Aøbic_fuŒ°›
 0x10006d4

	)

1030 
	#XK_Aøbic_0
 0x1000660

	)

1031 
	#XK_Aøbic_1
 0x1000661

	)

1032 
	#XK_Aøbic_2
 0x1000662

	)

1033 
	#XK_Aøbic_3
 0x1000663

	)

1034 
	#XK_Aøbic_4
 0x1000664

	)

1035 
	#XK_Aøbic_5
 0x1000665

	)

1036 
	#XK_Aøbic_6
 0x1000666

	)

1037 
	#XK_Aøbic_7
 0x1000667

	)

1038 
	#XK_Aøbic_8
 0x1000668

	)

1039 
	#XK_Aøbic_9
 0x1000669

	)

1040 
	#XK_Aøbic_£micﬁ⁄
 0x05bb

	)

1041 
	#XK_Aøbic_que°i⁄_m¨k
 0x05b‡

	)

1042 
	#XK_Aøbic_hamza
 0x05c1

	)

1043 
	#XK_Aøbic_madda⁄Æef
 0x05c2

	)

1044 
	#XK_Aøbic_hamza⁄Æef
 0x05c3

	)

1045 
	#XK_Aøbic_hamza⁄waw
 0x05c4

	)

1046 
	#XK_Aøbic_hamzaundîÆef
 0x05c5

	)

1047 
	#XK_Aøbic_hamza⁄yeh
 0x05c6

	)

1048 
	#XK_Aøbic_Æef
 0x05c7

	)

1049 
	#XK_Aøbic_beh
 0x05c8

	)

1050 
	#XK_Aøbic_ãhm¨buè
 0x05c9

	)

1051 
	#XK_Aøbic_ãh
 0x05ˇ

	)

1052 
	#XK_Aøbic_theh
 0x05cb

	)

1053 
	#XK_Aøbic_jìm
 0x05c¯

	)

1054 
	#XK_Aøbic_hah
 0x05cd

	)

1055 
	#XK_Aøbic_khah
 0x05˚

	)

1056 
	#XK_Aøbic_dÆ
 0x05c‡

	)

1057 
	#XK_Aøbic_thÆ
 0x05d0

	)

1058 
	#XK_Aøbic_ø
 0x05d1

	)

1059 
	#XK_Aøbic_zaö
 0x05d2

	)

1060 
	#XK_Aøbic_£í
 0x05d3

	)

1061 
	#XK_Aøbic_shìn
 0x05d4

	)

1062 
	#XK_Aøbic_ßd
 0x05d5

	)

1063 
	#XK_Aøbic_dad
 0x05d6

	)

1064 
	#XK_Aøbic_èh
 0x05d7

	)

1065 
	#XK_Aøbic_zah
 0x05d8

	)

1066 
	#XK_Aøbic_aö
 0x05d9

	)

1067 
	#XK_Aøbic_ghaö
 0x05d®

	)

1068 
	#XK_Aøbic_ètwìl
 0x05e0

	)

1069 
	#XK_Aøbic_„h
 0x05e1

	)

1070 
	#XK_Aøbic_qaf
 0x05e2

	)

1071 
	#XK_Aøbic_kaf
 0x05e3

	)

1072 
	#XK_Aøbic_œm
 0x05e4

	)

1073 
	#XK_Aøbic_mìm
 0x05e5

	)

1074 
	#XK_Aøbic_no⁄
 0x05e6

	)

1075 
	#XK_Aøbic_ha
 0x05e7

	)

1076 
	#XK_Aøbic_heh
 0x05e7

	)

1077 
	#XK_Aøbic_waw
 0x05e8

	)

1078 
	#XK_Aøbic_Æefmaksuø
 0x05e9

	)

1079 
	#XK_Aøbic_yeh
 0x05ó

	)

1080 
	#XK_Aøbic_Áth©™
 0x05eb

	)

1081 
	#XK_Aøbic_damm©™
 0x05e¯

	)

1082 
	#XK_Aøbic_ka§©™
 0x05ed

	)

1083 
	#XK_Aøbic_Átha
 0x05ì

	)

1084 
	#XK_Aøbic_damma
 0x05e‡

	)

1085 
	#XK_Aøbic_ka§a
 0x05f0

	)

1086 
	#XK_Aøbic_shadda
 0x05f1

	)

1087 
	#XK_Aøbic_sukun
 0x05f2

	)

1088 
	#XK_Aøbic_madda_above
 0x1000653

	)

1089 
	#XK_Aøbic_hamza_above
 0x1000654

	)

1090 
	#XK_Aøbic_hamza_bñow
 0x1000655

	)

1091 
	#XK_Aøbic_jeh
 0x1000698

	)

1092 
	#XK_Aøbic_veh
 0x10006a4

	)

1093 
	#XK_Aøbic_keheh
 0x10006a9

	)

1094 
	#XK_Aøbic_gaf
 0x10006a‡

	)

1095 
	#XK_Aøbic_no⁄_ghu¬a
 0x10006b®

	)

1096 
	#XK_Aøbic_heh_dﬂchashmì
 0x10006bê

	)

1097 
	#XK_F¨si_yeh
 0x10006c¯

	)

1098 
	#XK_Aøbic_Ársi_yeh
 0x10006c¯

	)

1099 
	#XK_Aøbic_yeh_b¨ì
 0x10006d2

	)

1100 
	#XK_Aøbic_heh_gﬂl
 0x10006c1

	)

1101 
	#XK_Aøbic_swôch
 0xff7ê

	)

1108 #ifde‡
XK_CYRILLIC


1109 
	#XK_Cyrûlic_GHE_b¨
 0x1000492

	)

1110 
	#XK_Cyrûlic_ghe_b¨
 0x1000493

	)

1111 
	#XK_Cyrûlic_ZHE_des˚ndî
 0x1000496

	)

1112 
	#XK_Cyrûlic_zhe_des˚ndî
 0x1000497

	)

1113 
	#XK_Cyrûlic_KA_des˚ndî
 0x100049®

	)

1114 
	#XK_Cyrûlic_ka_des˚ndî
 0x100049b

	)

1115 
	#XK_Cyrûlic_KA_vît°roke
 0x100049¯

	)

1116 
	#XK_Cyrûlic_ka_vît°roke
 0x100049d

	)

1117 
	#XK_Cyrûlic_EN_des˚ndî
 0x10004a2

	)

1118 
	#XK_Cyrûlic_í_des˚ndî
 0x10004a3

	)

1119 
	#XK_Cyrûlic_U_°øight
 0x10004´

	)

1120 
	#XK_Cyrûlic_u_°øight
 0x10004a‡

	)

1121 
	#XK_Cyrûlic_U_°øight_b¨
 0x10004b0

	)

1122 
	#XK_Cyrûlic_u_°øight_b¨
 0x10004b1

	)

1123 
	#XK_Cyrûlic_HA_des˚ndî
 0x10004b2

	)

1124 
	#XK_Cyrûlic_ha_des˚ndî
 0x10004b3

	)

1125 
	#XK_Cyrûlic_CHE_des˚ndî
 0x10004b6

	)

1126 
	#XK_Cyrûlic_che_des˚ndî
 0x10004b7

	)

1127 
	#XK_Cyrûlic_CHE_vît°roke
 0x10004b8

	)

1128 
	#XK_Cyrûlic_che_vît°roke
 0x10004b9

	)

1129 
	#XK_Cyrûlic_SHHA
 0x10004b®

	)

1130 
	#XK_Cyrûlic_shha
 0x10004bb

	)

1132 
	#XK_Cyrûlic_SCHWA
 0x10004d8

	)

1133 
	#XK_Cyrûlic_schwa
 0x10004d9

	)

1134 
	#XK_Cyrûlic_I_ma¸⁄
 0x10004e2

	)

1135 
	#XK_Cyrûlic_i_ma¸⁄
 0x10004e3

	)

1136 
	#XK_Cyrûlic_O_b¨
 0x10004e8

	)

1137 
	#XK_Cyrûlic_o_b¨
 0x10004e9

	)

1138 
	#XK_Cyrûlic_U_ma¸⁄
 0x10004ì

	)

1139 
	#XK_Cyrûlic_u_ma¸⁄
 0x10004e‡

	)

1141 
	#XK_Sîbün_dje
 0x06a1

	)

1142 
	#XK_Ma˚d⁄ü_gje
 0x06a2

	)

1143 
	#XK_Cyrûlic_io
 0x06a3

	)

1144 
	#XK_Ukøöün_õ
 0x06a4

	)

1145 
	#XK_Ukønün_je
 0x06a4

	)

1146 
	#XK_Ma˚d⁄ü_d£
 0x06a5

	)

1147 
	#XK_Ukøöün_i
 0x06a6

	)

1148 
	#XK_Ukønün_i
 0x06a6

	)

1149 
	#XK_Ukøöün_yi
 0x06a7

	)

1150 
	#XK_Ukønün_yi
 0x06a7

	)

1151 
	#XK_Cyrûlic_je
 0x06a8

	)

1152 
	#XK_Sîbün_je
 0x06a8

	)

1153 
	#XK_Cyrûlic_lje
 0x06a9

	)

1154 
	#XK_Sîbün_lje
 0x06a9

	)

1155 
	#XK_Cyrûlic_nje
 0x06Ø

	)

1156 
	#XK_Sîbün_nje
 0x06Ø

	)

1157 
	#XK_Sîbün_tshe
 0x06ab

	)

1158 
	#XK_Ma˚d⁄ü_kje
 0x06a¯

	)

1159 
	#XK_Ukøöün_ghe_wôh_u±u∫
 0x06ad

	)

1160 
	#XK_Byñ‹ussün_sh‹tu
 0x06´

	)

1161 
	#XK_Cyrûlic_dzhe
 0x06a‡

	)

1162 
	#XK_Sîbün_dze
 0x06a‡

	)

1163 
	#XK_numîosign
 0x06b0

	)

1164 
	#XK_Sîbün_DJE
 0x06b1

	)

1165 
	#XK_Ma˚d⁄ü_GJE
 0x06b2

	)

1166 
	#XK_Cyrûlic_IO
 0x06b3

	)

1167 
	#XK_Ukøöün_IE
 0x06b4

	)

1168 
	#XK_Ukønün_JE
 0x06b4

	)

1169 
	#XK_Ma˚d⁄ü_DSE
 0x06b5

	)

1170 
	#XK_Ukøöün_I
 0x06b6

	)

1171 
	#XK_Ukønün_I
 0x06b6

	)

1172 
	#XK_Ukøöün_YI
 0x06b7

	)

1173 
	#XK_Ukønün_YI
 0x06b7

	)

1174 
	#XK_Cyrûlic_JE
 0x06b8

	)

1175 
	#XK_Sîbün_JE
 0x06b8

	)

1176 
	#XK_Cyrûlic_LJE
 0x06b9

	)

1177 
	#XK_Sîbün_LJE
 0x06b9

	)

1178 
	#XK_Cyrûlic_NJE
 0x06b®

	)

1179 
	#XK_Sîbün_NJE
 0x06b®

	)

1180 
	#XK_Sîbün_TSHE
 0x06bb

	)

1181 
	#XK_Ma˚d⁄ü_KJE
 0x06b¯

	)

1182 
	#XK_Ukøöün_GHE_WITH_UPTURN
 0x06bd

	)

1183 
	#XK_Byñ‹ussün_SHORTU
 0x06bê

	)

1184 
	#XK_Cyrûlic_DZHE
 0x06b‡

	)

1185 
	#XK_Sîbün_DZE
 0x06b‡

	)

1186 
	#XK_Cyrûlic_yu
 0x06c0

	)

1187 
	#XK_Cyrûlic_a
 0x06c1

	)

1188 
	#XK_Cyrûlic_be
 0x06c2

	)

1189 
	#XK_Cyrûlic_t£
 0x06c3

	)

1190 
	#XK_Cyrûlic_de
 0x06c4

	)

1191 
	#XK_Cyrûlic_õ
 0x06c5

	)

1192 
	#XK_Cyrûlic_ef
 0x06c6

	)

1193 
	#XK_Cyrûlic_ghe
 0x06c7

	)

1194 
	#XK_Cyrûlic_ha
 0x06c8

	)

1195 
	#XK_Cyrûlic_i
 0x06c9

	)

1196 
	#XK_Cyrûlic_sh‹ti
 0x06ˇ

	)

1197 
	#XK_Cyrûlic_ka
 0x06cb

	)

1198 
	#XK_Cyrûlic_ñ
 0x06c¯

	)

1199 
	#XK_Cyrûlic_em
 0x06cd

	)

1200 
	#XK_Cyrûlic_í
 0x06˚

	)

1201 
	#XK_Cyrûlic_o
 0x06c‡

	)

1202 
	#XK_Cyrûlic_≥
 0x06d0

	)

1203 
	#XK_Cyrûlic_ya
 0x06d1

	)

1204 
	#XK_Cyrûlic_î
 0x06d2

	)

1205 
	#XK_Cyrûlic_es
 0x06d3

	)

1206 
	#XK_Cyrûlic_ã
 0x06d4

	)

1207 
	#XK_Cyrûlic_u
 0x06d5

	)

1208 
	#XK_Cyrûlic_zhe
 0x06d6

	)

1209 
	#XK_Cyrûlic_ve
 0x06d7

	)

1210 
	#XK_Cyrûlic_so·sign
 0x06d8

	)

1211 
	#XK_Cyrûlic_yîu
 0x06d9

	)

1212 
	#XK_Cyrûlic_ze
 0x06d®

	)

1213 
	#XK_Cyrûlic_sha
 0x06db

	)

1214 
	#XK_Cyrûlic_e
 0x06d¯

	)

1215 
	#XK_Cyrûlic_shcha
 0x06dd

	)

1216 
	#XK_Cyrûlic_che
 0x06dê

	)

1217 
	#XK_Cyrûlic_h¨dsign
 0x06d‡

	)

1218 
	#XK_Cyrûlic_YU
 0x06e0

	)

1219 
	#XK_Cyrûlic_A
 0x06e1

	)

1220 
	#XK_Cyrûlic_BE
 0x06e2

	)

1221 
	#XK_Cyrûlic_TSE
 0x06e3

	)

1222 
	#XK_Cyrûlic_DE
 0x06e4

	)

1223 
	#XK_Cyrûlic_IE
 0x06e5

	)

1224 
	#XK_Cyrûlic_EF
 0x06e6

	)

1225 
	#XK_Cyrûlic_GHE
 0x06e7

	)

1226 
	#XK_Cyrûlic_HA
 0x06e8

	)

1227 
	#XK_Cyrûlic_I
 0x06e9

	)

1228 
	#XK_Cyrûlic_SHORTI
 0x06ó

	)

1229 
	#XK_Cyrûlic_KA
 0x06eb

	)

1230 
	#XK_Cyrûlic_EL
 0x06e¯

	)

1231 
	#XK_Cyrûlic_EM
 0x06ed

	)

1232 
	#XK_Cyrûlic_EN
 0x06ì

	)

1233 
	#XK_Cyrûlic_O
 0x06e‡

	)

1234 
	#XK_Cyrûlic_PE
 0x06f0

	)

1235 
	#XK_Cyrûlic_YA
 0x06f1

	)

1236 
	#XK_Cyrûlic_ER
 0x06f2

	)

1237 
	#XK_Cyrûlic_ES
 0x06f3

	)

1238 
	#XK_Cyrûlic_TE
 0x06f4

	)

1239 
	#XK_Cyrûlic_U
 0x06f5

	)

1240 
	#XK_Cyrûlic_ZHE
 0x06f6

	)

1241 
	#XK_Cyrûlic_VE
 0x06f7

	)

1242 
	#XK_Cyrûlic_SOFTSIGN
 0x06f8

	)

1243 
	#XK_Cyrûlic_YERU
 0x06f9

	)

1244 
	#XK_Cyrûlic_ZE
 0x06Á

	)

1245 
	#XK_Cyrûlic_SHA
 0x06fb

	)

1246 
	#XK_Cyrûlic_E
 0x06f¯

	)

1247 
	#XK_Cyrûlic_SHCHA
 0x06fd

	)

1248 
	#XK_Cyrûlic_CHE
 0x06„

	)

1249 
	#XK_Cyrûlic_HARDSIGN
 0x06f‡

	)

1258 #ifde‡
XK_GREEK


1259 
	#XK_Gªek_ALPHAac˚¡
 0x07a1

	)

1260 
	#XK_Gªek_EPSILONac˚¡
 0x07a2

	)

1261 
	#XK_Gªek_ETAac˚¡
 0x07a3

	)

1262 
	#XK_Gªek_IOTAac˚¡
 0x07a4

	)

1263 
	#XK_Gªek_IOTAdõªsis
 0x07a5

	)

1264 
	#XK_Gªek_IOTAdüîesis
 0x07a5

	)

1265 
	#XK_Gªek_OMICRONac˚¡
 0x07a7

	)

1266 
	#XK_Gªek_UPSILONac˚¡
 0x07a8

	)

1267 
	#XK_Gªek_UPSILONdõªsis
 0x07a9

	)

1268 
	#XK_Gªek_OMEGAac˚¡
 0x07ab

	)

1269 
	#XK_Gªek_ac˚¡dõªsis
 0x07´

	)

1270 
	#XK_Gªek_h‹izb¨
 0x07a‡

	)

1271 
	#XK_Gªek_ÆphØc˚¡
 0x07b1

	)

1272 
	#XK_Gªek_ïsû⁄ac˚¡
 0x07b2

	)

1273 
	#XK_Gªek_ëØc˚¡
 0x07b3

	)

1274 
	#XK_Gªek_iŸØc˚¡
 0x07b4

	)

1275 
	#XK_Gªek_iŸadõªsis
 0x07b5

	)

1276 
	#XK_Gªek_iŸØc˚¡dõªsis
 0x07b6

	)

1277 
	#XK_Gªek_omi¸⁄ac˚¡
 0x07b7

	)

1278 
	#XK_Gªek_upsû⁄ac˚¡
 0x07b8

	)

1279 
	#XK_Gªek_upsû⁄dõªsis
 0x07b9

	)

1280 
	#XK_Gªek_upsû⁄ac˚¡dõªsis
 0x07b®

	)

1281 
	#XK_Gªek_omegØc˚¡
 0x07bb

	)

1282 
	#XK_Gªek_ALPHA
 0x07c1

	)

1283 
	#XK_Gªek_BETA
 0x07c2

	)

1284 
	#XK_Gªek_GAMMA
 0x07c3

	)

1285 
	#XK_Gªek_DELTA
 0x07c4

	)

1286 
	#XK_Gªek_EPSILON
 0x07c5

	)

1287 
	#XK_Gªek_ZETA
 0x07c6

	)

1288 
	#XK_Gªek_ETA
 0x07c7

	)

1289 
	#XK_Gªek_THETA
 0x07c8

	)

1290 
	#XK_Gªek_IOTA
 0x07c9

	)

1291 
	#XK_Gªek_KAPPA
 0x07ˇ

	)

1292 
	#XK_Gªek_LAMDA
 0x07cb

	)

1293 
	#XK_Gªek_LAMBDA
 0x07cb

	)

1294 
	#XK_Gªek_MU
 0x07c¯

	)

1295 
	#XK_Gªek_NU
 0x07cd

	)

1296 
	#XK_Gªek_XI
 0x07˚

	)

1297 
	#XK_Gªek_OMICRON
 0x07c‡

	)

1298 
	#XK_Gªek_PI
 0x07d0

	)

1299 
	#XK_Gªek_RHO
 0x07d1

	)

1300 
	#XK_Gªek_SIGMA
 0x07d2

	)

1301 
	#XK_Gªek_TAU
 0x07d4

	)

1302 
	#XK_Gªek_UPSILON
 0x07d5

	)

1303 
	#XK_Gªek_PHI
 0x07d6

	)

1304 
	#XK_Gªek_CHI
 0x07d7

	)

1305 
	#XK_Gªek_PSI
 0x07d8

	)

1306 
	#XK_Gªek_OMEGA
 0x07d9

	)

1307 
	#XK_Gªek_Æpha
 0x07e1

	)

1308 
	#XK_Gªek_bëa
 0x07e2

	)

1309 
	#XK_Gªek_gamma
 0x07e3

	)

1310 
	#XK_Gªek_dñè
 0x07e4

	)

1311 
	#XK_Gªek_ïsû⁄
 0x07e5

	)

1312 
	#XK_Gªek_zëa
 0x07e6

	)

1313 
	#XK_Gªek_ëa
 0x07e7

	)

1314 
	#XK_Gªek_thëa
 0x07e8

	)

1315 
	#XK_Gªek_iŸa
 0x07e9

	)

1316 
	#XK_Gªek_k≠∑
 0x07ó

	)

1317 
	#XK_Gªek_œmda
 0x07eb

	)

1318 
	#XK_Gªek_œmbda
 0x07eb

	)

1319 
	#XK_Gªek_mu
 0x07e¯

	)

1320 
	#XK_Gªek_nu
 0x07ed

	)

1321 
	#XK_Gªek_xi
 0x07ì

	)

1322 
	#XK_Gªek_omi¸⁄
 0x07e‡

	)

1323 
	#XK_Gªek_pi
 0x07f0

	)

1324 
	#XK_Gªek_rho
 0x07f1

	)

1325 
	#XK_Gªek_sigma
 0x07f2

	)

1326 
	#XK_Gªek_föÆsmÆlsigma
 0x07f3

	)

1327 
	#XK_Gªek_èu
 0x07f4

	)

1328 
	#XK_Gªek_upsû⁄
 0x07f5

	)

1329 
	#XK_Gªek_phi
 0x07f6

	)

1330 
	#XK_Gªek_chi
 0x07f7

	)

1331 
	#XK_Gªek_psi
 0x07f8

	)

1332 
	#XK_Gªek_omega
 0x07f9

	)

1333 
	#XK_Gªek_swôch
 0xff7ê

	)

1342 #ifde‡
XK_TECHNICAL


1343 
	#XK_À·ødiˇl
 0x08a1

	)

1344 
	#XK_t›À·ødiˇl
 0x08a2

	)

1345 
	#XK_h‹izc⁄√˘‹
 0x08a3

	)

1346 
	#XK_t›öãgøl
 0x08a4

	)

1347 
	#XK_bŸöãgøl
 0x08a5

	)

1348 
	#XK_vîtc⁄√˘‹
 0x08a6

	)

1349 
	#XK_t›À·sqbøckë
 0x08a7

	)

1350 
	#XK_bŸÀ·sqbøckë
 0x08a8

	)

1351 
	#XK_t›rightsqbøckë
 0x08a9

	)

1352 
	#XK_bŸrightsqbøckë
 0x08Ø

	)

1353 
	#XK_t›À·∑ªns
 0x08ab

	)

1354 
	#XK_bŸÀ·∑ªns
 0x08a¯

	)

1355 
	#XK_t›righç¨ís
 0x08ad

	)

1356 
	#XK_bŸrighç¨ís
 0x08´

	)

1357 
	#XK_À·middÀcuæybø˚
 0x08a‡

	)

1358 
	#XK_rightmiddÀcuæybø˚
 0x08b0

	)

1359 
	#XK_t›À·summ©i⁄
 0x08b1

	)

1360 
	#XK_bŸÀ·summ©i⁄
 0x08b2

	)

1361 
	#XK_t›vîtsumm©i⁄c⁄√˘‹
 0x08b3

	)

1362 
	#XK_bŸvîtsumm©i⁄c⁄√˘‹
 0x08b4

	)

1363 
	#XK_t›rightsumm©i⁄
 0x08b5

	)

1364 
	#XK_bŸrightsumm©i⁄
 0x08b6

	)

1365 
	#XK_rightmiddÀsumm©i⁄
 0x08b7

	)

1366 
	#XK_Às°h™equÆ
 0x08b¯

	)

1367 
	#XK_nŸequÆ
 0x08bd

	)

1368 
	#XK_gª©îth™equÆ
 0x08bê

	)

1369 
	#XK_öãgøl
 0x08b‡

	)

1370 
	#XK_thîef‹e
 0x08c0

	)

1371 
	#XK_v¨üti⁄
 0x08c1

	)

1372 
	#XK_öföôy
 0x08c2

	)

1373 
	#XK_«bœ
 0x08c5

	)

1374 
	#XK_≠¥oxim©e
 0x08c8

	)

1375 
	#XK_simû¨equÆ
 0x08c9

	)

1376 
	#XK_if⁄lyif
 0x08cd

	)

1377 
	#XK_im∂õs
 0x08˚

	)

1378 
	#XK_idítiˇl
 0x08c‡

	)

1379 
	#XK_ødiˇl
 0x08d6

	)

1380 
	#XK_ö˛udedö
 0x08d®

	)

1381 
	#XK_ö˛udes
 0x08db

	)

1382 
	#XK_öãr£˘i⁄
 0x08d¯

	)

1383 
	#XK_uni⁄
 0x08dd

	)

1384 
	#XK_logiˇœnd
 0x08dê

	)

1385 
	#XK_logiˇl‹
 0x08d‡

	)

1386 
	#XK_∑πüldîiv©ive
 0x08e‡

	)

1387 
	#XK_fun˘i⁄
 0x08f6

	)

1388 
	#XK_À·¨row
 0x08fb

	)

1389 
	#XK_u∑ºow
 0x08f¯

	)

1390 
	#XK_righèºow
 0x08fd

	)

1391 
	#XK_dow«ºow
 0x08„

	)

1400 #ifde‡
XK_SPECIAL


1401 
	#XK_bœnk
 0x09df

	)

1402 
	#XK_sﬁiddüm⁄d
 0x09e0

	)

1403 
	#XK_checkîbﬂrd
 0x09e1

	)

1404 
	#XK_ht
 0x09e2

	)

1405 
	#XK_ff
 0x09e3

	)

1406 
	#XK_¸
 0x09e4

	)

1407 
	#XK_lf
 0x09e5

	)

1408 
	#XK_∆
 0x09e8

	)

1409 
	#XK_vt
 0x09e9

	)

1410 
	#XK_lowrightc‹√r
 0x09ó

	)

1411 
	#XK_u¥ightc‹√r
 0x09eb

	)

1412 
	#XK_u∂e·c‹√r
 0x09e¯

	)

1413 
	#XK_lowÀ·c‹√r
 0x09ed

	)

1414 
	#XK_¸ossöglöes
 0x09ì

	)

1415 
	#XK_h‹izlöesˇn1
 0x09e‡

	)

1416 
	#XK_h‹izlöesˇn3
 0x09f0

	)

1417 
	#XK_h‹izlöesˇn5
 0x09f1

	)

1418 
	#XK_h‹izlöesˇn7
 0x09f2

	)

1419 
	#XK_h‹izlöesˇn9
 0x09f3

	)

1420 
	#XK_À·t
 0x09f4

	)

1421 
	#XK_righâ
 0x09f5

	)

1422 
	#XK_bŸt
 0x09f6

	)

1423 
	#XK_t›t
 0x09f7

	)

1424 
	#XK_vîtb¨
 0x09f8

	)

1434 #ifde‡
XK_PUBLISHING


1435 
	#XK_em•a˚
 0x0Ø1

	)

1436 
	#XK_í•a˚
 0x0Ø2

	)

1437 
	#XK_em3•a˚
 0x0Ø3

	)

1438 
	#XK_em4•a˚
 0x0Ø4

	)

1439 
	#XK_digô•a˚
 0x0Ø5

	)

1440 
	#XK_pun˘•a˚
 0x0Ø6

	)

1441 
	#XK_thö•a˚
 0x0Ø7

	)

1442 
	#XK_haú•a˚
 0x0Ø8

	)

1443 
	#XK_emdash
 0x0Ø9

	)

1444 
	#XK_ídash
 0x0Ø®

	)

1445 
	#XK_signifbœnk
 0x0Ø¯

	)

1446 
	#XK_ñlùsis
 0x0Øê

	)

1447 
	#XK_doubba£löedŸ
 0x0Ø‡

	)

1448 
	#XK_⁄ëhúd
 0x0ab0

	)

1449 
	#XK_twŸhúds
 0x0ab1

	)

1450 
	#XK_⁄efi·h
 0x0ab2

	)

1451 
	#XK_twofi·hs
 0x0ab3

	)

1452 
	#XK_thªefi·hs
 0x0ab4

	)

1453 
	#XK_fourfi·hs
 0x0ab5

	)

1454 
	#XK_⁄esixth
 0x0ab6

	)

1455 
	#XK_fivesixths
 0x0ab7

	)

1456 
	#XK_ˇªof
 0x0ab8

	)

1457 
	#XK_figdash
 0x0abb

	)

1458 
	#XK_À·™gÀbøckë
 0x0ab¯

	)

1459 
	#XK_decimÆpoöt
 0x0abd

	)

1460 
	#XK_righèngÀbøckë
 0x0abê

	)

1461 
	#XK_m¨kî
 0x0abf

	)

1462 
	#XK_⁄ìighth
 0x0ac3

	)

1463 
	#XK_thªìighths
 0x0ac4

	)

1464 
	#XK_fivìighths
 0x0ac5

	)

1465 
	#XK_£víeighths
 0x0ac6

	)

1466 
	#XK_åadem¨k
 0x0ac9

	)

1467 
	#XK_sig«tuªm¨k
 0x0aˇ

	)

1468 
	#XK_åadem¨köcú˛e
 0x0acb

	)

1469 
	#XK_À·›íåüngÀ
 0x0ac¯

	)

1470 
	#XK_right›íåüngÀ
 0x0acd

	)

1471 
	#XK_em›ícú˛e
 0x0a˚

	)

1472 
	#XK_em›íª˘™gÀ
 0x0ac‡

	)

1473 
	#XK_À·sögÀquŸem¨k
 0x0ad0

	)

1474 
	#XK_rightsögÀquŸem¨k
 0x0ad1

	)

1475 
	#XK_À·doubÀquŸem¨k
 0x0ad2

	)

1476 
	#XK_rightdoubÀquŸem¨k
 0x0ad3

	)

1477 
	#XK_¥es¸ùti⁄
 0x0ad4

	)

1478 
	#XK_≥rmûÀ
 0x0ad5

	)

1479 
	#XK_möuãs
 0x0ad6

	)

1480 
	#XK_£c⁄ds
 0x0ad7

	)

1481 
	#XK_œtö¸oss
 0x0ad9

	)

1482 
	#XK_hexagøm
 0x0ada

	)

1483 
	#XK_fûÀdª˘buŒë
 0x0adb

	)

1484 
	#XK_fûÀdÀ·åibuŒë
 0x0ad¯

	)

1485 
	#XK_fûÀdrighâribuŒë
 0x0add

	)

1486 
	#XK_emfûÀdcú˛e
 0x0adê

	)

1487 
	#XK_emfûÀdª˘
 0x0ad‡

	)

1488 
	#XK_í›ícúcbuŒë
 0x0´0

	)

1489 
	#XK_í›ísqu¨ebuŒë
 0x0´1

	)

1490 
	#XK_›íª˘buŒë
 0x0´2

	)

1491 
	#XK_›íåibuŒëup
 0x0´3

	)

1492 
	#XK_›íåibuŒëdown
 0x0´4

	)

1493 
	#XK_›í°¨
 0x0´5

	)

1494 
	#XK_ífûÀdcúcbuŒë
 0x0´6

	)

1495 
	#XK_ífûÀdsqbuŒë
 0x0´7

	)

1496 
	#XK_fûÀdåibuŒëup
 0x0´8

	)

1497 
	#XK_fûÀdåibuŒëdown
 0x0´9

	)

1498 
	#XK_À·poöãr
 0x0´®

	)

1499 
	#XK_righçoöãr
 0x0´b

	)

1500 
	#XK_˛ub
 0x0´¯

	)

1501 
	#XK_düm⁄d
 0x0´d

	)

1502 
	#XK_hóπ
 0x0´ê

	)

1503 
	#XK_mÆã£¸oss
 0x0af0

	)

1504 
	#XK_daggî
 0x0af1

	)

1505 
	#XK_doubÀdaggî
 0x0af2

	)

1506 
	#XK_checkm¨k
 0x0af3

	)

1507 
	#XK_bÆlŸ¸oss
 0x0af4

	)

1508 
	#XK_musiˇlsh¨p
 0x0af5

	)

1509 
	#XK_musiˇlÊ©
 0x0af6

	)

1510 
	#XK_mÆesymbﬁ
 0x0af7

	)

1511 
	#XK_„mÆesymbﬁ
 0x0af8

	)

1512 
	#XK_ãÀph⁄e
 0x0af9

	)

1513 
	#XK_ãÀph⁄îec‹dî
 0x0aÁ

	)

1514 
	#XK_ph⁄ogøphc›yright
 0x0afb

	)

1515 
	#XK_ˇªt
 0x0af¯

	)

1516 
	#XK_sögÀlowquŸem¨k
 0x0afd

	)

1517 
	#XK_doubÀlowquŸem¨k
 0x0a„

	)

1518 
	#XK_curs‹
 0x0aff

	)

1526 #ifde‡
XK_APL


1527 
	#XK_À·ˇªt
 0x0ba3

	)

1528 
	#XK_rightˇªt
 0x0ba6

	)

1529 
	#XK_downˇªt
 0x0ba8

	)

1530 
	#XK_upˇªt
 0x0ba9

	)

1531 
	#XK_ovîb¨
 0x0bc0

	)

1532 
	#XK_dow¡ack
 0x0bc2

	)

1533 
	#XK_upsh€
 0x0bc3

	)

1534 
	#XK_down°ûe
 0x0bc4

	)

1535 
	#XK_undîb¨
 0x0bc6

	)

1536 
	#XK_jŸ
 0x0bˇ

	)

1537 
	#XK_quad
 0x0bc¯

	)

1538 
	#XK_u±ack
 0x0b˚

	)

1539 
	#XK_cú˛e
 0x0bc‡

	)

1540 
	#XK_up°ûe
 0x0bd3

	)

1541 
	#XK_downsh€
 0x0bd6

	)

1542 
	#XK_rightsh€
 0x0bd8

	)

1543 
	#XK_À·sh€
 0x0bd®

	)

1544 
	#XK_À·èck
 0x0bd¯

	)

1545 
	#XK_righâack
 0x0bf¯

	)

1553 #ifde‡
XK_HEBREW


1554 
	#XK_hebªw_doubÀlowlöe
 0x0cd‡

	)

1555 
	#XK_hebªw_Æïh
 0x0˚0

	)

1556 
	#XK_hebªw_bë
 0x0˚1

	)

1557 
	#XK_hebªw_bëh
 0x0˚1

	)

1558 
	#XK_hebªw_gimñ
 0x0˚2

	)

1559 
	#XK_hebªw_gimmñ
 0x0˚2

	)

1560 
	#XK_hebªw_dÆë
 0x0˚3

	)

1561 
	#XK_hebªw_dÆëh
 0x0˚3

	)

1562 
	#XK_hebªw_he
 0x0˚4

	)

1563 
	#XK_hebªw_waw
 0x0˚5

	)

1564 
	#XK_hebªw_zaö
 0x0˚6

	)

1565 
	#XK_hebªw_zayö
 0x0˚6

	)

1566 
	#XK_hebªw_chë
 0x0˚7

	)

1567 
	#XK_hebªw_hë
 0x0˚7

	)

1568 
	#XK_hebªw_ãt
 0x0˚8

	)

1569 
	#XK_hebªw_ãth
 0x0˚8

	)

1570 
	#XK_hebªw_yod
 0x0˚9

	)

1571 
	#XK_hebªw_föÆk≠h
 0x0˚®

	)

1572 
	#XK_hebªw_k≠h
 0x0˚b

	)

1573 
	#XK_hebªw_œmed
 0x0˚¯

	)

1574 
	#XK_hebªw_föÆmem
 0x0˚d

	)

1575 
	#XK_hebªw_mem
 0x0˚ê

	)

1576 
	#XK_hebªw_föÆnun
 0x0˚‡

	)

1577 
	#XK_hebªw_nun
 0x0cf0

	)

1578 
	#XK_hebªw_ßmech
 0x0cf1

	)

1579 
	#XK_hebªw_ßmekh
 0x0cf1

	)

1580 
	#XK_hebªw_ayö
 0x0cf2

	)

1581 
	#XK_hebªw_föÆ≥
 0x0cf3

	)

1582 
	#XK_hebªw_≥
 0x0cf4

	)

1583 
	#XK_hebªw_föÆzade
 0x0cf5

	)

1584 
	#XK_hebªw_föÆzadi
 0x0cf5

	)

1585 
	#XK_hebªw_zade
 0x0cf6

	)

1586 
	#XK_hebªw_zadi
 0x0cf6

	)

1587 
	#XK_hebªw_q›h
 0x0cf7

	)

1588 
	#XK_hebªw_kuf
 0x0cf7

	)

1589 
	#XK_hebªw_ªsh
 0x0cf8

	)

1590 
	#XK_hebªw_shö
 0x0cf9

	)

1591 
	#XK_hebªw_èw
 0x0cÁ

	)

1592 
	#XK_hebªw_èf
 0x0cÁ

	)

1593 
	#XK_Hebªw_swôch
 0xff7ê

	)

1601 #ifde‡
XK_THAI


1602 
	#XK_Thai_kokai
 0x0da1

	)

1603 
	#XK_Thai_khokhai
 0x0da2

	)

1604 
	#XK_Thai_khokhu©
 0x0da3

	)

1605 
	#XK_Thai_khokhwai
 0x0da4

	)

1606 
	#XK_Thai_khokh⁄
 0x0da5

	)

1607 
	#XK_Thai_kh‹akh™g
 0x0da6

	)

1608 
	#XK_Thai_ng⁄gu
 0x0da7

	)

1609 
	#XK_Thai_choch™
 0x0da8

	)

1610 
	#XK_Thai_chochög
 0x0da9

	)

1611 
	#XK_Thai_choch™g
 0x0dØ

	)

1612 
	#XK_Thai_soso
 0x0dab

	)

1613 
	#XK_Thai_choch€
 0x0da¯

	)

1614 
	#XK_Thai_yoyög
 0x0dad

	)

1615 
	#XK_Thai_dochada
 0x0d´

	)

1616 
	#XK_Thai_t›©ak
 0x0da‡

	)

1617 
	#XK_Thai_thŸh™
 0x0db0

	)

1618 
	#XK_Thai_th⁄™gm⁄tho
 0x0db1

	)

1619 
	#XK_Thai_th›huthao
 0x0db2

	)

1620 
	#XK_Thai_n⁄í
 0x0db3

	)

1621 
	#XK_Thai_dodek
 0x0db4

	)

1622 
	#XK_Thai_tŸao
 0x0db5

	)

1623 
	#XK_Thai_thŸhung
 0x0db6

	)

1624 
	#XK_Thai_thŸhah™
 0x0db7

	)

1625 
	#XK_Thai_thŸh⁄g
 0x0db8

	)

1626 
	#XK_Thai_n⁄u
 0x0db9

	)

1627 
	#XK_Thai_bobaimai
 0x0db®

	)

1628 
	#XK_Thai_p›œ
 0x0dbb

	)

1629 
	#XK_Thai_ph›hung
 0x0db¯

	)

1630 
	#XK_Thai_foÁ
 0x0dbd

	)

1631 
	#XK_Thai_ph›h™
 0x0dbê

	)

1632 
	#XK_Thai_foÁn
 0x0db‡

	)

1633 
	#XK_Thai_phoßmphao
 0x0dc0

	)

1634 
	#XK_Thai_moma
 0x0dc1

	)

1635 
	#XK_Thai_yoyak
 0x0dc2

	)

1636 
	#XK_Thai_r‹ua
 0x0dc3

	)

1637 
	#XK_Thai_ru
 0x0dc4

	)

1638 
	#XK_Thai_lﬁög
 0x0dc5

	)

1639 
	#XK_Thai_lu
 0x0dc6

	)

1640 
	#XK_Thai_wow´n
 0x0dc7

	)

1641 
	#XK_Thai_soßœ
 0x0dc8

	)

1642 
	#XK_Thai_s‹usi
 0x0dc9

	)

1643 
	#XK_Thai_sosua
 0x0dˇ

	)

1644 
	#XK_Thai_hohù
 0x0dcb

	)

1645 
	#XK_Thai_lochuœ
 0x0dc¯

	)

1646 
	#XK_Thai_ﬂng
 0x0dcd

	)

1647 
	#XK_Thai_h⁄okhuk
 0x0d˚

	)

1648 
	#XK_Thai_∑iy™noi
 0x0dc‡

	)

1649 
	#XK_Thai_ßøa
 0x0dd0

	)

1650 
	#XK_Thai_maih™ak©
 0x0dd1

	)

1651 
	#XK_Thai_ßøØ
 0x0dd2

	)

1652 
	#XK_Thai_ßøam
 0x0dd3

	)

1653 
	#XK_Thai_ßøi
 0x0dd4

	)

1654 
	#XK_Thai_ßøii
 0x0dd5

	)

1655 
	#XK_Thai_ßøue
 0x0dd6

	)

1656 
	#XK_Thai_ßøuì
 0x0dd7

	)

1657 
	#XK_Thai_ßøu
 0x0dd8

	)

1658 
	#XK_Thai_ßøuu
 0x0dd9

	)

1659 
	#XK_Thai_phöthu
 0x0dd®

	)

1660 
	#XK_Thai_maih™ak©_maôho
 0x0dde

	)

1661 
	#XK_Thai_baht
 0x0dd‡

	)

1662 
	#XK_Thai_ßøe
 0x0de0

	)

1663 
	#XK_Thai_ßø´
 0x0de1

	)

1664 
	#XK_Thai_ßøo
 0x0de2

	)

1665 
	#XK_Thai_ßøaimaimu™
 0x0de3

	)

1666 
	#XK_Thai_ßøaimaimÆai
 0x0de4

	)

1667 
	#XK_Thai_œkkh™gyao
 0x0de5

	)

1668 
	#XK_Thai_maiyamok
 0x0de6

	)

1669 
	#XK_Thai_maôaikhu
 0x0de7

	)

1670 
	#XK_Thai_maõk
 0x0de8

	)

1671 
	#XK_Thai_maôho
 0x0de9

	)

1672 
	#XK_Thai_maôri
 0x0dó

	)

1673 
	#XK_Thai_maich©èwa
 0x0deb

	)

1674 
	#XK_Thai_th™thakh©
 0x0de¯

	)

1675 
	#XK_Thai_nikhahô
 0x0ded

	)

1676 
	#XK_Thai_Àksun
 0x0df0

	)

1677 
	#XK_Thai_Àknung
 0x0df1

	)

1678 
	#XK_Thai_Àks⁄g
 0x0df2

	)

1679 
	#XK_Thai_Àkßm
 0x0df3

	)

1680 
	#XK_Thai_Àksi
 0x0df4

	)

1681 
	#XK_Thai_Àkha
 0x0df5

	)

1682 
	#XK_Thai_Àkhok
 0x0df6

	)

1683 
	#XK_Thai_Àkchë
 0x0df7

	)

1684 
	#XK_Thai_Àk∑ë
 0x0df8

	)

1685 
	#XK_Thai_Àkkao
 0x0df9

	)

1693 #ifde‡
XK_KOREAN


1695 
	#XK_H™gul
 0xff31

	)

1696 
	#XK_H™gul_Sèπ
 0xff32

	)

1697 
	#XK_H™gul_End
 0xff33

	)

1698 
	#XK_H™gul_H™ja
 0xff34

	)

1699 
	#XK_H™gul_Jamo
 0xff35

	)

1700 
	#XK_H™gul_Romaja
 0xff36

	)

1701 
	#XK_H™gul_Codeöput
 0xff37

	)

1702 
	#XK_H™gul_Je⁄ja
 0xff38

	)

1703 
	#XK_H™gul_B™ja
 0xff39

	)

1704 
	#XK_H™gul_PªH™ja
 0xff3®

	)

1705 
	#XK_H™gul_Po°H™ja
 0xff3b

	)

1706 
	#XK_H™gul_SögÀC™did©e
 0xff3¯

	)

1707 
	#XK_H™gul_Mu…ùÀC™did©e
 0xff3d

	)

1708 
	#XK_H™gul_PªviousC™did©e
 0xff3ê

	)

1709 
	#XK_H™gul_S≥cül
 0xff3‡

	)

1710 
	#XK_H™gul_swôch
 0xff7ê

	)

1713 
	#XK_H™gul_Kiyeog
 0x0ó1

	)

1714 
	#XK_H™gul_SßngKiyeog
 0x0ó2

	)

1715 
	#XK_H™gul_KiyeogSios
 0x0ó3

	)

1716 
	#XK_H™gul_Nõun
 0x0ó4

	)

1717 
	#XK_H™gul_NõunJõuj
 0x0ó5

	)

1718 
	#XK_H™gul_NõunHõuh
 0x0ó6

	)

1719 
	#XK_H™gul_Dikeud
 0x0ó7

	)

1720 
	#XK_H™gul_SßngDikeud
 0x0ó8

	)

1721 
	#XK_H™gul_Rõul
 0x0ó9

	)

1722 
	#XK_H™gul_RõulKiyeog
 0x0óa

	)

1723 
	#XK_H™gul_RõulMõum
 0x0ób

	)

1724 
	#XK_H™gul_RõulPõub
 0x0óc

	)

1725 
	#XK_H™gul_RõulSios
 0x0ód

	)

1726 
	#XK_H™gul_RõulTõut
 0x0óe

	)

1727 
	#XK_H™gul_RõulPhõuf
 0x0óf

	)

1728 
	#XK_H™gul_RõulHõuh
 0x0eb0

	)

1729 
	#XK_H™gul_Mõum
 0x0eb1

	)

1730 
	#XK_H™gul_Põub
 0x0eb2

	)

1731 
	#XK_H™gul_SßngPõub
 0x0eb3

	)

1732 
	#XK_H™gul_PõubSios
 0x0eb4

	)

1733 
	#XK_H™gul_Sios
 0x0eb5

	)

1734 
	#XK_H™gul_SßngSios
 0x0eb6

	)

1735 
	#XK_H™gul_Ieung
 0x0eb7

	)

1736 
	#XK_H™gul_Jõuj
 0x0eb8

	)

1737 
	#XK_H™gul_SßngJõuj
 0x0eb9

	)

1738 
	#XK_H™gul_Cõuc
 0x0eba

	)

1739 
	#XK_H™gul_Khõuq
 0x0ebb

	)

1740 
	#XK_H™gul_Tõut
 0x0ebc

	)

1741 
	#XK_H™gul_Phõuf
 0x0ebd

	)

1742 
	#XK_H™gul_Hõuh
 0x0ebe

	)

1745 
	#XK_H™gul_A
 0x0ebf

	)

1746 
	#XK_H™gul_AE
 0x0ec0

	)

1747 
	#XK_H™gul_YA
 0x0ec1

	)

1748 
	#XK_H™gul_YAE
 0x0ec2

	)

1749 
	#XK_H™gul_EO
 0x0ec3

	)

1750 
	#XK_H™gul_E
 0x0ec4

	)

1751 
	#XK_H™gul_YEO
 0x0ec5

	)

1752 
	#XK_H™gul_YE
 0x0ec6

	)

1753 
	#XK_H™gul_O
 0x0ec7

	)

1754 
	#XK_H™gul_WA
 0x0ec8

	)

1755 
	#XK_H™gul_WAE
 0x0ec9

	)

1756 
	#XK_H™gul_OE
 0x0eˇ

	)

1757 
	#XK_H™gul_YO
 0x0ecb

	)

1758 
	#XK_H™gul_U
 0x0ecc

	)

1759 
	#XK_H™gul_WEO
 0x0ecd

	)

1760 
	#XK_H™gul_WE
 0x0e˚

	)

1761 
	#XK_H™gul_WI
 0x0ecf

	)

1762 
	#XK_H™gul_YU
 0x0ed0

	)

1763 
	#XK_H™gul_EU
 0x0ed1

	)

1764 
	#XK_H™gul_YI
 0x0ed2

	)

1765 
	#XK_H™gul_I
 0x0ed3

	)

1768 
	#XK_H™gul_J_Kiyeog
 0x0ed4

	)

1769 
	#XK_H™gul_J_SßngKiyeog
 0x0ed5

	)

1770 
	#XK_H™gul_J_KiyeogSios
 0x0ed6

	)

1771 
	#XK_H™gul_J_Nõun
 0x0ed7

	)

1772 
	#XK_H™gul_J_NõunJõuj
 0x0ed8

	)

1773 
	#XK_H™gul_J_NõunHõuh
 0x0ed9

	)

1774 
	#XK_H™gul_J_Dikeud
 0x0eda

	)

1775 
	#XK_H™gul_J_Rõul
 0x0edb

	)

1776 
	#XK_H™gul_J_RõulKiyeog
 0x0edc

	)

1777 
	#XK_H™gul_J_RõulMõum
 0x0edd

	)

1778 
	#XK_H™gul_J_RõulPõub
 0x0ede

	)

1779 
	#XK_H™gul_J_RõulSios
 0x0edf

	)

1780 
	#XK_H™gul_J_RõulTõut
 0x0ì0

	)

1781 
	#XK_H™gul_J_RõulPhõuf
 0x0ì1

	)

1782 
	#XK_H™gul_J_RõulHõuh
 0x0ì2

	)

1783 
	#XK_H™gul_J_Mõum
 0x0ì3

	)

1784 
	#XK_H™gul_J_Põub
 0x0ì4

	)

1785 
	#XK_H™gul_J_PõubSios
 0x0ì5

	)

1786 
	#XK_H™gul_J_Sios
 0x0ì6

	)

1787 
	#XK_H™gul_J_SßngSios
 0x0ì7

	)

1788 
	#XK_H™gul_J_Ieung
 0x0ì8

	)

1789 
	#XK_H™gul_J_Jõuj
 0x0ì9

	)

1790 
	#XK_H™gul_J_Cõuc
 0x0ìa

	)

1791 
	#XK_H™gul_J_Khõuq
 0x0ìb

	)

1792 
	#XK_H™gul_J_Tõut
 0x0ìc

	)

1793 
	#XK_H™gul_J_Phõuf
 0x0ìd

	)

1794 
	#XK_H™gul_J_Hõuh
 0x0ìe

	)

1797 
	#XK_H™gul_RõulYe‹öHõuh
 0x0ìf

	)

1798 
	#XK_H™gul_Sunkye⁄geumMõum
 0x0ef0

	)

1799 
	#XK_H™gul_Sunkye⁄geumPõub
 0x0ef1

	)

1800 
	#XK_H™gul_P™Sios
 0x0ef2

	)

1801 
	#XK_H™gul_KkogjiDÆröIeung
 0x0ef3

	)

1802 
	#XK_H™gul_Sunkye⁄geumPhõuf
 0x0ef4

	)

1803 
	#XK_H™gul_Ye‹öHõuh
 0x0ef5

	)

1806 
	#XK_H™gul_AøeA
 0x0ef6

	)

1807 
	#XK_H™gul_AøeAE
 0x0ef7

	)

1810 
	#XK_H™gul_J_P™Sios
 0x0ef8

	)

1811 
	#XK_H™gul_J_KkogjiDÆröIeung
 0x0ef9

	)

1812 
	#XK_H™gul_J_Ye‹öHõuh
 0x0eÁ

	)

1815 
	#XK_K‹ón_W⁄
 0x0ef‡

	)

1823 #ifde‡
XK_ARMENIAN


1824 
	#XK_Armíün_lig©uª_ew
 0x1000587

	)

1825 
	#XK_Armíün_fuŒ_°›
 0x1000589

	)

1826 
	#XK_Armíün_vîjakë
 0x1000589

	)

1827 
	#XK_Armíün_£∑øti⁄_m¨k
 0x100055d

	)

1828 
	#XK_Armíün_but
 0x100055d

	)

1829 
	#XK_Armíün_hyphí
 0x100058®

	)

1830 
	#XK_Armíün_yíèm«
 0x100058®

	)

1831 
	#XK_Armíün_ex˛am
 0x100055¯

	)

1832 
	#XK_Armíün_am™ak
 0x100055¯

	)

1833 
	#XK_Armíün_ac˚¡
 0x100055b

	)

1834 
	#XK_Armíün_shesht
 0x100055b

	)

1835 
	#XK_Armíün_que°i⁄
 0x100055ê

	)

1836 
	#XK_Armíün_∑ruyk
 0x100055ê

	)

1837 
	#XK_Armíün_AYB
 0x1000531

	)

1838 
	#XK_Armíün_ayb
 0x1000561

	)

1839 
	#XK_Armíün_BEN
 0x1000532

	)

1840 
	#XK_Armíün_bí
 0x1000562

	)

1841 
	#XK_Armíün_GIM
 0x1000533

	)

1842 
	#XK_Armíün_gim
 0x1000563

	)

1843 
	#XK_Armíün_DA
 0x1000534

	)

1844 
	#XK_Armíün_da
 0x1000564

	)

1845 
	#XK_Armíün_YECH
 0x1000535

	)

1846 
	#XK_Armíün_yech
 0x1000565

	)

1847 
	#XK_Armíün_ZA
 0x1000536

	)

1848 
	#XK_Armíün_za
 0x1000566

	)

1849 
	#XK_Armíün_E
 0x1000537

	)

1850 
	#XK_Armíün_e
 0x1000567

	)

1851 
	#XK_Armíün_AT
 0x1000538

	)

1852 
	#XK_Armíün_©
 0x1000568

	)

1853 
	#XK_Armíün_TO
 0x1000539

	)

1854 
	#XK_Armíün_to
 0x1000569

	)

1855 
	#XK_Armíün_ZHE
 0x100053®

	)

1856 
	#XK_Armíün_zhe
 0x100056®

	)

1857 
	#XK_Armíün_INI
 0x100053b

	)

1858 
	#XK_Armíün_öi
 0x100056b

	)

1859 
	#XK_Armíün_LYUN
 0x100053¯

	)

1860 
	#XK_Armíün_lyun
 0x100056¯

	)

1861 
	#XK_Armíün_KHE
 0x100053d

	)

1862 
	#XK_Armíün_khe
 0x100056d

	)

1863 
	#XK_Armíün_TSA
 0x100053ê

	)

1864 
	#XK_Armíün_tß
 0x100056ê

	)

1865 
	#XK_Armíün_KEN
 0x100053‡

	)

1866 
	#XK_Armíün_kí
 0x100056‡

	)

1867 
	#XK_Armíün_HO
 0x1000540

	)

1868 
	#XK_Armíün_ho
 0x1000570

	)

1869 
	#XK_Armíün_DZA
 0x1000541

	)

1870 
	#XK_Armíün_dza
 0x1000571

	)

1871 
	#XK_Armíün_GHAT
 0x1000542

	)

1872 
	#XK_Armíün_gh©
 0x1000572

	)

1873 
	#XK_Armíün_TCHE
 0x1000543

	)

1874 
	#XK_Armíün_tche
 0x1000573

	)

1875 
	#XK_Armíün_MEN
 0x1000544

	)

1876 
	#XK_Armíün_mí
 0x1000574

	)

1877 
	#XK_Armíün_HI
 0x1000545

	)

1878 
	#XK_Armíün_hi
 0x1000575

	)

1879 
	#XK_Armíün_NU
 0x1000546

	)

1880 
	#XK_Armíün_nu
 0x1000576

	)

1881 
	#XK_Armíün_SHA
 0x1000547

	)

1882 
	#XK_Armíün_sha
 0x1000577

	)

1883 
	#XK_Armíün_VO
 0x1000548

	)

1884 
	#XK_Armíün_vo
 0x1000578

	)

1885 
	#XK_Armíün_CHA
 0x1000549

	)

1886 
	#XK_Armíün_cha
 0x1000579

	)

1887 
	#XK_Armíün_PE
 0x100054®

	)

1888 
	#XK_Armíün_≥
 0x100057®

	)

1889 
	#XK_Armíün_JE
 0x100054b

	)

1890 
	#XK_Armíün_je
 0x100057b

	)

1891 
	#XK_Armíün_RA
 0x100054¯

	)

1892 
	#XK_Armíün_ø
 0x100057¯

	)

1893 
	#XK_Armíün_SE
 0x100054d

	)

1894 
	#XK_Armíün_£
 0x100057d

	)

1895 
	#XK_Armíün_VEV
 0x100054ê

	)

1896 
	#XK_Armíün_vev
 0x100057ê

	)

1897 
	#XK_Armíün_TYUN
 0x100054‡

	)

1898 
	#XK_Armíün_tyun
 0x100057‡

	)

1899 
	#XK_Armíün_RE
 0x1000550

	)

1900 
	#XK_Armíün_ª
 0x1000580

	)

1901 
	#XK_Armíün_TSO
 0x1000551

	)

1902 
	#XK_Armíün_tso
 0x1000581

	)

1903 
	#XK_Armíün_VYUN
 0x1000552

	)

1904 
	#XK_Armíün_vyun
 0x1000582

	)

1905 
	#XK_Armíün_PYUR
 0x1000553

	)

1906 
	#XK_Armíün_pyur
 0x1000583

	)

1907 
	#XK_Armíün_KE
 0x1000554

	)

1908 
	#XK_Armíün_ke
 0x1000584

	)

1909 
	#XK_Armíün_O
 0x1000555

	)

1910 
	#XK_Armíün_o
 0x1000585

	)

1911 
	#XK_Armíün_FE
 0x1000556

	)

1912 
	#XK_Armíün_„
 0x1000586

	)

1913 
	#XK_Armíün_≠o°r›he
 0x100055®

	)

1920 #ifde‡
XK_GEORGIAN


1921 
	#XK_Ge‹gün_™
 0x10010d0

	)

1922 
	#XK_Ge‹gün_b™
 0x10010d1

	)

1923 
	#XK_Ge‹gün_g™
 0x10010d2

	)

1924 
	#XK_Ge‹gün_d⁄
 0x10010d3

	)

1925 
	#XK_Ge‹gün_í
 0x10010d4

	)

1926 
	#XK_Ge‹gün_vö
 0x10010d5

	)

1927 
	#XK_Ge‹gün_zí
 0x10010d6

	)

1928 
	#XK_Ge‹gün_èn
 0x10010d7

	)

1929 
	#XK_Ge‹gün_ö
 0x10010d8

	)

1930 
	#XK_Ge‹gün_k™
 0x10010d9

	)

1931 
	#XK_Ge‹gün_œs
 0x10010d®

	)

1932 
	#XK_Ge‹gün_m™
 0x10010db

	)

1933 
	#XK_Ge‹gün_«r
 0x10010d¯

	)

1934 
	#XK_Ge‹gün_⁄
 0x10010dd

	)

1935 
	#XK_Ge‹gün_∑r
 0x10010dê

	)

1936 
	#XK_Ge‹gün_zh¨
 0x10010d‡

	)

1937 
	#XK_Ge‹gün_øe
 0x10010e0

	)

1938 
	#XK_Ge‹gün_ßn
 0x10010e1

	)

1939 
	#XK_Ge‹gün_èr
 0x10010e2

	)

1940 
	#XK_Ge‹gün_un
 0x10010e3

	)

1941 
	#XK_Ge‹gün_ph¨
 0x10010e4

	)

1942 
	#XK_Ge‹gün_kh¨
 0x10010e5

	)

1943 
	#XK_Ge‹gün_gh™
 0x10010e6

	)

1944 
	#XK_Ge‹gün_q¨
 0x10010e7

	)

1945 
	#XK_Ge‹gün_shö
 0x10010e8

	)

1946 
	#XK_Ge‹gün_chö
 0x10010e9

	)

1947 
	#XK_Ge‹gün_ˇn
 0x10010ó

	)

1948 
	#XK_Ge‹gün_jû
 0x10010eb

	)

1949 
	#XK_Ge‹gün_cû
 0x10010e¯

	)

1950 
	#XK_Ge‹gün_ch¨
 0x10010ed

	)

1951 
	#XK_Ge‹gün_x™
 0x10010ì

	)

1952 
	#XK_Ge‹gün_jh™
 0x10010e‡

	)

1953 
	#XK_Ge‹gün_h´
 0x10010f0

	)

1954 
	#XK_Ge‹gün_he
 0x10010f1

	)

1955 
	#XK_Ge‹gün_hõ
 0x10010f2

	)

1956 
	#XK_Ge‹gün_we
 0x10010f3

	)

1957 
	#XK_Ge‹gün_h¨
 0x10010f4

	)

1958 
	#XK_Ge‹gün_h€
 0x10010f5

	)

1959 
	#XK_Ge‹gün_fi
 0x10010f6

	)

1966 #ifde‡
XK_CAUCASUS


1968 
	#XK_XabovedŸ
 0x1001e8®

	)

1969 
	#XK_Ibªve
 0x100012¯

	)

1970 
	#XK_Z°roke
 0x10001b5

	)

1971 
	#XK_Gˇr⁄
 0x10001e6

	)

1972 
	#XK_Oˇr⁄
 0x10001d1

	)

1973 
	#XK_Ob¨ªd
 0x100019‡

	)

1974 
	#XK_xabovedŸ
 0x1001e8b

	)

1975 
	#XK_ibªve
 0x100012d

	)

1976 
	#XK_z°roke
 0x10001b6

	)

1977 
	#XK_gˇr⁄
 0x10001e7

	)

1978 
	#XK_oˇr⁄
 0x10001d2

	)

1979 
	#XK_ob¨ªd
 0x1000275

	)

1980 
	#XK_SCHWA
 0x100018‡

	)

1981 
	#XK_schwa
 0x1000259

	)

1982 
	#XK_EZH
 0x10001b7

	)

1983 
	#XK_ezh
 0x1000292

	)

1986 
	#XK_LbñowdŸ
 0x1001e36

	)

1987 
	#XK_lbñowdŸ
 0x1001e37

	)

1994 #ifde‡
XK_VIETNAMESE


1995 
	#XK_AbñowdŸ
 0x1001ó0

	)

1996 
	#XK_abñowdŸ
 0x1001ó1

	)

1997 
	#XK_Ahook
 0x1001ó2

	)

1998 
	#XK_ahook
 0x1001ó3

	)

1999 
	#XK_AcúcumÊexacuã
 0x1001ó4

	)

2000 
	#XK_acúcumÊexacuã
 0x1001ó5

	)

2001 
	#XK_AcúcumÊexgøve
 0x1001ó6

	)

2002 
	#XK_acúcumÊexgøve
 0x1001ó7

	)

2003 
	#XK_AcúcumÊexhook
 0x1001ó8

	)

2004 
	#XK_acúcumÊexhook
 0x1001ó9

	)

2005 
	#XK_AcúcumÊextûde
 0x1001ó®

	)

2006 
	#XK_acúcumÊextûde
 0x1001ób

	)

2007 
	#XK_AcúcumÊexbñowdŸ
 0x1001ó¯

	)

2008 
	#XK_acúcumÊexbñowdŸ
 0x1001ód

	)

2009 
	#XK_Abªvócuã
 0x1001óê

	)

2010 
	#XK_abªvócuã
 0x1001ó‡

	)

2011 
	#XK_Abªvegøve
 0x1001eb0

	)

2012 
	#XK_abªvegøve
 0x1001eb1

	)

2013 
	#XK_Abªvehook
 0x1001eb2

	)

2014 
	#XK_abªvehook
 0x1001eb3

	)

2015 
	#XK_Abªvëûde
 0x1001eb4

	)

2016 
	#XK_abªvëûde
 0x1001eb5

	)

2017 
	#XK_AbªvebñowdŸ
 0x1001eb6

	)

2018 
	#XK_abªvebñowdŸ
 0x1001eb7

	)

2019 
	#XK_EbñowdŸ
 0x1001eb8

	)

2020 
	#XK_ebñowdŸ
 0x1001eb9

	)

2021 
	#XK_Ehook
 0x1001eb®

	)

2022 
	#XK_ehook
 0x1001ebb

	)

2023 
	#XK_Etûde
 0x1001eb¯

	)

2024 
	#XK_ëûde
 0x1001ebd

	)

2025 
	#XK_EcúcumÊexacuã
 0x1001ebê

	)

2026 
	#XK_ecúcumÊexacuã
 0x1001eb‡

	)

2027 
	#XK_EcúcumÊexgøve
 0x1001ec0

	)

2028 
	#XK_ecúcumÊexgøve
 0x1001ec1

	)

2029 
	#XK_EcúcumÊexhook
 0x1001ec2

	)

2030 
	#XK_ecúcumÊexhook
 0x1001ec3

	)

2031 
	#XK_EcúcumÊextûde
 0x1001ec4

	)

2032 
	#XK_ecúcumÊextûde
 0x1001ec5

	)

2033 
	#XK_EcúcumÊexbñowdŸ
 0x1001ec6

	)

2034 
	#XK_ecúcumÊexbñowdŸ
 0x1001ec7

	)

2035 
	#XK_Ihook
 0x1001ec8

	)

2036 
	#XK_ihook
 0x1001ec9

	)

2037 
	#XK_IbñowdŸ
 0x1001eˇ

	)

2038 
	#XK_ibñowdŸ
 0x1001ecb

	)

2039 
	#XK_ObñowdŸ
 0x1001ec¯

	)

2040 
	#XK_obñowdŸ
 0x1001ecd

	)

2041 
	#XK_Ohook
 0x1001e˚

	)

2042 
	#XK_ohook
 0x1001ec‡

	)

2043 
	#XK_OcúcumÊexacuã
 0x1001ed0

	)

2044 
	#XK_ocúcumÊexacuã
 0x1001ed1

	)

2045 
	#XK_OcúcumÊexgøve
 0x1001ed2

	)

2046 
	#XK_ocúcumÊexgøve
 0x1001ed3

	)

2047 
	#XK_OcúcumÊexhook
 0x1001ed4

	)

2048 
	#XK_ocúcumÊexhook
 0x1001ed5

	)

2049 
	#XK_OcúcumÊextûde
 0x1001ed6

	)

2050 
	#XK_ocúcumÊextûde
 0x1001ed7

	)

2051 
	#XK_OcúcumÊexbñowdŸ
 0x1001ed8

	)

2052 
	#XK_ocúcumÊexbñowdŸ
 0x1001ed9

	)

2053 
	#XK_Oh‹«cuã
 0x1001ed®

	)

2054 
	#XK_oh‹«cuã
 0x1001edb

	)

2055 
	#XK_Oh‹ngøve
 0x1001ed¯

	)

2056 
	#XK_oh‹ngøve
 0x1001edd

	)

2057 
	#XK_Oh‹nhook
 0x1001edê

	)

2058 
	#XK_oh‹nhook
 0x1001ed‡

	)

2059 
	#XK_Oh‹¡ûde
 0x1001ì0

	)

2060 
	#XK_oh‹¡ûde
 0x1001ì1

	)

2061 
	#XK_Oh‹nbñowdŸ
 0x1001ì2

	)

2062 
	#XK_oh‹nbñowdŸ
 0x1001ì3

	)

2063 
	#XK_UbñowdŸ
 0x1001ì4

	)

2064 
	#XK_ubñowdŸ
 0x1001ì5

	)

2065 
	#XK_Uhook
 0x1001ì6

	)

2066 
	#XK_uhook
 0x1001ì7

	)

2067 
	#XK_Uh‹«cuã
 0x1001ì8

	)

2068 
	#XK_uh‹«cuã
 0x1001ì9

	)

2069 
	#XK_Uh‹ngøve
 0x1001ì®

	)

2070 
	#XK_uh‹ngøve
 0x1001ìb

	)

2071 
	#XK_Uh‹nhook
 0x1001ì¯

	)

2072 
	#XK_uh‹nhook
 0x1001ìd

	)

2073 
	#XK_Uh‹¡ûde
 0x1001ìê

	)

2074 
	#XK_uh‹¡ûde
 0x1001ì‡

	)

2075 
	#XK_Uh‹nbñowdŸ
 0x1001ef0

	)

2076 
	#XK_uh‹nbñowdŸ
 0x1001ef1

	)

2077 
	#XK_YbñowdŸ
 0x1001ef4

	)

2078 
	#XK_ybñowdŸ
 0x1001ef5

	)

2079 
	#XK_Yhook
 0x1001ef6

	)

2080 
	#XK_yhook
 0x1001ef7

	)

2081 
	#XK_Ytûde
 0x1001ef8

	)

2082 
	#XK_ytûde
 0x1001ef9

	)

2083 
	#XK_Oh‹n
 0x10001a0

	)

2084 
	#XK_oh‹n
 0x10001a1

	)

2085 
	#XK_Uh‹n
 0x10001a‡

	)

2086 
	#XK_uh‹n
 0x10001b0

	)

2090 #ifde‡
XK_CURRENCY


2091 
	#XK_EcuSign
 0x10020a0

	)

2092 
	#XK_Cﬁ⁄Sign
 0x10020a1

	)

2093 
	#XK_CruzeúoSign
 0x10020a2

	)

2094 
	#XK_FFøncSign
 0x10020a3

	)

2095 
	#XK_LúaSign
 0x10020a4

	)

2096 
	#XK_MûlSign
 0x10020a5

	)

2097 
	#XK_NaúaSign
 0x10020a6

	)

2098 
	#XK_Pe£èSign
 0x10020a7

	)

2099 
	#XK_Ru≥eSign
 0x10020a8

	)

2100 
	#XK_W⁄Sign
 0x10020a9

	)

2101 
	#XK_NewSheqñSign
 0x10020Ø

	)

2102 
	#XK_D⁄gSign
 0x10020ab

	)

2103 
	#XK_EuroSign
 0x20a¯

	)

2106 #ifde‡
XK_MATHEMATICAL


2108 
	#XK_zîosu≥ri‹
 0x1002070

	)

2109 
	#XK_foursu≥ri‹
 0x1002074

	)

2110 
	#XK_fivesu≥ri‹
 0x1002075

	)

2111 
	#XK_sixsu≥ri‹
 0x1002076

	)

2112 
	#XK_£vísu≥ri‹
 0x1002077

	)

2113 
	#XK_eightsu≥ri‹
 0x1002078

	)

2114 
	#XK_nöesu≥ri‹
 0x1002079

	)

2115 
	#XK_zîosubs¸ùt
 0x1002080

	)

2116 
	#XK_⁄esubs¸ùt
 0x1002081

	)

2117 
	#XK_twosubs¸ùt
 0x1002082

	)

2118 
	#XK_thªesubs¸ùt
 0x1002083

	)

2119 
	#XK_foursubs¸ùt
 0x1002084

	)

2120 
	#XK_fivesubs¸ùt
 0x1002085

	)

2121 
	#XK_sixsubs¸ùt
 0x1002086

	)

2122 
	#XK_£vísubs¸ùt
 0x1002087

	)

2123 
	#XK_eightsubs¸ùt
 0x1002088

	)

2124 
	#XK_nöesubs¸ùt
 0x1002089

	)

2125 
	#XK_∑πdif„ª¡ül
 0x1002202

	)

2126 
	#XK_em±y£t
 0x1002205

	)

2127 
	#XK_ñemítof
 0x1002208

	)

2128 
	#XK_nŸñemítof
 0x1002209

	)

2129 
	#XK_c⁄èößs
 0x100220B

	)

2130 
	#XK_squ¨îoŸ
 0x100221A

	)

2131 
	#XK_cubîoŸ
 0x100221B

	)

2132 
	#XK_fouπhroŸ
 0x100221C

	)

2133 
	#XK_döãgøl
 0x100222C

	)

2134 
	#XK_töãgøl
 0x100222D

	)

2135 
	#XK_beˇu£
 0x1002235

	)

2136 
	#XK_≠¥oxeq
 0x1002248

	)

2137 
	#XK_nŸ≠¥oxeq
 0x1002247

	)

2138 
	#XK_nŸidítiˇl
 0x1002262

	)

2139 
	#XK_°ri˘eq
 0x1002263

	)

2142 #ifde‡
XK_BRAILLE


2143 
	#XK_bøûÀ_dŸ_1
 0xfff1

	)

2144 
	#XK_bøûÀ_dŸ_2
 0xfff2

	)

2145 
	#XK_bøûÀ_dŸ_3
 0xfff3

	)

2146 
	#XK_bøûÀ_dŸ_4
 0xfff4

	)

2147 
	#XK_bøûÀ_dŸ_5
 0xfff5

	)

2148 
	#XK_bøûÀ_dŸ_6
 0xfff6

	)

2149 
	#XK_bøûÀ_dŸ_7
 0xfff7

	)

2150 
	#XK_bøûÀ_dŸ_8
 0xfff8

	)

2151 
	#XK_bøûÀ_dŸ_9
 0xfff9

	)

2152 
	#XK_bøûÀ_dŸ_10
 0xffÁ

	)

2153 
	#XK_bøûÀ_bœnk
 0x1002800

	)

2154 
	#XK_bøûÀ_dŸs_1
 0x1002801

	)

2155 
	#XK_bøûÀ_dŸs_2
 0x1002802

	)

2156 
	#XK_bøûÀ_dŸs_12
 0x1002803

	)

2157 
	#XK_bøûÀ_dŸs_3
 0x1002804

	)

2158 
	#XK_bøûÀ_dŸs_13
 0x1002805

	)

2159 
	#XK_bøûÀ_dŸs_23
 0x1002806

	)

2160 
	#XK_bøûÀ_dŸs_123
 0x1002807

	)

2161 
	#XK_bøûÀ_dŸs_4
 0x1002808

	)

2162 
	#XK_bøûÀ_dŸs_14
 0x1002809

	)

2163 
	#XK_bøûÀ_dŸs_24
 0x100280®

	)

2164 
	#XK_bøûÀ_dŸs_124
 0x100280b

	)

2165 
	#XK_bøûÀ_dŸs_34
 0x100280¯

	)

2166 
	#XK_bøûÀ_dŸs_134
 0x100280d

	)

2167 
	#XK_bøûÀ_dŸs_234
 0x100280ê

	)

2168 
	#XK_bøûÀ_dŸs_1234
 0x100280‡

	)

2169 
	#XK_bøûÀ_dŸs_5
 0x1002810

	)

2170 
	#XK_bøûÀ_dŸs_15
 0x1002811

	)

2171 
	#XK_bøûÀ_dŸs_25
 0x1002812

	)

2172 
	#XK_bøûÀ_dŸs_125
 0x1002813

	)

2173 
	#XK_bøûÀ_dŸs_35
 0x1002814

	)

2174 
	#XK_bøûÀ_dŸs_135
 0x1002815

	)

2175 
	#XK_bøûÀ_dŸs_235
 0x1002816

	)

2176 
	#XK_bøûÀ_dŸs_1235
 0x1002817

	)

2177 
	#XK_bøûÀ_dŸs_45
 0x1002818

	)

2178 
	#XK_bøûÀ_dŸs_145
 0x1002819

	)

2179 
	#XK_bøûÀ_dŸs_245
 0x100281®

	)

2180 
	#XK_bøûÀ_dŸs_1245
 0x100281b

	)

2181 
	#XK_bøûÀ_dŸs_345
 0x100281¯

	)

2182 
	#XK_bøûÀ_dŸs_1345
 0x100281d

	)

2183 
	#XK_bøûÀ_dŸs_2345
 0x100281ê

	)

2184 
	#XK_bøûÀ_dŸs_12345
 0x100281‡

	)

2185 
	#XK_bøûÀ_dŸs_6
 0x1002820

	)

2186 
	#XK_bøûÀ_dŸs_16
 0x1002821

	)

2187 
	#XK_bøûÀ_dŸs_26
 0x1002822

	)

2188 
	#XK_bøûÀ_dŸs_126
 0x1002823

	)

2189 
	#XK_bøûÀ_dŸs_36
 0x1002824

	)

2190 
	#XK_bøûÀ_dŸs_136
 0x1002825

	)

2191 
	#XK_bøûÀ_dŸs_236
 0x1002826

	)

2192 
	#XK_bøûÀ_dŸs_1236
 0x1002827

	)

2193 
	#XK_bøûÀ_dŸs_46
 0x1002828

	)

2194 
	#XK_bøûÀ_dŸs_146
 0x1002829

	)

2195 
	#XK_bøûÀ_dŸs_246
 0x100282®

	)

2196 
	#XK_bøûÀ_dŸs_1246
 0x100282b

	)

2197 
	#XK_bøûÀ_dŸs_346
 0x100282¯

	)

2198 
	#XK_bøûÀ_dŸs_1346
 0x100282d

	)

2199 
	#XK_bøûÀ_dŸs_2346
 0x100282ê

	)

2200 
	#XK_bøûÀ_dŸs_12346
 0x100282‡

	)

2201 
	#XK_bøûÀ_dŸs_56
 0x1002830

	)

2202 
	#XK_bøûÀ_dŸs_156
 0x1002831

	)

2203 
	#XK_bøûÀ_dŸs_256
 0x1002832

	)

2204 
	#XK_bøûÀ_dŸs_1256
 0x1002833

	)

2205 
	#XK_bøûÀ_dŸs_356
 0x1002834

	)

2206 
	#XK_bøûÀ_dŸs_1356
 0x1002835

	)

2207 
	#XK_bøûÀ_dŸs_2356
 0x1002836

	)

2208 
	#XK_bøûÀ_dŸs_12356
 0x1002837

	)

2209 
	#XK_bøûÀ_dŸs_456
 0x1002838

	)

2210 
	#XK_bøûÀ_dŸs_1456
 0x1002839

	)

2211 
	#XK_bøûÀ_dŸs_2456
 0x100283®

	)

2212 
	#XK_bøûÀ_dŸs_12456
 0x100283b

	)

2213 
	#XK_bøûÀ_dŸs_3456
 0x100283¯

	)

2214 
	#XK_bøûÀ_dŸs_13456
 0x100283d

	)

2215 
	#XK_bøûÀ_dŸs_23456
 0x100283ê

	)

2216 
	#XK_bøûÀ_dŸs_123456
 0x100283‡

	)

2217 
	#XK_bøûÀ_dŸs_7
 0x1002840

	)

2218 
	#XK_bøûÀ_dŸs_17
 0x1002841

	)

2219 
	#XK_bøûÀ_dŸs_27
 0x1002842

	)

2220 
	#XK_bøûÀ_dŸs_127
 0x1002843

	)

2221 
	#XK_bøûÀ_dŸs_37
 0x1002844

	)

2222 
	#XK_bøûÀ_dŸs_137
 0x1002845

	)

2223 
	#XK_bøûÀ_dŸs_237
 0x1002846

	)

2224 
	#XK_bøûÀ_dŸs_1237
 0x1002847

	)

2225 
	#XK_bøûÀ_dŸs_47
 0x1002848

	)

2226 
	#XK_bøûÀ_dŸs_147
 0x1002849

	)

2227 
	#XK_bøûÀ_dŸs_247
 0x100284®

	)

2228 
	#XK_bøûÀ_dŸs_1247
 0x100284b

	)

2229 
	#XK_bøûÀ_dŸs_347
 0x100284¯

	)

2230 
	#XK_bøûÀ_dŸs_1347
 0x100284d

	)

2231 
	#XK_bøûÀ_dŸs_2347
 0x100284ê

	)

2232 
	#XK_bøûÀ_dŸs_12347
 0x100284‡

	)

2233 
	#XK_bøûÀ_dŸs_57
 0x1002850

	)

2234 
	#XK_bøûÀ_dŸs_157
 0x1002851

	)

2235 
	#XK_bøûÀ_dŸs_257
 0x1002852

	)

2236 
	#XK_bøûÀ_dŸs_1257
 0x1002853

	)

2237 
	#XK_bøûÀ_dŸs_357
 0x1002854

	)

2238 
	#XK_bøûÀ_dŸs_1357
 0x1002855

	)

2239 
	#XK_bøûÀ_dŸs_2357
 0x1002856

	)

2240 
	#XK_bøûÀ_dŸs_12357
 0x1002857

	)

2241 
	#XK_bøûÀ_dŸs_457
 0x1002858

	)

2242 
	#XK_bøûÀ_dŸs_1457
 0x1002859

	)

2243 
	#XK_bøûÀ_dŸs_2457
 0x100285®

	)

2244 
	#XK_bøûÀ_dŸs_12457
 0x100285b

	)

2245 
	#XK_bøûÀ_dŸs_3457
 0x100285¯

	)

2246 
	#XK_bøûÀ_dŸs_13457
 0x100285d

	)

2247 
	#XK_bøûÀ_dŸs_23457
 0x100285ê

	)

2248 
	#XK_bøûÀ_dŸs_123457
 0x100285‡

	)

2249 
	#XK_bøûÀ_dŸs_67
 0x1002860

	)

2250 
	#XK_bøûÀ_dŸs_167
 0x1002861

	)

2251 
	#XK_bøûÀ_dŸs_267
 0x1002862

	)

2252 
	#XK_bøûÀ_dŸs_1267
 0x1002863

	)

2253 
	#XK_bøûÀ_dŸs_367
 0x1002864

	)

2254 
	#XK_bøûÀ_dŸs_1367
 0x1002865

	)

2255 
	#XK_bøûÀ_dŸs_2367
 0x1002866

	)

2256 
	#XK_bøûÀ_dŸs_12367
 0x1002867

	)

2257 
	#XK_bøûÀ_dŸs_467
 0x1002868

	)

2258 
	#XK_bøûÀ_dŸs_1467
 0x1002869

	)

2259 
	#XK_bøûÀ_dŸs_2467
 0x100286®

	)

2260 
	#XK_bøûÀ_dŸs_12467
 0x100286b

	)

2261 
	#XK_bøûÀ_dŸs_3467
 0x100286¯

	)

2262 
	#XK_bøûÀ_dŸs_13467
 0x100286d

	)

2263 
	#XK_bøûÀ_dŸs_23467
 0x100286ê

	)

2264 
	#XK_bøûÀ_dŸs_123467
 0x100286‡

	)

2265 
	#XK_bøûÀ_dŸs_567
 0x1002870

	)

2266 
	#XK_bøûÀ_dŸs_1567
 0x1002871

	)

2267 
	#XK_bøûÀ_dŸs_2567
 0x1002872

	)

2268 
	#XK_bøûÀ_dŸs_12567
 0x1002873

	)

2269 
	#XK_bøûÀ_dŸs_3567
 0x1002874

	)

2270 
	#XK_bøûÀ_dŸs_13567
 0x1002875

	)

2271 
	#XK_bøûÀ_dŸs_23567
 0x1002876

	)

2272 
	#XK_bøûÀ_dŸs_123567
 0x1002877

	)

2273 
	#XK_bøûÀ_dŸs_4567
 0x1002878

	)

2274 
	#XK_bøûÀ_dŸs_14567
 0x1002879

	)

2275 
	#XK_bøûÀ_dŸs_24567
 0x100287®

	)

2276 
	#XK_bøûÀ_dŸs_124567
 0x100287b

	)

2277 
	#XK_bøûÀ_dŸs_34567
 0x100287¯

	)

2278 
	#XK_bøûÀ_dŸs_134567
 0x100287d

	)

2279 
	#XK_bøûÀ_dŸs_234567
 0x100287ê

	)

2280 
	#XK_bøûÀ_dŸs_1234567
 0x100287‡

	)

2281 
	#XK_bøûÀ_dŸs_8
 0x1002880

	)

2282 
	#XK_bøûÀ_dŸs_18
 0x1002881

	)

2283 
	#XK_bøûÀ_dŸs_28
 0x1002882

	)

2284 
	#XK_bøûÀ_dŸs_128
 0x1002883

	)

2285 
	#XK_bøûÀ_dŸs_38
 0x1002884

	)

2286 
	#XK_bøûÀ_dŸs_138
 0x1002885

	)

2287 
	#XK_bøûÀ_dŸs_238
 0x1002886

	)

2288 
	#XK_bøûÀ_dŸs_1238
 0x1002887

	)

2289 
	#XK_bøûÀ_dŸs_48
 0x1002888

	)

2290 
	#XK_bøûÀ_dŸs_148
 0x1002889

	)

2291 
	#XK_bøûÀ_dŸs_248
 0x100288®

	)

2292 
	#XK_bøûÀ_dŸs_1248
 0x100288b

	)

2293 
	#XK_bøûÀ_dŸs_348
 0x100288¯

	)

2294 
	#XK_bøûÀ_dŸs_1348
 0x100288d

	)

2295 
	#XK_bøûÀ_dŸs_2348
 0x100288ê

	)

2296 
	#XK_bøûÀ_dŸs_12348
 0x100288‡

	)

2297 
	#XK_bøûÀ_dŸs_58
 0x1002890

	)

2298 
	#XK_bøûÀ_dŸs_158
 0x1002891

	)

2299 
	#XK_bøûÀ_dŸs_258
 0x1002892

	)

2300 
	#XK_bøûÀ_dŸs_1258
 0x1002893

	)

2301 
	#XK_bøûÀ_dŸs_358
 0x1002894

	)

2302 
	#XK_bøûÀ_dŸs_1358
 0x1002895

	)

2303 
	#XK_bøûÀ_dŸs_2358
 0x1002896

	)

2304 
	#XK_bøûÀ_dŸs_12358
 0x1002897

	)

2305 
	#XK_bøûÀ_dŸs_458
 0x1002898

	)

2306 
	#XK_bøûÀ_dŸs_1458
 0x1002899

	)

2307 
	#XK_bøûÀ_dŸs_2458
 0x100289®

	)

2308 
	#XK_bøûÀ_dŸs_12458
 0x100289b

	)

2309 
	#XK_bøûÀ_dŸs_3458
 0x100289¯

	)

2310 
	#XK_bøûÀ_dŸs_13458
 0x100289d

	)

2311 
	#XK_bøûÀ_dŸs_23458
 0x100289ê

	)

2312 
	#XK_bøûÀ_dŸs_123458
 0x100289‡

	)

2313 
	#XK_bøûÀ_dŸs_68
 0x10028a0

	)

2314 
	#XK_bøûÀ_dŸs_168
 0x10028a1

	)

2315 
	#XK_bøûÀ_dŸs_268
 0x10028a2

	)

2316 
	#XK_bøûÀ_dŸs_1268
 0x10028a3

	)

2317 
	#XK_bøûÀ_dŸs_368
 0x10028a4

	)

2318 
	#XK_bøûÀ_dŸs_1368
 0x10028a5

	)

2319 
	#XK_bøûÀ_dŸs_2368
 0x10028a6

	)

2320 
	#XK_bøûÀ_dŸs_12368
 0x10028a7

	)

2321 
	#XK_bøûÀ_dŸs_468
 0x10028a8

	)

2322 
	#XK_bøûÀ_dŸs_1468
 0x10028a9

	)

2323 
	#XK_bøûÀ_dŸs_2468
 0x10028Ø

	)

2324 
	#XK_bøûÀ_dŸs_12468
 0x10028ab

	)

2325 
	#XK_bøûÀ_dŸs_3468
 0x10028a¯

	)

2326 
	#XK_bøûÀ_dŸs_13468
 0x10028ad

	)

2327 
	#XK_bøûÀ_dŸs_23468
 0x10028´

	)

2328 
	#XK_bøûÀ_dŸs_123468
 0x10028a‡

	)

2329 
	#XK_bøûÀ_dŸs_568
 0x10028b0

	)

2330 
	#XK_bøûÀ_dŸs_1568
 0x10028b1

	)

2331 
	#XK_bøûÀ_dŸs_2568
 0x10028b2

	)

2332 
	#XK_bøûÀ_dŸs_12568
 0x10028b3

	)

2333 
	#XK_bøûÀ_dŸs_3568
 0x10028b4

	)

2334 
	#XK_bøûÀ_dŸs_13568
 0x10028b5

	)

2335 
	#XK_bøûÀ_dŸs_23568
 0x10028b6

	)

2336 
	#XK_bøûÀ_dŸs_123568
 0x10028b7

	)

2337 
	#XK_bøûÀ_dŸs_4568
 0x10028b8

	)

2338 
	#XK_bøûÀ_dŸs_14568
 0x10028b9

	)

2339 
	#XK_bøûÀ_dŸs_24568
 0x10028b®

	)

2340 
	#XK_bøûÀ_dŸs_124568
 0x10028bb

	)

2341 
	#XK_bøûÀ_dŸs_34568
 0x10028b¯

	)

2342 
	#XK_bøûÀ_dŸs_134568
 0x10028bd

	)

2343 
	#XK_bøûÀ_dŸs_234568
 0x10028bê

	)

2344 
	#XK_bøûÀ_dŸs_1234568
 0x10028b‡

	)

2345 
	#XK_bøûÀ_dŸs_78
 0x10028c0

	)

2346 
	#XK_bøûÀ_dŸs_178
 0x10028c1

	)

2347 
	#XK_bøûÀ_dŸs_278
 0x10028c2

	)

2348 
	#XK_bøûÀ_dŸs_1278
 0x10028c3

	)

2349 
	#XK_bøûÀ_dŸs_378
 0x10028c4

	)

2350 
	#XK_bøûÀ_dŸs_1378
 0x10028c5

	)

2351 
	#XK_bøûÀ_dŸs_2378
 0x10028c6

	)

2352 
	#XK_bøûÀ_dŸs_12378
 0x10028c7

	)

2353 
	#XK_bøûÀ_dŸs_478
 0x10028c8

	)

2354 
	#XK_bøûÀ_dŸs_1478
 0x10028c9

	)

2355 
	#XK_bøûÀ_dŸs_2478
 0x10028ˇ

	)

2356 
	#XK_bøûÀ_dŸs_12478
 0x10028cb

	)

2357 
	#XK_bøûÀ_dŸs_3478
 0x10028c¯

	)

2358 
	#XK_bøûÀ_dŸs_13478
 0x10028cd

	)

2359 
	#XK_bøûÀ_dŸs_23478
 0x10028˚

	)

2360 
	#XK_bøûÀ_dŸs_123478
 0x10028c‡

	)

2361 
	#XK_bøûÀ_dŸs_578
 0x10028d0

	)

2362 
	#XK_bøûÀ_dŸs_1578
 0x10028d1

	)

2363 
	#XK_bøûÀ_dŸs_2578
 0x10028d2

	)

2364 
	#XK_bøûÀ_dŸs_12578
 0x10028d3

	)

2365 
	#XK_bøûÀ_dŸs_3578
 0x10028d4

	)

2366 
	#XK_bøûÀ_dŸs_13578
 0x10028d5

	)

2367 
	#XK_bøûÀ_dŸs_23578
 0x10028d6

	)

2368 
	#XK_bøûÀ_dŸs_123578
 0x10028d7

	)

2369 
	#XK_bøûÀ_dŸs_4578
 0x10028d8

	)

2370 
	#XK_bøûÀ_dŸs_14578
 0x10028d9

	)

2371 
	#XK_bøûÀ_dŸs_24578
 0x10028d®

	)

2372 
	#XK_bøûÀ_dŸs_124578
 0x10028db

	)

2373 
	#XK_bøûÀ_dŸs_34578
 0x10028d¯

	)

2374 
	#XK_bøûÀ_dŸs_134578
 0x10028dd

	)

2375 
	#XK_bøûÀ_dŸs_234578
 0x10028dê

	)

2376 
	#XK_bøûÀ_dŸs_1234578
 0x10028d‡

	)

2377 
	#XK_bøûÀ_dŸs_678
 0x10028e0

	)

2378 
	#XK_bøûÀ_dŸs_1678
 0x10028e1

	)

2379 
	#XK_bøûÀ_dŸs_2678
 0x10028e2

	)

2380 
	#XK_bøûÀ_dŸs_12678
 0x10028e3

	)

2381 
	#XK_bøûÀ_dŸs_3678
 0x10028e4

	)

2382 
	#XK_bøûÀ_dŸs_13678
 0x10028e5

	)

2383 
	#XK_bøûÀ_dŸs_23678
 0x10028e6

	)

2384 
	#XK_bøûÀ_dŸs_123678
 0x10028e7

	)

2385 
	#XK_bøûÀ_dŸs_4678
 0x10028e8

	)

2386 
	#XK_bøûÀ_dŸs_14678
 0x10028e9

	)

2387 
	#XK_bøûÀ_dŸs_24678
 0x10028ó

	)

2388 
	#XK_bøûÀ_dŸs_124678
 0x10028eb

	)

2389 
	#XK_bøûÀ_dŸs_34678
 0x10028e¯

	)

2390 
	#XK_bøûÀ_dŸs_134678
 0x10028ed

	)

2391 
	#XK_bøûÀ_dŸs_234678
 0x10028ì

	)

2392 
	#XK_bøûÀ_dŸs_1234678
 0x10028e‡

	)

2393 
	#XK_bøûÀ_dŸs_5678
 0x10028f0

	)

2394 
	#XK_bøûÀ_dŸs_15678
 0x10028f1

	)

2395 
	#XK_bøûÀ_dŸs_25678
 0x10028f2

	)

2396 
	#XK_bøûÀ_dŸs_125678
 0x10028f3

	)

2397 
	#XK_bøûÀ_dŸs_35678
 0x10028f4

	)

2398 
	#XK_bøûÀ_dŸs_135678
 0x10028f5

	)

2399 
	#XK_bøûÀ_dŸs_235678
 0x10028f6

	)

2400 
	#XK_bøûÀ_dŸs_1235678
 0x10028f7

	)

2401 
	#XK_bøûÀ_dŸs_45678
 0x10028f8

	)

2402 
	#XK_bøûÀ_dŸs_145678
 0x10028f9

	)

2403 
	#XK_bøûÀ_dŸs_245678
 0x10028Á

	)

2404 
	#XK_bøûÀ_dŸs_1245678
 0x10028fb

	)

2405 
	#XK_bøûÀ_dŸs_345678
 0x10028f¯

	)

2406 
	#XK_bøûÀ_dŸs_1345678
 0x10028fd

	)

2407 
	#XK_bøûÀ_dŸs_2345678
 0x10028„

	)

2408 
	#XK_bøûÀ_dŸs_12345678
 0x10028f‡

	)

2416 #ifde‡
XK_SINHALA


2417 
	#XK_Söh_ng
 0x1000d82

	)

2418 
	#XK_Söh_h2
 0x1000d83

	)

2419 
	#XK_Söh_a
 0x1000d85

	)

2420 
	#XK_Söh_Ø
 0x1000d86

	)

2421 
	#XK_Söh_´
 0x1000d87

	)

2422 
	#XK_Söh_´e
 0x1000d88

	)

2423 
	#XK_Söh_i
 0x1000d89

	)

2424 
	#XK_Söh_ii
 0x1000d8®

	)

2425 
	#XK_Söh_u
 0x1000d8b

	)

2426 
	#XK_Söh_uu
 0x1000d8¯

	)

2427 
	#XK_Söh_ri
 0x1000d8d

	)

2428 
	#XK_Söh_rii
 0x1000d8ê

	)

2429 
	#XK_Söh_lu
 0x1000d8‡

	)

2430 
	#XK_Söh_luu
 0x1000d90

	)

2431 
	#XK_Söh_e
 0x1000d91

	)

2432 
	#XK_Söh_ì
 0x1000d92

	)

2433 
	#XK_Söh_ai
 0x1000d93

	)

2434 
	#XK_Söh_o
 0x1000d94

	)

2435 
	#XK_Söh_oo
 0x1000d95

	)

2436 
	#XK_Söh_au
 0x1000d96

	)

2437 
	#XK_Söh_ka
 0x1000d9®

	)

2438 
	#XK_Söh_kha
 0x1000d9b

	)

2439 
	#XK_Söh_ga
 0x1000d9¯

	)

2440 
	#XK_Söh_gha
 0x1000d9d

	)

2441 
	#XK_Söh_ng2
 0x1000d9ê

	)

2442 
	#XK_Söh_nga
 0x1000d9‡

	)

2443 
	#XK_Söh_ˇ
 0x1000da0

	)

2444 
	#XK_Söh_cha
 0x1000da1

	)

2445 
	#XK_Söh_ja
 0x1000da2

	)

2446 
	#XK_Söh_jha
 0x1000da3

	)

2447 
	#XK_Söh_nya
 0x1000da4

	)

2448 
	#XK_Söh_jnya
 0x1000da5

	)

2449 
	#XK_Söh_nja
 0x1000da6

	)

2450 
	#XK_Söh_âa
 0x1000da7

	)

2451 
	#XK_Söh_âha
 0x1000da8

	)

2452 
	#XK_Söh_dda
 0x1000da9

	)

2453 
	#XK_Söh_ddha
 0x1000dØ

	)

2454 
	#XK_Söh_¬a
 0x1000dab

	)

2455 
	#XK_Söh_ndda
 0x1000da¯

	)

2456 
	#XK_Söh_tha
 0x1000dad

	)

2457 
	#XK_Söh_thha
 0x1000d´

	)

2458 
	#XK_Söh_dha
 0x1000da‡

	)

2459 
	#XK_Söh_dhha
 0x1000db0

	)

2460 
	#XK_Söh_«
 0x1000db1

	)

2461 
	#XK_Söh_ndha
 0x1000db3

	)

2462 
	#XK_Söh_∑
 0x1000db4

	)

2463 
	#XK_Söh_pha
 0x1000db5

	)

2464 
	#XK_Söh_ba
 0x1000db6

	)

2465 
	#XK_Söh_bha
 0x1000db7

	)

2466 
	#XK_Söh_ma
 0x1000db8

	)

2467 
	#XK_Söh_mba
 0x1000db9

	)

2468 
	#XK_Söh_ya
 0x1000db®

	)

2469 
	#XK_Söh_ø
 0x1000dbb

	)

2470 
	#XK_Söh_œ
 0x1000dbd

	)

2471 
	#XK_Söh_va
 0x1000dc0

	)

2472 
	#XK_Söh_sha
 0x1000dc1

	)

2473 
	#XK_Söh_ssha
 0x1000dc2

	)

2474 
	#XK_Söh_ß
 0x1000dc3

	)

2475 
	#XK_Söh_ha
 0x1000dc4

	)

2476 
	#XK_Söh_Œa
 0x1000dc5

	)

2477 
	#XK_Söh_Á
 0x1000dc6

	)

2478 
	#XK_Söh_Æ
 0x1000dˇ

	)

2479 
	#XK_Söh_Ø2
 0x1000dc‡

	)

2480 
	#XK_Söh_´2
 0x1000dd0

	)

2481 
	#XK_Söh_´e2
 0x1000dd1

	)

2482 
	#XK_Söh_i2
 0x1000dd2

	)

2483 
	#XK_Söh_ii2
 0x1000dd3

	)

2484 
	#XK_Söh_u2
 0x1000dd4

	)

2485 
	#XK_Söh_uu2
 0x1000dd6

	)

2486 
	#XK_Söh_ru2
 0x1000dd8

	)

2487 
	#XK_Söh_e2
 0x1000dd9

	)

2488 
	#XK_Söh_ì2
 0x1000dd®

	)

2489 
	#XK_Söh_ai2
 0x1000ddb

	)

2490 
	#XK_Söh_o2
 0x1000dd¯

	)

2491 
	#XK_Söh_oo2
 0x1000ddd

	)

2492 
	#XK_Söh_au2
 0x1000ddê

	)

2493 
	#XK_Söh_lu2
 0x1000dd‡

	)

2494 
	#XK_Söh_ruu2
 0x1000df2

	)

2495 
	#XK_Söh_luu2
 0x1000df3

	)

2496 
	#XK_Söh_kunddÆiya
 0x1000df4

	)

	@/usr/include/asm/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

111 
	#EHWPOISON
 133

	)

	@/usr/include/asm/posix_types.h

1 #i‚de‡
__ASM_GENERIC_POSIX_TYPES_H


2 
	#__ASM_GENERIC_POSIX_TYPES_H


	)

4 
	~<asm/bô•îl⁄g.h
>

13 #i‚de‡
__kî√l_l⁄g_t


14 
	t__kî√l_l⁄g_t
;

15 
	t__kî√l_ul⁄g_t
;

18 #i‚de‡
__kî√l_öo_t


19 
__kî√l_ul⁄g_t
 
	t__kî√l_öo_t
;

22 #i‚de‡
__kî√l_mode_t


23 
	t__kî√l_mode_t
;

26 #i‚de‡
__kî√l_pid_t


27 
	t__kî√l_pid_t
;

30 #i‚de‡
__kî√l_ùc_pid_t


31 
	t__kî√l_ùc_pid_t
;

34 #i‚de‡
__kî√l_uid_t


35 
	t__kî√l_uid_t
;

36 
	t__kî√l_gid_t
;

39 #i‚de‡
__kî√l_su£c⁄ds_t


40 
__kî√l_l⁄g_t
 
	t__kî√l_su£c⁄ds_t
;

43 #i‚de‡
__kî√l_daddr_t


44 
	t__kî√l_daddr_t
;

47 #i‚de‡
__kî√l_uid32_t


48 
	t__kî√l_uid32_t
;

49 
	t__kî√l_gid32_t
;

52 #i‚de‡
__kî√l_ﬁd_uid_t


53 
__kî√l_uid_t
 
	t__kî√l_ﬁd_uid_t
;

54 
__kî√l_gid_t
 
	t__kî√l_ﬁd_gid_t
;

57 #i‚de‡
__kî√l_ﬁd_dev_t


58 
	t__kî√l_ﬁd_dev_t
;

65 #i‚de‡
__kî√l_size_t


66 #i‡
__BITS_PER_LONG
 != 64

67 
	t__kî√l_size_t
;

68 
	t__kî√l_ssize_t
;

69 
	t__kî√l_±rdiff_t
;

71 
__kî√l_ul⁄g_t
 
	t__kî√l_size_t
;

72 
__kî√l_l⁄g_t
 
	t__kî√l_ssize_t
;

73 
__kî√l_l⁄g_t
 
	t__kî√l_±rdiff_t
;

77 #i‚de‡
__kî√l_fsid_t


79 
	mvÆ
[2];

80 } 
	t__kî√l_fsid_t
;

86 
__kî√l_l⁄g_t
 
	t__kî√l_off_t
;

87 
	t__kî√l_loff_t
;

88 
__kî√l_l⁄g_t
 
	t__kî√l_time_t
;

89 
__kî√l_l⁄g_t
 
	t__kî√l_˛ock_t
;

90 
	t__kî√l_timî_t
;

91 
	t__kî√l_˛ockid_t
;

92 * 
	t__kî√l_ˇddr_t
;

93 
	t__kî√l_uid16_t
;

94 
	t__kî√l_gid16_t
;

	@/usr/include/bits/byteswap-16.h

19 #i‚de‡
_BITS_BYTESWAP_H


23 #ifde‡
__GNUC__


24 #i‡
__GNUC__
 >= 2

25 
	#__bsw≠_16
(
x
) \

26 (
__exãnsi⁄__
 \

27 ({ 
__v
, 
__x
 = (Ë(
x
); \

28 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

29 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

31 
	`__asm__
 ("rorw $8, %w0" \

32 : "Ù" (
__v
) \

33 : "0" (
__x
) \

35 
__v
; }))

	)

38 
	#__bsw≠_16
(
x
) \

39 (
__exãnsi⁄__
 \

40 ({ 
__x
 = (Ë(
x
); \

41 
	`__bsw≠_c⁄°™t_16
 (
__x
); }))

	)

44 
__ölöe
 

45 
	$__bsw≠_16
 (
__bsx
)

47  
	`__bsw≠_c⁄°™t_16
 (
__bsx
);

48 
	}
}

	@/usr/include/bits/libc-lock.h

19 #i‚de‡
_BITS_LIBC_LOCK_H


20 
	#_BITS_LIBC_LOCK_H
 1

	)

22 
	~<±hªad.h
>

23 
	#__√ed_NULL


	)

24 
	~<°ddef.h
>

27 #ifde‡
_LIBC


28 
	~<lowÀvñlock.h
>

29 
	~<és.h
>

30 
	~<±hªad-fun˘i⁄s.h
>

31 
	~<î∫o.h
>

32 
	~<gnu/›ti⁄-groups.h
>

36 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


37 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


38 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

40 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

43 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

53 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

54 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

58 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

59 #i‡
LLL_LOCK_INITIALIZER
 == 0

60 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

61 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

63 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

64 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

66 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

67 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

69 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

70 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

71 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

72 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

76 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

77 
	#__libc_lock_öô_ªcursive
(
NAME
) \

78 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

80 
	#__libc_lock_öô_ªcursive
(
NAME
) \

82 i‡(
__±hªad_muãx_öô
 !
NULL
) \

84 
±hªad_muãx©å_t
 
__©å
; \

85 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

86 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

87 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

88 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

90 } 0)

	)

94 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

95 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

97 
	#__libc_lock_föi_ªcursive
(
NAME
) \

98 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
).
muãx
), 0)

	)

102 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

103 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

107 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

108 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

110 #i‡
__OPTION_EGLIBC_BIG_MACROS


111 
	#__libc_lock_lock_ªcursive
(
NAME
) \

113 *
£lf
 = 
THREAD_SELF
; \

114 i‡((
NAME
).
ow√r
 !
£lf
) \

116 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

117 (
NAME
).
ow√r
 = 
£lf
; \

119 ++(
NAME
).
˙t
; \

120 } 0)

	)

122 
	#__libc_lock_lock_ªcursive
(
NAME
) \

123 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

126 
	#__libc_lock_lock_ªcursive
(
NAME
) \

127 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

131 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

132 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

136 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

137 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

139 #i‡
__OPTION_EGLIBC_BIG_MACROS


140 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

142 
ªsu…
 = 0; \

143 *
£lf
 = 
THREAD_SELF
; \

144 i‡((
NAME
).
ow√r
 !
£lf
) \

146 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

148 (
NAME
).
ow√r
 = 
£lf
; \

149 (
NAME
).
˙t
 = 1; \

152 
ªsu…
 = 
EBUSY
; \

155 ++(
NAME
).
˙t
; \

156 
ªsu…
; \

157 })

	)

159 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

160 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

163 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

164 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

168 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

169 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

173 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

174 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

176 #i‡
__OPTION_EGLIBC_BIG_MACROS


178 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

180 i‡(--(
NAME
).
˙t
 == 0) \

182 (
NAME
).
ow√r
 = 
NULL
; \

183 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

185 } 0)

	)

187 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

188 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

191 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

192 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

199 
_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

200 (*
routöe
Ë(*), *
¨g
);

201 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

202 
execuã
);

205 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

206 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

207 
_avaû
; \

208 i‡(
DOIT
) { \

209 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

210 i‡(
_avaû
) { \

211 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

212 
ARG
)); \

214 
_buf„r
.
__routöe
 = (
FCT
); \

215 
_buf„r
.
__¨g
 = (
ARG
); \

218 
_avaû
 = 0; \

219 }

	)

222 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

223 i‡(
_avaû
) { \

224 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

225 } i‡(
DOIT
) \

226 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

227 
	}

	)
}

232 #ifde‡
_LIBC


233 
	~"libc-lockP.h
"

	@/usr/include/bits/uio.h

18 #i‡!
deföed
 
_SYS_UIO_H
 && !deföed 
_FCNTL_H


22 #i‚de‡
_BITS_UIO_H


23 
	#_BITS_UIO_H
 1

	)

25 
	~<sys/ty≥s.h
>

39 
	#UIO_MAXIOV
 1024

	)

43 
	siovec


45 *
	miov_ba£
;

46 
size_t
 
	miov_Àn
;

52 #ifde‡
__USE_GNU


53 #i‡
deföed
 
_SYS_UIO_H
 && !deföed 
_BITS_UIO_H_FOR_SYS_UIO_H


54 
	#_BITS_UIO_H_FOR_SYS_UIO_H
 1

	)

56 
__BEGIN_DECLS


59 
ssize_t
 
	$¥o˚ss_vm_ªadv
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

60 
__liov˙t
,

61 c⁄° 
iovec
 *
__rvec
,

62 
__riov˙t
,

63 
__Êags
)

64 
__THROW
;

67 
ssize_t
 
	$¥o˚ss_vm_wrôev
 (
pid_t
 
__pid
, c⁄° 
iovec
 *
__lvec
,

68 
__liov˙t
,

69 c⁄° 
iovec
 *
__rvec
,

70 
__riov˙t
,

71 
__Êags
)

72 
__THROW
;

74 
__END_DECLS


	@/usr/include/gconv.h

22 #i‚de‡
_GCONV_H


23 
	#_GCONV_H
 1

	)

25 
	~<„©uªs.h
>

26 
	#__√ed_mb°©e_t


	)

27 
	#__√ed_wöt_t


	)

28 
	~<wch¨.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	~<°ddef.h
>

34 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

39 
	m__GCONV_OK
 = 0,

40 
	m__GCONV_NOCONV
,

41 
	m__GCONV_NODB
,

42 
	m__GCONV_NOMEM
,

44 
	m__GCONV_EMPTY_INPUT
,

45 
	m__GCONV_FULL_OUTPUT
,

46 
	m__GCONV_ILLEGAL_INPUT
,

47 
	m__GCONV_INCOMPLETE_INPUT
,

49 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

50 
	m__GCONV_INTERNAL_ERROR


57 
	m__GCONV_IS_LAST
 = 0x0001,

58 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

59 
	m__GCONV_SWAP
 = 0x0004

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
) (*, const *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
) (const *, const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 c⁄° *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_chÊags


	)

11 
	#__°ub_Áâach


	)

12 
	#__°ub_fchÊags


	)

13 
	#__°ub_fdëach


	)

14 
	#__°ub_gây


	)

15 
	#__°ub_lchmod


	)

16 
	#__°ub_ªvoke


	)

17 
	#__°ub_£éogö


	)

18 
	#__°ub_sigªtu∫


	)

19 
	#__°ub_s°k


	)

20 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/linux/stddef.h

	@/usr/include/wchar.h

23 #i‚de‡
_WCHAR_H


25 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


26 
	#_WCHAR_H
 1

	)

27 
	~<„©uªs.h
>

30 #ifde‡
_WCHAR_H


32 
	#__√ed___FILE


	)

33 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


34 
	#__√ed_FILE


	)

36 
	~<°dio.h
>

38 
	#__√ed___va_li°


	)

39 
	~<°d¨g.h
>

41 
	~<bôs/wch¨.h
>

44 
	#__√ed_size_t


	)

45 
	#__√ed_wch¨_t


	)

46 
	#__√ed_NULL


	)

48 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


49 #unde‡
__√ed_wöt_t


50 
	#__√ed_wöt_t


	)

51 
	~<°ddef.h
>

55 #i‚de‡
_WINT_T


60 
	#_WINT_T


	)

61 
	twöt_t
;

65 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

66 && 
deföed
 
__WINT_TYPE__


67 
__BEGIN_NAMESPACE_STD


68 
__WINT_TYPE__
 
	twöt_t
;

69 
	g__END_NAMESPACE_STD


74 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

75 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

79 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
____mb°©e_t_deföed


80 
	#____mb°©e_t_deföed
 1

	)

84 
	m__cou¡
;

87 #ifde‡
__WINT_TYPE__


88 
__WINT_TYPE__
 
	m__wch
;

90 
wöt_t
 
	m__wch
;

92 
	m__wchb
[4];

93 } 
	m__vÆue
;

94 } 
	t__mb°©e_t
;

96 #unde‡
__√ed_mb°©e_t


101 #ifde‡
_WCHAR_H


103 #i‚de‡
__mb°©e_t_deföed


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 
	#__mb°©e_t_deföed
 1

	)

111 #ifde‡
__USE_GNU


112 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

115 #i‚de‡
WCHAR_MIN


117 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

118 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

121 #i‚de‡
WEOF


122 
	#WEOF
 (0xffffffffu)

	)

127 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


128 
	~<w˘y≥.h
>

132 
__BEGIN_DECLS


134 
__BEGIN_NAMESPACE_STD


137 
tm
;

138 
__END_NAMESPACE_STD


142 
	$__USING_NAMESPACE_STD
(
tm
)

145 
__BEGIN_NAMESPACE_STD


147 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

150 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

151 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

152 
__THROW
;

155 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

158 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

159 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

160 
__THROW
;

163 
	$wcscmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
)

164 
__THROW
 
__©åibuã_puª__
;

166 
	$wc¢cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

167 
__THROW
 
__©åibuã_puª__
;

168 
__END_NAMESPACE_STD


170 #ifde‡
__USE_XOPEN2K8


172 
	$wcsˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

175 
	$wc¢ˇ£cmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

176 
size_t
 
__n
Ë
__THROW
;

180 
	~<xloˇÀ.h
>

182 
	$wcsˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

183 
__loˇÀ_t
 
__loc
Ë
__THROW
;

185 
	$wc¢ˇ£cmp_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

186 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

189 
__BEGIN_NAMESPACE_STD


192 
	$wcscﬁl
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
Ë
__THROW
;

196 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

197 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

198 
__END_NAMESPACE_STD


200 #ifde‡
__USE_XOPEN2K8


206 
	$wcscﬁl_l
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

207 
__loˇÀ_t
 
__loc
Ë
__THROW
;

212 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

213 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

216 
wch¨_t
 *
	$wcsdup
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

219 
__BEGIN_NAMESPACE_STD


221 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


222 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

223 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 "C++" c⁄° 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

227 
wch¨_t
 *
	$wcschr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

228 
__THROW
 
__©åibuã_puª__
;

231 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


232 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

233 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 "C++" c⁄° 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

237 
wch¨_t
 *
	$wc§chr
 (c⁄° 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

238 
__THROW
 
__©åibuã_puª__
;

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_GNU


245 
wch¨_t
 *
	$wcsch∫ul
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__wc
)

246 
__THROW
 
__©åibuã_puª__
;

249 
__BEGIN_NAMESPACE_STD


252 
size_t
 
	$wcsc•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ªje˘
)

253 
__THROW
 
__©åibuã_puª__
;

256 
size_t
 
	$wcs•n
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

257 
__THROW
 
__©åibuã_puª__
;

259 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


260 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

262 "C++" c⁄° 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
,

263 c⁄° 
wch¨_t
 *
__ac˚±
)

264 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

266 
wch¨_t
 *
	$wc•brk
 (c⁄° 
wch¨_t
 *
__wcs
, c⁄° wch¨_à*
__ac˚±
)

267 
__THROW
 
__©åibuã_puª__
;

270 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


271 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

273 "C++" c⁄° 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
,

274 c⁄° 
wch¨_t
 *
__√edÀ
)

275 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

277 
wch¨_t
 *
	$wcs°r
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

278 
__THROW
 
__©åibuã_puª__
;

282 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

283 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

284 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

287 
size_t
 
	$wc¶í
 (c⁄° 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

288 
__END_NAMESPACE_STD


290 #ifde‡
__USE_XOPEN


292 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


293 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

295 "C++" c⁄° 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
,

296 c⁄° 
wch¨_t
 *
__√edÀ
)

297 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

299 
wch¨_t
 *
	$wcswcs
 (c⁄° 
wch¨_t
 *
__hay°ack
, c⁄° wch¨_à*
__√edÀ
)

300 
__THROW
 
__©åibuã_puª__
;

304 #ifde‡
__USE_XOPEN2K8


306 
size_t
 
	$wc¢Àn
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

307 
__THROW
 
__©åibuã_puª__
;

311 
__BEGIN_NAMESPACE_STD


313 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


314 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

316 "C++" c⁄° 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
,

317 
size_t
 
__n
)

318 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

320 
wch¨_t
 *
	$wmemchr
 (c⁄° 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

321 
__THROW
 
__©åibuã_puª__
;

325 
	$wmemcmp
 (c⁄° 
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

326 
__THROW
 
__©åibuã_puª__
;

329 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

330 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

334 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

335 
__THROW
;

338 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifde‡
__USE_GNU


344 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

345 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

346 
__THROW
;

350 
__BEGIN_NAMESPACE_STD


353 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

357 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

361 
	$mbsöô
 (c⁄° 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

365 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

366 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

367 
mb°©e_t
 *
__ª°ri˘
 
__p
Ë
__THROW
;

370 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

371 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$__mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
size_t
 
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

377 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #ifde‡
__USE_EXTERN_INLINES


386 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

387 
__exã∫_ölöe
 
wöt_t


388 
	`__NTH
 (
	$btowc
 (
__c
))

389 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

390 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

392 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

393 
__exã∫_ölöe
 

394 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

395 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

396 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

398 
__exã∫_ölöe
 
size_t


399 
__NTH
 (
	$mbæí
 (c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

400 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

401 {  (
__ps
 !
NULL


402 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

405 
__BEGIN_NAMESPACE_STD


408 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

409 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

410 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

415 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

416 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

417 
__END_NAMESPACE_STD


420 #ifdef 
__USE_XOPEN2K8


423 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

424 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

425 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

429 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

430 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

431 
size_t
 
__nwc
, size_à
__Àn
,

432 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

437 #ifde‡
__USE_XOPEN


439 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

443 
	$wcswidth
 (c⁄° 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

447 
__BEGIN_NAMESPACE_STD


450 
	$wc°od
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

451 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

452 
__END_NAMESPACE_STD


454 #ifde‡
__USE_ISOC99


455 
__BEGIN_NAMESPACE_C99


457 
	$wc°of
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
	$wc°ﬁd
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

460 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

461 
__END_NAMESPACE_C99


465 
__BEGIN_NAMESPACE_STD


468 
	$wc°ﬁ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

469 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

473 
	$wc°oul
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

474 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

475 
__THROW
;

476 
__END_NAMESPACE_STD


478 #ifde‡
__USE_ISOC99


479 
__BEGIN_NAMESPACE_C99


482 
__exãnsi⁄__


483 
	$wc°ﬁl
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

484 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

485 
__THROW
;

489 
__exãnsi⁄__


490 
	$wc°ouŒ
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

491 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

492 
__ba£
Ë
__THROW
;

493 
__END_NAMESPACE_C99


496 #ifde‡
__USE_GNU


499 
__exãnsi⁄__


500 
	$wc°oq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

501 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

502 
__THROW
;

506 
__exãnsi⁄__


507 
	$wc°ouq
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

508 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

509 
__ba£
Ë
__THROW
;

512 #ifde‡
__USE_GNU


526 
	~<xloˇÀ.h
>

530 
	$wc°ﬁ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

531 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

532 
__loˇÀ_t
 
__loc
Ë
__THROW
;

534 
	$wc°oul_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

535 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

536 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

538 
__exãnsi⁄__


539 
	$wc°ﬁl_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

540 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

541 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

543 
__exãnsi⁄__


544 
	$wc°ouŒ_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

545 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

546 
__ba£
, 
__loˇÀ_t
 
__loc
)

547 
__THROW
;

549 
	$wc°od_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

550 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

551 
__THROW
;

553 
	$wc°of_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

554 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

555 
__THROW
;

557 
	$wc°ﬁd_l
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

558 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

559 
__loˇÀ_t
 
__loc
Ë
__THROW
;

563 #ifde‡
__USE_XOPEN2K8


566 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

567 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

571 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

572 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

573 
__THROW
;

580 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

583 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


584 
__BEGIN_NAMESPACE_STD


587 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

594 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

595 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	`w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

605 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

606 
__THROW
 ;

612 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

613 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

614 
__gnuc_va_li°
 
__¨g
)

620 
	`vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

621 
__gnuc_va_li°
 
__¨g
)

625 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

626 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

627 
__gnuc_va_li°
 
__¨g
)

628 
__THROW
 ;

635 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

636 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	`wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
	$swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

646 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

647 
__THROW
 ;

649 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

650 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

651 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

652 #ifde‡
__REDIRECT


656 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

657 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_fwsˇnf
)

660 
	`__REDIRECT
 (
wsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

661 
__isoc99_wsˇnf
)

663 
	`__REDIRECT_NTH
 (
swsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

664 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

665 ...), 
__isoc99_swsˇnf
)

668 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

669 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

670 
	`__isoc99_wsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

671 
	$__isoc99_swsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

672 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

673 
__THROW
;

674 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

675 
	#wsˇnf
 
__isoc99_wsˇnf


	)

676 
	#swsˇnf
 
__isoc99_swsˇnf


	)

680 
__END_NAMESPACE_STD


683 #ifde‡
__USE_ISOC99


684 
__BEGIN_NAMESPACE_C99


689 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

690 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

691 
__gnuc_va_li°
 
__¨g
)

697 
	`vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

698 
__gnuc_va_li°
 
__¨g
)

701 
	$vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

702 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

703 
__gnuc_va_li°
 
__¨g
)

704 
__THROW
 ;

706 #i‡!
deföed
 
__USE_GNU
 \

707 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

708 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

709 #ifde‡
__REDIRECT


710 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

711 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

714 
	`__REDIRECT
 (
vwsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

715 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

717 
	`__REDIRECT_NTH
 (
vswsˇnf
, (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

718 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

719 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

722 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

723 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	`__isoc99_vwsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
);

727 
	$__isoc99_vswsˇnf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s
,

728 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

729 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

730 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

731 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

732 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

736 
__END_NAMESPACE_C99


740 
__BEGIN_NAMESPACE_STD


745 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

746 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

752 
wöt_t
 
	`gëwch¨
 ();

759 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

760 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

766 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

774 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

775 
__FILE
 *
__ª°ri˘
 
__°ªam
);

781 
	`Âutws
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

782 
__FILE
 *
__ª°ri˘
 
__°ªam
);

789 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

790 
__END_NAMESPACE_STD


793 #ifde‡
__USE_GNU


801 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

802 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

810 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

818 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

827 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

828 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

837 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

838 
__FILE
 *
__ª°ri˘
 
__°ªam
);

846 
	`Âutws_u∆ocked
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__ws
,

847 
__FILE
 *
__ª°ri˘
 
__°ªam
);

851 
__BEGIN_NAMESPACE_C99


855 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

856 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

857 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

858 
__END_NAMESPACE_C99


860 #ifde‡
__USE_GNU


861 
	~<xloˇÀ.h
>

865 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

866 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

867 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

868 
__loˇÀ_t
 
__loc
Ë
__THROW
;

877 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


878 
	#__√ed_iswxxx


	)

879 
	~<w˘y≥.h
>

883 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


884 
	~<bôs/wch¨2.h
>

887 #ifde‡
__LDBL_COMPAT


888 
	~<bôs/wch¨-ldbl.h
>

891 
__END_DECLS


899 #unde‡
__√ed_mb°©e_t


900 #unde‡
__√ed_wöt_t


	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@/usr/include/bits/wchar-ldbl.h

19 #i‚de‡
_WCHAR_H


23 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


24 
__BEGIN_NAMESPACE_C99


25 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

26 
__LDBL_REDIR_DECL
 (
w¥ötf
);

27 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

28 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
	g__REDIRECT
 \

33 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

38 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

39 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

42 
__END_NAMESPACE_C99


45 #ifde‡
__USE_ISOC99


46 
__BEGIN_NAMESPACE_C99


47 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

48 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

49 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

50 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

51 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

54 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

55 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

58 
__END_NAMESPACE_C99


61 #ifde‡
__USE_GNU


62 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

65 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


66 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

67 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

68 #i‡
__USE_FORTIFY_LEVEL
 > 1

69 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

70 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar2.h

19 #i‚de‡
_WCHAR_H


24 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

25 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

26 
size_t
 
__ns1
Ë
__THROW
;

27 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

28 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

29 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

30 
wmem˝y
);

31 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

32 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

33 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

34 
size_t
 
__ns1
), 
__wmem˝y_chk
)

35 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

38 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

39 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

40 
size_t
 
__n
))

42 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

44 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

45  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

46 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

48 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

49  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

50 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

52  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

53 
	}
}

56 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

57 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

58 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

59 c⁄° 
wch¨_t
 *
__s2
,

60 
size_t
 
__n
), 
wmemmove
);

61 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

62 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
,

63 
size_t
 
__n
, size_à
__ns1
), 
__wmemmove_chk
)

64 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

67 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

68 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__s1
, c⁄° wch¨_à*
__s2
, 
size_t
 
__n
))

70 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

72 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

73  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

74 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

76 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

77  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

78 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

80  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

81 
	}
}

84 #ifde‡
__USE_GNU


85 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

86 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

87 
size_t
 
__ns1
Ë
__THROW
;

88 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

89 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

90 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
,

91 
size_t
 
__n
), 
wmemp˝y
);

92 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

93 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

94 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

95 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

96 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

99 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

100 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, c⁄° wch¨_à*__ª°ri˘ 
__s2
,

101 
size_t
 
__n
))

103 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

105 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

106  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

107 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

109 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

110  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

111 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

113  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

114 
	}
}

118 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

119 
size_t
 
__ns
Ë
__THROW
;

120 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

121 
size_t
 
__n
), 
wmem£t
);

122 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

123 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

124 
size_t
 
__ns
), 
__wmem£t_chk
)

125 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

128 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

129 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
))

131 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

133 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

134  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

136 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

137  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

138 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

140  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

141 
	}
}

144 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

146 
size_t
 
__n
Ë
__THROW
;

147 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

148 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

149 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

151 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

152 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

154 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

155  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

156  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

157 
	}
}

160 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

161 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

162 
size_t
 
__de°Àn
Ë
__THROW
;

163 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
,

164 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

165 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
w˝˝y
);

167 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

168 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

170 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

171  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

172  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

173 
	}
}

176 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

177 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

178 
size_t
 
__de°Àn
Ë
__THROW
;

179 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

180 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

181 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

182 
size_t
 
__n
), 
wc¢˝y
);

183 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

184 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

185 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

186 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

187 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

190 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

191 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

192 
size_t
 
__n
))

194 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

196 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

197  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

198 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

199 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

200  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

201 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

203  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

204 
	}
}

207 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

208 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

209 
size_t
 
__de°Àn
Ë
__THROW
;

210 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

211 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

212 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

213 
size_t
 
__n
), 
w˝n˝y
);

214 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

215 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

216 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

217 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

218 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

221 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

222 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

223 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__f‹tify_fun˘i⁄
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
, c⁄° wch¨_à*__ª°ri˘ 
__§c
,

264 
size_t
 
__n
))

266 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

267  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

268 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

269  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

270 
	}
}

273 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

274 
__Êag
, 
size_t
 
__s_Àn
,

275 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

276 
__THROW
 ;

278 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

279 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

280 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

281 
sw¥ötf
);

283 #ifde‡
__va_¨g_∑ck


284 
__f‹tify_fun˘i⁄
 

285 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

286 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

288 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

289  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

290 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

291 
__fmt
, 
	`__va_¨g_∑ck
 ());

292  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

293 
	}
}

294 #ñi‡!
deföed
 
__˝lu•lus


296 
	#sw¥ötf
(
s
, 
n
, ...) \

297 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

298 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

299 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

300 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

303 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

304 
__Êag
, 
size_t
 
__s_Àn
,

305 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

306 
__gnuc_va_li°
 
__¨g
)

307 
__THROW
 ;

309 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

310 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

311 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

312 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

314 
__f‹tify_fun˘i⁄
 

315 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

316 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

318 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

319  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

320 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

321  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

322 
	}
}

325 #i‡
__USE_FORTIFY_LEVEL
 > 1

327 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

328 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

329 
__w¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

331 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

332 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

333 
__gnuc_va_li°
 
__≠
);

334 
__vw¥ötf_chk
 (
__Êag
, c⁄° 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

335 
__gnuc_va_li°
 
__≠
);

337 #ifde‡
__va_¨g_∑ck


338 
__f‹tify_fun˘i⁄
 

339 
	$w¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

341  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

342 
	}
}

344 
__f‹tify_fun˘i⁄
 

345 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, c⁄° 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

347  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

348 
	`__va_¨g_∑ck
 ());

349 
	}
}

350 #ñi‡!
deföed
 
__˝lu•lus


351 
	#w¥ötf
(...) \

352 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

353 
	#fw¥ötf
(
°ªam
, ...) \

354 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

357 
__f‹tify_fun˘i⁄
 

358 
	$vw¥ötf
 (c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

360  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

361 
	}
}

363 
__f‹tify_fun˘i⁄
 

364 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

365 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

367  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

368 
	}
}

372 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

373 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

374 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

375 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

376 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

377 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

378 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

379 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

380 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

383 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

384 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

386 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

388 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

389  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

390 
__n
, 
__°ªam
);

392 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

393  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

394 
__n
, 
__°ªam
);

396  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

397 
	}
}

399 #ifde‡
__USE_GNU


400 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

401 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

402 
__wur
;

403 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

404 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

405 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

406 
__wur
;

407 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

408 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

409 
__FILE
 *
__ª°ri˘
 
__°ªam
),

410 
__fgëws_u∆ocked_chk
)

411 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

414 
__f‹tify_fun˘i⁄
 
__wur
 
wch¨_t
 *

415 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

417 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

419 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

420  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

421 
__n
, 
__°ªam
);

423 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

424  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

425 
__n
, 
__°ªam
);

427  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

428 
	}
}

432 
size_t
 
	$__w¸tomb_chk
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

433 
mb°©e_t
 *
__ª°ri˘
 
__p
,

434 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

435 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

436 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

437 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

439 
__f‹tify_fun˘i⁄
 
__wur
 
size_t


440 
	`__NTH
 (
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

441 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

446 
	#__WCHAR_MB_LEN_MAX
 16

	)

447 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


450 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

451  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

452  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

453 
	}
}

456 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

457 c⁄° **
__ª°ri˘
 
__§c
,

458 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

459 
size_t
 
__d°Àn
Ë
__THROW
;

460 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

461 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

462 c⁄° **
__ª°ri˘
 
__§c
,

463 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

464 
mb§towcs
);

465 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

466 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

467 c⁄° **
__ª°ri˘
 
__§c
,

468 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

469 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

470 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

473 
__f‹tify_fun˘i⁄
 
size_t


474 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

475 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

477 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

479 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

480  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

481 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

483 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

484  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

485 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

487  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

488 
	}
}

491 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

492 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

493 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

494 
size_t
 
__d°Àn
Ë
__THROW
;

495 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

496 (*
__ª°ri˘
 
__d°
,

497 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

498 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

499 
wc§tombs
);

500 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

501 (*
__ª°ri˘
 
__d°
,

502 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

503 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

504 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

505 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

507 
__f‹tify_fun˘i⁄
 
size_t


508 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

509 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

511 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

513 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

514  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

517  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

519  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

520 
	}
}

523 #ifde‡
__USE_GNU


524 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

525 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

526 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

527 
size_t
 
__d°Àn
Ë
__THROW
;

528 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

529 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

530 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

531 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

532 
mb¢πowcs
);

533 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

534 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

535 c⁄° **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

536 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

537 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

538 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

541 
__f‹tify_fun˘i⁄
 
size_t


542 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, c⁄° **__ª°ri˘ 
__§c
,

543 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

545 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

547 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

548  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

549 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

551 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

552  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

553 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

555  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

556 
	}
}

559 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

560 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

561 
size_t
 
__nwc
, size_à
__Àn
,

562 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

563 
__THROW
;

564 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

565 (*
__ª°ri˘
 
__d°
,

566 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

567 
size_t
 
__nwc
, size_à
__Àn
,

568 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

569 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

570 (*
__ª°ri˘
 
__d°
,

571 c⁄° 
wch¨_t
 **
__ª°ri˘
 
__§c
,

572 
size_t
 
__nwc
, size_à
__Àn
,

573 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

574 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

575 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

577 
__f‹tify_fun˘i⁄
 
size_t


578 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, c⁄° 
wch¨_t
 **__ª°ri˘ 
__§c
,

579 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

581 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

583 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

584  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

585 
	`__bos
 (
__d°
));

587 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

588  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

589 
	`__bos
 (
__d°
));

591  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

592 
	}
}

	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LOCALES
 1

	)

34 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

35 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

36 
	#__OPTION_EGLIBC_NIS
 1

	)

37 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

38 
	#__OPTION_EGLIBC_RCMD
 1

	)

39 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

40 
	#__OPTION_EGLIBC_SPAWN
 1

	)

41 
	#__OPTION_EGLIBC_STREAMS
 1

	)

42 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

43 
	#__OPTION_EGLIBC_UTMP
 1

	)

44 
	#__OPTION_EGLIBC_UTMPX
 1

	)

45 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

46 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

47 
	#__OPTION_POSIX_REGEXP
 1

	)

48 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

49 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<ídün.h
>

23 
	~<sched.h
>

24 
	~<time.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

34 
	mPTHREAD_CREATE_JOINABLE
,

35 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

36 
	mPTHREAD_CREATE_DETACHED


37 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

44 
	mPTHREAD_MUTEX_TIMED_NP
,

45 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

46 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

47 
	mPTHREAD_MUTEX_ADAPTIVE_NP


48 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


50 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

51 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

52 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

53 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


55 #ifde‡
__USE_GNU


57 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


62 #ifde‡
__USE_XOPEN2K


66 
	mPTHREAD_MUTEX_STALLED
,

67 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

68 
	mPTHREAD_MUTEX_ROBUST
,

69 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


74 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


78 
	mPTHREAD_PRIO_NONE
,

79 
	mPTHREAD_PRIO_INHERIT
,

80 
	mPTHREAD_PRIO_PROTECT


86 #i‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 1

87 
	#__PTHREAD_SPINS
 0, 0

	)

88 #ñi‡
__PTHREAD_MUTEX_HAVE_ELISION
 == 2

89 
	#__PTHREAD_SPINS
 { 0, 0 }

	)

91 
	#__PTHREAD_SPINS
 0

	)

94 #ifde‡
__PTHREAD_MUTEX_HAVE_PREV


95 
	#PTHREAD_MUTEX_INITIALIZER
 \

96 { { 0, 0, 0, 0, 0, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

97 #ifde‡
__USE_GNU


98 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

99 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

100 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

101 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

102 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

103 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

104 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

105 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 
__PTHREAD_SPINS
, { 0, 0 } } }

	)

109 
	#PTHREAD_MUTEX_INITIALIZER
 \

110 { { 0, 0, 0, 0, 0, { 
__PTHREAD_SPINS
 } } }

	)

111 #ifde‡
__USE_GNU


112 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

113 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

114 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

115 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

116 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

117 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 
__PTHREAD_SPINS
 } } }

	)

124 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


127 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

128 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

129 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

130 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


136 #i‚de‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


137 #i‡
__WORDSIZE
 == 64

138 
	#__PTHREAD_RWLOCK_INT_FLAGS_SHARED
 1

	)

143 
	#PTHREAD_RWLOCK_INITIALIZER
 \

144 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

145 #ifde‡
__USE_GNU


146 #ifde‡
__PTHREAD_RWLOCK_INT_FLAGS_SHARED


147 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

149 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

151 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


152 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

153 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

154 0, 0, 0, 0 } }

	)

156 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

157 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

158 0 } }

	)

168 
	mPTHREAD_INHERIT_SCHED
,

169 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

170 
	mPTHREAD_EXPLICIT_SCHED


171 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

178 
	mPTHREAD_SCOPE_SYSTEM
,

179 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

180 
	mPTHREAD_SCOPE_PROCESS


181 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

188 
	mPTHREAD_PROCESS_PRIVATE
,

189 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

190 
	mPTHREAD_PROCESS_SHARED


191 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

197 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

201 
	s_±hªad_˛ónup_buf„r


203 (*
	m__routöe
) (*);

204 *
	m__¨g
;

205 
	m__ˇn˚…y≥
;

206 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

212 
	mPTHREAD_CANCEL_ENABLE
,

213 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

214 
	mPTHREAD_CANCEL_DISABLE


215 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

219 
	mPTHREAD_CANCEL_DEFERRED
,

220 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

221 
	mPTHREAD_CANCEL_ASYNCHRONOUS


222 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

224 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

228 
	#PTHREAD_ONCE_INIT
 0

	)

231 #ifde‡
__USE_XOPEN2K


235 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

239 
__BEGIN_DECLS


244 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

245 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

246 *(*
__°¨t_routöe
) (*),

247 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

253 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

261 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

263 #ifde‡
__USE_GNU


266 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

274 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

275 c⁄° 
time•ec
 *
__ab°ime
);

282 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

286 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

289 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

290 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

298 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

301 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1));

305 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

306 *
__dëach°©e
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

310 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

311 
__dëach°©e
)

312 
__THROW
 
	`__n⁄nuŒ
 ((1));

316 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

317 
size_t
 *
__gu¨dsize
)

318 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

321 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

322 
size_t
 
__gu¨dsize
)

323 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

328 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

333 c⁄° 
sched_∑øm
 *
__ª°ri˘


334 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

337 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


338 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

339 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

342 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

343 
__THROW
 
	`__n⁄nuŒ
 ((1));

346 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


347 
__©å
, *
__ª°ri˘
 
__öhîô
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

351 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

352 
__öhîô
)

353 
__THROW
 
	`__n⁄nuŒ
 ((1));

357 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

358 *
__ª°ri˘
 
__sc›e
)

359 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

362 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1));

366 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

374 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

375 *
__°ackaddr
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

379 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


380 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

381 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

386 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

387 
size_t
 
__°acksize
)

388 
__THROW
 
	`__n⁄nuŒ
 ((1));

390 #ifde‡
__USE_XOPEN2K


392 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

393 **
__ª°ri˘
 
__°ackaddr
,

394 
size_t
 *
__ª°ri˘
 
__°acksize
)

395 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

400 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

401 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

404 #ifde‡
__USE_GNU


407 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

408 
size_t
 
__˝u£tsize
,

409 c⁄° 
˝u_£t_t
 *
__˝u£t
)

410 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

414 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

415 
size_t
 
__˝u£tsize
,

416 
˝u_£t_t
 *
__˝u£t
)

417 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

420 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

421 
__THROW
 
	`__n⁄nuŒ
 ((1));

425 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

426 
__THROW
 
	`__n⁄nuŒ
 ((1));

431 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

441 c⁄° 
sched_∑øm
 *
__∑øm
)

442 
__THROW
 
	`__n⁄nuŒ
 ((3));

445 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

446 *
__ª°ri˘
 
__pﬁicy
,

447 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

448 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

451 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

452 
__THROW
;

455 #ifde‡
__USE_GNU


457 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

458 
size_t
 
__buÊí
)

459 
__THROW
 
	`__n⁄nuŒ
 ((2));

462 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

463 
__THROW
 
	`__n⁄nuŒ
 ((2));

467 #ifde‡
__USE_UNIX98


469 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

472 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

475 #ifde‡
__USE_GNU


480 
	$±hªad_yõld
 (Ë
__THROW
;

485 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

486 c⁄° 
˝u_£t_t
 *
__˝u£t
)

487 
__THROW
 
	`__n⁄nuŒ
 ((3));

490 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

491 
˝u_£t_t
 *
__˝u£t
)

492 
__THROW
 
	`__n⁄nuŒ
 ((3));

505 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

506 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

517 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

521 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

524 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

529 
	`±hªad_ã°ˇn˚l
 ();

538 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

539 
__mask_was_ßved
;

540 } 
__ˇn˚l_jmp_buf
[1];

541 *
__∑d
[4];

542 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

545 #i‚de‡
__˛ónup_f˘_©åibuã


546 
	#__˛ónup_f˘_©åibuã


	)

551 
	s__±hªad_˛ónup_‰ame


553 (*
__ˇn˚l_routöe
) (*);

554 *
__ˇn˚l_¨g
;

555 
__do_ô
;

556 
__ˇn˚l_ty≥
;

559 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


560 #ifde‡
__˝lu•lus


562 ˛as†
	c__±hªad_˛ónup_˛ass


564 (*
__ˇn˚l_routöe
) (*);

565 *
__ˇn˚l_¨g
;

566 
__do_ô
;

567 
__ˇn˚l_ty≥
;

569 
public
:

570 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

571 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

572 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

573 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

574 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

575 &
__ˇn˚l_ty≥
); 
	}
}

576 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

586 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

588 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

592 
	#±hªad_˛ónup_p›
(
execuã
) \

593 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

594 } 0)

	)

596 #ifde‡
__USE_GNU


600 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

602 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

603 
__˛‰ame
.
	`__de„r
 ()

	)

608 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

609 
__˛‰ame
.
	`__ª°‹e
 (); \

610 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

611 } 0)

	)

618 
__exã∫_ölöe
 

619 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

621 i‡(
__‰ame
->
__do_ô
)

622 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

623 
	}
}

632 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

634 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

635 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

636 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

637 .
__do_ô
 = 1 };

	)

641 
	#±hªad_˛ónup_p›
(
execuã
) \

642 
__˛‰ame
.
__do_ô
 = (
execuã
); \

643 } 0)

	)

645 #ifde‡
__USE_GNU


649 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

651 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

652 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

653 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

654 .
__do_ô
 = 1 }; \

655 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

656 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

661 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

662 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

663 
__˛‰ame
.
__do_ô
 = (
execuã
); \

664 } 0)

	)

675 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

677 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

678 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

679 *
__ˇn˚l_¨g
 = (
¨g
); \

680 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

681 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

682 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

684 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

685 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

689 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

690 dÿ{

	)

691 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

692 
__˛ónup_f˘_©åibuã
;

696 
	#±hªad_˛ónup_p›
(
execuã
) \

699 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

700 i‡(
execuã
) \

701 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

702 } 0)

	)

703 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

704 
__˛ónup_f˘_©åibuã
;

706 #ifde‡
__USE_GNU


710 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

712 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

713 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

714 *
__ˇn˚l_¨g
 = (
¨g
); \

715 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

716 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

717 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

719 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

720 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

724 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

725 dÿ{

	)

726 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

727 
__˛ónup_f˘_©åibuã
;

732 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

735 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

736 i‡(
execuã
) \

737 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

738 
	}
} 0)

	)

739 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

740 
__˛ónup_f˘_©åibuã
;

744 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

745 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

746 #i‚de‡
SHARED


747 
	`__©åibuã__
 ((
__wók__
))

753 
__jmp_buf_èg
;

754 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROWNL
;

760 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

761 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

762 
__THROW
 
	`__n⁄nuŒ
 ((1));

765 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

766 
__THROW
 
	`__n⁄nuŒ
 ((1));

769 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

770 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

773 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

774 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

776 #ifde‡
__USE_XOPEN2K


778 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

779 c⁄° 
time•ec
 *
__ª°ri˘


780 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

784 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

785 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

789 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

790 
__ª°ri˘
 
__muãx
,

791 *
__ª°ri˘
 
__¥io˚ûög
)

792 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

796 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

797 
__¥io˚ûög
,

798 *
__ª°ri˘
 
__ﬁd_˚ûög
)

799 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

802 #ifde‡
__USE_XOPEN2K8


804 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

805 
__THROW
 
	`__n⁄nuŒ
 ((1));

806 #ifde‡
__USE_GNU


807 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

808 
__THROW
 
	`__n⁄nuŒ
 ((1));

817 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

821 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

822 
__THROW
 
	`__n⁄nuŒ
 ((1));

825 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

826 
__ª°ri˘
 
__©å
,

827 *
__ª°ri˘
 
__psh¨ed
)

828 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

831 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

832 
__psh¨ed
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1));

835 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


837 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


838 
__©å
, *
__ª°ri˘
 
__köd
)

839 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

844 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

845 
__THROW
 
	`__n⁄nuŒ
 ((1));

849 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

850 
__ª°ri˘
 
__©å
,

851 *
__ª°ri˘
 
__¥Ÿocﬁ
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__¥Ÿocﬁ
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

861 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

862 
__ª°ri˘
 
__©å
,

863 *
__ª°ri˘
 
__¥io˚ûög
)

864 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

867 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

868 
__¥io˚ûög
)

869 
__THROW
 
	`__n⁄nuŒ
 ((1));

871 #ifde‡
__USE_XOPEN2K


873 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

874 *
__robu°√ss
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

876 #ifde‡
__USE_GNU


877 
	$±hªad_muãx©å_gërobu°_≈
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

878 *
__robu°√ss
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

883 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

884 
__robu°√ss
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1));

886 #ifde‡
__USE_GNU


887 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

888 
__robu°√ss
)

889 
__THROW
 
	`__n⁄nuŒ
 ((1));

894 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


899 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

900 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


901 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

904 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

905 
__THROW
 
	`__n⁄nuŒ
 ((1));

908 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

909 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

912 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

913 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

915 #ifde‡
__USE_XOPEN2K


917 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

918 c⁄° 
time•ec
 *
__ª°ri˘


919 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

923 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

924 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

927 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

928 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

930 #ifde‡
__USE_XOPEN2K


932 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

933 c⁄° 
time•ec
 *
__ª°ri˘


934 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

938 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

939 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

945 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

946 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

950 
__THROW
 
	`__n⁄nuŒ
 ((1));

953 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

954 
__ª°ri˘
 
__©å
,

955 *
__ª°ri˘
 
__psh¨ed
)

956 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

959 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

960 
__psh¨ed
)

961 
__THROW
 
	`__n⁄nuŒ
 ((1));

964 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

965 
__ª°ri˘
 
__©å
,

966 *
__ª°ri˘
 
__¥ef
)

967 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

970 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

971 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

979 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

980 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

981 
__THROW
 
	`__n⁄nuŒ
 ((1));

984 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

985 
__THROW
 
	`__n⁄nuŒ
 ((1));

988 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

989 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

992 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

993 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1001 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1002 
	`__n⁄nuŒ
 ((1, 2));

1011 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1012 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1014 
	`__n⁄nuŒ
 ((1, 2, 3));

1019 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1024 
__THROW
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1028 
__ª°ri˘
 
__©å
,

1029 *
__ª°ri˘
 
__psh¨ed
)

1030 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1033 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1034 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 #ifde‡
__USE_XOPEN2K


1038 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1039 
__ª°ri˘
 
__©å
,

1040 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1044 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1045 
__˛ockid_t
 
__˛ock_id
)

1046 
__THROW
 
	`__n⁄nuŒ
 ((1));

1050 #ifde‡
__USE_XOPEN2K


1055 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1056 
__THROW
 
	`__n⁄nuŒ
 ((1));

1059 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1060 
__THROW
 
	`__n⁄nuŒ
 ((1));

1063 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1064 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1068 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1079 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1080 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1081 
__©å
, 
__cou¡
)

1082 
__THROW
 
	`__n⁄nuŒ
 ((1));

1085 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1086 
__THROW
 
	`__n⁄nuŒ
 ((1));

1089 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1090 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1094 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1095 
__THROW
 
	`__n⁄nuŒ
 ((1));

1098 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1099 
__THROW
 
	`__n⁄nuŒ
 ((1));

1102 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1103 
__ª°ri˘
 
__©å
,

1104 *
__ª°ri˘
 
__psh¨ed
)

1105 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1108 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1109 
__psh¨ed
)

1110 
__THROW
 
	`__n⁄nuŒ
 ((1));

1122 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1123 (*
__de°r_fun˘i⁄
) (*))

1124 
__THROW
 
	`__n⁄nuŒ
 ((1));

1127 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1130 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1133 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1134 c⁄° *
__poöãr
Ë
__THROW
 ;

1137 #ifde‡
__USE_XOPEN2K


1139 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1140 
__˛ockid_t
 *
__˛ock_id
)

1141 
__THROW
 
	`__n⁄nuŒ
 ((2));

1156 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1157 (*
__∑ª¡
) (),

1158 (*
__chûd
Ë()Ë
__THROW
;

1161 #ifde‡
__USE_EXTERN_INLINES


1163 
__exã∫_ölöe
 

1164 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1166  
__thªad1
 =
__thªad2
;

1167 
	}
}

1170 
	g__END_DECLS


	@/usr/include/wctype.h

23 #i‚de‡
_WCTYPE_H


25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 #i‚de‡
__√ed_iswxxx


29 
	#_WCTYPE_H
 1

	)

32 
	#__√ed_wöt_t


	)

33 
	~<wch¨.h
>

37 #i‚de‡
WEOF


38 
	#WEOF
 (0xffffffffu)

	)

41 #unde‡
__√ed_iswxxx


46 #i‚de‡
__iswxxx_deföed


47 
	#__iswxxx_deföed
 1

	)

49 
__BEGIN_NAMESPACE_C99


52 
	tw˘y≥_t
;

53 
	g__END_NAMESPACE_C99


55 #i‚de‡
_ISwbô


60 
	~<ídün.h
>

61 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


62 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

64 
	#_ISwbô
(
bô
) \

65 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

66 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

67 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

68 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

73 
	m__ISwuµî
 = 0,

74 
	m__ISwlowî
 = 1,

75 
	m__ISwÆpha
 = 2,

76 
	m__ISwdigô
 = 3,

77 
	m__ISwxdigô
 = 4,

78 
	m__ISw•a˚
 = 5,

79 
	m__ISw¥öt
 = 6,

80 
	m__ISwgøph
 = 7,

81 
	m__ISwbœnk
 = 8,

82 
	m__ISw˙ål
 = 9,

83 
	m__ISwpun˘
 = 10,

84 
	m__ISwÆnum
 = 11,

86 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

87 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

88 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

89 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

90 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

91 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

92 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

93 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

94 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

95 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

96 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

97 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

102 
__BEGIN_DECLS


104 
__BEGIN_NAMESPACE_C99


111 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

117 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

120 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

124 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

128 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

133 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

136 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

141 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

146 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

151 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

156 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

161 #ifde‡
__USE_ISOC99


162 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

171 
w˘y≥_t
 
	$w˘y≥
 (c⁄° *
__¥›îty
Ë
__THROW
;

175 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

176 
__END_NAMESPACE_C99


183 
__BEGIN_NAMESPACE_C99


186 c⁄° 
	t__öt32_t
 *
	tw˘øns_t
;

187 
__END_NAMESPACE_C99


188 #ifde‡
__USE_GNU


189 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

192 
__BEGIN_NAMESPACE_C99


194 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

197 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
__END_NAMESPACE_C99


200 
__END_DECLS


207 #ifde‡
_WCTYPE_H


213 
__BEGIN_DECLS


215 
__BEGIN_NAMESPACE_C99


218 
w˘øns_t
 
	$w˘øns
 (c⁄° *
__¥›îty
Ë
__THROW
;

221 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

222 
__END_NAMESPACE_C99


224 #ifde‡
__USE_XOPEN2K8


226 
	~<xloˇÀ.h
>

230 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

236 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

239 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

243 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

247 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

252 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

255 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

260 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

265 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

270 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

275 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

280 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

284 
w˘y≥_t
 
	$w˘y≥_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

285 
__THROW
;

289 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

290 
__THROW
;

298 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

301 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

305 
w˘øns_t
 
	$w˘øns_l
 (c⁄° *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

306 
__THROW
;

309 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

310 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

314 
__END_DECLS


	@/usr/include/bits/setjmp.h

19 #i‚de‡
_BITS_SETJMP_H


20 
	#_BITS_SETJMP_H
 1

	)

22 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


26 
	~<bôs/w‹dsize.h
>

28 #i‚de‡
_ASM


30 #i‡
__WORDSIZE
 == 64

31 
	t__jmp_buf
[8];

32 #ñi‡
deföed
 
__x86_64__


33 
__exãnsi⁄__
 
	t__jmp_buf
[8];

35 
	t__jmp_buf
[6];

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	~<°ddef.h
>

30 
	#__√ed_time_t


	)

31 
	#__√ed_time•ec


	)

32 
	~<time.h
>

34 #i‚de‡
__pid_t_deföed


35 
__pid_t
 
	tpid_t
;

36 
	#__pid_t_deföed


	)

41 
	~<bôs/sched.h
>

43 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

46 
__BEGIN_DECLS


49 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

50 
__THROW
;

53 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

56 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

57 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

60 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

63 
	$sched_yõld
 (Ë
__THROW
;

66 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

69 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

72 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

75 #ifde‡
__USE_GNU


77 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

78 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

79 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

80 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

81 
˝u£ç
)

	)

82 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

83 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

86 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

87 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

88 
˝u£ç
)

	)

89 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

90 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

93 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

94 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

97 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

98 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

99 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

101 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

103 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

105 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

107 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

110 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

111 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

112 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

116 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

117 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

120 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

121 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

124 
__END_DECLS


	@/usr/include/bits/sched.h

20 #i‚de‡
__√ed_sched∑øm


22 #i‚de‡
_SCHED_H


28 
	#SCHED_OTHER
 0

	)

29 
	#SCHED_FIFO
 1

	)

30 
	#SCHED_RR
 2

	)

31 #ifde‡
__USE_GNU


32 
	#SCHED_BATCH
 3

	)

33 
	#SCHED_IDLE
 5

	)

35 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

38 #ifde‡
__USE_GNU


40 
	#CSIGNAL
 0x000000f‡

	)

41 
	#CLONE_VM
 0x00000100

	)

42 
	#CLONE_FS
 0x00000200

	)

43 
	#CLONE_FILES
 0x00000400

	)

44 
	#CLONE_SIGHAND
 0x00000800

	)

45 
	#CLONE_PTRACE
 0x00002000

	)

46 
	#CLONE_VFORK
 0x00004000

	)

48 
	#CLONE_PARENT
 0x00008000

	)

50 
	#CLONE_THREAD
 0x00010000

	)

51 
	#CLONE_NEWNS
 0x00020000

	)

52 
	#CLONE_SYSVSEM
 0x00040000

	)

53 
	#CLONE_SETTLS
 0x00080000

	)

54 
	#CLONE_PARENT_SETTID
 0x00100000

	)

56 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

58 
	#CLONE_DETACHED
 0x00400000

	)

59 
	#CLONE_UNTRACED
 0x00800000

	)

61 
	#CLONE_CHILD_SETTID
 0x01000000

	)

63 
	#CLONE_NEWUTS
 0x04000000

	)

64 
	#CLONE_NEWIPC
 0x08000000

	)

65 
	#CLONE_NEWUSER
 0x10000000

	)

66 
	#CLONE_NEWPID
 0x20000000

	)

67 
	#CLONE_NEWNET
 0x40000000

	)

68 
	#CLONE_IO
 0x80000000

	)

72 
	ssched_∑øm


74 
	m__sched_¥i‹ôy
;

77 
	g__BEGIN_DECLS


79 #ifde‡
__USE_GNU


81 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

82 
__Êags
, *
__¨g
, ...Ë
__THROW
;

85 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

88 
	$sched_gë˝u
 (Ë
__THROW
;

91 
	$£äs
 (
__fd
, 
__n°y≥
Ë
__THROW
;

95 
__END_DECLS


99 #i‡!
deföed
 
__deföed_sched∑øm
 \

100 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

101 
	#__deföed_sched∑øm
 1

	)

103 
	s__sched_∑øm


105 
__sched_¥i‹ôy
;

107 #unde‡
__√ed_sched∑øm


111 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


112 
	#__˝u_£t_t_deföed


	)

114 
	#__CPU_SETSIZE
 1024

	)

115 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

118 
	t__˝u_mask
;

121 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

122 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

127 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

128 } 
	t˝u_£t_t
;

131 #i‡
	`__GNUC_PREREQ
 (2, 91)

132 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

133 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

135 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

137 
size_t
 
__i
; \

138 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

139 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

140 
__i
 = 0; __ò< 
__imax
; ++__i) \

141 
__bôs
[
__i
] = 0; \

142 
	}
} 0)

	)

144 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

145 (
__exãnsi⁄__
 \

146 ({ 
size_t
 
__˝u
 = (
˝u
); \

147 
__˝u
 / 8 < (
£tsize
) \

148 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

149 |
	`__CPUMASK
 (
__˝u
)) \

150 : 0; }))

	)

151 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

152 (
__exãnsi⁄__
 \

153 ({ 
size_t
 
__˝u
 = (
˝u
); \

154 
__˝u
 / 8 < (
£tsize
) \

155 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

156 &~
	`__CPUMASK
 (
__˝u
)) \

157 : 0; }))

	)

158 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

159 (
__exãnsi⁄__
 \

160 ({ 
size_t
 
__˝u
 = (
˝u
); \

161 
__˝u
 / 8 < (
£tsize
) \

162 ? ((((c⁄° 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

163 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

164 : 0; }))

	)

166 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

167 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

169 #i‡
__GNUC_PREREQ
 (2, 91)

170 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

171 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

173 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

174 (
__exãnsi⁄__
 \

175 ({ c⁄° 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

176 c⁄° 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

177 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

178 
size_t
 
__i
; \

179 
__i
 = 0; __ò< 
__imax
; ++__i) \

180 i‡(
__¨r1
[
__i
] !
__¨r2
[__i]) \

182 
__i
 =
__imax
; }))

	)

185 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

186 (
__exãnsi⁄__
 \

187 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

188 c⁄° 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

189 c⁄° 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

190 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

191 
size_t
 
__i
; \

192 
__i
 = 0; __ò< 
__imax
; ++__i) \

193 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

194 
__de°
; }))

	)

196 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

197 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

198 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

199 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

201 
__BEGIN_DECLS


203 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

204 
__THROW
;

205 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

206 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

208 
__END_DECLS


	@
1
.
1
/usr/include
139
3382
YUV420P-OpenGL-GLSLang.c
callbacks.c
callbacks.h
capabilities.c
capabilities.h
controls.c
controls.h
device.c
device.h
display.c
display.h
glutcam.c
glutcam.h
parseargs.c
parseargs.h
shader.c
shader.h
testpattern.c
testpattern.h
textfile.c
textfile.h
videosample_orig.c
yuv2rgb.c
/usr/include/GL/gl.h
/usr/include/GL/glew.h
/usr/include/GL/glext.h
/usr/include/GL/glu.h
/usr/include/GL/glut.h
/usr/include/GL/glx.h
/usr/include/SDL/SDL.h
/usr/include/X11/Xlib.h
/usr/include/asm/types.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/linux/videodev2.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/sys/ioctl.h
/usr/include/sys/mman.h
/usr/include/sys/stat.h
/usr/include/sys/time.h
/usr/include/sys/types.h
/usr/include/unistd.h
/usr/include/GL/glxext.h
/usr/include/X11/X.h
/usr/include/X11/Xfuncproto.h
/usr/include/X11/Xosdefs.h
/usr/include/X11/Xutil.h
/usr/include/alloca.h
/usr/include/asm-generic/int-ll64.h
/usr/include/bits/confname.h
/usr/include/bits/environments.h
/usr/include/bits/errno.h
/usr/include/bits/fcntl.h
/usr/include/bits/fcntl2.h
/usr/include/bits/ioctl-types.h
/usr/include/bits/ioctls.h
/usr/include/bits/mman.h
/usr/include/bits/posix_opt.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/stat.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/stdlib-bsearch.h
/usr/include/bits/stdlib-float.h
/usr/include/bits/stdlib-ldbl.h
/usr/include/bits/stdlib.h
/usr/include/bits/string.h
/usr/include/bits/string2.h
/usr/include/bits/string3.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/time.h
/usr/include/bits/types.h
/usr/include/bits/unistd.h
/usr/include/bits/waitflags.h
/usr/include/bits/waitstatus.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/inttypes.h
/usr/include/libio.h
/usr/include/linux/ioctl.h
/usr/include/linux/types.h
/usr/include/linux/v4l2-common.h
/usr/include/linux/v4l2-controls.h
/usr/include/stdint.h
/usr/include/sys/select.h
/usr/include/sys/sysmacros.h
/usr/include/sys/ttydefaults.h
/usr/include/time.h
/usr/include/xlocale.h
/usr/include/X11/Xmd.h
/usr/include/X11/keysym.h
/usr/include/_G_config.h
/usr/include/asm/bitsperlong.h
/usr/include/asm/ioctl.h
/usr/include/asm/ioctls.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/fcntl-linux.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/mman-linux.h
/usr/include/bits/select.h
/usr/include/bits/select2.h
/usr/include/bits/sigset.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/timex.h
/usr/include/bits/typesizes.h
/usr/include/bits/wchar.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/linux/errno.h
/usr/include/linux/posix_types.h
/usr/include/stdc-predef.h
/usr/include/sys/cdefs.h
/usr/include/X11/keysymdef.h
/usr/include/asm/errno.h
/usr/include/asm/posix_types.h
/usr/include/bits/byteswap-16.h
/usr/include/bits/libc-lock.h
/usr/include/bits/uio.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/asm-generic/errno-base.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar2.h
/usr/include/gnu/option-groups.h
/usr/include/pthread.h
/usr/include/wctype.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/bits/sched.h
